
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000178c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000384c  08017a94  08017a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b2e0  0801b2e0  0001d20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b2e0  0801b2e0  0001c2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b2e8  0801b2e8  0001d20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b2e8  0801b2e8  0001c2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b2ec  0801b2ec  0001c2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  0801b2f0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  0801b3bc  0001d0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  0801b45c  0001d16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000087cc  2000020c  0801b4fc  0001d20c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200089d8  0801b4fc  0001d9d8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001d20c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a93b  00000000  00000000  0001d23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000078fb  00000000  00000000  00047b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ed0  00000000  00000000  0004f478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001829  00000000  00000000  00051348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037e43  00000000  00000000  00052b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036eda  00000000  00000000  0008a9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b4a3  00000000  00000000  000c188e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ccd31  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000829c  00000000  00000000  001ccd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001d5010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017a7c 	.word	0x08017a7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08017a7c 	.word	0x08017a7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fc09 	bl	8001e54 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fc60 	bl	8000f0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f001 fda9 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fc50 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000228 	.word	0x20000228
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 f9c9 	bl	8004a7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fb33 	bl	8002d98 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fbe8 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000270 	.word	0x20000270
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 f8f9 	bl	8002984 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fbb8 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d0 	.word	0x200002d0
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3a      	ldr	r3, [pc, #232]	@ (80008d8 <MX_DMA_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a39      	ldr	r2, [pc, #228]	@ (80008d8 <MX_DMA_Init+0xf0>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b37      	ldr	r3, [pc, #220]	@ (80008d8 <MX_DMA_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b34      	ldr	r3, [pc, #208]	@ (80008d8 <MX_DMA_Init+0xf0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a33      	ldr	r2, [pc, #204]	@ (80008d8 <MX_DMA_Init+0xf0>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b31      	ldr	r3, [pc, #196]	@ (80008d8 <MX_DMA_Init+0xf0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	200b      	movs	r0, #11
 8000824:	f002 f877 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 f890 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200d      	movs	r0, #13
 8000834:	f002 f86f 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000838:	200d      	movs	r0, #13
 800083a:	f002 f888 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	200e      	movs	r0, #14
 8000844:	f002 f867 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000848:	200e      	movs	r0, #14
 800084a:	f002 f880 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2010      	movs	r0, #16
 8000854:	f002 f85f 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000858:	2010      	movs	r0, #16
 800085a:	f002 f878 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2011      	movs	r0, #17
 8000864:	f002 f857 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000868:	2011      	movs	r0, #17
 800086a:	f002 f870 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	202f      	movs	r0, #47	@ 0x2f
 8000874:	f002 f84f 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000878:	202f      	movs	r0, #47	@ 0x2f
 800087a:	f002 f868 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2038      	movs	r0, #56	@ 0x38
 8000884:	f002 f847 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000888:	2038      	movs	r0, #56	@ 0x38
 800088a:	f002 f860 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2039      	movs	r0, #57	@ 0x39
 8000894:	f002 f83f 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000898:	2039      	movs	r0, #57	@ 0x39
 800089a:	f002 f858 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	203a      	movs	r0, #58	@ 0x3a
 80008a4:	f002 f837 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008a8:	203a      	movs	r0, #58	@ 0x3a
 80008aa:	f002 f850 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	203b      	movs	r0, #59	@ 0x3b
 80008b4:	f002 f82f 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008b8:	203b      	movs	r0, #59	@ 0x3b
 80008ba:	f002 f848 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	203c      	movs	r0, #60	@ 0x3c
 80008c4:	f002 f827 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008c8:	203c      	movs	r0, #60	@ 0x3c
 80008ca:	f002 f840 	bl	800294e <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_GPIO_Init+0xa4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a26      	ldr	r2, [pc, #152]	@ (8000980 <MX_GPIO_Init+0xa4>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <MX_GPIO_Init+0xa4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_GPIO_Init+0xa4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a20      	ldr	r2, [pc, #128]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a1a      	ldr	r2, [pc, #104]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_GPIO_Init+0xa4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a0e      	ldr	r2, [pc, #56]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_GPIO_Init+0xa4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_GPIO_Init+0xa4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

}
 8000972:	bf00      	nop
 8000974:	371c      	adds	r7, #28
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_I2C1_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <MX_I2C1_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_I2C1_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <MX_I2C1_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_I2C1_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009c0:	f004 fa08 	bl	8004dd4 <HAL_I2C_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f000 fa9f 	bl	8000f0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009d2:	f006 fbab 	bl	800712c <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 fa96 	bl	8000f0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009e4:	f006 fbed 	bl	80071c2 <HAL_I2CEx_ConfigDigitalFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 fa8d 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200002f4 	.word	0x200002f4
 80009fc:	40005400 	.word	0x40005400
 8000a00:	20404768 	.word	0x20404768

08000a04 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <MX_I2C2_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <MX_I2C2_Init+0x7c>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a16:	2214      	movs	r2, #20
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a3e:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a40:	f004 f9c8 	bl	8004dd4 <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f000 fa5f 	bl	8000f0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a52:	f006 fb6b 	bl	800712c <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f000 fa56 	bl	8000f0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_I2C2_Init+0x74>)
 8000a64:	f006 fbad 	bl	80071c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 fa4d 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000348 	.word	0x20000348
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	20404768 	.word	0x20404768

08000a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0ac      	sub	sp, #176	@ 0xb0
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	2284      	movs	r2, #132	@ 0x84
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f016 f9a7 	bl	8016df8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a57      	ldr	r2, [pc, #348]	@ (8000c0c <HAL_I2C_MspInit+0x188>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	f040 80b9 	bne.w	8000c28 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ab6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000aba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac0:	f107 0318 	add.w	r3, r7, #24
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f007 f8a3 	bl	8007c10 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ad0:	f000 fa1c 	bl	8000f0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8000c10 <HAL_I2C_MspInit+0x18c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8000c10 <HAL_I2C_MspInit+0x18c>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8000c10 <HAL_I2C_MspInit+0x18c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	2312      	movs	r3, #18
 8000af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b06:	2304      	movs	r3, #4
 8000b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b10:	4619      	mov	r1, r3
 8000b12:	4840      	ldr	r0, [pc, #256]	@ (8000c14 <HAL_I2C_MspInit+0x190>)
 8000b14:	f003 ffb2 	bl	8004a7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	4b3d      	ldr	r3, [pc, #244]	@ (8000c10 <HAL_I2C_MspInit+0x18c>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a3c      	ldr	r2, [pc, #240]	@ (8000c10 <HAL_I2C_MspInit+0x18c>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b24:	4b3a      	ldr	r3, [pc, #232]	@ (8000c10 <HAL_I2C_MspInit+0x18c>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000b30:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b32:	4a3a      	ldr	r2, [pc, #232]	@ (8000c1c <HAL_I2C_MspInit+0x198>)
 8000b34:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000b36:	4b38      	ldr	r3, [pc, #224]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b3c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3e:	4b36      	ldr	r3, [pc, #216]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b44:	4b34      	ldr	r3, [pc, #208]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b4a:	4b33      	ldr	r3, [pc, #204]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b50:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b52:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b58:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b64:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000b70:	4829      	ldr	r0, [pc, #164]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b72:	f002 f911 	bl	8002d98 <HAL_DMA_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000b7c:	f000 f9c6 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a25      	ldr	r2, [pc, #148]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b86:	4a24      	ldr	r2, [pc, #144]	@ (8000c18 <HAL_I2C_MspInit+0x194>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000b8c:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000b8e:	4a25      	ldr	r2, [pc, #148]	@ (8000c24 <HAL_I2C_MspInit+0x1a0>)
 8000b90:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000b92:	4b23      	ldr	r3, [pc, #140]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000b94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b98:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000b9c:	2240      	movs	r2, #64	@ 0x40
 8000b9e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000ba8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000bcc:	4814      	ldr	r0, [pc, #80]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000bce:	f002 f8e3 	bl	8002d98 <HAL_DMA_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000bd8:	f000 f998 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000be0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <HAL_I2C_MspInit+0x19c>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	201f      	movs	r0, #31
 8000bee:	f001 fe92 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bf2:	201f      	movs	r0, #31
 8000bf4:	f001 feab 	bl	800294e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2020      	movs	r0, #32
 8000bfe:	f001 fe8a 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c02:	2020      	movs	r0, #32
 8000c04:	f001 fea3 	bl	800294e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c08:	e0be      	b.n	8000d88 <HAL_I2C_MspInit+0x304>
 8000c0a:	bf00      	nop
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400
 8000c18:	2000039c 	.word	0x2000039c
 8000c1c:	40026088 	.word	0x40026088
 8000c20:	200003fc 	.word	0x200003fc
 8000c24:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a58      	ldr	r2, [pc, #352]	@ (8000d90 <HAL_I2C_MspInit+0x30c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	f040 80aa 	bne.w	8000d88 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4618      	mov	r0, r3
 8000c46:	f006 ffe3 	bl	8007c10 <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000c50:	f000 f95c 	bl	8000f0c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <HAL_I2C_MspInit+0x310>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c58:	4a4e      	ldr	r2, [pc, #312]	@ (8000d94 <HAL_I2C_MspInit+0x310>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c60:	4b4c      	ldr	r3, [pc, #304]	@ (8000d94 <HAL_I2C_MspInit+0x310>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c74:	2312      	movs	r3, #18
 8000c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c86:	2304      	movs	r3, #4
 8000c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c90:	4619      	mov	r1, r3
 8000c92:	4841      	ldr	r0, [pc, #260]	@ (8000d98 <HAL_I2C_MspInit+0x314>)
 8000c94:	f003 fef2 	bl	8004a7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c98:	4b3e      	ldr	r3, [pc, #248]	@ (8000d94 <HAL_I2C_MspInit+0x310>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a3d      	ldr	r2, [pc, #244]	@ (8000d94 <HAL_I2C_MspInit+0x310>)
 8000c9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8000d94 <HAL_I2C_MspInit+0x310>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000cb2:	4a3b      	ldr	r2, [pc, #236]	@ (8000da0 <HAL_I2C_MspInit+0x31c>)
 8000cb4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000cb6:	4b39      	ldr	r3, [pc, #228]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000cb8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000cbc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cbe:	4b37      	ldr	r3, [pc, #220]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc4:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cca:	4b34      	ldr	r3, [pc, #208]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000ccc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd2:	4b32      	ldr	r3, [pc, #200]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd8:	4b30      	ldr	r3, [pc, #192]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000cde:	4b2f      	ldr	r3, [pc, #188]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cea:	4b2c      	ldr	r3, [pc, #176]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000cf0:	482a      	ldr	r0, [pc, #168]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000cf2:	f002 f851 	bl	8002d98 <HAL_DMA_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000cfc:	f000 f906 	bl	8000f0c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a26      	ldr	r2, [pc, #152]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000d04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d06:	4a25      	ldr	r2, [pc, #148]	@ (8000d9c <HAL_I2C_MspInit+0x318>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d0e:	4a26      	ldr	r2, [pc, #152]	@ (8000da8 <HAL_I2C_MspInit+0x324>)
 8000d10:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000d12:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d14:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d18:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d1a:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d1c:	2240      	movs	r2, #64	@ 0x40
 8000d1e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d20:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d2c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000d4c:	4815      	ldr	r0, [pc, #84]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d4e:	f002 f823 	bl	8002d98 <HAL_DMA_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8000d58:	f000 f8d8 	bl	8000f0c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a11      	ldr	r2, [pc, #68]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d60:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d62:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <HAL_I2C_MspInit+0x320>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2021      	movs	r0, #33	@ 0x21
 8000d6e:	f001 fdd2 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000d72:	2021      	movs	r0, #33	@ 0x21
 8000d74:	f001 fdeb 	bl	800294e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2022      	movs	r0, #34	@ 0x22
 8000d7e:	f001 fdca 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000d82:	2022      	movs	r0, #34	@ 0x22
 8000d84:	f001 fde3 	bl	800294e <HAL_NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	37b0      	adds	r7, #176	@ 0xb0
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40005800 	.word	0x40005800
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	2000045c 	.word	0x2000045c
 8000da0:	40026058 	.word	0x40026058
 8000da4:	200004bc 	.word	0x200004bc
 8000da8:	400260b8 	.word	0x400260b8

08000dac <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <_write+0x3c>)
 8000dba:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	4809      	ldr	r0, [pc, #36]	@ (8000dec <_write+0x40>)
 8000dc8:	f008 fc28 	bl	800961c <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8000dcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	6979      	ldr	r1, [r7, #20]
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <_write+0x40>)
 8000dd6:	f008 fc21 	bl	800961c <HAL_UART_Transmit>
	return len + 1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08017a94 	.word	0x08017a94
 8000dec:	20000878 	.word	0x20000878

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 ffad 	bl	8001d52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f81c 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f7ff fd6e 	bl	80008dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000e00:	f7ff fcf2 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e04:	f000 fcbc 	bl	8001780 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000e08:	f009 ff5c 	bl	800acc4 <MX_LWIP_Init>
  MX_CRC_Init();
 8000e0c:	f7ff fcaa 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8000e10:	f000 fc56 	bl	80016c0 <MX_UART4_Init>
  MX_UART5_Init();
 8000e14:	f000 fc84 	bl	8001720 <MX_UART5_Init>
  MX_I2C1_Init();
 8000e18:	f7ff fdb4 	bl	8000984 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e1c:	f7ff fdf2 	bl	8000a04 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000e20:	f000 f87a 	bl	8000f18 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000e24:	f000 f8b6 	bl	8000f94 <MX_SPI4_Init>
  MX_ADC1_Init();
 8000e28:	f7ff fbd8 	bl	80005dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 8000e2c:	f015 f8b0 	bl	8015f90 <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <main+0x40>

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	@ 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	@ 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f015 ffd8 	bl	8016df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <SystemClock_Config+0xd0>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a29      	ldr	r2, [pc, #164]	@ (8000f04 <SystemClock_Config+0xd0>)
 8000e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <SystemClock_Config+0xd0>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e70:	4b25      	ldr	r3, [pc, #148]	@ (8000f08 <SystemClock_Config+0xd4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a24      	ldr	r2, [pc, #144]	@ (8000f08 <SystemClock_Config+0xd4>)
 8000e76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b22      	ldr	r3, [pc, #136]	@ (8000f08 <SystemClock_Config+0xd4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e90:	2310      	movs	r3, #16
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e94:	2302      	movs	r3, #2
 8000e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ea0:	23d8      	movs	r3, #216	@ 0xd8
 8000ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fa23 	bl	80072fc <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 f826 	bl	8000f0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ec0:	f006 f9cc 	bl	800725c <HAL_PWREx_EnableOverDrive>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000eca:	f000 f81f 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ede:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	2107      	movs	r1, #7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fca9 	bl	8007844 <HAL_RCC_ClockConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ef8:	f000 f808 	bl	8000f0c <Error_Handler>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3750      	adds	r7, #80	@ 0x50
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40007000 	.word	0x40007000

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <Error_Handler+0x8>

08000f18 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <MX_SPI1_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f32:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f46:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f4e:	2218      	movs	r2, #24
 8000f50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f66:	2207      	movs	r2, #7
 8000f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f72:	2208      	movs	r2, #8
 8000f74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f78:	f007 fa3a 	bl	80083f0 <HAL_SPI_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f7ff ffc3 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000051c 	.word	0x2000051c
 8000f90:	40013000 	.word	0x40013000

08000f94 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000f9a:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <MX_SPI4_Init+0x6c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fb0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_SPI4_Init+0x68>)
 8000fea:	f007 fa01 	bl	80083f0 <HAL_SPI_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000ff4:	f7ff ff8a 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000580 	.word	0x20000580
 8001000:	40013400 	.word	0x40013400

08001004 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	@ 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4aa1      	ldr	r2, [pc, #644]	@ (80012a8 <HAL_SPI_MspInit+0x2a4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	f040 80a9 	bne.w	800117a <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001028:	4ba0      	ldr	r3, [pc, #640]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 800102a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102c:	4a9f      	ldr	r2, [pc, #636]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 800102e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001032:	6453      	str	r3, [r2, #68]	@ 0x44
 8001034:	4b9d      	ldr	r3, [pc, #628]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 8001036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001038:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b9a      	ldr	r3, [pc, #616]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	4a99      	ldr	r2, [pc, #612]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6313      	str	r3, [r2, #48]	@ 0x30
 800104c:	4b97      	ldr	r3, [pc, #604]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4b94      	ldr	r3, [pc, #592]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	4a93      	ldr	r2, [pc, #588]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	6313      	str	r3, [r2, #48]	@ 0x30
 8001064:	4b91      	ldr	r3, [pc, #580]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001070:	2370      	movs	r3, #112	@ 0x70
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001080:	2305      	movs	r3, #5
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4889      	ldr	r0, [pc, #548]	@ (80012b0 <HAL_SPI_MspInit+0x2ac>)
 800108c:	f003 fcf6 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001090:	2320      	movs	r3, #32
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a0:	2305      	movs	r3, #5
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4882      	ldr	r0, [pc, #520]	@ (80012b4 <HAL_SPI_MspInit+0x2b0>)
 80010ac:	f003 fce6 	bl	8004a7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80010b0:	4b81      	ldr	r3, [pc, #516]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010b2:	4a82      	ldr	r2, [pc, #520]	@ (80012bc <HAL_SPI_MspInit+0x2b8>)
 80010b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80010b6:	4b80      	ldr	r3, [pc, #512]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010b8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010be:	4b7e      	ldr	r3, [pc, #504]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c4:	4b7c      	ldr	r3, [pc, #496]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ca:	4b7b      	ldr	r3, [pc, #492]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d2:	4b79      	ldr	r3, [pc, #484]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d8:	4b77      	ldr	r3, [pc, #476]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80010de:	4b76      	ldr	r3, [pc, #472]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010e4:	4b74      	ldr	r3, [pc, #464]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ea:	4b73      	ldr	r3, [pc, #460]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80010f0:	4871      	ldr	r0, [pc, #452]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 80010f2:	f001 fe51 	bl	8002d98 <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80010fc:	f7ff ff06 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a6d      	ldr	r2, [pc, #436]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 8001104:	659a      	str	r2, [r3, #88]	@ 0x58
 8001106:	4a6c      	ldr	r2, [pc, #432]	@ (80012b8 <HAL_SPI_MspInit+0x2b4>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800110c:	4b6c      	ldr	r3, [pc, #432]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 800110e:	4a6d      	ldr	r2, [pc, #436]	@ (80012c4 <HAL_SPI_MspInit+0x2c0>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001112:	4b6b      	ldr	r3, [pc, #428]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001114:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001118:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800111a:	4b69      	ldr	r3, [pc, #420]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 800111c:	2240      	movs	r2, #64	@ 0x40
 800111e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b67      	ldr	r3, [pc, #412]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b66      	ldr	r3, [pc, #408]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001128:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112e:	4b64      	ldr	r3, [pc, #400]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001134:	4b62      	ldr	r3, [pc, #392]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800113a:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001140:	4b5f      	ldr	r3, [pc, #380]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001146:	4b5e      	ldr	r3, [pc, #376]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800114c:	485c      	ldr	r0, [pc, #368]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 800114e:	f001 fe23 	bl	8002d98 <HAL_DMA_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001158:	f7ff fed8 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a58      	ldr	r2, [pc, #352]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001160:	655a      	str	r2, [r3, #84]	@ 0x54
 8001162:	4a57      	ldr	r2, [pc, #348]	@ (80012c0 <HAL_SPI_MspInit+0x2bc>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2023      	movs	r0, #35	@ 0x23
 800116e:	f001 fbd2 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001172:	2023      	movs	r0, #35	@ 0x23
 8001174:	f001 fbeb 	bl	800294e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001178:	e091      	b.n	800129e <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a52      	ldr	r2, [pc, #328]	@ (80012c8 <HAL_SPI_MspInit+0x2c4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	f040 808c 	bne.w	800129e <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001186:	4b49      	ldr	r3, [pc, #292]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a48      	ldr	r2, [pc, #288]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 800118c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b46      	ldr	r3, [pc, #280]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800119e:	4b43      	ldr	r3, [pc, #268]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a42      	ldr	r2, [pc, #264]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <HAL_SPI_MspInit+0x2a8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011b6:	2374      	movs	r3, #116	@ 0x74
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80011c6:	2305      	movs	r3, #5
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	483e      	ldr	r0, [pc, #248]	@ (80012cc <HAL_SPI_MspInit+0x2c8>)
 80011d2:	f003 fc53 	bl	8004a7c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80011d6:	4b3e      	ldr	r3, [pc, #248]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 80011d8:	4a3e      	ldr	r2, [pc, #248]	@ (80012d4 <HAL_SPI_MspInit+0x2d0>)
 80011da:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80011dc:	4b3c      	ldr	r3, [pc, #240]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 80011de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011e2:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e4:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b39      	ldr	r3, [pc, #228]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 80011f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011f6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f8:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fe:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001204:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001210:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001216:	482e      	ldr	r0, [pc, #184]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 8001218:	f001 fdbe 	bl	8002d98 <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001222:	f7ff fe73 	bl	8000f0c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a29      	ldr	r2, [pc, #164]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 800122a:	659a      	str	r2, [r3, #88]	@ 0x58
 800122c:	4a28      	ldr	r2, [pc, #160]	@ (80012d0 <HAL_SPI_MspInit+0x2cc>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001232:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 8001234:	4a29      	ldr	r2, [pc, #164]	@ (80012dc <HAL_SPI_MspInit+0x2d8>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001238:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 800123a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800123e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b25      	ldr	r3, [pc, #148]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 8001242:	2240      	movs	r2, #64	@ 0x40
 8001244:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 800124e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001252:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001254:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001272:	4819      	ldr	r0, [pc, #100]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 8001274:	f001 fd90 	bl	8002d98 <HAL_DMA_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 800127e:	f7ff fe45 	bl	8000f0c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 8001286:	655a      	str	r2, [r3, #84]	@ 0x54
 8001288:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <HAL_SPI_MspInit+0x2d4>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2054      	movs	r0, #84	@ 0x54
 8001294:	f001 fb3f 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001298:	2054      	movs	r0, #84	@ 0x54
 800129a:	f001 fb58 	bl	800294e <HAL_NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3730      	adds	r7, #48	@ 0x30
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40013000 	.word	0x40013000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	200005e4 	.word	0x200005e4
 80012bc:	40026440 	.word	0x40026440
 80012c0:	20000644 	.word	0x20000644
 80012c4:	40026458 	.word	0x40026458
 80012c8:	40013400 	.word	0x40013400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	200006a4 	.word	0x200006a4
 80012d4:	40026410 	.word	0x40026410
 80012d8:	20000704 	.word	0x20000704
 80012dc:	40026428 	.word	0x40026428

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_MspInit+0x44>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001324 <HAL_MspInit+0x44>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <HAL_MspInit+0x44>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_MspInit+0x44>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <HAL_MspInit+0x44>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_MspInit+0x44>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <NMI_Handler+0x4>

08001330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <MemManage_Handler+0x4>

08001340 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <UsageFault_Handler+0x4>

08001350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137e:	f000 fd25 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <DMA1_Stream0_IRQHandler+0x10>)
 800138e:	f001 fea3 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000960 	.word	0x20000960

0800139c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <DMA1_Stream2_IRQHandler+0x10>)
 80013a2:	f001 fe99 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000900 	.word	0x20000900

080013b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <DMA1_Stream3_IRQHandler+0x10>)
 80013b6:	f001 fe8f 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000045c 	.word	0x2000045c

080013c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <DMA1_Stream5_IRQHandler+0x10>)
 80013ca:	f001 fe85 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000039c 	.word	0x2000039c

080013d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <DMA1_Stream6_IRQHandler+0x10>)
 80013de:	f001 fe7b 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003fc 	.word	0x200003fc

080013ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <I2C1_EV_IRQHandler+0x10>)
 80013f2:	f004 f931 	bl	8005658 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200002f4 	.word	0x200002f4

08001400 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <I2C1_ER_IRQHandler+0x10>)
 8001406:	f004 f941 	bl	800568c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200002f4 	.word	0x200002f4

08001414 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <I2C2_EV_IRQHandler+0x10>)
 800141a:	f004 f91d 	bl	8005658 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000348 	.word	0x20000348

08001428 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <I2C2_ER_IRQHandler+0x10>)
 800142e:	f004 f92d 	bl	800568c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000348 	.word	0x20000348

0800143c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <SPI1_IRQHandler+0x10>)
 8001442:	f007 fc15 	bl	8008c70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000051c 	.word	0x2000051c

08001450 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <USART3_IRQHandler+0x10>)
 8001456:	f008 fa0d 	bl	8009874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000878 	.word	0x20000878

08001464 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <DMA1_Stream7_IRQHandler+0x10>)
 800146a:	f001 fe35 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200004bc 	.word	0x200004bc

08001478 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <UART4_IRQHandler+0x10>)
 800147e:	f008 f9f9 	bl	8009874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000768 	.word	0x20000768

0800148c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <UART5_IRQHandler+0x10>)
 8001492:	f008 f9ef 	bl	8009874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200007f0 	.word	0x200007f0

080014a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80014a4:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <DMA2_Stream0_IRQHandler+0x10>)
 80014a6:	f001 fe17 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200006a4 	.word	0x200006a4

080014b4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <DMA2_Stream1_IRQHandler+0x10>)
 80014ba:	f001 fe0d 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000704 	.word	0x20000704

080014c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <DMA2_Stream2_IRQHandler+0x10>)
 80014ce:	f001 fe03 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200005e4 	.word	0x200005e4

080014dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <DMA2_Stream3_IRQHandler+0x10>)
 80014e2:	f001 fdf9 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000644 	.word	0x20000644

080014f0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <DMA2_Stream4_IRQHandler+0x10>)
 80014f6:	f001 fdef 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000270 	.word	0x20000270

08001504 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <ETH_IRQHandler+0x10>)
 800150a:	f002 fbcb 	bl	8003ca4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200053a0 	.word	0x200053a0

08001518 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <ETH_WKUP_IRQHandler+0x10>)
 800151e:	f002 fbc1 	bl	8003ca4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200053a0 	.word	0x200053a0

0800152c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <SPI4_IRQHandler+0x10>)
 8001532:	f007 fb9d 	bl	8008c70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000580 	.word	0x20000580

08001540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_kill>:

int _kill(int pid, int sig)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <_kill+0x20>)
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	200089c8 	.word	0x200089c8

08001574 <_exit>:

void _exit (int status)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800157c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffe5 	bl	8001550 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001586:	bf00      	nop
 8001588:	e7fd      	b.n	8001586 <_exit+0x12>

0800158a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e00a      	b.n	80015b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800159c:	f3af 8000 	nop.w
 80015a0:	4601      	mov	r1, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	60ba      	str	r2, [r7, #8]
 80015a8:	b2ca      	uxtb	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbf0      	blt.n	800159c <_read+0x12>
  }

  return len;
 80015ba:	687b      	ldr	r3, [r7, #4]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ec:	605a      	str	r2, [r3, #4]
  return 0;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_isatty>:

int _isatty(int file)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d205      	bcs.n	8001668 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <_sbrk+0x6c>)
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001666:	e009      	b.n	800167c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a06      	ldr	r2, [pc, #24]	@ (8001690 <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	20050000 	.word	0x20050000
 800168c:	00000400 	.word	0x00000400
 8001690:	20000764 	.word	0x20000764
 8001694:	200089d8 	.word	0x200089d8
 8001698:	200089c8 	.word	0x200089c8

0800169c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <SystemInit+0x20>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <SystemInit+0x20>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_UART4_Init+0x58>)
 80016c6:	4a15      	ldr	r2, [pc, #84]	@ (800171c <MX_UART4_Init+0x5c>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <MX_UART4_Init+0x58>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <MX_UART4_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <MX_UART4_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <MX_UART4_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_UART4_Init+0x58>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <MX_UART4_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_UART4_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <MX_UART4_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_UART4_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_UART4_Init+0x58>)
 8001704:	f007 ff3c 	bl	8009580 <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800170e:	f7ff fbfd 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000768 	.word	0x20000768
 800171c:	40004c00 	.word	0x40004c00

08001720 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001724:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <MX_UART5_Init+0x58>)
 8001726:	4a15      	ldr	r2, [pc, #84]	@ (800177c <MX_UART5_Init+0x5c>)
 8001728:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <MX_UART5_Init+0x58>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_UART5_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <MX_UART5_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <MX_UART5_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <MX_UART5_Init+0x58>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <MX_UART5_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_UART5_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MX_UART5_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <MX_UART5_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_UART5_Init+0x58>)
 8001764:	f007 ff0c 	bl	8009580 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800176e:	f7ff fbcd 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200007f0 	.word	0x200007f0
 800177c:	40005000 	.word	0x40005000

08001780 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 8001786:	4a15      	ldr	r2, [pc, #84]	@ (80017dc <MX_USART3_UART_Init+0x5c>)
 8001788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_USART3_UART_Init+0x58>)
 80017c4:	f007 fedc 	bl	8009580 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017ce:	f7ff fb9d 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000878 	.word	0x20000878
 80017dc:	40004800 	.word	0x40004800

080017e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0b0      	sub	sp, #192	@ 0xc0
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017fc:	2284      	movs	r2, #132	@ 0x84
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f015 faf9 	bl	8016df8 <memset>
  if(uartHandle->Instance==UART4)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4ab0      	ldr	r2, [pc, #704]	@ (8001acc <HAL_UART_MspInit+0x2ec>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d173      	bne.n	80018f8 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001816:	2300      	movs	r3, #0
 8001818:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800181e:	4618      	mov	r0, r3
 8001820:	f006 f9f6 	bl	8007c10 <HAL_RCCEx_PeriphCLKConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800182a:	f7ff fb6f 	bl	8000f0c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800182e:	4ba8      	ldr	r3, [pc, #672]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	4aa7      	ldr	r2, [pc, #668]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001834:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001838:	6413      	str	r3, [r2, #64]	@ 0x40
 800183a:	4ba5      	ldr	r3, [pc, #660]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4ba2      	ldr	r3, [pc, #648]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4aa1      	ldr	r2, [pc, #644]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b9f      	ldr	r3, [pc, #636]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800185e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001878:	2308      	movs	r3, #8
 800187a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001882:	4619      	mov	r1, r3
 8001884:	4893      	ldr	r0, [pc, #588]	@ (8001ad4 <HAL_UART_MspInit+0x2f4>)
 8001886:	f003 f8f9 	bl	8004a7c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800188a:	4b93      	ldr	r3, [pc, #588]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 800188c:	4a93      	ldr	r2, [pc, #588]	@ (8001adc <HAL_UART_MspInit+0x2fc>)
 800188e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001890:	4b91      	ldr	r3, [pc, #580]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 8001892:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001896:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001898:	4b8f      	ldr	r3, [pc, #572]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189e:	4b8e      	ldr	r3, [pc, #568]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018a4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018aa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ac:	4b8a      	ldr	r3, [pc, #552]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b2:	4b89      	ldr	r3, [pc, #548]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80018b8:	4b87      	ldr	r3, [pc, #540]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018be:	4b86      	ldr	r3, [pc, #536]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c4:	4b84      	ldr	r3, [pc, #528]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80018ca:	4883      	ldr	r0, [pc, #524]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018cc:	f001 fa64 	bl	8002d98 <HAL_DMA_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80018d6:	f7ff fb19 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018de:	675a      	str	r2, [r3, #116]	@ 0x74
 80018e0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad8 <HAL_UART_MspInit+0x2f8>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2034      	movs	r0, #52	@ 0x34
 80018ec:	f001 f813 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018f0:	2034      	movs	r0, #52	@ 0x34
 80018f2:	f001 f82c 	bl	800294e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018f6:	e0e4      	b.n	8001ac2 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a78      	ldr	r2, [pc, #480]	@ (8001ae0 <HAL_UART_MspInit+0x300>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	f040 8095 	bne.w	8001a2e <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800190a:	2300      	movs	r3, #0
 800190c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001912:	4618      	mov	r0, r3
 8001914:	f006 f97c 	bl	8007c10 <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_UART_MspInit+0x142>
      Error_Handler();
 800191e:	f7ff faf5 	bl	8000f0c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001922:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001928:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800192c:	6413      	str	r3, [r2, #64]	@ 0x40
 800192e:	4b68      	ldr	r3, [pc, #416]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b65      	ldr	r3, [pc, #404]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a64      	ldr	r2, [pc, #400]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b62      	ldr	r3, [pc, #392]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800196a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800196e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001984:	2308      	movs	r3, #8
 8001986:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800198e:	4619      	mov	r1, r3
 8001990:	4850      	ldr	r0, [pc, #320]	@ (8001ad4 <HAL_UART_MspInit+0x2f4>)
 8001992:	f003 f873 	bl	8004a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001996:	2304      	movs	r3, #4
 8001998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019ae:	2308      	movs	r3, #8
 80019b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019b8:	4619      	mov	r1, r3
 80019ba:	484a      	ldr	r0, [pc, #296]	@ (8001ae4 <HAL_UART_MspInit+0x304>)
 80019bc:	f003 f85e 	bl	8004a7c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80019c0:	4b49      	ldr	r3, [pc, #292]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019c2:	4a4a      	ldr	r2, [pc, #296]	@ (8001aec <HAL_UART_MspInit+0x30c>)
 80019c4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80019c6:	4b48      	ldr	r3, [pc, #288]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019cc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ce:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d4:	4b44      	ldr	r3, [pc, #272]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e2:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80019ee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019f4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019fa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001a00:	4839      	ldr	r0, [pc, #228]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 8001a02:	f001 f9c9 	bl	8002d98 <HAL_DMA_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8001a0c:	f7ff fa7e 	bl	8000f0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a35      	ldr	r2, [pc, #212]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 8001a14:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a16:	4a34      	ldr	r2, [pc, #208]	@ (8001ae8 <HAL_UART_MspInit+0x308>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2035      	movs	r0, #53	@ 0x35
 8001a22:	f000 ff78 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001a26:	2035      	movs	r0, #53	@ 0x35
 8001a28:	f000 ff91 	bl	800294e <HAL_NVIC_EnableIRQ>
}
 8001a2c:	e049      	b.n	8001ac2 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2f      	ldr	r2, [pc, #188]	@ (8001af0 <HAL_UART_MspInit+0x310>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d144      	bne.n	8001ac2 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a46:	4618      	mov	r0, r3
 8001a48:	f006 f8e2 	bl	8007c10 <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_UART_MspInit+0x276>
      Error_Handler();
 8001a52:	f7ff fa5b 	bl	8000f0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_UART_MspInit+0x2f0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <HAL_UART_MspInit+0x304>)
 8001aae:	f002 ffe5 	bl	8004a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2027      	movs	r0, #39	@ 0x27
 8001ab8:	f000 ff2d 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001abc:	2027      	movs	r0, #39	@ 0x27
 8001abe:	f000 ff46 	bl	800294e <HAL_NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	37c0      	adds	r7, #192	@ 0xc0
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40004c00 	.word	0x40004c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	20000900 	.word	0x20000900
 8001adc:	40026040 	.word	0x40026040
 8001ae0:	40005000 	.word	0x40005000
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	20000960 	.word	0x20000960
 8001aec:	40026010 	.word	0x40026010
 8001af0:	40004800 	.word	0x40004800

08001af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af8:	f7ff fdd0 	bl	800169c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001afe:	490d      	ldr	r1, [pc, #52]	@ (8001b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b00:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b14:	4c0a      	ldr	r4, [pc, #40]	@ (8001b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001b22:	f015 f9b7 	bl	8016e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b26:	f7ff f963 	bl	8000df0 <main>
  bx  lr    
 8001b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001b38:	0801b2f0 	.word	0x0801b2f0
  ldr r2, =_sbss
 8001b3c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001b40:	200089d8 	.word	0x200089d8

08001b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>

08001b46 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <LAN8742_RegisterBusIO+0x28>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <LAN8742_RegisterBusIO+0x28>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <LAN8742_RegisterBusIO+0x28>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b72:	e014      	b.n	8001b9e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d139      	bne.n	8001c3a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e01c      	b.n	8001c1a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f107 020c 	add.w	r2, r7, #12
 8001be8:	2112      	movs	r1, #18
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	4798      	blx	r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	da03      	bge.n	8001bfc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001bf4:	f06f 0304 	mvn.w	r3, #4
 8001bf8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001bfa:	e00b      	b.n	8001c14 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d105      	bne.n	8001c14 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
         break;
 8001c12:	e005      	b.n	8001c20 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b1f      	cmp	r3, #31
 8001c1e:	d9df      	bls.n	8001be0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b1f      	cmp	r3, #31
 8001c26:	d902      	bls.n	8001c2e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001c28:	f06f 0302 	mvn.w	r3, #2
 8001c2c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 }
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6810      	ldr	r0, [r2, #0]
 8001c58:	f107 020c 	add.w	r2, r7, #12
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4798      	blx	r3
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da02      	bge.n	8001c6c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c66:	f06f 0304 	mvn.w	r3, #4
 8001c6a:	e06e      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6810      	ldr	r0, [r2, #0]
 8001c74:	f107 020c 	add.w	r2, r7, #12
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4798      	blx	r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da02      	bge.n	8001c88 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c82:	f06f 0304 	mvn.w	r3, #4
 8001c86:	e060      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e059      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6810      	ldr	r0, [r2, #0]
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4798      	blx	r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da02      	bge.n	8001cb2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cac:	f06f 0304 	mvn.w	r3, #4
 8001cb0:	e04b      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d11b      	bne.n	8001cf4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <LAN8742_GetLinkState+0x90>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e03a      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e033      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001cec:	2304      	movs	r3, #4
 8001cee:	e02c      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cf0:	2305      	movs	r3, #5
 8001cf2:	e02a      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6810      	ldr	r0, [r2, #0]
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	211f      	movs	r1, #31
 8001d02:	4798      	blx	r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da02      	bge.n	8001d10 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001d0a:	f06f 0304 	mvn.w	r3, #4
 8001d0e:	e01c      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	e015      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 031c 	and.w	r3, r3, #28
 8001d24:	2b18      	cmp	r3, #24
 8001d26:	d101      	bne.n	8001d2c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e00e      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 031c 	and.w	r3, r3, #28
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d101      	bne.n	8001d3a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e007      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 031c 	and.w	r3, r3, #28
 8001d40:	2b14      	cmp	r3, #20
 8001d42:	d101      	bne.n	8001d48 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d44:	2304      	movs	r3, #4
 8001d46:	e000      	b.n	8001d4a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d48:	2305      	movs	r3, #5
    }
  }
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d56:	2003      	movs	r0, #3
 8001d58:	f000 fdd2 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5c:	200f      	movs	r0, #15
 8001d5e:	f000 f805 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d62:	f7ff fabd 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_InitTick+0x54>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_InitTick+0x58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fded 	bl	800296a <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00e      	b.n	8001db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d80a      	bhi.n	8001db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001da8:	f000 fdb5 	bl	8002916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	4a06      	ldr	r2, [pc, #24]	@ (8001dc8 <HAL_InitTick+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	200009c0 	.word	0x200009c0

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	200009c0 	.word	0x200009c0

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008

08001e54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e031      	b.n	8001ece <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fc04 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_ADC_Init+0x84>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fae0 	bl	8002468 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ebe:	e001      	b.n	8001ec4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	ffffeefd 	.word	0xffffeefd

08001edc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Start_DMA+0x22>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e0d6      	b.n	80020ac <HAL_ADC_Start_DMA+0x1d0>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d018      	beq.n	8001f46 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f24:	4b63      	ldr	r3, [pc, #396]	@ (80020b4 <HAL_ADC_Start_DMA+0x1d8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a63      	ldr	r2, [pc, #396]	@ (80020b8 <HAL_ADC_Start_DMA+0x1dc>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9a      	lsrs	r2, r3, #18
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f040 809e 	bne.w	8002092 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f5a:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <HAL_ADC_Start_DMA+0x1e0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f90:	d106      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f023 0206 	bic.w	r2, r3, #6
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f9e:	e002      	b.n	8001fa6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb2:	4a43      	ldr	r2, [pc, #268]	@ (80020c0 <HAL_ADC_Start_DMA+0x1e4>)
 8001fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fba:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <HAL_ADC_Start_DMA+0x1e8>)
 8001fbc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc2:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <HAL_ADC_Start_DMA+0x1ec>)
 8001fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001fce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001fde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	334c      	adds	r3, #76	@ 0x4c
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f000 ff78 	bl	8002ef4 <HAL_DMA_Start_IT>
 8002004:	4603      	mov	r3, r0
 8002006:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002008:	4b30      	ldr	r3, [pc, #192]	@ (80020cc <HAL_ADC_Start_DMA+0x1f0>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d143      	bne.n	80020aa <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	e03a      	b.n	80020aa <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a25      	ldr	r2, [pc, #148]	@ (80020d0 <HAL_ADC_Start_DMA+0x1f4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10e      	bne.n	800205c <HAL_ADC_Start_DMA+0x180>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800205a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_ADC_Start_DMA+0x1f0>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	d120      	bne.n	80020aa <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a19      	ldr	r2, [pc, #100]	@ (80020d4 <HAL_ADC_Start_DMA+0x1f8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d11b      	bne.n	80020aa <HAL_ADC_Start_DMA+0x1ce>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d114      	bne.n	80020aa <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	e00b      	b.n	80020aa <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f043 0210 	orr.w	r2, r3, #16
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000000 	.word	0x20000000
 80020b8:	431bde83 	.word	0x431bde83
 80020bc:	fffff8fe 	.word	0xfffff8fe
 80020c0:	0800265d 	.word	0x0800265d
 80020c4:	08002717 	.word	0x08002717
 80020c8:	08002733 	.word	0x08002733
 80020cc:	40012300 	.word	0x40012300
 80020d0:	40012000 	.word	0x40012000
 80020d4:	40012200 	.word	0x40012200

080020d8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Stop_DMA+0x1a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e046      	b.n	8002180 <HAL_ADC_Stop_DMA+0xa8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d12e      	bne.n	8002176 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002126:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d10f      	bne.n	8002156 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213a:	4618      	mov	r0, r3
 800213c:	f000 ff3a 	bl	8002fb4 <HAL_DMA_Abort>
 8002140:	4603      	mov	r3, r0
 8002142:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002164:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800216a:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <HAL_ADC_Stop_DMA+0xb0>)
 800216c:	4013      	ands	r3, r2
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	ffffeefe 	.word	0xffffeefe

0800218c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1c>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e13a      	b.n	8002446 <HAL_ADC_ConfigChannel+0x292>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b09      	cmp	r3, #9
 80021de:	d93a      	bls.n	8002256 <HAL_ADC_ConfigChannel+0xa2>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021e8:	d035      	beq.n	8002256 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68d9      	ldr	r1, [r3, #12]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	3b1e      	subs	r3, #30
 8002200:	2207      	movs	r2, #7
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a8f      	ldr	r2, [pc, #572]	@ (8002454 <HAL_ADC_ConfigChannel+0x2a0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10a      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68d9      	ldr	r1, [r3, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	061a      	lsls	r2, r3, #24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222e:	e039      	b.n	80022a4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68d9      	ldr	r1, [r3, #12]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	4603      	mov	r3, r0
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4403      	add	r3, r0
 8002248:	3b1e      	subs	r3, #30
 800224a:	409a      	lsls	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002254:	e026      	b.n	80022a4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6919      	ldr	r1, [r3, #16]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2207      	movs	r2, #7
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43da      	mvns	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	400a      	ands	r2, r1
 800227c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6919      	ldr	r1, [r3, #16]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	4618      	mov	r0, r3
 8002290:	4603      	mov	r3, r0
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4403      	add	r3, r0
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	409a      	lsls	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d824      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b05      	subs	r3, #5
 80022be:	221f      	movs	r2, #31
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43da      	mvns	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	400a      	ands	r2, r1
 80022cc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b05      	subs	r3, #5
 80022e8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80022f4:	e04c      	b.n	8002390 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d824      	bhi.n	8002348 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3b23      	subs	r3, #35	@ 0x23
 8002310:	221f      	movs	r2, #31
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	400a      	ands	r2, r1
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	4618      	mov	r0, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3b23      	subs	r3, #35	@ 0x23
 800233a:	fa00 f203 	lsl.w	r2, r0, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
 8002346:	e023      	b.n	8002390 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	3b41      	subs	r3, #65	@ 0x41
 800235a:	221f      	movs	r2, #31
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43da      	mvns	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	400a      	ands	r2, r1
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	4618      	mov	r0, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b41      	subs	r3, #65	@ 0x41
 8002384:	fa00 f203 	lsl.w	r2, r0, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a30      	ldr	r2, [pc, #192]	@ (8002458 <HAL_ADC_ConfigChannel+0x2a4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10a      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1fc>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80023a4:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a2c      	ldr	r2, [pc, #176]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 80023aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80023ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a28      	ldr	r2, [pc, #160]	@ (8002458 <HAL_ADC_ConfigChannel+0x2a4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10f      	bne.n	80023da <HAL_ADC_ConfigChannel+0x226>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d10b      	bne.n	80023da <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80023c2:	4b26      	ldr	r3, [pc, #152]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a25      	ldr	r2, [pc, #148]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 80023c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023ce:	4b23      	ldr	r3, [pc, #140]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a22      	ldr	r2, [pc, #136]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 80023d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <HAL_ADC_ConfigChannel+0x2a4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d12b      	bne.n	800243c <HAL_ADC_ConfigChannel+0x288>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <HAL_ADC_ConfigChannel+0x242>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b11      	cmp	r3, #17
 80023f4:	d122      	bne.n	800243c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4a18      	ldr	r2, [pc, #96]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 80023fc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002400:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a15      	ldr	r2, [pc, #84]	@ (800245c <HAL_ADC_ConfigChannel+0x2a8>)
 8002408:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800240c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <HAL_ADC_ConfigChannel+0x2a0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d111      	bne.n	800243c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_ADC_ConfigChannel+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a11      	ldr	r2, [pc, #68]	@ (8002464 <HAL_ADC_ConfigChannel+0x2b0>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	0c9a      	lsrs	r2, r3, #18
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800242e:	e002      	b.n	8002436 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3b01      	subs	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	10000012 	.word	0x10000012
 8002458:	40012000 	.word	0x40012000
 800245c:	40012300 	.word	0x40012300
 8002460:	20000000 	.word	0x20000000
 8002464:	431bde83 	.word	0x431bde83

08002468 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002470:	4b78      	ldr	r3, [pc, #480]	@ (8002654 <ADC_Init+0x1ec>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a77      	ldr	r2, [pc, #476]	@ (8002654 <ADC_Init+0x1ec>)
 8002476:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800247a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800247c:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <ADC_Init+0x1ec>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4973      	ldr	r1, [pc, #460]	@ (8002654 <ADC_Init+0x1ec>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	021a      	lsls	r2, r3, #8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6899      	ldr	r1, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	4a58      	ldr	r2, [pc, #352]	@ (8002658 <ADC_Init+0x1f0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d022      	beq.n	8002542 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800250a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6899      	ldr	r1, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800252c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6899      	ldr	r1, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	e00f      	b.n	8002562 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002560:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0202 	bic.w	r2, r2, #2
 8002570:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6899      	ldr	r1, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	005a      	lsls	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800259e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	3b01      	subs	r3, #1
 80025bc:	035a      	lsls	r2, r3, #13
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	e007      	b.n	80025d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	051a      	lsls	r2, r3, #20
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800260c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6899      	ldr	r1, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800261a:	025a      	lsls	r2, r3, #9
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6899      	ldr	r1, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	029a      	lsls	r2, r3, #10
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	609a      	str	r2, [r3, #8]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40012300 	.word	0x40012300
 8002658:	0f000001 	.word	0x0f000001

0800265c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002668:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002672:	2b00      	cmp	r3, #0
 8002674:	d13c      	bne.n	80026f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d12b      	bne.n	80026e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002694:	2b00      	cmp	r3, #0
 8002696:	d127      	bne.n	80026e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d119      	bne.n	80026e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0220 	bic.w	r2, r2, #32
 80026c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f013 fc35 	bl	8015f58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026ee:	e00e      	b.n	800270e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7ff fd4f 	bl	80021a0 <HAL_ADC_ErrorCallback>
}
 8002702:	e004      	b.n	800270e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002722:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff fd31 	bl	800218c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2240      	movs	r2, #64	@ 0x40
 8002744:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff fd24 	bl	80021a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	4313      	orrs	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	@ (80027a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	05fa0000 	.word	0x05fa0000

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	@ (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	@ (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	@ (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	@ 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	@ 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff29 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff3e 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff8e 	bl	8002854 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5d 	bl	8002800 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff31 	bl	80027c4 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa2 	bl	80028bc <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e054      	b.n	8002a40 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7f5b      	ldrb	r3, [r3, #29]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fd fefe 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	791b      	ldrb	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <HAL_CRC_Init+0xc4>)
 80029c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0218 	bic.w	r2, r2, #24
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	e00c      	b.n	80029ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	461a      	mov	r2, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f94c 	bl	8002c7c <HAL_CRCEx_Polynomial_Set>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e028      	b.n	8002a40 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	795b      	ldrb	r3, [r3, #5]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029fe:	611a      	str	r2, [r3, #16]
 8002a00:	e004      	b.n	8002a0c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6912      	ldr	r2, [r2, #16]
 8002a0a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	04c11db7 	.word	0x04c11db7

08002a4c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d006      	beq.n	8002a88 <HAL_CRC_Calculate+0x3c>
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d829      	bhi.n	8002ad2 <HAL_CRC_Calculate+0x86>
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d019      	beq.n	8002ab6 <HAL_CRC_Calculate+0x6a>
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d01e      	beq.n	8002ac4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002a86:	e024      	b.n	8002ad2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e00a      	b.n	8002aa4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	441a      	add	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3f0      	bcc.n	8002a8e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	613b      	str	r3, [r7, #16]
      break;
 8002ab4:	e00e      	b.n	8002ad4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f812 	bl	8002ae4 <CRC_Handle_8>
 8002ac0:	6138      	str	r0, [r7, #16]
      break;
 8002ac2:	e007      	b.n	8002ad4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f89d 	bl	8002c08 <CRC_Handle_16>
 8002ace:	6138      	str	r0, [r7, #16]
      break;
 8002ad0:	e000      	b.n	8002ad4 <HAL_CRC_Calculate+0x88>
      break;
 8002ad2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002ada:	693b      	ldr	r3, [r7, #16]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	e023      	b.n	8002b3e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3301      	adds	r3, #1
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	440b      	add	r3, r1
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b10:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	440b      	add	r3, r1
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002b20:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	3303      	adds	r3, #3
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	440b      	add	r3, r1
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002b34:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d3d6      	bcc.n	8002af6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d051      	beq.n	8002bf6 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	4413      	add	r3, r2
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	7013      	strb	r3, [r2, #0]
 8002b6c:	e043      	b.n	8002bf6 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d118      	bne.n	8002baa <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	4413      	add	r3, r2
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	440b      	add	r3, r1
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	8b7a      	ldrh	r2, [r7, #26]
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	e025      	b.n	8002bf6 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d120      	bne.n	8002bf6 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	3301      	adds	r3, #1
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	440b      	add	r3, r1
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	8b7a      	ldrh	r2, [r7, #26]
 8002be2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	3302      	adds	r3, #2
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4413      	add	r3, r2
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3724      	adds	r7, #36	@ 0x24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e013      	b.n	8002c42 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	041a      	lsls	r2, r3, #16
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	440b      	add	r3, r1
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d3e6      	bcc.n	8002c1a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	4413      	add	r3, r2
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002c8c:	231f      	movs	r3, #31
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
 8002c9e:	e063      	b.n	8002d68 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ca0:	bf00      	nop
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1e5a      	subs	r2, r3, #1
 8002ca6:	613a      	str	r2, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d009      	beq.n	8002cc0 <HAL_CRCEx_Polynomial_Set+0x44>
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b18      	cmp	r3, #24
 8002cc4:	d846      	bhi.n	8002d54 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ccc <HAL_CRCEx_Polynomial_Set+0x50>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002d5b 	.word	0x08002d5b
 8002cd0:	08002d55 	.word	0x08002d55
 8002cd4:	08002d55 	.word	0x08002d55
 8002cd8:	08002d55 	.word	0x08002d55
 8002cdc:	08002d55 	.word	0x08002d55
 8002ce0:	08002d55 	.word	0x08002d55
 8002ce4:	08002d55 	.word	0x08002d55
 8002ce8:	08002d55 	.word	0x08002d55
 8002cec:	08002d49 	.word	0x08002d49
 8002cf0:	08002d55 	.word	0x08002d55
 8002cf4:	08002d55 	.word	0x08002d55
 8002cf8:	08002d55 	.word	0x08002d55
 8002cfc:	08002d55 	.word	0x08002d55
 8002d00:	08002d55 	.word	0x08002d55
 8002d04:	08002d55 	.word	0x08002d55
 8002d08:	08002d55 	.word	0x08002d55
 8002d0c:	08002d3d 	.word	0x08002d3d
 8002d10:	08002d55 	.word	0x08002d55
 8002d14:	08002d55 	.word	0x08002d55
 8002d18:	08002d55 	.word	0x08002d55
 8002d1c:	08002d55 	.word	0x08002d55
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002d55 	.word	0x08002d55
 8002d28:	08002d55 	.word	0x08002d55
 8002d2c:	08002d31 	.word	0x08002d31
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d913      	bls.n	8002d5e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d3a:	e010      	b.n	8002d5e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b07      	cmp	r3, #7
 8002d40:	d90f      	bls.n	8002d62 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d46:	e00c      	b.n	8002d62 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	d90b      	bls.n	8002d66 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d52:	e008      	b.n	8002d66 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	75fb      	strb	r3, [r7, #23]
        break;
 8002d58:	e006      	b.n	8002d68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d5a:	bf00      	nop
 8002d5c:	e004      	b.n	8002d68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d5e:	bf00      	nop
 8002d60:	e002      	b.n	8002d68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d66:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 0118 	bic.w	r1, r3, #24
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff f826 	bl	8001df4 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e099      	b.n	8002ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd4:	e00f      	b.n	8002df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd6:	f7ff f80d 	bl	8001df4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d908      	bls.n	8002df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e078      	b.n	8002ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e8      	bne.n	8002dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ef0 <HAL_DMA_Init+0x158>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d107      	bne.n	8002e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f023 0307 	bic.w	r3, r3, #7
 8002e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d117      	bne.n	8002eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fb23 	bl	80034e8 <DMA_CheckFifoParam>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e016      	b.n	8002ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fada 	bl	800347c <DMA_CalcBaseAndBitshift>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	223f      	movs	r2, #63	@ 0x3f
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	f010803f 	.word	0xf010803f

08002ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_DMA_Start_IT+0x26>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e048      	b.n	8002fac <HAL_DMA_Start_IT+0xb8>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d137      	bne.n	8002f9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fa6c 	bl	8003420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	223f      	movs	r2, #63	@ 0x3f
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0216 	orr.w	r2, r2, #22
 8002f62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f72:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0208 	orr.w	r2, r2, #8
 8002f8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e005      	b.n	8002faa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fc2:	f7fe ff17 	bl	8001df4 <HAL_GetTick>
 8002fc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d008      	beq.n	8002fe6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2280      	movs	r2, #128	@ 0x80
 8002fd8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e052      	b.n	800308c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0216 	bic.w	r2, r2, #22
 8002ff4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003004:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_DMA_Abort+0x62>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0208 	bic.w	r2, r2, #8
 8003024:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003036:	e013      	b.n	8003060 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003038:	f7fe fedc 	bl	8001df4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b05      	cmp	r3, #5
 8003044:	d90c      	bls.n	8003060 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e015      	b.n	800308c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e4      	bne.n	8003038 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	223f      	movs	r2, #63	@ 0x3f
 8003074:	409a      	lsls	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2280      	movs	r2, #128	@ 0x80
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00c      	b.n	80030cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2205      	movs	r2, #5
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80030e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003320 <HAL_DMA_IRQHandler+0x248>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a8e      	ldr	r2, [pc, #568]	@ (8003324 <HAL_DMA_IRQHandler+0x24c>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	2208      	movs	r2, #8
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01a      	beq.n	8003144 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0204 	bic.w	r2, r2, #4
 800312a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	2208      	movs	r2, #8
 8003132:	409a      	lsls	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	2201      	movs	r2, #1
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003172:	f043 0202 	orr.w	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	2204      	movs	r2, #4
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d012      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	2204      	movs	r2, #4
 800319e:	409a      	lsls	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	f043 0204 	orr.w	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	2210      	movs	r2, #16
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d043      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d03c      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	2210      	movs	r2, #16
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d018      	beq.n	800321a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d024      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
 8003206:	e01f      	b.n	8003248 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01b      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
 8003218:	e016      	b.n	8003248 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0208 	bic.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	2220      	movs	r2, #32
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 808f 	beq.w	8003378 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8087 	beq.w	8003378 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326e:	2220      	movs	r2, #32
 8003270:	409a      	lsls	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b05      	cmp	r3, #5
 8003280:	d136      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0216 	bic.w	r2, r2, #22
 8003290:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x1da>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0208 	bic.w	r2, r2, #8
 80032c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	223f      	movs	r2, #63	@ 0x3f
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d07e      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
        }
        return;
 80032ee:	e079      	b.n	80033e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01d      	beq.n	800333a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003310:	2b00      	cmp	r3, #0
 8003312:	d031      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
 800331c:	e02c      	b.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
 800331e:	bf00      	nop
 8003320:	20000000 	.word	0x20000000
 8003324:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d023      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
 8003338:	e01e      	b.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10f      	bne.n	8003368 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0210 	bic.w	r2, r2, #16
 8003356:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337c:	2b00      	cmp	r3, #0
 800337e:	d032      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2205      	movs	r2, #5
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d307      	bcc.n	80033c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f2      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x2cc>
 80033be:	e000      	b.n	80033c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e000      	b.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033e4:	bf00      	nop
    }
  }
}
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033fa:	b2db      	uxtb	r3, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800343c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b40      	cmp	r3, #64	@ 0x40
 800344c:	d108      	bne.n	8003460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800345e:	e007      	b.n	8003470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	3b10      	subs	r3, #16
 800348c:	4a13      	ldr	r2, [pc, #76]	@ (80034dc <DMA_CalcBaseAndBitshift+0x60>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003496:	4a12      	ldr	r2, [pc, #72]	@ (80034e0 <DMA_CalcBaseAndBitshift+0x64>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d908      	bls.n	80034bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <DMA_CalcBaseAndBitshift+0x68>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80034ba:	e006      	b.n	80034ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b08      	ldr	r3, [pc, #32]	@ (80034e4 <DMA_CalcBaseAndBitshift+0x68>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	aaaaaaab 	.word	0xaaaaaaab
 80034e0:	0801b0e4 	.word	0x0801b0e4
 80034e4:	fffffc00 	.word	0xfffffc00

080034e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11f      	bne.n	8003542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d856      	bhi.n	80035b6 <DMA_CheckFifoParam+0xce>
 8003508:	a201      	add	r2, pc, #4	@ (adr r2, 8003510 <DMA_CheckFifoParam+0x28>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003521 	.word	0x08003521
 8003514:	08003533 	.word	0x08003533
 8003518:	08003521 	.word	0x08003521
 800351c:	080035b7 	.word	0x080035b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d046      	beq.n	80035ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003530:	e043      	b.n	80035ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800353a:	d140      	bne.n	80035be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003540:	e03d      	b.n	80035be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354a:	d121      	bne.n	8003590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d837      	bhi.n	80035c2 <DMA_CheckFifoParam+0xda>
 8003552:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <DMA_CheckFifoParam+0x70>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003569 	.word	0x08003569
 800355c:	0800356f 	.word	0x0800356f
 8003560:	08003569 	.word	0x08003569
 8003564:	08003581 	.word	0x08003581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      break;
 800356c:	e030      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d025      	beq.n	80035c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800357e:	e022      	b.n	80035c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003588:	d11f      	bne.n	80035ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800358e:	e01c      	b.n	80035ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d903      	bls.n	800359e <DMA_CheckFifoParam+0xb6>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d003      	beq.n	80035a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800359c:	e018      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
      break;
 80035a2:	e015      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e00b      	b.n	80035ce <DMA_CheckFifoParam+0xe6>
      break;
 80035b6:	bf00      	nop
 80035b8:	e00a      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ba:	bf00      	nop
 80035bc:	e008      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035be:	bf00      	nop
 80035c0:	e006      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035c2:	bf00      	nop
 80035c4:	e004      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ce:	bf00      	nop
    }
  } 
  
  return status; 
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop

080035e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e086      	b.n	8003700 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f007 fe8d 	bl	800b324 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360a:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <HAL_ETH_Init+0x128>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	4a3e      	ldr	r2, [pc, #248]	@ (8003708 <HAL_ETH_Init+0x128>)
 8003610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003614:	6453      	str	r3, [r2, #68]	@ 0x44
 8003616:	4b3c      	ldr	r3, [pc, #240]	@ (8003708 <HAL_ETH_Init+0x128>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003622:	4b3a      	ldr	r3, [pc, #232]	@ (800370c <HAL_ETH_Init+0x12c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4a39      	ldr	r2, [pc, #228]	@ (800370c <HAL_ETH_Init+0x12c>)
 8003628:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800362c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800362e:	4b37      	ldr	r3, [pc, #220]	@ (800370c <HAL_ETH_Init+0x12c>)
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4935      	ldr	r1, [pc, #212]	@ (800370c <HAL_ETH_Init+0x12c>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800363c:	4b33      	ldr	r3, [pc, #204]	@ (800370c <HAL_ETH_Init+0x12c>)
 800363e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003656:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003658:	f7fe fbcc 	bl	8001df4 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800365e:	e011      	b.n	8003684 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003660:	f7fe fbc8 	bl	8001df4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800366e:	d909      	bls.n	8003684 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2204      	movs	r2, #4
 8003674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	22e0      	movs	r2, #224	@ 0xe0
 800367c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e03d      	b.n	8003700 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e4      	bne.n	8003660 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 ff34 	bl	8004504 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 ffdf 	bl	8004660 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f001 f835 	bl	8004712 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	461a      	mov	r2, r3
 80036ae:	2100      	movs	r1, #0
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 ff9d 	bl	80045f0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80036c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003710 <HAL_ETH_Init+0x130>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80036ea:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2210      	movs	r2, #16
 80036fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	00020060 	.word	0x00020060

08003714 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003722:	2b10      	cmp	r3, #16
 8003724:	d15f      	bne.n	80037e6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2204      	movs	r2, #4
 8003738:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa2e 	bl	8003b9c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003748:	2001      	movs	r0, #1
 800374a:	f7fe fb5f 	bl	8001e0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003768:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800376c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	f043 0302 	orr.w	r3, r3, #2
 8003780:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003784:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fd58 	bl	800423c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80037a4:	2001      	movs	r0, #1
 80037a6:	f7fe fb31 	bl	8001e0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0204 	orr.w	r2, r2, #4
 80037c0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ca:	69d9      	ldr	r1, [r3, #28]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b07      	ldr	r3, [pc, #28]	@ (80037f0 <HAL_ETH_Start_IT+0xdc>)
 80037d2:	430b      	orrs	r3, r1
 80037d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037d8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2240      	movs	r2, #64	@ 0x40
 80037de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	0001a0c1 	.word	0x0001a0c1

080037f4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003802:	2b40      	cmp	r3, #64	@ 0x40
 8003804:	d16e      	bne.n	80038e4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b34      	ldr	r3, [pc, #208]	@ (80038f0 <HAL_ETH_Stop_IT+0xfc>)
 800381e:	400b      	ands	r3, r1
 8003820:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003824:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003838:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800383c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	f023 0302 	bic.w	r3, r3, #2
 8003850:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003854:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0204 	bic.w	r2, r2, #4
 8003864:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800386e:	2001      	movs	r0, #1
 8003870:	f7fe facc 	bl	8001e0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fcdd 	bl	800423c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0208 	bic.w	r2, r2, #8
 8003890:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800389a:	2001      	movs	r0, #1
 800389c:	f7fe fab6 	bl	8001e0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e00e      	b.n	80038cc <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	3212      	adds	r2, #18
 80038b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3301      	adds	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d9ed      	bls.n	80038ae <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2210      	movs	r2, #16
 80038dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	fffe5f3e 	.word	0xfffe5f3e

080038f4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07c      	b.n	8003a14 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003920:	2b40      	cmp	r3, #64	@ 0x40
 8003922:	d176      	bne.n	8003a12 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003924:	2200      	movs	r2, #0
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 ff61 	bl	80047f0 <ETH_Prepare_Tx_Descriptors>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	f043 0202 	orr.w	r2, r3, #2
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e065      	b.n	8003a14 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003948:	f3bf 8f4f 	dsb	sy
}
 800394c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3206      	adds	r2, #6
 8003956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	2b03      	cmp	r3, #3
 800396c:	d904      	bls.n	8003978 <HAL_ETH_Transmit+0x84>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	1f1a      	subs	r2, r3, #4
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3106      	adds	r1, #6
 8003984:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003988:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800398c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800398e:	f7fe fa31 	bl	8001df4 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003994:	e037      	b.n	8003a06 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d011      	beq.n	80039cc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f043 0208 	orr.w	r2, r3, #8
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e023      	b.n	8003a14 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d2:	d018      	beq.n	8003a06 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039d4:	f7fe fa0e 	bl	8001df4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d302      	bcc.n	80039ea <HAL_ETH_Transmit+0xf6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10d      	bne.n	8003a06 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003a00:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e006      	b.n	8003a14 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	dbc3      	blt.n	8003996 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0a4      	b.n	8003b92 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a4e:	2b40      	cmp	r3, #64	@ 0x40
 8003a50:	d001      	beq.n	8003a56 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e09d      	b.n	8003b92 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	3212      	adds	r2, #18
 8003a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a66:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a6c:	f1c3 0304 	rsb	r3, r3, #4
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003a72:	e066      	b.n	8003b42 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <HAL_ETH_ReadData+0x88>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d03c      	beq.n	8003b1e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ac6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003adc:	2301      	movs	r3, #1
 8003ade:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f007 fde3 	bl	800b6c8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	441a      	add	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d902      	bls.n	8003b30 <HAL_ETH_ReadData+0x114>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3b04      	subs	r3, #4
 8003b2e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	3212      	adds	r2, #18
 8003b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db06      	blt.n	8003b58 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d202      	bcs.n	8003b58 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d08d      	beq.n	8003a74 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	441a      	add	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f815 	bl	8003b9c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d108      	bne.n	8003b90 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	3212      	adds	r2, #18
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003bc4:	e042      	b.n	8003c4c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d112      	bne.n	8003bf4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f007 fd48 	bl	800b668 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	74fb      	strb	r3, [r7, #19]
 8003be2:	e007      	b.n	8003bf4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	461a      	mov	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d028      	beq.n	8003c4c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	4b26      	ldr	r3, [pc, #152]	@ (8003ca0 <ETH_UpdateDescriptor+0x104>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	6053      	str	r3, [r2, #4]
 8003c0e:	e005      	b.n	8003c1c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d902      	bls.n	8003c3a <ETH_UpdateDescriptor+0x9e>
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3b04      	subs	r3, #4
 8003c38:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	3212      	adds	r2, #18
 8003c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c44:	617b      	str	r3, [r7, #20]
      desccount--;
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <ETH_UpdateDescriptor+0xbc>
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1b6      	bne.n	8003bc6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d01a      	beq.n	8003c98 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3303      	adds	r3, #3
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003c6c:	f3bf 8f5f 	dmb	sy
}
 8003c70:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6919      	ldr	r1, [r3, #16]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	18ca      	adds	r2, r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	80004000 	.word	0x80004000

08003ca4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8003dfc <HAL_ETH_IRQHandler+0x158>)
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <HAL_ETH_IRQHandler+0x56>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b43      	ldr	r3, [pc, #268]	@ (8003e00 <HAL_ETH_IRQHandler+0x15c>)
 8003cf2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f891 	bl	8003e1c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00f      	beq.n	8003d24 <HAL_ETH_IRQHandler+0x80>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d16:	461a      	mov	r2, r3
 8003d18:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003d1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f872 	bl	8003e08 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d042      	beq.n	8003db4 <HAL_ETH_IRQHandler+0x110>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03d      	beq.n	8003db4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f043 0208 	orr.w	r2, r3, #8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01a      	beq.n	8003d88 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	4b29      	ldr	r3, [pc, #164]	@ (8003e04 <HAL_ETH_IRQHandler+0x160>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d7c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	22e0      	movs	r2, #224	@ 0xe0
 8003d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003d86:	e012      	b.n	8003dae <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003d96:	4013      	ands	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da6:	461a      	mov	r2, r3
 8003da8:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003dac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f83e 	bl	8003e30 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00e      	beq.n	8003ddc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f838 	bl	8003e44 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d006      	beq.n	8003df4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003de6:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_ETH_IRQHandler+0x158>)
 8003de8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dec:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f832 	bl	8003e58 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003df4:	bf00      	nop
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40013c00 	.word	0x40013c00
 8003e00:	00010040 	.word	0x00010040
 8003e04:	007e2000 	.word	0x007e2000

08003e08 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 031c 	and.w	r3, r3, #28
 8003e88:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	02db      	lsls	r3, r3, #11
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0302 	bic.w	r3, r3, #2
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003ebc:	f7fd ff9a 	bl	8001df4 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ec2:	e00d      	b.n	8003ee0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003ec4:	f7fd ff96 	bl	8001df4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed2:	d301      	bcc.n	8003ed8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e010      	b.n	8003efa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ec      	bne.n	8003ec4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 031c 	and.w	r3, r3, #28
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	02db      	lsls	r3, r3, #11
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	019b      	lsls	r3, r3, #6
 8003f30:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5c:	f7fd ff4a 	bl	8001df4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f62:	e00d      	b.n	8003f80 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003f64:	f7fd ff46 	bl	8001df4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f72:	d301      	bcc.n	8003f78 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e009      	b.n	8003f8c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ec      	bne.n	8003f64 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0e6      	b.n	8004176 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf0c      	ite	eq
 8004112:	2301      	moveq	r3, #1
 8004114:	2300      	movne	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	b29a      	uxth	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf14      	ite	ne
 8004166:	2301      	movne	r3, #1
 8004168:	2300      	moveq	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e00b      	b.n	80041ae <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800419c:	2b10      	cmp	r3, #16
 800419e:	d105      	bne.n	80041ac <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80041a0:	6839      	ldr	r1, [r7, #0]
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f870 	bl	8004288 <ETH_SetMACConfig>

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 031c 	bic.w	r3, r3, #28
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80041d0:	f003 fcea 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 80041d4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4a14      	ldr	r2, [pc, #80]	@ (800422c <HAL_ETH_SetMDIOClockRange+0x74>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d804      	bhi.n	80041e8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f043 0308 	orr.w	r3, r3, #8
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e019      	b.n	800421c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <HAL_ETH_SetMDIOClockRange+0x78>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d204      	bcs.n	80041fa <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f043 030c 	orr.w	r3, r3, #12
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e010      	b.n	800421c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004234 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d90c      	bls.n	800421c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4a0c      	ldr	r2, [pc, #48]	@ (8004238 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d804      	bhi.n	8004214 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e003      	b.n	800421c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f043 0310 	orr.w	r3, r3, #16
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	611a      	str	r2, [r3, #16]
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	02160ebf 	.word	0x02160ebf
 8004230:	03938700 	.word	0x03938700
 8004234:	05f5e0ff 	.word	0x05f5e0ff
 8004238:	08f0d17f 	.word	0x08f0d17f

0800423c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800425a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800425e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800426c:	2001      	movs	r0, #1
 800426e:	f7fd fdcd 	bl	8001e0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800427c:	6193      	str	r3, [r2, #24]
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4b53      	ldr	r3, [pc, #332]	@ (80043ec <ETH_SetMACConfig+0x164>)
 800429e:	4013      	ands	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	7b9b      	ldrb	r3, [r3, #14]
 80042a6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	7c12      	ldrb	r2, [r2, #16]
 80042ac:	2a00      	cmp	r2, #0
 80042ae:	d102      	bne.n	80042b6 <ETH_SetMACConfig+0x2e>
 80042b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80042b4:	e000      	b.n	80042b8 <ETH_SetMACConfig+0x30>
 80042b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80042b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	7c52      	ldrb	r2, [r2, #17]
 80042be:	2a00      	cmp	r2, #0
 80042c0:	d102      	bne.n	80042c8 <ETH_SetMACConfig+0x40>
 80042c2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80042c6:	e000      	b.n	80042ca <ETH_SetMACConfig+0x42>
 80042c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80042ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80042d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	7fdb      	ldrb	r3, [r3, #31]
 80042d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80042d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80042de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	7f92      	ldrb	r2, [r2, #30]
 80042e4:	2a00      	cmp	r2, #0
 80042e6:	d102      	bne.n	80042ee <ETH_SetMACConfig+0x66>
 80042e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042ec:	e000      	b.n	80042f0 <ETH_SetMACConfig+0x68>
 80042ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80042f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	7f1b      	ldrb	r3, [r3, #28]
 80042f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80042f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80042fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	791b      	ldrb	r3, [r3, #4]
 8004304:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004306:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800430e:	2a00      	cmp	r2, #0
 8004310:	d102      	bne.n	8004318 <ETH_SetMACConfig+0x90>
 8004312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004316:	e000      	b.n	800431a <ETH_SetMACConfig+0x92>
 8004318:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800431a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	7bdb      	ldrb	r3, [r3, #15]
 8004320:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004322:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004328:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004330:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004332:	4313      	orrs	r3, r2
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800434a:	2001      	movs	r0, #1
 800434c:	f7fd fd5e 	bl	8001e0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004376:	2a00      	cmp	r2, #0
 8004378:	d101      	bne.n	800437e <ETH_SetMACConfig+0xf6>
 800437a:	2280      	movs	r2, #128	@ 0x80
 800437c:	e000      	b.n	8004380 <ETH_SetMACConfig+0xf8>
 800437e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004380:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004386:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800438e:	2a01      	cmp	r2, #1
 8004390:	d101      	bne.n	8004396 <ETH_SetMACConfig+0x10e>
 8004392:	2208      	movs	r2, #8
 8004394:	e000      	b.n	8004398 <ETH_SetMACConfig+0x110>
 8004396:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004398:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80043a0:	2a01      	cmp	r2, #1
 80043a2:	d101      	bne.n	80043a8 <ETH_SetMACConfig+0x120>
 80043a4:	2204      	movs	r2, #4
 80043a6:	e000      	b.n	80043aa <ETH_SetMACConfig+0x122>
 80043a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80043aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80043b2:	2a01      	cmp	r2, #1
 80043b4:	d101      	bne.n	80043ba <ETH_SetMACConfig+0x132>
 80043b6:	2202      	movs	r2, #2
 80043b8:	e000      	b.n	80043bc <ETH_SetMACConfig+0x134>
 80043ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80043bc:	4313      	orrs	r3, r2
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043d4:	2001      	movs	r0, #1
 80043d6:	f7fd fd19 	bl	8001e0c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	619a      	str	r2, [r3, #24]
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	fd20810f 	.word	0xfd20810f

080043f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4b3d      	ldr	r3, [pc, #244]	@ (8004500 <ETH_SetDMAConfig+0x110>)
 800440a:	4013      	ands	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	7b1b      	ldrb	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <ETH_SetDMAConfig+0x2c>
 8004416:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800441a:	e000      	b.n	800441e <ETH_SetDMAConfig+0x2e>
 800441c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	7b5b      	ldrb	r3, [r3, #13]
 8004422:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004424:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	7f52      	ldrb	r2, [r2, #29]
 800442a:	2a00      	cmp	r2, #0
 800442c:	d102      	bne.n	8004434 <ETH_SetDMAConfig+0x44>
 800442e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004432:	e000      	b.n	8004436 <ETH_SetDMAConfig+0x46>
 8004434:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004436:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	7b9b      	ldrb	r3, [r3, #14]
 800443c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800443e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004444:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	7f1b      	ldrb	r3, [r3, #28]
 800444a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800444c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	7f9b      	ldrb	r3, [r3, #30]
 8004452:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004454:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800445a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004462:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004464:	4313      	orrs	r3, r2
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004474:	461a      	mov	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004486:	2001      	movs	r0, #1
 8004488:	f7fd fcc0 	bl	8001e0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004494:	461a      	mov	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	791b      	ldrb	r3, [r3, #4]
 800449e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80044a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80044aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80044b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80044ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80044c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80044c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044e4:	2001      	movs	r0, #1
 80044e6:	f7fd fc91 	bl	8001e0c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f2:	461a      	mov	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	f8de3f23 	.word	0xf8de3f23

08004504 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b0a6      	sub	sp, #152	@ 0x98
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004518:	2300      	movs	r3, #0
 800451a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800451c:	2300      	movs	r3, #0
 800451e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800453a:	2300      	movs	r3, #0
 800453c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004546:	2300      	movs	r3, #0
 8004548:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004550:	2300      	movs	r3, #0
 8004552:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004560:	2300      	movs	r3, #0
 8004562:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800456c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004570:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004578:	2300      	movs	r3, #0
 800457a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800457e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff fe7f 	bl	8004288 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800458a:	2301      	movs	r3, #1
 800458c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800458e:	2301      	movs	r3, #1
 8004590:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004598:	2301      	movs	r3, #1
 800459a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80045ac:	2300      	movs	r3, #0
 80045ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80045ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80045c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80045c4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80045c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045ca:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff05 	bl	80043f0 <ETH_SetDMAConfig>
}
 80045e6:	bf00      	nop
 80045e8:	3798      	adds	r7, #152	@ 0x98
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3305      	adds	r3, #5
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	3204      	adds	r2, #4
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4b11      	ldr	r3, [pc, #68]	@ (8004658 <ETH_MACAddressConfig+0x68>)
 8004612:	4413      	add	r3, r2
 8004614:	461a      	mov	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3303      	adds	r3, #3
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	061a      	lsls	r2, r3, #24
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3302      	adds	r3, #2
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3301      	adds	r3, #1
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	4313      	orrs	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4b06      	ldr	r3, [pc, #24]	@ (800465c <ETH_MACAddressConfig+0x6c>)
 8004642:	4413      	add	r3, r2
 8004644:	461a      	mov	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6013      	str	r3, [r2, #0]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40028040 	.word	0x40028040
 800465c:	40028044 	.word	0x40028044

08004660 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e03e      	b.n	80046ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68d9      	ldr	r1, [r3, #12]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	440b      	add	r3, r1
 800467e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2200      	movs	r2, #0
 8004696:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	3206      	adds	r2, #6
 80046a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d80c      	bhi.n	80046d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68d9      	ldr	r1, [r3, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	440b      	add	r3, r1
 80046c8:	461a      	mov	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e004      	b.n	80046da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	461a      	mov	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d9bd      	bls.n	800466e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004704:	611a      	str	r2, [r3, #16]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e048      	b.n	80047b2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6919      	ldr	r1, [r3, #16]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	440b      	add	r3, r1
 8004730:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2200      	movs	r2, #0
 800473c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2200      	movs	r2, #0
 8004748:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2200      	movs	r2, #0
 800474e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2200      	movs	r2, #0
 8004754:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800475c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	3212      	adds	r2, #18
 800477e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d80c      	bhi.n	80047a2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6919      	ldr	r1, [r3, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	440b      	add	r3, r1
 800479a:	461a      	mov	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	60da      	str	r2, [r3, #12]
 80047a0:	e004      	b.n	80047ac <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d9b3      	bls.n	8004720 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e2:	60da      	str	r2, [r3, #12]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b091      	sub	sp, #68	@ 0x44
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3318      	adds	r3, #24
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800482e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004832:	d007      	beq.n	8004844 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004838:	3304      	adds	r3, #4
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004844:	2302      	movs	r3, #2
 8004846:	e111      	b.n	8004a6c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484a:	3301      	adds	r3, #1
 800484c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800484e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4b86      	ldr	r3, [pc, #536]	@ (8004a78 <ETH_Prepare_Tx_Descriptors+0x288>)
 800485e:	4013      	ands	r3, r2
 8004860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004862:	6852      	ldr	r2, [r2, #4]
 8004864:	431a      	orrs	r2, r3
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	431a      	orrs	r2, r3
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80048ca:	e082      	b.n	80049d2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d006      	beq.n	80048ec <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e005      	b.n	80048f8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80048f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fa:	3301      	adds	r3, #1
 80048fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004900:	2b03      	cmp	r3, #3
 8004902:	d902      	bls.n	800490a <ETH_Prepare_Tx_Descriptors+0x11a>
 8004904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004906:	3b04      	subs	r3, #4
 8004908:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004912:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800491c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004920:	d007      	beq.n	8004932 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004926:	3304      	adds	r3, #4
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d029      	beq.n	8004986 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800493a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004940:	2300      	movs	r3, #0
 8004942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004944:	e019      	b.n	800497a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004946:	f3bf 8f5f 	dmb	sy
}
 800494a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495a:	3301      	adds	r3, #1
 800495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800495e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004960:	2b03      	cmp	r3, #3
 8004962:	d902      	bls.n	800496a <ETH_Prepare_Tx_Descriptors+0x17a>
 8004964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004966:	3b04      	subs	r3, #4
 8004968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800496e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004976:	3301      	adds	r3, #1
 8004978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800497a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800497c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497e:	429a      	cmp	r2, r3
 8004980:	d3e1      	bcc.n	8004946 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004982:	2302      	movs	r3, #2
 8004984:	e072      	b.n	8004a6c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004994:	3301      	adds	r3, #1
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800499e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	4b32      	ldr	r3, [pc, #200]	@ (8004a78 <ETH_Prepare_Tx_Descriptors+0x288>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b2:	6852      	ldr	r2, [r2, #4]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049bc:	3301      	adds	r3, #1
 80049be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80049c0:	f3bf 8f5f 	dmb	sy
}
 80049c4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f47f af78 	bne.w	80048cc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e005      	b.n	80049fc <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	6a3a      	ldr	r2, [r7, #32]
 8004a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a10:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004a12:	f3bf 8f5f 	dmb	sy
}
 8004a16:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a38:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3e:	613b      	str	r3, [r7, #16]
  return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	2301      	movs	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f383 8810 	msr	PRIMASK, r3
}
 8004a4e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	4413      	add	r3, r2
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3744      	adds	r7, #68	@ 0x44
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	ffffe000 	.word	0xffffe000

08004a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	@ 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	e175      	b.n	8004d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	f040 8164 	bne.w	8004d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d005      	beq.n	8004ad2 <HAL_GPIO_Init+0x56>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d130      	bne.n	8004b34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	2203      	movs	r2, #3
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b08:	2201      	movs	r2, #1
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 0201 	and.w	r2, r3, #1
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d017      	beq.n	8004b70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d123      	bne.n	8004bc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	08da      	lsrs	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3208      	adds	r2, #8
 8004b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	220f      	movs	r2, #15
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	08da      	lsrs	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3208      	adds	r2, #8
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	2203      	movs	r2, #3
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 0203 	and.w	r2, r3, #3
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80be 	beq.w	8004d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c06:	4b66      	ldr	r3, [pc, #408]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0a:	4a65      	ldr	r2, [pc, #404]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c12:	4b63      	ldr	r3, [pc, #396]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c1e:	4a61      	ldr	r2, [pc, #388]	@ (8004da4 <HAL_GPIO_Init+0x328>)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	3302      	adds	r3, #2
 8004c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	220f      	movs	r2, #15
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a58      	ldr	r2, [pc, #352]	@ (8004da8 <HAL_GPIO_Init+0x32c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d037      	beq.n	8004cba <HAL_GPIO_Init+0x23e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a57      	ldr	r2, [pc, #348]	@ (8004dac <HAL_GPIO_Init+0x330>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d031      	beq.n	8004cb6 <HAL_GPIO_Init+0x23a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a56      	ldr	r2, [pc, #344]	@ (8004db0 <HAL_GPIO_Init+0x334>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02b      	beq.n	8004cb2 <HAL_GPIO_Init+0x236>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a55      	ldr	r2, [pc, #340]	@ (8004db4 <HAL_GPIO_Init+0x338>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d025      	beq.n	8004cae <HAL_GPIO_Init+0x232>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a54      	ldr	r2, [pc, #336]	@ (8004db8 <HAL_GPIO_Init+0x33c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01f      	beq.n	8004caa <HAL_GPIO_Init+0x22e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a53      	ldr	r2, [pc, #332]	@ (8004dbc <HAL_GPIO_Init+0x340>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d019      	beq.n	8004ca6 <HAL_GPIO_Init+0x22a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a52      	ldr	r2, [pc, #328]	@ (8004dc0 <HAL_GPIO_Init+0x344>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_GPIO_Init+0x226>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a51      	ldr	r2, [pc, #324]	@ (8004dc4 <HAL_GPIO_Init+0x348>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00d      	beq.n	8004c9e <HAL_GPIO_Init+0x222>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a50      	ldr	r2, [pc, #320]	@ (8004dc8 <HAL_GPIO_Init+0x34c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <HAL_GPIO_Init+0x21e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_GPIO_Init+0x21a>
 8004c92:	2309      	movs	r3, #9
 8004c94:	e012      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c96:	230a      	movs	r3, #10
 8004c98:	e010      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	e00e      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c9e:	2307      	movs	r3, #7
 8004ca0:	e00c      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e00a      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004ca6:	2305      	movs	r3, #5
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	@ (8004da4 <HAL_GPIO_Init+0x328>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cda:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cfe:	4a34      	ldr	r2, [pc, #208]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d04:	4b32      	ldr	r3, [pc, #200]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d28:	4a29      	ldr	r2, [pc, #164]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d2e:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d52:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d58:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d7c:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f ae86 	bls.w	8004a9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	@ 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40021800 	.word	0x40021800
 8004dc4:	40021c00 	.word	0x40021c00
 8004dc8:	40022000 	.word	0x40022000
 8004dcc:	40022400 	.word	0x40022400
 8004dd0:	40013c00 	.word	0x40013c00

08004dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e08b      	b.n	8004efe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fb fe42 	bl	8000a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2224      	movs	r2, #36	@ 0x24
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d107      	bne.n	8004e4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	e006      	b.n	8004e5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d108      	bne.n	8004e76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	e007      	b.n	8004e86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b1d      	ldr	r3, [pc, #116]	@ (8004f08 <HAL_I2C_Init+0x134>)
 8004e92:	430b      	orrs	r3, r1
 8004e94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69d9      	ldr	r1, [r3, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1a      	ldr	r2, [r3, #32]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	02008000 	.word	0x02008000

08004f0c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	@ 0x28
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	461a      	mov	r2, r3
 8004f18:	460b      	mov	r3, r1
 8004f1a:	817b      	strh	r3, [r7, #10]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	f040 80ef 	bne.w	8005110 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f40:	d101      	bne.n	8004f46 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0e5      	b.n	8005112 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_I2C_Master_Transmit_DMA+0x48>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0de      	b.n	8005112 <HAL_I2C_Master_Transmit_DMA+0x206>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2221      	movs	r2, #33	@ 0x21
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2210      	movs	r2, #16
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	893a      	ldrh	r2, [r7, #8]
 8004f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a66      	ldr	r2, [pc, #408]	@ (800511c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8004f82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a66      	ldr	r2, [pc, #408]	@ (8005120 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2bff      	cmp	r3, #255	@ 0xff
 8004f92:	d906      	bls.n	8004fa2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	22ff      	movs	r2, #255	@ 0xff
 8004f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	e007      	b.n	8004fb2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004fac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fb0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01a      	beq.n	8004ff0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	781a      	ldrb	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d074      	beq.n	80050e2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d022      	beq.n	8005046 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	4a47      	ldr	r2, [pc, #284]	@ (8005124 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005006:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	4a46      	ldr	r2, [pc, #280]	@ (8005128 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800500e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005014:	2200      	movs	r2, #0
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	2200      	movs	r2, #0
 800501e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005030:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005036:	f7fd ff5d 	bl	8002ef4 <HAL_DMA_Start_IT>
 800503a:	4603      	mov	r3, r0
 800503c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d13a      	bne.n	80050ba <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005044:	e013      	b.n	800506e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e051      	b.n	8005112 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005072:	b2db      	uxtb	r3, r3
 8005074:	3301      	adds	r3, #1
 8005076:	b2da      	uxtb	r2, r3
 8005078:	8979      	ldrh	r1, [r7, #10]
 800507a:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f001 ff3f 	bl	8006f04 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80050a0:	2110      	movs	r1, #16
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f001 ff60 	bl	8006f68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e028      	b.n	800510c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ce:	f043 0210 	orr.w	r2, r3, #16
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e017      	b.n	8005112 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a12      	ldr	r2, [pc, #72]	@ (8005130 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80050e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	8979      	ldrh	r1, [r7, #10]
 80050ee:	4b0f      	ldr	r3, [pc, #60]	@ (800512c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f001 ff04 	bl	8006f04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005104:	2101      	movs	r1, #1
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f001 ff2e 	bl	8006f68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005110:	2302      	movs	r3, #2
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	ffff0000 	.word	0xffff0000
 8005120:	08005c5b 	.word	0x08005c5b
 8005124:	08006c87 	.word	0x08006c87
 8005128:	08006e55 	.word	0x08006e55
 800512c:	80002000 	.word	0x80002000
 8005130:	080057cf 	.word	0x080057cf

08005134 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	461a      	mov	r2, r3
 8005140:	460b      	mov	r3, r1
 8005142:	817b      	strh	r3, [r7, #10]
 8005144:	4613      	mov	r3, r2
 8005146:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	f040 80cd 	bne.w	80052f0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005164:	d101      	bne.n	800516a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005166:	2302      	movs	r3, #2
 8005168:	e0c3      	b.n	80052f2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_I2C_Master_Receive_DMA+0x44>
 8005174:	2302      	movs	r3, #2
 8005176:	e0bc      	b.n	80052f2 <HAL_I2C_Master_Receive_DMA+0x1be>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2222      	movs	r2, #34	@ 0x22
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2210      	movs	r2, #16
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	893a      	ldrh	r2, [r7, #8]
 80051a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a55      	ldr	r2, [pc, #340]	@ (80052fc <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80051a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a55      	ldr	r2, [pc, #340]	@ (8005300 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80051ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2bff      	cmp	r3, #255	@ 0xff
 80051b6:	d906      	bls.n	80051c6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e007      	b.n	80051d6 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d070      	beq.n	80052c0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d020      	beq.n	8005228 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ea:	4a46      	ldr	r2, [pc, #280]	@ (8005304 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80051ec:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f2:	4a45      	ldr	r2, [pc, #276]	@ (8005308 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80051f4:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	2200      	movs	r2, #0
 80051fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005202:	2200      	movs	r2, #0
 8005204:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3324      	adds	r3, #36	@ 0x24
 8005210:	4619      	mov	r1, r3
 8005212:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005218:	f7fd fe6c 	bl	8002ef4 <HAL_DMA_Start_IT>
 800521c:	4603      	mov	r3, r0
 800521e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d138      	bne.n	8005298 <HAL_I2C_Master_Receive_DMA+0x164>
 8005226:	e013      	b.n	8005250 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e050      	b.n	80052f2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005254:	b2da      	uxtb	r2, r3
 8005256:	8979      	ldrh	r1, [r7, #10]
 8005258:	4b2c      	ldr	r3, [pc, #176]	@ (800530c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f001 fe50 	bl	8006f04 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800527e:	2110      	movs	r1, #16
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f001 fe71 	bl	8006f68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e029      	b.n	80052ec <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ac:	f043 0210 	orr.w	r2, r3, #16
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e018      	b.n	80052f2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80052c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	8979      	ldrh	r1, [r7, #10]
 80052ce:	4b0f      	ldr	r3, [pc, #60]	@ (800530c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f001 fe14 	bl	8006f04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052e4:	2102      	movs	r1, #2
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f001 fe3e 	bl	8006f68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e000      	b.n	80052f2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
  }
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	ffff0000 	.word	0xffff0000
 8005300:	08005c5b 	.word	0x08005c5b
 8005304:	08006d5d 	.word	0x08006d5d
 8005308:	08006e55 	.word	0x08006e55
 800530c:	80002400 	.word	0x80002400
 8005310:	080057cf 	.word	0x080057cf

08005314 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b20      	cmp	r3, #32
 800532c:	f040 80d1 	bne.w	80054d2 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d105      	bne.n	8005348 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0c5      	b.n	80054d4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005352:	2302      	movs	r3, #2
 8005354:	e0be      	b.n	80054d4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2221      	movs	r2, #33	@ 0x21
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a53      	ldr	r2, [pc, #332]	@ (80054dc <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 800538e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a53      	ldr	r2, [pc, #332]	@ (80054e0 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 8005394:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800539e:	d117      	bne.n	80053d0 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d068      	beq.n	80054ac <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d022      	beq.n	8005428 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	4a3f      	ldr	r2, [pc, #252]	@ (80054e4 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 80053e8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ee:	4a3e      	ldr	r2, [pc, #248]	@ (80054e8 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 80053f0:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	2200      	movs	r2, #0
 80053f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	2200      	movs	r2, #0
 8005400:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800540a:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005412:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005418:	f7fd fd6c 	bl	8002ef4 <HAL_DMA_Start_IT>
 800541c:	4603      	mov	r3, r0
 800541e:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d12e      	bne.n	8005484 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005426:	e013      	b.n	8005450 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2228      	movs	r2, #40	@ 0x28
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e041      	b.n	80054d4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800545e:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005468:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f001 fd7b 	bl	8006f68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e024      	b.n	80054ce <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2228      	movs	r2, #40	@ 0x28
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005498:	f043 0210 	orr.w	r2, r3, #16
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e013      	b.n	80054d4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ba:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80054c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f001 fd4d 	bl	8006f68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e000      	b.n	80054d4 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
  }
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	ffff0000 	.word	0xffff0000
 80054e0:	080060fd 	.word	0x080060fd
 80054e4:	08006d1d 	.word	0x08006d1d
 80054e8:	08006e55 	.word	0x08006e55

080054ec <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b20      	cmp	r3, #32
 8005504:	f040 809b 	bne.w	800563e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_I2C_Slave_Receive_DMA+0x28>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800551a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e08f      	b.n	8005640 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_I2C_Slave_Receive_DMA+0x42>
 800552a:	2302      	movs	r3, #2
 800552c:	e088      	b.n	8005640 <HAL_I2C_Slave_Receive_DMA+0x154>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2222      	movs	r2, #34	@ 0x22
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a38      	ldr	r2, [pc, #224]	@ (8005648 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005566:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a38      	ldr	r2, [pc, #224]	@ (800564c <HAL_I2C_Slave_Receive_DMA+0x160>)
 800556c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d020      	beq.n	80055b8 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	4a35      	ldr	r2, [pc, #212]	@ (8005650 <HAL_I2C_Slave_Receive_DMA+0x164>)
 800557c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005582:	4a34      	ldr	r2, [pc, #208]	@ (8005654 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005584:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558a:	2200      	movs	r2, #0
 800558c:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005592:	2200      	movs	r2, #0
 8005594:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3324      	adds	r3, #36	@ 0x24
 80055a0:	4619      	mov	r1, r3
 80055a2:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80055a8:	f7fd fca4 	bl	8002ef4 <HAL_DMA_Start_IT>
 80055ac:	4603      	mov	r3, r0
 80055ae:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d12f      	bne.n	8005616 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80055b6:	e013      	b.n	80055e0 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2228      	movs	r2, #40	@ 0x28
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e02f      	b.n	8005640 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055ee:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80055f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f001 fcb3 	bl	8006f68 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005610:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e014      	b.n	8005640 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2228      	movs	r2, #40	@ 0x28
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562a:	f043 0210 	orr.w	r2, r3, #16
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	ffff0000 	.word	0xffff0000
 800564c:	080060fd 	.word	0x080060fd
 8005650:	08006e0f 	.word	0x08006e0f
 8005654:	08006e55 	.word	0x08006e55

08005658 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
  }
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	09db      	lsrs	r3, r3, #7
 80056b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c0:	f043 0201 	orr.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	0a9b      	lsrs	r3, r3, #10
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	09db      	lsrs	r3, r3, #7
 80056e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ee:	f043 0208 	orr.w	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	0a5b      	lsrs	r3, r3, #9
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	09db      	lsrs	r3, r3, #7
 8005710:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571c:	f043 0202 	orr.w	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800572c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005732:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 030b 	and.w	r3, r3, #11
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 f965 	bl	8006a10 <I2C_ITError>
  }
}
 8005746:	bf00      	nop
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	70fb      	strb	r3, [r7, #3]
 800575a:	4613      	mov	r3, r2
 800575c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b088      	sub	sp, #32
 80057d2:	af02      	add	r7, sp, #8
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <I2C_Master_ISR_IT+0x1e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e12e      	b.n	8005a4a <I2C_Master_ISR_IT+0x27c>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d013      	beq.n	8005828 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2210      	movs	r2, #16
 8005812:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005818:	f043 0204 	orr.w	r2, r3, #4
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f001 fa0c 	bl	8006c3e <I2C_Flush_TXDR>
 8005826:	e0fb      	b.n	8005a20 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	089b      	lsrs	r3, r3, #2
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d023      	beq.n	800587c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	089b      	lsrs	r3, r3, #2
 8005838:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01d      	beq.n	800587c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0304 	bic.w	r3, r3, #4
 8005846:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800587a:	e0d1      	b.n	8005a20 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	099b      	lsrs	r3, r3, #6
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d12a      	bne.n	80058de <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005890:	2b00      	cmp	r3, #0
 8005892:	d024      	beq.n	80058de <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01e      	beq.n	80058de <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80ba 	beq.w	8005a20 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	781a      	ldrb	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80058dc:	e0a0      	b.n	8005a20 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	09db      	lsrs	r3, r3, #7
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d06b      	beq.n	80059c2 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	099b      	lsrs	r3, r3, #6
 80058ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d065      	beq.n	80059c2 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d04e      	beq.n	800599e <I2C_Master_ISR_IT+0x1d0>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005904:	2b00      	cmp	r3, #0
 8005906:	d14a      	bne.n	800599e <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005914:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	2bff      	cmp	r3, #255	@ 0xff
 800591e:	d91c      	bls.n	800595a <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d103      	bne.n	800593c <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	851a      	strh	r2, [r3, #40]	@ 0x28
 800593a:	e002      	b.n	8005942 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	22ff      	movs	r2, #255	@ 0xff
 8005940:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005946:	b2da      	uxtb	r2, r3
 8005948:	8a79      	ldrh	r1, [r7, #18]
 800594a:	2300      	movs	r3, #0
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f001 fad6 	bl	8006f04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005958:	e032      	b.n	80059c0 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005968:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800596c:	d00b      	beq.n	8005986 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005972:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005978:	8a79      	ldrh	r1, [r7, #18]
 800597a:	2000      	movs	r0, #0
 800597c:	9000      	str	r0, [sp, #0]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f001 fac0 	bl	8006f04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005984:	e01c      	b.n	80059c0 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598a:	b2da      	uxtb	r2, r3
 800598c:	8a79      	ldrh	r1, [r7, #18]
 800598e:	2300      	movs	r3, #0
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f001 fab4 	bl	8006f04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800599c:	e010      	b.n	80059c0 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ac:	d003      	beq.n	80059b6 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fd09 	bl	80063c6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059b4:	e034      	b.n	8005a20 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80059b6:	2140      	movs	r1, #64	@ 0x40
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f001 f829 	bl	8006a10 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059be:	e02f      	b.n	8005a20 <I2C_Master_ISR_IT+0x252>
 80059c0:	e02e      	b.n	8005a20 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d028      	beq.n	8005a20 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	099b      	lsrs	r3, r3, #6
 80059d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d022      	beq.n	8005a20 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d119      	bne.n	8005a18 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059f2:	d015      	beq.n	8005a20 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059fc:	d108      	bne.n	8005a10 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	e007      	b.n	8005a20 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fcd8 	bl	80063c6 <I2C_ITMasterSeqCplt>
 8005a16:	e003      	b.n	8005a20 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a18:	2140      	movs	r1, #64	@ 0x40
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fff8 	bl	8006a10 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d009      	beq.n	8005a40 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005a38:	6979      	ldr	r1, [r7, #20]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fd5e 	bl	80064fc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b086      	sub	sp, #24
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <I2C_Slave_ISR_IT+0x24>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0ed      	b.n	8005c52 <I2C_Slave_ISR_IT+0x200>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a96:	6939      	ldr	r1, [r7, #16]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fdf9 	bl	8006690 <I2C_ITSlaveCplt>
 8005a9e:	e0d3      	b.n	8005c48 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d04d      	beq.n	8005b48 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d047      	beq.n	8005b48 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d128      	bne.n	8005b14 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b28      	cmp	r3, #40	@ 0x28
 8005acc:	d108      	bne.n	8005ae0 <I2C_Slave_ISR_IT+0x8e>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ad4:	d104      	bne.n	8005ae0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ad6:	6939      	ldr	r1, [r7, #16]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 ff43 	bl	8006964 <I2C_ITListenCplt>
 8005ade:	e032      	b.n	8005b46 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b29      	cmp	r3, #41	@ 0x29
 8005aea:	d10e      	bne.n	8005b0a <I2C_Slave_ISR_IT+0xb8>
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005af2:	d00a      	beq.n	8005b0a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2210      	movs	r2, #16
 8005afa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f001 f89e 	bl	8006c3e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fc9c 	bl	8006440 <I2C_ITSlaveSeqCplt>
 8005b08:	e01d      	b.n	8005b46 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2210      	movs	r2, #16
 8005b10:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005b12:	e096      	b.n	8005c42 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2210      	movs	r2, #16
 8005b1a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b20:	f043 0204 	orr.w	r2, r3, #4
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <I2C_Slave_ISR_IT+0xe6>
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b34:	f040 8085 	bne.w	8005c42 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 ff66 	bl	8006a10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b44:	e07d      	b.n	8005c42 <I2C_Slave_ISR_IT+0x1f0>
 8005b46:	e07c      	b.n	8005c42 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	089b      	lsrs	r3, r3, #2
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d030      	beq.n	8005bb6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d02a      	beq.n	8005bb6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d018      	beq.n	8005b9c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d14f      	bne.n	8005c46 <I2C_Slave_ISR_IT+0x1f4>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bac:	d04b      	beq.n	8005c46 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fc46 	bl	8006440 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005bb4:	e047      	b.n	8005c46 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	08db      	lsrs	r3, r3, #3
 8005bc6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005bce:	6939      	ldr	r1, [r7, #16]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fb74 	bl	80062be <I2C_ITAddrCplt>
 8005bd6:	e037      	b.n	8005c48 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d031      	beq.n	8005c48 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d02b      	beq.n	8005c48 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d018      	beq.n	8005c2c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005c2a:	e00d      	b.n	8005c48 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c32:	d002      	beq.n	8005c3a <I2C_Slave_ISR_IT+0x1e8>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fc00 	bl	8006440 <I2C_ITSlaveSeqCplt>
 8005c40:	e002      	b.n	8005c48 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8005c42:	bf00      	nop
 8005c44:	e000      	b.n	8005c48 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005c46:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b088      	sub	sp, #32
 8005c5e:	af02      	add	r7, sp, #8
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <I2C_Master_ISR_DMA+0x1a>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e0f0      	b.n	8005e56 <I2C_Master_ISR_DMA+0x1fc>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	091b      	lsrs	r3, r3, #4
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d017      	beq.n	8005cb8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d011      	beq.n	8005cb8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2210      	movs	r2, #16
 8005c9a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca0:	f043 0204 	orr.w	r2, r3, #4
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ca8:	2120      	movs	r1, #32
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f001 f95c 	bl	8006f68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 ffc4 	bl	8006c3e <I2C_Flush_TXDR>
 8005cb6:	e0c9      	b.n	8005e4c <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	09db      	lsrs	r3, r3, #7
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8081 	beq.w	8005dc8 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	099b      	lsrs	r3, r3, #6
 8005cca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d07a      	beq.n	8005dc8 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ce0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d05c      	beq.n	8005da6 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cf8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2bff      	cmp	r3, #255	@ 0xff
 8005d02:	d914      	bls.n	8005d2e <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d103      	bne.n	8005d20 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d1e:	e002      	b.n	8005d26 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	22ff      	movs	r2, #255	@ 0xff
 8005d24:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005d26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	e010      	b.n	8005d50 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d40:	d003      	beq.n	8005d4a <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e002      	b.n	8005d50 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d4e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	8a79      	ldrh	r1, [r7, #18]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f001 f8d0 	bl	8006f04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b22      	cmp	r3, #34	@ 0x22
 8005d80:	d108      	bne.n	8005d94 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d90:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d92:	e05b      	b.n	8005e4c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005da2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005da4:	e052      	b.n	8005e4c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005db4:	d003      	beq.n	8005dbe <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fb05 	bl	80063c6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005dbc:	e046      	b.n	8005e4c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005dbe:	2140      	movs	r1, #64	@ 0x40
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fe25 	bl	8006a10 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005dc6:	e041      	b.n	8005e4c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	099b      	lsrs	r3, r3, #6
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d029      	beq.n	8005e28 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	099b      	lsrs	r3, r3, #6
 8005dd8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d023      	beq.n	8005e28 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d119      	bne.n	8005e1e <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005df8:	d027      	beq.n	8005e4a <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e02:	d108      	bne.n	8005e16 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e12:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005e14:	e019      	b.n	8005e4a <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fad5 	bl	80063c6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005e1c:	e015      	b.n	8005e4a <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e1e:	2140      	movs	r1, #64	@ 0x40
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fdf5 	bl	8006a10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005e26:	e010      	b.n	8005e4a <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fb5a 	bl	80064fc <I2C_ITMasterCplt>
 8005e48:	e000      	b.n	8005e4c <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8005e4a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005e6c:	4b94      	ldr	r3, [pc, #592]	@ (80060c0 <I2C_Mem_ISR_DMA+0x260>)
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <I2C_Mem_ISR_DMA+0x1e>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e139      	b.n	80060f2 <I2C_Mem_ISR_DMA+0x292>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	091b      	lsrs	r3, r3, #4
 8005e96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d011      	beq.n	8005ec2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	f043 0204 	orr.w	r2, r3, #4
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005eb2:	2120      	movs	r1, #32
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f001 f857 	bl	8006f68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 febf 	bl	8006c3e <I2C_Flush_TXDR>
 8005ec0:	e112      	b.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00f      	beq.n	8005eee <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ee2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005eea:	651a      	str	r2, [r3, #80]	@ 0x50
 8005eec:	e0fc      	b.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	09db      	lsrs	r3, r3, #7
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d06e      	beq.n	8005fd8 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	099b      	lsrs	r3, r3, #6
 8005efe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d068      	beq.n	8005fd8 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f06:	2101      	movs	r1, #1
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f001 f8b1 	bl	8007070 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005f0e:	2110      	movs	r1, #16
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f001 f829 	bl	8006f68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d056      	beq.n	8005fce <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2bff      	cmp	r3, #255	@ 0xff
 8005f28:	d91e      	bls.n	8005f68 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	0c1b      	lsrs	r3, r3, #16
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d103      	bne.n	8005f46 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f44:	e002      	b.n	8005f4c <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	22ff      	movs	r2, #255	@ 0xff
 8005f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f50:	b299      	uxth	r1, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 ffcf 	bl	8006f04 <I2C_TransferConfig>
 8005f66:	e011      	b.n	8005f8c <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f76:	b299      	uxth	r1, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 ffbc 	bl	8006f04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b22      	cmp	r3, #34	@ 0x22
 8005fa8:	d108      	bne.n	8005fbc <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fb8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fba:	e095      	b.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fcc:	e08c      	b.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fce:	2140      	movs	r1, #64	@ 0x40
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fd1d 	bl	8006a10 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005fd6:	e087      	b.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	099b      	lsrs	r3, r3, #6
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d071      	beq.n	80060c8 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d06b      	beq.n	80060c8 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f001 f83c 	bl	8007070 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005ff8:	2110      	movs	r1, #16
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 ffb4 	bl	8006f68 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b22      	cmp	r3, #34	@ 0x22
 800600a:	d101      	bne.n	8006010 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 800600c:	4b2d      	ldr	r3, [pc, #180]	@ (80060c4 <I2C_Mem_ISR_DMA+0x264>)
 800600e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2bff      	cmp	r3, #255	@ 0xff
 8006018:	d91e      	bls.n	8006058 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d103      	bne.n	8006036 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006034:	e002      	b.n	800603c <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	22ff      	movs	r2, #255	@ 0xff
 800603a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006040:	b299      	uxth	r1, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006046:	b2da      	uxtb	r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 ff57 	bl	8006f04 <I2C_TransferConfig>
 8006056:	e011      	b.n	800607c <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006066:	b299      	uxth	r1, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606c:	b2da      	uxtb	r2, r3
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 ff44 	bl	8006f04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b22      	cmp	r3, #34	@ 0x22
 8006098:	d108      	bne.n	80060ac <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060a8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060aa:	e01d      	b.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060ba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060bc:	e014      	b.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
 80060be:	bf00      	nop
 80060c0:	80002000 	.word	0x80002000
 80060c4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fa0a 	bl	80064fc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop

080060fc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <I2C_Slave_ISR_DMA+0x24>
 800611c:	2302      	movs	r3, #2
 800611e:	e0ca      	b.n	80062b6 <I2C_Slave_ISR_DMA+0x1ba>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 faa4 	bl	8006690 <I2C_ITSlaveCplt>
 8006148:	e0b0      	b.n	80062ac <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 809a 	beq.w	800628c <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	091b      	lsrs	r3, r3, #4
 800615c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8093 	beq.w	800628c <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0b9b      	lsrs	r3, r3, #14
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d105      	bne.n	800617e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	0bdb      	lsrs	r3, r3, #15
 8006176:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800617a:	2b00      	cmp	r3, #0
 800617c:	d07f      	beq.n	800627e <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	0bdb      	lsrs	r3, r3, #15
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d007      	beq.n	80061a2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800619e:	2301      	movs	r3, #1
 80061a0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00d      	beq.n	80061c6 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	0b9b      	lsrs	r3, r3, #14
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80061c2:	2301      	movs	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d128      	bne.n	800621e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b28      	cmp	r3, #40	@ 0x28
 80061d6:	d108      	bne.n	80061ea <I2C_Slave_ISR_DMA+0xee>
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061de:	d104      	bne.n	80061ea <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fbbe 	bl	8006964 <I2C_ITListenCplt>
 80061e8:	e048      	b.n	800627c <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b29      	cmp	r3, #41	@ 0x29
 80061f4:	d10e      	bne.n	8006214 <I2C_Slave_ISR_DMA+0x118>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061fc:	d00a      	beq.n	8006214 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2210      	movs	r2, #16
 8006204:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 fd19 	bl	8006c3e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f917 	bl	8006440 <I2C_ITSlaveSeqCplt>
 8006212:	e033      	b.n	800627c <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2210      	movs	r2, #16
 800621a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800621c:	e034      	b.n	8006288 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2210      	movs	r2, #16
 8006224:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622a:	f043 0204 	orr.w	r2, r3, #4
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006238:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <I2C_Slave_ISR_DMA+0x14c>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006246:	d11f      	bne.n	8006288 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	2b21      	cmp	r3, #33	@ 0x21
 800624c:	d002      	beq.n	8006254 <I2C_Slave_ISR_DMA+0x158>
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	2b29      	cmp	r3, #41	@ 0x29
 8006252:	d103      	bne.n	800625c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2221      	movs	r2, #33	@ 0x21
 8006258:	631a      	str	r2, [r3, #48]	@ 0x30
 800625a:	e008      	b.n	800626e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800625c:	7dfb      	ldrb	r3, [r7, #23]
 800625e:	2b22      	cmp	r3, #34	@ 0x22
 8006260:	d002      	beq.n	8006268 <I2C_Slave_ISR_DMA+0x16c>
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	2b2a      	cmp	r3, #42	@ 0x2a
 8006266:	d102      	bne.n	800626e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2222      	movs	r2, #34	@ 0x22
 800626c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006272:	4619      	mov	r1, r3
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fbcb 	bl	8006a10 <I2C_ITError>
      if (treatdmanack == 1U)
 800627a:	e005      	b.n	8006288 <I2C_Slave_ISR_DMA+0x18c>
 800627c:	e004      	b.n	8006288 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2210      	movs	r2, #16
 8006284:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006286:	e011      	b.n	80062ac <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8006288:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800628a:	e00f      	b.n	80062ac <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	08db      	lsrs	r3, r3, #3
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	08db      	lsrs	r3, r3, #3
 800629c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f809 	bl	80062be <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80062d4:	2b28      	cmp	r3, #40	@ 0x28
 80062d6:	d16a      	bne.n	80063ae <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	0c1b      	lsrs	r3, r3, #16
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	0c1b      	lsrs	r3, r3, #16
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80062f6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006304:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006312:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d138      	bne.n	800638e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800631c:	897b      	ldrh	r3, [r7, #10]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	b29a      	uxth	r2, r3
 8006322:	89bb      	ldrh	r3, [r7, #12]
 8006324:	4053      	eors	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	f003 0306 	and.w	r3, r3, #6
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11c      	bne.n	800636a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006330:	897b      	ldrh	r3, [r7, #10]
 8006332:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006342:	2b02      	cmp	r3, #2
 8006344:	d13b      	bne.n	80063be <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2208      	movs	r2, #8
 8006352:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800635c:	89ba      	ldrh	r2, [r7, #12]
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff f9f3 	bl	800574e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006368:	e029      	b.n	80063be <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800636a:	893b      	ldrh	r3, [r7, #8]
 800636c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800636e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fe7c 	bl	8007070 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006380:	89ba      	ldrh	r2, [r7, #12]
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff f9e1 	bl	800574e <HAL_I2C_AddrCallback>
}
 800638c:	e017      	b.n	80063be <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800638e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fe6c 	bl	8007070 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063a0:	89ba      	ldrh	r2, [r7, #12]
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff f9d1 	bl	800574e <HAL_I2C_AddrCallback>
}
 80063ac:	e007      	b.n	80063be <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2208      	movs	r2, #8
 80063b4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b21      	cmp	r3, #33	@ 0x21
 80063e0:	d115      	bne.n	800640e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2211      	movs	r2, #17
 80063ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063f6:	2101      	movs	r1, #1
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fe39 	bl	8007070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f00f fff8 	bl	80163fc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800640c:	e014      	b.n	8006438 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2212      	movs	r2, #18
 800641a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006422:	2102      	movs	r1, #2
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fe23 	bl	8007070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f00f fff8 	bl	8016428 <HAL_I2C_MasterRxCpltCallback>
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	0b9b      	lsrs	r3, r3, #14
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	e00d      	b.n	8006492 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	0bdb      	lsrs	r3, r3, #15
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006490:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b29      	cmp	r3, #41	@ 0x29
 800649c:	d112      	bne.n	80064c4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2228      	movs	r2, #40	@ 0x28
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2221      	movs	r2, #33	@ 0x21
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064ac:	2101      	movs	r1, #1
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fdde 	bl	8007070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f00f ffc9 	bl	8016454 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80064c2:	e017      	b.n	80064f4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ce:	d111      	bne.n	80064f4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2228      	movs	r2, #40	@ 0x28
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2222      	movs	r2, #34	@ 0x22
 80064dc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80064de:	2102      	movs	r1, #2
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fdc5 	bl	8007070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f00f ffc6 	bl	8016480 <HAL_I2C_SlaveRxCpltCallback>
}
 80064f4:	bf00      	nop
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2220      	movs	r2, #32
 8006510:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b21      	cmp	r3, #33	@ 0x21
 800651c:	d107      	bne.n	800652e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800651e:	2101      	movs	r1, #1
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fda5 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2211      	movs	r2, #17
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30
 800652c:	e00c      	b.n	8006548 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b22      	cmp	r3, #34	@ 0x22
 8006538:	d106      	bne.n	8006548 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800653a:	2102      	movs	r1, #2
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fd97 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2212      	movs	r2, #18
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6859      	ldr	r1, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b4d      	ldr	r3, [pc, #308]	@ (8006688 <I2C_ITMasterCplt+0x18c>)
 8006554:	400b      	ands	r3, r1
 8006556:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a4a      	ldr	r2, [pc, #296]	@ (800668c <I2C_ITMasterCplt+0x190>)
 8006562:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d009      	beq.n	8006584 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2210      	movs	r2, #16
 8006576:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657c:	f043 0204 	orr.w	r2, r3, #4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b60      	cmp	r3, #96	@ 0x60
 800658e:	d10b      	bne.n	80065a8 <I2C_ITMasterCplt+0xac>
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	089b      	lsrs	r3, r3, #2
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80065a6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fb48 	bl	8006c3e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b60      	cmp	r3, #96	@ 0x60
 80065be:	d002      	beq.n	80065c6 <I2C_ITMasterCplt+0xca>
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa1f 	bl	8006a10 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80065d2:	e054      	b.n	800667e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b21      	cmp	r3, #33	@ 0x21
 80065de:	d124      	bne.n	800662a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b40      	cmp	r3, #64	@ 0x40
 80065f8:	d10b      	bne.n	8006612 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff f8b7 	bl	800577e <HAL_I2C_MemTxCpltCallback>
}
 8006610:	e035      	b.n	800667e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f00f feea 	bl	80163fc <HAL_I2C_MasterTxCpltCallback>
}
 8006628:	e029      	b.n	800667e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b22      	cmp	r3, #34	@ 0x22
 8006634:	d123      	bne.n	800667e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b40      	cmp	r3, #64	@ 0x40
 800664e:	d10b      	bne.n	8006668 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff f896 	bl	8005792 <HAL_I2C_MemRxCpltCallback>
}
 8006666:	e00a      	b.n	800667e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f00f fed5 	bl	8016428 <HAL_I2C_MasterRxCpltCallback>
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	fe00e800 	.word	0xfe00e800
 800668c:	ffff0000 	.word	0xffff0000

08006690 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2220      	movs	r2, #32
 80066ba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	2b21      	cmp	r3, #33	@ 0x21
 80066c0:	d002      	beq.n	80066c8 <I2C_ITSlaveCplt+0x38>
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	2b29      	cmp	r3, #41	@ 0x29
 80066c6:	d108      	bne.n	80066da <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80066c8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fccf 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2221      	movs	r2, #33	@ 0x21
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80066d8:	e019      	b.n	800670e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80066da:	7afb      	ldrb	r3, [r7, #11]
 80066dc:	2b22      	cmp	r3, #34	@ 0x22
 80066de:	d002      	beq.n	80066e6 <I2C_ITSlaveCplt+0x56>
 80066e0:	7afb      	ldrb	r3, [r7, #11]
 80066e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066e4:	d108      	bne.n	80066f8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80066e6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fcc0 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2222      	movs	r2, #34	@ 0x22
 80066f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80066f6:	e00a      	b.n	800670e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	2b28      	cmp	r3, #40	@ 0x28
 80066fc:	d107      	bne.n	800670e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80066fe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fcb4 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800671c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6859      	ldr	r1, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b8c      	ldr	r3, [pc, #560]	@ (800695c <I2C_ITSlaveCplt+0x2cc>)
 800672a:	400b      	ands	r3, r1
 800672c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa85 	bl	8006c3e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	0b9b      	lsrs	r3, r3, #14
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d013      	beq.n	8006768 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800674e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006754:	2b00      	cmp	r3, #0
 8006756:	d020      	beq.n	800679a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006766:	e018      	b.n	800679a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	0bdb      	lsrs	r3, r3, #15
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d012      	beq.n	800679a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006782:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	089b      	lsrs	r3, r3, #2
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d020      	beq.n	80067e8 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 0304 	bic.w	r3, r3, #4
 80067ac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f6:	f043 0204 	orr.w	r2, r3, #4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d04a      	beq.n	80068a0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006812:	2b00      	cmp	r3, #0
 8006814:	d044      	beq.n	80068a0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d128      	bne.n	8006872 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b28      	cmp	r3, #40	@ 0x28
 800682a:	d108      	bne.n	800683e <I2C_ITSlaveCplt+0x1ae>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006832:	d104      	bne.n	800683e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006834:	6979      	ldr	r1, [r7, #20]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f894 	bl	8006964 <I2C_ITListenCplt>
 800683c:	e030      	b.n	80068a0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b29      	cmp	r3, #41	@ 0x29
 8006848:	d10e      	bne.n	8006868 <I2C_ITSlaveCplt+0x1d8>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006850:	d00a      	beq.n	8006868 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2210      	movs	r2, #16
 8006858:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f9ef 	bl	8006c3e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff fded 	bl	8006440 <I2C_ITSlaveSeqCplt>
 8006866:	e01b      	b.n	80068a0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2210      	movs	r2, #16
 800686e:	61da      	str	r2, [r3, #28]
 8006870:	e016      	b.n	80068a0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2210      	movs	r2, #16
 8006878:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687e:	f043 0204 	orr.w	r2, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <I2C_ITSlaveCplt+0x204>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006892:	d105      	bne.n	80068a0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8b8 	bl	8006a10 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d010      	beq.n	80068d8 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f8a7 	bl	8006a10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b28      	cmp	r3, #40	@ 0x28
 80068cc:	d141      	bne.n	8006952 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80068ce:	6979      	ldr	r1, [r7, #20]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f847 	bl	8006964 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068d6:	e03c      	b.n	8006952 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068e0:	d014      	beq.n	800690c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fdac 	bl	8006440 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006960 <I2C_ITSlaveCplt+0x2d0>)
 80068ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7fe ff30 	bl	800576a <HAL_I2C_ListenCpltCallback>
}
 800690a:	e022      	b.n	8006952 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b22      	cmp	r3, #34	@ 0x22
 8006916:	d10e      	bne.n	8006936 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f00f fda6 	bl	8016480 <HAL_I2C_SlaveRxCpltCallback>
}
 8006934:	e00d      	b.n	8006952 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f00f fd81 	bl	8016454 <HAL_I2C_SlaveTxCpltCallback>
}
 8006952:	bf00      	nop
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	fe00e800 	.word	0xfe00e800
 8006960:	ffff0000 	.word	0xffff0000

08006964 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a26      	ldr	r2, [pc, #152]	@ (8006a0c <I2C_ITListenCplt+0xa8>)
 8006972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	089b      	lsrs	r3, r3, #2
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d022      	beq.n	80069e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d012      	beq.n	80069e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069e2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fb42 	bl	8007070 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2210      	movs	r2, #16
 80069f2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fe feb4 	bl	800576a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	ffff0000 	.word	0xffff0000

08006a10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a20:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a6d      	ldr	r2, [pc, #436]	@ (8006be4 <I2C_ITError+0x1d4>)
 8006a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	2b28      	cmp	r3, #40	@ 0x28
 8006a46:	d005      	beq.n	8006a54 <I2C_ITError+0x44>
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	2b29      	cmp	r3, #41	@ 0x29
 8006a4c:	d002      	beq.n	8006a54 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a52:	d10b      	bne.n	8006a6c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a54:	2103      	movs	r1, #3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb0a 	bl	8007070 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2228      	movs	r2, #40	@ 0x28
 8006a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a60      	ldr	r2, [pc, #384]	@ (8006be8 <I2C_ITError+0x1d8>)
 8006a68:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a6a:	e030      	b.n	8006ace <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a6c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fafd 	bl	8007070 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8e1 	bl	8006c3e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b60      	cmp	r3, #96	@ 0x60
 8006a86:	d01f      	beq.n	8006ac8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d114      	bne.n	8006ac8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d109      	bne.n	8006ac0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab8:	f043 0204 	orr.w	r2, r3, #4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d039      	beq.n	8006b50 <I2C_ITError+0x140>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b11      	cmp	r3, #17
 8006ae0:	d002      	beq.n	8006ae8 <I2C_ITError+0xd8>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b21      	cmp	r3, #33	@ 0x21
 8006ae6:	d133      	bne.n	8006b50 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006af6:	d107      	bne.n	8006b08 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fc fc6d 	bl	80033ec <HAL_DMA_GetState>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d017      	beq.n	8006b48 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1c:	4a33      	ldr	r2, [pc, #204]	@ (8006bec <I2C_ITError+0x1dc>)
 8006b1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fc fab1 	bl	8003094 <HAL_DMA_Abort_IT>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d04d      	beq.n	8006bd4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b42:	4610      	mov	r0, r2
 8006b44:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b46:	e045      	b.n	8006bd4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f851 	bl	8006bf0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b4e:	e041      	b.n	8006bd4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d039      	beq.n	8006bcc <I2C_ITError+0x1bc>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b12      	cmp	r3, #18
 8006b5c:	d002      	beq.n	8006b64 <I2C_ITError+0x154>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b22      	cmp	r3, #34	@ 0x22
 8006b62:	d133      	bne.n	8006bcc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b72:	d107      	bne.n	8006b84 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fc fc2f 	bl	80033ec <HAL_DMA_GetState>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d017      	beq.n	8006bc4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	4a14      	ldr	r2, [pc, #80]	@ (8006bec <I2C_ITError+0x1dc>)
 8006b9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fc fa73 	bl	8003094 <HAL_DMA_Abort_IT>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d011      	beq.n	8006bd8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bc2:	e009      	b.n	8006bd8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f813 	bl	8006bf0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bca:	e005      	b.n	8006bd8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f80f 	bl	8006bf0 <I2C_TreatErrorCallback>
  }
}
 8006bd2:	e002      	b.n	8006bda <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006bd4:	bf00      	nop
 8006bd6:	e000      	b.n	8006bda <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bd8:	bf00      	nop
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	ffff0000 	.word	0xffff0000
 8006be8:	08005a53 	.word	0x08005a53
 8006bec:	08006ec9 	.word	0x08006ec9

08006bf0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b60      	cmp	r3, #96	@ 0x60
 8006c02:	d10e      	bne.n	8006c22 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fe fdcd 	bl	80057ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c20:	e009      	b.n	8006c36 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fe fdb8 	bl	80057a6 <HAL_I2C_ErrorCallback>
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d103      	bne.n	8006c5c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d007      	beq.n	8006c7a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0201 	orr.w	r2, r2, #1
 8006c78:	619a      	str	r2, [r3, #24]
  }
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ca2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006cae:	2120      	movs	r1, #32
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f959 	bl	8006f68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006cb6:	e02d      	b.n	8006d14 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006cc0:	441a      	add	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2bff      	cmp	r3, #255	@ 0xff
 8006cce:	d903      	bls.n	8006cd8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	22ff      	movs	r2, #255	@ 0xff
 8006cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006cd6:	e004      	b.n	8006ce2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	4619      	mov	r1, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3328      	adds	r3, #40	@ 0x28
 8006cf2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006cf8:	f7fc f8fc 	bl	8002ef4 <HAL_DMA_Start_IT>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006d02:	2110      	movs	r1, #16
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff fe83 	bl	8006a10 <I2C_ITError>
}
 8006d0a:	e003      	b.n	8006d14 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006d0c:	2140      	movs	r1, #64	@ 0x40
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f92a 	bl	8006f68 <I2C_Enable_IRQ>
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d36:	d002      	beq.n	8006d3e <I2C_DMASlaveTransmitCplt+0x22>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d4c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff fb76 	bl	8006440 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d78:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d84:	2120      	movs	r1, #32
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f8ee 	bl	8006f68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006d8c:	e03b      	b.n	8006e06 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006d96:	441a      	add	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2bff      	cmp	r3, #255	@ 0xff
 8006da4:	d911      	bls.n	8006dca <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d103      	bne.n	8006dc2 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006dc0:	e008      	b.n	8006dd4 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	22ff      	movs	r2, #255	@ 0xff
 8006dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006dc8:	e004      	b.n	8006dd4 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3324      	adds	r3, #36	@ 0x24
 8006dde:	4619      	mov	r1, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006dea:	f7fc f883 	bl	8002ef4 <HAL_DMA_Start_IT>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006df4:	2110      	movs	r1, #16
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff fe0a 	bl	8006a10 <I2C_ITError>
}
 8006dfc:	e003      	b.n	8006e06 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006dfe:	2140      	movs	r1, #64	@ 0x40
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f8b1 	bl	8006f68 <I2C_Enable_IRQ>
}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e20:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10e      	bne.n	8006e4c <I2C_DMASlaveReceiveCplt+0x3e>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e34:	d00a      	beq.n	8006e4c <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e44:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff fafa 	bl	8006440 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006e92:	2301      	movs	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fc fab6 	bl	8003408 <HAL_DMA_GetError>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d00e      	beq.n	8006ec0 <I2C_DMAError+0x6c>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00b      	beq.n	8006ec0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006eb6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006eb8:	2110      	movs	r1, #16
 8006eba:	68b8      	ldr	r0, [r7, #8]
 8006ebc:	f7ff fda8 	bl	8006a10 <I2C_ITError>
  }
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fe7a 	bl	8006bf0 <I2C_TreatErrorCallback>
}
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	607b      	str	r3, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	817b      	strh	r3, [r7, #10]
 8006f12:	4613      	mov	r3, r2
 8006f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f16:	897b      	ldrh	r3, [r7, #10]
 8006f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f1c:	7a7b      	ldrb	r3, [r7, #9]
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f24:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f32:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	0d5b      	lsrs	r3, r3, #21
 8006f3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006f42:	4b08      	ldr	r3, [pc, #32]	@ (8006f64 <I2C_TransferConfig+0x60>)
 8006f44:	430b      	orrs	r3, r1
 8006f46:	43db      	mvns	r3, r3
 8006f48:	ea02 0103 	and.w	r1, r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	03ff63ff 	.word	0x03ff63ff

08006f68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f7c:	4a39      	ldr	r2, [pc, #228]	@ (8007064 <I2C_Enable_IRQ+0xfc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d032      	beq.n	8006fe8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006f86:	4a38      	ldr	r2, [pc, #224]	@ (8007068 <I2C_Enable_IRQ+0x100>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d02d      	beq.n	8006fe8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006f90:	4a36      	ldr	r2, [pc, #216]	@ (800706c <I2C_Enable_IRQ+0x104>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d028      	beq.n	8006fe8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da03      	bge.n	8006fa6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006fa4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006fa6:	887b      	ldrh	r3, [r7, #2]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006fb6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006fb8:	887b      	ldrh	r3, [r7, #2]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006fc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006fca:	887b      	ldrh	r3, [r7, #2]
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d103      	bne.n	8006fd8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006fd6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006fd8:	887b      	ldrh	r3, [r7, #2]
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d133      	bne.n	8007046 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006fe6:	e02e      	b.n	8007046 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006fe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da03      	bge.n	8006ff8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006ff6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ff8:	887b      	ldrh	r3, [r7, #2]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007008:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800700a:	887b      	ldrh	r3, [r7, #2]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800701a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800701c:	887b      	ldrh	r3, [r7, #2]
 800701e:	2b10      	cmp	r3, #16
 8007020:	d103      	bne.n	800702a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007028:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800702a:	887b      	ldrh	r3, [r7, #2]
 800702c:	2b20      	cmp	r3, #32
 800702e:	d103      	bne.n	8007038 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007036:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	2b40      	cmp	r3, #64	@ 0x40
 800703c:	d103      	bne.n	8007046 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007044:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6819      	ldr	r1, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	430a      	orrs	r2, r1
 8007054:	601a      	str	r2, [r3, #0]
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	08005c5b 	.word	0x08005c5b
 8007068:	080060fd 	.word	0x080060fd
 800706c:	08005e61 	.word	0x08005e61

08007070 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007080:	887b      	ldrh	r3, [r7, #2]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00f      	beq.n	80070aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007090:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800709e:	2b28      	cmp	r3, #40	@ 0x28
 80070a0:	d003      	beq.n	80070aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80070a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80070aa:	887b      	ldrh	r3, [r7, #2]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00f      	beq.n	80070d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80070ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80070c8:	2b28      	cmp	r3, #40	@ 0x28
 80070ca:	d003      	beq.n	80070d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80070d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80070d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	da03      	bge.n	80070e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80070e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80070e4:	887b      	ldrh	r3, [r7, #2]
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d103      	bne.n	80070f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80070f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d103      	bne.n	8007100 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f043 0320 	orr.w	r3, r3, #32
 80070fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	2b40      	cmp	r3, #64	@ 0x40
 8007104:	d103      	bne.n	800710e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	43da      	mvns	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	400a      	ands	r2, r1
 800711e:	601a      	str	r2, [r3, #0]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b20      	cmp	r3, #32
 8007140:	d138      	bne.n	80071b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800714c:	2302      	movs	r3, #2
 800714e:	e032      	b.n	80071b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	@ 0x24
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800717e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	e000      	b.n	80071b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071b4:	2302      	movs	r3, #2
  }
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d139      	bne.n	800724c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e033      	b.n	800724e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2224      	movs	r2, #36	@ 0x24
 80071f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0201 	bic.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	e000      	b.n	800724e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800724c:	2302      	movs	r3, #2
  }
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
	...

0800725c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007266:	4b23      	ldr	r3, [pc, #140]	@ (80072f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726a:	4a22      	ldr	r2, [pc, #136]	@ (80072f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800726c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007270:	6413      	str	r3, [r2, #64]	@ 0x40
 8007272:	4b20      	ldr	r3, [pc, #128]	@ (80072f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800727e:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1d      	ldr	r2, [pc, #116]	@ (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007288:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800728a:	f7fa fdb3 	bl	8001df4 <HAL_GetTick>
 800728e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007290:	e009      	b.n	80072a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007292:	f7fa fdaf 	bl	8001df4 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072a0:	d901      	bls.n	80072a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e022      	b.n	80072ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80072a6:	4b14      	ldr	r3, [pc, #80]	@ (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b2:	d1ee      	bne.n	8007292 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80072b4:	4b10      	ldr	r3, [pc, #64]	@ (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a0f      	ldr	r2, [pc, #60]	@ (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072c0:	f7fa fd98 	bl	8001df4 <HAL_GetTick>
 80072c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80072c6:	e009      	b.n	80072dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80072c8:	f7fa fd94 	bl	8001df4 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072d6:	d901      	bls.n	80072dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e007      	b.n	80072ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80072dc:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072e8:	d1ee      	bne.n	80072c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40023800 	.word	0x40023800
 80072f8:	40007000 	.word	0x40007000

080072fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007304:	2300      	movs	r3, #0
 8007306:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e291      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8087 	beq.w	800742e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007320:	4b96      	ldr	r3, [pc, #600]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 030c 	and.w	r3, r3, #12
 8007328:	2b04      	cmp	r3, #4
 800732a:	d00c      	beq.n	8007346 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800732c:	4b93      	ldr	r3, [pc, #588]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 030c 	and.w	r3, r3, #12
 8007334:	2b08      	cmp	r3, #8
 8007336:	d112      	bne.n	800735e <HAL_RCC_OscConfig+0x62>
 8007338:	4b90      	ldr	r3, [pc, #576]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007344:	d10b      	bne.n	800735e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007346:	4b8d      	ldr	r3, [pc, #564]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d06c      	beq.n	800742c <HAL_RCC_OscConfig+0x130>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d168      	bne.n	800742c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e26b      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007366:	d106      	bne.n	8007376 <HAL_RCC_OscConfig+0x7a>
 8007368:	4b84      	ldr	r3, [pc, #528]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a83      	ldr	r2, [pc, #524]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800736e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	e02e      	b.n	80073d4 <HAL_RCC_OscConfig+0xd8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10c      	bne.n	8007398 <HAL_RCC_OscConfig+0x9c>
 800737e:	4b7f      	ldr	r3, [pc, #508]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a7e      	ldr	r2, [pc, #504]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	4b7c      	ldr	r3, [pc, #496]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a7b      	ldr	r2, [pc, #492]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	e01d      	b.n	80073d4 <HAL_RCC_OscConfig+0xd8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073a0:	d10c      	bne.n	80073bc <HAL_RCC_OscConfig+0xc0>
 80073a2:	4b76      	ldr	r3, [pc, #472]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a75      	ldr	r2, [pc, #468]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	4b73      	ldr	r3, [pc, #460]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a72      	ldr	r2, [pc, #456]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	e00b      	b.n	80073d4 <HAL_RCC_OscConfig+0xd8>
 80073bc:	4b6f      	ldr	r3, [pc, #444]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a6e      	ldr	r2, [pc, #440]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	4b6c      	ldr	r3, [pc, #432]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a6b      	ldr	r2, [pc, #428]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d013      	beq.n	8007404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073dc:	f7fa fd0a 	bl	8001df4 <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073e4:	f7fa fd06 	bl	8001df4 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b64      	cmp	r3, #100	@ 0x64
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e21f      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f6:	4b61      	ldr	r3, [pc, #388]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0xe8>
 8007402:	e014      	b.n	800742e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007404:	f7fa fcf6 	bl	8001df4 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800740c:	f7fa fcf2 	bl	8001df4 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b64      	cmp	r3, #100	@ 0x64
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e20b      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800741e:	4b57      	ldr	r3, [pc, #348]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1f0      	bne.n	800740c <HAL_RCC_OscConfig+0x110>
 800742a:	e000      	b.n	800742e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800742c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d069      	beq.n	800750e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800743a:	4b50      	ldr	r3, [pc, #320]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 030c 	and.w	r3, r3, #12
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007446:	4b4d      	ldr	r3, [pc, #308]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b08      	cmp	r3, #8
 8007450:	d11c      	bne.n	800748c <HAL_RCC_OscConfig+0x190>
 8007452:	4b4a      	ldr	r3, [pc, #296]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d116      	bne.n	800748c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800745e:	4b47      	ldr	r3, [pc, #284]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_RCC_OscConfig+0x17a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d001      	beq.n	8007476 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e1df      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007476:	4b41      	ldr	r3, [pc, #260]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	493d      	ldr	r1, [pc, #244]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007486:	4313      	orrs	r3, r2
 8007488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748a:	e040      	b.n	800750e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d023      	beq.n	80074dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007494:	4b39      	ldr	r3, [pc, #228]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a38      	ldr	r2, [pc, #224]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a0:	f7fa fca8 	bl	8001df4 <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a8:	f7fa fca4 	bl	8001df4 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e1bd      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ba:	4b30      	ldr	r3, [pc, #192]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f0      	beq.n	80074a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074c6:	4b2d      	ldr	r3, [pc, #180]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	4929      	ldr	r1, [pc, #164]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	600b      	str	r3, [r1, #0]
 80074da:	e018      	b.n	800750e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074dc:	4b27      	ldr	r3, [pc, #156]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a26      	ldr	r2, [pc, #152]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e8:	f7fa fc84 	bl	8001df4 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074f0:	f7fa fc80 	bl	8001df4 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e199      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007502:	4b1e      	ldr	r3, [pc, #120]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d038      	beq.n	800758c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d019      	beq.n	8007556 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007522:	4b16      	ldr	r3, [pc, #88]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007526:	4a15      	ldr	r2, [pc, #84]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752e:	f7fa fc61 	bl	8001df4 <HAL_GetTick>
 8007532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007534:	e008      	b.n	8007548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007536:	f7fa fc5d 	bl	8001df4 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e176      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007548:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800754a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0f0      	beq.n	8007536 <HAL_RCC_OscConfig+0x23a>
 8007554:	e01a      	b.n	800758c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007556:	4b09      	ldr	r3, [pc, #36]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 8007558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800755a:	4a08      	ldr	r2, [pc, #32]	@ (800757c <HAL_RCC_OscConfig+0x280>)
 800755c:	f023 0301 	bic.w	r3, r3, #1
 8007560:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007562:	f7fa fc47 	bl	8001df4 <HAL_GetTick>
 8007566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007568:	e00a      	b.n	8007580 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800756a:	f7fa fc43 	bl	8001df4 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d903      	bls.n	8007580 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e15c      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
 800757c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007580:	4b91      	ldr	r3, [pc, #580]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1ee      	bne.n	800756a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80a4 	beq.w	80076e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800759a:	4b8b      	ldr	r3, [pc, #556]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10d      	bne.n	80075c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a6:	4b88      	ldr	r3, [pc, #544]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075aa:	4a87      	ldr	r2, [pc, #540]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80075ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80075b2:	4b85      	ldr	r3, [pc, #532]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075c2:	4b82      	ldr	r3, [pc, #520]	@ (80077cc <HAL_RCC_OscConfig+0x4d0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d118      	bne.n	8007600 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80075ce:	4b7f      	ldr	r3, [pc, #508]	@ (80077cc <HAL_RCC_OscConfig+0x4d0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a7e      	ldr	r2, [pc, #504]	@ (80077cc <HAL_RCC_OscConfig+0x4d0>)
 80075d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075da:	f7fa fc0b 	bl	8001df4 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e2:	f7fa fc07 	bl	8001df4 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b64      	cmp	r3, #100	@ 0x64
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e120      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075f4:	4b75      	ldr	r3, [pc, #468]	@ (80077cc <HAL_RCC_OscConfig+0x4d0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0f0      	beq.n	80075e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d106      	bne.n	8007616 <HAL_RCC_OscConfig+0x31a>
 8007608:	4b6f      	ldr	r3, [pc, #444]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800760a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760c:	4a6e      	ldr	r2, [pc, #440]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	6713      	str	r3, [r2, #112]	@ 0x70
 8007614:	e02d      	b.n	8007672 <HAL_RCC_OscConfig+0x376>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10c      	bne.n	8007638 <HAL_RCC_OscConfig+0x33c>
 800761e:	4b6a      	ldr	r3, [pc, #424]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007622:	4a69      	ldr	r2, [pc, #420]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	6713      	str	r3, [r2, #112]	@ 0x70
 800762a:	4b67      	ldr	r3, [pc, #412]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762e:	4a66      	ldr	r2, [pc, #408]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007630:	f023 0304 	bic.w	r3, r3, #4
 8007634:	6713      	str	r3, [r2, #112]	@ 0x70
 8007636:	e01c      	b.n	8007672 <HAL_RCC_OscConfig+0x376>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b05      	cmp	r3, #5
 800763e:	d10c      	bne.n	800765a <HAL_RCC_OscConfig+0x35e>
 8007640:	4b61      	ldr	r3, [pc, #388]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007644:	4a60      	ldr	r2, [pc, #384]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007646:	f043 0304 	orr.w	r3, r3, #4
 800764a:	6713      	str	r3, [r2, #112]	@ 0x70
 800764c:	4b5e      	ldr	r3, [pc, #376]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800764e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007650:	4a5d      	ldr	r2, [pc, #372]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	6713      	str	r3, [r2, #112]	@ 0x70
 8007658:	e00b      	b.n	8007672 <HAL_RCC_OscConfig+0x376>
 800765a:	4b5b      	ldr	r3, [pc, #364]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765e:	4a5a      	ldr	r2, [pc, #360]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	6713      	str	r3, [r2, #112]	@ 0x70
 8007666:	4b58      	ldr	r3, [pc, #352]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766a:	4a57      	ldr	r2, [pc, #348]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800766c:	f023 0304 	bic.w	r3, r3, #4
 8007670:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d015      	beq.n	80076a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800767a:	f7fa fbbb 	bl	8001df4 <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007680:	e00a      	b.n	8007698 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007682:	f7fa fbb7 	bl	8001df4 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007690:	4293      	cmp	r3, r2
 8007692:	d901      	bls.n	8007698 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e0ce      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007698:	4b4b      	ldr	r3, [pc, #300]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800769a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0ee      	beq.n	8007682 <HAL_RCC_OscConfig+0x386>
 80076a4:	e014      	b.n	80076d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a6:	f7fa fba5 	bl	8001df4 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ac:	e00a      	b.n	80076c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ae:	f7fa fba1 	bl	8001df4 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076bc:	4293      	cmp	r3, r2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e0b8      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076c4:	4b40      	ldr	r3, [pc, #256]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80076c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1ee      	bne.n	80076ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d105      	bne.n	80076e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076d6:	4b3c      	ldr	r3, [pc, #240]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	4a3b      	ldr	r2, [pc, #236]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80076dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 80a4 	beq.w	8007834 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076ec:	4b36      	ldr	r3, [pc, #216]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 030c 	and.w	r3, r3, #12
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d06b      	beq.n	80077d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d149      	bne.n	8007794 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007700:	4b31      	ldr	r3, [pc, #196]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a30      	ldr	r2, [pc, #192]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800770a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fa fb72 	bl	8001df4 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007714:	f7fa fb6e 	bl	8001df4 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e087      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	4b28      	ldr	r3, [pc, #160]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69da      	ldr	r2, [r3, #28]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	019b      	lsls	r3, r3, #6
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	3b01      	subs	r3, #1
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	061b      	lsls	r3, r3, #24
 8007756:	4313      	orrs	r3, r2
 8007758:	4a1b      	ldr	r2, [pc, #108]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800775a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800775e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007760:	4b19      	ldr	r3, [pc, #100]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a18      	ldr	r2, [pc, #96]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800776a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776c:	f7fa fb42 	bl	8001df4 <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007774:	f7fa fb3e 	bl	8001df4 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e057      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007786:	4b10      	ldr	r3, [pc, #64]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCC_OscConfig+0x478>
 8007792:	e04f      	b.n	8007834 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007794:	4b0c      	ldr	r3, [pc, #48]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a0b      	ldr	r2, [pc, #44]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 800779a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800779e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a0:	f7fa fb28 	bl	8001df4 <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a8:	f7fa fb24 	bl	8001df4 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e03d      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ba:	4b03      	ldr	r3, [pc, #12]	@ (80077c8 <HAL_RCC_OscConfig+0x4cc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f0      	bne.n	80077a8 <HAL_RCC_OscConfig+0x4ac>
 80077c6:	e035      	b.n	8007834 <HAL_RCC_OscConfig+0x538>
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80077d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007840 <HAL_RCC_OscConfig+0x544>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d028      	beq.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d121      	bne.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d11a      	bne.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007806:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007808:	4293      	cmp	r3, r2
 800780a:	d111      	bne.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	3b01      	subs	r3, #1
 800781a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800781c:	429a      	cmp	r2, r3
 800781e:	d107      	bne.n	8007830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800782c:	429a      	cmp	r2, r3
 800782e:	d001      	beq.n	8007834 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40023800 	.word	0x40023800

08007844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0d0      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800785c:	4b6a      	ldr	r3, [pc, #424]	@ (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d910      	bls.n	800788c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786a:	4b67      	ldr	r3, [pc, #412]	@ (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f023 020f 	bic.w	r2, r3, #15
 8007872:	4965      	ldr	r1, [pc, #404]	@ (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	4313      	orrs	r3, r2
 8007878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800787a:	4b63      	ldr	r3, [pc, #396]	@ (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d001      	beq.n	800788c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0b8      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d020      	beq.n	80078da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078a4:	4b59      	ldr	r3, [pc, #356]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	4a58      	ldr	r2, [pc, #352]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078bc:	4b53      	ldr	r3, [pc, #332]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	4a52      	ldr	r2, [pc, #328]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078c8:	4b50      	ldr	r3, [pc, #320]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	494d      	ldr	r1, [pc, #308]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d040      	beq.n	8007968 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d107      	bne.n	80078fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ee:	4b47      	ldr	r3, [pc, #284]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d115      	bne.n	8007926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e07f      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d107      	bne.n	8007916 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007906:	4b41      	ldr	r3, [pc, #260]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e073      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007916:	4b3d      	ldr	r3, [pc, #244]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e06b      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007926:	4b39      	ldr	r3, [pc, #228]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f023 0203 	bic.w	r2, r3, #3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	4936      	ldr	r1, [pc, #216]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007934:	4313      	orrs	r3, r2
 8007936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007938:	f7fa fa5c 	bl	8001df4 <HAL_GetTick>
 800793c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800793e:	e00a      	b.n	8007956 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007940:	f7fa fa58 	bl	8001df4 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800794e:	4293      	cmp	r3, r2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e053      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007956:	4b2d      	ldr	r3, [pc, #180]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 020c 	and.w	r2, r3, #12
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	429a      	cmp	r2, r3
 8007966:	d1eb      	bne.n	8007940 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007968:	4b27      	ldr	r3, [pc, #156]	@ (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 030f 	and.w	r3, r3, #15
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d210      	bcs.n	8007998 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007976:	4b24      	ldr	r3, [pc, #144]	@ (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f023 020f 	bic.w	r2, r3, #15
 800797e:	4922      	ldr	r1, [pc, #136]	@ (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	4313      	orrs	r3, r2
 8007984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007986:	4b20      	ldr	r3, [pc, #128]	@ (8007a08 <HAL_RCC_ClockConfig+0x1c4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d001      	beq.n	8007998 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e032      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079a4:	4b19      	ldr	r3, [pc, #100]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	4916      	ldr	r1, [pc, #88]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079c2:	4b12      	ldr	r3, [pc, #72]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	490e      	ldr	r1, [pc, #56]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079d6:	f000 f821 	bl	8007a1c <HAL_RCC_GetSysClockFreq>
 80079da:	4602      	mov	r2, r0
 80079dc:	4b0b      	ldr	r3, [pc, #44]	@ (8007a0c <HAL_RCC_ClockConfig+0x1c8>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	091b      	lsrs	r3, r3, #4
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	490a      	ldr	r1, [pc, #40]	@ (8007a10 <HAL_RCC_ClockConfig+0x1cc>)
 80079e8:	5ccb      	ldrb	r3, [r1, r3]
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	4a09      	ldr	r2, [pc, #36]	@ (8007a14 <HAL_RCC_ClockConfig+0x1d0>)
 80079f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80079f2:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <HAL_RCC_ClockConfig+0x1d4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fa f9b8 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40023c00 	.word	0x40023c00
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	0801b0cc 	.word	0x0801b0cc
 8007a14:	20000000 	.word	0x20000000
 8007a18:	20000004 	.word	0x20000004

08007a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a20:	b090      	sub	sp, #64	@ 0x40
 8007a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a28:	2300      	movs	r3, #0
 8007a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a34:	4b59      	ldr	r3, [pc, #356]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 030c 	and.w	r3, r3, #12
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d00d      	beq.n	8007a5c <HAL_RCC_GetSysClockFreq+0x40>
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	f200 80a1 	bhi.w	8007b88 <HAL_RCC_GetSysClockFreq+0x16c>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0x34>
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d003      	beq.n	8007a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a4e:	e09b      	b.n	8007b88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a50:	4b53      	ldr	r3, [pc, #332]	@ (8007ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007a52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007a54:	e09b      	b.n	8007b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a56:	4b53      	ldr	r3, [pc, #332]	@ (8007ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007a5a:	e098      	b.n	8007b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007a66:	4b4d      	ldr	r3, [pc, #308]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d028      	beq.n	8007ac4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a72:	4b4a      	ldr	r3, [pc, #296]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	099b      	lsrs	r3, r3, #6
 8007a78:	2200      	movs	r2, #0
 8007a7a:	623b      	str	r3, [r7, #32]
 8007a7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a84:	2100      	movs	r1, #0
 8007a86:	4b47      	ldr	r3, [pc, #284]	@ (8007ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a88:	fb03 f201 	mul.w	r2, r3, r1
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	fb00 f303 	mul.w	r3, r0, r3
 8007a92:	4413      	add	r3, r2
 8007a94:	4a43      	ldr	r2, [pc, #268]	@ (8007ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a96:	fba0 1202 	umull	r1, r2, r0, r2
 8007a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a9c:	460a      	mov	r2, r1
 8007a9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aa2:	4413      	add	r3, r2
 8007aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	61bb      	str	r3, [r7, #24]
 8007aac:	61fa      	str	r2, [r7, #28]
 8007aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007ab6:	f7f8 fbfb 	bl	80002b0 <__aeabi_uldivmod>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	4613      	mov	r3, r2
 8007ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac2:	e053      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ac4:	4b35      	ldr	r3, [pc, #212]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	099b      	lsrs	r3, r3, #6
 8007aca:	2200      	movs	r2, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	617a      	str	r2, [r7, #20]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007ad6:	f04f 0b00 	mov.w	fp, #0
 8007ada:	4652      	mov	r2, sl
 8007adc:	465b      	mov	r3, fp
 8007ade:	f04f 0000 	mov.w	r0, #0
 8007ae2:	f04f 0100 	mov.w	r1, #0
 8007ae6:	0159      	lsls	r1, r3, #5
 8007ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007aec:	0150      	lsls	r0, r2, #5
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	ebb2 080a 	subs.w	r8, r2, sl
 8007af6:	eb63 090b 	sbc.w	r9, r3, fp
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007b06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007b0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007b0e:	ebb2 0408 	subs.w	r4, r2, r8
 8007b12:	eb63 0509 	sbc.w	r5, r3, r9
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	f04f 0300 	mov.w	r3, #0
 8007b1e:	00eb      	lsls	r3, r5, #3
 8007b20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b24:	00e2      	lsls	r2, r4, #3
 8007b26:	4614      	mov	r4, r2
 8007b28:	461d      	mov	r5, r3
 8007b2a:	eb14 030a 	adds.w	r3, r4, sl
 8007b2e:	603b      	str	r3, [r7, #0]
 8007b30:	eb45 030b 	adc.w	r3, r5, fp
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	f04f 0200 	mov.w	r2, #0
 8007b3a:	f04f 0300 	mov.w	r3, #0
 8007b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b42:	4629      	mov	r1, r5
 8007b44:	028b      	lsls	r3, r1, #10
 8007b46:	4621      	mov	r1, r4
 8007b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	028a      	lsls	r2, r1, #10
 8007b50:	4610      	mov	r0, r2
 8007b52:	4619      	mov	r1, r3
 8007b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b56:	2200      	movs	r2, #0
 8007b58:	60bb      	str	r3, [r7, #8]
 8007b5a:	60fa      	str	r2, [r7, #12]
 8007b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b60:	f7f8 fba6 	bl	80002b0 <__aeabi_uldivmod>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4613      	mov	r3, r2
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	3301      	adds	r3, #1
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007b7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b86:	e002      	b.n	8007b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b88:	4b05      	ldr	r3, [pc, #20]	@ (8007ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3740      	adds	r7, #64	@ 0x40
 8007b94:	46bd      	mov	sp, r7
 8007b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b9a:	bf00      	nop
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	00f42400 	.word	0x00f42400
 8007ba4:	017d7840 	.word	0x017d7840

08007ba8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bac:	4b03      	ldr	r3, [pc, #12]	@ (8007bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8007bae:	681b      	ldr	r3, [r3, #0]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	20000000 	.word	0x20000000

08007bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bc4:	f7ff fff0 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	4b05      	ldr	r3, [pc, #20]	@ (8007be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	0a9b      	lsrs	r3, r3, #10
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	4903      	ldr	r1, [pc, #12]	@ (8007be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bd6:	5ccb      	ldrb	r3, [r1, r3]
 8007bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40023800 	.word	0x40023800
 8007be4:	0801b0dc 	.word	0x0801b0dc

08007be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bec:	f7ff ffdc 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	0b5b      	lsrs	r3, r3, #13
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	4903      	ldr	r1, [pc, #12]	@ (8007c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bfe:	5ccb      	ldrb	r3, [r1, r3]
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	0801b0dc 	.word	0x0801b0dc

08007c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d012      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c38:	4b69      	ldr	r3, [pc, #420]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	4a68      	ldr	r2, [pc, #416]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007c42:	6093      	str	r3, [r2, #8]
 8007c44:	4b66      	ldr	r3, [pc, #408]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4c:	4964      	ldr	r1, [pc, #400]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d017      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c78:	4959      	ldr	r1, [pc, #356]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c88:	d101      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007c96:	2301      	movs	r3, #1
 8007c98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d017      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb4:	494a      	ldr	r1, [pc, #296]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cc4:	d101      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 808b 	beq.w	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf8:	4a39      	ldr	r2, [pc, #228]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d00:	4b37      	ldr	r3, [pc, #220]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d0c:	4b35      	ldr	r3, [pc, #212]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a34      	ldr	r2, [pc, #208]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d18:	f7fa f86c 	bl	8001df4 <HAL_GetTick>
 8007d1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d20:	f7fa f868 	bl	8001df4 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b64      	cmp	r3, #100	@ 0x64
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e357      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d32:	4b2c      	ldr	r3, [pc, #176]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0f0      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d3e:	4b28      	ldr	r3, [pc, #160]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d035      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d02e      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d5c:	4b20      	ldr	r3, [pc, #128]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d66:	4b1e      	ldr	r3, [pc, #120]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d70:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d72:	4b1b      	ldr	r3, [pc, #108]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d76:	4a1a      	ldr	r2, [pc, #104]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d7e:	4a18      	ldr	r2, [pc, #96]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d84:	4b16      	ldr	r3, [pc, #88]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d114      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d90:	f7fa f830 	bl	8001df4 <HAL_GetTick>
 8007d94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d96:	e00a      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d98:	f7fa f82c 	bl	8001df4 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e319      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dae:	4b0c      	ldr	r3, [pc, #48]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0ee      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dc6:	d111      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007dc8:	4b05      	ldr	r3, [pc, #20]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007dd4:	4b04      	ldr	r3, [pc, #16]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007dd6:	400b      	ands	r3, r1
 8007dd8:	4901      	ldr	r1, [pc, #4]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
 8007dde:	e00b      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007de0:	40023800 	.word	0x40023800
 8007de4:	40007000 	.word	0x40007000
 8007de8:	0ffffcff 	.word	0x0ffffcff
 8007dec:	4baa      	ldr	r3, [pc, #680]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	4aa9      	ldr	r2, [pc, #676]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007df2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007df6:	6093      	str	r3, [r2, #8]
 8007df8:	4ba7      	ldr	r3, [pc, #668]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e04:	49a4      	ldr	r1, [pc, #656]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d010      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e16:	4ba0      	ldr	r3, [pc, #640]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e1c:	4a9e      	ldr	r2, [pc, #632]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007e26:	4b9c      	ldr	r3, [pc, #624]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e28:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e30:	4999      	ldr	r1, [pc, #612]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e44:	4b94      	ldr	r3, [pc, #592]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e52:	4991      	ldr	r1, [pc, #580]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e66:	4b8c      	ldr	r3, [pc, #560]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e74:	4988      	ldr	r1, [pc, #544]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e88:	4b83      	ldr	r3, [pc, #524]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e96:	4980      	ldr	r1, [pc, #512]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb8:	4977      	ldr	r1, [pc, #476]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ecc:	4b72      	ldr	r3, [pc, #456]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed2:	f023 0203 	bic.w	r2, r3, #3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eda:	496f      	ldr	r1, [pc, #444]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007eee:	4b6a      	ldr	r3, [pc, #424]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef4:	f023 020c 	bic.w	r2, r3, #12
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007efc:	4966      	ldr	r1, [pc, #408]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f10:	4b61      	ldr	r3, [pc, #388]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f16:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1e:	495e      	ldr	r1, [pc, #376]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f32:	4b59      	ldr	r3, [pc, #356]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f38:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f40:	4955      	ldr	r1, [pc, #340]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f54:	4b50      	ldr	r3, [pc, #320]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f62:	494d      	ldr	r1, [pc, #308]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f76:	4b48      	ldr	r3, [pc, #288]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f84:	4944      	ldr	r1, [pc, #272]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f98:	4b3f      	ldr	r3, [pc, #252]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fa6:	493c      	ldr	r1, [pc, #240]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007fba:	4b37      	ldr	r3, [pc, #220]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fc8:	4933      	ldr	r1, [pc, #204]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fea:	492b      	ldr	r1, [pc, #172]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d011      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ffe:	4b26      	ldr	r3, [pc, #152]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008004:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800800c:	4922      	ldr	r1, [pc, #136]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800800e:	4313      	orrs	r3, r2
 8008010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008018:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800801c:	d101      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800801e:	2301      	movs	r3, #1
 8008020:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800802e:	2301      	movs	r3, #1
 8008030:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800803e:	4b16      	ldr	r3, [pc, #88]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008044:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800804c:	4912      	ldr	r1, [pc, #72]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800804e:	4313      	orrs	r3, r2
 8008050:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008060:	4b0d      	ldr	r3, [pc, #52]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008066:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008070:	4909      	ldr	r1, [pc, #36]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008072:	4313      	orrs	r3, r2
 8008074:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d006      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 80d9 	beq.w	800823e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800808c:	4b02      	ldr	r3, [pc, #8]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a01      	ldr	r2, [pc, #4]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008092:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008096:	e001      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008098:	40023800 	.word	0x40023800
 800809c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809e:	f7f9 fea9 	bl	8001df4 <HAL_GetTick>
 80080a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080a4:	e008      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080a6:	f7f9 fea5 	bl	8001df4 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b64      	cmp	r3, #100	@ 0x64
 80080b2:	d901      	bls.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e194      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080b8:	4b6c      	ldr	r3, [pc, #432]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f0      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d021      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d11d      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80080d8:	4b64      	ldr	r3, [pc, #400]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080de:	0c1b      	lsrs	r3, r3, #16
 80080e0:	f003 0303 	and.w	r3, r3, #3
 80080e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080e6:	4b61      	ldr	r3, [pc, #388]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ec:	0e1b      	lsrs	r3, r3, #24
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	019a      	lsls	r2, r3, #6
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	431a      	orrs	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	061b      	lsls	r3, r3, #24
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	071b      	lsls	r3, r3, #28
 800810c:	4957      	ldr	r1, [pc, #348]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800810e:	4313      	orrs	r3, r2
 8008110:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008124:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008128:	d00a      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008132:	2b00      	cmp	r3, #0
 8008134:	d02e      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800813e:	d129      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008140:	4b4a      	ldr	r3, [pc, #296]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008146:	0c1b      	lsrs	r3, r3, #16
 8008148:	f003 0303 	and.w	r3, r3, #3
 800814c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800814e:	4b47      	ldr	r3, [pc, #284]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008154:	0f1b      	lsrs	r3, r3, #28
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	019a      	lsls	r2, r3, #6
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	041b      	lsls	r3, r3, #16
 8008166:	431a      	orrs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	061b      	lsls	r3, r3, #24
 800816e:	431a      	orrs	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	071b      	lsls	r3, r3, #28
 8008174:	493d      	ldr	r1, [pc, #244]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800817c:	4b3b      	ldr	r3, [pc, #236]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800817e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008182:	f023 021f 	bic.w	r2, r3, #31
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818a:	3b01      	subs	r3, #1
 800818c:	4937      	ldr	r1, [pc, #220]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01d      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80081a0:	4b32      	ldr	r3, [pc, #200]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081a6:	0e1b      	lsrs	r3, r3, #24
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081ae:	4b2f      	ldr	r3, [pc, #188]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081b4:	0f1b      	lsrs	r3, r3, #28
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	019a      	lsls	r2, r3, #6
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	431a      	orrs	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	061b      	lsls	r3, r3, #24
 80081ce:	431a      	orrs	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	071b      	lsls	r3, r3, #28
 80081d4:	4925      	ldr	r1, [pc, #148]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d011      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	019a      	lsls	r2, r3, #6
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	061b      	lsls	r3, r3, #24
 80081fc:	431a      	orrs	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	071b      	lsls	r3, r3, #28
 8008204:	4919      	ldr	r1, [pc, #100]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800820c:	4b17      	ldr	r3, [pc, #92]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a16      	ldr	r2, [pc, #88]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008212:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008218:	f7f9 fdec 	bl	8001df4 <HAL_GetTick>
 800821c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800821e:	e008      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008220:	f7f9 fde8 	bl	8001df4 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b64      	cmp	r3, #100	@ 0x64
 800822c:	d901      	bls.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e0d7      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008232:	4b0e      	ldr	r3, [pc, #56]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0f0      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	2b01      	cmp	r3, #1
 8008242:	f040 80cd 	bne.w	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008246:	4b09      	ldr	r3, [pc, #36]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a08      	ldr	r2, [pc, #32]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800824c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008252:	f7f9 fdcf 	bl	8001df4 <HAL_GetTick>
 8008256:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008258:	e00a      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800825a:	f7f9 fdcb 	bl	8001df4 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b64      	cmp	r3, #100	@ 0x64
 8008266:	d903      	bls.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e0ba      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800826c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008270:	4b5e      	ldr	r3, [pc, #376]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800827c:	d0ed      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800829a:	2b00      	cmp	r3, #0
 800829c:	d02e      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d12a      	bne.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80082a6:	4b51      	ldr	r3, [pc, #324]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ac:	0c1b      	lsrs	r3, r3, #16
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082b4:	4b4d      	ldr	r3, [pc, #308]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ba:	0f1b      	lsrs	r3, r3, #28
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	019a      	lsls	r2, r3, #6
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	041b      	lsls	r3, r3, #16
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	061b      	lsls	r3, r3, #24
 80082d4:	431a      	orrs	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	071b      	lsls	r3, r3, #28
 80082da:	4944      	ldr	r1, [pc, #272]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80082e2:	4b42      	ldr	r3, [pc, #264]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f0:	3b01      	subs	r3, #1
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	493d      	ldr	r1, [pc, #244]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d022      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800830c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008310:	d11d      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008312:	4b36      	ldr	r3, [pc, #216]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008318:	0e1b      	lsrs	r3, r3, #24
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008320:	4b32      	ldr	r3, [pc, #200]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008326:	0f1b      	lsrs	r3, r3, #28
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	019a      	lsls	r2, r3, #6
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	041b      	lsls	r3, r3, #16
 800833a:	431a      	orrs	r2, r3
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	061b      	lsls	r3, r3, #24
 8008340:	431a      	orrs	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	071b      	lsls	r3, r3, #28
 8008346:	4929      	ldr	r1, [pc, #164]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008348:	4313      	orrs	r3, r2
 800834a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0308 	and.w	r3, r3, #8
 8008356:	2b00      	cmp	r3, #0
 8008358:	d028      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800835a:	4b24      	ldr	r3, [pc, #144]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008360:	0e1b      	lsrs	r3, r3, #24
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008368:	4b20      	ldr	r3, [pc, #128]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800836a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	019a      	lsls	r2, r3, #6
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	041b      	lsls	r3, r3, #16
 8008380:	431a      	orrs	r2, r3
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	061b      	lsls	r3, r3, #24
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	071b      	lsls	r3, r3, #28
 800838e:	4917      	ldr	r1, [pc, #92]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008396:	4b15      	ldr	r3, [pc, #84]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800839c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	4911      	ldr	r1, [pc, #68]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80083ac:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a0e      	ldr	r2, [pc, #56]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b8:	f7f9 fd1c 	bl	8001df4 <HAL_GetTick>
 80083bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083be:	e008      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80083c0:	f7f9 fd18 	bl	8001df4 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b64      	cmp	r3, #100	@ 0x64
 80083cc:	d901      	bls.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e007      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083d2:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083de:	d1ef      	bne.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3720      	adds	r7, #32
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40023800 	.word	0x40023800

080083f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e09d      	b.n	800853e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	d108      	bne.n	800841c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008412:	d009      	beq.n	8008428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	61da      	str	r2, [r3, #28]
 800841a:	e005      	b.n	8008428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7f8 fdde 	bl	8001004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800845e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008468:	d902      	bls.n	8008470 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	e002      	b.n	8008476 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008470:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008474:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800847e:	d007      	beq.n	8008490 <HAL_SPI_Init+0xa0>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008488:	d002      	beq.n	8008490 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	431a      	orrs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084c8:	431a      	orrs	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d2:	ea42 0103 	orr.w	r1, r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	f003 0204 	and.w	r2, r3, #4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f4:	f003 0310 	and.w	r3, r3, #16
 80084f8:	431a      	orrs	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800850c:	ea42 0103 	orr.w	r1, r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800852c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b01      	cmp	r3, #1
 8008560:	d001      	beq.n	8008566 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008562:	2302      	movs	r3, #2
 8008564:	e0d4      	b.n	8008710 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <HAL_SPI_Transmit_DMA+0x2a>
 800856c:	88fb      	ldrh	r3, [r7, #6]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e0cc      	b.n	8008710 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_SPI_Transmit_DMA+0x3c>
 8008580:	2302      	movs	r3, #2
 8008582:	e0c5      	b.n	8008710 <HAL_SPI_Transmit_DMA+0x1c8>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2203      	movs	r2, #3
 8008590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	88fa      	ldrh	r2, [r7, #6]
 80085a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	88fa      	ldrh	r2, [r7, #6]
 80085aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d6:	d10f      	bne.n	80085f8 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085fc:	4a46      	ldr	r2, [pc, #280]	@ (8008718 <HAL_SPI_Transmit_DMA+0x1d0>)
 80085fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008604:	4a45      	ldr	r2, [pc, #276]	@ (800871c <HAL_SPI_Transmit_DMA+0x1d4>)
 8008606:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860c:	4a44      	ldr	r2, [pc, #272]	@ (8008720 <HAL_SPI_Transmit_DMA+0x1d8>)
 800860e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008614:	2200      	movs	r2, #0
 8008616:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008626:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008630:	d82d      	bhi.n	800868e <HAL_SPI_Transmit_DMA+0x146>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800863c:	d127      	bne.n	800868e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008642:	b29b      	uxth	r3, r3
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10f      	bne.n	800866c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800865a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008660:	b29b      	uxth	r3, r3
 8008662:	085b      	lsrs	r3, r3, #1
 8008664:	b29a      	uxth	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800866a:	e010      	b.n	800868e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800867a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008680:	b29b      	uxth	r3, r3
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	b29b      	uxth	r3, r3
 8008686:	3301      	adds	r3, #1
 8008688:	b29a      	uxth	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008696:	4619      	mov	r1, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80086a6:	f7fa fc25 	bl	8002ef4 <HAL_DMA_Start_IT>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00b      	beq.n	80086c8 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086b4:	f043 0210 	orr.w	r2, r3, #16
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e023      	b.n	8008710 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d2:	2b40      	cmp	r3, #64	@ 0x40
 80086d4:	d007      	beq.n	80086e6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086e4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f042 0220 	orr.w	r2, r2, #32
 80086fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0202 	orr.w	r2, r2, #2
 800870c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	080090b9 	.word	0x080090b9
 800871c:	08008ed5 	.word	0x08008ed5
 8008720:	0800910d 	.word	0x0800910d

08008724 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b01      	cmp	r3, #1
 800873c:	d001      	beq.n	8008742 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800873e:	2302      	movs	r3, #2
 8008740:	e105      	b.n	800894e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <HAL_SPI_Receive_DMA+0x2a>
 8008748:	88fb      	ldrh	r3, [r7, #6]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e0fd      	b.n	800894e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d110      	bne.n	800877c <HAL_SPI_Receive_DMA+0x58>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008762:	d10b      	bne.n	800877c <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2204      	movs	r2, #4
 8008768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 f8f6 	bl	8008964 <HAL_SPI_TransmitReceive_DMA>
 8008778:	4603      	mov	r3, r0
 800877a:	e0e8      	b.n	800894e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_SPI_Receive_DMA+0x66>
 8008786:	2302      	movs	r3, #2
 8008788:	e0e1      	b.n	800894e <HAL_SPI_Receive_DMA+0x22a>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2204      	movs	r2, #4
 8008796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	88fa      	ldrh	r2, [r7, #6]
 80087aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	88fa      	ldrh	r2, [r7, #6]
 80087b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087d6:	d10f      	bne.n	80087f8 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80087f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008806:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008810:	d908      	bls.n	8008824 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008820:	605a      	str	r2, [r3, #4]
 8008822:	e042      	b.n	80088aa <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008832:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800883e:	d134      	bne.n	80088aa <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800884e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008856:	b29b      	uxth	r3, r3
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d111      	bne.n	8008884 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800886e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008876:	b29b      	uxth	r3, r3
 8008878:	085b      	lsrs	r3, r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008882:	e012      	b.n	80088aa <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008892:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800889a:	b29b      	uxth	r3, r3
 800889c:	085b      	lsrs	r3, r3, #1
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3301      	adds	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008958 <HAL_SPI_Receive_DMA+0x234>)
 80088b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088b6:	4a29      	ldr	r2, [pc, #164]	@ (800895c <HAL_SPI_Receive_DMA+0x238>)
 80088b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088be:	4a28      	ldr	r2, [pc, #160]	@ (8008960 <HAL_SPI_Receive_DMA+0x23c>)
 80088c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088c6:	2200      	movs	r2, #0
 80088c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	330c      	adds	r3, #12
 80088d4:	4619      	mov	r1, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088da:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80088e4:	f7fa fb06 	bl	8002ef4 <HAL_DMA_Start_IT>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00b      	beq.n	8008906 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088f2:	f043 0210 	orr.w	r2, r3, #16
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e023      	b.n	800894e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008910:	2b40      	cmp	r3, #64	@ 0x40
 8008912:	d007      	beq.n	8008924 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008922:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0220 	orr.w	r2, r2, #32
 800893a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	080090d5 	.word	0x080090d5
 800895c:	08008f7d 	.word	0x08008f7d
 8008960:	0800910d 	.word	0x0800910d

08008964 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008978:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d00c      	beq.n	80089a0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800898c:	d106      	bne.n	800899c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <HAL_SPI_TransmitReceive_DMA+0x38>
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	2b04      	cmp	r3, #4
 800899a:	d001      	beq.n	80089a0 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800899c:	2302      	movs	r3, #2
 800899e:	e158      	b.n	8008c52 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d005      	beq.n	80089b2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80089ac:	887b      	ldrh	r3, [r7, #2]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e14d      	b.n	8008c52 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d101      	bne.n	80089c4 <HAL_SPI_TransmitReceive_DMA+0x60>
 80089c0:	2302      	movs	r3, #2
 80089c2:	e146      	b.n	8008c52 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d003      	beq.n	80089e0 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2205      	movs	r2, #5
 80089dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	887a      	ldrh	r2, [r7, #2]
 80089f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	887a      	ldrh	r2, [r7, #2]
 80089f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	887a      	ldrh	r2, [r7, #2]
 8008a02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	887a      	ldrh	r2, [r7, #2]
 8008a0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008a28:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a32:	d908      	bls.n	8008a46 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a42:	605a      	str	r2, [r3, #4]
 8008a44:	e06f      	b.n	8008b26 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a54:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a60:	d126      	bne.n	8008ab0 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10f      	bne.n	8008a8e <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008a7c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a8c:	e010      	b.n	8008ab0 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a9c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	085b      	lsrs	r3, r3, #1
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aba:	d134      	bne.n	8008b26 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008aca:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d111      	bne.n	8008b00 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008aea:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008afe:	e012      	b.n	8008b26 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b0e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d108      	bne.n	8008b44 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b36:	4a49      	ldr	r2, [pc, #292]	@ (8008c5c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8008b38:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b3e:	4a48      	ldr	r2, [pc, #288]	@ (8008c60 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008b40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008b42:	e007      	b.n	8008b54 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b48:	4a46      	ldr	r2, [pc, #280]	@ (8008c64 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8008b4a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b50:	4a45      	ldr	r2, [pc, #276]	@ (8008c68 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008b52:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b58:	4a44      	ldr	r2, [pc, #272]	@ (8008c6c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008b5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b60:	2200      	movs	r2, #0
 8008b62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	330c      	adds	r3, #12
 8008b6e:	4619      	mov	r1, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b74:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008b7e:	f7fa f9b9 	bl	8002ef4 <HAL_DMA_Start_IT>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00b      	beq.n	8008ba0 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b8c:	f043 0210 	orr.w	r2, r3, #16
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e058      	b.n	8008c52 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bcc:	2200      	movs	r2, #0
 8008bce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd8:	4619      	mov	r1, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	330c      	adds	r3, #12
 8008be0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008be6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008be8:	f7fa f984 	bl	8002ef4 <HAL_DMA_Start_IT>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00b      	beq.n	8008c0a <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bf6:	f043 0210 	orr.w	r2, r3, #16
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e023      	b.n	8008c52 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c14:	2b40      	cmp	r3, #64	@ 0x40
 8008c16:	d007      	beq.n	8008c28 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c26:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f042 0220 	orr.w	r2, r2, #32
 8008c3e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0202 	orr.w	r2, r2, #2
 8008c4e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	080090d5 	.word	0x080090d5
 8008c60:	08008f7d 	.word	0x08008f7d
 8008c64:	080090f1 	.word	0x080090f1
 8008c68:	08009027 	.word	0x08009027
 8008c6c:	0800910d 	.word	0x0800910d

08008c70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b088      	sub	sp, #32
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	099b      	lsrs	r3, r3, #6
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10f      	bne.n	8008cb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	099b      	lsrs	r3, r3, #6
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d004      	beq.n	8008cb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	4798      	blx	r3
    return;
 8008cb2:	e0d7      	b.n	8008e64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00a      	beq.n	8008cd6 <HAL_SPI_IRQHandler+0x66>
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	09db      	lsrs	r3, r3, #7
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	4798      	blx	r3
    return;
 8008cd4:	e0c6      	b.n	8008e64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	095b      	lsrs	r3, r3, #5
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10c      	bne.n	8008cfc <HAL_SPI_IRQHandler+0x8c>
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	099b      	lsrs	r3, r3, #6
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	0a1b      	lsrs	r3, r3, #8
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80b4 	beq.w	8008e64 <HAL_SPI_IRQHandler+0x1f4>
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	095b      	lsrs	r3, r3, #5
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 80ad 	beq.w	8008e64 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	099b      	lsrs	r3, r3, #6
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d023      	beq.n	8008d5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d011      	beq.n	8008d46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d26:	f043 0204 	orr.w	r2, r3, #4
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	e00b      	b.n	8008d5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d46:	2300      	movs	r3, #0
 8008d48:	613b      	str	r3, [r7, #16]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	613b      	str	r3, [r7, #16]
 8008d5a:	693b      	ldr	r3, [r7, #16]
        return;
 8008d5c:	e082      	b.n	8008e64 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d014      	beq.n	8008d94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d6e:	f043 0201 	orr.w	r2, r3, #1
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00c      	beq.n	8008dba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008da4:	f043 0208 	orr.w	r2, r3, #8
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008dac:	2300      	movs	r3, #0
 8008dae:	60bb      	str	r3, [r7, #8]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	60bb      	str	r3, [r7, #8]
 8008db8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d04f      	beq.n	8008e62 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008dd0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d104      	bne.n	8008dee <HAL_SPI_IRQHandler+0x17e>
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d034      	beq.n	8008e58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 0203 	bic.w	r2, r2, #3
 8008dfc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d011      	beq.n	8008e2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e0a:	4a18      	ldr	r2, [pc, #96]	@ (8008e6c <HAL_SPI_IRQHandler+0x1fc>)
 8008e0c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fa f93e 	bl	8003094 <HAL_DMA_Abort_IT>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d005      	beq.n	8008e2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e36:	4a0d      	ldr	r2, [pc, #52]	@ (8008e6c <HAL_SPI_IRQHandler+0x1fc>)
 8008e38:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fa f928 	bl	8003094 <HAL_DMA_Abort_IT>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008e56:	e003      	b.n	8008e60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f831 	bl	8008ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008e5e:	e000      	b.n	8008e62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008e60:	bf00      	nop
    return;
 8008e62:	bf00      	nop
  }
}
 8008e64:	3720      	adds	r7, #32
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	0800914d 	.word	0x0800914d

08008e70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ee2:	f7f8 ff87 	bl	8001df4 <HAL_GetTick>
 8008ee6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ef6:	d03b      	beq.n	8008f70 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 0220 	bic.w	r2, r2, #32
 8008f06:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0202 	bic.w	r2, r2, #2
 8008f16:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	2164      	movs	r1, #100	@ 0x64
 8008f1c:	6978      	ldr	r0, [r7, #20]
 8008f1e:	f000 fac5 	bl	80094ac <SPI_EndRxTxTransaction>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f2c:	f043 0220 	orr.w	r2, r3, #32
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2200      	movs	r2, #0
 8008f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008f68:	6978      	ldr	r0, [r7, #20]
 8008f6a:	f7ff ffa9 	bl	8008ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008f6e:	e002      	b.n	8008f76 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008f70:	6978      	ldr	r0, [r7, #20]
 8008f72:	f00d fb69 	bl	8016648 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f88:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f8a:	f7f8 ff33 	bl	8001df4 <HAL_GetTick>
 8008f8e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f9e:	d03c      	beq.n	800901a <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0220 	bic.w	r2, r2, #32
 8008fae:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10d      	bne.n	8008fd4 <SPI_DMAReceiveCplt+0x58>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fc0:	d108      	bne.n	8008fd4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0203 	bic.w	r2, r2, #3
 8008fd0:	605a      	str	r2, [r3, #4]
 8008fd2:	e007      	b.n	8008fe4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f022 0201 	bic.w	r2, r2, #1
 8008fe2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	2164      	movs	r1, #100	@ 0x64
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 f9e3 	bl	80093b4 <SPI_EndRxTransaction>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f7ff ff54 	bl	8008ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009018:	e002      	b.n	8009020 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f00d fb34 	bl	8016688 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009032:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009034:	f7f8 fede 	bl	8001df4 <HAL_GetTick>
 8009038:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009048:	d030      	beq.n	80090ac <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0220 	bic.w	r2, r2, #32
 8009058:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	2164      	movs	r1, #100	@ 0x64
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fa24 	bl	80094ac <SPI_EndRxTxTransaction>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800906e:	f043 0220 	orr.w	r2, r3, #32
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 0203 	bic.w	r2, r2, #3
 8009084:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff ff0b 	bl	8008ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80090aa:	e002      	b.n	80090b2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f7ff fedf 	bl	8008e70 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff fedc 	bl	8008e84 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090cc:	bf00      	nop
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff fed8 	bl	8008e98 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090e8:	bf00      	nop
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff fed4 	bl	8008eac <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009104:	bf00      	nop
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009118:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 0203 	bic.w	r2, r2, #3
 8009128:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800912e:	f043 0210 	orr.w	r2, r3, #16
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff febe 	bl	8008ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009158:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7ff fea9 	bl	8008ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800916e:	bf00      	nop
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009188:	f7f8 fe34 	bl	8001df4 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	1a9b      	subs	r3, r3, r2
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	4413      	add	r3, r2
 8009196:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009198:	f7f8 fe2c 	bl	8001df4 <HAL_GetTick>
 800919c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800919e:	4b39      	ldr	r3, [pc, #228]	@ (8009284 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	015b      	lsls	r3, r3, #5
 80091a4:	0d1b      	lsrs	r3, r3, #20
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	fb02 f303 	mul.w	r3, r2, r3
 80091ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091ae:	e055      	b.n	800925c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091b6:	d051      	beq.n	800925c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091b8:	f7f8 fe1c 	bl	8001df4 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	69fa      	ldr	r2, [r7, #28]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d902      	bls.n	80091ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d13d      	bne.n	800924a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091e6:	d111      	bne.n	800920c <SPI_WaitFlagStateUntilTimeout+0x94>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091f0:	d004      	beq.n	80091fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091fa:	d107      	bne.n	800920c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800920a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009214:	d10f      	bne.n	8009236 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009234:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e018      	b.n	800927c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d102      	bne.n	8009256 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	e002      	b.n	800925c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	3b01      	subs	r3, #1
 800925a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4013      	ands	r3, r2
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	429a      	cmp	r2, r3
 800926a:	bf0c      	ite	eq
 800926c:	2301      	moveq	r3, #1
 800926e:	2300      	movne	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	429a      	cmp	r2, r3
 8009278:	d19a      	bne.n	80091b0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20000000 	.word	0x20000000

08009288 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	@ 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800929a:	f7f8 fdab 	bl	8001df4 <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	1a9b      	subs	r3, r3, r2
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	4413      	add	r3, r2
 80092a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80092aa:	f7f8 fda3 	bl	8001df4 <HAL_GetTick>
 80092ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	330c      	adds	r3, #12
 80092b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80092b8:	4b3d      	ldr	r3, [pc, #244]	@ (80093b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	00da      	lsls	r2, r3, #3
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	0d1b      	lsrs	r3, r3, #20
 80092c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ca:	fb02 f303 	mul.w	r3, r2, r3
 80092ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092d0:	e061      	b.n	8009396 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092d8:	d107      	bne.n	80092ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d104      	bne.n	80092ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092f0:	d051      	beq.n	8009396 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092f2:	f7f8 fd7f 	bl	8001df4 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092fe:	429a      	cmp	r2, r3
 8009300:	d902      	bls.n	8009308 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009304:	2b00      	cmp	r3, #0
 8009306:	d13d      	bne.n	8009384 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009316:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009320:	d111      	bne.n	8009346 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800932a:	d004      	beq.n	8009336 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009334:	d107      	bne.n	8009346 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009344:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800934e:	d10f      	bne.n	8009370 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800936e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e011      	b.n	80093a8 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d102      	bne.n	8009390 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
 800938e:	e002      	b.n	8009396 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	3b01      	subs	r3, #1
 8009394:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	4013      	ands	r3, r2
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d195      	bne.n	80092d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3728      	adds	r7, #40	@ 0x28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20000000 	.word	0x20000000

080093b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af02      	add	r7, sp, #8
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093c8:	d111      	bne.n	80093ee <SPI_EndRxTransaction+0x3a>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093d2:	d004      	beq.n	80093de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093dc:	d107      	bne.n	80093ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093f6:	d112      	bne.n	800941e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2200      	movs	r2, #0
 8009400:	2180      	movs	r1, #128	@ 0x80
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff feb8 	bl	8009178 <SPI_WaitFlagStateUntilTimeout>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d021      	beq.n	8009452 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009412:	f043 0220 	orr.w	r2, r3, #32
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e03d      	b.n	800949a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800941e:	4b21      	ldr	r3, [pc, #132]	@ (80094a4 <SPI_EndRxTransaction+0xf0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a21      	ldr	r2, [pc, #132]	@ (80094a8 <SPI_EndRxTransaction+0xf4>)
 8009424:	fba2 2303 	umull	r2, r3, r2, r3
 8009428:	0d5b      	lsrs	r3, r3, #21
 800942a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800942e:	fb02 f303 	mul.w	r3, r2, r3
 8009432:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	3b01      	subs	r3, #1
 800943e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800944a:	2b80      	cmp	r3, #128	@ 0x80
 800944c:	d0f2      	beq.n	8009434 <SPI_EndRxTransaction+0x80>
 800944e:	e000      	b.n	8009452 <SPI_EndRxTransaction+0x9e>
        break;
 8009450:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800945a:	d11d      	bne.n	8009498 <SPI_EndRxTransaction+0xe4>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009464:	d004      	beq.n	8009470 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800946e:	d113      	bne.n	8009498 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2200      	movs	r2, #0
 8009478:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff ff03 	bl	8009288 <SPI_WaitFifoStateUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800948c:	f043 0220 	orr.w	r2, r3, #32
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e000      	b.n	800949a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000000 	.word	0x20000000
 80094a8:	165e9f81 	.word	0x165e9f81

080094ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2200      	movs	r2, #0
 80094c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff fedf 	bl	8009288 <SPI_WaitFifoStateUntilTimeout>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d007      	beq.n	80094e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094d4:	f043 0220 	orr.w	r2, r3, #32
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e046      	b.n	800956e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094e0:	4b25      	ldr	r3, [pc, #148]	@ (8009578 <SPI_EndRxTxTransaction+0xcc>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a25      	ldr	r2, [pc, #148]	@ (800957c <SPI_EndRxTxTransaction+0xd0>)
 80094e6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ea:	0d5b      	lsrs	r3, r3, #21
 80094ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80094f0:	fb02 f303 	mul.w	r3, r2, r3
 80094f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094fe:	d112      	bne.n	8009526 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2200      	movs	r2, #0
 8009508:	2180      	movs	r1, #128	@ 0x80
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff fe34 	bl	8009178 <SPI_WaitFlagStateUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d016      	beq.n	8009544 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800951a:	f043 0220 	orr.w	r2, r3, #32
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e023      	b.n	800956e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	3b01      	subs	r3, #1
 8009530:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800953c:	2b80      	cmp	r3, #128	@ 0x80
 800953e:	d0f2      	beq.n	8009526 <SPI_EndRxTxTransaction+0x7a>
 8009540:	e000      	b.n	8009544 <SPI_EndRxTxTransaction+0x98>
        break;
 8009542:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2200      	movs	r2, #0
 800954c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f7ff fe99 	bl	8009288 <SPI_WaitFifoStateUntilTimeout>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009560:	f043 0220 	orr.w	r2, r3, #32
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e000      	b.n	800956e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000000 	.word	0x20000000
 800957c:	165e9f81 	.word	0x165e9f81

08009580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e040      	b.n	8009614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f8 f91c 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2224      	movs	r2, #36	@ 0x24
 80095ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 0201 	bic.w	r2, r2, #1
 80095bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fece 	bl	800a368 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fc67 	bl	8009ea0 <UART_SetConfig>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e01b      	b.n	8009614 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689a      	ldr	r2, [r3, #8]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f042 0201 	orr.w	r2, r2, #1
 800960a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 ff4d 	bl	800a4ac <UART_CheckIdleState>
 8009612:	4603      	mov	r3, r0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b08a      	sub	sp, #40	@ 0x28
 8009620:	af02      	add	r7, sp, #8
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	4613      	mov	r3, r2
 800962a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009630:	2b20      	cmp	r3, #32
 8009632:	d177      	bne.n	8009724 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <HAL_UART_Transmit+0x24>
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e070      	b.n	8009726 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2221      	movs	r2, #33	@ 0x21
 8009650:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009652:	f7f8 fbcf 	bl	8001df4 <HAL_GetTick>
 8009656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	88fa      	ldrh	r2, [r7, #6]
 8009664:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009670:	d108      	bne.n	8009684 <HAL_UART_Transmit+0x68>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d104      	bne.n	8009684 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800967a:	2300      	movs	r3, #0
 800967c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	61bb      	str	r3, [r7, #24]
 8009682:	e003      	b.n	800968c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009688:	2300      	movs	r3, #0
 800968a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800968c:	e02f      	b.n	80096ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2200      	movs	r2, #0
 8009696:	2180      	movs	r1, #128	@ 0x80
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 ff5e 	bl	800a55a <UART_WaitOnFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d004      	beq.n	80096ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2220      	movs	r2, #32
 80096a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e03b      	b.n	8009726 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	3302      	adds	r3, #2
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	e007      	b.n	80096dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	781a      	ldrb	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	3301      	adds	r3, #1
 80096da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1c9      	bne.n	800968e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2200      	movs	r2, #0
 8009702:	2140      	movs	r1, #64	@ 0x40
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 ff28 	bl	800a55a <UART_WaitOnFlagUntilTimeout>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2220      	movs	r2, #32
 8009714:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e005      	b.n	8009726 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2220      	movs	r2, #32
 800971e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	e000      	b.n	8009726 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009724:	2302      	movs	r3, #2
  }
}
 8009726:	4618      	mov	r0, r3
 8009728:	3720      	adds	r7, #32
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009730:	b480      	push	{r7}
 8009732:	b08b      	sub	sp, #44	@ 0x2c
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009742:	2b20      	cmp	r3, #32
 8009744:	d147      	bne.n	80097d6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <HAL_UART_Transmit_IT+0x22>
 800974c:	88fb      	ldrh	r3, [r7, #6]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e040      	b.n	80097d8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	88fa      	ldrh	r2, [r7, #6]
 8009760:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	88fa      	ldrh	r2, [r7, #6]
 8009768:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2221      	movs	r2, #33	@ 0x21
 800977e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009788:	d107      	bne.n	800979a <HAL_UART_Transmit_IT+0x6a>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d103      	bne.n	800979a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4a13      	ldr	r2, [pc, #76]	@ (80097e4 <HAL_UART_Transmit_IT+0xb4>)
 8009796:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009798:	e002      	b.n	80097a0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4a12      	ldr	r2, [pc, #72]	@ (80097e8 <HAL_UART_Transmit_IT+0xb8>)
 800979e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	613b      	str	r3, [r7, #16]
   return(result);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	623b      	str	r3, [r7, #32]
 80097c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	69f9      	ldr	r1, [r7, #28]
 80097c4:	6a3a      	ldr	r2, [r7, #32]
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e6      	bne.n	80097a0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e000      	b.n	80097d8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80097d6:	2302      	movs	r3, #2
  }
}
 80097d8:	4618      	mov	r0, r3
 80097da:	372c      	adds	r7, #44	@ 0x2c
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	0800abb1 	.word	0x0800abb1
 80097e8:	0800aafb 	.word	0x0800aafb

080097ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08a      	sub	sp, #40	@ 0x28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009800:	2b20      	cmp	r3, #32
 8009802:	d132      	bne.n	800986a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <HAL_UART_Receive_DMA+0x24>
 800980a:	88fb      	ldrh	r3, [r7, #6]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e02b      	b.n	800986c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d018      	beq.n	800985a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	613b      	str	r3, [r7, #16]
   return(result);
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800983c:	627b      	str	r3, [r7, #36]	@ 0x24
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	623b      	str	r3, [r7, #32]
 8009848:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	69f9      	ldr	r1, [r7, #28]
 800984c:	6a3a      	ldr	r2, [r7, #32]
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	61bb      	str	r3, [r7, #24]
   return(result);
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e6      	bne.n	8009828 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800985a:	88fb      	ldrh	r3, [r7, #6]
 800985c:	461a      	mov	r2, r3
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 fee7 	bl	800a634 <UART_Start_Receive_DMA>
 8009866:	4603      	mov	r3, r0
 8009868:	e000      	b.n	800986c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800986a:	2302      	movs	r3, #2
  }
}
 800986c:	4618      	mov	r0, r3
 800986e:	3728      	adds	r7, #40	@ 0x28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b0ba      	sub	sp, #232	@ 0xe8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800989a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800989e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80098a2:	4013      	ands	r3, r2
 80098a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80098a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d115      	bne.n	80098dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80098b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00f      	beq.n	80098dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80098bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d009      	beq.n	80098dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 82b1 	beq.w	8009e34 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	4798      	blx	r3
      }
      return;
 80098da:	e2ab      	b.n	8009e34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 8117 	beq.w	8009b14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80098e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80098f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80098f6:	4b85      	ldr	r3, [pc, #532]	@ (8009b0c <HAL_UART_IRQHandler+0x298>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 810a 	beq.w	8009b14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d011      	beq.n	8009930 <HAL_UART_IRQHandler+0xbc>
 800990c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2201      	movs	r2, #1
 800991e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009926:	f043 0201 	orr.w	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d011      	beq.n	8009960 <HAL_UART_IRQHandler+0xec>
 800993c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2202      	movs	r2, #2
 800994e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009956:	f043 0204 	orr.w	r2, r3, #4
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d011      	beq.n	8009990 <HAL_UART_IRQHandler+0x11c>
 800996c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2204      	movs	r2, #4
 800997e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009986:	f043 0202 	orr.w	r2, r3, #2
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009994:	f003 0308 	and.w	r3, r3, #8
 8009998:	2b00      	cmp	r3, #0
 800999a:	d017      	beq.n	80099cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800999c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d105      	bne.n	80099b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80099a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00b      	beq.n	80099cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2208      	movs	r2, #8
 80099ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099c2:	f043 0208 	orr.w	r2, r3, #8
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d012      	beq.n	80099fe <HAL_UART_IRQHandler+0x18a>
 80099d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00c      	beq.n	80099fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099f4:	f043 0220 	orr.w	r2, r3, #32
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8217 	beq.w	8009e38 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00d      	beq.n	8009a32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a1a:	f003 0320 	and.w	r3, r3, #32
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d007      	beq.n	8009a32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a46:	2b40      	cmp	r3, #64	@ 0x40
 8009a48:	d005      	beq.n	8009a56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d04f      	beq.n	8009af6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 feb2 	bl	800a7c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a66:	2b40      	cmp	r3, #64	@ 0x40
 8009a68:	d141      	bne.n	8009aee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a78:	e853 3f00 	ldrex	r3, [r3]
 8009a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3308      	adds	r3, #8
 8009a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009aa6:	e841 2300 	strex	r3, r2, [r1]
 8009aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1d9      	bne.n	8009a6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d013      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ac2:	4a13      	ldr	r2, [pc, #76]	@ (8009b10 <HAL_UART_IRQHandler+0x29c>)
 8009ac4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7f9 fae2 	bl	8003094 <HAL_DMA_Abort_IT>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d017      	beq.n	8009b06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae4:	e00f      	b.n	8009b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9c4 	bl	8009e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aec:	e00b      	b.n	8009b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f9c0 	bl	8009e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af4:	e007      	b.n	8009b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f9bc 	bl	8009e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009b04:	e198      	b.n	8009e38 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b06:	bf00      	nop
    return;
 8009b08:	e196      	b.n	8009e38 <HAL_UART_IRQHandler+0x5c4>
 8009b0a:	bf00      	nop
 8009b0c:	04000120 	.word	0x04000120
 8009b10:	0800aad7 	.word	0x0800aad7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	f040 8166 	bne.w	8009dea <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b22:	f003 0310 	and.w	r3, r3, #16
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 815f 	beq.w	8009dea <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b30:	f003 0310 	and.w	r3, r3, #16
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 8158 	beq.w	8009dea <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2210      	movs	r2, #16
 8009b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4c:	2b40      	cmp	r3, #64	@ 0x40
 8009b4e:	f040 80d0 	bne.w	8009cf2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80ab 	beq.w	8009cbe <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b72:	429a      	cmp	r2, r3
 8009b74:	f080 80a3 	bcs.w	8009cbe <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b8c:	f000 8086 	beq.w	8009c9c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bbe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1da      	bne.n	8009b90 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3308      	adds	r3, #8
 8009be0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bec:	f023 0301 	bic.w	r3, r3, #1
 8009bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3308      	adds	r3, #8
 8009bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009bfe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e1      	bne.n	8009bda <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3308      	adds	r3, #8
 8009c36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e3      	bne.n	8009c16 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c6c:	f023 0310 	bic.w	r3, r3, #16
 8009c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e4      	bne.n	8009c5c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f9 f98c 	bl	8002fb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f8e6 	bl	8009e88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009cbc:	e0be      	b.n	8009e3c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009cc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	f040 80b7 	bne.w	8009e3c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cd8:	f040 80b0 	bne.w	8009e3c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f8cc 	bl	8009e88 <HAL_UARTEx_RxEventCallback>
      return;
 8009cf0:	e0a4      	b.n	8009e3c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 8096 	beq.w	8009e40 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8009d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 8091 	beq.w	8009e40 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	e853 3f00 	ldrex	r3, [r3]
 8009d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d48:	e841 2300 	strex	r3, r2, [r1]
 8009d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e4      	bne.n	8009d1e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	623b      	str	r3, [r7, #32]
   return(result);
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	f023 0301 	bic.w	r3, r3, #1
 8009d6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3308      	adds	r3, #8
 8009d74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d78:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e3      	bne.n	8009d54 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f023 0310 	bic.w	r3, r3, #16
 8009db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	69b9      	ldr	r1, [r7, #24]
 8009dc8:	69fa      	ldr	r2, [r7, #28]
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	617b      	str	r3, [r7, #20]
   return(result);
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e4      	bne.n	8009da0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f850 	bl	8009e88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009de8:	e02a      	b.n	8009e40 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00e      	beq.n	8009e14 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d008      	beq.n	8009e14 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d01c      	beq.n	8009e44 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	4798      	blx	r3
    }
    return;
 8009e12:	e017      	b.n	8009e44 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d012      	beq.n	8009e46 <HAL_UART_IRQHandler+0x5d2>
 8009e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00c      	beq.n	8009e46 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 ff1f 	bl	800ac70 <UART_EndTransmit_IT>
    return;
 8009e32:	e008      	b.n	8009e46 <HAL_UART_IRQHandler+0x5d2>
      return;
 8009e34:	bf00      	nop
 8009e36:	e006      	b.n	8009e46 <HAL_UART_IRQHandler+0x5d2>
    return;
 8009e38:	bf00      	nop
 8009e3a:	e004      	b.n	8009e46 <HAL_UART_IRQHandler+0x5d2>
      return;
 8009e3c:	bf00      	nop
 8009e3e:	e002      	b.n	8009e46 <HAL_UART_IRQHandler+0x5d2>
      return;
 8009e40:	bf00      	nop
 8009e42:	e000      	b.n	8009e46 <HAL_UART_IRQHandler+0x5d2>
    return;
 8009e44:	bf00      	nop
  }

}
 8009e46:	37e8      	adds	r7, #232	@ 0xe8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	4ba6      	ldr	r3, [pc, #664]	@ (800a164 <UART_SetConfig+0x2c4>)
 8009ecc:	4013      	ands	r3, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6812      	ldr	r2, [r2, #0]
 8009ed2:	6979      	ldr	r1, [r7, #20]
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a94      	ldr	r2, [pc, #592]	@ (800a168 <UART_SetConfig+0x2c8>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d120      	bne.n	8009f5e <UART_SetConfig+0xbe>
 8009f1c:	4b93      	ldr	r3, [pc, #588]	@ (800a16c <UART_SetConfig+0x2cc>)
 8009f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f22:	f003 0303 	and.w	r3, r3, #3
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d816      	bhi.n	8009f58 <UART_SetConfig+0xb8>
 8009f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f30 <UART_SetConfig+0x90>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f41 	.word	0x08009f41
 8009f34:	08009f4d 	.word	0x08009f4d
 8009f38:	08009f47 	.word	0x08009f47
 8009f3c:	08009f53 	.word	0x08009f53
 8009f40:	2301      	movs	r3, #1
 8009f42:	77fb      	strb	r3, [r7, #31]
 8009f44:	e150      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009f46:	2302      	movs	r3, #2
 8009f48:	77fb      	strb	r3, [r7, #31]
 8009f4a:	e14d      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009f4c:	2304      	movs	r3, #4
 8009f4e:	77fb      	strb	r3, [r7, #31]
 8009f50:	e14a      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009f52:	2308      	movs	r3, #8
 8009f54:	77fb      	strb	r3, [r7, #31]
 8009f56:	e147      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009f58:	2310      	movs	r3, #16
 8009f5a:	77fb      	strb	r3, [r7, #31]
 8009f5c:	e144      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a83      	ldr	r2, [pc, #524]	@ (800a170 <UART_SetConfig+0x2d0>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d132      	bne.n	8009fce <UART_SetConfig+0x12e>
 8009f68:	4b80      	ldr	r3, [pc, #512]	@ (800a16c <UART_SetConfig+0x2cc>)
 8009f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f6e:	f003 030c 	and.w	r3, r3, #12
 8009f72:	2b0c      	cmp	r3, #12
 8009f74:	d828      	bhi.n	8009fc8 <UART_SetConfig+0x128>
 8009f76:	a201      	add	r2, pc, #4	@ (adr r2, 8009f7c <UART_SetConfig+0xdc>)
 8009f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7c:	08009fb1 	.word	0x08009fb1
 8009f80:	08009fc9 	.word	0x08009fc9
 8009f84:	08009fc9 	.word	0x08009fc9
 8009f88:	08009fc9 	.word	0x08009fc9
 8009f8c:	08009fbd 	.word	0x08009fbd
 8009f90:	08009fc9 	.word	0x08009fc9
 8009f94:	08009fc9 	.word	0x08009fc9
 8009f98:	08009fc9 	.word	0x08009fc9
 8009f9c:	08009fb7 	.word	0x08009fb7
 8009fa0:	08009fc9 	.word	0x08009fc9
 8009fa4:	08009fc9 	.word	0x08009fc9
 8009fa8:	08009fc9 	.word	0x08009fc9
 8009fac:	08009fc3 	.word	0x08009fc3
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	77fb      	strb	r3, [r7, #31]
 8009fb4:	e118      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	77fb      	strb	r3, [r7, #31]
 8009fba:	e115      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009fbc:	2304      	movs	r3, #4
 8009fbe:	77fb      	strb	r3, [r7, #31]
 8009fc0:	e112      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009fc2:	2308      	movs	r3, #8
 8009fc4:	77fb      	strb	r3, [r7, #31]
 8009fc6:	e10f      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009fc8:	2310      	movs	r3, #16
 8009fca:	77fb      	strb	r3, [r7, #31]
 8009fcc:	e10c      	b.n	800a1e8 <UART_SetConfig+0x348>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a68      	ldr	r2, [pc, #416]	@ (800a174 <UART_SetConfig+0x2d4>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d120      	bne.n	800a01a <UART_SetConfig+0x17a>
 8009fd8:	4b64      	ldr	r3, [pc, #400]	@ (800a16c <UART_SetConfig+0x2cc>)
 8009fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fde:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009fe2:	2b30      	cmp	r3, #48	@ 0x30
 8009fe4:	d013      	beq.n	800a00e <UART_SetConfig+0x16e>
 8009fe6:	2b30      	cmp	r3, #48	@ 0x30
 8009fe8:	d814      	bhi.n	800a014 <UART_SetConfig+0x174>
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	d009      	beq.n	800a002 <UART_SetConfig+0x162>
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	d810      	bhi.n	800a014 <UART_SetConfig+0x174>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <UART_SetConfig+0x15c>
 8009ff6:	2b10      	cmp	r3, #16
 8009ff8:	d006      	beq.n	800a008 <UART_SetConfig+0x168>
 8009ffa:	e00b      	b.n	800a014 <UART_SetConfig+0x174>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	77fb      	strb	r3, [r7, #31]
 800a000:	e0f2      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a002:	2302      	movs	r3, #2
 800a004:	77fb      	strb	r3, [r7, #31]
 800a006:	e0ef      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a008:	2304      	movs	r3, #4
 800a00a:	77fb      	strb	r3, [r7, #31]
 800a00c:	e0ec      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a00e:	2308      	movs	r3, #8
 800a010:	77fb      	strb	r3, [r7, #31]
 800a012:	e0e9      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a014:	2310      	movs	r3, #16
 800a016:	77fb      	strb	r3, [r7, #31]
 800a018:	e0e6      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a56      	ldr	r2, [pc, #344]	@ (800a178 <UART_SetConfig+0x2d8>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d120      	bne.n	800a066 <UART_SetConfig+0x1c6>
 800a024:	4b51      	ldr	r3, [pc, #324]	@ (800a16c <UART_SetConfig+0x2cc>)
 800a026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a02a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a02e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a030:	d013      	beq.n	800a05a <UART_SetConfig+0x1ba>
 800a032:	2bc0      	cmp	r3, #192	@ 0xc0
 800a034:	d814      	bhi.n	800a060 <UART_SetConfig+0x1c0>
 800a036:	2b80      	cmp	r3, #128	@ 0x80
 800a038:	d009      	beq.n	800a04e <UART_SetConfig+0x1ae>
 800a03a:	2b80      	cmp	r3, #128	@ 0x80
 800a03c:	d810      	bhi.n	800a060 <UART_SetConfig+0x1c0>
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <UART_SetConfig+0x1a8>
 800a042:	2b40      	cmp	r3, #64	@ 0x40
 800a044:	d006      	beq.n	800a054 <UART_SetConfig+0x1b4>
 800a046:	e00b      	b.n	800a060 <UART_SetConfig+0x1c0>
 800a048:	2300      	movs	r3, #0
 800a04a:	77fb      	strb	r3, [r7, #31]
 800a04c:	e0cc      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a04e:	2302      	movs	r3, #2
 800a050:	77fb      	strb	r3, [r7, #31]
 800a052:	e0c9      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a054:	2304      	movs	r3, #4
 800a056:	77fb      	strb	r3, [r7, #31]
 800a058:	e0c6      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a05a:	2308      	movs	r3, #8
 800a05c:	77fb      	strb	r3, [r7, #31]
 800a05e:	e0c3      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a060:	2310      	movs	r3, #16
 800a062:	77fb      	strb	r3, [r7, #31]
 800a064:	e0c0      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a44      	ldr	r2, [pc, #272]	@ (800a17c <UART_SetConfig+0x2dc>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d125      	bne.n	800a0bc <UART_SetConfig+0x21c>
 800a070:	4b3e      	ldr	r3, [pc, #248]	@ (800a16c <UART_SetConfig+0x2cc>)
 800a072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a07a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a07e:	d017      	beq.n	800a0b0 <UART_SetConfig+0x210>
 800a080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a084:	d817      	bhi.n	800a0b6 <UART_SetConfig+0x216>
 800a086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a08a:	d00b      	beq.n	800a0a4 <UART_SetConfig+0x204>
 800a08c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a090:	d811      	bhi.n	800a0b6 <UART_SetConfig+0x216>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <UART_SetConfig+0x1fe>
 800a096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a09a:	d006      	beq.n	800a0aa <UART_SetConfig+0x20a>
 800a09c:	e00b      	b.n	800a0b6 <UART_SetConfig+0x216>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	77fb      	strb	r3, [r7, #31]
 800a0a2:	e0a1      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	77fb      	strb	r3, [r7, #31]
 800a0a8:	e09e      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a0aa:	2304      	movs	r3, #4
 800a0ac:	77fb      	strb	r3, [r7, #31]
 800a0ae:	e09b      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a0b0:	2308      	movs	r3, #8
 800a0b2:	77fb      	strb	r3, [r7, #31]
 800a0b4:	e098      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a0b6:	2310      	movs	r3, #16
 800a0b8:	77fb      	strb	r3, [r7, #31]
 800a0ba:	e095      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a2f      	ldr	r2, [pc, #188]	@ (800a180 <UART_SetConfig+0x2e0>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d125      	bne.n	800a112 <UART_SetConfig+0x272>
 800a0c6:	4b29      	ldr	r3, [pc, #164]	@ (800a16c <UART_SetConfig+0x2cc>)
 800a0c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a0d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0d4:	d017      	beq.n	800a106 <UART_SetConfig+0x266>
 800a0d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0da:	d817      	bhi.n	800a10c <UART_SetConfig+0x26c>
 800a0dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0e0:	d00b      	beq.n	800a0fa <UART_SetConfig+0x25a>
 800a0e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0e6:	d811      	bhi.n	800a10c <UART_SetConfig+0x26c>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <UART_SetConfig+0x254>
 800a0ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0f0:	d006      	beq.n	800a100 <UART_SetConfig+0x260>
 800a0f2:	e00b      	b.n	800a10c <UART_SetConfig+0x26c>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	77fb      	strb	r3, [r7, #31]
 800a0f8:	e076      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	77fb      	strb	r3, [r7, #31]
 800a0fe:	e073      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a100:	2304      	movs	r3, #4
 800a102:	77fb      	strb	r3, [r7, #31]
 800a104:	e070      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a106:	2308      	movs	r3, #8
 800a108:	77fb      	strb	r3, [r7, #31]
 800a10a:	e06d      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a10c:	2310      	movs	r3, #16
 800a10e:	77fb      	strb	r3, [r7, #31]
 800a110:	e06a      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a1b      	ldr	r2, [pc, #108]	@ (800a184 <UART_SetConfig+0x2e4>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d138      	bne.n	800a18e <UART_SetConfig+0x2ee>
 800a11c:	4b13      	ldr	r3, [pc, #76]	@ (800a16c <UART_SetConfig+0x2cc>)
 800a11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a122:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a126:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a12a:	d017      	beq.n	800a15c <UART_SetConfig+0x2bc>
 800a12c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a130:	d82a      	bhi.n	800a188 <UART_SetConfig+0x2e8>
 800a132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a136:	d00b      	beq.n	800a150 <UART_SetConfig+0x2b0>
 800a138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a13c:	d824      	bhi.n	800a188 <UART_SetConfig+0x2e8>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <UART_SetConfig+0x2aa>
 800a142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a146:	d006      	beq.n	800a156 <UART_SetConfig+0x2b6>
 800a148:	e01e      	b.n	800a188 <UART_SetConfig+0x2e8>
 800a14a:	2300      	movs	r3, #0
 800a14c:	77fb      	strb	r3, [r7, #31]
 800a14e:	e04b      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a150:	2302      	movs	r3, #2
 800a152:	77fb      	strb	r3, [r7, #31]
 800a154:	e048      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a156:	2304      	movs	r3, #4
 800a158:	77fb      	strb	r3, [r7, #31]
 800a15a:	e045      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a15c:	2308      	movs	r3, #8
 800a15e:	77fb      	strb	r3, [r7, #31]
 800a160:	e042      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a162:	bf00      	nop
 800a164:	efff69f3 	.word	0xefff69f3
 800a168:	40011000 	.word	0x40011000
 800a16c:	40023800 	.word	0x40023800
 800a170:	40004400 	.word	0x40004400
 800a174:	40004800 	.word	0x40004800
 800a178:	40004c00 	.word	0x40004c00
 800a17c:	40005000 	.word	0x40005000
 800a180:	40011400 	.word	0x40011400
 800a184:	40007800 	.word	0x40007800
 800a188:	2310      	movs	r3, #16
 800a18a:	77fb      	strb	r3, [r7, #31]
 800a18c:	e02c      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a72      	ldr	r2, [pc, #456]	@ (800a35c <UART_SetConfig+0x4bc>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d125      	bne.n	800a1e4 <UART_SetConfig+0x344>
 800a198:	4b71      	ldr	r3, [pc, #452]	@ (800a360 <UART_SetConfig+0x4c0>)
 800a19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a19e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a1a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a1a6:	d017      	beq.n	800a1d8 <UART_SetConfig+0x338>
 800a1a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a1ac:	d817      	bhi.n	800a1de <UART_SetConfig+0x33e>
 800a1ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1b2:	d00b      	beq.n	800a1cc <UART_SetConfig+0x32c>
 800a1b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1b8:	d811      	bhi.n	800a1de <UART_SetConfig+0x33e>
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <UART_SetConfig+0x326>
 800a1be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1c2:	d006      	beq.n	800a1d2 <UART_SetConfig+0x332>
 800a1c4:	e00b      	b.n	800a1de <UART_SetConfig+0x33e>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	77fb      	strb	r3, [r7, #31]
 800a1ca:	e00d      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	77fb      	strb	r3, [r7, #31]
 800a1d0:	e00a      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a1d2:	2304      	movs	r3, #4
 800a1d4:	77fb      	strb	r3, [r7, #31]
 800a1d6:	e007      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a1d8:	2308      	movs	r3, #8
 800a1da:	77fb      	strb	r3, [r7, #31]
 800a1dc:	e004      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a1de:	2310      	movs	r3, #16
 800a1e0:	77fb      	strb	r3, [r7, #31]
 800a1e2:	e001      	b.n	800a1e8 <UART_SetConfig+0x348>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1f0:	d15b      	bne.n	800a2aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a1f2:	7ffb      	ldrb	r3, [r7, #31]
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	d828      	bhi.n	800a24a <UART_SetConfig+0x3aa>
 800a1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a200 <UART_SetConfig+0x360>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a225 	.word	0x0800a225
 800a204:	0800a22d 	.word	0x0800a22d
 800a208:	0800a235 	.word	0x0800a235
 800a20c:	0800a24b 	.word	0x0800a24b
 800a210:	0800a23b 	.word	0x0800a23b
 800a214:	0800a24b 	.word	0x0800a24b
 800a218:	0800a24b 	.word	0x0800a24b
 800a21c:	0800a24b 	.word	0x0800a24b
 800a220:	0800a243 	.word	0x0800a243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a224:	f7fd fccc 	bl	8007bc0 <HAL_RCC_GetPCLK1Freq>
 800a228:	61b8      	str	r0, [r7, #24]
        break;
 800a22a:	e013      	b.n	800a254 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a22c:	f7fd fcdc 	bl	8007be8 <HAL_RCC_GetPCLK2Freq>
 800a230:	61b8      	str	r0, [r7, #24]
        break;
 800a232:	e00f      	b.n	800a254 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a234:	4b4b      	ldr	r3, [pc, #300]	@ (800a364 <UART_SetConfig+0x4c4>)
 800a236:	61bb      	str	r3, [r7, #24]
        break;
 800a238:	e00c      	b.n	800a254 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a23a:	f7fd fbef 	bl	8007a1c <HAL_RCC_GetSysClockFreq>
 800a23e:	61b8      	str	r0, [r7, #24]
        break;
 800a240:	e008      	b.n	800a254 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a246:	61bb      	str	r3, [r7, #24]
        break;
 800a248:	e004      	b.n	800a254 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	77bb      	strb	r3, [r7, #30]
        break;
 800a252:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d074      	beq.n	800a344 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	005a      	lsls	r2, r3, #1
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	085b      	lsrs	r3, r3, #1
 800a264:	441a      	add	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2b0f      	cmp	r3, #15
 800a274:	d916      	bls.n	800a2a4 <UART_SetConfig+0x404>
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a27c:	d212      	bcs.n	800a2a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	b29b      	uxth	r3, r3
 800a282:	f023 030f 	bic.w	r3, r3, #15
 800a286:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	085b      	lsrs	r3, r3, #1
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	b29a      	uxth	r2, r3
 800a294:	89fb      	ldrh	r3, [r7, #14]
 800a296:	4313      	orrs	r3, r2
 800a298:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	89fa      	ldrh	r2, [r7, #14]
 800a2a0:	60da      	str	r2, [r3, #12]
 800a2a2:	e04f      	b.n	800a344 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	77bb      	strb	r3, [r7, #30]
 800a2a8:	e04c      	b.n	800a344 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2aa:	7ffb      	ldrb	r3, [r7, #31]
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d828      	bhi.n	800a302 <UART_SetConfig+0x462>
 800a2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b8 <UART_SetConfig+0x418>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2dd 	.word	0x0800a2dd
 800a2bc:	0800a2e5 	.word	0x0800a2e5
 800a2c0:	0800a2ed 	.word	0x0800a2ed
 800a2c4:	0800a303 	.word	0x0800a303
 800a2c8:	0800a2f3 	.word	0x0800a2f3
 800a2cc:	0800a303 	.word	0x0800a303
 800a2d0:	0800a303 	.word	0x0800a303
 800a2d4:	0800a303 	.word	0x0800a303
 800a2d8:	0800a2fb 	.word	0x0800a2fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2dc:	f7fd fc70 	bl	8007bc0 <HAL_RCC_GetPCLK1Freq>
 800a2e0:	61b8      	str	r0, [r7, #24]
        break;
 800a2e2:	e013      	b.n	800a30c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2e4:	f7fd fc80 	bl	8007be8 <HAL_RCC_GetPCLK2Freq>
 800a2e8:	61b8      	str	r0, [r7, #24]
        break;
 800a2ea:	e00f      	b.n	800a30c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a364 <UART_SetConfig+0x4c4>)
 800a2ee:	61bb      	str	r3, [r7, #24]
        break;
 800a2f0:	e00c      	b.n	800a30c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2f2:	f7fd fb93 	bl	8007a1c <HAL_RCC_GetSysClockFreq>
 800a2f6:	61b8      	str	r0, [r7, #24]
        break;
 800a2f8:	e008      	b.n	800a30c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2fe:	61bb      	str	r3, [r7, #24]
        break;
 800a300:	e004      	b.n	800a30c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	77bb      	strb	r3, [r7, #30]
        break;
 800a30a:	bf00      	nop
    }

    if (pclk != 0U)
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d018      	beq.n	800a344 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	085a      	lsrs	r2, r3, #1
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	441a      	add	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	fbb2 f3f3 	udiv	r3, r2, r3
 800a324:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	2b0f      	cmp	r3, #15
 800a32a:	d909      	bls.n	800a340 <UART_SetConfig+0x4a0>
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a332:	d205      	bcs.n	800a340 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	60da      	str	r2, [r3, #12]
 800a33e:	e001      	b.n	800a344 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a350:	7fbb      	ldrb	r3, [r7, #30]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3720      	adds	r7, #32
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	40007c00 	.word	0x40007c00
 800a360:	40023800 	.word	0x40023800
 800a364:	00f42400 	.word	0x00f42400

0800a368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	f003 0308 	and.w	r3, r3, #8
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00a      	beq.n	800a3b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3da:	f003 0304 	and.w	r3, r3, #4
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a444:	2b00      	cmp	r3, #0
 800a446:	d01a      	beq.n	800a47e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a466:	d10a      	bne.n	800a47e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	605a      	str	r2, [r3, #4]
  }
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08c      	sub	sp, #48	@ 0x30
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4bc:	f7f7 fc9a 	bl	8001df4 <HAL_GetTick>
 800a4c0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d12e      	bne.n	800a52e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f83b 	bl	800a55a <UART_WaitOnFlagUntilTimeout>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d021      	beq.n	800a52e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	e853 3f00 	ldrex	r3, [r3]
 800a4f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4fe:	623b      	str	r3, [r7, #32]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	61fb      	str	r3, [r7, #28]
 800a50a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50c:	69b9      	ldr	r1, [r7, #24]
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	e841 2300 	strex	r3, r2, [r1]
 800a514:	617b      	str	r3, [r7, #20]
   return(result);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1e6      	bne.n	800a4ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2220      	movs	r2, #32
 800a520:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e011      	b.n	800a552 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2220      	movs	r2, #32
 800a532:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3728      	adds	r7, #40	@ 0x28
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	603b      	str	r3, [r7, #0]
 800a566:	4613      	mov	r3, r2
 800a568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a56a:	e04f      	b.n	800a60c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a572:	d04b      	beq.n	800a60c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a574:	f7f7 fc3e 	bl	8001df4 <HAL_GetTick>
 800a578:	4602      	mov	r2, r0
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	69ba      	ldr	r2, [r7, #24]
 800a580:	429a      	cmp	r2, r3
 800a582:	d302      	bcc.n	800a58a <UART_WaitOnFlagUntilTimeout+0x30>
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e04e      	b.n	800a62c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d037      	beq.n	800a60c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	2b80      	cmp	r3, #128	@ 0x80
 800a5a0:	d034      	beq.n	800a60c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b40      	cmp	r3, #64	@ 0x40
 800a5a6:	d031      	beq.n	800a60c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	69db      	ldr	r3, [r3, #28]
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	2b08      	cmp	r3, #8
 800a5b4:	d110      	bne.n	800a5d8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 f8fe 	bl	800a7c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2208      	movs	r2, #8
 800a5c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e029      	b.n	800a62c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5e6:	d111      	bne.n	800a60c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 f8e4 	bl	800a7c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e00f      	b.n	800a62c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69da      	ldr	r2, [r3, #28]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4013      	ands	r3, r2
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	429a      	cmp	r2, r3
 800a61a:	bf0c      	ite	eq
 800a61c:	2301      	moveq	r3, #1
 800a61e:	2300      	movne	r3, #0
 800a620:	b2db      	uxtb	r3, r3
 800a622:	461a      	mov	r2, r3
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	429a      	cmp	r2, r3
 800a628:	d0a0      	beq.n	800a56c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b096      	sub	sp, #88	@ 0x58
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	88fa      	ldrh	r2, [r7, #6]
 800a64c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2222      	movs	r2, #34	@ 0x22
 800a65c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a664:	2b00      	cmp	r3, #0
 800a666:	d028      	beq.n	800a6ba <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a66c:	4a3e      	ldr	r2, [pc, #248]	@ (800a768 <UART_Start_Receive_DMA+0x134>)
 800a66e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a674:	4a3d      	ldr	r2, [pc, #244]	@ (800a76c <UART_Start_Receive_DMA+0x138>)
 800a676:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a67c:	4a3c      	ldr	r2, [pc, #240]	@ (800a770 <UART_Start_Receive_DMA+0x13c>)
 800a67e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a684:	2200      	movs	r2, #0
 800a686:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3324      	adds	r3, #36	@ 0x24
 800a692:	4619      	mov	r1, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a698:	461a      	mov	r2, r3
 800a69a:	88fb      	ldrh	r3, [r7, #6]
 800a69c:	f7f8 fc2a 	bl	8002ef4 <HAL_DMA_Start_IT>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d009      	beq.n	800a6ba <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2210      	movs	r2, #16
 800a6aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e051      	b.n	800a75e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d018      	beq.n	800a6f4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6e2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6e8:	e841 2300 	strex	r3, r2, [r1]
 800a6ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a6ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e6      	bne.n	800a6c2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a706:	f043 0301 	orr.w	r3, r3, #1
 800a70a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3308      	adds	r3, #8
 800a712:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a714:	637a      	str	r2, [r7, #52]	@ 0x34
 800a716:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a71a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e5      	bne.n	800a6f4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3308      	adds	r3, #8
 800a72e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	e853 3f00 	ldrex	r3, [r3]
 800a736:	613b      	str	r3, [r7, #16]
   return(result);
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a73e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3308      	adds	r3, #8
 800a746:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a748:	623a      	str	r2, [r7, #32]
 800a74a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	69f9      	ldr	r1, [r7, #28]
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	61bb      	str	r3, [r7, #24]
   return(result);
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e5      	bne.n	800a728 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3758      	adds	r7, #88	@ 0x58
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	0800a889 	.word	0x0800a889
 800a76c:	0800a9e7 	.word	0x0800a9e7
 800a770:	0800aa59 	.word	0x0800aa59

0800a774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a774:	b480      	push	{r7}
 800a776:	b089      	sub	sp, #36	@ 0x24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	60bb      	str	r3, [r7, #8]
   return(result);
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a790:	61fb      	str	r3, [r7, #28]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	61bb      	str	r3, [r7, #24]
 800a79c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	6979      	ldr	r1, [r7, #20]
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	e841 2300 	strex	r3, r2, [r1]
 800a7a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1e6      	bne.n	800a77c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a7b4:	bf00      	nop
 800a7b6:	3724      	adds	r7, #36	@ 0x24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b095      	sub	sp, #84	@ 0x54
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d0:	e853 3f00 	ldrex	r3, [r3]
 800a7d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7ee:	e841 2300 	strex	r3, r2, [r1]
 800a7f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1e6      	bne.n	800a7c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3308      	adds	r3, #8
 800a800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	e853 3f00 	ldrex	r3, [r3]
 800a808:	61fb      	str	r3, [r7, #28]
   return(result);
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3308      	adds	r3, #8
 800a818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a81a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a81c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e5      	bne.n	800a7fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a832:	2b01      	cmp	r3, #1
 800a834:	d118      	bne.n	800a868 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	e853 3f00 	ldrex	r3, [r3]
 800a842:	60bb      	str	r3, [r7, #8]
   return(result);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f023 0310 	bic.w	r3, r3, #16
 800a84a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a854:	61bb      	str	r3, [r7, #24]
 800a856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a858:	6979      	ldr	r1, [r7, #20]
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	e841 2300 	strex	r3, r2, [r1]
 800a860:	613b      	str	r3, [r7, #16]
   return(result);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e6      	bne.n	800a836 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2220      	movs	r2, #32
 800a86c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a87c:	bf00      	nop
 800a87e:	3754      	adds	r7, #84	@ 0x54
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b09c      	sub	sp, #112	@ 0x70
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a894:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a89e:	d071      	beq.n	800a984 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a8a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8b0:	e853 3f00 	ldrex	r3, [r3]
 800a8b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a8b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a8cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8ce:	e841 2300 	strex	r3, r2, [r1]
 800a8d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e6      	bne.n	800a8a8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e4:	e853 3f00 	ldrex	r3, [r3]
 800a8e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	f023 0301 	bic.w	r3, r3, #1
 800a8f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a8f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3308      	adds	r3, #8
 800a8f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8fa:	643a      	str	r2, [r7, #64]	@ 0x40
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a900:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a902:	e841 2300 	strex	r3, r2, [r1]
 800a906:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1e5      	bne.n	800a8da <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a90e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	3308      	adds	r3, #8
 800a914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	e853 3f00 	ldrex	r3, [r3]
 800a91c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a924:	663b      	str	r3, [r7, #96]	@ 0x60
 800a926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	3308      	adds	r3, #8
 800a92c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a92e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a930:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1e5      	bne.n	800a90e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a944:	2220      	movs	r2, #32
 800a946:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a94a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a94c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d118      	bne.n	800a984 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f023 0310 	bic.w	r3, r3, #16
 800a966:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	461a      	mov	r2, r3
 800a96e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a970:	61bb      	str	r3, [r7, #24]
 800a972:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	6979      	ldr	r1, [r7, #20]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	e841 2300 	strex	r3, r2, [r1]
 800a97c:	613b      	str	r3, [r7, #16]
   return(result);
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1e6      	bne.n	800a952 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a986:	2200      	movs	r2, #0
 800a988:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a98a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a98c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d122      	bne.n	800a9d8 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800a992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a994:	2200      	movs	r2, #0
 800a996:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800a9a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a9aa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d204      	bcs.n	800a9bc <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800a9b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9b4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800a9b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a9c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a9d2:	f7ff fa59 	bl	8009e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9d6:	e002      	b.n	800a9de <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800a9d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a9da:	f00b ff8d 	bl	80168f8 <HAL_UART_RxCpltCallback>
}
 800a9de:	bf00      	nop
 800a9e0:	3770      	adds	r7, #112	@ 0x70
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d123      	bne.n	800aa4a <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aa08:	085b      	lsrs	r3, r3, #1
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aa20:	897a      	ldrh	r2, [r7, #10]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d803      	bhi.n	800aa2e <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	897a      	ldrh	r2, [r7, #10]
 800aa2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	4619      	mov	r1, r3
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f7ff fa20 	bl	8009e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa48:	e002      	b.n	800aa50 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fa08 	bl	8009e60 <HAL_UART_RxHalfCpltCallback>
}
 800aa50:	bf00      	nop
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa7e:	2b80      	cmp	r3, #128	@ 0x80
 800aa80:	d109      	bne.n	800aa96 <UART_DMAError+0x3e>
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b21      	cmp	r3, #33	@ 0x21
 800aa86:	d106      	bne.n	800aa96 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f7ff fe6f 	bl	800a774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa0:	2b40      	cmp	r3, #64	@ 0x40
 800aaa2:	d109      	bne.n	800aab8 <UART_DMAError+0x60>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b22      	cmp	r3, #34	@ 0x22
 800aaa8:	d106      	bne.n	800aab8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800aab2:	6978      	ldr	r0, [r7, #20]
 800aab4:	f7ff fe84 	bl	800a7c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aabe:	f043 0210 	orr.w	r2, r3, #16
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aac8:	6978      	ldr	r0, [r7, #20]
 800aaca:	f7ff f9d3 	bl	8009e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aace:	bf00      	nop
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f7ff f9c1 	bl	8009e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaf2:	bf00      	nop
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b08f      	sub	sp, #60	@ 0x3c
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab06:	2b21      	cmp	r3, #33	@ 0x21
 800ab08:	d14c      	bne.n	800aba4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d132      	bne.n	800ab7c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e6      	bne.n	800ab16 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab5c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	61bb      	str	r3, [r7, #24]
 800ab68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6979      	ldr	r1, [r7, #20]
 800ab6c:	69ba      	ldr	r2, [r7, #24]
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	613b      	str	r3, [r7, #16]
   return(result);
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e6      	bne.n	800ab48 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ab7a:	e013      	b.n	800aba4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab80:	781a      	ldrb	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800aba4:	bf00      	nop
 800aba6:	373c      	adds	r7, #60	@ 0x3c
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b091      	sub	sp, #68	@ 0x44
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abbc:	2b21      	cmp	r3, #33	@ 0x21
 800abbe:	d151      	bne.n	800ac64 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d132      	bne.n	800ac32 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	623b      	str	r3, [r7, #32]
   return(result);
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abea:	633b      	str	r3, [r7, #48]	@ 0x30
 800abec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e6      	bne.n	800abcc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	69b9      	ldr	r1, [r7, #24]
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e6      	bne.n	800abfe <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ac30:	e018      	b.n	800ac64 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ac38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac46:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac4c:	1c9a      	adds	r2, r3, #2
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800ac64:	bf00      	nop
 800ac66:	3744      	adds	r7, #68	@ 0x44
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac8c:	61fb      	str	r3, [r7, #28]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	61bb      	str	r3, [r7, #24]
 800ac98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	6979      	ldr	r1, [r7, #20]
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	613b      	str	r3, [r7, #16]
   return(result);
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e6      	bne.n	800ac78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2220      	movs	r2, #32
 800acae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff f8c8 	bl	8009e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acbc:	bf00      	nop
 800acbe:	3720      	adds	r7, #32
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800acca:	4b87      	ldr	r3, [pc, #540]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800accc:	220a      	movs	r2, #10
 800acce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800acd0:	4b85      	ldr	r3, [pc, #532]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800acd6:	4b84      	ldr	r3, [pc, #528]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800acd8:	2201      	movs	r2, #1
 800acda:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800acdc:	4b82      	ldr	r3, [pc, #520]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800acde:	2264      	movs	r2, #100	@ 0x64
 800ace0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ace2:	4b82      	ldr	r3, [pc, #520]	@ (800aeec <MX_LWIP_Init+0x228>)
 800ace4:	22ff      	movs	r2, #255	@ 0xff
 800ace6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ace8:	4b80      	ldr	r3, [pc, #512]	@ (800aeec <MX_LWIP_Init+0x228>)
 800acea:	22ff      	movs	r2, #255	@ 0xff
 800acec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800acee:	4b7f      	ldr	r3, [pc, #508]	@ (800aeec <MX_LWIP_Init+0x228>)
 800acf0:	22ff      	movs	r2, #255	@ 0xff
 800acf2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800acf4:	4b7d      	ldr	r3, [pc, #500]	@ (800aeec <MX_LWIP_Init+0x228>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800acfa:	4b7d      	ldr	r3, [pc, #500]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800acfc:	220a      	movs	r2, #10
 800acfe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800ad00:	4b7b      	ldr	r3, [pc, #492]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ad06:	4b7a      	ldr	r3, [pc, #488]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ad08:	2201      	movs	r2, #1
 800ad0a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800ad0c:	4b78      	ldr	r3, [pc, #480]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ad0e:	2265      	movs	r2, #101	@ 0x65
 800ad10:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800ad12:	f000 fd6a 	bl	800b7ea <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ad16:	4b74      	ldr	r3, [pc, #464]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	061a      	lsls	r2, r3, #24
 800ad1c:	4b72      	ldr	r3, [pc, #456]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad1e:	785b      	ldrb	r3, [r3, #1]
 800ad20:	041b      	lsls	r3, r3, #16
 800ad22:	431a      	orrs	r2, r3
 800ad24:	4b70      	ldr	r3, [pc, #448]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad26:	789b      	ldrb	r3, [r3, #2]
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	4a6e      	ldr	r2, [pc, #440]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad2e:	78d2      	ldrb	r2, [r2, #3]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	061a      	lsls	r2, r3, #24
 800ad34:	4b6c      	ldr	r3, [pc, #432]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	0619      	lsls	r1, r3, #24
 800ad3a:	4b6b      	ldr	r3, [pc, #428]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad3c:	785b      	ldrb	r3, [r3, #1]
 800ad3e:	041b      	lsls	r3, r3, #16
 800ad40:	4319      	orrs	r1, r3
 800ad42:	4b69      	ldr	r3, [pc, #420]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad44:	789b      	ldrb	r3, [r3, #2]
 800ad46:	021b      	lsls	r3, r3, #8
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	4967      	ldr	r1, [pc, #412]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad4c:	78c9      	ldrb	r1, [r1, #3]
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	021b      	lsls	r3, r3, #8
 800ad52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ad56:	431a      	orrs	r2, r3
 800ad58:	4b63      	ldr	r3, [pc, #396]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	0619      	lsls	r1, r3, #24
 800ad5e:	4b62      	ldr	r3, [pc, #392]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	041b      	lsls	r3, r3, #16
 800ad64:	4319      	orrs	r1, r3
 800ad66:	4b60      	ldr	r3, [pc, #384]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad68:	789b      	ldrb	r3, [r3, #2]
 800ad6a:	021b      	lsls	r3, r3, #8
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	495e      	ldr	r1, [pc, #376]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad70:	78c9      	ldrb	r1, [r1, #3]
 800ad72:	430b      	orrs	r3, r1
 800ad74:	0a1b      	lsrs	r3, r3, #8
 800ad76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	4b5a      	ldr	r3, [pc, #360]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	0619      	lsls	r1, r3, #24
 800ad82:	4b59      	ldr	r3, [pc, #356]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	041b      	lsls	r3, r3, #16
 800ad88:	4319      	orrs	r1, r3
 800ad8a:	4b57      	ldr	r3, [pc, #348]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad8c:	789b      	ldrb	r3, [r3, #2]
 800ad8e:	021b      	lsls	r3, r3, #8
 800ad90:	430b      	orrs	r3, r1
 800ad92:	4955      	ldr	r1, [pc, #340]	@ (800aee8 <MX_LWIP_Init+0x224>)
 800ad94:	78c9      	ldrb	r1, [r1, #3]
 800ad96:	430b      	orrs	r3, r1
 800ad98:	0e1b      	lsrs	r3, r3, #24
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	4a55      	ldr	r2, [pc, #340]	@ (800aef4 <MX_LWIP_Init+0x230>)
 800ad9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ada0:	4b52      	ldr	r3, [pc, #328]	@ (800aeec <MX_LWIP_Init+0x228>)
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	061a      	lsls	r2, r3, #24
 800ada6:	4b51      	ldr	r3, [pc, #324]	@ (800aeec <MX_LWIP_Init+0x228>)
 800ada8:	785b      	ldrb	r3, [r3, #1]
 800adaa:	041b      	lsls	r3, r3, #16
 800adac:	431a      	orrs	r2, r3
 800adae:	4b4f      	ldr	r3, [pc, #316]	@ (800aeec <MX_LWIP_Init+0x228>)
 800adb0:	789b      	ldrb	r3, [r3, #2]
 800adb2:	021b      	lsls	r3, r3, #8
 800adb4:	4313      	orrs	r3, r2
 800adb6:	4a4d      	ldr	r2, [pc, #308]	@ (800aeec <MX_LWIP_Init+0x228>)
 800adb8:	78d2      	ldrb	r2, [r2, #3]
 800adba:	4313      	orrs	r3, r2
 800adbc:	061a      	lsls	r2, r3, #24
 800adbe:	4b4b      	ldr	r3, [pc, #300]	@ (800aeec <MX_LWIP_Init+0x228>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	0619      	lsls	r1, r3, #24
 800adc4:	4b49      	ldr	r3, [pc, #292]	@ (800aeec <MX_LWIP_Init+0x228>)
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	041b      	lsls	r3, r3, #16
 800adca:	4319      	orrs	r1, r3
 800adcc:	4b47      	ldr	r3, [pc, #284]	@ (800aeec <MX_LWIP_Init+0x228>)
 800adce:	789b      	ldrb	r3, [r3, #2]
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	430b      	orrs	r3, r1
 800add4:	4945      	ldr	r1, [pc, #276]	@ (800aeec <MX_LWIP_Init+0x228>)
 800add6:	78c9      	ldrb	r1, [r1, #3]
 800add8:	430b      	orrs	r3, r1
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ade0:	431a      	orrs	r2, r3
 800ade2:	4b42      	ldr	r3, [pc, #264]	@ (800aeec <MX_LWIP_Init+0x228>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	0619      	lsls	r1, r3, #24
 800ade8:	4b40      	ldr	r3, [pc, #256]	@ (800aeec <MX_LWIP_Init+0x228>)
 800adea:	785b      	ldrb	r3, [r3, #1]
 800adec:	041b      	lsls	r3, r3, #16
 800adee:	4319      	orrs	r1, r3
 800adf0:	4b3e      	ldr	r3, [pc, #248]	@ (800aeec <MX_LWIP_Init+0x228>)
 800adf2:	789b      	ldrb	r3, [r3, #2]
 800adf4:	021b      	lsls	r3, r3, #8
 800adf6:	430b      	orrs	r3, r1
 800adf8:	493c      	ldr	r1, [pc, #240]	@ (800aeec <MX_LWIP_Init+0x228>)
 800adfa:	78c9      	ldrb	r1, [r1, #3]
 800adfc:	430b      	orrs	r3, r1
 800adfe:	0a1b      	lsrs	r3, r3, #8
 800ae00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ae04:	431a      	orrs	r2, r3
 800ae06:	4b39      	ldr	r3, [pc, #228]	@ (800aeec <MX_LWIP_Init+0x228>)
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	0619      	lsls	r1, r3, #24
 800ae0c:	4b37      	ldr	r3, [pc, #220]	@ (800aeec <MX_LWIP_Init+0x228>)
 800ae0e:	785b      	ldrb	r3, [r3, #1]
 800ae10:	041b      	lsls	r3, r3, #16
 800ae12:	4319      	orrs	r1, r3
 800ae14:	4b35      	ldr	r3, [pc, #212]	@ (800aeec <MX_LWIP_Init+0x228>)
 800ae16:	789b      	ldrb	r3, [r3, #2]
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	430b      	orrs	r3, r1
 800ae1c:	4933      	ldr	r1, [pc, #204]	@ (800aeec <MX_LWIP_Init+0x228>)
 800ae1e:	78c9      	ldrb	r1, [r1, #3]
 800ae20:	430b      	orrs	r3, r1
 800ae22:	0e1b      	lsrs	r3, r3, #24
 800ae24:	4313      	orrs	r3, r2
 800ae26:	4a34      	ldr	r2, [pc, #208]	@ (800aef8 <MX_LWIP_Init+0x234>)
 800ae28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ae2a:	4b31      	ldr	r3, [pc, #196]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	061a      	lsls	r2, r3, #24
 800ae30:	4b2f      	ldr	r3, [pc, #188]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae32:	785b      	ldrb	r3, [r3, #1]
 800ae34:	041b      	lsls	r3, r3, #16
 800ae36:	431a      	orrs	r2, r3
 800ae38:	4b2d      	ldr	r3, [pc, #180]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae3a:	789b      	ldrb	r3, [r3, #2]
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	4a2b      	ldr	r2, [pc, #172]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae42:	78d2      	ldrb	r2, [r2, #3]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	061a      	lsls	r2, r3, #24
 800ae48:	4b29      	ldr	r3, [pc, #164]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	0619      	lsls	r1, r3, #24
 800ae4e:	4b28      	ldr	r3, [pc, #160]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae50:	785b      	ldrb	r3, [r3, #1]
 800ae52:	041b      	lsls	r3, r3, #16
 800ae54:	4319      	orrs	r1, r3
 800ae56:	4b26      	ldr	r3, [pc, #152]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae58:	789b      	ldrb	r3, [r3, #2]
 800ae5a:	021b      	lsls	r3, r3, #8
 800ae5c:	430b      	orrs	r3, r1
 800ae5e:	4924      	ldr	r1, [pc, #144]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae60:	78c9      	ldrb	r1, [r1, #3]
 800ae62:	430b      	orrs	r3, r1
 800ae64:	021b      	lsls	r3, r3, #8
 800ae66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	4b20      	ldr	r3, [pc, #128]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	0619      	lsls	r1, r3, #24
 800ae72:	4b1f      	ldr	r3, [pc, #124]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae74:	785b      	ldrb	r3, [r3, #1]
 800ae76:	041b      	lsls	r3, r3, #16
 800ae78:	4319      	orrs	r1, r3
 800ae7a:	4b1d      	ldr	r3, [pc, #116]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae7c:	789b      	ldrb	r3, [r3, #2]
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	430b      	orrs	r3, r1
 800ae82:	491b      	ldr	r1, [pc, #108]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae84:	78c9      	ldrb	r1, [r1, #3]
 800ae86:	430b      	orrs	r3, r1
 800ae88:	0a1b      	lsrs	r3, r3, #8
 800ae8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	4b17      	ldr	r3, [pc, #92]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	0619      	lsls	r1, r3, #24
 800ae96:	4b16      	ldr	r3, [pc, #88]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800ae98:	785b      	ldrb	r3, [r3, #1]
 800ae9a:	041b      	lsls	r3, r3, #16
 800ae9c:	4319      	orrs	r1, r3
 800ae9e:	4b14      	ldr	r3, [pc, #80]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800aea0:	789b      	ldrb	r3, [r3, #2]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	430b      	orrs	r3, r1
 800aea6:	4912      	ldr	r1, [pc, #72]	@ (800aef0 <MX_LWIP_Init+0x22c>)
 800aea8:	78c9      	ldrb	r1, [r1, #3]
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	0e1b      	lsrs	r3, r3, #24
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	4a12      	ldr	r2, [pc, #72]	@ (800aefc <MX_LWIP_Init+0x238>)
 800aeb2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800aeb4:	4b12      	ldr	r3, [pc, #72]	@ (800af00 <MX_LWIP_Init+0x23c>)
 800aeb6:	9302      	str	r3, [sp, #8]
 800aeb8:	4b12      	ldr	r3, [pc, #72]	@ (800af04 <MX_LWIP_Init+0x240>)
 800aeba:	9301      	str	r3, [sp, #4]
 800aebc:	2300      	movs	r3, #0
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	4b0e      	ldr	r3, [pc, #56]	@ (800aefc <MX_LWIP_Init+0x238>)
 800aec2:	4a0d      	ldr	r2, [pc, #52]	@ (800aef8 <MX_LWIP_Init+0x234>)
 800aec4:	490b      	ldr	r1, [pc, #44]	@ (800aef4 <MX_LWIP_Init+0x230>)
 800aec6:	4810      	ldr	r0, [pc, #64]	@ (800af08 <MX_LWIP_Init+0x244>)
 800aec8:	f001 f976 	bl	800c1b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800aecc:	480e      	ldr	r0, [pc, #56]	@ (800af08 <MX_LWIP_Init+0x244>)
 800aece:	f001 fc07 	bl	800c6e0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800aed2:	480d      	ldr	r0, [pc, #52]	@ (800af08 <MX_LWIP_Init+0x244>)
 800aed4:	f001 fc28 	bl	800c728 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800aed8:	490c      	ldr	r1, [pc, #48]	@ (800af0c <MX_LWIP_Init+0x248>)
 800aeda:	480b      	ldr	r0, [pc, #44]	@ (800af08 <MX_LWIP_Init+0x244>)
 800aedc:	f001 fd26 	bl	800c92c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800aee0:	bf00      	nop
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20000a08 	.word	0x20000a08
 800aeec:	20000a0c 	.word	0x20000a0c
 800aef0:	20000a10 	.word	0x20000a10
 800aef4:	200009fc 	.word	0x200009fc
 800aef8:	20000a00 	.word	0x20000a00
 800aefc:	20000a04 	.word	0x20000a04
 800af00:	08015d35 	.word	0x08015d35
 800af04:	0800b285 	.word	0x0800b285
 800af08:	200009c8 	.word	0x200009c8
 800af0c:	0800af61 	.word	0x0800af61

0800af10 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800af18:	f7f6 ff6c 	bl	8001df4 <HAL_GetTick>
 800af1c:	4602      	mov	r2, r0
 800af1e:	4b08      	ldr	r3, [pc, #32]	@ (800af40 <Ethernet_Link_Periodic_Handle+0x30>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	2b63      	cmp	r3, #99	@ 0x63
 800af26:	d907      	bls.n	800af38 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800af28:	f7f6 ff64 	bl	8001df4 <HAL_GetTick>
 800af2c:	4603      	mov	r3, r0
 800af2e:	4a04      	ldr	r2, [pc, #16]	@ (800af40 <Ethernet_Link_Periodic_Handle+0x30>)
 800af30:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fb0c 	bl	800b550 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	200009c4 	.word	0x200009c4

0800af44 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800af48:	4804      	ldr	r0, [pc, #16]	@ (800af5c <MX_LWIP_Process+0x18>)
 800af4a:	f000 f97b 	bl	800b244 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800af4e:	f007 fd85 	bl	8012a5c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800af52:	4802      	ldr	r0, [pc, #8]	@ (800af5c <MX_LWIP_Process+0x18>)
 800af54:	f7ff ffdc 	bl	800af10 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800af58:	bf00      	nop
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	200009c8 	.word	0x200009c8

0800af60 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <SCB_InvalidateDCache_by_Addr>:
{
 800af74:	b480      	push	{r7}
 800af76:	b087      	sub	sp, #28
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800af86:	2320      	movs	r3, #32
 800af88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800af8a:	f3bf 8f4f 	dsb	sy
}
 800af8e:	bf00      	nop
    while (op_size > 0) {
 800af90:	e00b      	b.n	800afaa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800af92:	4a0d      	ldr	r2, [pc, #52]	@ (800afc8 <SCB_InvalidateDCache_by_Addr+0x54>)
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	4413      	add	r3, r2
 800afa0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	dcf0      	bgt.n	800af92 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800afb0:	f3bf 8f4f 	dsb	sy
}
 800afb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800afb6:	f3bf 8f6f 	isb	sy
}
 800afba:	bf00      	nop
}
 800afbc:	bf00      	nop
 800afbe:	371c      	adds	r7, #28
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr
 800afc8:	e000ed00 	.word	0xe000ed00

0800afcc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800afd8:	4b44      	ldr	r3, [pc, #272]	@ (800b0ec <low_level_init+0x120>)
 800afda:	4a45      	ldr	r2, [pc, #276]	@ (800b0f0 <low_level_init+0x124>)
 800afdc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800afde:	2300      	movs	r3, #0
 800afe0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800afe2:	2380      	movs	r3, #128	@ 0x80
 800afe4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800afe6:	23e1      	movs	r3, #225	@ 0xe1
 800afe8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800afea:	2300      	movs	r3, #0
 800afec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800afee:	2300      	movs	r3, #0
 800aff0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800aff2:	2300      	movs	r3, #0
 800aff4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800aff6:	4a3d      	ldr	r2, [pc, #244]	@ (800b0ec <low_level_init+0x120>)
 800aff8:	f107 0308 	add.w	r3, r7, #8
 800affc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800affe:	4b3b      	ldr	r3, [pc, #236]	@ (800b0ec <low_level_init+0x120>)
 800b000:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b004:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b006:	4b39      	ldr	r3, [pc, #228]	@ (800b0ec <low_level_init+0x120>)
 800b008:	4a3a      	ldr	r2, [pc, #232]	@ (800b0f4 <low_level_init+0x128>)
 800b00a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b00c:	4b37      	ldr	r3, [pc, #220]	@ (800b0ec <low_level_init+0x120>)
 800b00e:	4a3a      	ldr	r2, [pc, #232]	@ (800b0f8 <low_level_init+0x12c>)
 800b010:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b012:	4b36      	ldr	r3, [pc, #216]	@ (800b0ec <low_level_init+0x120>)
 800b014:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b018:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b01a:	4834      	ldr	r0, [pc, #208]	@ (800b0ec <low_level_init+0x120>)
 800b01c:	f7f8 fae0 	bl	80035e0 <HAL_ETH_Init>
 800b020:	4603      	mov	r3, r0
 800b022:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b024:	2238      	movs	r2, #56	@ 0x38
 800b026:	2100      	movs	r1, #0
 800b028:	4834      	ldr	r0, [pc, #208]	@ (800b0fc <low_level_init+0x130>)
 800b02a:	f00b fee5 	bl	8016df8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b02e:	4b33      	ldr	r3, [pc, #204]	@ (800b0fc <low_level_init+0x130>)
 800b030:	2221      	movs	r2, #33	@ 0x21
 800b032:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b034:	4b31      	ldr	r3, [pc, #196]	@ (800b0fc <low_level_init+0x130>)
 800b036:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800b03a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b03c:	4b2f      	ldr	r3, [pc, #188]	@ (800b0fc <low_level_init+0x130>)
 800b03e:	2200      	movs	r2, #0
 800b040:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b042:	482f      	ldr	r0, [pc, #188]	@ (800b100 <low_level_init+0x134>)
 800b044:	f000 ff80 	bl	800bf48 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2206      	movs	r2, #6
 800b04c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b050:	4b26      	ldr	r3, [pc, #152]	@ (800b0ec <low_level_init+0x120>)
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	781a      	ldrb	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b05c:	4b23      	ldr	r3, [pc, #140]	@ (800b0ec <low_level_init+0x120>)
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	785a      	ldrb	r2, [r3, #1]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b068:	4b20      	ldr	r3, [pc, #128]	@ (800b0ec <low_level_init+0x120>)
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	789a      	ldrb	r2, [r3, #2]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b074:	4b1d      	ldr	r3, [pc, #116]	@ (800b0ec <low_level_init+0x120>)
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	78da      	ldrb	r2, [r3, #3]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b080:	4b1a      	ldr	r3, [pc, #104]	@ (800b0ec <low_level_init+0x120>)
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	791a      	ldrb	r2, [r3, #4]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b08c:	4b17      	ldr	r3, [pc, #92]	@ (800b0ec <low_level_init+0x120>)
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	795a      	ldrb	r2, [r3, #5]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b09e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b0a6:	f043 030a 	orr.w	r3, r3, #10
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b0b2:	4914      	ldr	r1, [pc, #80]	@ (800b104 <low_level_init+0x138>)
 800b0b4:	4814      	ldr	r0, [pc, #80]	@ (800b108 <low_level_init+0x13c>)
 800b0b6:	f7f6 fd46 	bl	8001b46 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800b0ba:	4813      	ldr	r0, [pc, #76]	@ (800b108 <low_level_init+0x13c>)
 800b0bc:	f7f6 fd75 	bl	8001baa <LAN8742_Init>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d006      	beq.n	800b0d4 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f001 fc00 	bl	800c8cc <netif_set_link_down>
    netif_set_down(netif);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 fb97 	bl	800c800 <netif_set_down>
 800b0d2:	e008      	b.n	800b0e6 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d103      	bne.n	800b0e2 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fa38 	bl	800b550 <ethernet_link_check_state>
 800b0e0:	e001      	b.n	800b0e6 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800b0e2:	f7f5 ff13 	bl	8000f0c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	200053a0 	.word	0x200053a0
 800b0f0:	40028000 	.word	0x40028000
 800b0f4:	2000016c 	.word	0x2000016c
 800b0f8:	200000cc 	.word	0x200000cc
 800b0fc:	20005450 	.word	0x20005450
 800b100:	0801b0ec 	.word	0x0801b0ec
 800b104:	2000000c 	.word	0x2000000c
 800b108:	20005488 	.word	0x20005488

0800b10c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b092      	sub	sp, #72	@ 0x48
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b116:	2300      	movs	r3, #0
 800b118:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b124:	f107 030c 	add.w	r3, r7, #12
 800b128:	2230      	movs	r2, #48	@ 0x30
 800b12a:	2100      	movs	r1, #0
 800b12c:	4618      	mov	r0, r3
 800b12e:	f00b fe63 	bl	8016df8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b132:	f107 030c 	add.w	r3, r7, #12
 800b136:	2230      	movs	r2, #48	@ 0x30
 800b138:	2100      	movs	r1, #0
 800b13a:	4618      	mov	r0, r3
 800b13c:	f00b fe5c 	bl	8016df8 <memset>

  for(q = p; q != NULL; q = q->next)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	643b      	str	r3, [r7, #64]	@ 0x40
 800b144:	e045      	b.n	800b1d2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d902      	bls.n	800b152 <low_level_output+0x46>
      return ERR_IF;
 800b14c:	f06f 030b 	mvn.w	r3, #11
 800b150:	e055      	b.n	800b1fe <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800b152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b154:	6859      	ldr	r1, [r3, #4]
 800b156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b158:	4613      	mov	r3, r2
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	4413      	add	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	3348      	adds	r3, #72	@ 0x48
 800b162:	443b      	add	r3, r7
 800b164:	3b3c      	subs	r3, #60	@ 0x3c
 800b166:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b16a:	895b      	ldrh	r3, [r3, #10]
 800b16c:	4619      	mov	r1, r3
 800b16e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b170:	4613      	mov	r3, r2
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	3348      	adds	r3, #72	@ 0x48
 800b17a:	443b      	add	r3, r7
 800b17c:	3b38      	subs	r3, #56	@ 0x38
 800b17e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b182:	2b00      	cmp	r3, #0
 800b184:	d011      	beq.n	800b1aa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b188:	1e5a      	subs	r2, r3, #1
 800b18a:	f107 000c 	add.w	r0, r7, #12
 800b18e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b190:	460b      	mov	r3, r1
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	440b      	add	r3, r1
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	18c1      	adds	r1, r0, r3
 800b19a:	4613      	mov	r3, r2
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	3348      	adds	r3, #72	@ 0x48
 800b1a4:	443b      	add	r3, r7
 800b1a6:	3b34      	subs	r3, #52	@ 0x34
 800b1a8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d109      	bne.n	800b1c6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b1b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	4413      	add	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	3348      	adds	r3, #72	@ 0x48
 800b1be:	443b      	add	r3, r7
 800b1c0:	3b34      	subs	r3, #52	@ 0x34
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b1c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b1cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1b6      	bne.n	800b146 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	891b      	ldrh	r3, [r3, #8]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	4b0a      	ldr	r3, [pc, #40]	@ (800b208 <low_level_output+0xfc>)
 800b1e0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b1e2:	4a09      	ldr	r2, [pc, #36]	@ (800b208 <low_level_output+0xfc>)
 800b1e4:	f107 030c 	add.w	r3, r7, #12
 800b1e8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b1ea:	4a07      	ldr	r2, [pc, #28]	@ (800b208 <low_level_output+0xfc>)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b1f0:	2214      	movs	r2, #20
 800b1f2:	4905      	ldr	r1, [pc, #20]	@ (800b208 <low_level_output+0xfc>)
 800b1f4:	4805      	ldr	r0, [pc, #20]	@ (800b20c <low_level_output+0x100>)
 800b1f6:	f7f8 fb7d 	bl	80038f4 <HAL_ETH_Transmit>

  return errval;
 800b1fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3748      	adds	r7, #72	@ 0x48
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20005450 	.word	0x20005450
 800b20c:	200053a0 	.word	0x200053a0

0800b210 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b21c:	4b07      	ldr	r3, [pc, #28]	@ (800b23c <low_level_input+0x2c>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d105      	bne.n	800b230 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b224:	f107 030c 	add.w	r3, r7, #12
 800b228:	4619      	mov	r1, r3
 800b22a:	4805      	ldr	r0, [pc, #20]	@ (800b240 <low_level_input+0x30>)
 800b22c:	f7f8 fbf6 	bl	8003a1c <HAL_ETH_ReadData>
  }

  return p;
 800b230:	68fb      	ldr	r3, [r7, #12]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	2000539c 	.word	0x2000539c
 800b240:	200053a0 	.word	0x200053a0

0800b244 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b24c:	2300      	movs	r3, #0
 800b24e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff ffdd 	bl	800b210 <low_level_input>
 800b256:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	4798      	blx	r3
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f001 fedc 	bl	800d02c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1ea      	bne.n	800b250 <ethernetif_input+0xc>
}
 800b27a:	bf00      	nop
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d106      	bne.n	800b2a0 <ethernetif_init+0x1c>
 800b292:	4b0e      	ldr	r3, [pc, #56]	@ (800b2cc <ethernetif_init+0x48>)
 800b294:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800b298:	490d      	ldr	r1, [pc, #52]	@ (800b2d0 <ethernetif_init+0x4c>)
 800b29a:	480e      	ldr	r0, [pc, #56]	@ (800b2d4 <ethernetif_init+0x50>)
 800b29c:	f00b fc4c 	bl	8016b38 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2273      	movs	r2, #115	@ 0x73
 800b2a4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2274      	movs	r2, #116	@ 0x74
 800b2ac:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a09      	ldr	r2, [pc, #36]	@ (800b2d8 <ethernetif_init+0x54>)
 800b2b4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a08      	ldr	r2, [pc, #32]	@ (800b2dc <ethernetif_init+0x58>)
 800b2ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fe85 	bl	800afcc <low_level_init>

  return ERR_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	08017ab0 	.word	0x08017ab0
 800b2d0:	08017acc 	.word	0x08017acc
 800b2d4:	08017adc 	.word	0x08017adc
 800b2d8:	080140c9 	.word	0x080140c9
 800b2dc:	0800b10d 	.word	0x0800b10d

0800b2e0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b2ec:	68f9      	ldr	r1, [r7, #12]
 800b2ee:	4807      	ldr	r0, [pc, #28]	@ (800b30c <pbuf_free_custom+0x2c>)
 800b2f0:	f000 ff0c 	bl	800c10c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b2f4:	4b06      	ldr	r3, [pc, #24]	@ (800b310 <pbuf_free_custom+0x30>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d102      	bne.n	800b302 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b2fc:	4b04      	ldr	r3, [pc, #16]	@ (800b310 <pbuf_free_custom+0x30>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	701a      	strb	r2, [r3, #0]
  }
}
 800b302:	bf00      	nop
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	0801b0ec 	.word	0x0801b0ec
 800b310:	2000539c 	.word	0x2000539c

0800b314 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b318:	f7f6 fd6c 	bl	8001df4 <HAL_GetTick>
 800b31c:	4603      	mov	r3, r0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08e      	sub	sp, #56	@ 0x38
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b32c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b330:	2200      	movs	r2, #0
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	605a      	str	r2, [r3, #4]
 800b336:	609a      	str	r2, [r3, #8]
 800b338:	60da      	str	r2, [r3, #12]
 800b33a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a56      	ldr	r2, [pc, #344]	@ (800b49c <HAL_ETH_MspInit+0x178>)
 800b342:	4293      	cmp	r3, r2
 800b344:	f040 80a6 	bne.w	800b494 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b348:	4b55      	ldr	r3, [pc, #340]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b34c:	4a54      	ldr	r2, [pc, #336]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b34e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b352:	6313      	str	r3, [r2, #48]	@ 0x30
 800b354:	4b52      	ldr	r3, [pc, #328]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b35c:	623b      	str	r3, [r7, #32]
 800b35e:	6a3b      	ldr	r3, [r7, #32]
 800b360:	4b4f      	ldr	r3, [pc, #316]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b364:	4a4e      	ldr	r2, [pc, #312]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b366:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b36a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b36c:	4b4c      	ldr	r3, [pc, #304]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b370:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	4b49      	ldr	r3, [pc, #292]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b37c:	4a48      	ldr	r2, [pc, #288]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b37e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b382:	6313      	str	r3, [r2, #48]	@ 0x30
 800b384:	4b46      	ldr	r3, [pc, #280]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b38c:	61bb      	str	r3, [r7, #24]
 800b38e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b390:	4b43      	ldr	r3, [pc, #268]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b394:	4a42      	ldr	r2, [pc, #264]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b396:	f043 0304 	orr.w	r3, r3, #4
 800b39a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b39c:	4b40      	ldr	r3, [pc, #256]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	617b      	str	r3, [r7, #20]
 800b3a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3a8:	4b3d      	ldr	r3, [pc, #244]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ac:	4a3c      	ldr	r2, [pc, #240]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3ae:	f043 0301 	orr.w	r3, r3, #1
 800b3b2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b3b4:	4b3a      	ldr	r3, [pc, #232]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	613b      	str	r3, [r7, #16]
 800b3be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3c0:	4b37      	ldr	r3, [pc, #220]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c4:	4a36      	ldr	r2, [pc, #216]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3c6:	f043 0302 	orr.w	r3, r3, #2
 800b3ca:	6313      	str	r3, [r2, #48]	@ 0x30
 800b3cc:	4b34      	ldr	r3, [pc, #208]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d0:	f003 0302 	and.w	r3, r3, #2
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b3d8:	4b31      	ldr	r3, [pc, #196]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3dc:	4a30      	ldr	r2, [pc, #192]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3e2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b3e4:	4b2e      	ldr	r3, [pc, #184]	@ (800b4a0 <HAL_ETH_MspInit+0x17c>)
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ec:	60bb      	str	r3, [r7, #8]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b3f0:	2332      	movs	r3, #50	@ 0x32
 800b3f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b400:	230b      	movs	r3, #11
 800b402:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b408:	4619      	mov	r1, r3
 800b40a:	4826      	ldr	r0, [pc, #152]	@ (800b4a4 <HAL_ETH_MspInit+0x180>)
 800b40c:	f7f9 fb36 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b410:	2386      	movs	r3, #134	@ 0x86
 800b412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b414:	2302      	movs	r3, #2
 800b416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b418:	2300      	movs	r3, #0
 800b41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b41c:	2303      	movs	r3, #3
 800b41e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b420:	230b      	movs	r3, #11
 800b422:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b428:	4619      	mov	r1, r3
 800b42a:	481f      	ldr	r0, [pc, #124]	@ (800b4a8 <HAL_ETH_MspInit+0x184>)
 800b42c:	f7f9 fb26 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b434:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b436:	2302      	movs	r3, #2
 800b438:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43a:	2300      	movs	r3, #0
 800b43c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b43e:	2303      	movs	r3, #3
 800b440:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b442:	230b      	movs	r3, #11
 800b444:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b44a:	4619      	mov	r1, r3
 800b44c:	4817      	ldr	r0, [pc, #92]	@ (800b4ac <HAL_ETH_MspInit+0x188>)
 800b44e:	f7f9 fb15 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800b452:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b456:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b458:	2302      	movs	r3, #2
 800b45a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b45c:	2300      	movs	r3, #0
 800b45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b460:	2303      	movs	r3, #3
 800b462:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b464:	230b      	movs	r3, #11
 800b466:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b46c:	4619      	mov	r1, r3
 800b46e:	4810      	ldr	r0, [pc, #64]	@ (800b4b0 <HAL_ETH_MspInit+0x18c>)
 800b470:	f7f9 fb04 	bl	8004a7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800b474:	2200      	movs	r2, #0
 800b476:	2100      	movs	r1, #0
 800b478:	203d      	movs	r0, #61	@ 0x3d
 800b47a:	f7f7 fa4c 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b47e:	203d      	movs	r0, #61	@ 0x3d
 800b480:	f7f7 fa65 	bl	800294e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800b484:	2200      	movs	r2, #0
 800b486:	2100      	movs	r1, #0
 800b488:	203e      	movs	r0, #62	@ 0x3e
 800b48a:	f7f7 fa44 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800b48e:	203e      	movs	r0, #62	@ 0x3e
 800b490:	f7f7 fa5d 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b494:	bf00      	nop
 800b496:	3738      	adds	r7, #56	@ 0x38
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	40028000 	.word	0x40028000
 800b4a0:	40023800 	.word	0x40023800
 800b4a4:	40020800 	.word	0x40020800
 800b4a8:	40020000 	.word	0x40020000
 800b4ac:	40020400 	.word	0x40020400
 800b4b0:	40021800 	.word	0x40021800

0800b4b4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b4b8:	4802      	ldr	r0, [pc, #8]	@ (800b4c4 <ETH_PHY_IO_Init+0x10>)
 800b4ba:	f7f8 fe7d 	bl	80041b8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	200053a0 	.word	0x200053a0

0800b4c8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
  return 0;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	68f9      	ldr	r1, [r7, #12]
 800b4ea:	4807      	ldr	r0, [pc, #28]	@ (800b508 <ETH_PHY_IO_ReadReg+0x30>)
 800b4ec:	f7f8 fcbe 	bl	8003e6c <HAL_ETH_ReadPHYRegister>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b4f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4fa:	e000      	b.n	800b4fe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	200053a0 	.word	0x200053a0

0800b50c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	68f9      	ldr	r1, [r7, #12]
 800b51e:	4807      	ldr	r0, [pc, #28]	@ (800b53c <ETH_PHY_IO_WriteReg+0x30>)
 800b520:	f7f8 fcef 	bl	8003f02 <HAL_ETH_WritePHYRegister>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b52e:	e000      	b.n	800b532 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200053a0 	.word	0x200053a0

0800b540 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b544:	f7f6 fc56 	bl	8001df4 <HAL_GetTick>
 800b548:	4603      	mov	r3, r0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b0a0      	sub	sp, #128	@ 0x80
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b558:	f107 030c 	add.w	r3, r7, #12
 800b55c:	2264      	movs	r2, #100	@ 0x64
 800b55e:	2100      	movs	r1, #0
 800b560:	4618      	mov	r0, r3
 800b562:	f00b fc49 	bl	8016df8 <memset>
  int32_t PHYLinkState = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b56e:	2300      	movs	r3, #0
 800b570:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b572:	2300      	movs	r3, #0
 800b574:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b576:	483a      	ldr	r0, [pc, #232]	@ (800b660 <ethernet_link_check_state+0x110>)
 800b578:	f7f6 fb64 	bl	8001c44 <LAN8742_GetLinkState>
 800b57c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b584:	089b      	lsrs	r3, r3, #2
 800b586:	f003 0301 	and.w	r3, r3, #1
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00c      	beq.n	800b5aa <ethernet_link_check_state+0x5a>
 800b590:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b592:	2b01      	cmp	r3, #1
 800b594:	dc09      	bgt.n	800b5aa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 800b596:	4833      	ldr	r0, [pc, #204]	@ (800b664 <ethernet_link_check_state+0x114>)
 800b598:	f7f8 f92c 	bl	80037f4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f001 f92f 	bl	800c800 <netif_set_down>
    netif_set_link_down(netif);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f001 f992 	bl	800c8cc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800b5a8:	e055      	b.n	800b656 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d14e      	bne.n	800b656 <ethernet_link_check_state+0x106>
 800b5b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	dd4b      	ble.n	800b656 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800b5be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5c0:	3b02      	subs	r3, #2
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d82a      	bhi.n	800b61c <ethernet_link_check_state+0xcc>
 800b5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5cc <ethernet_link_check_state+0x7c>)
 800b5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5cc:	0800b5dd 	.word	0x0800b5dd
 800b5d0:	0800b5ef 	.word	0x0800b5ef
 800b5d4:	0800b5ff 	.word	0x0800b5ff
 800b5d8:	0800b60f 	.word	0x0800b60f
      duplex = ETH_FULLDUPLEX_MODE;
 800b5dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b5e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b5e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b5ec:	e017      	b.n	800b61e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b5f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b5f6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b5fc:	e00f      	b.n	800b61e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800b5fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b602:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b604:	2300      	movs	r3, #0
 800b606:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b608:	2301      	movs	r3, #1
 800b60a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b60c:	e007      	b.n	800b61e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b60e:	2300      	movs	r3, #0
 800b610:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b612:	2300      	movs	r3, #0
 800b614:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b616:	2301      	movs	r3, #1
 800b618:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b61a:	e000      	b.n	800b61e <ethernet_link_check_state+0xce>
      break;
 800b61c:	bf00      	nop
    if(linkchanged)
 800b61e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d018      	beq.n	800b656 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b624:	f107 030c 	add.w	r3, r7, #12
 800b628:	4619      	mov	r1, r3
 800b62a:	480e      	ldr	r0, [pc, #56]	@ (800b664 <ethernet_link_check_state+0x114>)
 800b62c:	f7f8 fcb2 	bl	8003f94 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b630:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b632:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800b634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b636:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b638:	f107 030c 	add.w	r3, r7, #12
 800b63c:	4619      	mov	r1, r3
 800b63e:	4809      	ldr	r0, [pc, #36]	@ (800b664 <ethernet_link_check_state+0x114>)
 800b640:	f7f8 fd9f 	bl	8004182 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800b644:	4807      	ldr	r0, [pc, #28]	@ (800b664 <ethernet_link_check_state+0x114>)
 800b646:	f7f8 f865 	bl	8003714 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 f86c 	bl	800c728 <netif_set_up>
      netif_set_link_up(netif);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f001 f907 	bl	800c864 <netif_set_link_up>
}
 800b656:	bf00      	nop
 800b658:	3780      	adds	r7, #128	@ 0x80
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	20005488 	.word	0x20005488
 800b664:	200053a0 	.word	0x200053a0

0800b668 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af02      	add	r7, sp, #8
 800b66e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b670:	4812      	ldr	r0, [pc, #72]	@ (800b6bc <HAL_ETH_RxAllocateCallback+0x54>)
 800b672:	f000 fcdd 	bl	800c030 <memp_malloc_pool>
 800b676:	60f8      	str	r0, [r7, #12]
  if (p)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d014      	beq.n	800b6a8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f103 0220 	add.w	r2, r3, #32
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	4a0d      	ldr	r2, [pc, #52]	@ (800b6c0 <HAL_ETH_RxAllocateCallback+0x58>)
 800b68c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2241      	movs	r2, #65	@ 0x41
 800b69e:	2100      	movs	r1, #0
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	f001 fb09 	bl	800ccb8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b6a6:	e005      	b.n	800b6b4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b6a8:	4b06      	ldr	r3, [pc, #24]	@ (800b6c4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	601a      	str	r2, [r3, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	0801b0ec 	.word	0x0801b0ec
 800b6c0:	0800b2e1 	.word	0x0800b2e1
 800b6c4:	2000539c 	.word	0x2000539c

0800b6c8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3b20      	subs	r3, #32
 800b6e6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	887a      	ldrh	r2, [r7, #2]
 800b6f8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d103      	bne.n	800b70a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	69fa      	ldr	r2, [r7, #28]
 800b706:	601a      	str	r2, [r3, #0]
 800b708:	e003      	b.n	800b712 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	69fa      	ldr	r2, [r7, #28]
 800b710:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	69fa      	ldr	r2, [r7, #28]
 800b716:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	e009      	b.n	800b734 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	891a      	ldrh	r2, [r3, #8]
 800b724:	887b      	ldrh	r3, [r7, #2]
 800b726:	4413      	add	r3, r2
 800b728:	b29a      	uxth	r2, r3
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f2      	bne.n	800b720 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b73a:	887b      	ldrh	r3, [r7, #2]
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff fc18 	bl	800af74 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b744:	bf00      	nop
 800b746:	3720      	adds	r7, #32
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 800b756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dc04      	bgt.n	800b768 <lwip_strerr+0x1c>
 800b75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b762:	f113 0f10 	cmn.w	r3, #16
 800b766:	da01      	bge.n	800b76c <lwip_strerr+0x20>
    return "Unknown error.";
 800b768:	4b06      	ldr	r3, [pc, #24]	@ (800b784 <lwip_strerr+0x38>)
 800b76a:	e005      	b.n	800b778 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 800b76c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b770:	425b      	negs	r3, r3
 800b772:	4a05      	ldr	r2, [pc, #20]	@ (800b788 <lwip_strerr+0x3c>)
 800b774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	08017c40 	.word	0x08017c40
 800b788:	20000020 	.word	0x20000020

0800b78c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b79a:	021b      	lsls	r3, r3, #8
 800b79c:	b21a      	sxth	r2, r3
 800b79e:	88fb      	ldrh	r3, [r7, #6]
 800b7a0:	0a1b      	lsrs	r3, r3, #8
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	b21b      	sxth	r3, r3
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	b21b      	sxth	r3, r3
 800b7aa:	b29b      	uxth	r3, r3
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	061a      	lsls	r2, r3, #24
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b7cc:	431a      	orrs	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	0a1b      	lsrs	r3, r3, #8
 800b7d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	0e1b      	lsrs	r3, r3, #24
 800b7dc:	4313      	orrs	r3, r2
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b7f4:	f000 f8d4 	bl	800b9a0 <mem_init>
  memp_init();
 800b7f8:	f000 fbd6 	bl	800bfa8 <memp_init>
  pbuf_init();
  netif_init();
 800b7fc:	f000 fcd4 	bl	800c1a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b800:	f007 f96e 	bl	8012ae0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b804:	f001 feb0 	bl	800d568 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b808:	f007 f8e0 	bl	80129cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	4603      	mov	r3, r0
 800b81c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b81e:	4b05      	ldr	r3, [pc, #20]	@ (800b834 <ptr_to_mem+0x20>)
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	88fb      	ldrh	r3, [r7, #6]
 800b824:	4413      	add	r3, r2
}
 800b826:	4618      	mov	r0, r3
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	200054c0 	.word	0x200054c0

0800b838 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b840:	4b05      	ldr	r3, [pc, #20]	@ (800b858 <mem_to_ptr+0x20>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	b29b      	uxth	r3, r3
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	200054c0 	.word	0x200054c0

0800b85c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b85c:	b590      	push	{r4, r7, lr}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b864:	4b45      	ldr	r3, [pc, #276]	@ (800b97c <plug_holes+0x120>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d206      	bcs.n	800b87c <plug_holes+0x20>
 800b86e:	4b44      	ldr	r3, [pc, #272]	@ (800b980 <plug_holes+0x124>)
 800b870:	f240 12df 	movw	r2, #479	@ 0x1df
 800b874:	4943      	ldr	r1, [pc, #268]	@ (800b984 <plug_holes+0x128>)
 800b876:	4844      	ldr	r0, [pc, #272]	@ (800b988 <plug_holes+0x12c>)
 800b878:	f00b f95e 	bl	8016b38 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b87c:	4b43      	ldr	r3, [pc, #268]	@ (800b98c <plug_holes+0x130>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	429a      	cmp	r2, r3
 800b884:	d306      	bcc.n	800b894 <plug_holes+0x38>
 800b886:	4b3e      	ldr	r3, [pc, #248]	@ (800b980 <plug_holes+0x124>)
 800b888:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b88c:	4940      	ldr	r1, [pc, #256]	@ (800b990 <plug_holes+0x134>)
 800b88e:	483e      	ldr	r0, [pc, #248]	@ (800b988 <plug_holes+0x12c>)
 800b890:	f00b f952 	bl	8016b38 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	791b      	ldrb	r3, [r3, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d006      	beq.n	800b8aa <plug_holes+0x4e>
 800b89c:	4b38      	ldr	r3, [pc, #224]	@ (800b980 <plug_holes+0x124>)
 800b89e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b8a2:	493c      	ldr	r1, [pc, #240]	@ (800b994 <plug_holes+0x138>)
 800b8a4:	4838      	ldr	r0, [pc, #224]	@ (800b988 <plug_holes+0x12c>)
 800b8a6:	f00b f947 	bl	8016b38 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b8b2:	d906      	bls.n	800b8c2 <plug_holes+0x66>
 800b8b4:	4b32      	ldr	r3, [pc, #200]	@ (800b980 <plug_holes+0x124>)
 800b8b6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b8ba:	4937      	ldr	r1, [pc, #220]	@ (800b998 <plug_holes+0x13c>)
 800b8bc:	4832      	ldr	r0, [pc, #200]	@ (800b988 <plug_holes+0x12c>)
 800b8be:	f00b f93b 	bl	8016b38 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff ffa4 	bl	800b814 <ptr_to_mem>
 800b8cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d024      	beq.n	800b920 <plug_holes+0xc4>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	791b      	ldrb	r3, [r3, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d120      	bne.n	800b920 <plug_holes+0xc4>
 800b8de:	4b2b      	ldr	r3, [pc, #172]	@ (800b98c <plug_holes+0x130>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d01b      	beq.n	800b920 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b8e8:	4b2c      	ldr	r3, [pc, #176]	@ (800b99c <plug_holes+0x140>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d102      	bne.n	800b8f8 <plug_holes+0x9c>
      lfree = mem;
 800b8f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b99c <plug_holes+0x140>)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	881a      	ldrh	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	881b      	ldrh	r3, [r3, #0]
 800b904:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b908:	d00a      	beq.n	800b920 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff ff80 	bl	800b814 <ptr_to_mem>
 800b914:	4604      	mov	r4, r0
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff ff8e 	bl	800b838 <mem_to_ptr>
 800b91c:	4603      	mov	r3, r0
 800b91e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	885b      	ldrh	r3, [r3, #2]
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff ff75 	bl	800b814 <ptr_to_mem>
 800b92a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d01f      	beq.n	800b974 <plug_holes+0x118>
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	791b      	ldrb	r3, [r3, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d11b      	bne.n	800b974 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b93c:	4b17      	ldr	r3, [pc, #92]	@ (800b99c <plug_holes+0x140>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	429a      	cmp	r2, r3
 800b944:	d102      	bne.n	800b94c <plug_holes+0xf0>
      lfree = pmem;
 800b946:	4a15      	ldr	r2, [pc, #84]	@ (800b99c <plug_holes+0x140>)
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	881a      	ldrh	r2, [r3, #0]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b95c:	d00a      	beq.n	800b974 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff ff56 	bl	800b814 <ptr_to_mem>
 800b968:	4604      	mov	r4, r0
 800b96a:	68b8      	ldr	r0, [r7, #8]
 800b96c:	f7ff ff64 	bl	800b838 <mem_to_ptr>
 800b970:	4603      	mov	r3, r0
 800b972:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b974:	bf00      	nop
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd90      	pop	{r4, r7, pc}
 800b97c:	200054c0 	.word	0x200054c0
 800b980:	08017c50 	.word	0x08017c50
 800b984:	08017c80 	.word	0x08017c80
 800b988:	08017c98 	.word	0x08017c98
 800b98c:	200054c4 	.word	0x200054c4
 800b990:	08017cc0 	.word	0x08017cc0
 800b994:	08017cdc 	.word	0x08017cdc
 800b998:	08017cf8 	.word	0x08017cf8
 800b99c:	200054c8 	.word	0x200054c8

0800b9a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b9a6:	4b16      	ldr	r3, [pc, #88]	@ (800ba00 <mem_init+0x60>)
 800b9a8:	4a16      	ldr	r2, [pc, #88]	@ (800ba04 <mem_init+0x64>)
 800b9aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b9ac:	4b14      	ldr	r3, [pc, #80]	@ (800ba00 <mem_init+0x60>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b9b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b9c6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800b9ca:	f7ff ff23 	bl	800b814 <ptr_to_mem>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	4a0d      	ldr	r2, [pc, #52]	@ (800ba08 <mem_init+0x68>)
 800b9d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800ba08 <mem_init+0x68>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba08 <mem_init+0x68>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b9e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b9e6:	4b08      	ldr	r3, [pc, #32]	@ (800ba08 <mem_init+0x68>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b9ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b9f0:	4b03      	ldr	r3, [pc, #12]	@ (800ba00 <mem_init+0x60>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a05      	ldr	r2, [pc, #20]	@ (800ba0c <mem_init+0x6c>)
 800b9f6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	200054c0 	.word	0x200054c0
 800ba04:	20048000 	.word	0x20048000
 800ba08:	200054c4 	.word	0x200054c4
 800ba0c:	200054c8 	.word	0x200054c8

0800ba10 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f7ff ff0d 	bl	800b838 <mem_to_ptr>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff fef4 	bl	800b814 <ptr_to_mem>
 800ba2c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	885b      	ldrh	r3, [r3, #2]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff feee 	bl	800b814 <ptr_to_mem>
 800ba38:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ba42:	d818      	bhi.n	800ba76 <mem_link_valid+0x66>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	885b      	ldrh	r3, [r3, #2]
 800ba48:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ba4c:	d813      	bhi.n	800ba76 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba52:	8afa      	ldrh	r2, [r7, #22]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d004      	beq.n	800ba62 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	881b      	ldrh	r3, [r3, #0]
 800ba5c:	8afa      	ldrh	r2, [r7, #22]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d109      	bne.n	800ba76 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba62:	4b08      	ldr	r3, [pc, #32]	@ (800ba84 <mem_link_valid+0x74>)
 800ba64:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d006      	beq.n	800ba7a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	885b      	ldrh	r3, [r3, #2]
 800ba70:	8afa      	ldrh	r2, [r7, #22]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d001      	beq.n	800ba7a <mem_link_valid+0x6a>
    return 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	e000      	b.n	800ba7c <mem_link_valid+0x6c>
  }
  return 1;
 800ba7a:	2301      	movs	r3, #1
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200054c4 	.word	0x200054c4

0800ba88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d04c      	beq.n	800bb30 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f003 0303 	and.w	r3, r3, #3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d007      	beq.n	800bab0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800baa0:	4b25      	ldr	r3, [pc, #148]	@ (800bb38 <mem_free+0xb0>)
 800baa2:	f240 2273 	movw	r2, #627	@ 0x273
 800baa6:	4925      	ldr	r1, [pc, #148]	@ (800bb3c <mem_free+0xb4>)
 800baa8:	4825      	ldr	r0, [pc, #148]	@ (800bb40 <mem_free+0xb8>)
 800baaa:	f00b f845 	bl	8016b38 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800baae:	e040      	b.n	800bb32 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	3b08      	subs	r3, #8
 800bab4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bab6:	4b23      	ldr	r3, [pc, #140]	@ (800bb44 <mem_free+0xbc>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	429a      	cmp	r2, r3
 800babe:	d306      	bcc.n	800bace <mem_free+0x46>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f103 020c 	add.w	r2, r3, #12
 800bac6:	4b20      	ldr	r3, [pc, #128]	@ (800bb48 <mem_free+0xc0>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d907      	bls.n	800bade <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bace:	4b1a      	ldr	r3, [pc, #104]	@ (800bb38 <mem_free+0xb0>)
 800bad0:	f240 227f 	movw	r2, #639	@ 0x27f
 800bad4:	491d      	ldr	r1, [pc, #116]	@ (800bb4c <mem_free+0xc4>)
 800bad6:	481a      	ldr	r0, [pc, #104]	@ (800bb40 <mem_free+0xb8>)
 800bad8:	f00b f82e 	bl	8016b38 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800badc:	e029      	b.n	800bb32 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	791b      	ldrb	r3, [r3, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d107      	bne.n	800baf6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bae6:	4b14      	ldr	r3, [pc, #80]	@ (800bb38 <mem_free+0xb0>)
 800bae8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800baec:	4918      	ldr	r1, [pc, #96]	@ (800bb50 <mem_free+0xc8>)
 800baee:	4814      	ldr	r0, [pc, #80]	@ (800bb40 <mem_free+0xb8>)
 800baf0:	f00b f822 	bl	8016b38 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800baf4:	e01d      	b.n	800bb32 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f7ff ff8a 	bl	800ba10 <mem_link_valid>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d107      	bne.n	800bb12 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bb02:	4b0d      	ldr	r3, [pc, #52]	@ (800bb38 <mem_free+0xb0>)
 800bb04:	f240 2295 	movw	r2, #661	@ 0x295
 800bb08:	4912      	ldr	r1, [pc, #72]	@ (800bb54 <mem_free+0xcc>)
 800bb0a:	480d      	ldr	r0, [pc, #52]	@ (800bb40 <mem_free+0xb8>)
 800bb0c:	f00b f814 	bl	8016b38 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bb10:	e00f      	b.n	800bb32 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb18:	4b0f      	ldr	r3, [pc, #60]	@ (800bb58 <mem_free+0xd0>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d202      	bcs.n	800bb28 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bb22:	4a0d      	ldr	r2, [pc, #52]	@ (800bb58 <mem_free+0xd0>)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f7ff fe97 	bl	800b85c <plug_holes>
 800bb2e:	e000      	b.n	800bb32 <mem_free+0xaa>
    return;
 800bb30:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	08017c50 	.word	0x08017c50
 800bb3c:	08017d24 	.word	0x08017d24
 800bb40:	08017c98 	.word	0x08017c98
 800bb44:	200054c0 	.word	0x200054c0
 800bb48:	200054c4 	.word	0x200054c4
 800bb4c:	08017d48 	.word	0x08017d48
 800bb50:	08017d64 	.word	0x08017d64
 800bb54:	08017d8c 	.word	0x08017d8c
 800bb58:	200054c8 	.word	0x200054c8

0800bb5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b088      	sub	sp, #32
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb68:	887b      	ldrh	r3, [r7, #2]
 800bb6a:	3303      	adds	r3, #3
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	f023 0303 	bic.w	r3, r3, #3
 800bb72:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb74:	8bfb      	ldrh	r3, [r7, #30]
 800bb76:	2b0b      	cmp	r3, #11
 800bb78:	d801      	bhi.n	800bb7e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb7e:	8bfb      	ldrh	r3, [r7, #30]
 800bb80:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bb84:	d803      	bhi.n	800bb8e <mem_trim+0x32>
 800bb86:	8bfa      	ldrh	r2, [r7, #30]
 800bb88:	887b      	ldrh	r3, [r7, #2]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d201      	bcs.n	800bb92 <mem_trim+0x36>
    return NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e0cc      	b.n	800bd2c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bb92:	4b68      	ldr	r3, [pc, #416]	@ (800bd34 <mem_trim+0x1d8>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d304      	bcc.n	800bba6 <mem_trim+0x4a>
 800bb9c:	4b66      	ldr	r3, [pc, #408]	@ (800bd38 <mem_trim+0x1dc>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d306      	bcc.n	800bbb4 <mem_trim+0x58>
 800bba6:	4b65      	ldr	r3, [pc, #404]	@ (800bd3c <mem_trim+0x1e0>)
 800bba8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bbac:	4964      	ldr	r1, [pc, #400]	@ (800bd40 <mem_trim+0x1e4>)
 800bbae:	4865      	ldr	r0, [pc, #404]	@ (800bd44 <mem_trim+0x1e8>)
 800bbb0:	f00a ffc2 	bl	8016b38 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bbb4:	4b5f      	ldr	r3, [pc, #380]	@ (800bd34 <mem_trim+0x1d8>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d304      	bcc.n	800bbc8 <mem_trim+0x6c>
 800bbbe:	4b5e      	ldr	r3, [pc, #376]	@ (800bd38 <mem_trim+0x1dc>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d301      	bcc.n	800bbcc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	e0af      	b.n	800bd2c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3b08      	subs	r3, #8
 800bbd0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bbd2:	69b8      	ldr	r0, [r7, #24]
 800bbd4:	f7ff fe30 	bl	800b838 <mem_to_ptr>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	881a      	ldrh	r2, [r3, #0]
 800bbe0:	8afb      	ldrh	r3, [r7, #22]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	3b08      	subs	r3, #8
 800bbe8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bbea:	8bfa      	ldrh	r2, [r7, #30]
 800bbec:	8abb      	ldrh	r3, [r7, #20]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d906      	bls.n	800bc00 <mem_trim+0xa4>
 800bbf2:	4b52      	ldr	r3, [pc, #328]	@ (800bd3c <mem_trim+0x1e0>)
 800bbf4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bbf8:	4953      	ldr	r1, [pc, #332]	@ (800bd48 <mem_trim+0x1ec>)
 800bbfa:	4852      	ldr	r0, [pc, #328]	@ (800bd44 <mem_trim+0x1e8>)
 800bbfc:	f00a ff9c 	bl	8016b38 <iprintf>
  if (newsize > size) {
 800bc00:	8bfa      	ldrh	r2, [r7, #30]
 800bc02:	8abb      	ldrh	r3, [r7, #20]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d901      	bls.n	800bc0c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e08f      	b.n	800bd2c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800bc0c:	8bfa      	ldrh	r2, [r7, #30]
 800bc0e:	8abb      	ldrh	r3, [r7, #20]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d101      	bne.n	800bc18 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	e089      	b.n	800bd2c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fdf9 	bl	800b814 <ptr_to_mem>
 800bc22:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	791b      	ldrb	r3, [r3, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d13f      	bne.n	800bcac <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc34:	d106      	bne.n	800bc44 <mem_trim+0xe8>
 800bc36:	4b41      	ldr	r3, [pc, #260]	@ (800bd3c <mem_trim+0x1e0>)
 800bc38:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bc3c:	4943      	ldr	r1, [pc, #268]	@ (800bd4c <mem_trim+0x1f0>)
 800bc3e:	4841      	ldr	r0, [pc, #260]	@ (800bd44 <mem_trim+0x1e8>)
 800bc40:	f00a ff7a 	bl	8016b38 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc4a:	8afa      	ldrh	r2, [r7, #22]
 800bc4c:	8bfb      	ldrh	r3, [r7, #30]
 800bc4e:	4413      	add	r3, r2
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	3308      	adds	r3, #8
 800bc54:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc56:	4b3e      	ldr	r3, [pc, #248]	@ (800bd50 <mem_trim+0x1f4>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	693a      	ldr	r2, [r7, #16]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d106      	bne.n	800bc6e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800bc60:	89fb      	ldrh	r3, [r7, #14]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff fdd6 	bl	800b814 <ptr_to_mem>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	4a39      	ldr	r2, [pc, #228]	@ (800bd50 <mem_trim+0x1f4>)
 800bc6c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc6e:	89fb      	ldrh	r3, [r7, #14]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fdcf 	bl	800b814 <ptr_to_mem>
 800bc76:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	89ba      	ldrh	r2, [r7, #12]
 800bc82:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	8afa      	ldrh	r2, [r7, #22]
 800bc88:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	89fa      	ldrh	r2, [r7, #14]
 800bc8e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc98:	d047      	beq.n	800bd2a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff fdb8 	bl	800b814 <ptr_to_mem>
 800bca4:	4602      	mov	r2, r0
 800bca6:	89fb      	ldrh	r3, [r7, #14]
 800bca8:	8053      	strh	r3, [r2, #2]
 800bcaa:	e03e      	b.n	800bd2a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bcac:	8bfb      	ldrh	r3, [r7, #30]
 800bcae:	f103 0214 	add.w	r2, r3, #20
 800bcb2:	8abb      	ldrh	r3, [r7, #20]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d838      	bhi.n	800bd2a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bcb8:	8afa      	ldrh	r2, [r7, #22]
 800bcba:	8bfb      	ldrh	r3, [r7, #30]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	881b      	ldrh	r3, [r3, #0]
 800bcc8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bccc:	d106      	bne.n	800bcdc <mem_trim+0x180>
 800bcce:	4b1b      	ldr	r3, [pc, #108]	@ (800bd3c <mem_trim+0x1e0>)
 800bcd0:	f240 3216 	movw	r2, #790	@ 0x316
 800bcd4:	491d      	ldr	r1, [pc, #116]	@ (800bd4c <mem_trim+0x1f0>)
 800bcd6:	481b      	ldr	r0, [pc, #108]	@ (800bd44 <mem_trim+0x1e8>)
 800bcd8:	f00a ff2e 	bl	8016b38 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bcdc:	89fb      	ldrh	r3, [r7, #14]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff fd98 	bl	800b814 <ptr_to_mem>
 800bce4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bce6:	4b1a      	ldr	r3, [pc, #104]	@ (800bd50 <mem_trim+0x1f4>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d202      	bcs.n	800bcf6 <mem_trim+0x19a>
      lfree = mem2;
 800bcf0:	4a17      	ldr	r2, [pc, #92]	@ (800bd50 <mem_trim+0x1f4>)
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	881a      	ldrh	r2, [r3, #0]
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	8afa      	ldrh	r2, [r7, #22]
 800bd08:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	89fa      	ldrh	r2, [r7, #14]
 800bd0e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	881b      	ldrh	r3, [r3, #0]
 800bd14:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bd18:	d007      	beq.n	800bd2a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fd78 	bl	800b814 <ptr_to_mem>
 800bd24:	4602      	mov	r2, r0
 800bd26:	89fb      	ldrh	r3, [r7, #14]
 800bd28:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800bd2a:	687b      	ldr	r3, [r7, #4]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3720      	adds	r7, #32
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	200054c0 	.word	0x200054c0
 800bd38:	200054c4 	.word	0x200054c4
 800bd3c:	08017c50 	.word	0x08017c50
 800bd40:	08017dc0 	.word	0x08017dc0
 800bd44:	08017c98 	.word	0x08017c98
 800bd48:	08017dd8 	.word	0x08017dd8
 800bd4c:	08017df8 	.word	0x08017df8
 800bd50:	200054c8 	.word	0x200054c8

0800bd54 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd5e:	88fb      	ldrh	r3, [r7, #6]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <mem_malloc+0x14>
    return NULL;
 800bd64:	2300      	movs	r3, #0
 800bd66:	e0d9      	b.n	800bf1c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd68:	88fb      	ldrh	r3, [r7, #6]
 800bd6a:	3303      	adds	r3, #3
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	f023 0303 	bic.w	r3, r3, #3
 800bd72:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd74:	8bbb      	ldrh	r3, [r7, #28]
 800bd76:	2b0b      	cmp	r3, #11
 800bd78:	d801      	bhi.n	800bd7e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd7a:	230c      	movs	r3, #12
 800bd7c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd7e:	8bbb      	ldrh	r3, [r7, #28]
 800bd80:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bd84:	d803      	bhi.n	800bd8e <mem_malloc+0x3a>
 800bd86:	8bba      	ldrh	r2, [r7, #28]
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d201      	bcs.n	800bd92 <mem_malloc+0x3e>
    return NULL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e0c4      	b.n	800bf1c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd92:	4b64      	ldr	r3, [pc, #400]	@ (800bf24 <mem_malloc+0x1d0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7ff fd4e 	bl	800b838 <mem_to_ptr>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	83fb      	strh	r3, [r7, #30]
 800bda0:	e0b4      	b.n	800bf0c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bda2:	8bfb      	ldrh	r3, [r7, #30]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff fd35 	bl	800b814 <ptr_to_mem>
 800bdaa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	791b      	ldrb	r3, [r3, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f040 80a4 	bne.w	800befe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	8bfb      	ldrh	r3, [r7, #30]
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	f1a3 0208 	sub.w	r2, r3, #8
 800bdc4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	f0c0 8099 	bcc.w	800befe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	8bfb      	ldrh	r3, [r7, #30]
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	f1a3 0208 	sub.w	r2, r3, #8
 800bdda:	8bbb      	ldrh	r3, [r7, #28]
 800bddc:	3314      	adds	r3, #20
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d333      	bcc.n	800be4a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bde2:	8bfa      	ldrh	r2, [r7, #30]
 800bde4:	8bbb      	ldrh	r3, [r7, #28]
 800bde6:	4413      	add	r3, r2
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	3308      	adds	r3, #8
 800bdec:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bdee:	8a7b      	ldrh	r3, [r7, #18]
 800bdf0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bdf4:	d106      	bne.n	800be04 <mem_malloc+0xb0>
 800bdf6:	4b4c      	ldr	r3, [pc, #304]	@ (800bf28 <mem_malloc+0x1d4>)
 800bdf8:	f240 3287 	movw	r2, #903	@ 0x387
 800bdfc:	494b      	ldr	r1, [pc, #300]	@ (800bf2c <mem_malloc+0x1d8>)
 800bdfe:	484c      	ldr	r0, [pc, #304]	@ (800bf30 <mem_malloc+0x1dc>)
 800be00:	f00a fe9a 	bl	8016b38 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800be04:	8a7b      	ldrh	r3, [r7, #18]
 800be06:	4618      	mov	r0, r3
 800be08:	f7ff fd04 	bl	800b814 <ptr_to_mem>
 800be0c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	881a      	ldrh	r2, [r3, #0]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	8bfa      	ldrh	r2, [r7, #30]
 800be20:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	8a7a      	ldrh	r2, [r7, #18]
 800be26:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	2201      	movs	r2, #1
 800be2c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800be36:	d00b      	beq.n	800be50 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	881b      	ldrh	r3, [r3, #0]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7ff fce9 	bl	800b814 <ptr_to_mem>
 800be42:	4602      	mov	r2, r0
 800be44:	8a7b      	ldrh	r3, [r7, #18]
 800be46:	8053      	strh	r3, [r2, #2]
 800be48:	e002      	b.n	800be50 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2201      	movs	r2, #1
 800be4e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be50:	4b34      	ldr	r3, [pc, #208]	@ (800bf24 <mem_malloc+0x1d0>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	429a      	cmp	r2, r3
 800be58:	d127      	bne.n	800beaa <mem_malloc+0x156>
          struct mem *cur = lfree;
 800be5a:	4b32      	ldr	r3, [pc, #200]	@ (800bf24 <mem_malloc+0x1d0>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be60:	e005      	b.n	800be6e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff fcd4 	bl	800b814 <ptr_to_mem>
 800be6c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	791b      	ldrb	r3, [r3, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d004      	beq.n	800be80 <mem_malloc+0x12c>
 800be76:	4b2f      	ldr	r3, [pc, #188]	@ (800bf34 <mem_malloc+0x1e0>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69ba      	ldr	r2, [r7, #24]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d1f0      	bne.n	800be62 <mem_malloc+0x10e>
          }
          lfree = cur;
 800be80:	4a28      	ldr	r2, [pc, #160]	@ (800bf24 <mem_malloc+0x1d0>)
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be86:	4b27      	ldr	r3, [pc, #156]	@ (800bf24 <mem_malloc+0x1d0>)
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	4b2a      	ldr	r3, [pc, #168]	@ (800bf34 <mem_malloc+0x1e0>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d00b      	beq.n	800beaa <mem_malloc+0x156>
 800be92:	4b24      	ldr	r3, [pc, #144]	@ (800bf24 <mem_malloc+0x1d0>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	791b      	ldrb	r3, [r3, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d006      	beq.n	800beaa <mem_malloc+0x156>
 800be9c:	4b22      	ldr	r3, [pc, #136]	@ (800bf28 <mem_malloc+0x1d4>)
 800be9e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800bea2:	4925      	ldr	r1, [pc, #148]	@ (800bf38 <mem_malloc+0x1e4>)
 800bea4:	4822      	ldr	r0, [pc, #136]	@ (800bf30 <mem_malloc+0x1dc>)
 800bea6:	f00a fe47 	bl	8016b38 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800beaa:	8bba      	ldrh	r2, [r7, #28]
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	4413      	add	r3, r2
 800beb0:	3308      	adds	r3, #8
 800beb2:	4a20      	ldr	r2, [pc, #128]	@ (800bf34 <mem_malloc+0x1e0>)
 800beb4:	6812      	ldr	r2, [r2, #0]
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d906      	bls.n	800bec8 <mem_malloc+0x174>
 800beba:	4b1b      	ldr	r3, [pc, #108]	@ (800bf28 <mem_malloc+0x1d4>)
 800bebc:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800bec0:	491e      	ldr	r1, [pc, #120]	@ (800bf3c <mem_malloc+0x1e8>)
 800bec2:	481b      	ldr	r0, [pc, #108]	@ (800bf30 <mem_malloc+0x1dc>)
 800bec4:	f00a fe38 	bl	8016b38 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f003 0303 	and.w	r3, r3, #3
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d006      	beq.n	800bee0 <mem_malloc+0x18c>
 800bed2:	4b15      	ldr	r3, [pc, #84]	@ (800bf28 <mem_malloc+0x1d4>)
 800bed4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800bed8:	4919      	ldr	r1, [pc, #100]	@ (800bf40 <mem_malloc+0x1ec>)
 800beda:	4815      	ldr	r0, [pc, #84]	@ (800bf30 <mem_malloc+0x1dc>)
 800bedc:	f00a fe2c 	bl	8016b38 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f003 0303 	and.w	r3, r3, #3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d006      	beq.n	800bef8 <mem_malloc+0x1a4>
 800beea:	4b0f      	ldr	r3, [pc, #60]	@ (800bf28 <mem_malloc+0x1d4>)
 800beec:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bef0:	4914      	ldr	r1, [pc, #80]	@ (800bf44 <mem_malloc+0x1f0>)
 800bef2:	480f      	ldr	r0, [pc, #60]	@ (800bf30 <mem_malloc+0x1dc>)
 800bef4:	f00a fe20 	bl	8016b38 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	3308      	adds	r3, #8
 800befc:	e00e      	b.n	800bf1c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800befe:	8bfb      	ldrh	r3, [r7, #30]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff fc87 	bl	800b814 <ptr_to_mem>
 800bf06:	4603      	mov	r3, r0
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf0c:	8bfa      	ldrh	r2, [r7, #30]
 800bf0e:	8bbb      	ldrh	r3, [r7, #28]
 800bf10:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800bf14:	429a      	cmp	r2, r3
 800bf16:	f4ff af44 	bcc.w	800bda2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3720      	adds	r7, #32
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	200054c8 	.word	0x200054c8
 800bf28:	08017c50 	.word	0x08017c50
 800bf2c:	08017df8 	.word	0x08017df8
 800bf30:	08017c98 	.word	0x08017c98
 800bf34:	200054c4 	.word	0x200054c4
 800bf38:	08017e0c 	.word	0x08017e0c
 800bf3c:	08017e28 	.word	0x08017e28
 800bf40:	08017e58 	.word	0x08017e58
 800bf44:	08017e88 	.word	0x08017e88

0800bf48 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	3303      	adds	r3, #3
 800bf5e:	f023 0303 	bic.w	r3, r3, #3
 800bf62:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
 800bf68:	e011      	b.n	800bf8e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	889b      	ldrh	r3, [r3, #4]
 800bf80:	461a      	mov	r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	4413      	add	r3, r2
 800bf86:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	88db      	ldrh	r3, [r3, #6]
 800bf92:	461a      	mov	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4293      	cmp	r3, r2
 800bf98:	dbe7      	blt.n	800bf6a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bf9a:	bf00      	nop
 800bf9c:	bf00      	nop
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfae:	2300      	movs	r3, #0
 800bfb0:	80fb      	strh	r3, [r7, #6]
 800bfb2:	e009      	b.n	800bfc8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bfb4:	88fb      	ldrh	r3, [r7, #6]
 800bfb6:	4a08      	ldr	r2, [pc, #32]	@ (800bfd8 <memp_init+0x30>)
 800bfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff ffc3 	bl	800bf48 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfc2:	88fb      	ldrh	r3, [r7, #6]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	80fb      	strh	r3, [r7, #6]
 800bfc8:	88fb      	ldrh	r3, [r7, #6]
 800bfca:	2b08      	cmp	r3, #8
 800bfcc:	d9f2      	bls.n	800bfb4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	0801b18c 	.word	0x0801b18c

0800bfdc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d012      	beq.n	800c018 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	6812      	ldr	r2, [r2, #0]
 800bffa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f003 0303 	and.w	r3, r3, #3
 800c002:	2b00      	cmp	r3, #0
 800c004:	d006      	beq.n	800c014 <do_memp_malloc_pool+0x38>
 800c006:	4b07      	ldr	r3, [pc, #28]	@ (800c024 <do_memp_malloc_pool+0x48>)
 800c008:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c00c:	4906      	ldr	r1, [pc, #24]	@ (800c028 <do_memp_malloc_pool+0x4c>)
 800c00e:	4807      	ldr	r0, [pc, #28]	@ (800c02c <do_memp_malloc_pool+0x50>)
 800c010:	f00a fd92 	bl	8016b38 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	e000      	b.n	800c01a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	08017f14 	.word	0x08017f14
 800c028:	08017f44 	.word	0x08017f44
 800c02c:	08017f68 	.word	0x08017f68

0800c030 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d106      	bne.n	800c04c <memp_malloc_pool+0x1c>
 800c03e:	4b0a      	ldr	r3, [pc, #40]	@ (800c068 <memp_malloc_pool+0x38>)
 800c040:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c044:	4909      	ldr	r1, [pc, #36]	@ (800c06c <memp_malloc_pool+0x3c>)
 800c046:	480a      	ldr	r0, [pc, #40]	@ (800c070 <memp_malloc_pool+0x40>)
 800c048:	f00a fd76 	bl	8016b38 <iprintf>
  if (desc == NULL) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <memp_malloc_pool+0x26>
    return NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	e003      	b.n	800c05e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7ff ffc0 	bl	800bfdc <do_memp_malloc_pool>
 800c05c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	08017f14 	.word	0x08017f14
 800c06c:	08017f90 	.word	0x08017f90
 800c070:	08017f68 	.word	0x08017f68

0800c074 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	2b08      	cmp	r3, #8
 800c082:	d908      	bls.n	800c096 <memp_malloc+0x22>
 800c084:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b0 <memp_malloc+0x3c>)
 800c086:	f240 1257 	movw	r2, #343	@ 0x157
 800c08a:	490a      	ldr	r1, [pc, #40]	@ (800c0b4 <memp_malloc+0x40>)
 800c08c:	480a      	ldr	r0, [pc, #40]	@ (800c0b8 <memp_malloc+0x44>)
 800c08e:	f00a fd53 	bl	8016b38 <iprintf>
 800c092:	2300      	movs	r3, #0
 800c094:	e008      	b.n	800c0a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	4a08      	ldr	r2, [pc, #32]	@ (800c0bc <memp_malloc+0x48>)
 800c09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7ff ff9c 	bl	800bfdc <do_memp_malloc_pool>
 800c0a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	08017f14 	.word	0x08017f14
 800c0b4:	08017fa4 	.word	0x08017fa4
 800c0b8:	08017f68 	.word	0x08017f68
 800c0bc:	0801b18c 	.word	0x0801b18c

0800c0c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	f003 0303 	and.w	r3, r3, #3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d006      	beq.n	800c0e2 <do_memp_free_pool+0x22>
 800c0d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c100 <do_memp_free_pool+0x40>)
 800c0d6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c0da:	490a      	ldr	r1, [pc, #40]	@ (800c104 <do_memp_free_pool+0x44>)
 800c0dc:	480a      	ldr	r0, [pc, #40]	@ (800c108 <do_memp_free_pool+0x48>)
 800c0de:	f00a fd2b 	bl	8016b38 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c0f8:	bf00      	nop
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	08017f14 	.word	0x08017f14
 800c104:	08017fc4 	.word	0x08017fc4
 800c108:	08017f68 	.word	0x08017f68

0800c10c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d106      	bne.n	800c12a <memp_free_pool+0x1e>
 800c11c:	4b0a      	ldr	r3, [pc, #40]	@ (800c148 <memp_free_pool+0x3c>)
 800c11e:	f240 1295 	movw	r2, #405	@ 0x195
 800c122:	490a      	ldr	r1, [pc, #40]	@ (800c14c <memp_free_pool+0x40>)
 800c124:	480a      	ldr	r0, [pc, #40]	@ (800c150 <memp_free_pool+0x44>)
 800c126:	f00a fd07 	bl	8016b38 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d007      	beq.n	800c140 <memp_free_pool+0x34>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d004      	beq.n	800c140 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff ffc1 	bl	800c0c0 <do_memp_free_pool>
 800c13e:	e000      	b.n	800c142 <memp_free_pool+0x36>
    return;
 800c140:	bf00      	nop
}
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	08017f14 	.word	0x08017f14
 800c14c:	08017f90 	.word	0x08017f90
 800c150:	08017f68 	.word	0x08017f68

0800c154 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	6039      	str	r1, [r7, #0]
 800c15e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	2b08      	cmp	r3, #8
 800c164:	d907      	bls.n	800c176 <memp_free+0x22>
 800c166:	4b0c      	ldr	r3, [pc, #48]	@ (800c198 <memp_free+0x44>)
 800c168:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c16c:	490b      	ldr	r1, [pc, #44]	@ (800c19c <memp_free+0x48>)
 800c16e:	480c      	ldr	r0, [pc, #48]	@ (800c1a0 <memp_free+0x4c>)
 800c170:	f00a fce2 	bl	8016b38 <iprintf>
 800c174:	e00c      	b.n	800c190 <memp_free+0x3c>

  if (mem == NULL) {
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d008      	beq.n	800c18e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	4a09      	ldr	r2, [pc, #36]	@ (800c1a4 <memp_free+0x50>)
 800c180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	4618      	mov	r0, r3
 800c188:	f7ff ff9a 	bl	800c0c0 <do_memp_free_pool>
 800c18c:	e000      	b.n	800c190 <memp_free+0x3c>
    return;
 800c18e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	08017f14 	.word	0x08017f14
 800c19c:	08017fe4 	.word	0x08017fe4
 800c1a0:	08017f68 	.word	0x08017f68
 800c1a4:	0801b18c 	.word	0x0801b18c

0800c1a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c1ac:	bf00      	nop
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
	...

0800c1b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
 800c1c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d108      	bne.n	800c1de <netif_add+0x26>
 800c1cc:	4b96      	ldr	r3, [pc, #600]	@ (800c428 <netif_add+0x270>)
 800c1ce:	f240 1227 	movw	r2, #295	@ 0x127
 800c1d2:	4996      	ldr	r1, [pc, #600]	@ (800c42c <netif_add+0x274>)
 800c1d4:	4896      	ldr	r0, [pc, #600]	@ (800c430 <netif_add+0x278>)
 800c1d6:	f00a fcaf 	bl	8016b38 <iprintf>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e14c      	b.n	800c478 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d108      	bne.n	800c1f6 <netif_add+0x3e>
 800c1e4:	4b90      	ldr	r3, [pc, #576]	@ (800c428 <netif_add+0x270>)
 800c1e6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c1ea:	4992      	ldr	r1, [pc, #584]	@ (800c434 <netif_add+0x27c>)
 800c1ec:	4890      	ldr	r0, [pc, #576]	@ (800c430 <netif_add+0x278>)
 800c1ee:	f00a fca3 	bl	8016b38 <iprintf>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e140      	b.n	800c478 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c1fc:	4b8e      	ldr	r3, [pc, #568]	@ (800c438 <netif_add+0x280>)
 800c1fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d101      	bne.n	800c20a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c206:	4b8c      	ldr	r3, [pc, #560]	@ (800c438 <netif_add+0x280>)
 800c208:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d101      	bne.n	800c214 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c210:	4b89      	ldr	r3, [pc, #548]	@ (800c438 <netif_add+0x280>)
 800c212:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4a84      	ldr	r2, [pc, #528]	@ (800c43c <netif_add+0x284>)
 800c22a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6a3a      	ldr	r2, [r7, #32]
 800c244:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c246:	4b7e      	ldr	r3, [pc, #504]	@ (800c440 <netif_add+0x288>)
 800c248:	781a      	ldrb	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c254:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f9f5 	bl	800c64c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	4798      	blx	r3
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <netif_add+0xba>
    return NULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	e102      	b.n	800c478 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c278:	2bff      	cmp	r3, #255	@ 0xff
 800c27a:	d103      	bne.n	800c284 <netif_add+0xcc>
        netif->num = 0;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c284:	2300      	movs	r3, #0
 800c286:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c288:	4b6e      	ldr	r3, [pc, #440]	@ (800c444 <netif_add+0x28c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	617b      	str	r3, [r7, #20]
 800c28e:	e02b      	b.n	800c2e8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	429a      	cmp	r2, r3
 800c296:	d106      	bne.n	800c2a6 <netif_add+0xee>
 800c298:	4b63      	ldr	r3, [pc, #396]	@ (800c428 <netif_add+0x270>)
 800c29a:	f240 128b 	movw	r2, #395	@ 0x18b
 800c29e:	496a      	ldr	r1, [pc, #424]	@ (800c448 <netif_add+0x290>)
 800c2a0:	4863      	ldr	r0, [pc, #396]	@ (800c430 <netif_add+0x278>)
 800c2a2:	f00a fc49 	bl	8016b38 <iprintf>
        num_netifs++;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	2bff      	cmp	r3, #255	@ 0xff
 800c2b0:	dd06      	ble.n	800c2c0 <netif_add+0x108>
 800c2b2:	4b5d      	ldr	r3, [pc, #372]	@ (800c428 <netif_add+0x270>)
 800c2b4:	f240 128d 	movw	r2, #397	@ 0x18d
 800c2b8:	4964      	ldr	r1, [pc, #400]	@ (800c44c <netif_add+0x294>)
 800c2ba:	485d      	ldr	r0, [pc, #372]	@ (800c430 <netif_add+0x278>)
 800c2bc:	f00a fc3c 	bl	8016b38 <iprintf>
        if (netif2->num == netif->num) {
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d108      	bne.n	800c2e2 <netif_add+0x12a>
          netif->num++;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c2e0:	e005      	b.n	800c2ee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	617b      	str	r3, [r7, #20]
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1d0      	bne.n	800c290 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1be      	bne.n	800c272 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2fa:	2bfe      	cmp	r3, #254	@ 0xfe
 800c2fc:	d103      	bne.n	800c306 <netif_add+0x14e>
    netif_num = 0;
 800c2fe:	4b50      	ldr	r3, [pc, #320]	@ (800c440 <netif_add+0x288>)
 800c300:	2200      	movs	r2, #0
 800c302:	701a      	strb	r2, [r3, #0]
 800c304:	e006      	b.n	800c314 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c30c:	3301      	adds	r3, #1
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	4b4b      	ldr	r3, [pc, #300]	@ (800c440 <netif_add+0x288>)
 800c312:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c314:	4b4b      	ldr	r3, [pc, #300]	@ (800c444 <netif_add+0x28c>)
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c31c:	4a49      	ldr	r2, [pc, #292]	@ (800c444 <netif_add+0x28c>)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c328:	4619      	mov	r1, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c330:	461a      	mov	r2, r3
 800c332:	4847      	ldr	r0, [pc, #284]	@ (800c450 <netif_add+0x298>)
 800c334:	f00a fc00 	bl	8016b38 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800c338:	4846      	ldr	r0, [pc, #280]	@ (800c454 <netif_add+0x29c>)
 800c33a:	f00a fbfd 	bl	8016b38 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d003      	beq.n	800c34c <netif_add+0x194>
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	4619      	mov	r1, r3
 800c34a:	e000      	b.n	800c34e <netif_add+0x196>
 800c34c:	2100      	movs	r1, #0
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d004      	beq.n	800c35e <netif_add+0x1a6>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	3301      	adds	r3, #1
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	e000      	b.n	800c360 <netif_add+0x1a8>
 800c35e:	2200      	movs	r2, #0
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d004      	beq.n	800c370 <netif_add+0x1b8>
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	3302      	adds	r3, #2
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	4618      	mov	r0, r3
 800c36e:	e000      	b.n	800c372 <netif_add+0x1ba>
 800c370:	2000      	movs	r0, #0
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d003      	beq.n	800c380 <netif_add+0x1c8>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	3303      	adds	r3, #3
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	e000      	b.n	800c382 <netif_add+0x1ca>
 800c380:	2300      	movs	r3, #0
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	4603      	mov	r3, r0
 800c386:	4834      	ldr	r0, [pc, #208]	@ (800c458 <netif_add+0x2a0>)
 800c388:	f00a fbd6 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800c38c:	4833      	ldr	r0, [pc, #204]	@ (800c45c <netif_add+0x2a4>)
 800c38e:	f00a fbd3 	bl	8016b38 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <netif_add+0x1e8>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	4619      	mov	r1, r3
 800c39e:	e000      	b.n	800c3a2 <netif_add+0x1ea>
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <netif_add+0x1fa>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	e000      	b.n	800c3b4 <netif_add+0x1fc>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d004      	beq.n	800c3c4 <netif_add+0x20c>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	3302      	adds	r3, #2
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	e000      	b.n	800c3c6 <netif_add+0x20e>
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d003      	beq.n	800c3d4 <netif_add+0x21c>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3303      	adds	r3, #3
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	e000      	b.n	800c3d6 <netif_add+0x21e>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	4603      	mov	r3, r0
 800c3da:	481f      	ldr	r0, [pc, #124]	@ (800c458 <netif_add+0x2a0>)
 800c3dc:	f00a fbac 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800c3e0:	481f      	ldr	r0, [pc, #124]	@ (800c460 <netif_add+0x2a8>)
 800c3e2:	f00a fba9 	bl	8016b38 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d003      	beq.n	800c3f4 <netif_add+0x23c>
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	e000      	b.n	800c3f6 <netif_add+0x23e>
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d004      	beq.n	800c406 <netif_add+0x24e>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	3301      	adds	r3, #1
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	e000      	b.n	800c408 <netif_add+0x250>
 800c406:	2200      	movs	r2, #0
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d004      	beq.n	800c418 <netif_add+0x260>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	3302      	adds	r3, #2
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	4618      	mov	r0, r3
 800c416:	e000      	b.n	800c41a <netif_add+0x262>
 800c418:	2000      	movs	r0, #0
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d021      	beq.n	800c464 <netif_add+0x2ac>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	3303      	adds	r3, #3
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	e01e      	b.n	800c466 <netif_add+0x2ae>
 800c428:	08018000 	.word	0x08018000
 800c42c:	08018094 	.word	0x08018094
 800c430:	08018050 	.word	0x08018050
 800c434:	080180b0 	.word	0x080180b0
 800c438:	0801b1f0 	.word	0x0801b1f0
 800c43c:	0800c94f 	.word	0x0800c94f
 800c440:	20008400 	.word	0x20008400
 800c444:	200083f8 	.word	0x200083f8
 800c448:	080180d4 	.word	0x080180d4
 800c44c:	080180e8 	.word	0x080180e8
 800c450:	08018118 	.word	0x08018118
 800c454:	08018138 	.word	0x08018138
 800c458:	08018140 	.word	0x08018140
 800c45c:	08018150 	.word	0x08018150
 800c460:	0801815c 	.word	0x0801815c
 800c464:	2300      	movs	r3, #0
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	4603      	mov	r3, r0
 800c46a:	4805      	ldr	r0, [pc, #20]	@ (800c480 <netif_add+0x2c8>)
 800c46c:	f00a fb64 	bl	8016b38 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800c470:	200a      	movs	r0, #10
 800c472:	f00a fb73 	bl	8016b5c <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c476:	68fb      	ldr	r3, [r7, #12]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	08018140 	.word	0x08018140

0800c484 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f002 fbb9 	bl	800ec08 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f007 f927 	bl	80136ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c49e:	bf00      	nop
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <netif_do_set_ipaddr+0x20>
 800c4ba:	4b1e      	ldr	r3, [pc, #120]	@ (800c534 <netif_do_set_ipaddr+0x8c>)
 800c4bc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c4c0:	491d      	ldr	r1, [pc, #116]	@ (800c538 <netif_do_set_ipaddr+0x90>)
 800c4c2:	481e      	ldr	r0, [pc, #120]	@ (800c53c <netif_do_set_ipaddr+0x94>)
 800c4c4:	f00a fb38 	bl	8016b38 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d106      	bne.n	800c4dc <netif_do_set_ipaddr+0x34>
 800c4ce:	4b19      	ldr	r3, [pc, #100]	@ (800c534 <netif_do_set_ipaddr+0x8c>)
 800c4d0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c4d4:	4918      	ldr	r1, [pc, #96]	@ (800c538 <netif_do_set_ipaddr+0x90>)
 800c4d6:	4819      	ldr	r0, [pc, #100]	@ (800c53c <netif_do_set_ipaddr+0x94>)
 800c4d8:	f00a fb2e 	bl	8016b38 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d01f      	beq.n	800c52a <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800c4fa:	4811      	ldr	r0, [pc, #68]	@ (800c540 <netif_do_set_ipaddr+0x98>)
 800c4fc:	f00a fb8c 	bl	8016c18 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c500:	f107 0314 	add.w	r3, r7, #20
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff ffbc 	bl	800c484 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d002      	beq.n	800c518 <netif_do_set_ipaddr+0x70>
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	e000      	b.n	800c51a <netif_do_set_ipaddr+0x72>
 800c518:	2300      	movs	r3, #0
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c51e:	2101      	movs	r1, #1
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f000 f92d 	bl	800c780 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c526:	2301      	movs	r3, #1
 800c528:	e000      	b.n	800c52c <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	08018000 	.word	0x08018000
 800c538:	08018164 	.word	0x08018164
 800c53c:	08018050 	.word	0x08018050
 800c540:	08018174 	.word	0x08018174

0800c544 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c544:	b5b0      	push	{r4, r5, r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af04      	add	r7, sp, #16
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	3308      	adds	r3, #8
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d02d      	beq.n	800c5ba <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <netif_do_set_netmask+0x26>
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	e000      	b.n	800c56c <netif_do_set_netmask+0x28>
 800c56a:	2300      	movs	r3, #0
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c576:	4618      	mov	r0, r3
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c57e:	461c      	mov	r4, r3
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3308      	adds	r3, #8
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	461d      	mov	r5, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3308      	adds	r3, #8
 800c58c:	3301      	adds	r3, #1
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	461a      	mov	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3308      	adds	r3, #8
 800c596:	3302      	adds	r3, #2
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	4619      	mov	r1, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3308      	adds	r3, #8
 800c5a0:	3303      	adds	r3, #3
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	9302      	str	r3, [sp, #8]
 800c5a6:	9101      	str	r1, [sp, #4]
 800c5a8:	9200      	str	r2, [sp, #0]
 800c5aa:	462b      	mov	r3, r5
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	4804      	ldr	r0, [pc, #16]	@ (800c5c4 <netif_do_set_netmask+0x80>)
 800c5b2:	f00a fac1 	bl	8016b38 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800c5c4:	080181c4 	.word	0x080181c4

0800c5c8 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c5c8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af04      	add	r7, sp, #16
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	330c      	adds	r3, #12
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d02d      	beq.n	800c63e <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <netif_do_set_gw+0x26>
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	e000      	b.n	800c5f0 <netif_do_set_gw+0x28>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c602:	461c      	mov	r4, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	330c      	adds	r3, #12
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	461d      	mov	r5, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	330c      	adds	r3, #12
 800c610:	3301      	adds	r3, #1
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	461a      	mov	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	330c      	adds	r3, #12
 800c61a:	3302      	adds	r3, #2
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	4619      	mov	r1, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	330c      	adds	r3, #12
 800c624:	3303      	adds	r3, #3
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	9302      	str	r3, [sp, #8]
 800c62a:	9101      	str	r1, [sp, #4]
 800c62c:	9200      	str	r2, [sp, #0]
 800c62e:	462b      	mov	r3, r5
 800c630:	4622      	mov	r2, r4
 800c632:	4601      	mov	r1, r0
 800c634:	4804      	ldr	r0, [pc, #16]	@ (800c648 <netif_do_set_gw+0x80>)
 800c636:	f00a fa7f 	bl	8016b38 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c63a:	2301      	movs	r3, #1
 800c63c:	e000      	b.n	800c640 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bdb0      	pop	{r4, r5, r7, pc}
 800c648:	08018224 	.word	0x08018224

0800c64c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c65a:	2300      	movs	r3, #0
 800c65c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d101      	bne.n	800c66c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c668:	4b1c      	ldr	r3, [pc, #112]	@ (800c6dc <netif_set_addr+0x90>)
 800c66a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c672:	4b1a      	ldr	r3, [pc, #104]	@ (800c6dc <netif_set_addr+0x90>)
 800c674:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c67c:	4b17      	ldr	r3, [pc, #92]	@ (800c6dc <netif_set_addr+0x90>)
 800c67e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <netif_set_addr+0x42>
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <netif_set_addr+0x46>
 800c68e:	2301      	movs	r3, #1
 800c690:	e000      	b.n	800c694 <netif_set_addr+0x48>
 800c692:	2300      	movs	r3, #0
 800c694:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d006      	beq.n	800c6aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c69c:	f107 0310 	add.w	r3, r7, #16
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	68b9      	ldr	r1, [r7, #8]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff feff 	bl	800c4a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c6aa:	69fa      	ldr	r2, [r7, #28]
 800c6ac:	6879      	ldr	r1, [r7, #4]
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f7ff ff48 	bl	800c544 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c6b4:	69ba      	ldr	r2, [r7, #24]
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f7ff ff85 	bl	800c5c8 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d106      	bne.n	800c6d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c6c4:	f107 0310 	add.w	r3, r7, #16
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f7ff feeb 	bl	800c4a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c6d2:	bf00      	nop
 800c6d4:	3720      	adds	r7, #32
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	0801b1f0 	.word	0x0801b1f0

0800c6e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c6e8:	4a0d      	ldr	r2, [pc, #52]	@ (800c720 <netif_set_default+0x40>)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d004      	beq.n	800c6fe <netif_set_default+0x1e>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	e000      	b.n	800c700 <netif_set_default+0x20>
 800c6fe:	2127      	movs	r1, #39	@ 0x27
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <netif_set_default+0x2e>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c70c:	e000      	b.n	800c710 <netif_set_default+0x30>
 800c70e:	2327      	movs	r3, #39	@ 0x27
 800c710:	461a      	mov	r2, r3
 800c712:	4804      	ldr	r0, [pc, #16]	@ (800c724 <netif_set_default+0x44>)
 800c714:	f00a fa10 	bl	8016b38 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	200083fc 	.word	0x200083fc
 800c724:	08018298 	.word	0x08018298

0800c728 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d107      	bne.n	800c746 <netif_set_up+0x1e>
 800c736:	4b0f      	ldr	r3, [pc, #60]	@ (800c774 <netif_set_up+0x4c>)
 800c738:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c73c:	490e      	ldr	r1, [pc, #56]	@ (800c778 <netif_set_up+0x50>)
 800c73e:	480f      	ldr	r0, [pc, #60]	@ (800c77c <netif_set_up+0x54>)
 800c740:	f00a f9fa 	bl	8016b38 <iprintf>
 800c744:	e013      	b.n	800c76e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c74c:	f003 0301 	and.w	r3, r3, #1
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10c      	bne.n	800c76e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c75a:	f043 0301 	orr.w	r3, r3, #1
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c766:	2103      	movs	r1, #3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f809 	bl	800c780 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	08018000 	.word	0x08018000
 800c778:	080182c0 	.word	0x080182c0
 800c77c:	08018050 	.word	0x08018050

0800c780 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <netif_issue_reports+0x20>
 800c792:	4b18      	ldr	r3, [pc, #96]	@ (800c7f4 <netif_issue_reports+0x74>)
 800c794:	f240 326d 	movw	r2, #877	@ 0x36d
 800c798:	4917      	ldr	r1, [pc, #92]	@ (800c7f8 <netif_issue_reports+0x78>)
 800c79a:	4818      	ldr	r0, [pc, #96]	@ (800c7fc <netif_issue_reports+0x7c>)
 800c79c:	f00a f9cc 	bl	8016b38 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7a6:	f003 0304 	and.w	r3, r3, #4
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d01e      	beq.n	800c7ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d017      	beq.n	800c7ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c7bc:	78fb      	ldrb	r3, [r7, #3]
 800c7be:	f003 0301 	and.w	r3, r3, #1
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d013      	beq.n	800c7ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00e      	beq.n	800c7ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7d6:	f003 0308 	and.w	r3, r3, #8
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d007      	beq.n	800c7ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f007 ff5d 	bl	80146a4 <etharp_request>
 800c7ea:	e000      	b.n	800c7ee <netif_issue_reports+0x6e>
    return;
 800c7ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	08018000 	.word	0x08018000
 800c7f8:	080182dc 	.word	0x080182dc
 800c7fc:	08018050 	.word	0x08018050

0800c800 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d107      	bne.n	800c81e <netif_set_down+0x1e>
 800c80e:	4b12      	ldr	r3, [pc, #72]	@ (800c858 <netif_set_down+0x58>)
 800c810:	f240 329b 	movw	r2, #923	@ 0x39b
 800c814:	4911      	ldr	r1, [pc, #68]	@ (800c85c <netif_set_down+0x5c>)
 800c816:	4812      	ldr	r0, [pc, #72]	@ (800c860 <netif_set_down+0x60>)
 800c818:	f00a f98e 	bl	8016b38 <iprintf>
 800c81c:	e019      	b.n	800c852 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c824:	f003 0301 	and.w	r3, r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d012      	beq.n	800c852 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c832:	f023 0301 	bic.w	r3, r3, #1
 800c836:	b2da      	uxtb	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c844:	f003 0308 	and.w	r3, r3, #8
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d002      	beq.n	800c852 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f007 fae7 	bl	8013e20 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	08018000 	.word	0x08018000
 800c85c:	08018300 	.word	0x08018300
 800c860:	08018050 	.word	0x08018050

0800c864 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d107      	bne.n	800c882 <netif_set_link_up+0x1e>
 800c872:	4b13      	ldr	r3, [pc, #76]	@ (800c8c0 <netif_set_link_up+0x5c>)
 800c874:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c878:	4912      	ldr	r1, [pc, #72]	@ (800c8c4 <netif_set_link_up+0x60>)
 800c87a:	4813      	ldr	r0, [pc, #76]	@ (800c8c8 <netif_set_link_up+0x64>)
 800c87c:	f00a f95c 	bl	8016b38 <iprintf>
 800c880:	e01b      	b.n	800c8ba <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c888:	f003 0304 	and.w	r3, r3, #4
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d114      	bne.n	800c8ba <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c896:	f043 0304 	orr.w	r3, r3, #4
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c8a2:	2103      	movs	r1, #3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7ff ff6b 	bl	800c780 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <netif_set_link_up+0x56>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	69db      	ldr	r3, [r3, #28]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	08018000 	.word	0x08018000
 800c8c4:	08018320 	.word	0x08018320
 800c8c8:	08018050 	.word	0x08018050

0800c8cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d107      	bne.n	800c8ea <netif_set_link_down+0x1e>
 800c8da:	4b11      	ldr	r3, [pc, #68]	@ (800c920 <netif_set_link_down+0x54>)
 800c8dc:	f240 4206 	movw	r2, #1030	@ 0x406
 800c8e0:	4910      	ldr	r1, [pc, #64]	@ (800c924 <netif_set_link_down+0x58>)
 800c8e2:	4811      	ldr	r0, [pc, #68]	@ (800c928 <netif_set_link_down+0x5c>)
 800c8e4:	f00a f928 	bl	8016b38 <iprintf>
 800c8e8:	e017      	b.n	800c91a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8f0:	f003 0304 	and.w	r3, r3, #4
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d010      	beq.n	800c91a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8fe:	f023 0304 	bic.w	r3, r3, #4
 800c902:	b2da      	uxtb	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d003      	beq.n	800c91a <netif_set_link_down+0x4e>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	08018000 	.word	0x08018000
 800c924:	08018344 	.word	0x08018344
 800c928:	08018050 	.word	0x08018050

0800c92c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	61da      	str	r2, [r3, #28]
  }
}
 800c942:	bf00      	nop
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c94e:	b480      	push	{r7}
 800c950:	b085      	sub	sp, #20
 800c952:	af00      	add	r7, sp, #0
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c95a:	f06f 030b 	mvn.w	r3, #11
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
	...

0800c96c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	4603      	mov	r3, r0
 800c974:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c976:	79fb      	ldrb	r3, [r7, #7]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d013      	beq.n	800c9a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c97c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b4 <netif_get_by_index+0x48>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	60fb      	str	r3, [r7, #12]
 800c982:	e00c      	b.n	800c99e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c98a:	3301      	adds	r3, #1
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	79fa      	ldrb	r2, [r7, #7]
 800c990:	429a      	cmp	r2, r3
 800c992:	d101      	bne.n	800c998 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	e006      	b.n	800c9a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1ef      	bne.n	800c984 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	200083f8 	.word	0x200083f8

0800c9b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c9be:	4b0c      	ldr	r3, [pc, #48]	@ (800c9f0 <pbuf_free_ooseq+0x38>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c9c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c9f4 <pbuf_free_ooseq+0x3c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	607b      	str	r3, [r7, #4]
 800c9ca:	e00a      	b.n	800c9e2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d003      	beq.n	800c9dc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f002 f955 	bl	800ec84 <tcp_free_ooseq>
      return;
 800c9da:	e005      	b.n	800c9e8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	607b      	str	r3, [r7, #4]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1f1      	bne.n	800c9cc <pbuf_free_ooseq+0x14>
    }
  }
}
 800c9e8:	3708      	adds	r7, #8
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	20008401 	.word	0x20008401
 800c9f4:	20008410 	.word	0x20008410

0800c9f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c9fc:	4b03      	ldr	r3, [pc, #12]	@ (800ca0c <pbuf_pool_is_empty+0x14>)
 800c9fe:	2201      	movs	r2, #1
 800ca00:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ca02:	bf00      	nop
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	20008401 	.word	0x20008401

0800ca10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	4611      	mov	r1, r2
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	460b      	mov	r3, r1
 800ca20:	80fb      	strh	r3, [r7, #6]
 800ca22:	4613      	mov	r3, r2
 800ca24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	88fa      	ldrh	r2, [r7, #6]
 800ca36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	88ba      	ldrh	r2, [r7, #4]
 800ca3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ca3e:	8b3b      	ldrh	r3, [r7, #24]
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	7f3a      	ldrb	r2, [r7, #28]
 800ca4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2200      	movs	r2, #0
 800ca56:	73da      	strb	r2, [r3, #15]
}
 800ca58:	bf00      	nop
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08c      	sub	sp, #48	@ 0x30
 800ca68:	af02      	add	r7, sp, #8
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	71fb      	strb	r3, [r7, #7]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	80bb      	strh	r3, [r7, #4]
 800ca72:	4613      	mov	r3, r2
 800ca74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ca7a:	887b      	ldrh	r3, [r7, #2]
 800ca7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ca80:	d07f      	beq.n	800cb82 <pbuf_alloc+0x11e>
 800ca82:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ca86:	f300 80c8 	bgt.w	800cc1a <pbuf_alloc+0x1b6>
 800ca8a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ca8e:	d010      	beq.n	800cab2 <pbuf_alloc+0x4e>
 800ca90:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ca94:	f300 80c1 	bgt.w	800cc1a <pbuf_alloc+0x1b6>
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d002      	beq.n	800caa2 <pbuf_alloc+0x3e>
 800ca9c:	2b41      	cmp	r3, #65	@ 0x41
 800ca9e:	f040 80bc 	bne.w	800cc1a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800caa2:	887a      	ldrh	r2, [r7, #2]
 800caa4:	88bb      	ldrh	r3, [r7, #4]
 800caa6:	4619      	mov	r1, r3
 800caa8:	2000      	movs	r0, #0
 800caaa:	f000 f8d1 	bl	800cc50 <pbuf_alloc_reference>
 800caae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800cab0:	e0bd      	b.n	800cc2e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800caba:	88bb      	ldrh	r3, [r7, #4]
 800cabc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cabe:	2008      	movs	r0, #8
 800cac0:	f7ff fad8 	bl	800c074 <memp_malloc>
 800cac4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d109      	bne.n	800cae0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cacc:	f7ff ff94 	bl	800c9f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <pbuf_alloc+0x78>
            pbuf_free(p);
 800cad6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cad8:	f000 faa8 	bl	800d02c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cadc:	2300      	movs	r3, #0
 800cade:	e0a7      	b.n	800cc30 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cae0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cae2:	3303      	adds	r3, #3
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	f023 0303 	bic.w	r3, r3, #3
 800caea:	b29b      	uxth	r3, r3
 800caec:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	8b7a      	ldrh	r2, [r7, #26]
 800caf4:	4293      	cmp	r3, r2
 800caf6:	bf28      	it	cs
 800caf8:	4613      	movcs	r3, r2
 800cafa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cafc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cafe:	3310      	adds	r3, #16
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	4413      	add	r3, r2
 800cb04:	3303      	adds	r3, #3
 800cb06:	f023 0303 	bic.w	r3, r3, #3
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	89f9      	ldrh	r1, [r7, #14]
 800cb0e:	8b7a      	ldrh	r2, [r7, #26]
 800cb10:	2300      	movs	r3, #0
 800cb12:	9301      	str	r3, [sp, #4]
 800cb14:	887b      	ldrh	r3, [r7, #2]
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	6938      	ldr	r0, [r7, #16]
 800cb1e:	f7ff ff77 	bl	800ca10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f003 0303 	and.w	r3, r3, #3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d006      	beq.n	800cb3c <pbuf_alloc+0xd8>
 800cb2e:	4b42      	ldr	r3, [pc, #264]	@ (800cc38 <pbuf_alloc+0x1d4>)
 800cb30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb34:	4941      	ldr	r1, [pc, #260]	@ (800cc3c <pbuf_alloc+0x1d8>)
 800cb36:	4842      	ldr	r0, [pc, #264]	@ (800cc40 <pbuf_alloc+0x1dc>)
 800cb38:	f009 fffe 	bl	8016b38 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cb3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb3e:	3303      	adds	r3, #3
 800cb40:	f023 0303 	bic.w	r3, r3, #3
 800cb44:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800cb48:	d106      	bne.n	800cb58 <pbuf_alloc+0xf4>
 800cb4a:	4b3b      	ldr	r3, [pc, #236]	@ (800cc38 <pbuf_alloc+0x1d4>)
 800cb4c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800cb50:	493c      	ldr	r1, [pc, #240]	@ (800cc44 <pbuf_alloc+0x1e0>)
 800cb52:	483b      	ldr	r0, [pc, #236]	@ (800cc40 <pbuf_alloc+0x1dc>)
 800cb54:	f009 fff0 	bl	8016b38 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d102      	bne.n	800cb64 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb62:	e002      	b.n	800cb6a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cb6e:	8b7a      	ldrh	r2, [r7, #26]
 800cb70:	89fb      	ldrh	r3, [r7, #14]
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800cb7a:	8b7b      	ldrh	r3, [r7, #26]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d19e      	bne.n	800cabe <pbuf_alloc+0x5a>
      break;
 800cb80:	e055      	b.n	800cc2e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cb82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb84:	3303      	adds	r3, #3
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	f023 0303 	bic.w	r3, r3, #3
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	88bb      	ldrh	r3, [r7, #4]
 800cb90:	3303      	adds	r3, #3
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	f023 0303 	bic.w	r3, r3, #3
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	4413      	add	r3, r2
 800cb9c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cb9e:	8b3b      	ldrh	r3, [r7, #24]
 800cba0:	3310      	adds	r3, #16
 800cba2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cba4:	8b3a      	ldrh	r2, [r7, #24]
 800cba6:	88bb      	ldrh	r3, [r7, #4]
 800cba8:	3303      	adds	r3, #3
 800cbaa:	f023 0303 	bic.w	r3, r3, #3
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d306      	bcc.n	800cbc0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cbb2:	8afa      	ldrh	r2, [r7, #22]
 800cbb4:	88bb      	ldrh	r3, [r7, #4]
 800cbb6:	3303      	adds	r3, #3
 800cbb8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d201      	bcs.n	800cbc4 <pbuf_alloc+0x160>
        return NULL;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	e035      	b.n	800cc30 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cbc4:	8afb      	ldrh	r3, [r7, #22]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7ff f8c4 	bl	800bd54 <mem_malloc>
 800cbcc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800cbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d101      	bne.n	800cbd8 <pbuf_alloc+0x174>
        return NULL;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	e02b      	b.n	800cc30 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cbd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cbda:	3310      	adds	r3, #16
 800cbdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbde:	4413      	add	r3, r2
 800cbe0:	3303      	adds	r3, #3
 800cbe2:	f023 0303 	bic.w	r3, r3, #3
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	88b9      	ldrh	r1, [r7, #4]
 800cbea:	88ba      	ldrh	r2, [r7, #4]
 800cbec:	2300      	movs	r3, #0
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	887b      	ldrh	r3, [r7, #2]
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4601      	mov	r1, r0
 800cbf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbfa:	f7ff ff09 	bl	800ca10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	f003 0303 	and.w	r3, r3, #3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d010      	beq.n	800cc2c <pbuf_alloc+0x1c8>
 800cc0a:	4b0b      	ldr	r3, [pc, #44]	@ (800cc38 <pbuf_alloc+0x1d4>)
 800cc0c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cc10:	490d      	ldr	r1, [pc, #52]	@ (800cc48 <pbuf_alloc+0x1e4>)
 800cc12:	480b      	ldr	r0, [pc, #44]	@ (800cc40 <pbuf_alloc+0x1dc>)
 800cc14:	f009 ff90 	bl	8016b38 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cc18:	e008      	b.n	800cc2c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cc1a:	4b07      	ldr	r3, [pc, #28]	@ (800cc38 <pbuf_alloc+0x1d4>)
 800cc1c:	f240 1227 	movw	r2, #295	@ 0x127
 800cc20:	490a      	ldr	r1, [pc, #40]	@ (800cc4c <pbuf_alloc+0x1e8>)
 800cc22:	4807      	ldr	r0, [pc, #28]	@ (800cc40 <pbuf_alloc+0x1dc>)
 800cc24:	f009 ff88 	bl	8016b38 <iprintf>
      return NULL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e001      	b.n	800cc30 <pbuf_alloc+0x1cc>
      break;
 800cc2c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3728      	adds	r7, #40	@ 0x28
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	080183a0 	.word	0x080183a0
 800cc3c:	080183d0 	.word	0x080183d0
 800cc40:	08018400 	.word	0x08018400
 800cc44:	08018428 	.word	0x08018428
 800cc48:	0801845c 	.word	0x0801845c
 800cc4c:	08018488 	.word	0x08018488

0800cc50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af02      	add	r7, sp, #8
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	807b      	strh	r3, [r7, #2]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cc60:	883b      	ldrh	r3, [r7, #0]
 800cc62:	2b41      	cmp	r3, #65	@ 0x41
 800cc64:	d009      	beq.n	800cc7a <pbuf_alloc_reference+0x2a>
 800cc66:	883b      	ldrh	r3, [r7, #0]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d006      	beq.n	800cc7a <pbuf_alloc_reference+0x2a>
 800cc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ccac <pbuf_alloc_reference+0x5c>)
 800cc6e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cc72:	490f      	ldr	r1, [pc, #60]	@ (800ccb0 <pbuf_alloc_reference+0x60>)
 800cc74:	480f      	ldr	r0, [pc, #60]	@ (800ccb4 <pbuf_alloc_reference+0x64>)
 800cc76:	f009 ff5f 	bl	8016b38 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cc7a:	2007      	movs	r0, #7
 800cc7c:	f7ff f9fa 	bl	800c074 <memp_malloc>
 800cc80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	e00b      	b.n	800cca4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cc8c:	8879      	ldrh	r1, [r7, #2]
 800cc8e:	887a      	ldrh	r2, [r7, #2]
 800cc90:	2300      	movs	r3, #0
 800cc92:	9301      	str	r3, [sp, #4]
 800cc94:	883b      	ldrh	r3, [r7, #0]
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	6879      	ldr	r1, [r7, #4]
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f7ff feb7 	bl	800ca10 <pbuf_init_alloced_pbuf>
  return p;
 800cca2:	68fb      	ldr	r3, [r7, #12]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	080183a0 	.word	0x080183a0
 800ccb0:	080184a4 	.word	0x080184a4
 800ccb4:	08018400 	.word	0x08018400

0800ccb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b088      	sub	sp, #32
 800ccbc:	af02      	add	r7, sp, #8
 800ccbe:	607b      	str	r3, [r7, #4]
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	73fb      	strb	r3, [r7, #15]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	81bb      	strh	r3, [r7, #12]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
 800ccce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ccd0:	8a7b      	ldrh	r3, [r7, #18]
 800ccd2:	3303      	adds	r3, #3
 800ccd4:	f023 0203 	bic.w	r2, r3, #3
 800ccd8:	89bb      	ldrh	r3, [r7, #12]
 800ccda:	441a      	add	r2, r3
 800ccdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d901      	bls.n	800cce6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cce2:	2300      	movs	r3, #0
 800cce4:	e018      	b.n	800cd18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d007      	beq.n	800ccfc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ccec:	8a7b      	ldrh	r3, [r7, #18]
 800ccee:	3303      	adds	r3, #3
 800ccf0:	f023 0303 	bic.w	r3, r3, #3
 800ccf4:	6a3a      	ldr	r2, [r7, #32]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	617b      	str	r3, [r7, #20]
 800ccfa:	e001      	b.n	800cd00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	89b9      	ldrh	r1, [r7, #12]
 800cd04:	89ba      	ldrh	r2, [r7, #12]
 800cd06:	2302      	movs	r3, #2
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	897b      	ldrh	r3, [r7, #10]
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	6979      	ldr	r1, [r7, #20]
 800cd12:	f7ff fe7d 	bl	800ca10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cd16:	687b      	ldr	r3, [r7, #4]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d106      	bne.n	800cd40 <pbuf_realloc+0x20>
 800cd32:	4b3a      	ldr	r3, [pc, #232]	@ (800ce1c <pbuf_realloc+0xfc>)
 800cd34:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800cd38:	4939      	ldr	r1, [pc, #228]	@ (800ce20 <pbuf_realloc+0x100>)
 800cd3a:	483a      	ldr	r0, [pc, #232]	@ (800ce24 <pbuf_realloc+0x104>)
 800cd3c:	f009 fefc 	bl	8016b38 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	891b      	ldrh	r3, [r3, #8]
 800cd44:	887a      	ldrh	r2, [r7, #2]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d263      	bcs.n	800ce12 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	891a      	ldrh	r2, [r3, #8]
 800cd4e:	887b      	ldrh	r3, [r7, #2]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cd54:	887b      	ldrh	r3, [r7, #2]
 800cd56:	817b      	strh	r3, [r7, #10]
  q = p;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cd5c:	e018      	b.n	800cd90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	895b      	ldrh	r3, [r3, #10]
 800cd62:	897a      	ldrh	r2, [r7, #10]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	891a      	ldrh	r2, [r3, #8]
 800cd6c:	893b      	ldrh	r3, [r7, #8]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <pbuf_realloc+0x70>
 800cd82:	4b26      	ldr	r3, [pc, #152]	@ (800ce1c <pbuf_realloc+0xfc>)
 800cd84:	f240 12af 	movw	r2, #431	@ 0x1af
 800cd88:	4927      	ldr	r1, [pc, #156]	@ (800ce28 <pbuf_realloc+0x108>)
 800cd8a:	4826      	ldr	r0, [pc, #152]	@ (800ce24 <pbuf_realloc+0x104>)
 800cd8c:	f009 fed4 	bl	8016b38 <iprintf>
  while (rem_len > q->len) {
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	895b      	ldrh	r3, [r3, #10]
 800cd94:	897a      	ldrh	r2, [r7, #10]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d8e1      	bhi.n	800cd5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	7b1b      	ldrb	r3, [r3, #12]
 800cd9e:	f003 030f 	and.w	r3, r3, #15
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d121      	bne.n	800cdea <pbuf_realloc+0xca>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	895b      	ldrh	r3, [r3, #10]
 800cdaa:	897a      	ldrh	r2, [r7, #10]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d01c      	beq.n	800cdea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	7b5b      	ldrb	r3, [r3, #13]
 800cdb4:	f003 0302 	and.w	r3, r3, #2
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d116      	bne.n	800cdea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	685a      	ldr	r2, [r3, #4]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	897b      	ldrh	r3, [r7, #10]
 800cdc8:	4413      	add	r3, r2
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	4619      	mov	r1, r3
 800cdce:	68f8      	ldr	r0, [r7, #12]
 800cdd0:	f7fe fec4 	bl	800bb5c <mem_trim>
 800cdd4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d106      	bne.n	800cdea <pbuf_realloc+0xca>
 800cddc:	4b0f      	ldr	r3, [pc, #60]	@ (800ce1c <pbuf_realloc+0xfc>)
 800cdde:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cde2:	4912      	ldr	r1, [pc, #72]	@ (800ce2c <pbuf_realloc+0x10c>)
 800cde4:	480f      	ldr	r0, [pc, #60]	@ (800ce24 <pbuf_realloc+0x104>)
 800cde6:	f009 fea7 	bl	8016b38 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	897a      	ldrh	r2, [r7, #10]
 800cdee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	895a      	ldrh	r2, [r3, #10]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d004      	beq.n	800ce0a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 f911 	bl	800d02c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	e000      	b.n	800ce14 <pbuf_realloc+0xf4>
    return;
 800ce12:	bf00      	nop

}
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	080183a0 	.word	0x080183a0
 800ce20:	080184b8 	.word	0x080184b8
 800ce24:	08018400 	.word	0x08018400
 800ce28:	080184d0 	.word	0x080184d0
 800ce2c:	080184e8 	.word	0x080184e8

0800ce30 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d106      	bne.n	800ce52 <pbuf_add_header_impl+0x22>
 800ce44:	4b2b      	ldr	r3, [pc, #172]	@ (800cef4 <pbuf_add_header_impl+0xc4>)
 800ce46:	f240 12df 	movw	r2, #479	@ 0x1df
 800ce4a:	492b      	ldr	r1, [pc, #172]	@ (800cef8 <pbuf_add_header_impl+0xc8>)
 800ce4c:	482b      	ldr	r0, [pc, #172]	@ (800cefc <pbuf_add_header_impl+0xcc>)
 800ce4e:	f009 fe73 	bl	8016b38 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d003      	beq.n	800ce60 <pbuf_add_header_impl+0x30>
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce5e:	d301      	bcc.n	800ce64 <pbuf_add_header_impl+0x34>
    return 1;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e043      	b.n	800ceec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <pbuf_add_header_impl+0x3e>
    return 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e03e      	b.n	800ceec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	891a      	ldrh	r2, [r3, #8]
 800ce76:	8a7b      	ldrh	r3, [r7, #18]
 800ce78:	4413      	add	r3, r2
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	8a7a      	ldrh	r2, [r7, #18]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d901      	bls.n	800ce86 <pbuf_add_header_impl+0x56>
    return 1;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e032      	b.n	800ceec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	7b1b      	ldrb	r3, [r3, #12]
 800ce8a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ce8c:	8a3b      	ldrh	r3, [r7, #16]
 800ce8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00c      	beq.n	800ceb0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	685a      	ldr	r2, [r3, #4]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	425b      	negs	r3, r3
 800ce9e:	4413      	add	r3, r2
 800cea0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3310      	adds	r3, #16
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d20d      	bcs.n	800cec8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e01d      	b.n	800ceec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d006      	beq.n	800cec4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	425b      	negs	r3, r3
 800cebe:	4413      	add	r3, r2
 800cec0:	617b      	str	r3, [r7, #20]
 800cec2:	e001      	b.n	800cec8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e011      	b.n	800ceec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	895a      	ldrh	r2, [r3, #10]
 800ced2:	8a7b      	ldrh	r3, [r7, #18]
 800ced4:	4413      	add	r3, r2
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	891a      	ldrh	r2, [r3, #8]
 800cee0:	8a7b      	ldrh	r3, [r7, #18]
 800cee2:	4413      	add	r3, r2
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	811a      	strh	r2, [r3, #8]


  return 0;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	080183a0 	.word	0x080183a0
 800cef8:	08018504 	.word	0x08018504
 800cefc:	08018400 	.word	0x08018400

0800cf00 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff ff8e 	bl	800ce30 <pbuf_add_header_impl>
 800cf14:	4603      	mov	r3, r0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
	...

0800cf20 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d106      	bne.n	800cf3e <pbuf_remove_header+0x1e>
 800cf30:	4b20      	ldr	r3, [pc, #128]	@ (800cfb4 <pbuf_remove_header+0x94>)
 800cf32:	f240 224b 	movw	r2, #587	@ 0x24b
 800cf36:	4920      	ldr	r1, [pc, #128]	@ (800cfb8 <pbuf_remove_header+0x98>)
 800cf38:	4820      	ldr	r0, [pc, #128]	@ (800cfbc <pbuf_remove_header+0x9c>)
 800cf3a:	f009 fdfd 	bl	8016b38 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d003      	beq.n	800cf4c <pbuf_remove_header+0x2c>
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf4a:	d301      	bcc.n	800cf50 <pbuf_remove_header+0x30>
    return 1;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e02c      	b.n	800cfaa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d101      	bne.n	800cf5a <pbuf_remove_header+0x3a>
    return 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	e027      	b.n	800cfaa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	895b      	ldrh	r3, [r3, #10]
 800cf62:	89fa      	ldrh	r2, [r7, #14]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d908      	bls.n	800cf7a <pbuf_remove_header+0x5a>
 800cf68:	4b12      	ldr	r3, [pc, #72]	@ (800cfb4 <pbuf_remove_header+0x94>)
 800cf6a:	f240 2255 	movw	r2, #597	@ 0x255
 800cf6e:	4914      	ldr	r1, [pc, #80]	@ (800cfc0 <pbuf_remove_header+0xa0>)
 800cf70:	4812      	ldr	r0, [pc, #72]	@ (800cfbc <pbuf_remove_header+0x9c>)
 800cf72:	f009 fde1 	bl	8016b38 <iprintf>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e017      	b.n	800cfaa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	441a      	add	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	895a      	ldrh	r2, [r3, #10]
 800cf90:	89fb      	ldrh	r3, [r7, #14]
 800cf92:	1ad3      	subs	r3, r2, r3
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	891a      	ldrh	r2, [r3, #8]
 800cf9e:	89fb      	ldrh	r3, [r7, #14]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	080183a0 	.word	0x080183a0
 800cfb8:	08018504 	.word	0x08018504
 800cfbc:	08018400 	.word	0x08018400
 800cfc0:	08018510 	.word	0x08018510

0800cfc4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	807b      	strh	r3, [r7, #2]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cfd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	da08      	bge.n	800cfee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cfdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfe0:	425b      	negs	r3, r3
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff ff9b 	bl	800cf20 <pbuf_remove_header>
 800cfea:	4603      	mov	r3, r0
 800cfec:	e007      	b.n	800cffe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cfee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cff2:	787a      	ldrb	r2, [r7, #1]
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7ff ff1a 	bl	800ce30 <pbuf_add_header_impl>
 800cffc:	4603      	mov	r3, r0
  }
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b082      	sub	sp, #8
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	460b      	mov	r3, r1
 800d010:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d012:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d016:	2201      	movs	r2, #1
 800d018:	4619      	mov	r1, r3
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7ff ffd2 	bl	800cfc4 <pbuf_header_impl>
 800d020:	4603      	mov	r3, r0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10b      	bne.n	800d052 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d106      	bne.n	800d04e <pbuf_free+0x22>
 800d040:	4b38      	ldr	r3, [pc, #224]	@ (800d124 <pbuf_free+0xf8>)
 800d042:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d046:	4938      	ldr	r1, [pc, #224]	@ (800d128 <pbuf_free+0xfc>)
 800d048:	4838      	ldr	r0, [pc, #224]	@ (800d12c <pbuf_free+0x100>)
 800d04a:	f009 fd75 	bl	8016b38 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	e063      	b.n	800d11a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d052:	2300      	movs	r3, #0
 800d054:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d056:	e05c      	b.n	800d112 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	7b9b      	ldrb	r3, [r3, #14]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d106      	bne.n	800d06e <pbuf_free+0x42>
 800d060:	4b30      	ldr	r3, [pc, #192]	@ (800d124 <pbuf_free+0xf8>)
 800d062:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d066:	4932      	ldr	r1, [pc, #200]	@ (800d130 <pbuf_free+0x104>)
 800d068:	4830      	ldr	r0, [pc, #192]	@ (800d12c <pbuf_free+0x100>)
 800d06a:	f009 fd65 	bl	8016b38 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	7b9b      	ldrb	r3, [r3, #14]
 800d072:	3b01      	subs	r3, #1
 800d074:	b2da      	uxtb	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	739a      	strb	r2, [r3, #14]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	7b9b      	ldrb	r3, [r3, #14]
 800d07e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d080:	7dbb      	ldrb	r3, [r7, #22]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d143      	bne.n	800d10e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	7b1b      	ldrb	r3, [r3, #12]
 800d090:	f003 030f 	and.w	r3, r3, #15
 800d094:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7b5b      	ldrb	r3, [r3, #13]
 800d09a:	f003 0302 	and.w	r3, r3, #2
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d011      	beq.n	800d0c6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <pbuf_free+0x90>
 800d0ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d124 <pbuf_free+0xf8>)
 800d0b0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d0b4:	491f      	ldr	r1, [pc, #124]	@ (800d134 <pbuf_free+0x108>)
 800d0b6:	481d      	ldr	r0, [pc, #116]	@ (800d12c <pbuf_free+0x100>)
 800d0b8:	f009 fd3e 	bl	8016b38 <iprintf>
        pc->custom_free_function(p);
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	4798      	blx	r3
 800d0c4:	e01d      	b.n	800d102 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d0c6:	7bfb      	ldrb	r3, [r7, #15]
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d104      	bne.n	800d0d6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d0cc:	6879      	ldr	r1, [r7, #4]
 800d0ce:	2008      	movs	r0, #8
 800d0d0:	f7ff f840 	bl	800c154 <memp_free>
 800d0d4:	e015      	b.n	800d102 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d0d6:	7bfb      	ldrb	r3, [r7, #15]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d104      	bne.n	800d0e6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d0dc:	6879      	ldr	r1, [r7, #4]
 800d0de:	2007      	movs	r0, #7
 800d0e0:	f7ff f838 	bl	800c154 <memp_free>
 800d0e4:	e00d      	b.n	800d102 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d103      	bne.n	800d0f4 <pbuf_free+0xc8>
          mem_free(p);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7fe fccb 	bl	800ba88 <mem_free>
 800d0f2:	e006      	b.n	800d102 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d0f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d124 <pbuf_free+0xf8>)
 800d0f6:	f240 320f 	movw	r2, #783	@ 0x30f
 800d0fa:	490f      	ldr	r1, [pc, #60]	@ (800d138 <pbuf_free+0x10c>)
 800d0fc:	480b      	ldr	r0, [pc, #44]	@ (800d12c <pbuf_free+0x100>)
 800d0fe:	f009 fd1b 	bl	8016b38 <iprintf>
        }
      }
      count++;
 800d102:	7dfb      	ldrb	r3, [r7, #23]
 800d104:	3301      	adds	r3, #1
 800d106:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	607b      	str	r3, [r7, #4]
 800d10c:	e001      	b.n	800d112 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d10e:	2300      	movs	r3, #0
 800d110:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d19f      	bne.n	800d058 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d118:	7dfb      	ldrb	r3, [r7, #23]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3718      	adds	r7, #24
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	080183a0 	.word	0x080183a0
 800d128:	08018504 	.word	0x08018504
 800d12c:	08018400 	.word	0x08018400
 800d130:	08018530 	.word	0x08018530
 800d134:	08018548 	.word	0x08018548
 800d138:	0801856c 	.word	0x0801856c

0800d13c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d144:	2300      	movs	r3, #0
 800d146:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d148:	e005      	b.n	800d156 <pbuf_clen+0x1a>
    ++len;
 800d14a:	89fb      	ldrh	r3, [r7, #14]
 800d14c:	3301      	adds	r3, #1
 800d14e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1f6      	bne.n	800d14a <pbuf_clen+0xe>
  }
  return len;
 800d15c:	89fb      	ldrh	r3, [r7, #14]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3714      	adds	r7, #20
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
	...

0800d16c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d010      	beq.n	800d19c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	7b9b      	ldrb	r3, [r3, #14]
 800d17e:	3301      	adds	r3, #1
 800d180:	b2da      	uxtb	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	7b9b      	ldrb	r3, [r3, #14]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d106      	bne.n	800d19c <pbuf_ref+0x30>
 800d18e:	4b05      	ldr	r3, [pc, #20]	@ (800d1a4 <pbuf_ref+0x38>)
 800d190:	f240 3242 	movw	r2, #834	@ 0x342
 800d194:	4904      	ldr	r1, [pc, #16]	@ (800d1a8 <pbuf_ref+0x3c>)
 800d196:	4805      	ldr	r0, [pc, #20]	@ (800d1ac <pbuf_ref+0x40>)
 800d198:	f009 fcce 	bl	8016b38 <iprintf>
  }
}
 800d19c:	bf00      	nop
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	080183a0 	.word	0x080183a0
 800d1a8:	08018580 	.word	0x08018580
 800d1ac:	08018400 	.word	0x08018400

0800d1b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <pbuf_cat+0x16>
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d107      	bne.n	800d1d6 <pbuf_cat+0x26>
 800d1c6:	4b20      	ldr	r3, [pc, #128]	@ (800d248 <pbuf_cat+0x98>)
 800d1c8:	f240 3259 	movw	r2, #857	@ 0x359
 800d1cc:	491f      	ldr	r1, [pc, #124]	@ (800d24c <pbuf_cat+0x9c>)
 800d1ce:	4820      	ldr	r0, [pc, #128]	@ (800d250 <pbuf_cat+0xa0>)
 800d1d0:	f009 fcb2 	bl	8016b38 <iprintf>
 800d1d4:	e034      	b.n	800d240 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	e00a      	b.n	800d1f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	891a      	ldrh	r2, [r3, #8]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	891b      	ldrh	r3, [r3, #8]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60fb      	str	r3, [r7, #12]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1f0      	bne.n	800d1dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	891a      	ldrh	r2, [r3, #8]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	895b      	ldrh	r3, [r3, #10]
 800d202:	429a      	cmp	r2, r3
 800d204:	d006      	beq.n	800d214 <pbuf_cat+0x64>
 800d206:	4b10      	ldr	r3, [pc, #64]	@ (800d248 <pbuf_cat+0x98>)
 800d208:	f240 3262 	movw	r2, #866	@ 0x362
 800d20c:	4911      	ldr	r1, [pc, #68]	@ (800d254 <pbuf_cat+0xa4>)
 800d20e:	4810      	ldr	r0, [pc, #64]	@ (800d250 <pbuf_cat+0xa0>)
 800d210:	f009 fc92 	bl	8016b38 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d006      	beq.n	800d22a <pbuf_cat+0x7a>
 800d21c:	4b0a      	ldr	r3, [pc, #40]	@ (800d248 <pbuf_cat+0x98>)
 800d21e:	f240 3263 	movw	r2, #867	@ 0x363
 800d222:	490d      	ldr	r1, [pc, #52]	@ (800d258 <pbuf_cat+0xa8>)
 800d224:	480a      	ldr	r0, [pc, #40]	@ (800d250 <pbuf_cat+0xa0>)
 800d226:	f009 fc87 	bl	8016b38 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	891a      	ldrh	r2, [r3, #8]
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	891b      	ldrh	r3, [r3, #8]
 800d232:	4413      	add	r3, r2
 800d234:	b29a      	uxth	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	080183a0 	.word	0x080183a0
 800d24c:	08018594 	.word	0x08018594
 800d250:	08018400 	.word	0x08018400
 800d254:	080185cc 	.word	0x080185cc
 800d258:	080185fc 	.word	0x080185fc

0800d25c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7ff ffa1 	bl	800d1b0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d26e:	6838      	ldr	r0, [r7, #0]
 800d270:	f7ff ff7c 	bl	800d16c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d286:	2300      	movs	r3, #0
 800d288:	617b      	str	r3, [r7, #20]
 800d28a:	2300      	movs	r3, #0
 800d28c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d008      	beq.n	800d2a6 <pbuf_copy+0x2a>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d005      	beq.n	800d2a6 <pbuf_copy+0x2a>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	891a      	ldrh	r2, [r3, #8]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	891b      	ldrh	r3, [r3, #8]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d209      	bcs.n	800d2ba <pbuf_copy+0x3e>
 800d2a6:	4b57      	ldr	r3, [pc, #348]	@ (800d404 <pbuf_copy+0x188>)
 800d2a8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d2ac:	4956      	ldr	r1, [pc, #344]	@ (800d408 <pbuf_copy+0x18c>)
 800d2ae:	4857      	ldr	r0, [pc, #348]	@ (800d40c <pbuf_copy+0x190>)
 800d2b0:	f009 fc42 	bl	8016b38 <iprintf>
 800d2b4:	f06f 030f 	mvn.w	r3, #15
 800d2b8:	e09f      	b.n	800d3fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	895b      	ldrh	r3, [r3, #10]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	1ad2      	subs	r2, r2, r3
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	895b      	ldrh	r3, [r3, #10]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	1acb      	subs	r3, r1, r3
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d306      	bcc.n	800d2e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	895b      	ldrh	r3, [r3, #10]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	60fb      	str	r3, [r7, #12]
 800d2de:	e005      	b.n	800d2ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	895b      	ldrh	r3, [r3, #10]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	18d0      	adds	r0, r2, r3
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	685a      	ldr	r2, [r3, #4]
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4619      	mov	r1, r3
 800d300:	f009 fdef 	bl	8016ee2 <memcpy>
    offset_to += len;
 800d304:	697a      	ldr	r2, [r7, #20]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	4413      	add	r3, r2
 800d30a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	4413      	add	r3, r2
 800d312:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	895b      	ldrh	r3, [r3, #10]
 800d318:	461a      	mov	r2, r3
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d906      	bls.n	800d32e <pbuf_copy+0xb2>
 800d320:	4b38      	ldr	r3, [pc, #224]	@ (800d404 <pbuf_copy+0x188>)
 800d322:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d326:	493a      	ldr	r1, [pc, #232]	@ (800d410 <pbuf_copy+0x194>)
 800d328:	4838      	ldr	r0, [pc, #224]	@ (800d40c <pbuf_copy+0x190>)
 800d32a:	f009 fc05 	bl	8016b38 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	895b      	ldrh	r3, [r3, #10]
 800d332:	461a      	mov	r2, r3
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	4293      	cmp	r3, r2
 800d338:	d906      	bls.n	800d348 <pbuf_copy+0xcc>
 800d33a:	4b32      	ldr	r3, [pc, #200]	@ (800d404 <pbuf_copy+0x188>)
 800d33c:	f240 32da 	movw	r2, #986	@ 0x3da
 800d340:	4934      	ldr	r1, [pc, #208]	@ (800d414 <pbuf_copy+0x198>)
 800d342:	4832      	ldr	r0, [pc, #200]	@ (800d40c <pbuf_copy+0x190>)
 800d344:	f009 fbf8 	bl	8016b38 <iprintf>
    if (offset_from >= p_from->len) {
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	895b      	ldrh	r3, [r3, #10]
 800d34c:	461a      	mov	r2, r3
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	4293      	cmp	r3, r2
 800d352:	d304      	bcc.n	800d35e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	895b      	ldrh	r3, [r3, #10]
 800d362:	461a      	mov	r2, r3
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	4293      	cmp	r3, r2
 800d368:	d114      	bne.n	800d394 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10c      	bne.n	800d394 <pbuf_copy+0x118>
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d009      	beq.n	800d394 <pbuf_copy+0x118>
 800d380:	4b20      	ldr	r3, [pc, #128]	@ (800d404 <pbuf_copy+0x188>)
 800d382:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d386:	4924      	ldr	r1, [pc, #144]	@ (800d418 <pbuf_copy+0x19c>)
 800d388:	4820      	ldr	r0, [pc, #128]	@ (800d40c <pbuf_copy+0x190>)
 800d38a:	f009 fbd5 	bl	8016b38 <iprintf>
 800d38e:	f06f 030f 	mvn.w	r3, #15
 800d392:	e032      	b.n	800d3fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d013      	beq.n	800d3c2 <pbuf_copy+0x146>
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	895a      	ldrh	r2, [r3, #10]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	891b      	ldrh	r3, [r3, #8]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d10d      	bne.n	800d3c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d009      	beq.n	800d3c2 <pbuf_copy+0x146>
 800d3ae:	4b15      	ldr	r3, [pc, #84]	@ (800d404 <pbuf_copy+0x188>)
 800d3b0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d3b4:	4919      	ldr	r1, [pc, #100]	@ (800d41c <pbuf_copy+0x1a0>)
 800d3b6:	4815      	ldr	r0, [pc, #84]	@ (800d40c <pbuf_copy+0x190>)
 800d3b8:	f009 fbbe 	bl	8016b38 <iprintf>
 800d3bc:	f06f 0305 	mvn.w	r3, #5
 800d3c0:	e01b      	b.n	800d3fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d013      	beq.n	800d3f0 <pbuf_copy+0x174>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	895a      	ldrh	r2, [r3, #10]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	891b      	ldrh	r3, [r3, #8]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d10d      	bne.n	800d3f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d009      	beq.n	800d3f0 <pbuf_copy+0x174>
 800d3dc:	4b09      	ldr	r3, [pc, #36]	@ (800d404 <pbuf_copy+0x188>)
 800d3de:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d3e2:	490e      	ldr	r1, [pc, #56]	@ (800d41c <pbuf_copy+0x1a0>)
 800d3e4:	4809      	ldr	r0, [pc, #36]	@ (800d40c <pbuf_copy+0x190>)
 800d3e6:	f009 fba7 	bl	8016b38 <iprintf>
 800d3ea:	f06f 0305 	mvn.w	r3, #5
 800d3ee:	e004      	b.n	800d3fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f47f af61 	bne.w	800d2ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3718      	adds	r7, #24
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	080183a0 	.word	0x080183a0
 800d408:	08018648 	.word	0x08018648
 800d40c:	08018400 	.word	0x08018400
 800d410:	08018678 	.word	0x08018678
 800d414:	08018690 	.word	0x08018690
 800d418:	080186ac 	.word	0x080186ac
 800d41c:	080186bc 	.word	0x080186bc

0800d420 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b088      	sub	sp, #32
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	4611      	mov	r1, r2
 800d42c:	461a      	mov	r2, r3
 800d42e:	460b      	mov	r3, r1
 800d430:	80fb      	strh	r3, [r7, #6]
 800d432:	4613      	mov	r3, r2
 800d434:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d108      	bne.n	800d456 <pbuf_copy_partial+0x36>
 800d444:	4b2b      	ldr	r3, [pc, #172]	@ (800d4f4 <pbuf_copy_partial+0xd4>)
 800d446:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d44a:	492b      	ldr	r1, [pc, #172]	@ (800d4f8 <pbuf_copy_partial+0xd8>)
 800d44c:	482b      	ldr	r0, [pc, #172]	@ (800d4fc <pbuf_copy_partial+0xdc>)
 800d44e:	f009 fb73 	bl	8016b38 <iprintf>
 800d452:	2300      	movs	r3, #0
 800d454:	e04a      	b.n	800d4ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d108      	bne.n	800d46e <pbuf_copy_partial+0x4e>
 800d45c:	4b25      	ldr	r3, [pc, #148]	@ (800d4f4 <pbuf_copy_partial+0xd4>)
 800d45e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d462:	4927      	ldr	r1, [pc, #156]	@ (800d500 <pbuf_copy_partial+0xe0>)
 800d464:	4825      	ldr	r0, [pc, #148]	@ (800d4fc <pbuf_copy_partial+0xdc>)
 800d466:	f009 fb67 	bl	8016b38 <iprintf>
 800d46a:	2300      	movs	r3, #0
 800d46c:	e03e      	b.n	800d4ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	61fb      	str	r3, [r7, #28]
 800d472:	e034      	b.n	800d4de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d474:	88bb      	ldrh	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <pbuf_copy_partial+0x70>
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	895b      	ldrh	r3, [r3, #10]
 800d47e:	88ba      	ldrh	r2, [r7, #4]
 800d480:	429a      	cmp	r2, r3
 800d482:	d305      	bcc.n	800d490 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	895b      	ldrh	r3, [r3, #10]
 800d488:	88ba      	ldrh	r2, [r7, #4]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	80bb      	strh	r3, [r7, #4]
 800d48e:	e023      	b.n	800d4d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	895a      	ldrh	r2, [r3, #10]
 800d494:	88bb      	ldrh	r3, [r7, #4]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d49a:	8b3a      	ldrh	r2, [r7, #24]
 800d49c:	88fb      	ldrh	r3, [r7, #6]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d901      	bls.n	800d4a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d4a2:	88fb      	ldrh	r3, [r7, #6]
 800d4a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d4a6:	8b7b      	ldrh	r3, [r7, #26]
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	18d0      	adds	r0, r2, r3
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	88bb      	ldrh	r3, [r7, #4]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	8b3a      	ldrh	r2, [r7, #24]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f009 fd13 	bl	8016ee2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d4bc:	8afa      	ldrh	r2, [r7, #22]
 800d4be:	8b3b      	ldrh	r3, [r7, #24]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d4c4:	8b7a      	ldrh	r2, [r7, #26]
 800d4c6:	8b3b      	ldrh	r3, [r7, #24]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d4cc:	88fa      	ldrh	r2, [r7, #6]
 800d4ce:	8b3b      	ldrh	r3, [r7, #24]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	61fb      	str	r3, [r7, #28]
 800d4de:	88fb      	ldrh	r3, [r7, #6]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d002      	beq.n	800d4ea <pbuf_copy_partial+0xca>
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1c4      	bne.n	800d474 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d4ea:	8afb      	ldrh	r3, [r7, #22]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3720      	adds	r7, #32
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	080183a0 	.word	0x080183a0
 800d4f8:	080186e8 	.word	0x080186e8
 800d4fc:	08018400 	.word	0x08018400
 800d500:	08018708 	.word	0x08018708

0800d504 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	4603      	mov	r3, r0
 800d50c:	603a      	str	r2, [r7, #0]
 800d50e:	71fb      	strb	r3, [r7, #7]
 800d510:	460b      	mov	r3, r1
 800d512:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	8919      	ldrh	r1, [r3, #8]
 800d518:	88ba      	ldrh	r2, [r7, #4]
 800d51a:	79fb      	ldrb	r3, [r7, #7]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff faa1 	bl	800ca64 <pbuf_alloc>
 800d522:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <pbuf_clone+0x2a>
    return NULL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	e011      	b.n	800d552 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f7ff fea3 	bl	800d27c <pbuf_copy>
 800d536:	4603      	mov	r3, r0
 800d538:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d53a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d006      	beq.n	800d550 <pbuf_clone+0x4c>
 800d542:	4b06      	ldr	r3, [pc, #24]	@ (800d55c <pbuf_clone+0x58>)
 800d544:	f240 5224 	movw	r2, #1316	@ 0x524
 800d548:	4905      	ldr	r1, [pc, #20]	@ (800d560 <pbuf_clone+0x5c>)
 800d54a:	4806      	ldr	r0, [pc, #24]	@ (800d564 <pbuf_clone+0x60>)
 800d54c:	f009 faf4 	bl	8016b38 <iprintf>
  return q;
 800d550:	68fb      	ldr	r3, [r7, #12]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	080183a0 	.word	0x080183a0
 800d560:	08018814 	.word	0x08018814
 800d564:	08018400 	.word	0x08018400

0800d568 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d56c:	f009 f9e4 	bl	8016938 <rand>
 800d570:	4603      	mov	r3, r0
 800d572:	b29b      	uxth	r3, r3
 800d574:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d578:	b29b      	uxth	r3, r3
 800d57a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d57e:	b29a      	uxth	r2, r3
 800d580:	4b01      	ldr	r3, [pc, #4]	@ (800d588 <tcp_init+0x20>)
 800d582:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d584:	bf00      	nop
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20000064 	.word	0x20000064

0800d58c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	7d1b      	ldrb	r3, [r3, #20]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d105      	bne.n	800d5a8 <tcp_free+0x1c>
 800d59c:	4b06      	ldr	r3, [pc, #24]	@ (800d5b8 <tcp_free+0x2c>)
 800d59e:	22d4      	movs	r2, #212	@ 0xd4
 800d5a0:	4906      	ldr	r1, [pc, #24]	@ (800d5bc <tcp_free+0x30>)
 800d5a2:	4807      	ldr	r0, [pc, #28]	@ (800d5c0 <tcp_free+0x34>)
 800d5a4:	f009 fac8 	bl	8016b38 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	f7fe fdd2 	bl	800c154 <memp_free>
}
 800d5b0:	bf00      	nop
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	080188a0 	.word	0x080188a0
 800d5bc:	080188d0 	.word	0x080188d0
 800d5c0:	080188e4 	.word	0x080188e4

0800d5c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	7d1b      	ldrb	r3, [r3, #20]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d105      	bne.n	800d5e0 <tcp_free_listen+0x1c>
 800d5d4:	4b06      	ldr	r3, [pc, #24]	@ (800d5f0 <tcp_free_listen+0x2c>)
 800d5d6:	22df      	movs	r2, #223	@ 0xdf
 800d5d8:	4906      	ldr	r1, [pc, #24]	@ (800d5f4 <tcp_free_listen+0x30>)
 800d5da:	4807      	ldr	r0, [pc, #28]	@ (800d5f8 <tcp_free_listen+0x34>)
 800d5dc:	f009 faac 	bl	8016b38 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d5e0:	6879      	ldr	r1, [r7, #4]
 800d5e2:	2002      	movs	r0, #2
 800d5e4:	f7fe fdb6 	bl	800c154 <memp_free>
}
 800d5e8:	bf00      	nop
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	080188a0 	.word	0x080188a0
 800d5f4:	0801890c 	.word	0x0801890c
 800d5f8:	080188e4 	.word	0x080188e4

0800d5fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d600:	f000 fea4 	bl	800e34c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d604:	4b07      	ldr	r3, [pc, #28]	@ (800d624 <tcp_tmr+0x28>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	3301      	adds	r3, #1
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	4b05      	ldr	r3, [pc, #20]	@ (800d624 <tcp_tmr+0x28>)
 800d60e:	701a      	strb	r2, [r3, #0]
 800d610:	4b04      	ldr	r3, [pc, #16]	@ (800d624 <tcp_tmr+0x28>)
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	f003 0301 	and.w	r3, r3, #1
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d61c:	f000 fb54 	bl	800dcc8 <tcp_slowtmr>
  }
}
 800d620:	bf00      	nop
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20008419 	.word	0x20008419

0800d628 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d105      	bne.n	800d644 <tcp_remove_listener+0x1c>
 800d638:	4b0d      	ldr	r3, [pc, #52]	@ (800d670 <tcp_remove_listener+0x48>)
 800d63a:	22ff      	movs	r2, #255	@ 0xff
 800d63c:	490d      	ldr	r1, [pc, #52]	@ (800d674 <tcp_remove_listener+0x4c>)
 800d63e:	480e      	ldr	r0, [pc, #56]	@ (800d678 <tcp_remove_listener+0x50>)
 800d640:	f009 fa7a 	bl	8016b38 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e00a      	b.n	800d660 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d102      	bne.n	800d65a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2200      	movs	r2, #0
 800d658:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	60fb      	str	r3, [r7, #12]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1f1      	bne.n	800d64a <tcp_remove_listener+0x22>
    }
  }
}
 800d666:	bf00      	nop
 800d668:	bf00      	nop
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	080188a0 	.word	0x080188a0
 800d674:	08018928 	.word	0x08018928
 800d678:	080188e4 	.word	0x080188e4

0800d67c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d106      	bne.n	800d698 <tcp_listen_closed+0x1c>
 800d68a:	4b14      	ldr	r3, [pc, #80]	@ (800d6dc <tcp_listen_closed+0x60>)
 800d68c:	f240 1211 	movw	r2, #273	@ 0x111
 800d690:	4913      	ldr	r1, [pc, #76]	@ (800d6e0 <tcp_listen_closed+0x64>)
 800d692:	4814      	ldr	r0, [pc, #80]	@ (800d6e4 <tcp_listen_closed+0x68>)
 800d694:	f009 fa50 	bl	8016b38 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7d1b      	ldrb	r3, [r3, #20]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d006      	beq.n	800d6ae <tcp_listen_closed+0x32>
 800d6a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d6dc <tcp_listen_closed+0x60>)
 800d6a2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d6a6:	4910      	ldr	r1, [pc, #64]	@ (800d6e8 <tcp_listen_closed+0x6c>)
 800d6a8:	480e      	ldr	r0, [pc, #56]	@ (800d6e4 <tcp_listen_closed+0x68>)
 800d6aa:	f009 fa45 	bl	8016b38 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	60fb      	str	r3, [r7, #12]
 800d6b2:	e00b      	b.n	800d6cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d6b4:	4a0d      	ldr	r2, [pc, #52]	@ (800d6ec <tcp_listen_closed+0x70>)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	6879      	ldr	r1, [r7, #4]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff ffb1 	bl	800d628 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d9f0      	bls.n	800d6b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	080188a0 	.word	0x080188a0
 800d6e0:	08018950 	.word	0x08018950
 800d6e4:	080188e4 	.word	0x080188e4
 800d6e8:	0801895c 	.word	0x0801895c
 800d6ec:	0801b1c8 	.word	0x0801b1c8

0800d6f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d6f0:	b5b0      	push	{r4, r5, r7, lr}
 800d6f2:	b088      	sub	sp, #32
 800d6f4:	af04      	add	r7, sp, #16
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d106      	bne.n	800d710 <tcp_close_shutdown+0x20>
 800d702:	4b63      	ldr	r3, [pc, #396]	@ (800d890 <tcp_close_shutdown+0x1a0>)
 800d704:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d708:	4962      	ldr	r1, [pc, #392]	@ (800d894 <tcp_close_shutdown+0x1a4>)
 800d70a:	4863      	ldr	r0, [pc, #396]	@ (800d898 <tcp_close_shutdown+0x1a8>)
 800d70c:	f009 fa14 	bl	8016b38 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d066      	beq.n	800d7e4 <tcp_close_shutdown+0xf4>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	7d1b      	ldrb	r3, [r3, #20]
 800d71a:	2b04      	cmp	r3, #4
 800d71c:	d003      	beq.n	800d726 <tcp_close_shutdown+0x36>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	7d1b      	ldrb	r3, [r3, #20]
 800d722:	2b07      	cmp	r3, #7
 800d724:	d15e      	bne.n	800d7e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d104      	bne.n	800d738 <tcp_close_shutdown+0x48>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d732:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d736:	d055      	beq.n	800d7e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	8b5b      	ldrh	r3, [r3, #26]
 800d73c:	f003 0310 	and.w	r3, r3, #16
 800d740:	2b00      	cmp	r3, #0
 800d742:	d106      	bne.n	800d752 <tcp_close_shutdown+0x62>
 800d744:	4b52      	ldr	r3, [pc, #328]	@ (800d890 <tcp_close_shutdown+0x1a0>)
 800d746:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d74a:	4954      	ldr	r1, [pc, #336]	@ (800d89c <tcp_close_shutdown+0x1ac>)
 800d74c:	4852      	ldr	r0, [pc, #328]	@ (800d898 <tcp_close_shutdown+0x1a8>)
 800d74e:	f009 f9f3 	bl	8016b38 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d75a:	687d      	ldr	r5, [r7, #4]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3304      	adds	r3, #4
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	8ad2      	ldrh	r2, [r2, #22]
 800d764:	6879      	ldr	r1, [r7, #4]
 800d766:	8b09      	ldrh	r1, [r1, #24]
 800d768:	9102      	str	r1, [sp, #8]
 800d76a:	9201      	str	r2, [sp, #4]
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	462b      	mov	r3, r5
 800d770:	4622      	mov	r2, r4
 800d772:	4601      	mov	r1, r0
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f004 fea7 	bl	80124c8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f001 f8c8 	bl	800e910 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d780:	4b47      	ldr	r3, [pc, #284]	@ (800d8a0 <tcp_close_shutdown+0x1b0>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	429a      	cmp	r2, r3
 800d788:	d105      	bne.n	800d796 <tcp_close_shutdown+0xa6>
 800d78a:	4b45      	ldr	r3, [pc, #276]	@ (800d8a0 <tcp_close_shutdown+0x1b0>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	4a43      	ldr	r2, [pc, #268]	@ (800d8a0 <tcp_close_shutdown+0x1b0>)
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	e013      	b.n	800d7be <tcp_close_shutdown+0xce>
 800d796:	4b42      	ldr	r3, [pc, #264]	@ (800d8a0 <tcp_close_shutdown+0x1b0>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	60fb      	str	r3, [r7, #12]
 800d79c:	e00c      	b.n	800d7b8 <tcp_close_shutdown+0xc8>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d104      	bne.n	800d7b2 <tcp_close_shutdown+0xc2>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	68da      	ldr	r2, [r3, #12]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	60da      	str	r2, [r3, #12]
 800d7b0:	e005      	b.n	800d7be <tcp_close_shutdown+0xce>
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1ef      	bne.n	800d79e <tcp_close_shutdown+0xae>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	60da      	str	r2, [r3, #12]
 800d7c4:	4b37      	ldr	r3, [pc, #220]	@ (800d8a4 <tcp_close_shutdown+0x1b4>)
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d7ca:	4b37      	ldr	r3, [pc, #220]	@ (800d8a8 <tcp_close_shutdown+0x1b8>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d102      	bne.n	800d7da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d7d4:	f003 fd62 	bl	801129c <tcp_trigger_input_pcb_close>
 800d7d8:	e002      	b.n	800d7e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff fed6 	bl	800d58c <tcp_free>
      }
      return ERR_OK;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	e050      	b.n	800d886 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	7d1b      	ldrb	r3, [r3, #20]
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d03b      	beq.n	800d864 <tcp_close_shutdown+0x174>
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	dc44      	bgt.n	800d87a <tcp_close_shutdown+0x18a>
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <tcp_close_shutdown+0x10a>
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d02a      	beq.n	800d84e <tcp_close_shutdown+0x15e>
 800d7f8:	e03f      	b.n	800d87a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	8adb      	ldrh	r3, [r3, #22]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d021      	beq.n	800d846 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d802:	4b2a      	ldr	r3, [pc, #168]	@ (800d8ac <tcp_close_shutdown+0x1bc>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d105      	bne.n	800d818 <tcp_close_shutdown+0x128>
 800d80c:	4b27      	ldr	r3, [pc, #156]	@ (800d8ac <tcp_close_shutdown+0x1bc>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	4a26      	ldr	r2, [pc, #152]	@ (800d8ac <tcp_close_shutdown+0x1bc>)
 800d814:	6013      	str	r3, [r2, #0]
 800d816:	e013      	b.n	800d840 <tcp_close_shutdown+0x150>
 800d818:	4b24      	ldr	r3, [pc, #144]	@ (800d8ac <tcp_close_shutdown+0x1bc>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	60bb      	str	r3, [r7, #8]
 800d81e:	e00c      	b.n	800d83a <tcp_close_shutdown+0x14a>
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	429a      	cmp	r2, r3
 800d828:	d104      	bne.n	800d834 <tcp_close_shutdown+0x144>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68da      	ldr	r2, [r3, #12]
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	60da      	str	r2, [r3, #12]
 800d832:	e005      	b.n	800d840 <tcp_close_shutdown+0x150>
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	60bb      	str	r3, [r7, #8]
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1ef      	bne.n	800d820 <tcp_close_shutdown+0x130>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff fea0 	bl	800d58c <tcp_free>
      break;
 800d84c:	e01a      	b.n	800d884 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7ff ff14 	bl	800d67c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d854:	6879      	ldr	r1, [r7, #4]
 800d856:	4816      	ldr	r0, [pc, #88]	@ (800d8b0 <tcp_close_shutdown+0x1c0>)
 800d858:	f001 f8aa 	bl	800e9b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7ff feb1 	bl	800d5c4 <tcp_free_listen>
      break;
 800d862:	e00f      	b.n	800d884 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d864:	6879      	ldr	r1, [r7, #4]
 800d866:	480e      	ldr	r0, [pc, #56]	@ (800d8a0 <tcp_close_shutdown+0x1b0>)
 800d868:	f001 f8a2 	bl	800e9b0 <tcp_pcb_remove>
 800d86c:	4b0d      	ldr	r3, [pc, #52]	@ (800d8a4 <tcp_close_shutdown+0x1b4>)
 800d86e:	2201      	movs	r2, #1
 800d870:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7ff fe8a 	bl	800d58c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d878:	e004      	b.n	800d884 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f81a 	bl	800d8b4 <tcp_close_shutdown_fin>
 800d880:	4603      	mov	r3, r0
 800d882:	e000      	b.n	800d886 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bdb0      	pop	{r4, r5, r7, pc}
 800d88e:	bf00      	nop
 800d890:	080188a0 	.word	0x080188a0
 800d894:	08018974 	.word	0x08018974
 800d898:	080188e4 	.word	0x080188e4
 800d89c:	08018994 	.word	0x08018994
 800d8a0:	20008410 	.word	0x20008410
 800d8a4:	20008418 	.word	0x20008418
 800d8a8:	20008454 	.word	0x20008454
 800d8ac:	20008408 	.word	0x20008408
 800d8b0:	2000840c 	.word	0x2000840c

0800d8b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d106      	bne.n	800d8d0 <tcp_close_shutdown_fin+0x1c>
 800d8c2:	4b2e      	ldr	r3, [pc, #184]	@ (800d97c <tcp_close_shutdown_fin+0xc8>)
 800d8c4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d8c8:	492d      	ldr	r1, [pc, #180]	@ (800d980 <tcp_close_shutdown_fin+0xcc>)
 800d8ca:	482e      	ldr	r0, [pc, #184]	@ (800d984 <tcp_close_shutdown_fin+0xd0>)
 800d8cc:	f009 f934 	bl	8016b38 <iprintf>

  switch (pcb->state) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	7d1b      	ldrb	r3, [r3, #20]
 800d8d4:	2b07      	cmp	r3, #7
 800d8d6:	d020      	beq.n	800d91a <tcp_close_shutdown_fin+0x66>
 800d8d8:	2b07      	cmp	r3, #7
 800d8da:	dc2b      	bgt.n	800d934 <tcp_close_shutdown_fin+0x80>
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d002      	beq.n	800d8e6 <tcp_close_shutdown_fin+0x32>
 800d8e0:	2b04      	cmp	r3, #4
 800d8e2:	d00d      	beq.n	800d900 <tcp_close_shutdown_fin+0x4c>
 800d8e4:	e026      	b.n	800d934 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f003 fef0 	bl	80116cc <tcp_send_fin>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d11f      	bne.n	800d938 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2205      	movs	r2, #5
 800d8fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8fe:	e01b      	b.n	800d938 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f003 fee3 	bl	80116cc <tcp_send_fin>
 800d906:	4603      	mov	r3, r0
 800d908:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d114      	bne.n	800d93c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2205      	movs	r2, #5
 800d916:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d918:	e010      	b.n	800d93c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f003 fed6 	bl	80116cc <tcp_send_fin>
 800d920:	4603      	mov	r3, r0
 800d922:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d109      	bne.n	800d940 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2209      	movs	r2, #9
 800d930:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d932:	e005      	b.n	800d940 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d934:	2300      	movs	r3, #0
 800d936:	e01c      	b.n	800d972 <tcp_close_shutdown_fin+0xbe>
      break;
 800d938:	bf00      	nop
 800d93a:	e002      	b.n	800d942 <tcp_close_shutdown_fin+0x8e>
      break;
 800d93c:	bf00      	nop
 800d93e:	e000      	b.n	800d942 <tcp_close_shutdown_fin+0x8e>
      break;
 800d940:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d103      	bne.n	800d952 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f003 fffc 	bl	8011948 <tcp_output>
 800d950:	e00d      	b.n	800d96e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d95a:	d108      	bne.n	800d96e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	8b5b      	ldrh	r3, [r3, #26]
 800d960:	f043 0308 	orr.w	r3, r3, #8
 800d964:	b29a      	uxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	e001      	b.n	800d972 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	080188a0 	.word	0x080188a0
 800d980:	08018950 	.word	0x08018950
 800d984:	080188e4 	.word	0x080188e4

0800d988 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d109      	bne.n	800d9aa <tcp_close+0x22>
 800d996:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d4 <tcp_close+0x4c>)
 800d998:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d99c:	490e      	ldr	r1, [pc, #56]	@ (800d9d8 <tcp_close+0x50>)
 800d99e:	480f      	ldr	r0, [pc, #60]	@ (800d9dc <tcp_close+0x54>)
 800d9a0:	f009 f8ca 	bl	8016b38 <iprintf>
 800d9a4:	f06f 030f 	mvn.w	r3, #15
 800d9a8:	e00f      	b.n	800d9ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	7d1b      	ldrb	r3, [r3, #20]
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d006      	beq.n	800d9c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	8b5b      	ldrh	r3, [r3, #26]
 800d9b6:	f043 0310 	orr.w	r3, r3, #16
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff fe94 	bl	800d6f0 <tcp_close_shutdown>
 800d9c8:	4603      	mov	r3, r0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	080188a0 	.word	0x080188a0
 800d9d8:	080189b0 	.word	0x080189b0
 800d9dc:	080188e4 	.word	0x080188e4

0800d9e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b08e      	sub	sp, #56	@ 0x38
 800d9e4:	af04      	add	r7, sp, #16
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d107      	bne.n	800da00 <tcp_abandon+0x20>
 800d9f0:	4b52      	ldr	r3, [pc, #328]	@ (800db3c <tcp_abandon+0x15c>)
 800d9f2:	f240 223d 	movw	r2, #573	@ 0x23d
 800d9f6:	4952      	ldr	r1, [pc, #328]	@ (800db40 <tcp_abandon+0x160>)
 800d9f8:	4852      	ldr	r0, [pc, #328]	@ (800db44 <tcp_abandon+0x164>)
 800d9fa:	f009 f89d 	bl	8016b38 <iprintf>
 800d9fe:	e099      	b.n	800db34 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	7d1b      	ldrb	r3, [r3, #20]
 800da04:	2b01      	cmp	r3, #1
 800da06:	d106      	bne.n	800da16 <tcp_abandon+0x36>
 800da08:	4b4c      	ldr	r3, [pc, #304]	@ (800db3c <tcp_abandon+0x15c>)
 800da0a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800da0e:	494e      	ldr	r1, [pc, #312]	@ (800db48 <tcp_abandon+0x168>)
 800da10:	484c      	ldr	r0, [pc, #304]	@ (800db44 <tcp_abandon+0x164>)
 800da12:	f009 f891 	bl	8016b38 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7d1b      	ldrb	r3, [r3, #20]
 800da1a:	2b0a      	cmp	r3, #10
 800da1c:	d107      	bne.n	800da2e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	484a      	ldr	r0, [pc, #296]	@ (800db4c <tcp_abandon+0x16c>)
 800da22:	f000 ffc5 	bl	800e9b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7ff fdb0 	bl	800d58c <tcp_free>
 800da2c:	e082      	b.n	800db34 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800da32:	2300      	movs	r3, #0
 800da34:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da3a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da40:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da48:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	691b      	ldr	r3, [r3, #16]
 800da4e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7d1b      	ldrb	r3, [r3, #20]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d126      	bne.n	800daa6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	8adb      	ldrh	r3, [r3, #22]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d02e      	beq.n	800dabe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da60:	4b3b      	ldr	r3, [pc, #236]	@ (800db50 <tcp_abandon+0x170>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	429a      	cmp	r2, r3
 800da68:	d105      	bne.n	800da76 <tcp_abandon+0x96>
 800da6a:	4b39      	ldr	r3, [pc, #228]	@ (800db50 <tcp_abandon+0x170>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	4a37      	ldr	r2, [pc, #220]	@ (800db50 <tcp_abandon+0x170>)
 800da72:	6013      	str	r3, [r2, #0]
 800da74:	e013      	b.n	800da9e <tcp_abandon+0xbe>
 800da76:	4b36      	ldr	r3, [pc, #216]	@ (800db50 <tcp_abandon+0x170>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	61fb      	str	r3, [r7, #28]
 800da7c:	e00c      	b.n	800da98 <tcp_abandon+0xb8>
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	429a      	cmp	r2, r3
 800da86:	d104      	bne.n	800da92 <tcp_abandon+0xb2>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	68da      	ldr	r2, [r3, #12]
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	60da      	str	r2, [r3, #12]
 800da90:	e005      	b.n	800da9e <tcp_abandon+0xbe>
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	61fb      	str	r3, [r7, #28]
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1ef      	bne.n	800da7e <tcp_abandon+0x9e>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	60da      	str	r2, [r3, #12]
 800daa4:	e00b      	b.n	800dabe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	8adb      	ldrh	r3, [r3, #22]
 800daae:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dab0:	6879      	ldr	r1, [r7, #4]
 800dab2:	4828      	ldr	r0, [pc, #160]	@ (800db54 <tcp_abandon+0x174>)
 800dab4:	f000 ff7c 	bl	800e9b0 <tcp_pcb_remove>
 800dab8:	4b27      	ldr	r3, [pc, #156]	@ (800db58 <tcp_abandon+0x178>)
 800daba:	2201      	movs	r2, #1
 800dabc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d004      	beq.n	800dad0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daca:	4618      	mov	r0, r3
 800dacc:	f000 fd1e 	bl	800e50c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dadc:	4618      	mov	r0, r3
 800dade:	f000 fd15 	bl	800e50c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d004      	beq.n	800daf4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daee:	4618      	mov	r0, r3
 800daf0:	f000 fd0c 	bl	800e50c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800daf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00e      	beq.n	800db18 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dafa:	6879      	ldr	r1, [r7, #4]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3304      	adds	r3, #4
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	8b12      	ldrh	r2, [r2, #24]
 800db04:	9202      	str	r2, [sp, #8]
 800db06:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800db08:	9201      	str	r2, [sp, #4]
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	460b      	mov	r3, r1
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	69b9      	ldr	r1, [r7, #24]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f004 fcd8 	bl	80124c8 <tcp_rst>
    }
    last_state = pcb->state;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7ff fd34 	bl	800d58c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d004      	beq.n	800db34 <tcp_abandon+0x154>
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	f06f 010c 	mvn.w	r1, #12
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	4798      	blx	r3
  }
}
 800db34:	3728      	adds	r7, #40	@ 0x28
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	080188a0 	.word	0x080188a0
 800db40:	080189e4 	.word	0x080189e4
 800db44:	080188e4 	.word	0x080188e4
 800db48:	08018a00 	.word	0x08018a00
 800db4c:	20008414 	.word	0x20008414
 800db50:	20008408 	.word	0x20008408
 800db54:	20008410 	.word	0x20008410
 800db58:	20008418 	.word	0x20008418

0800db5c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800db64:	2101      	movs	r1, #1
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f7ff ff3a 	bl	800d9e0 <tcp_abandon>
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d106      	bne.n	800db90 <tcp_update_rcv_ann_wnd+0x1c>
 800db82:	4b25      	ldr	r3, [pc, #148]	@ (800dc18 <tcp_update_rcv_ann_wnd+0xa4>)
 800db84:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800db88:	4924      	ldr	r1, [pc, #144]	@ (800dc1c <tcp_update_rcv_ann_wnd+0xa8>)
 800db8a:	4825      	ldr	r0, [pc, #148]	@ (800dc20 <tcp_update_rcv_ann_wnd+0xac>)
 800db8c:	f008 ffd4 	bl	8016b38 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800db98:	4413      	add	r3, r2
 800db9a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800dba4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800dba8:	bf28      	it	cs
 800dbaa:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800dbae:	b292      	uxth	r2, r2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	db08      	blt.n	800dbcc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	e020      	b.n	800dc0e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	dd03      	ble.n	800dbe2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dbe0:	e014      	b.n	800dc0c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbf4:	d306      	bcc.n	800dc04 <tcp_update_rcv_ann_wnd+0x90>
 800dbf6:	4b08      	ldr	r3, [pc, #32]	@ (800dc18 <tcp_update_rcv_ann_wnd+0xa4>)
 800dbf8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800dbfc:	4909      	ldr	r1, [pc, #36]	@ (800dc24 <tcp_update_rcv_ann_wnd+0xb0>)
 800dbfe:	4808      	ldr	r0, [pc, #32]	@ (800dc20 <tcp_update_rcv_ann_wnd+0xac>)
 800dc00:	f008 ff9a 	bl	8016b38 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800dc0c:	2300      	movs	r3, #0
  }
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	080188a0 	.word	0x080188a0
 800dc1c:	08018afc 	.word	0x08018afc
 800dc20:	080188e4 	.word	0x080188e4
 800dc24:	08018b20 	.word	0x08018b20

0800dc28 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	460b      	mov	r3, r1
 800dc32:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d107      	bne.n	800dc4a <tcp_recved+0x22>
 800dc3a:	4b1f      	ldr	r3, [pc, #124]	@ (800dcb8 <tcp_recved+0x90>)
 800dc3c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800dc40:	491e      	ldr	r1, [pc, #120]	@ (800dcbc <tcp_recved+0x94>)
 800dc42:	481f      	ldr	r0, [pc, #124]	@ (800dcc0 <tcp_recved+0x98>)
 800dc44:	f008 ff78 	bl	8016b38 <iprintf>
 800dc48:	e032      	b.n	800dcb0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	7d1b      	ldrb	r3, [r3, #20]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d106      	bne.n	800dc60 <tcp_recved+0x38>
 800dc52:	4b19      	ldr	r3, [pc, #100]	@ (800dcb8 <tcp_recved+0x90>)
 800dc54:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800dc58:	491a      	ldr	r1, [pc, #104]	@ (800dcc4 <tcp_recved+0x9c>)
 800dc5a:	4819      	ldr	r0, [pc, #100]	@ (800dcc0 <tcp_recved+0x98>)
 800dc5c:	f008 ff6c 	bl	8016b38 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dc64:	887b      	ldrh	r3, [r7, #2]
 800dc66:	4413      	add	r3, r2
 800dc68:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dc6a:	89fb      	ldrh	r3, [r7, #14]
 800dc6c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dc70:	d804      	bhi.n	800dc7c <tcp_recved+0x54>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc76:	89fa      	ldrh	r2, [r7, #14]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d204      	bcs.n	800dc86 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dc82:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dc84:	e002      	b.n	800dc8c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	89fa      	ldrh	r2, [r7, #14]
 800dc8a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7ff ff71 	bl	800db74 <tcp_update_rcv_ann_wnd>
 800dc92:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dc9a:	d309      	bcc.n	800dcb0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	8b5b      	ldrh	r3, [r3, #26]
 800dca0:	f043 0302 	orr.w	r3, r3, #2
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f003 fe4c 	bl	8011948 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	080188a0 	.word	0x080188a0
 800dcbc:	08018b3c 	.word	0x08018b3c
 800dcc0:	080188e4 	.word	0x080188e4
 800dcc4:	08018b54 	.word	0x08018b54

0800dcc8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dcc8:	b5b0      	push	{r4, r5, r7, lr}
 800dcca:	b090      	sub	sp, #64	@ 0x40
 800dccc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800dcd4:	4b95      	ldr	r3, [pc, #596]	@ (800df2c <tcp_slowtmr+0x264>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	4a94      	ldr	r2, [pc, #592]	@ (800df2c <tcp_slowtmr+0x264>)
 800dcdc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dcde:	4b94      	ldr	r3, [pc, #592]	@ (800df30 <tcp_slowtmr+0x268>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	3301      	adds	r3, #1
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	4b92      	ldr	r3, [pc, #584]	@ (800df30 <tcp_slowtmr+0x268>)
 800dce8:	701a      	strb	r2, [r3, #0]
 800dcea:	e000      	b.n	800dcee <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800dcec:	bf00      	nop
  prev = NULL;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800dcf2:	4b90      	ldr	r3, [pc, #576]	@ (800df34 <tcp_slowtmr+0x26c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800dcf8:	e29d      	b.n	800e236 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dcfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfc:	7d1b      	ldrb	r3, [r3, #20]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d106      	bne.n	800dd10 <tcp_slowtmr+0x48>
 800dd02:	4b8d      	ldr	r3, [pc, #564]	@ (800df38 <tcp_slowtmr+0x270>)
 800dd04:	f240 42be 	movw	r2, #1214	@ 0x4be
 800dd08:	498c      	ldr	r1, [pc, #560]	@ (800df3c <tcp_slowtmr+0x274>)
 800dd0a:	488d      	ldr	r0, [pc, #564]	@ (800df40 <tcp_slowtmr+0x278>)
 800dd0c:	f008 ff14 	bl	8016b38 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd12:	7d1b      	ldrb	r3, [r3, #20]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d106      	bne.n	800dd26 <tcp_slowtmr+0x5e>
 800dd18:	4b87      	ldr	r3, [pc, #540]	@ (800df38 <tcp_slowtmr+0x270>)
 800dd1a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800dd1e:	4989      	ldr	r1, [pc, #548]	@ (800df44 <tcp_slowtmr+0x27c>)
 800dd20:	4887      	ldr	r0, [pc, #540]	@ (800df40 <tcp_slowtmr+0x278>)
 800dd22:	f008 ff09 	bl	8016b38 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd28:	7d1b      	ldrb	r3, [r3, #20]
 800dd2a:	2b0a      	cmp	r3, #10
 800dd2c:	d106      	bne.n	800dd3c <tcp_slowtmr+0x74>
 800dd2e:	4b82      	ldr	r3, [pc, #520]	@ (800df38 <tcp_slowtmr+0x270>)
 800dd30:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800dd34:	4984      	ldr	r1, [pc, #528]	@ (800df48 <tcp_slowtmr+0x280>)
 800dd36:	4882      	ldr	r0, [pc, #520]	@ (800df40 <tcp_slowtmr+0x278>)
 800dd38:	f008 fefe 	bl	8016b38 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd3e:	7f9a      	ldrb	r2, [r3, #30]
 800dd40:	4b7b      	ldr	r3, [pc, #492]	@ (800df30 <tcp_slowtmr+0x268>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d105      	bne.n	800dd54 <tcp_slowtmr+0x8c>
      prev = pcb;
 800dd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800dd52:	e270      	b.n	800e236 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800dd54:	4b76      	ldr	r3, [pc, #472]	@ (800df30 <tcp_slowtmr+0x268>)
 800dd56:	781a      	ldrb	r2, [r3, #0]
 800dd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd5a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6a:	7d1b      	ldrb	r3, [r3, #20]
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d10a      	bne.n	800dd86 <tcp_slowtmr+0xbe>
 800dd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd76:	2b05      	cmp	r3, #5
 800dd78:	d905      	bls.n	800dd86 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800dd7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd7e:	3301      	adds	r3, #1
 800dd80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800dd84:	e11e      	b.n	800dfc4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd8c:	2b0b      	cmp	r3, #11
 800dd8e:	d905      	bls.n	800dd9c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800dd90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd94:	3301      	adds	r3, #1
 800dd96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dd9a:	e113      	b.n	800dfc4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800dd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d075      	beq.n	800de92 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d006      	beq.n	800ddbc <tcp_slowtmr+0xf4>
 800ddae:	4b62      	ldr	r3, [pc, #392]	@ (800df38 <tcp_slowtmr+0x270>)
 800ddb0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ddb4:	4965      	ldr	r1, [pc, #404]	@ (800df4c <tcp_slowtmr+0x284>)
 800ddb6:	4862      	ldr	r0, [pc, #392]	@ (800df40 <tcp_slowtmr+0x278>)
 800ddb8:	f008 febe 	bl	8016b38 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ddbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d106      	bne.n	800ddd2 <tcp_slowtmr+0x10a>
 800ddc4:	4b5c      	ldr	r3, [pc, #368]	@ (800df38 <tcp_slowtmr+0x270>)
 800ddc6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ddca:	4961      	ldr	r1, [pc, #388]	@ (800df50 <tcp_slowtmr+0x288>)
 800ddcc:	485c      	ldr	r0, [pc, #368]	@ (800df40 <tcp_slowtmr+0x278>)
 800ddce:	f008 feb3 	bl	8016b38 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ddd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ddd8:	2b0b      	cmp	r3, #11
 800ddda:	d905      	bls.n	800dde8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800dddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dde0:	3301      	adds	r3, #1
 800dde2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dde6:	e0ed      	b.n	800dfc4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	4a58      	ldr	r2, [pc, #352]	@ (800df54 <tcp_slowtmr+0x28c>)
 800ddf2:	5cd3      	ldrb	r3, [r2, r3]
 800ddf4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ddf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ddfc:	7c7a      	ldrb	r2, [r7, #17]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d907      	bls.n	800de12 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800de02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de04:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800de08:	3301      	adds	r3, #1
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800de12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de14:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800de18:	7c7a      	ldrb	r2, [r7, #17]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	f200 80d2 	bhi.w	800dfc4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800de20:	2301      	movs	r3, #1
 800de22:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800de24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d108      	bne.n	800de40 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800de2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de30:	f004 fc3e 	bl	80126b0 <tcp_zero_window_probe>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d014      	beq.n	800de64 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800de3a:	2300      	movs	r3, #0
 800de3c:	623b      	str	r3, [r7, #32]
 800de3e:	e011      	b.n	800de64 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800de40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de46:	4619      	mov	r1, r3
 800de48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de4a:	f003 faf3 	bl	8011434 <tcp_split_unsent_seg>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d107      	bne.n	800de64 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800de54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de56:	f003 fd77 	bl	8011948 <tcp_output>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800de60:	2300      	movs	r3, #0
 800de62:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 80ac 	beq.w	800dfc4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800de6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800de74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de76:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800de7a:	2b06      	cmp	r3, #6
 800de7c:	f200 80a2 	bhi.w	800dfc4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800de80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de82:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800de86:	3301      	adds	r3, #1
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de8c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800de90:	e098      	b.n	800dfc4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800de92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de98:	2b00      	cmp	r3, #0
 800de9a:	db0f      	blt.n	800debc <tcp_slowtmr+0x1f4>
 800de9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dea2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d008      	beq.n	800debc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800deaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	3301      	adds	r3, #1
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	b21a      	sxth	r2, r3
 800deb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deba:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800debc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800dec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800dec8:	429a      	cmp	r2, r3
 800deca:	db7b      	blt.n	800dfc4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800decc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dece:	f004 f831 	bl	8011f34 <tcp_rexmit_rto_prepare>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d007      	beq.n	800dee8 <tcp_slowtmr+0x220>
 800ded8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d171      	bne.n	800dfc4 <tcp_slowtmr+0x2fc>
 800dee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d06d      	beq.n	800dfc4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800dee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deea:	7d1b      	ldrb	r3, [r3, #20]
 800deec:	2b02      	cmp	r3, #2
 800deee:	d03a      	beq.n	800df66 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800def0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800def6:	2b0c      	cmp	r3, #12
 800def8:	bf28      	it	cs
 800defa:	230c      	movcs	r3, #12
 800defc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800defe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800df04:	10db      	asrs	r3, r3, #3
 800df06:	b21b      	sxth	r3, r3
 800df08:	461a      	mov	r2, r3
 800df0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800df10:	4413      	add	r3, r2
 800df12:	7efa      	ldrb	r2, [r7, #27]
 800df14:	4910      	ldr	r1, [pc, #64]	@ (800df58 <tcp_slowtmr+0x290>)
 800df16:	5c8a      	ldrb	r2, [r1, r2]
 800df18:	4093      	lsls	r3, r2
 800df1a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800df22:	4293      	cmp	r3, r2
 800df24:	dc1a      	bgt.n	800df5c <tcp_slowtmr+0x294>
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	b21a      	sxth	r2, r3
 800df2a:	e019      	b.n	800df60 <tcp_slowtmr+0x298>
 800df2c:	20008404 	.word	0x20008404
 800df30:	2000841a 	.word	0x2000841a
 800df34:	20008410 	.word	0x20008410
 800df38:	080188a0 	.word	0x080188a0
 800df3c:	08018be4 	.word	0x08018be4
 800df40:	080188e4 	.word	0x080188e4
 800df44:	08018c10 	.word	0x08018c10
 800df48:	08018c3c 	.word	0x08018c3c
 800df4c:	08018c6c 	.word	0x08018c6c
 800df50:	08018ca0 	.word	0x08018ca0
 800df54:	0801b1c0 	.word	0x0801b1c0
 800df58:	0801b1b0 	.word	0x0801b1b0
 800df5c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800df60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800df66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df68:	2200      	movs	r2, #0
 800df6a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800df6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800df72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800df78:	4293      	cmp	r3, r2
 800df7a:	bf28      	it	cs
 800df7c:	4613      	movcs	r3, r2
 800df7e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800df80:	8a7b      	ldrh	r3, [r7, #18]
 800df82:	085b      	lsrs	r3, r3, #1
 800df84:	b29a      	uxth	r2, r3
 800df86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800df8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800df92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	b29b      	uxth	r3, r3
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d206      	bcs.n	800dfac <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800df9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800dfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfae:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800dfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800dfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800dfbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dfc0:	f004 f832 	bl	8012028 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800dfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc6:	7d1b      	ldrb	r3, [r3, #20]
 800dfc8:	2b06      	cmp	r3, #6
 800dfca:	d111      	bne.n	800dff0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800dfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfce:	8b5b      	ldrh	r3, [r3, #26]
 800dfd0:	f003 0310 	and.w	r3, r3, #16
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00b      	beq.n	800dff0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfd8:	4b9c      	ldr	r3, [pc, #624]	@ (800e24c <tcp_slowtmr+0x584>)
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfde:	6a1b      	ldr	r3, [r3, #32]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	2b28      	cmp	r3, #40	@ 0x28
 800dfe4:	d904      	bls.n	800dff0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800dfe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfea:	3301      	adds	r3, #1
 800dfec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff2:	7a5b      	ldrb	r3, [r3, #9]
 800dff4:	f003 0308 	and.w	r3, r3, #8
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d04a      	beq.n	800e092 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800dffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dffe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e000:	2b04      	cmp	r3, #4
 800e002:	d003      	beq.n	800e00c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e006:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e008:	2b07      	cmp	r3, #7
 800e00a:	d142      	bne.n	800e092 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e00c:	4b8f      	ldr	r3, [pc, #572]	@ (800e24c <tcp_slowtmr+0x584>)
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e012:	6a1b      	ldr	r3, [r3, #32]
 800e014:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e018:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e01c:	4b8c      	ldr	r3, [pc, #560]	@ (800e250 <tcp_slowtmr+0x588>)
 800e01e:	440b      	add	r3, r1
 800e020:	498c      	ldr	r1, [pc, #560]	@ (800e254 <tcp_slowtmr+0x58c>)
 800e022:	fba1 1303 	umull	r1, r3, r1, r3
 800e026:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e028:	429a      	cmp	r2, r3
 800e02a:	d90a      	bls.n	800e042 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e02c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e030:	3301      	adds	r3, #1
 800e032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e036:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e03a:	3301      	adds	r3, #1
 800e03c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e040:	e027      	b.n	800e092 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e042:	4b82      	ldr	r3, [pc, #520]	@ (800e24c <tcp_slowtmr+0x584>)
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e048:	6a1b      	ldr	r3, [r3, #32]
 800e04a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e04e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e054:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e058:	4618      	mov	r0, r3
 800e05a:	4b7f      	ldr	r3, [pc, #508]	@ (800e258 <tcp_slowtmr+0x590>)
 800e05c:	fb00 f303 	mul.w	r3, r0, r3
 800e060:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e062:	497c      	ldr	r1, [pc, #496]	@ (800e254 <tcp_slowtmr+0x58c>)
 800e064:	fba1 1303 	umull	r1, r3, r1, r3
 800e068:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d911      	bls.n	800e092 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e06e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e070:	f004 fade 	bl	8012630 <tcp_keepalive>
 800e074:	4603      	mov	r3, r0
 800e076:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e07a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d107      	bne.n	800e092 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e084:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e088:	3301      	adds	r3, #1
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e096:	2b00      	cmp	r3, #0
 800e098:	d011      	beq.n	800e0be <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e09a:	4b6c      	ldr	r3, [pc, #432]	@ (800e24c <tcp_slowtmr+0x584>)
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a0:	6a1b      	ldr	r3, [r3, #32]
 800e0a2:	1ad2      	subs	r2, r2, r3
 800e0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	440b      	add	r3, r1
 800e0b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d302      	bcc.n	800e0be <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e0b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0ba:	f000 fde3 	bl	800ec84 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	7d1b      	ldrb	r3, [r3, #20]
 800e0c2:	2b03      	cmp	r3, #3
 800e0c4:	d10b      	bne.n	800e0de <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0c6:	4b61      	ldr	r3, [pc, #388]	@ (800e24c <tcp_slowtmr+0x584>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	2b28      	cmp	r3, #40	@ 0x28
 800e0d2:	d904      	bls.n	800e0de <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0d8:	3301      	adds	r3, #1
 800e0da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e0:	7d1b      	ldrb	r3, [r3, #20]
 800e0e2:	2b09      	cmp	r3, #9
 800e0e4:	d10b      	bne.n	800e0fe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e0e6:	4b59      	ldr	r3, [pc, #356]	@ (800e24c <tcp_slowtmr+0x584>)
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ec:	6a1b      	ldr	r3, [r3, #32]
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	2bf0      	cmp	r3, #240	@ 0xf0
 800e0f2:	d904      	bls.n	800e0fe <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e102:	2b00      	cmp	r3, #0
 800e104:	d060      	beq.n	800e1c8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e10c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e10e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e110:	f000 fbfe 	bl	800e910 <tcp_pcb_purge>
      if (prev != NULL) {
 800e114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e116:	2b00      	cmp	r3, #0
 800e118:	d010      	beq.n	800e13c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e11a:	4b50      	ldr	r3, [pc, #320]	@ (800e25c <tcp_slowtmr+0x594>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e120:	429a      	cmp	r2, r3
 800e122:	d106      	bne.n	800e132 <tcp_slowtmr+0x46a>
 800e124:	4b4e      	ldr	r3, [pc, #312]	@ (800e260 <tcp_slowtmr+0x598>)
 800e126:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e12a:	494e      	ldr	r1, [pc, #312]	@ (800e264 <tcp_slowtmr+0x59c>)
 800e12c:	484e      	ldr	r0, [pc, #312]	@ (800e268 <tcp_slowtmr+0x5a0>)
 800e12e:	f008 fd03 	bl	8016b38 <iprintf>
        prev->next = pcb->next;
 800e132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e138:	60da      	str	r2, [r3, #12]
 800e13a:	e00f      	b.n	800e15c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e13c:	4b47      	ldr	r3, [pc, #284]	@ (800e25c <tcp_slowtmr+0x594>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e142:	429a      	cmp	r2, r3
 800e144:	d006      	beq.n	800e154 <tcp_slowtmr+0x48c>
 800e146:	4b46      	ldr	r3, [pc, #280]	@ (800e260 <tcp_slowtmr+0x598>)
 800e148:	f240 5271 	movw	r2, #1393	@ 0x571
 800e14c:	4947      	ldr	r1, [pc, #284]	@ (800e26c <tcp_slowtmr+0x5a4>)
 800e14e:	4846      	ldr	r0, [pc, #280]	@ (800e268 <tcp_slowtmr+0x5a0>)
 800e150:	f008 fcf2 	bl	8016b38 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	4a40      	ldr	r2, [pc, #256]	@ (800e25c <tcp_slowtmr+0x594>)
 800e15a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e15c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e160:	2b00      	cmp	r3, #0
 800e162:	d013      	beq.n	800e18c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e166:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e16c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e170:	3304      	adds	r3, #4
 800e172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e174:	8ad2      	ldrh	r2, [r2, #22]
 800e176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e178:	8b09      	ldrh	r1, [r1, #24]
 800e17a:	9102      	str	r1, [sp, #8]
 800e17c:	9201      	str	r2, [sp, #4]
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	462b      	mov	r3, r5
 800e182:	4622      	mov	r2, r4
 800e184:	4601      	mov	r1, r0
 800e186:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e188:	f004 f99e 	bl	80124c8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e194:	7d1b      	ldrb	r3, [r3, #20]
 800e196:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e1a2:	6838      	ldr	r0, [r7, #0]
 800e1a4:	f7ff f9f2 	bl	800d58c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e1a8:	4b31      	ldr	r3, [pc, #196]	@ (800e270 <tcp_slowtmr+0x5a8>)
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d004      	beq.n	800e1be <tcp_slowtmr+0x4f6>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f06f 010c 	mvn.w	r1, #12
 800e1ba:	68b8      	ldr	r0, [r7, #8]
 800e1bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e1be:	4b2c      	ldr	r3, [pc, #176]	@ (800e270 <tcp_slowtmr+0x5a8>)
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d037      	beq.n	800e236 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e1c6:	e592      	b.n	800dcee <tcp_slowtmr+0x26>
      prev = pcb;
 800e1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d4:	7f1b      	ldrb	r3, [r3, #28]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e0:	7f1a      	ldrb	r2, [r3, #28]
 800e1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e4:	7f5b      	ldrb	r3, [r3, #29]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d325      	bcc.n	800e236 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e1f0:	4b1f      	ldr	r3, [pc, #124]	@ (800e270 <tcp_slowtmr+0x5a8>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00b      	beq.n	800e218 <tcp_slowtmr+0x550>
 800e200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e208:	6912      	ldr	r2, [r2, #16]
 800e20a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e20c:	4610      	mov	r0, r2
 800e20e:	4798      	blx	r3
 800e210:	4603      	mov	r3, r0
 800e212:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e216:	e002      	b.n	800e21e <tcp_slowtmr+0x556>
 800e218:	2300      	movs	r3, #0
 800e21a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e21e:	4b14      	ldr	r3, [pc, #80]	@ (800e270 <tcp_slowtmr+0x5a8>)
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	f47f ad62 	bne.w	800dcec <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e228:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d102      	bne.n	800e236 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e232:	f003 fb89 	bl	8011948 <tcp_output>
  while (pcb != NULL) {
 800e236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f47f ad5e 	bne.w	800dcfa <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e23e:	2300      	movs	r3, #0
 800e240:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e242:	4b0c      	ldr	r3, [pc, #48]	@ (800e274 <tcp_slowtmr+0x5ac>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e248:	e069      	b.n	800e31e <tcp_slowtmr+0x656>
 800e24a:	bf00      	nop
 800e24c:	20008404 	.word	0x20008404
 800e250:	000a4cb8 	.word	0x000a4cb8
 800e254:	10624dd3 	.word	0x10624dd3
 800e258:	000124f8 	.word	0x000124f8
 800e25c:	20008410 	.word	0x20008410
 800e260:	080188a0 	.word	0x080188a0
 800e264:	08018cd8 	.word	0x08018cd8
 800e268:	080188e4 	.word	0x080188e4
 800e26c:	08018d04 	.word	0x08018d04
 800e270:	20008418 	.word	0x20008418
 800e274:	20008414 	.word	0x20008414
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e27a:	7d1b      	ldrb	r3, [r3, #20]
 800e27c:	2b0a      	cmp	r3, #10
 800e27e:	d006      	beq.n	800e28e <tcp_slowtmr+0x5c6>
 800e280:	4b2b      	ldr	r3, [pc, #172]	@ (800e330 <tcp_slowtmr+0x668>)
 800e282:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e286:	492b      	ldr	r1, [pc, #172]	@ (800e334 <tcp_slowtmr+0x66c>)
 800e288:	482b      	ldr	r0, [pc, #172]	@ (800e338 <tcp_slowtmr+0x670>)
 800e28a:	f008 fc55 	bl	8016b38 <iprintf>
    pcb_remove = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e294:	4b29      	ldr	r3, [pc, #164]	@ (800e33c <tcp_slowtmr+0x674>)
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e29a:	6a1b      	ldr	r3, [r3, #32]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	2bf0      	cmp	r3, #240	@ 0xf0
 800e2a0:	d904      	bls.n	800e2ac <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d02f      	beq.n	800e314 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e2b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e2b6:	f000 fb2b 	bl	800e910 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d010      	beq.n	800e2e2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e2c0:	4b1f      	ldr	r3, [pc, #124]	@ (800e340 <tcp_slowtmr+0x678>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d106      	bne.n	800e2d8 <tcp_slowtmr+0x610>
 800e2ca:	4b19      	ldr	r3, [pc, #100]	@ (800e330 <tcp_slowtmr+0x668>)
 800e2cc:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e2d0:	491c      	ldr	r1, [pc, #112]	@ (800e344 <tcp_slowtmr+0x67c>)
 800e2d2:	4819      	ldr	r0, [pc, #100]	@ (800e338 <tcp_slowtmr+0x670>)
 800e2d4:	f008 fc30 	bl	8016b38 <iprintf>
        prev->next = pcb->next;
 800e2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2da:	68da      	ldr	r2, [r3, #12]
 800e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2de:	60da      	str	r2, [r3, #12]
 800e2e0:	e00f      	b.n	800e302 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e2e2:	4b17      	ldr	r3, [pc, #92]	@ (800e340 <tcp_slowtmr+0x678>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d006      	beq.n	800e2fa <tcp_slowtmr+0x632>
 800e2ec:	4b10      	ldr	r3, [pc, #64]	@ (800e330 <tcp_slowtmr+0x668>)
 800e2ee:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e2f2:	4915      	ldr	r1, [pc, #84]	@ (800e348 <tcp_slowtmr+0x680>)
 800e2f4:	4810      	ldr	r0, [pc, #64]	@ (800e338 <tcp_slowtmr+0x670>)
 800e2f6:	f008 fc1f 	bl	8016b38 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	4a10      	ldr	r2, [pc, #64]	@ (800e340 <tcp_slowtmr+0x678>)
 800e300:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e304:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e30c:	69f8      	ldr	r0, [r7, #28]
 800e30e:	f7ff f93d 	bl	800d58c <tcp_free>
 800e312:	e004      	b.n	800e31e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e316:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1a9      	bne.n	800e278 <tcp_slowtmr+0x5b0>
    }
  }
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop
 800e328:	3730      	adds	r7, #48	@ 0x30
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bdb0      	pop	{r4, r5, r7, pc}
 800e32e:	bf00      	nop
 800e330:	080188a0 	.word	0x080188a0
 800e334:	08018d30 	.word	0x08018d30
 800e338:	080188e4 	.word	0x080188e4
 800e33c:	20008404 	.word	0x20008404
 800e340:	20008414 	.word	0x20008414
 800e344:	08018d60 	.word	0x08018d60
 800e348:	08018d88 	.word	0x08018d88

0800e34c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e352:	4b2d      	ldr	r3, [pc, #180]	@ (800e408 <tcp_fasttmr+0xbc>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	3301      	adds	r3, #1
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	4b2b      	ldr	r3, [pc, #172]	@ (800e408 <tcp_fasttmr+0xbc>)
 800e35c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e35e:	4b2b      	ldr	r3, [pc, #172]	@ (800e40c <tcp_fasttmr+0xc0>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e364:	e048      	b.n	800e3f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	7f9a      	ldrb	r2, [r3, #30]
 800e36a:	4b27      	ldr	r3, [pc, #156]	@ (800e408 <tcp_fasttmr+0xbc>)
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d03f      	beq.n	800e3f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e372:	4b25      	ldr	r3, [pc, #148]	@ (800e408 <tcp_fasttmr+0xbc>)
 800e374:	781a      	ldrb	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	8b5b      	ldrh	r3, [r3, #26]
 800e37e:	f003 0301 	and.w	r3, r3, #1
 800e382:	2b00      	cmp	r3, #0
 800e384:	d010      	beq.n	800e3a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	8b5b      	ldrh	r3, [r3, #26]
 800e38a:	f043 0302 	orr.w	r3, r3, #2
 800e38e:	b29a      	uxth	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f003 fad7 	bl	8011948 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	8b5b      	ldrh	r3, [r3, #26]
 800e39e:	f023 0303 	bic.w	r3, r3, #3
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	8b5b      	ldrh	r3, [r3, #26]
 800e3ac:	f003 0308 	and.w	r3, r3, #8
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d009      	beq.n	800e3c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	8b5b      	ldrh	r3, [r3, #26]
 800e3b8:	f023 0308 	bic.w	r3, r3, #8
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7ff fa76 	bl	800d8b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00a      	beq.n	800e3ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e3d6:	4b0e      	ldr	r3, [pc, #56]	@ (800e410 <tcp_fasttmr+0xc4>)
 800e3d8:	2200      	movs	r2, #0
 800e3da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f819 	bl	800e414 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e3e2:	4b0b      	ldr	r3, [pc, #44]	@ (800e410 <tcp_fasttmr+0xc4>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d000      	beq.n	800e3ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e3ea:	e7b8      	b.n	800e35e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	607b      	str	r3, [r7, #4]
 800e3f0:	e002      	b.n	800e3f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1b3      	bne.n	800e366 <tcp_fasttmr+0x1a>
    }
  }
}
 800e3fe:	bf00      	nop
 800e400:	bf00      	nop
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	2000841a 	.word	0x2000841a
 800e40c:	20008410 	.word	0x20008410
 800e410:	20008418 	.word	0x20008418

0800e414 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e414:	b590      	push	{r4, r7, lr}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d109      	bne.n	800e436 <tcp_process_refused_data+0x22>
 800e422:	4b37      	ldr	r3, [pc, #220]	@ (800e500 <tcp_process_refused_data+0xec>)
 800e424:	f240 6209 	movw	r2, #1545	@ 0x609
 800e428:	4936      	ldr	r1, [pc, #216]	@ (800e504 <tcp_process_refused_data+0xf0>)
 800e42a:	4837      	ldr	r0, [pc, #220]	@ (800e508 <tcp_process_refused_data+0xf4>)
 800e42c:	f008 fb84 	bl	8016b38 <iprintf>
 800e430:	f06f 030f 	mvn.w	r3, #15
 800e434:	e060      	b.n	800e4f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e43a:	7b5b      	ldrb	r3, [r3, #13]
 800e43c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e442:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00b      	beq.n	800e46c <tcp_process_refused_data+0x58>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6918      	ldr	r0, [r3, #16]
 800e45e:	2300      	movs	r3, #0
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	6879      	ldr	r1, [r7, #4]
 800e464:	47a0      	blx	r4
 800e466:	4603      	mov	r3, r0
 800e468:	73fb      	strb	r3, [r7, #15]
 800e46a:	e007      	b.n	800e47c <tcp_process_refused_data+0x68>
 800e46c:	2300      	movs	r3, #0
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	6879      	ldr	r1, [r7, #4]
 800e472:	2000      	movs	r0, #0
 800e474:	f000 f8a4 	bl	800e5c0 <tcp_recv_null>
 800e478:	4603      	mov	r3, r0
 800e47a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e47c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d12a      	bne.n	800e4da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e484:	7bbb      	ldrb	r3, [r7, #14]
 800e486:	f003 0320 	and.w	r3, r3, #32
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d033      	beq.n	800e4f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e492:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e496:	d005      	beq.n	800e4a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e49c:	3301      	adds	r3, #1
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <tcp_process_refused_data+0xb2>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6918      	ldr	r0, [r3, #16]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	6879      	ldr	r1, [r7, #4]
 800e4be:	47a0      	blx	r4
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]
 800e4c4:	e001      	b.n	800e4ca <tcp_process_refused_data+0xb6>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e4ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4ce:	f113 0f0d 	cmn.w	r3, #13
 800e4d2:	d110      	bne.n	800e4f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e4d4:	f06f 030c 	mvn.w	r3, #12
 800e4d8:	e00e      	b.n	800e4f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e4da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4de:	f113 0f0d 	cmn.w	r3, #13
 800e4e2:	d102      	bne.n	800e4ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e4e4:	f06f 030c 	mvn.w	r3, #12
 800e4e8:	e006      	b.n	800e4f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	68ba      	ldr	r2, [r7, #8]
 800e4ee:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e4f0:	f06f 0304 	mvn.w	r3, #4
 800e4f4:	e000      	b.n	800e4f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3714      	adds	r7, #20
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd90      	pop	{r4, r7, pc}
 800e500:	080188a0 	.word	0x080188a0
 800e504:	08018db0 	.word	0x08018db0
 800e508:	080188e4 	.word	0x080188e4

0800e50c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e514:	e007      	b.n	800e526 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f80a 	bl	800e536 <tcp_seg_free>
    seg = next;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1f4      	bne.n	800e516 <tcp_segs_free+0xa>
  }
}
 800e52c:	bf00      	nop
 800e52e:	bf00      	nop
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b082      	sub	sp, #8
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00c      	beq.n	800e55e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d004      	beq.n	800e556 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	4618      	mov	r0, r3
 800e552:	f7fe fd6b 	bl	800d02c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e556:	6879      	ldr	r1, [r7, #4]
 800e558:	2003      	movs	r0, #3
 800e55a:	f7fd fdfb 	bl	800c154 <memp_free>
  }
}
 800e55e:	bf00      	nop
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
	...

0800e568 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d106      	bne.n	800e584 <tcp_seg_copy+0x1c>
 800e576:	4b0f      	ldr	r3, [pc, #60]	@ (800e5b4 <tcp_seg_copy+0x4c>)
 800e578:	f240 6282 	movw	r2, #1666	@ 0x682
 800e57c:	490e      	ldr	r1, [pc, #56]	@ (800e5b8 <tcp_seg_copy+0x50>)
 800e57e:	480f      	ldr	r0, [pc, #60]	@ (800e5bc <tcp_seg_copy+0x54>)
 800e580:	f008 fada 	bl	8016b38 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e584:	2003      	movs	r0, #3
 800e586:	f7fd fd75 	bl	800c074 <memp_malloc>
 800e58a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <tcp_seg_copy+0x2e>
    return NULL;
 800e592:	2300      	movs	r3, #0
 800e594:	e00a      	b.n	800e5ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e596:	2214      	movs	r2, #20
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f008 fca1 	bl	8016ee2 <memcpy>
  pbuf_ref(cseg->p);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fe fde1 	bl	800d16c <pbuf_ref>
  return cseg;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3710      	adds	r7, #16
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	080188a0 	.word	0x080188a0
 800e5b8:	08018df4 	.word	0x08018df4
 800e5bc:	080188e4 	.word	0x080188e4

0800e5c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d109      	bne.n	800e5e8 <tcp_recv_null+0x28>
 800e5d4:	4b12      	ldr	r3, [pc, #72]	@ (800e620 <tcp_recv_null+0x60>)
 800e5d6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e5da:	4912      	ldr	r1, [pc, #72]	@ (800e624 <tcp_recv_null+0x64>)
 800e5dc:	4812      	ldr	r0, [pc, #72]	@ (800e628 <tcp_recv_null+0x68>)
 800e5de:	f008 faab 	bl	8016b38 <iprintf>
 800e5e2:	f06f 030f 	mvn.w	r3, #15
 800e5e6:	e016      	b.n	800e616 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d009      	beq.n	800e602 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	891b      	ldrh	r3, [r3, #8]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	68b8      	ldr	r0, [r7, #8]
 800e5f6:	f7ff fb17 	bl	800dc28 <tcp_recved>
    pbuf_free(p);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f7fe fd16 	bl	800d02c <pbuf_free>
 800e600:	e008      	b.n	800e614 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d104      	bne.n	800e614 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e60a:	68b8      	ldr	r0, [r7, #8]
 800e60c:	f7ff f9bc 	bl	800d988 <tcp_close>
 800e610:	4603      	mov	r3, r0
 800e612:	e000      	b.n	800e616 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	080188a0 	.word	0x080188a0
 800e624:	08018e10 	.word	0x08018e10
 800e628:	080188e4 	.word	0x080188e4

0800e62c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	4603      	mov	r3, r0
 800e634:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	db01      	blt.n	800e642 <tcp_kill_prio+0x16>
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	e000      	b.n	800e644 <tcp_kill_prio+0x18>
 800e642:	237f      	movs	r3, #127	@ 0x7f
 800e644:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e646:	7afb      	ldrb	r3, [r7, #11]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d034      	beq.n	800e6b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e64c:	7afb      	ldrb	r3, [r7, #11]
 800e64e:	3b01      	subs	r3, #1
 800e650:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e652:	2300      	movs	r3, #0
 800e654:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e656:	2300      	movs	r3, #0
 800e658:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e65a:	4b19      	ldr	r3, [pc, #100]	@ (800e6c0 <tcp_kill_prio+0x94>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	617b      	str	r3, [r7, #20]
 800e660:	e01f      	b.n	800e6a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	7d5b      	ldrb	r3, [r3, #21]
 800e666:	7afa      	ldrb	r2, [r7, #11]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d80c      	bhi.n	800e686 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e670:	7afa      	ldrb	r2, [r7, #11]
 800e672:	429a      	cmp	r2, r3
 800e674:	d112      	bne.n	800e69c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e676:	4b13      	ldr	r3, [pc, #76]	@ (800e6c4 <tcp_kill_prio+0x98>)
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	6a1b      	ldr	r3, [r3, #32]
 800e67e:	1ad3      	subs	r3, r2, r3
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	429a      	cmp	r2, r3
 800e684:	d80a      	bhi.n	800e69c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e686:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c4 <tcp_kill_prio+0x98>)
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	6a1b      	ldr	r3, [r3, #32]
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	7d5b      	ldrb	r3, [r3, #21]
 800e69a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	617b      	str	r3, [r7, #20]
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1dc      	bne.n	800e662 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d004      	beq.n	800e6b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e6ae:	6938      	ldr	r0, [r7, #16]
 800e6b0:	f7ff fa54 	bl	800db5c <tcp_abort>
 800e6b4:	e000      	b.n	800e6b8 <tcp_kill_prio+0x8c>
    return;
 800e6b6:	bf00      	nop
  }
}
 800e6b8:	3718      	adds	r7, #24
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	20008410 	.word	0x20008410
 800e6c4:	20008404 	.word	0x20008404

0800e6c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	2b08      	cmp	r3, #8
 800e6d6:	d009      	beq.n	800e6ec <tcp_kill_state+0x24>
 800e6d8:	79fb      	ldrb	r3, [r7, #7]
 800e6da:	2b09      	cmp	r3, #9
 800e6dc:	d006      	beq.n	800e6ec <tcp_kill_state+0x24>
 800e6de:	4b1a      	ldr	r3, [pc, #104]	@ (800e748 <tcp_kill_state+0x80>)
 800e6e0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e6e4:	4919      	ldr	r1, [pc, #100]	@ (800e74c <tcp_kill_state+0x84>)
 800e6e6:	481a      	ldr	r0, [pc, #104]	@ (800e750 <tcp_kill_state+0x88>)
 800e6e8:	f008 fa26 	bl	8016b38 <iprintf>

  inactivity = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6f4:	4b17      	ldr	r3, [pc, #92]	@ (800e754 <tcp_kill_state+0x8c>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	617b      	str	r3, [r7, #20]
 800e6fa:	e017      	b.n	800e72c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	7d1b      	ldrb	r3, [r3, #20]
 800e700:	79fa      	ldrb	r2, [r7, #7]
 800e702:	429a      	cmp	r2, r3
 800e704:	d10f      	bne.n	800e726 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e706:	4b14      	ldr	r3, [pc, #80]	@ (800e758 <tcp_kill_state+0x90>)
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	6a1b      	ldr	r3, [r3, #32]
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	429a      	cmp	r2, r3
 800e714:	d807      	bhi.n	800e726 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e716:	4b10      	ldr	r3, [pc, #64]	@ (800e758 <tcp_kill_state+0x90>)
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	1ad3      	subs	r3, r2, r3
 800e720:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	617b      	str	r3, [r7, #20]
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e4      	bne.n	800e6fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d003      	beq.n	800e740 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e738:	2100      	movs	r1, #0
 800e73a:	6938      	ldr	r0, [r7, #16]
 800e73c:	f7ff f950 	bl	800d9e0 <tcp_abandon>
  }
}
 800e740:	bf00      	nop
 800e742:	3718      	adds	r7, #24
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	080188a0 	.word	0x080188a0
 800e74c:	08018e2c 	.word	0x08018e2c
 800e750:	080188e4 	.word	0x080188e4
 800e754:	20008410 	.word	0x20008410
 800e758:	20008404 	.word	0x20008404

0800e75c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e766:	2300      	movs	r3, #0
 800e768:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e76a:	4b12      	ldr	r3, [pc, #72]	@ (800e7b4 <tcp_kill_timewait+0x58>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	60fb      	str	r3, [r7, #12]
 800e770:	e012      	b.n	800e798 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e772:	4b11      	ldr	r3, [pc, #68]	@ (800e7b8 <tcp_kill_timewait+0x5c>)
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d807      	bhi.n	800e792 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e782:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b8 <tcp_kill_timewait+0x5c>)
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6a1b      	ldr	r3, [r3, #32]
 800e78a:	1ad3      	subs	r3, r2, r3
 800e78c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	60fb      	str	r3, [r7, #12]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1e9      	bne.n	800e772 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e7a4:	68b8      	ldr	r0, [r7, #8]
 800e7a6:	f7ff f9d9 	bl	800db5c <tcp_abort>
  }
}
 800e7aa:	bf00      	nop
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	20008414 	.word	0x20008414
 800e7b8:	20008404 	.word	0x20008404

0800e7bc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e7c2:	4b10      	ldr	r3, [pc, #64]	@ (800e804 <tcp_handle_closepend+0x48>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e7c8:	e014      	b.n	800e7f4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	8b5b      	ldrh	r3, [r3, #26]
 800e7d4:	f003 0308 	and.w	r3, r3, #8
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d009      	beq.n	800e7f0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	8b5b      	ldrh	r3, [r3, #26]
 800e7e0:	f023 0308 	bic.w	r3, r3, #8
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7ff f862 	bl	800d8b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d1e7      	bne.n	800e7ca <tcp_handle_closepend+0xe>
  }
}
 800e7fa:	bf00      	nop
 800e7fc:	bf00      	nop
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	20008410 	.word	0x20008410

0800e808 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e812:	2001      	movs	r0, #1
 800e814:	f7fd fc2e 	bl	800c074 <memp_malloc>
 800e818:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d126      	bne.n	800e86e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e820:	f7ff ffcc 	bl	800e7bc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e824:	f7ff ff9a 	bl	800e75c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e828:	2001      	movs	r0, #1
 800e82a:	f7fd fc23 	bl	800c074 <memp_malloc>
 800e82e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d11b      	bne.n	800e86e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e836:	2009      	movs	r0, #9
 800e838:	f7ff ff46 	bl	800e6c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e83c:	2001      	movs	r0, #1
 800e83e:	f7fd fc19 	bl	800c074 <memp_malloc>
 800e842:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d111      	bne.n	800e86e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e84a:	2008      	movs	r0, #8
 800e84c:	f7ff ff3c 	bl	800e6c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e850:	2001      	movs	r0, #1
 800e852:	f7fd fc0f 	bl	800c074 <memp_malloc>
 800e856:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d107      	bne.n	800e86e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff fee3 	bl	800e62c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e866:	2001      	movs	r0, #1
 800e868:	f7fd fc04 	bl	800c074 <memp_malloc>
 800e86c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d03f      	beq.n	800e8f4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e874:	229c      	movs	r2, #156	@ 0x9c
 800e876:	2100      	movs	r1, #0
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f008 fabd 	bl	8016df8 <memset>
    pcb->prio = prio;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	79fa      	ldrb	r2, [r7, #7]
 800e882:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e88a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e894:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	22ff      	movs	r2, #255	@ 0xff
 800e8a2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e8aa:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2206      	movs	r2, #6
 800e8b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2206      	movs	r2, #6
 800e8b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e8c0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e900 <tcp_alloc+0xf8>)
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e904 <tcp_alloc+0xfc>)
 800e8d4:	781a      	ldrb	r2, [r3, #0]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e8e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4a08      	ldr	r2, [pc, #32]	@ (800e908 <tcp_alloc+0x100>)
 800e8e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	4a07      	ldr	r2, [pc, #28]	@ (800e90c <tcp_alloc+0x104>)
 800e8f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20008404 	.word	0x20008404
 800e904:	2000841a 	.word	0x2000841a
 800e908:	0800e5c1 	.word	0x0800e5c1
 800e90c:	006ddd00 	.word	0x006ddd00

0800e910 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d107      	bne.n	800e92e <tcp_pcb_purge+0x1e>
 800e91e:	4b21      	ldr	r3, [pc, #132]	@ (800e9a4 <tcp_pcb_purge+0x94>)
 800e920:	f640 0251 	movw	r2, #2129	@ 0x851
 800e924:	4920      	ldr	r1, [pc, #128]	@ (800e9a8 <tcp_pcb_purge+0x98>)
 800e926:	4821      	ldr	r0, [pc, #132]	@ (800e9ac <tcp_pcb_purge+0x9c>)
 800e928:	f008 f906 	bl	8016b38 <iprintf>
 800e92c:	e037      	b.n	800e99e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	7d1b      	ldrb	r3, [r3, #20]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d033      	beq.n	800e99e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e93a:	2b0a      	cmp	r3, #10
 800e93c:	d02f      	beq.n	800e99e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e942:	2b01      	cmp	r3, #1
 800e944:	d02b      	beq.n	800e99e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d007      	beq.n	800e95e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e952:	4618      	mov	r0, r3
 800e954:	f7fe fb6a 	bl	800d02c <pbuf_free>
      pcb->refused_data = NULL;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e962:	2b00      	cmp	r3, #0
 800e964:	d002      	beq.n	800e96c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f98c 	bl	800ec84 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e972:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff fdc7 	bl	800e50c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e982:	4618      	mov	r0, r3
 800e984:	f7ff fdc2 	bl	800e50c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	080188a0 	.word	0x080188a0
 800e9a8:	08018eec 	.word	0x08018eec
 800e9ac:	080188e4 	.word	0x080188e4

0800e9b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d106      	bne.n	800e9ce <tcp_pcb_remove+0x1e>
 800e9c0:	4b3e      	ldr	r3, [pc, #248]	@ (800eabc <tcp_pcb_remove+0x10c>)
 800e9c2:	f640 0283 	movw	r2, #2179	@ 0x883
 800e9c6:	493e      	ldr	r1, [pc, #248]	@ (800eac0 <tcp_pcb_remove+0x110>)
 800e9c8:	483e      	ldr	r0, [pc, #248]	@ (800eac4 <tcp_pcb_remove+0x114>)
 800e9ca:	f008 f8b5 	bl	8016b38 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d106      	bne.n	800e9e2 <tcp_pcb_remove+0x32>
 800e9d4:	4b39      	ldr	r3, [pc, #228]	@ (800eabc <tcp_pcb_remove+0x10c>)
 800e9d6:	f640 0284 	movw	r2, #2180	@ 0x884
 800e9da:	493b      	ldr	r1, [pc, #236]	@ (800eac8 <tcp_pcb_remove+0x118>)
 800e9dc:	4839      	ldr	r0, [pc, #228]	@ (800eac4 <tcp_pcb_remove+0x114>)
 800e9de:	f008 f8ab 	bl	8016b38 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d105      	bne.n	800e9f8 <tcp_pcb_remove+0x48>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	68da      	ldr	r2, [r3, #12]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	e013      	b.n	800ea20 <tcp_pcb_remove+0x70>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	60fb      	str	r3, [r7, #12]
 800e9fe:	e00c      	b.n	800ea1a <tcp_pcb_remove+0x6a>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	683a      	ldr	r2, [r7, #0]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d104      	bne.n	800ea14 <tcp_pcb_remove+0x64>
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	68da      	ldr	r2, [r3, #12]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	60da      	str	r2, [r3, #12]
 800ea12:	e005      	b.n	800ea20 <tcp_pcb_remove+0x70>
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	60fb      	str	r3, [r7, #12]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1ef      	bne.n	800ea00 <tcp_pcb_remove+0x50>
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	2200      	movs	r2, #0
 800ea24:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ea26:	6838      	ldr	r0, [r7, #0]
 800ea28:	f7ff ff72 	bl	800e910 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	7d1b      	ldrb	r3, [r3, #20]
 800ea30:	2b0a      	cmp	r3, #10
 800ea32:	d013      	beq.n	800ea5c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d00f      	beq.n	800ea5c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	8b5b      	ldrh	r3, [r3, #26]
 800ea40:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d009      	beq.n	800ea5c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	8b5b      	ldrh	r3, [r3, #26]
 800ea4c:	f043 0302 	orr.w	r3, r3, #2
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea56:	6838      	ldr	r0, [r7, #0]
 800ea58:	f002 ff76 	bl	8011948 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	7d1b      	ldrb	r3, [r3, #20]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d020      	beq.n	800eaa6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d006      	beq.n	800ea7a <tcp_pcb_remove+0xca>
 800ea6c:	4b13      	ldr	r3, [pc, #76]	@ (800eabc <tcp_pcb_remove+0x10c>)
 800ea6e:	f640 0293 	movw	r2, #2195	@ 0x893
 800ea72:	4916      	ldr	r1, [pc, #88]	@ (800eacc <tcp_pcb_remove+0x11c>)
 800ea74:	4813      	ldr	r0, [pc, #76]	@ (800eac4 <tcp_pcb_remove+0x114>)
 800ea76:	f008 f85f 	bl	8016b38 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d006      	beq.n	800ea90 <tcp_pcb_remove+0xe0>
 800ea82:	4b0e      	ldr	r3, [pc, #56]	@ (800eabc <tcp_pcb_remove+0x10c>)
 800ea84:	f640 0294 	movw	r2, #2196	@ 0x894
 800ea88:	4911      	ldr	r1, [pc, #68]	@ (800ead0 <tcp_pcb_remove+0x120>)
 800ea8a:	480e      	ldr	r0, [pc, #56]	@ (800eac4 <tcp_pcb_remove+0x114>)
 800ea8c:	f008 f854 	bl	8016b38 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d006      	beq.n	800eaa6 <tcp_pcb_remove+0xf6>
 800ea98:	4b08      	ldr	r3, [pc, #32]	@ (800eabc <tcp_pcb_remove+0x10c>)
 800ea9a:	f640 0296 	movw	r2, #2198	@ 0x896
 800ea9e:	490d      	ldr	r1, [pc, #52]	@ (800ead4 <tcp_pcb_remove+0x124>)
 800eaa0:	4808      	ldr	r0, [pc, #32]	@ (800eac4 <tcp_pcb_remove+0x114>)
 800eaa2:	f008 f849 	bl	8016b38 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2200      	movs	r2, #0
 800eab0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800eab2:	bf00      	nop
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	080188a0 	.word	0x080188a0
 800eac0:	08018f08 	.word	0x08018f08
 800eac4:	080188e4 	.word	0x080188e4
 800eac8:	08018f24 	.word	0x08018f24
 800eacc:	08018f44 	.word	0x08018f44
 800ead0:	08018f5c 	.word	0x08018f5c
 800ead4:	08018f78 	.word	0x08018f78

0800ead8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <tcp_next_iss+0x1c>
 800eae6:	4b0a      	ldr	r3, [pc, #40]	@ (800eb10 <tcp_next_iss+0x38>)
 800eae8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800eaec:	4909      	ldr	r1, [pc, #36]	@ (800eb14 <tcp_next_iss+0x3c>)
 800eaee:	480a      	ldr	r0, [pc, #40]	@ (800eb18 <tcp_next_iss+0x40>)
 800eaf0:	f008 f822 	bl	8016b38 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eaf4:	4b09      	ldr	r3, [pc, #36]	@ (800eb1c <tcp_next_iss+0x44>)
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	4b09      	ldr	r3, [pc, #36]	@ (800eb20 <tcp_next_iss+0x48>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4413      	add	r3, r2
 800eafe:	4a07      	ldr	r2, [pc, #28]	@ (800eb1c <tcp_next_iss+0x44>)
 800eb00:	6013      	str	r3, [r2, #0]
  return iss;
 800eb02:	4b06      	ldr	r3, [pc, #24]	@ (800eb1c <tcp_next_iss+0x44>)
 800eb04:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	080188a0 	.word	0x080188a0
 800eb14:	08018f90 	.word	0x08018f90
 800eb18:	080188e4 	.word	0x080188e4
 800eb1c:	20000068 	.word	0x20000068
 800eb20:	20008404 	.word	0x20008404

0800eb24 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d106      	bne.n	800eb46 <tcp_eff_send_mss_netif+0x22>
 800eb38:	4b14      	ldr	r3, [pc, #80]	@ (800eb8c <tcp_eff_send_mss_netif+0x68>)
 800eb3a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800eb3e:	4914      	ldr	r1, [pc, #80]	@ (800eb90 <tcp_eff_send_mss_netif+0x6c>)
 800eb40:	4814      	ldr	r0, [pc, #80]	@ (800eb94 <tcp_eff_send_mss_netif+0x70>)
 800eb42:	f007 fff9 	bl	8016b38 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d101      	bne.n	800eb50 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800eb4c:	89fb      	ldrh	r3, [r7, #14]
 800eb4e:	e019      	b.n	800eb84 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eb54:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800eb56:	8afb      	ldrh	r3, [r7, #22]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d012      	beq.n	800eb82 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eb5c:	2328      	movs	r3, #40	@ 0x28
 800eb5e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eb60:	8afa      	ldrh	r2, [r7, #22]
 800eb62:	8abb      	ldrh	r3, [r7, #20]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d904      	bls.n	800eb72 <tcp_eff_send_mss_netif+0x4e>
 800eb68:	8afa      	ldrh	r2, [r7, #22]
 800eb6a:	8abb      	ldrh	r3, [r7, #20]
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	e000      	b.n	800eb74 <tcp_eff_send_mss_netif+0x50>
 800eb72:	2300      	movs	r3, #0
 800eb74:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eb76:	8a7a      	ldrh	r2, [r7, #18]
 800eb78:	89fb      	ldrh	r3, [r7, #14]
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	bf28      	it	cs
 800eb7e:	4613      	movcs	r3, r2
 800eb80:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eb82:	89fb      	ldrh	r3, [r7, #14]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3718      	adds	r7, #24
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	080188a0 	.word	0x080188a0
 800eb90:	08018fac 	.word	0x08018fac
 800eb94:	080188e4 	.word	0x080188e4

0800eb98 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d11d      	bne.n	800ebe8 <tcp_netif_ip_addr_changed_pcblist+0x50>
 800ebac:	4b12      	ldr	r3, [pc, #72]	@ (800ebf8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ebae:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ebb2:	4912      	ldr	r1, [pc, #72]	@ (800ebfc <tcp_netif_ip_addr_changed_pcblist+0x64>)
 800ebb4:	4812      	ldr	r0, [pc, #72]	@ (800ec00 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800ebb6:	f007 ffbf 	bl	8016b38 <iprintf>

  while (pcb != NULL) {
 800ebba:	e015      	b.n	800ebe8 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d10c      	bne.n	800ebe2 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800ebce:	68f9      	ldr	r1, [r7, #12]
 800ebd0:	480c      	ldr	r0, [pc, #48]	@ (800ec04 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800ebd2:	f007 ffb1 	bl	8016b38 <iprintf>
      tcp_abort(pcb);
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f7fe ffc0 	bl	800db5c <tcp_abort>
      pcb = next;
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	60fb      	str	r3, [r7, #12]
 800ebe0:	e002      	b.n	800ebe8 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	68db      	ldr	r3, [r3, #12]
 800ebe6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1e6      	bne.n	800ebbc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ebee:	bf00      	nop
 800ebf0:	bf00      	nop
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	080188a0 	.word	0x080188a0
 800ebfc:	08018fd4 	.word	0x08018fd4
 800ec00:	080188e4 	.word	0x080188e4
 800ec04:	08019008 	.word	0x08019008

0800ec08 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d02a      	beq.n	800ec6e <tcp_netif_ip_addr_changed+0x66>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d026      	beq.n	800ec6e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ec20:	4b15      	ldr	r3, [pc, #84]	@ (800ec78 <tcp_netif_ip_addr_changed+0x70>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4619      	mov	r1, r3
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7ff ffb6 	bl	800eb98 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ec2c:	4b13      	ldr	r3, [pc, #76]	@ (800ec7c <tcp_netif_ip_addr_changed+0x74>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4619      	mov	r1, r3
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff ffb0 	bl	800eb98 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d017      	beq.n	800ec6e <tcp_netif_ip_addr_changed+0x66>
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d013      	beq.n	800ec6e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec46:	4b0e      	ldr	r3, [pc, #56]	@ (800ec80 <tcp_netif_ip_addr_changed+0x78>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	e00c      	b.n	800ec68 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d103      	bne.n	800ec62 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	68db      	ldr	r3, [r3, #12]
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1ef      	bne.n	800ec4e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ec6e:	bf00      	nop
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20008410 	.word	0x20008410
 800ec7c:	20008408 	.word	0x20008408
 800ec80:	2000840c 	.word	0x2000840c

0800ec84 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d007      	beq.n	800eca4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fc37 	bl	800e50c <tcp_segs_free>
    pcb->ooseq = NULL;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ecac:	b590      	push	{r4, r7, lr}
 800ecae:	b08d      	sub	sp, #52	@ 0x34
 800ecb0:	af04      	add	r7, sp, #16
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d105      	bne.n	800ecc8 <tcp_input+0x1c>
 800ecbc:	4b9b      	ldr	r3, [pc, #620]	@ (800ef2c <tcp_input+0x280>)
 800ecbe:	2283      	movs	r2, #131	@ 0x83
 800ecc0:	499b      	ldr	r1, [pc, #620]	@ (800ef30 <tcp_input+0x284>)
 800ecc2:	489c      	ldr	r0, [pc, #624]	@ (800ef34 <tcp_input+0x288>)
 800ecc4:	f007 ff38 	bl	8016b38 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	4a9a      	ldr	r2, [pc, #616]	@ (800ef38 <tcp_input+0x28c>)
 800ecce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	895b      	ldrh	r3, [r3, #10]
 800ecd4:	2b13      	cmp	r3, #19
 800ecd6:	f240 83d1 	bls.w	800f47c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ecda:	4b98      	ldr	r3, [pc, #608]	@ (800ef3c <tcp_input+0x290>)
 800ecdc:	695b      	ldr	r3, [r3, #20]
 800ecde:	4a97      	ldr	r2, [pc, #604]	@ (800ef3c <tcp_input+0x290>)
 800ece0:	6812      	ldr	r2, [r2, #0]
 800ece2:	4611      	mov	r1, r2
 800ece4:	4618      	mov	r0, r3
 800ece6:	f006 f9a5 	bl	8015034 <ip4_addr_isbroadcast_u32>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f040 83c7 	bne.w	800f480 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ecf2:	4b92      	ldr	r3, [pc, #584]	@ (800ef3c <tcp_input+0x290>)
 800ecf4:	695b      	ldr	r3, [r3, #20]
 800ecf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ecfa:	2be0      	cmp	r3, #224	@ 0xe0
 800ecfc:	f000 83c0 	beq.w	800f480 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ed00:	4b8d      	ldr	r3, [pc, #564]	@ (800ef38 <tcp_input+0x28c>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	899b      	ldrh	r3, [r3, #12]
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fc fd3f 	bl	800b78c <lwip_htons>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	0b1b      	lsrs	r3, r3, #12
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ed1a:	7cbb      	ldrb	r3, [r7, #18]
 800ed1c:	2b13      	cmp	r3, #19
 800ed1e:	f240 83b1 	bls.w	800f484 <tcp_input+0x7d8>
 800ed22:	7cbb      	ldrb	r3, [r7, #18]
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	891b      	ldrh	r3, [r3, #8]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	f200 83aa 	bhi.w	800f484 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ed30:	7cbb      	ldrb	r3, [r7, #18]
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	3b14      	subs	r3, #20
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	4b81      	ldr	r3, [pc, #516]	@ (800ef40 <tcp_input+0x294>)
 800ed3a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ed3c:	4b81      	ldr	r3, [pc, #516]	@ (800ef44 <tcp_input+0x298>)
 800ed3e:	2200      	movs	r2, #0
 800ed40:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	895a      	ldrh	r2, [r3, #10]
 800ed46:	7cbb      	ldrb	r3, [r7, #18]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d309      	bcc.n	800ed62 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ed4e:	4b7c      	ldr	r3, [pc, #496]	@ (800ef40 <tcp_input+0x294>)
 800ed50:	881a      	ldrh	r2, [r3, #0]
 800ed52:	4b7d      	ldr	r3, [pc, #500]	@ (800ef48 <tcp_input+0x29c>)
 800ed54:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ed56:	7cbb      	ldrb	r3, [r7, #18]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7fe f8e0 	bl	800cf20 <pbuf_remove_header>
 800ed60:	e04e      	b.n	800ee00 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d105      	bne.n	800ed76 <tcp_input+0xca>
 800ed6a:	4b70      	ldr	r3, [pc, #448]	@ (800ef2c <tcp_input+0x280>)
 800ed6c:	22c2      	movs	r2, #194	@ 0xc2
 800ed6e:	4977      	ldr	r1, [pc, #476]	@ (800ef4c <tcp_input+0x2a0>)
 800ed70:	4870      	ldr	r0, [pc, #448]	@ (800ef34 <tcp_input+0x288>)
 800ed72:	f007 fee1 	bl	8016b38 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ed76:	2114      	movs	r1, #20
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7fe f8d1 	bl	800cf20 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	895a      	ldrh	r2, [r3, #10]
 800ed82:	4b71      	ldr	r3, [pc, #452]	@ (800ef48 <tcp_input+0x29c>)
 800ed84:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ed86:	4b6e      	ldr	r3, [pc, #440]	@ (800ef40 <tcp_input+0x294>)
 800ed88:	881a      	ldrh	r2, [r3, #0]
 800ed8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ef48 <tcp_input+0x29c>)
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ed92:	4b6d      	ldr	r3, [pc, #436]	@ (800ef48 <tcp_input+0x29c>)
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	4619      	mov	r1, r3
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f7fe f8c1 	bl	800cf20 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	895b      	ldrh	r3, [r3, #10]
 800eda4:	8a3a      	ldrh	r2, [r7, #16]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	f200 836e 	bhi.w	800f488 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	4a64      	ldr	r2, [pc, #400]	@ (800ef44 <tcp_input+0x298>)
 800edb4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	8a3a      	ldrh	r2, [r7, #16]
 800edbc:	4611      	mov	r1, r2
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe f8ae 	bl	800cf20 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	891a      	ldrh	r2, [r3, #8]
 800edc8:	8a3b      	ldrh	r3, [r7, #16]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	b29a      	uxth	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	895b      	ldrh	r3, [r3, #10]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d005      	beq.n	800ede6 <tcp_input+0x13a>
 800edda:	4b54      	ldr	r3, [pc, #336]	@ (800ef2c <tcp_input+0x280>)
 800eddc:	22df      	movs	r2, #223	@ 0xdf
 800edde:	495c      	ldr	r1, [pc, #368]	@ (800ef50 <tcp_input+0x2a4>)
 800ede0:	4854      	ldr	r0, [pc, #336]	@ (800ef34 <tcp_input+0x288>)
 800ede2:	f007 fea9 	bl	8016b38 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	891a      	ldrh	r2, [r3, #8]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	891b      	ldrh	r3, [r3, #8]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d005      	beq.n	800ee00 <tcp_input+0x154>
 800edf4:	4b4d      	ldr	r3, [pc, #308]	@ (800ef2c <tcp_input+0x280>)
 800edf6:	22e0      	movs	r2, #224	@ 0xe0
 800edf8:	4956      	ldr	r1, [pc, #344]	@ (800ef54 <tcp_input+0x2a8>)
 800edfa:	484e      	ldr	r0, [pc, #312]	@ (800ef34 <tcp_input+0x288>)
 800edfc:	f007 fe9c 	bl	8016b38 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ee00:	4b4d      	ldr	r3, [pc, #308]	@ (800ef38 <tcp_input+0x28c>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	881b      	ldrh	r3, [r3, #0]
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	4a4b      	ldr	r2, [pc, #300]	@ (800ef38 <tcp_input+0x28c>)
 800ee0a:	6814      	ldr	r4, [r2, #0]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fc fcbd 	bl	800b78c <lwip_htons>
 800ee12:	4603      	mov	r3, r0
 800ee14:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ee16:	4b48      	ldr	r3, [pc, #288]	@ (800ef38 <tcp_input+0x28c>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	885b      	ldrh	r3, [r3, #2]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4a46      	ldr	r2, [pc, #280]	@ (800ef38 <tcp_input+0x28c>)
 800ee20:	6814      	ldr	r4, [r2, #0]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fc fcb2 	bl	800b78c <lwip_htons>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ee2c:	4b42      	ldr	r3, [pc, #264]	@ (800ef38 <tcp_input+0x28c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	4a41      	ldr	r2, [pc, #260]	@ (800ef38 <tcp_input+0x28c>)
 800ee34:	6814      	ldr	r4, [r2, #0]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fc fcbe 	bl	800b7b8 <lwip_htonl>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	6063      	str	r3, [r4, #4]
 800ee40:	6863      	ldr	r3, [r4, #4]
 800ee42:	4a45      	ldr	r2, [pc, #276]	@ (800ef58 <tcp_input+0x2ac>)
 800ee44:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ee46:	4b3c      	ldr	r3, [pc, #240]	@ (800ef38 <tcp_input+0x28c>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	4a3a      	ldr	r2, [pc, #232]	@ (800ef38 <tcp_input+0x28c>)
 800ee4e:	6814      	ldr	r4, [r2, #0]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fc fcb1 	bl	800b7b8 <lwip_htonl>
 800ee56:	4603      	mov	r3, r0
 800ee58:	60a3      	str	r3, [r4, #8]
 800ee5a:	68a3      	ldr	r3, [r4, #8]
 800ee5c:	4a3f      	ldr	r2, [pc, #252]	@ (800ef5c <tcp_input+0x2b0>)
 800ee5e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ee60:	4b35      	ldr	r3, [pc, #212]	@ (800ef38 <tcp_input+0x28c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	89db      	ldrh	r3, [r3, #14]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	4a33      	ldr	r2, [pc, #204]	@ (800ef38 <tcp_input+0x28c>)
 800ee6a:	6814      	ldr	r4, [r2, #0]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fc fc8d 	bl	800b78c <lwip_htons>
 800ee72:	4603      	mov	r3, r0
 800ee74:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ee76:	4b30      	ldr	r3, [pc, #192]	@ (800ef38 <tcp_input+0x28c>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	899b      	ldrh	r3, [r3, #12]
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fc fc84 	bl	800b78c <lwip_htons>
 800ee84:	4603      	mov	r3, r0
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	4b34      	ldr	r3, [pc, #208]	@ (800ef60 <tcp_input+0x2b4>)
 800ee90:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	891a      	ldrh	r2, [r3, #8]
 800ee96:	4b33      	ldr	r3, [pc, #204]	@ (800ef64 <tcp_input+0x2b8>)
 800ee98:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ee9a:	4b31      	ldr	r3, [pc, #196]	@ (800ef60 <tcp_input+0x2b4>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	f003 0303 	and.w	r3, r3, #3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00c      	beq.n	800eec0 <tcp_input+0x214>
    tcplen++;
 800eea6:	4b2f      	ldr	r3, [pc, #188]	@ (800ef64 <tcp_input+0x2b8>)
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	4b2d      	ldr	r3, [pc, #180]	@ (800ef64 <tcp_input+0x2b8>)
 800eeb0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	891a      	ldrh	r2, [r3, #8]
 800eeb6:	4b2b      	ldr	r3, [pc, #172]	@ (800ef64 <tcp_input+0x2b8>)
 800eeb8:	881b      	ldrh	r3, [r3, #0]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	f200 82e6 	bhi.w	800f48c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800eec0:	2300      	movs	r3, #0
 800eec2:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eec4:	4b28      	ldr	r3, [pc, #160]	@ (800ef68 <tcp_input+0x2bc>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	61bb      	str	r3, [r7, #24]
 800eeca:	e09d      	b.n	800f008 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	7d1b      	ldrb	r3, [r3, #20]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d105      	bne.n	800eee0 <tcp_input+0x234>
 800eed4:	4b15      	ldr	r3, [pc, #84]	@ (800ef2c <tcp_input+0x280>)
 800eed6:	22fb      	movs	r2, #251	@ 0xfb
 800eed8:	4924      	ldr	r1, [pc, #144]	@ (800ef6c <tcp_input+0x2c0>)
 800eeda:	4816      	ldr	r0, [pc, #88]	@ (800ef34 <tcp_input+0x288>)
 800eedc:	f007 fe2c 	bl	8016b38 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	7d1b      	ldrb	r3, [r3, #20]
 800eee4:	2b0a      	cmp	r3, #10
 800eee6:	d105      	bne.n	800eef4 <tcp_input+0x248>
 800eee8:	4b10      	ldr	r3, [pc, #64]	@ (800ef2c <tcp_input+0x280>)
 800eeea:	22fc      	movs	r2, #252	@ 0xfc
 800eeec:	4920      	ldr	r1, [pc, #128]	@ (800ef70 <tcp_input+0x2c4>)
 800eeee:	4811      	ldr	r0, [pc, #68]	@ (800ef34 <tcp_input+0x288>)
 800eef0:	f007 fe22 	bl	8016b38 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	7d1b      	ldrb	r3, [r3, #20]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d105      	bne.n	800ef08 <tcp_input+0x25c>
 800eefc:	4b0b      	ldr	r3, [pc, #44]	@ (800ef2c <tcp_input+0x280>)
 800eefe:	22fd      	movs	r2, #253	@ 0xfd
 800ef00:	491c      	ldr	r1, [pc, #112]	@ (800ef74 <tcp_input+0x2c8>)
 800ef02:	480c      	ldr	r0, [pc, #48]	@ (800ef34 <tcp_input+0x288>)
 800ef04:	f007 fe18 	bl	8016b38 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	7a1b      	ldrb	r3, [r3, #8]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d033      	beq.n	800ef78 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	7a1a      	ldrb	r2, [r3, #8]
 800ef14:	4b09      	ldr	r3, [pc, #36]	@ (800ef3c <tcp_input+0x290>)
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d029      	beq.n	800ef78 <tcp_input+0x2cc>
      prev = pcb;
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	61fb      	str	r3, [r7, #28]
      continue;
 800ef28:	e06b      	b.n	800f002 <tcp_input+0x356>
 800ef2a:	bf00      	nop
 800ef2c:	08019030 	.word	0x08019030
 800ef30:	08019064 	.word	0x08019064
 800ef34:	0801907c 	.word	0x0801907c
 800ef38:	20008430 	.word	0x20008430
 800ef3c:	200054a8 	.word	0x200054a8
 800ef40:	20008434 	.word	0x20008434
 800ef44:	20008438 	.word	0x20008438
 800ef48:	20008436 	.word	0x20008436
 800ef4c:	080190a4 	.word	0x080190a4
 800ef50:	080190b4 	.word	0x080190b4
 800ef54:	080190c0 	.word	0x080190c0
 800ef58:	20008440 	.word	0x20008440
 800ef5c:	20008444 	.word	0x20008444
 800ef60:	2000844c 	.word	0x2000844c
 800ef64:	2000844a 	.word	0x2000844a
 800ef68:	20008410 	.word	0x20008410
 800ef6c:	080190e0 	.word	0x080190e0
 800ef70:	08019108 	.word	0x08019108
 800ef74:	08019134 	.word	0x08019134
    }

    if (pcb->remote_port == tcphdr->src &&
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	8b1a      	ldrh	r2, [r3, #24]
 800ef7c:	4b72      	ldr	r3, [pc, #456]	@ (800f148 <tcp_input+0x49c>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d13a      	bne.n	800effe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	8ada      	ldrh	r2, [r3, #22]
 800ef8c:	4b6e      	ldr	r3, [pc, #440]	@ (800f148 <tcp_input+0x49c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	885b      	ldrh	r3, [r3, #2]
 800ef92:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d132      	bne.n	800effe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	4b6b      	ldr	r3, [pc, #428]	@ (800f14c <tcp_input+0x4a0>)
 800ef9e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d12c      	bne.n	800effe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	4b68      	ldr	r3, [pc, #416]	@ (800f14c <tcp_input+0x4a0>)
 800efaa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800efac:	429a      	cmp	r2, r3
 800efae:	d126      	bne.n	800effe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	69ba      	ldr	r2, [r7, #24]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d106      	bne.n	800efc8 <tcp_input+0x31c>
 800efba:	4b65      	ldr	r3, [pc, #404]	@ (800f150 <tcp_input+0x4a4>)
 800efbc:	f240 120d 	movw	r2, #269	@ 0x10d
 800efc0:	4964      	ldr	r1, [pc, #400]	@ (800f154 <tcp_input+0x4a8>)
 800efc2:	4865      	ldr	r0, [pc, #404]	@ (800f158 <tcp_input+0x4ac>)
 800efc4:	f007 fdb8 	bl	8016b38 <iprintf>
      if (prev != NULL) {
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00a      	beq.n	800efe4 <tcp_input+0x338>
        prev->next = pcb->next;
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	68da      	ldr	r2, [r3, #12]
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800efd6:	4b61      	ldr	r3, [pc, #388]	@ (800f15c <tcp_input+0x4b0>)
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800efde:	4a5f      	ldr	r2, [pc, #380]	@ (800f15c <tcp_input+0x4b0>)
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	69ba      	ldr	r2, [r7, #24]
 800efea:	429a      	cmp	r2, r3
 800efec:	d111      	bne.n	800f012 <tcp_input+0x366>
 800efee:	4b58      	ldr	r3, [pc, #352]	@ (800f150 <tcp_input+0x4a4>)
 800eff0:	f240 1215 	movw	r2, #277	@ 0x115
 800eff4:	495a      	ldr	r1, [pc, #360]	@ (800f160 <tcp_input+0x4b4>)
 800eff6:	4858      	ldr	r0, [pc, #352]	@ (800f158 <tcp_input+0x4ac>)
 800eff8:	f007 fd9e 	bl	8016b38 <iprintf>
      break;
 800effc:	e009      	b.n	800f012 <tcp_input+0x366>
    }
    prev = pcb;
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	61bb      	str	r3, [r7, #24]
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f47f af5e 	bne.w	800eecc <tcp_input+0x220>
 800f010:	e000      	b.n	800f014 <tcp_input+0x368>
      break;
 800f012:	bf00      	nop
  }

  if (pcb == NULL) {
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f040 80aa 	bne.w	800f170 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f01c:	4b51      	ldr	r3, [pc, #324]	@ (800f164 <tcp_input+0x4b8>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	61bb      	str	r3, [r7, #24]
 800f022:	e03f      	b.n	800f0a4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	7d1b      	ldrb	r3, [r3, #20]
 800f028:	2b0a      	cmp	r3, #10
 800f02a:	d006      	beq.n	800f03a <tcp_input+0x38e>
 800f02c:	4b48      	ldr	r3, [pc, #288]	@ (800f150 <tcp_input+0x4a4>)
 800f02e:	f240 121f 	movw	r2, #287	@ 0x11f
 800f032:	494d      	ldr	r1, [pc, #308]	@ (800f168 <tcp_input+0x4bc>)
 800f034:	4848      	ldr	r0, [pc, #288]	@ (800f158 <tcp_input+0x4ac>)
 800f036:	f007 fd7f 	bl	8016b38 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	7a1b      	ldrb	r3, [r3, #8]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d009      	beq.n	800f056 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	7a1a      	ldrb	r2, [r3, #8]
 800f046:	4b41      	ldr	r3, [pc, #260]	@ (800f14c <tcp_input+0x4a0>)
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f04e:	3301      	adds	r3, #1
 800f050:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f052:	429a      	cmp	r2, r3
 800f054:	d122      	bne.n	800f09c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	8b1a      	ldrh	r2, [r3, #24]
 800f05a:	4b3b      	ldr	r3, [pc, #236]	@ (800f148 <tcp_input+0x49c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	b29b      	uxth	r3, r3
 800f062:	429a      	cmp	r2, r3
 800f064:	d11b      	bne.n	800f09e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	8ada      	ldrh	r2, [r3, #22]
 800f06a:	4b37      	ldr	r3, [pc, #220]	@ (800f148 <tcp_input+0x49c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	885b      	ldrh	r3, [r3, #2]
 800f070:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f072:	429a      	cmp	r2, r3
 800f074:	d113      	bne.n	800f09e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	685a      	ldr	r2, [r3, #4]
 800f07a:	4b34      	ldr	r3, [pc, #208]	@ (800f14c <tcp_input+0x4a0>)
 800f07c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f07e:	429a      	cmp	r2, r3
 800f080:	d10d      	bne.n	800f09e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	4b31      	ldr	r3, [pc, #196]	@ (800f14c <tcp_input+0x4a0>)
 800f088:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d107      	bne.n	800f09e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f08e:	69b8      	ldr	r0, [r7, #24]
 800f090:	f000 fb56 	bl	800f740 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7fd ffc9 	bl	800d02c <pbuf_free>
        return;
 800f09a:	e1fd      	b.n	800f498 <tcp_input+0x7ec>
        continue;
 800f09c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	61bb      	str	r3, [r7, #24]
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1bc      	bne.n	800f024 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f0ae:	4b2f      	ldr	r3, [pc, #188]	@ (800f16c <tcp_input+0x4c0>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	617b      	str	r3, [r7, #20]
 800f0b4:	e02a      	b.n	800f10c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	7a1b      	ldrb	r3, [r3, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00c      	beq.n	800f0d8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	7a1a      	ldrb	r2, [r3, #8]
 800f0c2:	4b22      	ldr	r3, [pc, #136]	@ (800f14c <tcp_input+0x4a0>)
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d002      	beq.n	800f0d8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	61fb      	str	r3, [r7, #28]
        continue;
 800f0d6:	e016      	b.n	800f106 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	8ada      	ldrh	r2, [r3, #22]
 800f0dc:	4b1a      	ldr	r3, [pc, #104]	@ (800f148 <tcp_input+0x49c>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	885b      	ldrh	r3, [r3, #2]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d10c      	bne.n	800f102 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	4b17      	ldr	r3, [pc, #92]	@ (800f14c <tcp_input+0x4a0>)
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d00f      	beq.n	800f114 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00d      	beq.n	800f116 <tcp_input+0x46a>
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d009      	beq.n	800f116 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	617b      	str	r3, [r7, #20]
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1d1      	bne.n	800f0b6 <tcp_input+0x40a>
 800f112:	e000      	b.n	800f116 <tcp_input+0x46a>
            break;
 800f114:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d029      	beq.n	800f170 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00a      	beq.n	800f138 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	68da      	ldr	r2, [r3, #12]
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f12a:	4b10      	ldr	r3, [pc, #64]	@ (800f16c <tcp_input+0x4c0>)
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f132:	4a0e      	ldr	r2, [pc, #56]	@ (800f16c <tcp_input+0x4c0>)
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f138:	6978      	ldr	r0, [r7, #20]
 800f13a:	f000 fa03 	bl	800f544 <tcp_listen_input>
      }
      pbuf_free(p);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7fd ff74 	bl	800d02c <pbuf_free>
      return;
 800f144:	e1a8      	b.n	800f498 <tcp_input+0x7ec>
 800f146:	bf00      	nop
 800f148:	20008430 	.word	0x20008430
 800f14c:	200054a8 	.word	0x200054a8
 800f150:	08019030 	.word	0x08019030
 800f154:	0801915c 	.word	0x0801915c
 800f158:	0801907c 	.word	0x0801907c
 800f15c:	20008410 	.word	0x20008410
 800f160:	08019188 	.word	0x08019188
 800f164:	20008414 	.word	0x20008414
 800f168:	080191b4 	.word	0x080191b4
 800f16c:	2000840c 	.word	0x2000840c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 8158 	beq.w	800f428 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f178:	4b95      	ldr	r3, [pc, #596]	@ (800f3d0 <tcp_input+0x724>)
 800f17a:	2200      	movs	r2, #0
 800f17c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	891a      	ldrh	r2, [r3, #8]
 800f182:	4b93      	ldr	r3, [pc, #588]	@ (800f3d0 <tcp_input+0x724>)
 800f184:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f186:	4a92      	ldr	r2, [pc, #584]	@ (800f3d0 <tcp_input+0x724>)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f18c:	4b91      	ldr	r3, [pc, #580]	@ (800f3d4 <tcp_input+0x728>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a8f      	ldr	r2, [pc, #572]	@ (800f3d0 <tcp_input+0x724>)
 800f192:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800f194:	4b90      	ldr	r3, [pc, #576]	@ (800f3d8 <tcp_input+0x72c>)
 800f196:	2200      	movs	r2, #0
 800f198:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f19a:	4b90      	ldr	r3, [pc, #576]	@ (800f3dc <tcp_input+0x730>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f1a0:	4b8f      	ldr	r3, [pc, #572]	@ (800f3e0 <tcp_input+0x734>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f1a6:	4b8f      	ldr	r3, [pc, #572]	@ (800f3e4 <tcp_input+0x738>)
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 0308 	and.w	r3, r3, #8
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d006      	beq.n	800f1c0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	7b5b      	ldrb	r3, [r3, #13]
 800f1b6:	f043 0301 	orr.w	r3, r3, #1
 800f1ba:	b2da      	uxtb	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d017      	beq.n	800f1f8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f1c8:	69b8      	ldr	r0, [r7, #24]
 800f1ca:	f7ff f923 	bl	800e414 <tcp_process_refused_data>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f113 0f0d 	cmn.w	r3, #13
 800f1d4:	d007      	beq.n	800f1e6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00c      	beq.n	800f1f8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f1de:	4b82      	ldr	r3, [pc, #520]	@ (800f3e8 <tcp_input+0x73c>)
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d008      	beq.n	800f1f8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f1e6:	69bb      	ldr	r3, [r7, #24]
 800f1e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f040 80e3 	bne.w	800f3b6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f1f0:	69b8      	ldr	r0, [r7, #24]
 800f1f2:	f003 f9bb 	bl	801256c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f1f6:	e0de      	b.n	800f3b6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f1f8:	4a7c      	ldr	r2, [pc, #496]	@ (800f3ec <tcp_input+0x740>)
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f1fe:	69b8      	ldr	r0, [r7, #24]
 800f200:	f000 fb18 	bl	800f834 <tcp_process>
 800f204:	4603      	mov	r3, r0
 800f206:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f208:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f20c:	f113 0f0d 	cmn.w	r3, #13
 800f210:	f000 80d3 	beq.w	800f3ba <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f214:	4b71      	ldr	r3, [pc, #452]	@ (800f3dc <tcp_input+0x730>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 0308 	and.w	r3, r3, #8
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d015      	beq.n	800f24c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f226:	2b00      	cmp	r3, #0
 800f228:	d008      	beq.n	800f23c <tcp_input+0x590>
 800f22a:	69bb      	ldr	r3, [r7, #24]
 800f22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f230:	69ba      	ldr	r2, [r7, #24]
 800f232:	6912      	ldr	r2, [r2, #16]
 800f234:	f06f 010d 	mvn.w	r1, #13
 800f238:	4610      	mov	r0, r2
 800f23a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f23c:	69b9      	ldr	r1, [r7, #24]
 800f23e:	486c      	ldr	r0, [pc, #432]	@ (800f3f0 <tcp_input+0x744>)
 800f240:	f7ff fbb6 	bl	800e9b0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f244:	69b8      	ldr	r0, [r7, #24]
 800f246:	f7fe f9a1 	bl	800d58c <tcp_free>
 800f24a:	e0da      	b.n	800f402 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f250:	4b63      	ldr	r3, [pc, #396]	@ (800f3e0 <tcp_input+0x734>)
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d01d      	beq.n	800f294 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f258:	4b61      	ldr	r3, [pc, #388]	@ (800f3e0 <tcp_input+0x734>)
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00a      	beq.n	800f27e <tcp_input+0x5d2>
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f26e:	69ba      	ldr	r2, [r7, #24]
 800f270:	6910      	ldr	r0, [r2, #16]
 800f272:	89fa      	ldrh	r2, [r7, #14]
 800f274:	69b9      	ldr	r1, [r7, #24]
 800f276:	4798      	blx	r3
 800f278:	4603      	mov	r3, r0
 800f27a:	74fb      	strb	r3, [r7, #19]
 800f27c:	e001      	b.n	800f282 <tcp_input+0x5d6>
 800f27e:	2300      	movs	r3, #0
 800f280:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f282:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f286:	f113 0f0d 	cmn.w	r3, #13
 800f28a:	f000 8098 	beq.w	800f3be <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f28e:	4b54      	ldr	r3, [pc, #336]	@ (800f3e0 <tcp_input+0x734>)
 800f290:	2200      	movs	r2, #0
 800f292:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f294:	69b8      	ldr	r0, [r7, #24]
 800f296:	f000 f915 	bl	800f4c4 <tcp_input_delayed_close>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f040 8090 	bne.w	800f3c2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f2a2:	4b4d      	ldr	r3, [pc, #308]	@ (800f3d8 <tcp_input+0x72c>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d041      	beq.n	800f32e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d006      	beq.n	800f2c0 <tcp_input+0x614>
 800f2b2:	4b50      	ldr	r3, [pc, #320]	@ (800f3f4 <tcp_input+0x748>)
 800f2b4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f2b8:	494f      	ldr	r1, [pc, #316]	@ (800f3f8 <tcp_input+0x74c>)
 800f2ba:	4850      	ldr	r0, [pc, #320]	@ (800f3fc <tcp_input+0x750>)
 800f2bc:	f007 fc3c 	bl	8016b38 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	8b5b      	ldrh	r3, [r3, #26]
 800f2c4:	f003 0310 	and.w	r3, r3, #16
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d008      	beq.n	800f2de <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f2cc:	4b42      	ldr	r3, [pc, #264]	@ (800f3d8 <tcp_input+0x72c>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fd feab 	bl	800d02c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f2d6:	69b8      	ldr	r0, [r7, #24]
 800f2d8:	f7fe fc40 	bl	800db5c <tcp_abort>
            goto aborted;
 800f2dc:	e091      	b.n	800f402 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00c      	beq.n	800f302 <tcp_input+0x656>
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	6918      	ldr	r0, [r3, #16]
 800f2f2:	4b39      	ldr	r3, [pc, #228]	@ (800f3d8 <tcp_input+0x72c>)
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	69b9      	ldr	r1, [r7, #24]
 800f2fa:	47a0      	blx	r4
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	74fb      	strb	r3, [r7, #19]
 800f300:	e008      	b.n	800f314 <tcp_input+0x668>
 800f302:	4b35      	ldr	r3, [pc, #212]	@ (800f3d8 <tcp_input+0x72c>)
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	2300      	movs	r3, #0
 800f308:	69b9      	ldr	r1, [r7, #24]
 800f30a:	2000      	movs	r0, #0
 800f30c:	f7ff f958 	bl	800e5c0 <tcp_recv_null>
 800f310:	4603      	mov	r3, r0
 800f312:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f314:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f318:	f113 0f0d 	cmn.w	r3, #13
 800f31c:	d053      	beq.n	800f3c6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f31e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d003      	beq.n	800f32e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f326:	4b2c      	ldr	r3, [pc, #176]	@ (800f3d8 <tcp_input+0x72c>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f32e:	4b2b      	ldr	r3, [pc, #172]	@ (800f3dc <tcp_input+0x730>)
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	f003 0320 	and.w	r3, r3, #32
 800f336:	2b00      	cmp	r3, #0
 800f338:	d030      	beq.n	800f39c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d009      	beq.n	800f356 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f346:	7b5a      	ldrb	r2, [r3, #13]
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f34c:	f042 0220 	orr.w	r2, r2, #32
 800f350:	b2d2      	uxtb	r2, r2
 800f352:	735a      	strb	r2, [r3, #13]
 800f354:	e022      	b.n	800f39c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f35a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f35e:	d005      	beq.n	800f36c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f364:	3301      	adds	r3, #1
 800f366:	b29a      	uxth	r2, r3
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00b      	beq.n	800f38e <tcp_input+0x6e2>
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	6918      	ldr	r0, [r3, #16]
 800f380:	2300      	movs	r3, #0
 800f382:	2200      	movs	r2, #0
 800f384:	69b9      	ldr	r1, [r7, #24]
 800f386:	47a0      	blx	r4
 800f388:	4603      	mov	r3, r0
 800f38a:	74fb      	strb	r3, [r7, #19]
 800f38c:	e001      	b.n	800f392 <tcp_input+0x6e6>
 800f38e:	2300      	movs	r3, #0
 800f390:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f392:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f396:	f113 0f0d 	cmn.w	r3, #13
 800f39a:	d016      	beq.n	800f3ca <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f39c:	4b13      	ldr	r3, [pc, #76]	@ (800f3ec <tcp_input+0x740>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f3a2:	69b8      	ldr	r0, [r7, #24]
 800f3a4:	f000 f88e 	bl	800f4c4 <tcp_input_delayed_close>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d128      	bne.n	800f400 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f3ae:	69b8      	ldr	r0, [r7, #24]
 800f3b0:	f002 faca 	bl	8011948 <tcp_output>
 800f3b4:	e025      	b.n	800f402 <tcp_input+0x756>
        goto aborted;
 800f3b6:	bf00      	nop
 800f3b8:	e023      	b.n	800f402 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f3ba:	bf00      	nop
 800f3bc:	e021      	b.n	800f402 <tcp_input+0x756>
              goto aborted;
 800f3be:	bf00      	nop
 800f3c0:	e01f      	b.n	800f402 <tcp_input+0x756>
          goto aborted;
 800f3c2:	bf00      	nop
 800f3c4:	e01d      	b.n	800f402 <tcp_input+0x756>
            goto aborted;
 800f3c6:	bf00      	nop
 800f3c8:	e01b      	b.n	800f402 <tcp_input+0x756>
              goto aborted;
 800f3ca:	bf00      	nop
 800f3cc:	e019      	b.n	800f402 <tcp_input+0x756>
 800f3ce:	bf00      	nop
 800f3d0:	2000841c 	.word	0x2000841c
 800f3d4:	20008430 	.word	0x20008430
 800f3d8:	20008450 	.word	0x20008450
 800f3dc:	2000844d 	.word	0x2000844d
 800f3e0:	20008448 	.word	0x20008448
 800f3e4:	2000844c 	.word	0x2000844c
 800f3e8:	2000844a 	.word	0x2000844a
 800f3ec:	20008454 	.word	0x20008454
 800f3f0:	20008410 	.word	0x20008410
 800f3f4:	08019030 	.word	0x08019030
 800f3f8:	080191e4 	.word	0x080191e4
 800f3fc:	0801907c 	.word	0x0801907c
          goto aborted;
 800f400:	bf00      	nop
    tcp_input_pcb = NULL;
 800f402:	4b27      	ldr	r3, [pc, #156]	@ (800f4a0 <tcp_input+0x7f4>)
 800f404:	2200      	movs	r2, #0
 800f406:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f408:	4b26      	ldr	r3, [pc, #152]	@ (800f4a4 <tcp_input+0x7f8>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f40e:	4b26      	ldr	r3, [pc, #152]	@ (800f4a8 <tcp_input+0x7fc>)
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d03f      	beq.n	800f496 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f416:	4b24      	ldr	r3, [pc, #144]	@ (800f4a8 <tcp_input+0x7fc>)
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fd fe06 	bl	800d02c <pbuf_free>
      inseg.p = NULL;
 800f420:	4b21      	ldr	r3, [pc, #132]	@ (800f4a8 <tcp_input+0x7fc>)
 800f422:	2200      	movs	r2, #0
 800f424:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f426:	e036      	b.n	800f496 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f428:	4b20      	ldr	r3, [pc, #128]	@ (800f4ac <tcp_input+0x800>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	899b      	ldrh	r3, [r3, #12]
 800f42e:	b29b      	uxth	r3, r3
 800f430:	4618      	mov	r0, r3
 800f432:	f7fc f9ab 	bl	800b78c <lwip_htons>
 800f436:	4603      	mov	r3, r0
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	f003 0304 	and.w	r3, r3, #4
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d118      	bne.n	800f474 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f442:	4b1b      	ldr	r3, [pc, #108]	@ (800f4b0 <tcp_input+0x804>)
 800f444:	6819      	ldr	r1, [r3, #0]
 800f446:	4b1b      	ldr	r3, [pc, #108]	@ (800f4b4 <tcp_input+0x808>)
 800f448:	881b      	ldrh	r3, [r3, #0]
 800f44a:	461a      	mov	r2, r3
 800f44c:	4b1a      	ldr	r3, [pc, #104]	@ (800f4b8 <tcp_input+0x80c>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f452:	4b16      	ldr	r3, [pc, #88]	@ (800f4ac <tcp_input+0x800>)
 800f454:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f456:	885b      	ldrh	r3, [r3, #2]
 800f458:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f45a:	4a14      	ldr	r2, [pc, #80]	@ (800f4ac <tcp_input+0x800>)
 800f45c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f45e:	8812      	ldrh	r2, [r2, #0]
 800f460:	b292      	uxth	r2, r2
 800f462:	9202      	str	r2, [sp, #8]
 800f464:	9301      	str	r3, [sp, #4]
 800f466:	4b15      	ldr	r3, [pc, #84]	@ (800f4bc <tcp_input+0x810>)
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	4b15      	ldr	r3, [pc, #84]	@ (800f4c0 <tcp_input+0x814>)
 800f46c:	4602      	mov	r2, r0
 800f46e:	2000      	movs	r0, #0
 800f470:	f003 f82a 	bl	80124c8 <tcp_rst>
    pbuf_free(p);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7fd fdd9 	bl	800d02c <pbuf_free>
  return;
 800f47a:	e00c      	b.n	800f496 <tcp_input+0x7ea>
    goto dropped;
 800f47c:	bf00      	nop
 800f47e:	e006      	b.n	800f48e <tcp_input+0x7e2>
    goto dropped;
 800f480:	bf00      	nop
 800f482:	e004      	b.n	800f48e <tcp_input+0x7e2>
    goto dropped;
 800f484:	bf00      	nop
 800f486:	e002      	b.n	800f48e <tcp_input+0x7e2>
      goto dropped;
 800f488:	bf00      	nop
 800f48a:	e000      	b.n	800f48e <tcp_input+0x7e2>
      goto dropped;
 800f48c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7fd fdcc 	bl	800d02c <pbuf_free>
 800f494:	e000      	b.n	800f498 <tcp_input+0x7ec>
  return;
 800f496:	bf00      	nop
}
 800f498:	3724      	adds	r7, #36	@ 0x24
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd90      	pop	{r4, r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	20008454 	.word	0x20008454
 800f4a4:	20008450 	.word	0x20008450
 800f4a8:	2000841c 	.word	0x2000841c
 800f4ac:	20008430 	.word	0x20008430
 800f4b0:	20008444 	.word	0x20008444
 800f4b4:	2000844a 	.word	0x2000844a
 800f4b8:	20008440 	.word	0x20008440
 800f4bc:	200054b8 	.word	0x200054b8
 800f4c0:	200054bc 	.word	0x200054bc

0800f4c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <tcp_input_delayed_close+0x1c>
 800f4d2:	4b17      	ldr	r3, [pc, #92]	@ (800f530 <tcp_input_delayed_close+0x6c>)
 800f4d4:	f240 225a 	movw	r2, #602	@ 0x25a
 800f4d8:	4916      	ldr	r1, [pc, #88]	@ (800f534 <tcp_input_delayed_close+0x70>)
 800f4da:	4817      	ldr	r0, [pc, #92]	@ (800f538 <tcp_input_delayed_close+0x74>)
 800f4dc:	f007 fb2c 	bl	8016b38 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f4e0:	4b16      	ldr	r3, [pc, #88]	@ (800f53c <tcp_input_delayed_close+0x78>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	f003 0310 	and.w	r3, r3, #16
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d01c      	beq.n	800f526 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	8b5b      	ldrh	r3, [r3, #26]
 800f4f0:	f003 0310 	and.w	r3, r3, #16
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10d      	bne.n	800f514 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d008      	beq.n	800f514 <tcp_input_delayed_close+0x50>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	6912      	ldr	r2, [r2, #16]
 800f50c:	f06f 010e 	mvn.w	r1, #14
 800f510:	4610      	mov	r0, r2
 800f512:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f514:	6879      	ldr	r1, [r7, #4]
 800f516:	480a      	ldr	r0, [pc, #40]	@ (800f540 <tcp_input_delayed_close+0x7c>)
 800f518:	f7ff fa4a 	bl	800e9b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7fe f835 	bl	800d58c <tcp_free>
    return 1;
 800f522:	2301      	movs	r3, #1
 800f524:	e000      	b.n	800f528 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f526:	2300      	movs	r3, #0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	08019030 	.word	0x08019030
 800f534:	08019200 	.word	0x08019200
 800f538:	0801907c 	.word	0x0801907c
 800f53c:	2000844d 	.word	0x2000844d
 800f540:	20008410 	.word	0x20008410

0800f544 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b08b      	sub	sp, #44	@ 0x2c
 800f548:	af04      	add	r7, sp, #16
 800f54a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f54c:	4b6f      	ldr	r3, [pc, #444]	@ (800f70c <tcp_listen_input+0x1c8>)
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f003 0304 	and.w	r3, r3, #4
 800f554:	2b00      	cmp	r3, #0
 800f556:	f040 80d2 	bne.w	800f6fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d106      	bne.n	800f56e <tcp_listen_input+0x2a>
 800f560:	4b6b      	ldr	r3, [pc, #428]	@ (800f710 <tcp_listen_input+0x1cc>)
 800f562:	f240 2281 	movw	r2, #641	@ 0x281
 800f566:	496b      	ldr	r1, [pc, #428]	@ (800f714 <tcp_listen_input+0x1d0>)
 800f568:	486b      	ldr	r0, [pc, #428]	@ (800f718 <tcp_listen_input+0x1d4>)
 800f56a:	f007 fae5 	bl	8016b38 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f56e:	4b67      	ldr	r3, [pc, #412]	@ (800f70c <tcp_listen_input+0x1c8>)
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	f003 0310 	and.w	r3, r3, #16
 800f576:	2b00      	cmp	r3, #0
 800f578:	d019      	beq.n	800f5ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f57a:	4b68      	ldr	r3, [pc, #416]	@ (800f71c <tcp_listen_input+0x1d8>)
 800f57c:	6819      	ldr	r1, [r3, #0]
 800f57e:	4b68      	ldr	r3, [pc, #416]	@ (800f720 <tcp_listen_input+0x1dc>)
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	4b67      	ldr	r3, [pc, #412]	@ (800f724 <tcp_listen_input+0x1e0>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f58a:	4b67      	ldr	r3, [pc, #412]	@ (800f728 <tcp_listen_input+0x1e4>)
 800f58c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f58e:	885b      	ldrh	r3, [r3, #2]
 800f590:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f592:	4a65      	ldr	r2, [pc, #404]	@ (800f728 <tcp_listen_input+0x1e4>)
 800f594:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f596:	8812      	ldrh	r2, [r2, #0]
 800f598:	b292      	uxth	r2, r2
 800f59a:	9202      	str	r2, [sp, #8]
 800f59c:	9301      	str	r3, [sp, #4]
 800f59e:	4b63      	ldr	r3, [pc, #396]	@ (800f72c <tcp_listen_input+0x1e8>)
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	4b63      	ldr	r3, [pc, #396]	@ (800f730 <tcp_listen_input+0x1ec>)
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f002 ff8e 	bl	80124c8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f5ac:	e0a9      	b.n	800f702 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f5ae:	4b57      	ldr	r3, [pc, #348]	@ (800f70c <tcp_listen_input+0x1c8>)
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	f003 0302 	and.w	r3, r3, #2
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f000 80a3 	beq.w	800f702 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	7d5b      	ldrb	r3, [r3, #21]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7ff f921 	bl	800e808 <tcp_alloc>
 800f5c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d111      	bne.n	800f5f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	699b      	ldr	r3, [r3, #24]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00a      	beq.n	800f5ec <tcp_listen_input+0xa8>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	6910      	ldr	r0, [r2, #16]
 800f5de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	4798      	blx	r3
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	73bb      	strb	r3, [r7, #14]
      return;
 800f5ea:	e08b      	b.n	800f704 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f5ec:	23f0      	movs	r3, #240	@ 0xf0
 800f5ee:	73bb      	strb	r3, [r7, #14]
      return;
 800f5f0:	e088      	b.n	800f704 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f5f2:	4b50      	ldr	r3, [pc, #320]	@ (800f734 <tcp_listen_input+0x1f0>)
 800f5f4:	695a      	ldr	r2, [r3, #20]
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f5fa:	4b4e      	ldr	r3, [pc, #312]	@ (800f734 <tcp_listen_input+0x1f0>)
 800f5fc:	691a      	ldr	r2, [r3, #16]
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	8ada      	ldrh	r2, [r3, #22]
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f60a:	4b47      	ldr	r3, [pc, #284]	@ (800f728 <tcp_listen_input+0x1e4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	881b      	ldrh	r3, [r3, #0]
 800f610:	b29a      	uxth	r2, r3
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	2203      	movs	r2, #3
 800f61a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f61c:	4b41      	ldr	r3, [pc, #260]	@ (800f724 <tcp_listen_input+0x1e0>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	1c5a      	adds	r2, r3, #1
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f62e:	6978      	ldr	r0, [r7, #20]
 800f630:	f7ff fa52 	bl	800ead8 <tcp_next_iss>
 800f634:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	693a      	ldr	r2, [r7, #16]
 800f646:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	693a      	ldr	r2, [r7, #16]
 800f64c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f64e:	4b35      	ldr	r3, [pc, #212]	@ (800f724 <tcp_listen_input+0x1e0>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	1e5a      	subs	r2, r3, #1
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	691a      	ldr	r2, [r3, #16]
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	7a5b      	ldrb	r3, [r3, #9]
 800f66a:	f003 030c 	and.w	r3, r3, #12
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	7a1a      	ldrb	r2, [r3, #8]
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f67c:	4b2e      	ldr	r3, [pc, #184]	@ (800f738 <tcp_listen_input+0x1f4>)
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	60da      	str	r2, [r3, #12]
 800f684:	4a2c      	ldr	r2, [pc, #176]	@ (800f738 <tcp_listen_input+0x1f4>)
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	6013      	str	r3, [r2, #0]
 800f68a:	f003 f8df 	bl	801284c <tcp_timer_needed>
 800f68e:	4b2b      	ldr	r3, [pc, #172]	@ (800f73c <tcp_listen_input+0x1f8>)
 800f690:	2201      	movs	r2, #1
 800f692:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f694:	6978      	ldr	r0, [r7, #20]
 800f696:	f001 fd8b 	bl	80111b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f69a:	4b23      	ldr	r3, [pc, #140]	@ (800f728 <tcp_listen_input+0x1e4>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	89db      	ldrh	r3, [r3, #14]
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f005 fa23 	bl	8014b08 <ip4_route>
 800f6c2:	4601      	mov	r1, r0
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	3304      	adds	r3, #4
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f7ff fa2a 	bl	800eb24 <tcp_eff_send_mss_netif>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f6d8:	2112      	movs	r1, #18
 800f6da:	6978      	ldr	r0, [r7, #20]
 800f6dc:	f002 f846 	bl	801176c <tcp_enqueue_flags>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f6e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d004      	beq.n	800f6f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	6978      	ldr	r0, [r7, #20]
 800f6f0:	f7fe f976 	bl	800d9e0 <tcp_abandon>
      return;
 800f6f4:	e006      	b.n	800f704 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f6f6:	6978      	ldr	r0, [r7, #20]
 800f6f8:	f002 f926 	bl	8011948 <tcp_output>
  return;
 800f6fc:	e001      	b.n	800f702 <tcp_listen_input+0x1be>
    return;
 800f6fe:	bf00      	nop
 800f700:	e000      	b.n	800f704 <tcp_listen_input+0x1c0>
  return;
 800f702:	bf00      	nop
}
 800f704:	371c      	adds	r7, #28
 800f706:	46bd      	mov	sp, r7
 800f708:	bd90      	pop	{r4, r7, pc}
 800f70a:	bf00      	nop
 800f70c:	2000844c 	.word	0x2000844c
 800f710:	08019030 	.word	0x08019030
 800f714:	08019228 	.word	0x08019228
 800f718:	0801907c 	.word	0x0801907c
 800f71c:	20008444 	.word	0x20008444
 800f720:	2000844a 	.word	0x2000844a
 800f724:	20008440 	.word	0x20008440
 800f728:	20008430 	.word	0x20008430
 800f72c:	200054b8 	.word	0x200054b8
 800f730:	200054bc 	.word	0x200054bc
 800f734:	200054a8 	.word	0x200054a8
 800f738:	20008410 	.word	0x20008410
 800f73c:	20008418 	.word	0x20008418

0800f740 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af04      	add	r7, sp, #16
 800f746:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f748:	4b2f      	ldr	r3, [pc, #188]	@ (800f808 <tcp_timewait_input+0xc8>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	f003 0304 	and.w	r3, r3, #4
 800f750:	2b00      	cmp	r3, #0
 800f752:	d153      	bne.n	800f7fc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <tcp_timewait_input+0x28>
 800f75a:	4b2c      	ldr	r3, [pc, #176]	@ (800f80c <tcp_timewait_input+0xcc>)
 800f75c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f760:	492b      	ldr	r1, [pc, #172]	@ (800f810 <tcp_timewait_input+0xd0>)
 800f762:	482c      	ldr	r0, [pc, #176]	@ (800f814 <tcp_timewait_input+0xd4>)
 800f764:	f007 f9e8 	bl	8016b38 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f768:	4b27      	ldr	r3, [pc, #156]	@ (800f808 <tcp_timewait_input+0xc8>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f003 0302 	and.w	r3, r3, #2
 800f770:	2b00      	cmp	r3, #0
 800f772:	d02a      	beq.n	800f7ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f774:	4b28      	ldr	r3, [pc, #160]	@ (800f818 <tcp_timewait_input+0xd8>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	db2d      	blt.n	800f7de <tcp_timewait_input+0x9e>
 800f782:	4b25      	ldr	r3, [pc, #148]	@ (800f818 <tcp_timewait_input+0xd8>)
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f78e:	440b      	add	r3, r1
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	2b00      	cmp	r3, #0
 800f794:	dc23      	bgt.n	800f7de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f796:	4b21      	ldr	r3, [pc, #132]	@ (800f81c <tcp_timewait_input+0xdc>)
 800f798:	6819      	ldr	r1, [r3, #0]
 800f79a:	4b21      	ldr	r3, [pc, #132]	@ (800f820 <tcp_timewait_input+0xe0>)
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800f818 <tcp_timewait_input+0xd8>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7a6:	4b1f      	ldr	r3, [pc, #124]	@ (800f824 <tcp_timewait_input+0xe4>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7aa:	885b      	ldrh	r3, [r3, #2]
 800f7ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7ae:	4a1d      	ldr	r2, [pc, #116]	@ (800f824 <tcp_timewait_input+0xe4>)
 800f7b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7b2:	8812      	ldrh	r2, [r2, #0]
 800f7b4:	b292      	uxth	r2, r2
 800f7b6:	9202      	str	r2, [sp, #8]
 800f7b8:	9301      	str	r3, [sp, #4]
 800f7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800f828 <tcp_timewait_input+0xe8>)
 800f7bc:	9300      	str	r3, [sp, #0]
 800f7be:	4b1b      	ldr	r3, [pc, #108]	@ (800f82c <tcp_timewait_input+0xec>)
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f002 fe80 	bl	80124c8 <tcp_rst>
      return;
 800f7c8:	e01b      	b.n	800f802 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f7ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f808 <tcp_timewait_input+0xc8>)
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	f003 0301 	and.w	r3, r3, #1
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d003      	beq.n	800f7de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f7d6:	4b16      	ldr	r3, [pc, #88]	@ (800f830 <tcp_timewait_input+0xf0>)
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f7de:	4b10      	ldr	r3, [pc, #64]	@ (800f820 <tcp_timewait_input+0xe0>)
 800f7e0:	881b      	ldrh	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00c      	beq.n	800f800 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	8b5b      	ldrh	r3, [r3, #26]
 800f7ea:	f043 0302 	orr.w	r3, r3, #2
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f002 f8a7 	bl	8011948 <tcp_output>
  }
  return;
 800f7fa:	e001      	b.n	800f800 <tcp_timewait_input+0xc0>
    return;
 800f7fc:	bf00      	nop
 800f7fe:	e000      	b.n	800f802 <tcp_timewait_input+0xc2>
  return;
 800f800:	bf00      	nop
}
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}
 800f808:	2000844c 	.word	0x2000844c
 800f80c:	08019030 	.word	0x08019030
 800f810:	08019248 	.word	0x08019248
 800f814:	0801907c 	.word	0x0801907c
 800f818:	20008440 	.word	0x20008440
 800f81c:	20008444 	.word	0x20008444
 800f820:	2000844a 	.word	0x2000844a
 800f824:	20008430 	.word	0x20008430
 800f828:	200054b8 	.word	0x200054b8
 800f82c:	200054bc 	.word	0x200054bc
 800f830:	20008404 	.word	0x20008404

0800f834 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f834:	b590      	push	{r4, r7, lr}
 800f836:	b08d      	sub	sp, #52	@ 0x34
 800f838:	af04      	add	r7, sp, #16
 800f83a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f83c:	2300      	movs	r3, #0
 800f83e:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800f840:	2300      	movs	r3, #0
 800f842:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d106      	bne.n	800f858 <tcp_process+0x24>
 800f84a:	4b9d      	ldr	r3, [pc, #628]	@ (800fac0 <tcp_process+0x28c>)
 800f84c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f850:	499c      	ldr	r1, [pc, #624]	@ (800fac4 <tcp_process+0x290>)
 800f852:	489d      	ldr	r0, [pc, #628]	@ (800fac8 <tcp_process+0x294>)
 800f854:	f007 f970 	bl	8016b38 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f858:	4b9c      	ldr	r3, [pc, #624]	@ (800facc <tcp_process+0x298>)
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	f003 0304 	and.w	r3, r3, #4
 800f860:	2b00      	cmp	r3, #0
 800f862:	d04e      	beq.n	800f902 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	7d1b      	ldrb	r3, [r3, #20]
 800f868:	2b02      	cmp	r3, #2
 800f86a:	d108      	bne.n	800f87e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f870:	4b97      	ldr	r3, [pc, #604]	@ (800fad0 <tcp_process+0x29c>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	429a      	cmp	r2, r3
 800f876:	d123      	bne.n	800f8c0 <tcp_process+0x8c>
        acceptable = 1;
 800f878:	2301      	movs	r3, #1
 800f87a:	77fb      	strb	r3, [r7, #31]
 800f87c:	e020      	b.n	800f8c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f882:	4b94      	ldr	r3, [pc, #592]	@ (800fad4 <tcp_process+0x2a0>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	429a      	cmp	r2, r3
 800f888:	d102      	bne.n	800f890 <tcp_process+0x5c>
        acceptable = 1;
 800f88a:	2301      	movs	r3, #1
 800f88c:	77fb      	strb	r3, [r7, #31]
 800f88e:	e017      	b.n	800f8c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f890:	4b90      	ldr	r3, [pc, #576]	@ (800fad4 <tcp_process+0x2a0>)
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	db10      	blt.n	800f8c0 <tcp_process+0x8c>
 800f89e:	4b8d      	ldr	r3, [pc, #564]	@ (800fad4 <tcp_process+0x2a0>)
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8a6:	6879      	ldr	r1, [r7, #4]
 800f8a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f8aa:	440b      	add	r3, r1
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	dc06      	bgt.n	800f8c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	8b5b      	ldrh	r3, [r3, #26]
 800f8b6:	f043 0302 	orr.w	r3, r3, #2
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f8c0:	7ffb      	ldrb	r3, [r7, #31]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d01b      	beq.n	800f8fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	7d1b      	ldrb	r3, [r3, #20]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d106      	bne.n	800f8dc <tcp_process+0xa8>
 800f8ce:	4b7c      	ldr	r3, [pc, #496]	@ (800fac0 <tcp_process+0x28c>)
 800f8d0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f8d4:	4980      	ldr	r1, [pc, #512]	@ (800fad8 <tcp_process+0x2a4>)
 800f8d6:	487c      	ldr	r0, [pc, #496]	@ (800fac8 <tcp_process+0x294>)
 800f8d8:	f007 f92e 	bl	8016b38 <iprintf>
      recv_flags |= TF_RESET;
 800f8dc:	4b7f      	ldr	r3, [pc, #508]	@ (800fadc <tcp_process+0x2a8>)
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	f043 0308 	orr.w	r3, r3, #8
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	4b7d      	ldr	r3, [pc, #500]	@ (800fadc <tcp_process+0x2a8>)
 800f8e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	8b5b      	ldrh	r3, [r3, #26]
 800f8ee:	f023 0301 	bic.w	r3, r3, #1
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f8f8:	f06f 030d 	mvn.w	r3, #13
 800f8fc:	e37a      	b.n	800fff4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f8fe:	2300      	movs	r3, #0
 800f900:	e378      	b.n	800fff4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f902:	4b72      	ldr	r3, [pc, #456]	@ (800facc <tcp_process+0x298>)
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	f003 0302 	and.w	r3, r3, #2
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d010      	beq.n	800f930 <tcp_process+0xfc>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	7d1b      	ldrb	r3, [r3, #20]
 800f912:	2b02      	cmp	r3, #2
 800f914:	d00c      	beq.n	800f930 <tcp_process+0xfc>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	7d1b      	ldrb	r3, [r3, #20]
 800f91a:	2b03      	cmp	r3, #3
 800f91c:	d008      	beq.n	800f930 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	8b5b      	ldrh	r3, [r3, #26]
 800f922:	f043 0302 	orr.w	r3, r3, #2
 800f926:	b29a      	uxth	r2, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f92c:	2300      	movs	r3, #0
 800f92e:	e361      	b.n	800fff4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	8b5b      	ldrh	r3, [r3, #26]
 800f934:	f003 0310 	and.w	r3, r3, #16
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d103      	bne.n	800f944 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f93c:	4b68      	ldr	r3, [pc, #416]	@ (800fae0 <tcp_process+0x2ac>)
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f001 fc2b 	bl	80111b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	7d1b      	ldrb	r3, [r3, #20]
 800f95e:	3b02      	subs	r3, #2
 800f960:	2b07      	cmp	r3, #7
 800f962:	f200 8337 	bhi.w	800ffd4 <tcp_process+0x7a0>
 800f966:	a201      	add	r2, pc, #4	@ (adr r2, 800f96c <tcp_process+0x138>)
 800f968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f96c:	0800f98d 	.word	0x0800f98d
 800f970:	0800fbbd 	.word	0x0800fbbd
 800f974:	0800fd35 	.word	0x0800fd35
 800f978:	0800fd5f 	.word	0x0800fd5f
 800f97c:	0800fe83 	.word	0x0800fe83
 800f980:	0800fd35 	.word	0x0800fd35
 800f984:	0800ff0f 	.word	0x0800ff0f
 800f988:	0800ff9f 	.word	0x0800ff9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f98c:	4b4f      	ldr	r3, [pc, #316]	@ (800facc <tcp_process+0x298>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	f003 0310 	and.w	r3, r3, #16
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 80e4 	beq.w	800fb62 <tcp_process+0x32e>
 800f99a:	4b4c      	ldr	r3, [pc, #304]	@ (800facc <tcp_process+0x298>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	f003 0302 	and.w	r3, r3, #2
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	f000 80dd 	beq.w	800fb62 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9ac:	1c5a      	adds	r2, r3, #1
 800f9ae:	4b48      	ldr	r3, [pc, #288]	@ (800fad0 <tcp_process+0x29c>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	f040 80d5 	bne.w	800fb62 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f9b8:	4b46      	ldr	r3, [pc, #280]	@ (800fad4 <tcp_process+0x2a0>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	1c5a      	adds	r2, r3, #1
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800f9ca:	4b41      	ldr	r3, [pc, #260]	@ (800fad0 <tcp_process+0x29c>)
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f9d2:	4b44      	ldr	r3, [pc, #272]	@ (800fae4 <tcp_process+0x2b0>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	89db      	ldrh	r3, [r3, #14]
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f9ec:	4b39      	ldr	r3, [pc, #228]	@ (800fad4 <tcp_process+0x2a0>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	1e5a      	subs	r2, r3, #1
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2204      	movs	r2, #4
 800f9fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	3304      	adds	r3, #4
 800fa04:	4618      	mov	r0, r3
 800fa06:	f005 f87f 	bl	8014b08 <ip4_route>
 800fa0a:	4601      	mov	r1, r0
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	3304      	adds	r3, #4
 800fa10:	461a      	mov	r2, r3
 800fa12:	4620      	mov	r0, r4
 800fa14:	f7ff f886 	bl	800eb24 <tcp_eff_send_mss_netif>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa24:	009a      	lsls	r2, r3, #2
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fa30:	428b      	cmp	r3, r1
 800fa32:	bf38      	it	cc
 800fa34:	460b      	movcc	r3, r1
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d204      	bcs.n	800fa44 <tcp_process+0x210>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	e00d      	b.n	800fa60 <tcp_process+0x22c>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa48:	005b      	lsls	r3, r3, #1
 800fa4a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d904      	bls.n	800fa5c <tcp_process+0x228>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	e001      	b.n	800fa60 <tcp_process+0x22c>
 800fa5c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d106      	bne.n	800fa7e <tcp_process+0x24a>
 800fa70:	4b13      	ldr	r3, [pc, #76]	@ (800fac0 <tcp_process+0x28c>)
 800fa72:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fa76:	491c      	ldr	r1, [pc, #112]	@ (800fae8 <tcp_process+0x2b4>)
 800fa78:	4813      	ldr	r0, [pc, #76]	@ (800fac8 <tcp_process+0x294>)
 800fa7a:	f007 f85d 	bl	8016b38 <iprintf>
        --pcb->snd_queuelen;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fa84:	3b01      	subs	r3, #1
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa92:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d12a      	bne.n	800faf0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa9e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d106      	bne.n	800fab4 <tcp_process+0x280>
 800faa6:	4b06      	ldr	r3, [pc, #24]	@ (800fac0 <tcp_process+0x28c>)
 800faa8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800faac:	490f      	ldr	r1, [pc, #60]	@ (800faec <tcp_process+0x2b8>)
 800faae:	4806      	ldr	r0, [pc, #24]	@ (800fac8 <tcp_process+0x294>)
 800fab0:	f007 f842 	bl	8016b38 <iprintf>
          pcb->unsent = rseg->next;
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fabc:	e01c      	b.n	800faf8 <tcp_process+0x2c4>
 800fabe:	bf00      	nop
 800fac0:	08019030 	.word	0x08019030
 800fac4:	08019268 	.word	0x08019268
 800fac8:	0801907c 	.word	0x0801907c
 800facc:	2000844c 	.word	0x2000844c
 800fad0:	20008444 	.word	0x20008444
 800fad4:	20008440 	.word	0x20008440
 800fad8:	08019284 	.word	0x08019284
 800fadc:	2000844d 	.word	0x2000844d
 800fae0:	20008404 	.word	0x20008404
 800fae4:	20008430 	.word	0x20008430
 800fae8:	080192a4 	.word	0x080192a4
 800faec:	080192bc 	.word	0x080192bc
        } else {
          pcb->unacked = rseg->next;
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800faf8:	6978      	ldr	r0, [r7, #20]
 800fafa:	f7fe fd1c 	bl	800e536 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d104      	bne.n	800fb10 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb0c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fb0e:	e006      	b.n	800fb1e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00a      	beq.n	800fb3e <tcp_process+0x30a>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	6910      	ldr	r0, [r2, #16]
 800fb32:	2200      	movs	r2, #0
 800fb34:	6879      	ldr	r1, [r7, #4]
 800fb36:	4798      	blx	r3
 800fb38:	4603      	mov	r3, r0
 800fb3a:	77bb      	strb	r3, [r7, #30]
 800fb3c:	e001      	b.n	800fb42 <tcp_process+0x30e>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800fb42:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800fb46:	f113 0f0d 	cmn.w	r3, #13
 800fb4a:	d102      	bne.n	800fb52 <tcp_process+0x31e>
          return ERR_ABRT;
 800fb4c:	f06f 030c 	mvn.w	r3, #12
 800fb50:	e250      	b.n	800fff4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	8b5b      	ldrh	r3, [r3, #26]
 800fb56:	f043 0302 	orr.w	r3, r3, #2
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fb60:	e23a      	b.n	800ffd8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fb62:	4b98      	ldr	r3, [pc, #608]	@ (800fdc4 <tcp_process+0x590>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	f003 0310 	and.w	r3, r3, #16
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f000 8234 	beq.w	800ffd8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb70:	4b95      	ldr	r3, [pc, #596]	@ (800fdc8 <tcp_process+0x594>)
 800fb72:	6819      	ldr	r1, [r3, #0]
 800fb74:	4b95      	ldr	r3, [pc, #596]	@ (800fdcc <tcp_process+0x598>)
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	4b95      	ldr	r3, [pc, #596]	@ (800fdd0 <tcp_process+0x59c>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb80:	4b94      	ldr	r3, [pc, #592]	@ (800fdd4 <tcp_process+0x5a0>)
 800fb82:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb84:	885b      	ldrh	r3, [r3, #2]
 800fb86:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb88:	4a92      	ldr	r2, [pc, #584]	@ (800fdd4 <tcp_process+0x5a0>)
 800fb8a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb8c:	8812      	ldrh	r2, [r2, #0]
 800fb8e:	b292      	uxth	r2, r2
 800fb90:	9202      	str	r2, [sp, #8]
 800fb92:	9301      	str	r3, [sp, #4]
 800fb94:	4b90      	ldr	r3, [pc, #576]	@ (800fdd8 <tcp_process+0x5a4>)
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	4b90      	ldr	r3, [pc, #576]	@ (800fddc <tcp_process+0x5a8>)
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f002 fc93 	bl	80124c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fba8:	2b05      	cmp	r3, #5
 800fbaa:	f200 8215 	bhi.w	800ffd8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f002 fa5f 	bl	8012078 <tcp_rexmit_rto>
      break;
 800fbba:	e20d      	b.n	800ffd8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fbbc:	4b81      	ldr	r3, [pc, #516]	@ (800fdc4 <tcp_process+0x590>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	f003 0310 	and.w	r3, r3, #16
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f000 80a1 	beq.w	800fd0c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fbca:	4b7f      	ldr	r3, [pc, #508]	@ (800fdc8 <tcp_process+0x594>)
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	3b01      	subs	r3, #1
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	db7e      	blt.n	800fcd8 <tcp_process+0x4a4>
 800fbda:	4b7b      	ldr	r3, [pc, #492]	@ (800fdc8 <tcp_process+0x594>)
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	dc77      	bgt.n	800fcd8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2204      	movs	r2, #4
 800fbec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d102      	bne.n	800fbfc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fbf6:	23fa      	movs	r3, #250	@ 0xfa
 800fbf8:	77bb      	strb	r3, [r7, #30]
 800fbfa:	e01d      	b.n	800fc38 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc00:	699b      	ldr	r3, [r3, #24]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d106      	bne.n	800fc14 <tcp_process+0x3e0>
 800fc06:	4b76      	ldr	r3, [pc, #472]	@ (800fde0 <tcp_process+0x5ac>)
 800fc08:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800fc0c:	4975      	ldr	r1, [pc, #468]	@ (800fde4 <tcp_process+0x5b0>)
 800fc0e:	4876      	ldr	r0, [pc, #472]	@ (800fde8 <tcp_process+0x5b4>)
 800fc10:	f006 ff92 	bl	8016b38 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc18:	699b      	ldr	r3, [r3, #24]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d00a      	beq.n	800fc34 <tcp_process+0x400>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc22:	699b      	ldr	r3, [r3, #24]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	6910      	ldr	r0, [r2, #16]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	6879      	ldr	r1, [r7, #4]
 800fc2c:	4798      	blx	r3
 800fc2e:	4603      	mov	r3, r0
 800fc30:	77bb      	strb	r3, [r7, #30]
 800fc32:	e001      	b.n	800fc38 <tcp_process+0x404>
 800fc34:	23f0      	movs	r3, #240	@ 0xf0
 800fc36:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800fc38:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00a      	beq.n	800fc56 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fc40:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800fc44:	f113 0f0d 	cmn.w	r3, #13
 800fc48:	d002      	beq.n	800fc50 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7fd ff86 	bl	800db5c <tcp_abort>
            }
            return ERR_ABRT;
 800fc50:	f06f 030c 	mvn.w	r3, #12
 800fc54:	e1ce      	b.n	800fff4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fae0 	bl	801021c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fc5c:	4b63      	ldr	r3, [pc, #396]	@ (800fdec <tcp_process+0x5b8>)
 800fc5e:	881b      	ldrh	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d005      	beq.n	800fc70 <tcp_process+0x43c>
            recv_acked--;
 800fc64:	4b61      	ldr	r3, [pc, #388]	@ (800fdec <tcp_process+0x5b8>)
 800fc66:	881b      	ldrh	r3, [r3, #0]
 800fc68:	3b01      	subs	r3, #1
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	4b5f      	ldr	r3, [pc, #380]	@ (800fdec <tcp_process+0x5b8>)
 800fc6e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc74:	009a      	lsls	r2, r3, #2
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc7a:	005b      	lsls	r3, r3, #1
 800fc7c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fc80:	428b      	cmp	r3, r1
 800fc82:	bf38      	it	cc
 800fc84:	460b      	movcc	r3, r1
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d204      	bcs.n	800fc94 <tcp_process+0x460>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	e00d      	b.n	800fcb0 <tcp_process+0x47c>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc98:	005b      	lsls	r3, r3, #1
 800fc9a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d904      	bls.n	800fcac <tcp_process+0x478>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fca6:	005b      	lsls	r3, r3, #1
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	e001      	b.n	800fcb0 <tcp_process+0x47c>
 800fcac:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fcb6:	4b4e      	ldr	r3, [pc, #312]	@ (800fdf0 <tcp_process+0x5bc>)
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	f003 0320 	and.w	r3, r3, #32
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d037      	beq.n	800fd32 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	8b5b      	ldrh	r3, [r3, #26]
 800fcc6:	f043 0302 	orr.w	r3, r3, #2
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2207      	movs	r2, #7
 800fcd4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fcd6:	e02c      	b.n	800fd32 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcd8:	4b3b      	ldr	r3, [pc, #236]	@ (800fdc8 <tcp_process+0x594>)
 800fcda:	6819      	ldr	r1, [r3, #0]
 800fcdc:	4b3b      	ldr	r3, [pc, #236]	@ (800fdcc <tcp_process+0x598>)
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	461a      	mov	r2, r3
 800fce2:	4b3b      	ldr	r3, [pc, #236]	@ (800fdd0 <tcp_process+0x59c>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fce8:	4b3a      	ldr	r3, [pc, #232]	@ (800fdd4 <tcp_process+0x5a0>)
 800fcea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcec:	885b      	ldrh	r3, [r3, #2]
 800fcee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcf0:	4a38      	ldr	r2, [pc, #224]	@ (800fdd4 <tcp_process+0x5a0>)
 800fcf2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf4:	8812      	ldrh	r2, [r2, #0]
 800fcf6:	b292      	uxth	r2, r2
 800fcf8:	9202      	str	r2, [sp, #8]
 800fcfa:	9301      	str	r3, [sp, #4]
 800fcfc:	4b36      	ldr	r3, [pc, #216]	@ (800fdd8 <tcp_process+0x5a4>)
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	4b36      	ldr	r3, [pc, #216]	@ (800fddc <tcp_process+0x5a8>)
 800fd02:	4602      	mov	r2, r0
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f002 fbdf 	bl	80124c8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fd0a:	e167      	b.n	800ffdc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fd0c:	4b2d      	ldr	r3, [pc, #180]	@ (800fdc4 <tcp_process+0x590>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f003 0302 	and.w	r3, r3, #2
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f000 8161 	beq.w	800ffdc <tcp_process+0x7a8>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd1e:	1e5a      	subs	r2, r3, #1
 800fd20:	4b2b      	ldr	r3, [pc, #172]	@ (800fdd0 <tcp_process+0x59c>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	f040 8159 	bne.w	800ffdc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f002 f9c6 	bl	80120bc <tcp_rexmit>
      break;
 800fd30:	e154      	b.n	800ffdc <tcp_process+0x7a8>
 800fd32:	e153      	b.n	800ffdc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f000 fa71 	bl	801021c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fd3a:	4b2d      	ldr	r3, [pc, #180]	@ (800fdf0 <tcp_process+0x5bc>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 0320 	and.w	r3, r3, #32
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f000 814c 	beq.w	800ffe0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	8b5b      	ldrh	r3, [r3, #26]
 800fd4c:	f043 0302 	orr.w	r3, r3, #2
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2207      	movs	r2, #7
 800fd5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fd5c:	e140      	b.n	800ffe0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 fa5c 	bl	801021c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fd64:	4b22      	ldr	r3, [pc, #136]	@ (800fdf0 <tcp_process+0x5bc>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	f003 0320 	and.w	r3, r3, #32
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d071      	beq.n	800fe54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd70:	4b14      	ldr	r3, [pc, #80]	@ (800fdc4 <tcp_process+0x590>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f003 0310 	and.w	r3, r3, #16
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d060      	beq.n	800fe3e <tcp_process+0x60a>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd80:	4b11      	ldr	r3, [pc, #68]	@ (800fdc8 <tcp_process+0x594>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d15a      	bne.n	800fe3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d156      	bne.n	800fe3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	8b5b      	ldrh	r3, [r3, #26]
 800fd94:	f043 0302 	orr.w	r3, r3, #2
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7fe fdb6 	bl	800e910 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fda4:	4b13      	ldr	r3, [pc, #76]	@ (800fdf4 <tcp_process+0x5c0>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d105      	bne.n	800fdba <tcp_process+0x586>
 800fdae:	4b11      	ldr	r3, [pc, #68]	@ (800fdf4 <tcp_process+0x5c0>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	4a0f      	ldr	r2, [pc, #60]	@ (800fdf4 <tcp_process+0x5c0>)
 800fdb6:	6013      	str	r3, [r2, #0]
 800fdb8:	e02e      	b.n	800fe18 <tcp_process+0x5e4>
 800fdba:	4b0e      	ldr	r3, [pc, #56]	@ (800fdf4 <tcp_process+0x5c0>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	613b      	str	r3, [r7, #16]
 800fdc0:	e027      	b.n	800fe12 <tcp_process+0x5de>
 800fdc2:	bf00      	nop
 800fdc4:	2000844c 	.word	0x2000844c
 800fdc8:	20008444 	.word	0x20008444
 800fdcc:	2000844a 	.word	0x2000844a
 800fdd0:	20008440 	.word	0x20008440
 800fdd4:	20008430 	.word	0x20008430
 800fdd8:	200054b8 	.word	0x200054b8
 800fddc:	200054bc 	.word	0x200054bc
 800fde0:	08019030 	.word	0x08019030
 800fde4:	080192d0 	.word	0x080192d0
 800fde8:	0801907c 	.word	0x0801907c
 800fdec:	20008448 	.word	0x20008448
 800fdf0:	2000844d 	.word	0x2000844d
 800fdf4:	20008410 	.word	0x20008410
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d104      	bne.n	800fe0c <tcp_process+0x5d8>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	68da      	ldr	r2, [r3, #12]
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	60da      	str	r2, [r3, #12]
 800fe0a:	e005      	b.n	800fe18 <tcp_process+0x5e4>
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	613b      	str	r3, [r7, #16]
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1ef      	bne.n	800fdf8 <tcp_process+0x5c4>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	60da      	str	r2, [r3, #12]
 800fe1e:	4b77      	ldr	r3, [pc, #476]	@ (800fffc <tcp_process+0x7c8>)
 800fe20:	2201      	movs	r2, #1
 800fe22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	220a      	movs	r2, #10
 800fe28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fe2a:	4b75      	ldr	r3, [pc, #468]	@ (8010000 <tcp_process+0x7cc>)
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	60da      	str	r2, [r3, #12]
 800fe32:	4a73      	ldr	r2, [pc, #460]	@ (8010000 <tcp_process+0x7cc>)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6013      	str	r3, [r2, #0]
 800fe38:	f002 fd08 	bl	801284c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fe3c:	e0d2      	b.n	800ffe4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	8b5b      	ldrh	r3, [r3, #26]
 800fe42:	f043 0302 	orr.w	r3, r3, #2
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2208      	movs	r2, #8
 800fe50:	751a      	strb	r2, [r3, #20]
      break;
 800fe52:	e0c7      	b.n	800ffe4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe54:	4b6b      	ldr	r3, [pc, #428]	@ (8010004 <tcp_process+0x7d0>)
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	f003 0310 	and.w	r3, r3, #16
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f000 80c1 	beq.w	800ffe4 <tcp_process+0x7b0>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe66:	4b68      	ldr	r3, [pc, #416]	@ (8010008 <tcp_process+0x7d4>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	f040 80ba 	bne.w	800ffe4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f040 80b5 	bne.w	800ffe4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2206      	movs	r2, #6
 800fe7e:	751a      	strb	r2, [r3, #20]
      break;
 800fe80:	e0b0      	b.n	800ffe4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 f9ca 	bl	801021c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fe88:	4b60      	ldr	r3, [pc, #384]	@ (801000c <tcp_process+0x7d8>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f003 0320 	and.w	r3, r3, #32
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 80a9 	beq.w	800ffe8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	8b5b      	ldrh	r3, [r3, #26]
 800fe9a:	f043 0302 	orr.w	r3, r3, #2
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7fe fd33 	bl	800e910 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800feaa:	4b59      	ldr	r3, [pc, #356]	@ (8010010 <tcp_process+0x7dc>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d105      	bne.n	800fec0 <tcp_process+0x68c>
 800feb4:	4b56      	ldr	r3, [pc, #344]	@ (8010010 <tcp_process+0x7dc>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	4a55      	ldr	r2, [pc, #340]	@ (8010010 <tcp_process+0x7dc>)
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	e013      	b.n	800fee8 <tcp_process+0x6b4>
 800fec0:	4b53      	ldr	r3, [pc, #332]	@ (8010010 <tcp_process+0x7dc>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	60fb      	str	r3, [r7, #12]
 800fec6:	e00c      	b.n	800fee2 <tcp_process+0x6ae>
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d104      	bne.n	800fedc <tcp_process+0x6a8>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68da      	ldr	r2, [r3, #12]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	60da      	str	r2, [r3, #12]
 800feda:	e005      	b.n	800fee8 <tcp_process+0x6b4>
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	60fb      	str	r3, [r7, #12]
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1ef      	bne.n	800fec8 <tcp_process+0x694>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	60da      	str	r2, [r3, #12]
 800feee:	4b43      	ldr	r3, [pc, #268]	@ (800fffc <tcp_process+0x7c8>)
 800fef0:	2201      	movs	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	220a      	movs	r2, #10
 800fef8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fefa:	4b41      	ldr	r3, [pc, #260]	@ (8010000 <tcp_process+0x7cc>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	60da      	str	r2, [r3, #12]
 800ff02:	4a3f      	ldr	r2, [pc, #252]	@ (8010000 <tcp_process+0x7cc>)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6013      	str	r3, [r2, #0]
 800ff08:	f002 fca0 	bl	801284c <tcp_timer_needed>
      }
      break;
 800ff0c:	e06c      	b.n	800ffe8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 f984 	bl	801021c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ff14:	4b3b      	ldr	r3, [pc, #236]	@ (8010004 <tcp_process+0x7d0>)
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	f003 0310 	and.w	r3, r3, #16
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d065      	beq.n	800ffec <tcp_process+0x7b8>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff24:	4b38      	ldr	r3, [pc, #224]	@ (8010008 <tcp_process+0x7d4>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d15f      	bne.n	800ffec <tcp_process+0x7b8>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d15b      	bne.n	800ffec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7fe fceb 	bl	800e910 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ff3a:	4b35      	ldr	r3, [pc, #212]	@ (8010010 <tcp_process+0x7dc>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d105      	bne.n	800ff50 <tcp_process+0x71c>
 800ff44:	4b32      	ldr	r3, [pc, #200]	@ (8010010 <tcp_process+0x7dc>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	4a31      	ldr	r2, [pc, #196]	@ (8010010 <tcp_process+0x7dc>)
 800ff4c:	6013      	str	r3, [r2, #0]
 800ff4e:	e013      	b.n	800ff78 <tcp_process+0x744>
 800ff50:	4b2f      	ldr	r3, [pc, #188]	@ (8010010 <tcp_process+0x7dc>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	61bb      	str	r3, [r7, #24]
 800ff56:	e00c      	b.n	800ff72 <tcp_process+0x73e>
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d104      	bne.n	800ff6c <tcp_process+0x738>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	68da      	ldr	r2, [r3, #12]
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	60da      	str	r2, [r3, #12]
 800ff6a:	e005      	b.n	800ff78 <tcp_process+0x744>
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	61bb      	str	r3, [r7, #24]
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1ef      	bne.n	800ff58 <tcp_process+0x724>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	60da      	str	r2, [r3, #12]
 800ff7e:	4b1f      	ldr	r3, [pc, #124]	@ (800fffc <tcp_process+0x7c8>)
 800ff80:	2201      	movs	r2, #1
 800ff82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	220a      	movs	r2, #10
 800ff88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ff8a:	4b1d      	ldr	r3, [pc, #116]	@ (8010000 <tcp_process+0x7cc>)
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	60da      	str	r2, [r3, #12]
 800ff92:	4a1b      	ldr	r2, [pc, #108]	@ (8010000 <tcp_process+0x7cc>)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6013      	str	r3, [r2, #0]
 800ff98:	f002 fc58 	bl	801284c <tcp_timer_needed>
      }
      break;
 800ff9c:	e026      	b.n	800ffec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f93c 	bl	801021c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ffa4:	4b17      	ldr	r3, [pc, #92]	@ (8010004 <tcp_process+0x7d0>)
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	f003 0310 	and.w	r3, r3, #16
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d01f      	beq.n	800fff0 <tcp_process+0x7bc>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffb4:	4b14      	ldr	r3, [pc, #80]	@ (8010008 <tcp_process+0x7d4>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d119      	bne.n	800fff0 <tcp_process+0x7bc>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d115      	bne.n	800fff0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ffc4:	4b11      	ldr	r3, [pc, #68]	@ (801000c <tcp_process+0x7d8>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f043 0310 	orr.w	r3, r3, #16
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	4b0f      	ldr	r3, [pc, #60]	@ (801000c <tcp_process+0x7d8>)
 800ffd0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ffd2:	e00d      	b.n	800fff0 <tcp_process+0x7bc>
    default:
      break;
 800ffd4:	bf00      	nop
 800ffd6:	e00c      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffd8:	bf00      	nop
 800ffda:	e00a      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffdc:	bf00      	nop
 800ffde:	e008      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffe0:	bf00      	nop
 800ffe2:	e006      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffe4:	bf00      	nop
 800ffe6:	e004      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffe8:	bf00      	nop
 800ffea:	e002      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffec:	bf00      	nop
 800ffee:	e000      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800fff0:	bf00      	nop
  }
  return ERR_OK;
 800fff2:	2300      	movs	r3, #0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3724      	adds	r7, #36	@ 0x24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd90      	pop	{r4, r7, pc}
 800fffc:	20008418 	.word	0x20008418
 8010000:	20008414 	.word	0x20008414
 8010004:	2000844c 	.word	0x2000844c
 8010008:	20008444 	.word	0x20008444
 801000c:	2000844d 	.word	0x2000844d
 8010010:	20008410 	.word	0x20008410

08010014 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b085      	sub	sp, #20
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d106      	bne.n	8010032 <tcp_oos_insert_segment+0x1e>
 8010024:	4b3b      	ldr	r3, [pc, #236]	@ (8010114 <tcp_oos_insert_segment+0x100>)
 8010026:	f240 421f 	movw	r2, #1055	@ 0x41f
 801002a:	493b      	ldr	r1, [pc, #236]	@ (8010118 <tcp_oos_insert_segment+0x104>)
 801002c:	483b      	ldr	r0, [pc, #236]	@ (801011c <tcp_oos_insert_segment+0x108>)
 801002e:	f006 fd83 	bl	8016b38 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	691b      	ldr	r3, [r3, #16]
 8010036:	899b      	ldrh	r3, [r3, #12]
 8010038:	b29b      	uxth	r3, r3
 801003a:	4618      	mov	r0, r3
 801003c:	f7fb fba6 	bl	800b78c <lwip_htons>
 8010040:	4603      	mov	r3, r0
 8010042:	b2db      	uxtb	r3, r3
 8010044:	f003 0301 	and.w	r3, r3, #1
 8010048:	2b00      	cmp	r3, #0
 801004a:	d028      	beq.n	801009e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801004c:	6838      	ldr	r0, [r7, #0]
 801004e:	f7fe fa5d 	bl	800e50c <tcp_segs_free>
    next = NULL;
 8010052:	2300      	movs	r3, #0
 8010054:	603b      	str	r3, [r7, #0]
 8010056:	e056      	b.n	8010106 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	899b      	ldrh	r3, [r3, #12]
 801005e:	b29b      	uxth	r3, r3
 8010060:	4618      	mov	r0, r3
 8010062:	f7fb fb93 	bl	800b78c <lwip_htons>
 8010066:	4603      	mov	r3, r0
 8010068:	b2db      	uxtb	r3, r3
 801006a:	f003 0301 	and.w	r3, r3, #1
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00d      	beq.n	801008e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	691b      	ldr	r3, [r3, #16]
 8010076:	899b      	ldrh	r3, [r3, #12]
 8010078:	b29c      	uxth	r4, r3
 801007a:	2001      	movs	r0, #1
 801007c:	f7fb fb86 	bl	800b78c <lwip_htons>
 8010080:	4603      	mov	r3, r0
 8010082:	461a      	mov	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	691b      	ldr	r3, [r3, #16]
 8010088:	4322      	orrs	r2, r4
 801008a:	b292      	uxth	r2, r2
 801008c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f7fe fa4c 	bl	800e536 <tcp_seg_free>
    while (next &&
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d00e      	beq.n	80100c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	891b      	ldrh	r3, [r3, #8]
 80100a8:	461a      	mov	r2, r3
 80100aa:	4b1d      	ldr	r3, [pc, #116]	@ (8010120 <tcp_oos_insert_segment+0x10c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	441a      	add	r2, r3
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	8909      	ldrh	r1, [r1, #8]
 80100ba:	440b      	add	r3, r1
 80100bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80100be:	2b00      	cmp	r3, #0
 80100c0:	daca      	bge.n	8010058 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d01e      	beq.n	8010106 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	891b      	ldrh	r3, [r3, #8]
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b14      	ldr	r3, [pc, #80]	@ (8010120 <tcp_oos_insert_segment+0x10c>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	441a      	add	r2, r3
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	691b      	ldr	r3, [r3, #16]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	1ad3      	subs	r3, r2, r3
    if (next &&
 80100dc:	2b00      	cmp	r3, #0
 80100de:	dd12      	ble.n	8010106 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	691b      	ldr	r3, [r3, #16]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010120 <tcp_oos_insert_segment+0x10c>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	685a      	ldr	r2, [r3, #4]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	891b      	ldrh	r3, [r3, #8]
 80100fe:	4619      	mov	r1, r3
 8010100:	4610      	mov	r0, r2
 8010102:	f7fc fe0d 	bl	800cd20 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	601a      	str	r2, [r3, #0]
}
 801010c:	bf00      	nop
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	bd90      	pop	{r4, r7, pc}
 8010114:	08019030 	.word	0x08019030
 8010118:	080192f0 	.word	0x080192f0
 801011c:	0801907c 	.word	0x0801907c
 8010120:	20008440 	.word	0x20008440

08010124 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010124:	b5b0      	push	{r4, r5, r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010132:	e03e      	b.n	80101b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	f7fc fffa 	bl	800d13c <pbuf_clen>
 8010148:	4603      	mov	r3, r0
 801014a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010152:	8a7a      	ldrh	r2, [r7, #18]
 8010154:	429a      	cmp	r2, r3
 8010156:	d906      	bls.n	8010166 <tcp_free_acked_segments+0x42>
 8010158:	4b2a      	ldr	r3, [pc, #168]	@ (8010204 <tcp_free_acked_segments+0xe0>)
 801015a:	f240 4257 	movw	r2, #1111	@ 0x457
 801015e:	492a      	ldr	r1, [pc, #168]	@ (8010208 <tcp_free_acked_segments+0xe4>)
 8010160:	482a      	ldr	r0, [pc, #168]	@ (801020c <tcp_free_acked_segments+0xe8>)
 8010162:	f006 fce9 	bl	8016b38 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801016c:	8a7b      	ldrh	r3, [r7, #18]
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	b29a      	uxth	r2, r3
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	891a      	ldrh	r2, [r3, #8]
 801017c:	4b24      	ldr	r3, [pc, #144]	@ (8010210 <tcp_free_acked_segments+0xec>)
 801017e:	881b      	ldrh	r3, [r3, #0]
 8010180:	4413      	add	r3, r2
 8010182:	b29a      	uxth	r2, r3
 8010184:	4b22      	ldr	r3, [pc, #136]	@ (8010210 <tcp_free_acked_segments+0xec>)
 8010186:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010188:	6978      	ldr	r0, [r7, #20]
 801018a:	f7fe f9d4 	bl	800e536 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00c      	beq.n	80101b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d109      	bne.n	80101b2 <tcp_free_acked_segments+0x8e>
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d106      	bne.n	80101b2 <tcp_free_acked_segments+0x8e>
 80101a4:	4b17      	ldr	r3, [pc, #92]	@ (8010204 <tcp_free_acked_segments+0xe0>)
 80101a6:	f240 4261 	movw	r2, #1121	@ 0x461
 80101aa:	491a      	ldr	r1, [pc, #104]	@ (8010214 <tcp_free_acked_segments+0xf0>)
 80101ac:	4817      	ldr	r0, [pc, #92]	@ (801020c <tcp_free_acked_segments+0xe8>)
 80101ae:	f006 fcc3 	bl	8016b38 <iprintf>
  while (seg_list != NULL &&
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d020      	beq.n	80101fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	691b      	ldr	r3, [r3, #16]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	4618      	mov	r0, r3
 80101c0:	f7fb fafa 	bl	800b7b8 <lwip_htonl>
 80101c4:	4604      	mov	r4, r0
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	891b      	ldrh	r3, [r3, #8]
 80101ca:	461d      	mov	r5, r3
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	899b      	ldrh	r3, [r3, #12]
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fb fad9 	bl	800b78c <lwip_htons>
 80101da:	4603      	mov	r3, r0
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	f003 0303 	and.w	r3, r3, #3
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <tcp_free_acked_segments+0xc6>
 80101e6:	2301      	movs	r3, #1
 80101e8:	e000      	b.n	80101ec <tcp_free_acked_segments+0xc8>
 80101ea:	2300      	movs	r3, #0
 80101ec:	442b      	add	r3, r5
 80101ee:	18e2      	adds	r2, r4, r3
 80101f0:	4b09      	ldr	r3, [pc, #36]	@ (8010218 <tcp_free_acked_segments+0xf4>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	dd9c      	ble.n	8010134 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80101fa:	68bb      	ldr	r3, [r7, #8]
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3718      	adds	r7, #24
 8010200:	46bd      	mov	sp, r7
 8010202:	bdb0      	pop	{r4, r5, r7, pc}
 8010204:	08019030 	.word	0x08019030
 8010208:	08019318 	.word	0x08019318
 801020c:	0801907c 	.word	0x0801907c
 8010210:	20008448 	.word	0x20008448
 8010214:	08019340 	.word	0x08019340
 8010218:	20008444 	.word	0x20008444

0801021c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801021c:	b5b0      	push	{r4, r5, r7, lr}
 801021e:	b094      	sub	sp, #80	@ 0x50
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010224:	2300      	movs	r3, #0
 8010226:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d106      	bne.n	801023c <tcp_receive+0x20>
 801022e:	4b91      	ldr	r3, [pc, #580]	@ (8010474 <tcp_receive+0x258>)
 8010230:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010234:	4990      	ldr	r1, [pc, #576]	@ (8010478 <tcp_receive+0x25c>)
 8010236:	4891      	ldr	r0, [pc, #580]	@ (801047c <tcp_receive+0x260>)
 8010238:	f006 fc7e 	bl	8016b38 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	7d1b      	ldrb	r3, [r3, #20]
 8010240:	2b03      	cmp	r3, #3
 8010242:	d806      	bhi.n	8010252 <tcp_receive+0x36>
 8010244:	4b8b      	ldr	r3, [pc, #556]	@ (8010474 <tcp_receive+0x258>)
 8010246:	f240 427c 	movw	r2, #1148	@ 0x47c
 801024a:	498d      	ldr	r1, [pc, #564]	@ (8010480 <tcp_receive+0x264>)
 801024c:	488b      	ldr	r0, [pc, #556]	@ (801047c <tcp_receive+0x260>)
 801024e:	f006 fc73 	bl	8016b38 <iprintf>

  if (flags & TCP_ACK) {
 8010252:	4b8c      	ldr	r3, [pc, #560]	@ (8010484 <tcp_receive+0x268>)
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	f003 0310 	and.w	r3, r3, #16
 801025a:	2b00      	cmp	r3, #0
 801025c:	f000 8264 	beq.w	8010728 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010266:	461a      	mov	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801026c:	4413      	add	r3, r2
 801026e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010274:	4b84      	ldr	r3, [pc, #528]	@ (8010488 <tcp_receive+0x26c>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	2b00      	cmp	r3, #0
 801027c:	db1b      	blt.n	80102b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010282:	4b81      	ldr	r3, [pc, #516]	@ (8010488 <tcp_receive+0x26c>)
 8010284:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010286:	429a      	cmp	r2, r3
 8010288:	d106      	bne.n	8010298 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801028e:	4b7f      	ldr	r3, [pc, #508]	@ (801048c <tcp_receive+0x270>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	1ad3      	subs	r3, r2, r3
 8010294:	2b00      	cmp	r3, #0
 8010296:	db0e      	blt.n	80102b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801029c:	4b7b      	ldr	r3, [pc, #492]	@ (801048c <tcp_receive+0x270>)
 801029e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d125      	bne.n	80102f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80102a4:	4b7a      	ldr	r3, [pc, #488]	@ (8010490 <tcp_receive+0x274>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	89db      	ldrh	r3, [r3, #14]
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d91c      	bls.n	80102f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80102b6:	4b76      	ldr	r3, [pc, #472]	@ (8010490 <tcp_receive+0x274>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	89db      	ldrh	r3, [r3, #14]
 80102bc:	b29a      	uxth	r2, r3
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d205      	bcs.n	80102e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80102e0:	4b69      	ldr	r3, [pc, #420]	@ (8010488 <tcp_receive+0x26c>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80102e8:	4b68      	ldr	r3, [pc, #416]	@ (801048c <tcp_receive+0x270>)
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80102f0:	4b66      	ldr	r3, [pc, #408]	@ (801048c <tcp_receive+0x270>)
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	dc58      	bgt.n	80103b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80102fe:	4b65      	ldr	r3, [pc, #404]	@ (8010494 <tcp_receive+0x278>)
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d14b      	bne.n	801039e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010310:	4413      	add	r3, r2
 8010312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010314:	429a      	cmp	r2, r3
 8010316:	d142      	bne.n	801039e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801031e:	2b00      	cmp	r3, #0
 8010320:	db3d      	blt.n	801039e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010326:	4b59      	ldr	r3, [pc, #356]	@ (801048c <tcp_receive+0x270>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	429a      	cmp	r2, r3
 801032c:	d137      	bne.n	801039e <tcp_receive+0x182>
              found_dupack = 1;
 801032e:	2301      	movs	r3, #1
 8010330:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010338:	2bff      	cmp	r3, #255	@ 0xff
 801033a:	d007      	beq.n	801034c <tcp_receive+0x130>
                ++pcb->dupacks;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010342:	3301      	adds	r3, #1
 8010344:	b2da      	uxtb	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010352:	2b03      	cmp	r3, #3
 8010354:	d91b      	bls.n	801038e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010360:	4413      	add	r3, r2
 8010362:	b29a      	uxth	r2, r3
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801036a:	429a      	cmp	r2, r3
 801036c:	d30a      	bcc.n	8010384 <tcp_receive+0x168>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010378:	4413      	add	r3, r2
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010382:	e004      	b.n	801038e <tcp_receive+0x172>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801038a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010394:	2b02      	cmp	r3, #2
 8010396:	d902      	bls.n	801039e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f001 fefb 	bl	8012194 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801039e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f040 8161 	bne.w	8010668 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80103ae:	e15b      	b.n	8010668 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80103b0:	4b36      	ldr	r3, [pc, #216]	@ (801048c <tcp_receive+0x270>)
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103b8:	1ad3      	subs	r3, r2, r3
 80103ba:	3b01      	subs	r3, #1
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f2c0 814e 	blt.w	801065e <tcp_receive+0x442>
 80103c2:	4b32      	ldr	r3, [pc, #200]	@ (801048c <tcp_receive+0x270>)
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f300 8146 	bgt.w	801065e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	8b5b      	ldrh	r3, [r3, #26]
 80103d6:	f003 0304 	and.w	r3, r3, #4
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d010      	beq.n	8010400 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	8b5b      	ldrh	r3, [r3, #26]
 80103e2:	f023 0304 	bic.w	r3, r3, #4
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801040e:	10db      	asrs	r3, r3, #3
 8010410:	b21b      	sxth	r3, r3
 8010412:	b29a      	uxth	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801041a:	b29b      	uxth	r3, r3
 801041c:	4413      	add	r3, r2
 801041e:	b29b      	uxth	r3, r3
 8010420:	b21a      	sxth	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010428:	4b18      	ldr	r3, [pc, #96]	@ (801048c <tcp_receive+0x270>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	b29a      	uxth	r2, r3
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010432:	b29b      	uxth	r3, r3
 8010434:	1ad3      	subs	r3, r2, r3
 8010436:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010440:	4b12      	ldr	r3, [pc, #72]	@ (801048c <tcp_receive+0x270>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	7d1b      	ldrb	r3, [r3, #20]
 801044c:	2b03      	cmp	r3, #3
 801044e:	f240 8097 	bls.w	8010580 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801045e:	429a      	cmp	r2, r3
 8010460:	d245      	bcs.n	80104ee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	8b5b      	ldrh	r3, [r3, #26]
 8010466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801046a:	2b00      	cmp	r3, #0
 801046c:	d014      	beq.n	8010498 <tcp_receive+0x27c>
 801046e:	2301      	movs	r3, #1
 8010470:	e013      	b.n	801049a <tcp_receive+0x27e>
 8010472:	bf00      	nop
 8010474:	08019030 	.word	0x08019030
 8010478:	08019360 	.word	0x08019360
 801047c:	0801907c 	.word	0x0801907c
 8010480:	0801937c 	.word	0x0801937c
 8010484:	2000844c 	.word	0x2000844c
 8010488:	20008440 	.word	0x20008440
 801048c:	20008444 	.word	0x20008444
 8010490:	20008430 	.word	0x20008430
 8010494:	2000844a 	.word	0x2000844a
 8010498:	2302      	movs	r3, #2
 801049a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801049e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104a8:	fb12 f303 	smulbb	r3, r2, r3
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80104b0:	4293      	cmp	r3, r2
 80104b2:	bf28      	it	cs
 80104b4:	4613      	movcs	r3, r2
 80104b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80104be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80104c0:	4413      	add	r3, r2
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d309      	bcc.n	80104e2 <tcp_receive+0x2c6>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80104d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80104d6:	4413      	add	r3, r2
 80104d8:	b29a      	uxth	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80104e0:	e04e      	b.n	8010580 <tcp_receive+0x364>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80104ec:	e048      	b.n	8010580 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80104f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80104f6:	4413      	add	r3, r2
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010500:	429a      	cmp	r2, r3
 8010502:	d309      	bcc.n	8010518 <tcp_receive+0x2fc>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801050a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801050c:	4413      	add	r3, r2
 801050e:	b29a      	uxth	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010516:	e004      	b.n	8010522 <tcp_receive+0x306>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801051e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801052e:	429a      	cmp	r2, r3
 8010530:	d326      	bcc.n	8010580 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801053e:	1ad3      	subs	r3, r2, r3
 8010540:	b29a      	uxth	r2, r3
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010552:	4413      	add	r3, r2
 8010554:	b29a      	uxth	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801055c:	429a      	cmp	r2, r3
 801055e:	d30a      	bcc.n	8010576 <tcp_receive+0x35a>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801056a:	4413      	add	r3, r2
 801056c:	b29a      	uxth	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010574:	e004      	b.n	8010580 <tcp_receive+0x364>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801057c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010588:	4a98      	ldr	r2, [pc, #608]	@ (80107ec <tcp_receive+0x5d0>)
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff fdca 	bl	8010124 <tcp_free_acked_segments>
 8010590:	4602      	mov	r2, r0
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801059e:	4a94      	ldr	r2, [pc, #592]	@ (80107f0 <tcp_receive+0x5d4>)
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7ff fdbf 	bl	8010124 <tcp_free_acked_segments>
 80105a6:	4602      	mov	r2, r0
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d104      	bne.n	80105be <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105ba:	861a      	strh	r2, [r3, #48]	@ 0x30
 80105bc:	e002      	b.n	80105c4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d103      	bne.n	80105da <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80105e0:	4b84      	ldr	r3, [pc, #528]	@ (80107f4 <tcp_receive+0x5d8>)
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	4413      	add	r3, r2
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8b5b      	ldrh	r3, [r3, #26]
 80105f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d035      	beq.n	8010666 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d118      	bne.n	8010634 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00c      	beq.n	8010624 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	4618      	mov	r0, r3
 8010618:	f7fb f8ce 	bl	800b7b8 <lwip_htonl>
 801061c:	4603      	mov	r3, r0
 801061e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010620:	2b00      	cmp	r3, #0
 8010622:	dc20      	bgt.n	8010666 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	8b5b      	ldrh	r3, [r3, #26]
 8010628:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801062c:	b29a      	uxth	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010632:	e018      	b.n	8010666 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801063c:	691b      	ldr	r3, [r3, #16]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	4618      	mov	r0, r3
 8010642:	f7fb f8b9 	bl	800b7b8 <lwip_htonl>
 8010646:	4603      	mov	r3, r0
 8010648:	1ae3      	subs	r3, r4, r3
 801064a:	2b00      	cmp	r3, #0
 801064c:	dc0b      	bgt.n	8010666 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	8b5b      	ldrh	r3, [r3, #26]
 8010652:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010656:	b29a      	uxth	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801065c:	e003      	b.n	8010666 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f001 ff84 	bl	801256c <tcp_send_empty_ack>
 8010664:	e000      	b.n	8010668 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010666:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801066c:	2b00      	cmp	r3, #0
 801066e:	d05b      	beq.n	8010728 <tcp_receive+0x50c>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010674:	4b60      	ldr	r3, [pc, #384]	@ (80107f8 <tcp_receive+0x5dc>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	da54      	bge.n	8010728 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801067e:	4b5f      	ldr	r3, [pc, #380]	@ (80107fc <tcp_receive+0x5e0>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	b29a      	uxth	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010688:	b29b      	uxth	r3, r3
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	b29b      	uxth	r3, r3
 801068e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010692:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801069c:	10db      	asrs	r3, r3, #3
 801069e:	b21b      	sxth	r3, r3
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80106b6:	4413      	add	r3, r2
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	b21a      	sxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80106c0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	da05      	bge.n	80106d4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80106c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80106cc:	425b      	negs	r3, r3
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80106d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80106de:	109b      	asrs	r3, r3, #2
 80106e0:	b21b      	sxth	r3, r3
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80106f8:	4413      	add	r3, r2
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	b21a      	sxth	r2, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010708:	10db      	asrs	r3, r3, #3
 801070a:	b21b      	sxth	r3, r3
 801070c:	b29a      	uxth	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010714:	b29b      	uxth	r3, r3
 8010716:	4413      	add	r3, r2
 8010718:	b29b      	uxth	r3, r3
 801071a:	b21a      	sxth	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010728:	4b35      	ldr	r3, [pc, #212]	@ (8010800 <tcp_receive+0x5e4>)
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	f000 84df 	beq.w	80110f0 <tcp_receive+0xed4>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	7d1b      	ldrb	r3, [r3, #20]
 8010736:	2b06      	cmp	r3, #6
 8010738:	f200 84da 	bhi.w	80110f0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010740:	4b30      	ldr	r3, [pc, #192]	@ (8010804 <tcp_receive+0x5e8>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	3b01      	subs	r3, #1
 8010748:	2b00      	cmp	r3, #0
 801074a:	f2c0 808f 	blt.w	801086c <tcp_receive+0x650>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010752:	4b2b      	ldr	r3, [pc, #172]	@ (8010800 <tcp_receive+0x5e4>)
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	4619      	mov	r1, r3
 8010758:	4b2a      	ldr	r3, [pc, #168]	@ (8010804 <tcp_receive+0x5e8>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	440b      	add	r3, r1
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	3301      	adds	r3, #1
 8010762:	2b00      	cmp	r3, #0
 8010764:	f300 8082 	bgt.w	801086c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010768:	4b27      	ldr	r3, [pc, #156]	@ (8010808 <tcp_receive+0x5ec>)
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010772:	4b24      	ldr	r3, [pc, #144]	@ (8010804 <tcp_receive+0x5e8>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801077a:	4b23      	ldr	r3, [pc, #140]	@ (8010808 <tcp_receive+0x5ec>)
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_receive+0x574>
 8010782:	4b22      	ldr	r3, [pc, #136]	@ (801080c <tcp_receive+0x5f0>)
 8010784:	f240 5294 	movw	r2, #1428	@ 0x594
 8010788:	4921      	ldr	r1, [pc, #132]	@ (8010810 <tcp_receive+0x5f4>)
 801078a:	4822      	ldr	r0, [pc, #136]	@ (8010814 <tcp_receive+0x5f8>)
 801078c:	f006 f9d4 	bl	8016b38 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010792:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010796:	4293      	cmp	r3, r2
 8010798:	d906      	bls.n	80107a8 <tcp_receive+0x58c>
 801079a:	4b1c      	ldr	r3, [pc, #112]	@ (801080c <tcp_receive+0x5f0>)
 801079c:	f240 5295 	movw	r2, #1429	@ 0x595
 80107a0:	491d      	ldr	r1, [pc, #116]	@ (8010818 <tcp_receive+0x5fc>)
 80107a2:	481c      	ldr	r0, [pc, #112]	@ (8010814 <tcp_receive+0x5f8>)
 80107a4:	f006 f9c8 	bl	8016b38 <iprintf>
      off = (u16_t)off32;
 80107a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80107ae:	4b16      	ldr	r3, [pc, #88]	@ (8010808 <tcp_receive+0x5ec>)
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	891b      	ldrh	r3, [r3, #8]
 80107b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d906      	bls.n	80107ca <tcp_receive+0x5ae>
 80107bc:	4b13      	ldr	r3, [pc, #76]	@ (801080c <tcp_receive+0x5f0>)
 80107be:	f240 5297 	movw	r2, #1431	@ 0x597
 80107c2:	4916      	ldr	r1, [pc, #88]	@ (801081c <tcp_receive+0x600>)
 80107c4:	4813      	ldr	r0, [pc, #76]	@ (8010814 <tcp_receive+0x5f8>)
 80107c6:	f006 f9b7 	bl	8016b38 <iprintf>
      inseg.len -= off;
 80107ca:	4b0f      	ldr	r3, [pc, #60]	@ (8010808 <tcp_receive+0x5ec>)
 80107cc:	891a      	ldrh	r2, [r3, #8]
 80107ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010808 <tcp_receive+0x5ec>)
 80107d8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80107da:	4b0b      	ldr	r3, [pc, #44]	@ (8010808 <tcp_receive+0x5ec>)
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	891a      	ldrh	r2, [r3, #8]
 80107e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80107e8:	e02a      	b.n	8010840 <tcp_receive+0x624>
 80107ea:	bf00      	nop
 80107ec:	08019398 	.word	0x08019398
 80107f0:	080193a0 	.word	0x080193a0
 80107f4:	20008448 	.word	0x20008448
 80107f8:	20008444 	.word	0x20008444
 80107fc:	20008404 	.word	0x20008404
 8010800:	2000844a 	.word	0x2000844a
 8010804:	20008440 	.word	0x20008440
 8010808:	2000841c 	.word	0x2000841c
 801080c:	08019030 	.word	0x08019030
 8010810:	080193a8 	.word	0x080193a8
 8010814:	0801907c 	.word	0x0801907c
 8010818:	080193b8 	.word	0x080193b8
 801081c:	080193c8 	.word	0x080193c8
        off -= p->len;
 8010820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010822:	895b      	ldrh	r3, [r3, #10]
 8010824:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801082e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010830:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010832:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010836:	2200      	movs	r2, #0
 8010838:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801083a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010842:	895b      	ldrh	r3, [r3, #10]
 8010844:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010848:	429a      	cmp	r2, r3
 801084a:	d8e9      	bhi.n	8010820 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801084c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010850:	4619      	mov	r1, r3
 8010852:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010854:	f7fc fb64 	bl	800cf20 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801085c:	4a90      	ldr	r2, [pc, #576]	@ (8010aa0 <tcp_receive+0x884>)
 801085e:	6013      	str	r3, [r2, #0]
 8010860:	4b90      	ldr	r3, [pc, #576]	@ (8010aa4 <tcp_receive+0x888>)
 8010862:	691b      	ldr	r3, [r3, #16]
 8010864:	4a8e      	ldr	r2, [pc, #568]	@ (8010aa0 <tcp_receive+0x884>)
 8010866:	6812      	ldr	r2, [r2, #0]
 8010868:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801086a:	e00d      	b.n	8010888 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801086c:	4b8c      	ldr	r3, [pc, #560]	@ (8010aa0 <tcp_receive+0x884>)
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010874:	1ad3      	subs	r3, r2, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	da06      	bge.n	8010888 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	8b5b      	ldrh	r3, [r3, #26]
 801087e:	f043 0302 	orr.w	r3, r3, #2
 8010882:	b29a      	uxth	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010888:	4b85      	ldr	r3, [pc, #532]	@ (8010aa0 <tcp_receive+0x884>)
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	2b00      	cmp	r3, #0
 8010894:	f2c0 8427 	blt.w	80110e6 <tcp_receive+0xeca>
 8010898:	4b81      	ldr	r3, [pc, #516]	@ (8010aa0 <tcp_receive+0x884>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108a0:	6879      	ldr	r1, [r7, #4]
 80108a2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80108a4:	440b      	add	r3, r1
 80108a6:	1ad3      	subs	r3, r2, r3
 80108a8:	3301      	adds	r3, #1
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f300 841b 	bgt.w	80110e6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108b4:	4b7a      	ldr	r3, [pc, #488]	@ (8010aa0 <tcp_receive+0x884>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	f040 8298 	bne.w	8010dee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80108be:	4b79      	ldr	r3, [pc, #484]	@ (8010aa4 <tcp_receive+0x888>)
 80108c0:	891c      	ldrh	r4, [r3, #8]
 80108c2:	4b78      	ldr	r3, [pc, #480]	@ (8010aa4 <tcp_receive+0x888>)
 80108c4:	691b      	ldr	r3, [r3, #16]
 80108c6:	899b      	ldrh	r3, [r3, #12]
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fa ff5e 	bl	800b78c <lwip_htons>
 80108d0:	4603      	mov	r3, r0
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	f003 0303 	and.w	r3, r3, #3
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d001      	beq.n	80108e0 <tcp_receive+0x6c4>
 80108dc:	2301      	movs	r3, #1
 80108de:	e000      	b.n	80108e2 <tcp_receive+0x6c6>
 80108e0:	2300      	movs	r3, #0
 80108e2:	4423      	add	r3, r4
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	4b70      	ldr	r3, [pc, #448]	@ (8010aa8 <tcp_receive+0x88c>)
 80108e8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80108ee:	4b6e      	ldr	r3, [pc, #440]	@ (8010aa8 <tcp_receive+0x88c>)
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d274      	bcs.n	80109e0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108f6:	4b6b      	ldr	r3, [pc, #428]	@ (8010aa4 <tcp_receive+0x888>)
 80108f8:	691b      	ldr	r3, [r3, #16]
 80108fa:	899b      	ldrh	r3, [r3, #12]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fa ff44 	bl	800b78c <lwip_htons>
 8010904:	4603      	mov	r3, r0
 8010906:	b2db      	uxtb	r3, r3
 8010908:	f003 0301 	and.w	r3, r3, #1
 801090c:	2b00      	cmp	r3, #0
 801090e:	d01e      	beq.n	801094e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010910:	4b64      	ldr	r3, [pc, #400]	@ (8010aa4 <tcp_receive+0x888>)
 8010912:	691b      	ldr	r3, [r3, #16]
 8010914:	899b      	ldrh	r3, [r3, #12]
 8010916:	b29b      	uxth	r3, r3
 8010918:	b21b      	sxth	r3, r3
 801091a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801091e:	b21c      	sxth	r4, r3
 8010920:	4b60      	ldr	r3, [pc, #384]	@ (8010aa4 <tcp_receive+0x888>)
 8010922:	691b      	ldr	r3, [r3, #16]
 8010924:	899b      	ldrh	r3, [r3, #12]
 8010926:	b29b      	uxth	r3, r3
 8010928:	4618      	mov	r0, r3
 801092a:	f7fa ff2f 	bl	800b78c <lwip_htons>
 801092e:	4603      	mov	r3, r0
 8010930:	b2db      	uxtb	r3, r3
 8010932:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010936:	b29b      	uxth	r3, r3
 8010938:	4618      	mov	r0, r3
 801093a:	f7fa ff27 	bl	800b78c <lwip_htons>
 801093e:	4603      	mov	r3, r0
 8010940:	b21b      	sxth	r3, r3
 8010942:	4323      	orrs	r3, r4
 8010944:	b21a      	sxth	r2, r3
 8010946:	4b57      	ldr	r3, [pc, #348]	@ (8010aa4 <tcp_receive+0x888>)
 8010948:	691b      	ldr	r3, [r3, #16]
 801094a:	b292      	uxth	r2, r2
 801094c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010952:	4b54      	ldr	r3, [pc, #336]	@ (8010aa4 <tcp_receive+0x888>)
 8010954:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010956:	4b53      	ldr	r3, [pc, #332]	@ (8010aa4 <tcp_receive+0x888>)
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	899b      	ldrh	r3, [r3, #12]
 801095c:	b29b      	uxth	r3, r3
 801095e:	4618      	mov	r0, r3
 8010960:	f7fa ff14 	bl	800b78c <lwip_htons>
 8010964:	4603      	mov	r3, r0
 8010966:	b2db      	uxtb	r3, r3
 8010968:	f003 0302 	and.w	r3, r3, #2
 801096c:	2b00      	cmp	r3, #0
 801096e:	d005      	beq.n	801097c <tcp_receive+0x760>
            inseg.len -= 1;
 8010970:	4b4c      	ldr	r3, [pc, #304]	@ (8010aa4 <tcp_receive+0x888>)
 8010972:	891b      	ldrh	r3, [r3, #8]
 8010974:	3b01      	subs	r3, #1
 8010976:	b29a      	uxth	r2, r3
 8010978:	4b4a      	ldr	r3, [pc, #296]	@ (8010aa4 <tcp_receive+0x888>)
 801097a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801097c:	4b49      	ldr	r3, [pc, #292]	@ (8010aa4 <tcp_receive+0x888>)
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	4a48      	ldr	r2, [pc, #288]	@ (8010aa4 <tcp_receive+0x888>)
 8010982:	8912      	ldrh	r2, [r2, #8]
 8010984:	4611      	mov	r1, r2
 8010986:	4618      	mov	r0, r3
 8010988:	f7fc f9ca 	bl	800cd20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801098c:	4b45      	ldr	r3, [pc, #276]	@ (8010aa4 <tcp_receive+0x888>)
 801098e:	891c      	ldrh	r4, [r3, #8]
 8010990:	4b44      	ldr	r3, [pc, #272]	@ (8010aa4 <tcp_receive+0x888>)
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	899b      	ldrh	r3, [r3, #12]
 8010996:	b29b      	uxth	r3, r3
 8010998:	4618      	mov	r0, r3
 801099a:	f7fa fef7 	bl	800b78c <lwip_htons>
 801099e:	4603      	mov	r3, r0
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	f003 0303 	and.w	r3, r3, #3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d001      	beq.n	80109ae <tcp_receive+0x792>
 80109aa:	2301      	movs	r3, #1
 80109ac:	e000      	b.n	80109b0 <tcp_receive+0x794>
 80109ae:	2300      	movs	r3, #0
 80109b0:	4423      	add	r3, r4
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	4b3c      	ldr	r3, [pc, #240]	@ (8010aa8 <tcp_receive+0x88c>)
 80109b6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80109b8:	4b3b      	ldr	r3, [pc, #236]	@ (8010aa8 <tcp_receive+0x88c>)
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	461a      	mov	r2, r3
 80109be:	4b38      	ldr	r3, [pc, #224]	@ (8010aa0 <tcp_receive+0x884>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	441a      	add	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109c8:	6879      	ldr	r1, [r7, #4]
 80109ca:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80109cc:	440b      	add	r3, r1
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d006      	beq.n	80109e0 <tcp_receive+0x7c4>
 80109d2:	4b36      	ldr	r3, [pc, #216]	@ (8010aac <tcp_receive+0x890>)
 80109d4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80109d8:	4935      	ldr	r1, [pc, #212]	@ (8010ab0 <tcp_receive+0x894>)
 80109da:	4836      	ldr	r0, [pc, #216]	@ (8010ab4 <tcp_receive+0x898>)
 80109dc:	f006 f8ac 	bl	8016b38 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f000 80e6 	beq.w	8010bb6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80109ea:	4b2e      	ldr	r3, [pc, #184]	@ (8010aa4 <tcp_receive+0x888>)
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	899b      	ldrh	r3, [r3, #12]
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fa feca 	bl	800b78c <lwip_htons>
 80109f8:	4603      	mov	r3, r0
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	f003 0301 	and.w	r3, r3, #1
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d010      	beq.n	8010a26 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010a04:	e00a      	b.n	8010a1c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a0a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f7fd fd8d 	bl	800e536 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d1f0      	bne.n	8010a06 <tcp_receive+0x7ea>
 8010a24:	e0c7      	b.n	8010bb6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010a2c:	e051      	b.n	8010ad2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a30:	691b      	ldr	r3, [r3, #16]
 8010a32:	899b      	ldrh	r3, [r3, #12]
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fa fea8 	bl	800b78c <lwip_htons>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	f003 0301 	and.w	r3, r3, #1
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d03c      	beq.n	8010ac2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010a48:	4b16      	ldr	r3, [pc, #88]	@ (8010aa4 <tcp_receive+0x888>)
 8010a4a:	691b      	ldr	r3, [r3, #16]
 8010a4c:	899b      	ldrh	r3, [r3, #12]
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fa fe9b 	bl	800b78c <lwip_htons>
 8010a56:	4603      	mov	r3, r0
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d12f      	bne.n	8010ac2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010a62:	4b10      	ldr	r3, [pc, #64]	@ (8010aa4 <tcp_receive+0x888>)
 8010a64:	691b      	ldr	r3, [r3, #16]
 8010a66:	899b      	ldrh	r3, [r3, #12]
 8010a68:	b29c      	uxth	r4, r3
 8010a6a:	2001      	movs	r0, #1
 8010a6c:	f7fa fe8e 	bl	800b78c <lwip_htons>
 8010a70:	4603      	mov	r3, r0
 8010a72:	461a      	mov	r2, r3
 8010a74:	4b0b      	ldr	r3, [pc, #44]	@ (8010aa4 <tcp_receive+0x888>)
 8010a76:	691b      	ldr	r3, [r3, #16]
 8010a78:	4322      	orrs	r2, r4
 8010a7a:	b292      	uxth	r2, r2
 8010a7c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010a7e:	4b09      	ldr	r3, [pc, #36]	@ (8010aa4 <tcp_receive+0x888>)
 8010a80:	891c      	ldrh	r4, [r3, #8]
 8010a82:	4b08      	ldr	r3, [pc, #32]	@ (8010aa4 <tcp_receive+0x888>)
 8010a84:	691b      	ldr	r3, [r3, #16]
 8010a86:	899b      	ldrh	r3, [r3, #12]
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fa fe7e 	bl	800b78c <lwip_htons>
 8010a90:	4603      	mov	r3, r0
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	f003 0303 	and.w	r3, r3, #3
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00d      	beq.n	8010ab8 <tcp_receive+0x89c>
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e00c      	b.n	8010aba <tcp_receive+0x89e>
 8010aa0:	20008440 	.word	0x20008440
 8010aa4:	2000841c 	.word	0x2000841c
 8010aa8:	2000844a 	.word	0x2000844a
 8010aac:	08019030 	.word	0x08019030
 8010ab0:	080193d8 	.word	0x080193d8
 8010ab4:	0801907c 	.word	0x0801907c
 8010ab8:	2300      	movs	r3, #0
 8010aba:	4423      	add	r3, r4
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	4b98      	ldr	r3, [pc, #608]	@ (8010d20 <tcp_receive+0xb04>)
 8010ac0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ac4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010acc:	6938      	ldr	r0, [r7, #16]
 8010ace:	f7fd fd32 	bl	800e536 <tcp_seg_free>
            while (next &&
 8010ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00e      	beq.n	8010af6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010ad8:	4b91      	ldr	r3, [pc, #580]	@ (8010d20 <tcp_receive+0xb04>)
 8010ada:	881b      	ldrh	r3, [r3, #0]
 8010adc:	461a      	mov	r2, r3
 8010ade:	4b91      	ldr	r3, [pc, #580]	@ (8010d24 <tcp_receive+0xb08>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	441a      	add	r2, r3
 8010ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ae6:	691b      	ldr	r3, [r3, #16]
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010aec:	8909      	ldrh	r1, [r1, #8]
 8010aee:	440b      	add	r3, r1
 8010af0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	da9b      	bge.n	8010a2e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d059      	beq.n	8010bb0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010afc:	4b88      	ldr	r3, [pc, #544]	@ (8010d20 <tcp_receive+0xb04>)
 8010afe:	881b      	ldrh	r3, [r3, #0]
 8010b00:	461a      	mov	r2, r3
 8010b02:	4b88      	ldr	r3, [pc, #544]	@ (8010d24 <tcp_receive+0xb08>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	441a      	add	r2, r3
 8010b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b0a:	691b      	ldr	r3, [r3, #16]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	dd4d      	ble.n	8010bb0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b16:	691b      	ldr	r3, [r3, #16]
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	4b81      	ldr	r3, [pc, #516]	@ (8010d24 <tcp_receive+0xb08>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	4b80      	ldr	r3, [pc, #512]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b2c:	691b      	ldr	r3, [r3, #16]
 8010b2e:	899b      	ldrh	r3, [r3, #12]
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fa fe2a 	bl	800b78c <lwip_htons>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	f003 0302 	and.w	r3, r3, #2
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d005      	beq.n	8010b50 <tcp_receive+0x934>
                inseg.len -= 1;
 8010b44:	4b78      	ldr	r3, [pc, #480]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b46:	891b      	ldrh	r3, [r3, #8]
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	4b76      	ldr	r3, [pc, #472]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010b50:	4b75      	ldr	r3, [pc, #468]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	4a74      	ldr	r2, [pc, #464]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b56:	8912      	ldrh	r2, [r2, #8]
 8010b58:	4611      	mov	r1, r2
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7fc f8e0 	bl	800cd20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010b60:	4b71      	ldr	r3, [pc, #452]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b62:	891c      	ldrh	r4, [r3, #8]
 8010b64:	4b70      	ldr	r3, [pc, #448]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	899b      	ldrh	r3, [r3, #12]
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fa fe0d 	bl	800b78c <lwip_htons>
 8010b72:	4603      	mov	r3, r0
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	f003 0303 	and.w	r3, r3, #3
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d001      	beq.n	8010b82 <tcp_receive+0x966>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e000      	b.n	8010b84 <tcp_receive+0x968>
 8010b82:	2300      	movs	r3, #0
 8010b84:	4423      	add	r3, r4
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	4b65      	ldr	r3, [pc, #404]	@ (8010d20 <tcp_receive+0xb04>)
 8010b8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010b8c:	4b64      	ldr	r3, [pc, #400]	@ (8010d20 <tcp_receive+0xb04>)
 8010b8e:	881b      	ldrh	r3, [r3, #0]
 8010b90:	461a      	mov	r2, r3
 8010b92:	4b64      	ldr	r3, [pc, #400]	@ (8010d24 <tcp_receive+0xb08>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	441a      	add	r2, r3
 8010b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b9a:	691b      	ldr	r3, [r3, #16]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d006      	beq.n	8010bb0 <tcp_receive+0x994>
 8010ba2:	4b62      	ldr	r3, [pc, #392]	@ (8010d2c <tcp_receive+0xb10>)
 8010ba4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010ba8:	4961      	ldr	r1, [pc, #388]	@ (8010d30 <tcp_receive+0xb14>)
 8010baa:	4862      	ldr	r0, [pc, #392]	@ (8010d34 <tcp_receive+0xb18>)
 8010bac:	f005 ffc4 	bl	8016b38 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010bb4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010bb6:	4b5a      	ldr	r3, [pc, #360]	@ (8010d20 <tcp_receive+0xb04>)
 8010bb8:	881b      	ldrh	r3, [r3, #0]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	4b59      	ldr	r3, [pc, #356]	@ (8010d24 <tcp_receive+0xb08>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	441a      	add	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010bca:	4b55      	ldr	r3, [pc, #340]	@ (8010d20 <tcp_receive+0xb04>)
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d206      	bcs.n	8010be0 <tcp_receive+0x9c4>
 8010bd2:	4b56      	ldr	r3, [pc, #344]	@ (8010d2c <tcp_receive+0xb10>)
 8010bd4:	f240 6207 	movw	r2, #1543	@ 0x607
 8010bd8:	4957      	ldr	r1, [pc, #348]	@ (8010d38 <tcp_receive+0xb1c>)
 8010bda:	4856      	ldr	r0, [pc, #344]	@ (8010d34 <tcp_receive+0xb18>)
 8010bdc:	f005 ffac 	bl	8016b38 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010be4:	4b4e      	ldr	r3, [pc, #312]	@ (8010d20 <tcp_receive+0xb04>)
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7fc ffbf 	bl	800db74 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8010d28 <tcp_receive+0xb0c>)
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	891b      	ldrh	r3, [r3, #8]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d006      	beq.n	8010c0e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010c00:	4b49      	ldr	r3, [pc, #292]	@ (8010d28 <tcp_receive+0xb0c>)
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	4a4d      	ldr	r2, [pc, #308]	@ (8010d3c <tcp_receive+0xb20>)
 8010c06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010c08:	4b47      	ldr	r3, [pc, #284]	@ (8010d28 <tcp_receive+0xb0c>)
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c0e:	4b46      	ldr	r3, [pc, #280]	@ (8010d28 <tcp_receive+0xb0c>)
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	899b      	ldrh	r3, [r3, #12]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fa fdb8 	bl	800b78c <lwip_htons>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	f003 0301 	and.w	r3, r3, #1
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f000 80b8 	beq.w	8010d9a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010c2a:	4b45      	ldr	r3, [pc, #276]	@ (8010d40 <tcp_receive+0xb24>)
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	f043 0320 	orr.w	r3, r3, #32
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	4b42      	ldr	r3, [pc, #264]	@ (8010d40 <tcp_receive+0xb24>)
 8010c36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010c38:	e0af      	b.n	8010d9a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c44:	691b      	ldr	r3, [r3, #16]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	4a36      	ldr	r2, [pc, #216]	@ (8010d24 <tcp_receive+0xb08>)
 8010c4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	891b      	ldrh	r3, [r3, #8]
 8010c50:	461c      	mov	r4, r3
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	691b      	ldr	r3, [r3, #16]
 8010c56:	899b      	ldrh	r3, [r3, #12]
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fa fd96 	bl	800b78c <lwip_htons>
 8010c60:	4603      	mov	r3, r0
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	f003 0303 	and.w	r3, r3, #3
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d001      	beq.n	8010c70 <tcp_receive+0xa54>
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e000      	b.n	8010c72 <tcp_receive+0xa56>
 8010c70:	2300      	movs	r3, #0
 8010c72:	191a      	adds	r2, r3, r4
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c78:	441a      	add	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c82:	461c      	mov	r4, r3
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	891b      	ldrh	r3, [r3, #8]
 8010c88:	461d      	mov	r5, r3
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	691b      	ldr	r3, [r3, #16]
 8010c8e:	899b      	ldrh	r3, [r3, #12]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fa fd7a 	bl	800b78c <lwip_htons>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	f003 0303 	and.w	r3, r3, #3
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d001      	beq.n	8010ca8 <tcp_receive+0xa8c>
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e000      	b.n	8010caa <tcp_receive+0xa8e>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	442b      	add	r3, r5
 8010cac:	429c      	cmp	r4, r3
 8010cae:	d206      	bcs.n	8010cbe <tcp_receive+0xaa2>
 8010cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8010d2c <tcp_receive+0xb10>)
 8010cb2:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010cb6:	4923      	ldr	r1, [pc, #140]	@ (8010d44 <tcp_receive+0xb28>)
 8010cb8:	481e      	ldr	r0, [pc, #120]	@ (8010d34 <tcp_receive+0xb18>)
 8010cba:	f005 ff3d 	bl	8016b38 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	891b      	ldrh	r3, [r3, #8]
 8010cc2:	461c      	mov	r4, r3
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	691b      	ldr	r3, [r3, #16]
 8010cc8:	899b      	ldrh	r3, [r3, #12]
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fa fd5d 	bl	800b78c <lwip_htons>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	f003 0303 	and.w	r3, r3, #3
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <tcp_receive+0xac6>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e000      	b.n	8010ce4 <tcp_receive+0xac8>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	1919      	adds	r1, r3, r4
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010cea:	b28b      	uxth	r3, r1
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7fc ff3d 	bl	800db74 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	891b      	ldrh	r3, [r3, #8]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d028      	beq.n	8010d56 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010d04:	4b0d      	ldr	r3, [pc, #52]	@ (8010d3c <tcp_receive+0xb20>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d01d      	beq.n	8010d48 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8010d3c <tcp_receive+0xb20>)
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	4619      	mov	r1, r3
 8010d16:	4610      	mov	r0, r2
 8010d18:	f7fc fa4a 	bl	800d1b0 <pbuf_cat>
 8010d1c:	e018      	b.n	8010d50 <tcp_receive+0xb34>
 8010d1e:	bf00      	nop
 8010d20:	2000844a 	.word	0x2000844a
 8010d24:	20008440 	.word	0x20008440
 8010d28:	2000841c 	.word	0x2000841c
 8010d2c:	08019030 	.word	0x08019030
 8010d30:	08019410 	.word	0x08019410
 8010d34:	0801907c 	.word	0x0801907c
 8010d38:	0801944c 	.word	0x0801944c
 8010d3c:	20008450 	.word	0x20008450
 8010d40:	2000844d 	.word	0x2000844d
 8010d44:	0801946c 	.word	0x0801946c
            } else {
              recv_data = cseg->p;
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	4a70      	ldr	r2, [pc, #448]	@ (8010f10 <tcp_receive+0xcf4>)
 8010d4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	2200      	movs	r2, #0
 8010d54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	899b      	ldrh	r3, [r3, #12]
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fa fd14 	bl	800b78c <lwip_htons>
 8010d64:	4603      	mov	r3, r0
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	f003 0301 	and.w	r3, r3, #1
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d00d      	beq.n	8010d8c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010d70:	4b68      	ldr	r3, [pc, #416]	@ (8010f14 <tcp_receive+0xcf8>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	f043 0320 	orr.w	r3, r3, #32
 8010d78:	b2da      	uxtb	r2, r3
 8010d7a:	4b66      	ldr	r3, [pc, #408]	@ (8010f14 <tcp_receive+0xcf8>)
 8010d7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	7d1b      	ldrb	r3, [r3, #20]
 8010d82:	2b04      	cmp	r3, #4
 8010d84:	d102      	bne.n	8010d8c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2207      	movs	r2, #7
 8010d8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010d94:	68b8      	ldr	r0, [r7, #8]
 8010d96:	f7fd fbce 	bl	800e536 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d008      	beq.n	8010db4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010da6:	691b      	ldr	r3, [r3, #16]
 8010da8:	685a      	ldr	r2, [r3, #4]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8010dae:	429a      	cmp	r2, r3
 8010db0:	f43f af43 	beq.w	8010c3a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	8b5b      	ldrh	r3, [r3, #26]
 8010db8:	f003 0301 	and.w	r3, r3, #1
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00e      	beq.n	8010dde <tcp_receive+0xbc2>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	8b5b      	ldrh	r3, [r3, #26]
 8010dc4:	f023 0301 	bic.w	r3, r3, #1
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	835a      	strh	r2, [r3, #26]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8b5b      	ldrh	r3, [r3, #26]
 8010dd2:	f043 0302 	orr.w	r3, r3, #2
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ddc:	e187      	b.n	80110ee <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	8b5b      	ldrh	r3, [r3, #26]
 8010de2:	f043 0301 	orr.w	r3, r3, #1
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010dec:	e17f      	b.n	80110ee <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010df6:	4848      	ldr	r0, [pc, #288]	@ (8010f18 <tcp_receive+0xcfc>)
 8010df8:	f7fd fbb6 	bl	800e568 <tcp_seg_copy>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	675a      	str	r2, [r3, #116]	@ 0x74
 8010e02:	e16c      	b.n	80110de <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010e04:	2300      	movs	r3, #0
 8010e06:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010e0e:	e156      	b.n	80110be <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e12:	691b      	ldr	r3, [r3, #16]
 8010e14:	685a      	ldr	r2, [r3, #4]
 8010e16:	4b41      	ldr	r3, [pc, #260]	@ (8010f1c <tcp_receive+0xd00>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d11d      	bne.n	8010e5a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8010f18 <tcp_receive+0xcfc>)
 8010e20:	891a      	ldrh	r2, [r3, #8]
 8010e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e24:	891b      	ldrh	r3, [r3, #8]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	f240 814e 	bls.w	80110c8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e2c:	483a      	ldr	r0, [pc, #232]	@ (8010f18 <tcp_receive+0xcfc>)
 8010e2e:	f7fd fb9b 	bl	800e568 <tcp_seg_copy>
 8010e32:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f000 8148 	beq.w	80110cc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d003      	beq.n	8010e4a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e44:	697a      	ldr	r2, [r7, #20]
 8010e46:	601a      	str	r2, [r3, #0]
 8010e48:	e002      	b.n	8010e50 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010e50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010e52:	6978      	ldr	r0, [r7, #20]
 8010e54:	f7ff f8de 	bl	8010014 <tcp_oos_insert_segment>
                }
                break;
 8010e58:	e138      	b.n	80110cc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d117      	bne.n	8010e90 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010e60:	4b2e      	ldr	r3, [pc, #184]	@ (8010f1c <tcp_receive+0xd00>)
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	685b      	ldr	r3, [r3, #4]
 8010e6a:	1ad3      	subs	r3, r2, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	da57      	bge.n	8010f20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e70:	4829      	ldr	r0, [pc, #164]	@ (8010f18 <tcp_receive+0xcfc>)
 8010e72:	f7fd fb79 	bl	800e568 <tcp_seg_copy>
 8010e76:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f000 8128 	beq.w	80110d0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	69ba      	ldr	r2, [r7, #24]
 8010e84:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010e86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010e88:	69b8      	ldr	r0, [r7, #24]
 8010e8a:	f7ff f8c3 	bl	8010014 <tcp_oos_insert_segment>
                  }
                  break;
 8010e8e:	e11f      	b.n	80110d0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010e90:	4b22      	ldr	r3, [pc, #136]	@ (8010f1c <tcp_receive+0xd00>)
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e96:	691b      	ldr	r3, [r3, #16]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	db3e      	blt.n	8010f20 <tcp_receive+0xd04>
 8010ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8010f1c <tcp_receive+0xd00>)
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea8:	691b      	ldr	r3, [r3, #16]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	1ad3      	subs	r3, r2, r3
 8010eae:	3301      	adds	r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	dc35      	bgt.n	8010f20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010eb4:	4818      	ldr	r0, [pc, #96]	@ (8010f18 <tcp_receive+0xcfc>)
 8010eb6:	f7fd fb57 	bl	800e568 <tcp_seg_copy>
 8010eba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f000 8108 	beq.w	80110d4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ec6:	691b      	ldr	r3, [r3, #16]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ecc:	8912      	ldrh	r2, [r2, #8]
 8010ece:	441a      	add	r2, r3
 8010ed0:	4b12      	ldr	r3, [pc, #72]	@ (8010f1c <tcp_receive+0xd00>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	1ad3      	subs	r3, r2, r3
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	dd12      	ble.n	8010f00 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010eda:	4b10      	ldr	r3, [pc, #64]	@ (8010f1c <tcp_receive+0xd00>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ee2:	691b      	ldr	r3, [r3, #16]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	1ad3      	subs	r3, r2, r3
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010eee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ef2:	685a      	ldr	r2, [r3, #4]
 8010ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ef6:	891b      	ldrh	r3, [r3, #8]
 8010ef8:	4619      	mov	r1, r3
 8010efa:	4610      	mov	r0, r2
 8010efc:	f7fb ff10 	bl	800cd20 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f02:	69fa      	ldr	r2, [r7, #28]
 8010f04:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010f06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010f08:	69f8      	ldr	r0, [r7, #28]
 8010f0a:	f7ff f883 	bl	8010014 <tcp_oos_insert_segment>
                  }
                  break;
 8010f0e:	e0e1      	b.n	80110d4 <tcp_receive+0xeb8>
 8010f10:	20008450 	.word	0x20008450
 8010f14:	2000844d 	.word	0x2000844d
 8010f18:	2000841c 	.word	0x2000841c
 8010f1c:	20008440 	.word	0x20008440
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f22:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f040 80c5 	bne.w	80110b8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010f2e:	4b7f      	ldr	r3, [pc, #508]	@ (801112c <tcp_receive+0xf10>)
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f340 80bc 	ble.w	80110b8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	899b      	ldrh	r3, [r3, #12]
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fa fc1f 	bl	800b78c <lwip_htons>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	f003 0301 	and.w	r3, r3, #1
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f040 80be 	bne.w	80110d8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010f5c:	4874      	ldr	r0, [pc, #464]	@ (8011130 <tcp_receive+0xf14>)
 8010f5e:	f7fd fb03 	bl	800e568 <tcp_seg_copy>
 8010f62:	4602      	mov	r2, r0
 8010f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f66:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 80b5 	beq.w	80110dc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f74:	691b      	ldr	r3, [r3, #16]
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f7a:	8912      	ldrh	r2, [r2, #8]
 8010f7c:	441a      	add	r2, r3
 8010f7e:	4b6b      	ldr	r3, [pc, #428]	@ (801112c <tcp_receive+0xf10>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	dd12      	ble.n	8010fae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010f88:	4b68      	ldr	r3, [pc, #416]	@ (801112c <tcp_receive+0xf10>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f90:	691b      	ldr	r3, [r3, #16]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	1ad3      	subs	r3, r2, r3
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f9c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa0:	685a      	ldr	r2, [r3, #4]
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa4:	891b      	ldrh	r3, [r3, #8]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	4610      	mov	r0, r2
 8010faa:	f7fb feb9 	bl	800cd20 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010fae:	4b61      	ldr	r3, [pc, #388]	@ (8011134 <tcp_receive+0xf18>)
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	4b5d      	ldr	r3, [pc, #372]	@ (801112c <tcp_receive+0xf10>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	441a      	add	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fbe:	6879      	ldr	r1, [r7, #4]
 8010fc0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010fc2:	440b      	add	r3, r1
 8010fc4:	1ad3      	subs	r3, r2, r3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f340 8088 	ble.w	80110dc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	691b      	ldr	r3, [r3, #16]
 8010fd2:	899b      	ldrh	r3, [r3, #12]
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fa fbd8 	bl	800b78c <lwip_htons>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d021      	beq.n	801102c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	691b      	ldr	r3, [r3, #16]
 8010fee:	899b      	ldrh	r3, [r3, #12]
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	b21b      	sxth	r3, r3
 8010ff4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010ff8:	b21c      	sxth	r4, r3
 8010ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	691b      	ldr	r3, [r3, #16]
 8011000:	899b      	ldrh	r3, [r3, #12]
 8011002:	b29b      	uxth	r3, r3
 8011004:	4618      	mov	r0, r3
 8011006:	f7fa fbc1 	bl	800b78c <lwip_htons>
 801100a:	4603      	mov	r3, r0
 801100c:	b2db      	uxtb	r3, r3
 801100e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011012:	b29b      	uxth	r3, r3
 8011014:	4618      	mov	r0, r3
 8011016:	f7fa fbb9 	bl	800b78c <lwip_htons>
 801101a:	4603      	mov	r3, r0
 801101c:	b21b      	sxth	r3, r3
 801101e:	4323      	orrs	r3, r4
 8011020:	b21a      	sxth	r2, r3
 8011022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	691b      	ldr	r3, [r3, #16]
 8011028:	b292      	uxth	r2, r2
 801102a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011030:	b29a      	uxth	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011036:	4413      	add	r3, r2
 8011038:	b299      	uxth	r1, r3
 801103a:	4b3c      	ldr	r3, [pc, #240]	@ (801112c <tcp_receive+0xf10>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	b29a      	uxth	r2, r3
 8011040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	1a8a      	subs	r2, r1, r2
 8011046:	b292      	uxth	r2, r2
 8011048:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801104a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	685a      	ldr	r2, [r3, #4]
 8011050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	891b      	ldrh	r3, [r3, #8]
 8011056:	4619      	mov	r1, r3
 8011058:	4610      	mov	r0, r2
 801105a:	f7fb fe61 	bl	800cd20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801105e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	891c      	ldrh	r4, [r3, #8]
 8011064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	691b      	ldr	r3, [r3, #16]
 801106a:	899b      	ldrh	r3, [r3, #12]
 801106c:	b29b      	uxth	r3, r3
 801106e:	4618      	mov	r0, r3
 8011070:	f7fa fb8c 	bl	800b78c <lwip_htons>
 8011074:	4603      	mov	r3, r0
 8011076:	b2db      	uxtb	r3, r3
 8011078:	f003 0303 	and.w	r3, r3, #3
 801107c:	2b00      	cmp	r3, #0
 801107e:	d001      	beq.n	8011084 <tcp_receive+0xe68>
 8011080:	2301      	movs	r3, #1
 8011082:	e000      	b.n	8011086 <tcp_receive+0xe6a>
 8011084:	2300      	movs	r3, #0
 8011086:	4423      	add	r3, r4
 8011088:	b29a      	uxth	r2, r3
 801108a:	4b2a      	ldr	r3, [pc, #168]	@ (8011134 <tcp_receive+0xf18>)
 801108c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801108e:	4b29      	ldr	r3, [pc, #164]	@ (8011134 <tcp_receive+0xf18>)
 8011090:	881b      	ldrh	r3, [r3, #0]
 8011092:	461a      	mov	r2, r3
 8011094:	4b25      	ldr	r3, [pc, #148]	@ (801112c <tcp_receive+0xf10>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	441a      	add	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801109e:	6879      	ldr	r1, [r7, #4]
 80110a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80110a2:	440b      	add	r3, r1
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d019      	beq.n	80110dc <tcp_receive+0xec0>
 80110a8:	4b23      	ldr	r3, [pc, #140]	@ (8011138 <tcp_receive+0xf1c>)
 80110aa:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80110ae:	4923      	ldr	r1, [pc, #140]	@ (801113c <tcp_receive+0xf20>)
 80110b0:	4823      	ldr	r0, [pc, #140]	@ (8011140 <tcp_receive+0xf24>)
 80110b2:	f005 fd41 	bl	8016b38 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80110b6:	e011      	b.n	80110dc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80110b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80110be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f47f aea5 	bne.w	8010e10 <tcp_receive+0xbf4>
 80110c6:	e00a      	b.n	80110de <tcp_receive+0xec2>
                break;
 80110c8:	bf00      	nop
 80110ca:	e008      	b.n	80110de <tcp_receive+0xec2>
                break;
 80110cc:	bf00      	nop
 80110ce:	e006      	b.n	80110de <tcp_receive+0xec2>
                  break;
 80110d0:	bf00      	nop
 80110d2:	e004      	b.n	80110de <tcp_receive+0xec2>
                  break;
 80110d4:	bf00      	nop
 80110d6:	e002      	b.n	80110de <tcp_receive+0xec2>
                  break;
 80110d8:	bf00      	nop
 80110da:	e000      	b.n	80110de <tcp_receive+0xec2>
                break;
 80110dc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f001 fa44 	bl	801256c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80110e4:	e003      	b.n	80110ee <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f001 fa40 	bl	801256c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110ec:	e01a      	b.n	8011124 <tcp_receive+0xf08>
 80110ee:	e019      	b.n	8011124 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80110f0:	4b0e      	ldr	r3, [pc, #56]	@ (801112c <tcp_receive+0xf10>)
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	db0a      	blt.n	8011114 <tcp_receive+0xef8>
 80110fe:	4b0b      	ldr	r3, [pc, #44]	@ (801112c <tcp_receive+0xf10>)
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011106:	6879      	ldr	r1, [r7, #4]
 8011108:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801110a:	440b      	add	r3, r1
 801110c:	1ad3      	subs	r3, r2, r3
 801110e:	3301      	adds	r3, #1
 8011110:	2b00      	cmp	r3, #0
 8011112:	dd07      	ble.n	8011124 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8b5b      	ldrh	r3, [r3, #26]
 8011118:	f043 0302 	orr.w	r3, r3, #2
 801111c:	b29a      	uxth	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011122:	e7ff      	b.n	8011124 <tcp_receive+0xf08>
 8011124:	bf00      	nop
 8011126:	3750      	adds	r7, #80	@ 0x50
 8011128:	46bd      	mov	sp, r7
 801112a:	bdb0      	pop	{r4, r5, r7, pc}
 801112c:	20008440 	.word	0x20008440
 8011130:	2000841c 	.word	0x2000841c
 8011134:	2000844a 	.word	0x2000844a
 8011138:	08019030 	.word	0x08019030
 801113c:	080193d8 	.word	0x080193d8
 8011140:	0801907c 	.word	0x0801907c

08011144 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801114a:	4b15      	ldr	r3, [pc, #84]	@ (80111a0 <tcp_get_next_optbyte+0x5c>)
 801114c:	881b      	ldrh	r3, [r3, #0]
 801114e:	1c5a      	adds	r2, r3, #1
 8011150:	b291      	uxth	r1, r2
 8011152:	4a13      	ldr	r2, [pc, #76]	@ (80111a0 <tcp_get_next_optbyte+0x5c>)
 8011154:	8011      	strh	r1, [r2, #0]
 8011156:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011158:	4b12      	ldr	r3, [pc, #72]	@ (80111a4 <tcp_get_next_optbyte+0x60>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d004      	beq.n	801116a <tcp_get_next_optbyte+0x26>
 8011160:	4b11      	ldr	r3, [pc, #68]	@ (80111a8 <tcp_get_next_optbyte+0x64>)
 8011162:	881b      	ldrh	r3, [r3, #0]
 8011164:	88fa      	ldrh	r2, [r7, #6]
 8011166:	429a      	cmp	r2, r3
 8011168:	d208      	bcs.n	801117c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801116a:	4b10      	ldr	r3, [pc, #64]	@ (80111ac <tcp_get_next_optbyte+0x68>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	3314      	adds	r3, #20
 8011170:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011172:	88fb      	ldrh	r3, [r7, #6]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	4413      	add	r3, r2
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	e00b      	b.n	8011194 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801117c:	88fb      	ldrh	r3, [r7, #6]
 801117e:	b2da      	uxtb	r2, r3
 8011180:	4b09      	ldr	r3, [pc, #36]	@ (80111a8 <tcp_get_next_optbyte+0x64>)
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	b2db      	uxtb	r3, r3
 8011186:	1ad3      	subs	r3, r2, r3
 8011188:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801118a:	4b06      	ldr	r3, [pc, #24]	@ (80111a4 <tcp_get_next_optbyte+0x60>)
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	797b      	ldrb	r3, [r7, #5]
 8011190:	4413      	add	r3, r2
 8011192:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011194:	4618      	mov	r0, r3
 8011196:	370c      	adds	r7, #12
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr
 80111a0:	2000843c 	.word	0x2000843c
 80111a4:	20008438 	.word	0x20008438
 80111a8:	20008436 	.word	0x20008436
 80111ac:	20008430 	.word	0x20008430

080111b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d106      	bne.n	80111cc <tcp_parseopt+0x1c>
 80111be:	4b32      	ldr	r3, [pc, #200]	@ (8011288 <tcp_parseopt+0xd8>)
 80111c0:	f240 727d 	movw	r2, #1917	@ 0x77d
 80111c4:	4931      	ldr	r1, [pc, #196]	@ (801128c <tcp_parseopt+0xdc>)
 80111c6:	4832      	ldr	r0, [pc, #200]	@ (8011290 <tcp_parseopt+0xe0>)
 80111c8:	f005 fcb6 	bl	8016b38 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80111cc:	4b31      	ldr	r3, [pc, #196]	@ (8011294 <tcp_parseopt+0xe4>)
 80111ce:	881b      	ldrh	r3, [r3, #0]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d056      	beq.n	8011282 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80111d4:	4b30      	ldr	r3, [pc, #192]	@ (8011298 <tcp_parseopt+0xe8>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	801a      	strh	r2, [r3, #0]
 80111da:	e046      	b.n	801126a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80111dc:	f7ff ffb2 	bl	8011144 <tcp_get_next_optbyte>
 80111e0:	4603      	mov	r3, r0
 80111e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80111e4:	7bfb      	ldrb	r3, [r7, #15]
 80111e6:	2b02      	cmp	r3, #2
 80111e8:	d006      	beq.n	80111f8 <tcp_parseopt+0x48>
 80111ea:	2b02      	cmp	r3, #2
 80111ec:	dc2a      	bgt.n	8011244 <tcp_parseopt+0x94>
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d042      	beq.n	8011278 <tcp_parseopt+0xc8>
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d038      	beq.n	8011268 <tcp_parseopt+0xb8>
 80111f6:	e025      	b.n	8011244 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80111f8:	f7ff ffa4 	bl	8011144 <tcp_get_next_optbyte>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b04      	cmp	r3, #4
 8011200:	d13c      	bne.n	801127c <tcp_parseopt+0xcc>
 8011202:	4b25      	ldr	r3, [pc, #148]	@ (8011298 <tcp_parseopt+0xe8>)
 8011204:	881b      	ldrh	r3, [r3, #0]
 8011206:	3301      	adds	r3, #1
 8011208:	4a22      	ldr	r2, [pc, #136]	@ (8011294 <tcp_parseopt+0xe4>)
 801120a:	8812      	ldrh	r2, [r2, #0]
 801120c:	4293      	cmp	r3, r2
 801120e:	da35      	bge.n	801127c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011210:	f7ff ff98 	bl	8011144 <tcp_get_next_optbyte>
 8011214:	4603      	mov	r3, r0
 8011216:	021b      	lsls	r3, r3, #8
 8011218:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801121a:	f7ff ff93 	bl	8011144 <tcp_get_next_optbyte>
 801121e:	4603      	mov	r3, r0
 8011220:	461a      	mov	r2, r3
 8011222:	89bb      	ldrh	r3, [r7, #12]
 8011224:	4313      	orrs	r3, r2
 8011226:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011228:	89bb      	ldrh	r3, [r7, #12]
 801122a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801122e:	d804      	bhi.n	801123a <tcp_parseopt+0x8a>
 8011230:	89bb      	ldrh	r3, [r7, #12]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d001      	beq.n	801123a <tcp_parseopt+0x8a>
 8011236:	89ba      	ldrh	r2, [r7, #12]
 8011238:	e001      	b.n	801123e <tcp_parseopt+0x8e>
 801123a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011242:	e012      	b.n	801126a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011244:	f7ff ff7e 	bl	8011144 <tcp_get_next_optbyte>
 8011248:	4603      	mov	r3, r0
 801124a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801124c:	7afb      	ldrb	r3, [r7, #11]
 801124e:	2b01      	cmp	r3, #1
 8011250:	d916      	bls.n	8011280 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011252:	7afb      	ldrb	r3, [r7, #11]
 8011254:	b29a      	uxth	r2, r3
 8011256:	4b10      	ldr	r3, [pc, #64]	@ (8011298 <tcp_parseopt+0xe8>)
 8011258:	881b      	ldrh	r3, [r3, #0]
 801125a:	4413      	add	r3, r2
 801125c:	b29b      	uxth	r3, r3
 801125e:	3b02      	subs	r3, #2
 8011260:	b29a      	uxth	r2, r3
 8011262:	4b0d      	ldr	r3, [pc, #52]	@ (8011298 <tcp_parseopt+0xe8>)
 8011264:	801a      	strh	r2, [r3, #0]
 8011266:	e000      	b.n	801126a <tcp_parseopt+0xba>
          break;
 8011268:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801126a:	4b0b      	ldr	r3, [pc, #44]	@ (8011298 <tcp_parseopt+0xe8>)
 801126c:	881a      	ldrh	r2, [r3, #0]
 801126e:	4b09      	ldr	r3, [pc, #36]	@ (8011294 <tcp_parseopt+0xe4>)
 8011270:	881b      	ldrh	r3, [r3, #0]
 8011272:	429a      	cmp	r2, r3
 8011274:	d3b2      	bcc.n	80111dc <tcp_parseopt+0x2c>
 8011276:	e004      	b.n	8011282 <tcp_parseopt+0xd2>
          return;
 8011278:	bf00      	nop
 801127a:	e002      	b.n	8011282 <tcp_parseopt+0xd2>
            return;
 801127c:	bf00      	nop
 801127e:	e000      	b.n	8011282 <tcp_parseopt+0xd2>
            return;
 8011280:	bf00      	nop
      }
    }
  }
}
 8011282:	3710      	adds	r7, #16
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	08019030 	.word	0x08019030
 801128c:	08019494 	.word	0x08019494
 8011290:	0801907c 	.word	0x0801907c
 8011294:	20008434 	.word	0x20008434
 8011298:	2000843c 	.word	0x2000843c

0801129c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801129c:	b480      	push	{r7}
 801129e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80112a0:	4b05      	ldr	r3, [pc, #20]	@ (80112b8 <tcp_trigger_input_pcb_close+0x1c>)
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	f043 0310 	orr.w	r3, r3, #16
 80112a8:	b2da      	uxtb	r2, r3
 80112aa:	4b03      	ldr	r3, [pc, #12]	@ (80112b8 <tcp_trigger_input_pcb_close+0x1c>)
 80112ac:	701a      	strb	r2, [r3, #0]
}
 80112ae:	bf00      	nop
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	2000844d 	.word	0x2000844d

080112bc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d00a      	beq.n	80112e4 <tcp_route+0x28>
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	7a1b      	ldrb	r3, [r3, #8]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d006      	beq.n	80112e4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	7a1b      	ldrb	r3, [r3, #8]
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fb fb46 	bl	800c96c <netif_get_by_index>
 80112e0:	4603      	mov	r3, r0
 80112e2:	e003      	b.n	80112ec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f003 fc0f 	bl	8014b08 <ip4_route>
 80112ea:	4603      	mov	r3, r0
  }
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3710      	adds	r7, #16
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80112f4:	b590      	push	{r4, r7, lr}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	603b      	str	r3, [r7, #0]
 8011300:	4613      	mov	r3, r2
 8011302:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d105      	bne.n	8011316 <tcp_create_segment+0x22>
 801130a:	4b45      	ldr	r3, [pc, #276]	@ (8011420 <tcp_create_segment+0x12c>)
 801130c:	22a3      	movs	r2, #163	@ 0xa3
 801130e:	4945      	ldr	r1, [pc, #276]	@ (8011424 <tcp_create_segment+0x130>)
 8011310:	4845      	ldr	r0, [pc, #276]	@ (8011428 <tcp_create_segment+0x134>)
 8011312:	f005 fc11 	bl	8016b38 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d105      	bne.n	8011328 <tcp_create_segment+0x34>
 801131c:	4b40      	ldr	r3, [pc, #256]	@ (8011420 <tcp_create_segment+0x12c>)
 801131e:	22a4      	movs	r2, #164	@ 0xa4
 8011320:	4942      	ldr	r1, [pc, #264]	@ (801142c <tcp_create_segment+0x138>)
 8011322:	4841      	ldr	r0, [pc, #260]	@ (8011428 <tcp_create_segment+0x134>)
 8011324:	f005 fc08 	bl	8016b38 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011328:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	b2db      	uxtb	r3, r3
 8011330:	f003 0304 	and.w	r3, r3, #4
 8011334:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011336:	2003      	movs	r0, #3
 8011338:	f7fa fe9c 	bl	800c074 <memp_malloc>
 801133c:	6138      	str	r0, [r7, #16]
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d104      	bne.n	801134e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011344:	68b8      	ldr	r0, [r7, #8]
 8011346:	f7fb fe71 	bl	800d02c <pbuf_free>
    return NULL;
 801134a:	2300      	movs	r3, #0
 801134c:	e063      	b.n	8011416 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011354:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	2200      	movs	r2, #0
 801135a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	68ba      	ldr	r2, [r7, #8]
 8011360:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	891a      	ldrh	r2, [r3, #8]
 8011366:	7dfb      	ldrb	r3, [r7, #23]
 8011368:	b29b      	uxth	r3, r3
 801136a:	429a      	cmp	r2, r3
 801136c:	d205      	bcs.n	801137a <tcp_create_segment+0x86>
 801136e:	4b2c      	ldr	r3, [pc, #176]	@ (8011420 <tcp_create_segment+0x12c>)
 8011370:	22b0      	movs	r2, #176	@ 0xb0
 8011372:	492f      	ldr	r1, [pc, #188]	@ (8011430 <tcp_create_segment+0x13c>)
 8011374:	482c      	ldr	r0, [pc, #176]	@ (8011428 <tcp_create_segment+0x134>)
 8011376:	f005 fbdf 	bl	8016b38 <iprintf>
  seg->len = p->tot_len - optlen;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	891a      	ldrh	r2, [r3, #8]
 801137e:	7dfb      	ldrb	r3, [r7, #23]
 8011380:	b29b      	uxth	r3, r3
 8011382:	1ad3      	subs	r3, r2, r3
 8011384:	b29a      	uxth	r2, r3
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	2200      	movs	r2, #0
 801138e:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011390:	2114      	movs	r1, #20
 8011392:	68b8      	ldr	r0, [r7, #8]
 8011394:	f7fb fdb4 	bl	800cf00 <pbuf_add_header>
 8011398:	4603      	mov	r3, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	d004      	beq.n	80113a8 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801139e:	6938      	ldr	r0, [r7, #16]
 80113a0:	f7fd f8c9 	bl	800e536 <tcp_seg_free>
    return NULL;
 80113a4:	2300      	movs	r3, #0
 80113a6:	e036      	b.n	8011416 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	685a      	ldr	r2, [r3, #4]
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	8ada      	ldrh	r2, [r3, #22]
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	691c      	ldr	r4, [r3, #16]
 80113ba:	4610      	mov	r0, r2
 80113bc:	f7fa f9e6 	bl	800b78c <lwip_htons>
 80113c0:	4603      	mov	r3, r0
 80113c2:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	8b1a      	ldrh	r2, [r3, #24]
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	691c      	ldr	r4, [r3, #16]
 80113cc:	4610      	mov	r0, r2
 80113ce:	f7fa f9dd 	bl	800b78c <lwip_htons>
 80113d2:	4603      	mov	r3, r0
 80113d4:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	691c      	ldr	r4, [r3, #16]
 80113da:	6838      	ldr	r0, [r7, #0]
 80113dc:	f7fa f9ec 	bl	800b7b8 <lwip_htonl>
 80113e0:	4603      	mov	r3, r0
 80113e2:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80113e4:	7dfb      	ldrb	r3, [r7, #23]
 80113e6:	089b      	lsrs	r3, r3, #2
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	3305      	adds	r3, #5
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	031b      	lsls	r3, r3, #12
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	79fb      	ldrb	r3, [r7, #7]
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	4313      	orrs	r3, r2
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	691c      	ldr	r4, [r3, #16]
 80113fe:	4610      	mov	r0, r2
 8011400:	f7fa f9c4 	bl	800b78c <lwip_htons>
 8011404:	4603      	mov	r3, r0
 8011406:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	691b      	ldr	r3, [r3, #16]
 801140c:	2200      	movs	r2, #0
 801140e:	749a      	strb	r2, [r3, #18]
 8011410:	2200      	movs	r2, #0
 8011412:	74da      	strb	r2, [r3, #19]
  return seg;
 8011414:	693b      	ldr	r3, [r7, #16]
}
 8011416:	4618      	mov	r0, r3
 8011418:	371c      	adds	r7, #28
 801141a:	46bd      	mov	sp, r7
 801141c:	bd90      	pop	{r4, r7, pc}
 801141e:	bf00      	nop
 8011420:	080194b0 	.word	0x080194b0
 8011424:	080194e4 	.word	0x080194e4
 8011428:	08019504 	.word	0x08019504
 801142c:	0801952c 	.word	0x0801952c
 8011430:	08019550 	.word	0x08019550

08011434 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011434:	b590      	push	{r4, r7, lr}
 8011436:	b08b      	sub	sp, #44	@ 0x2c
 8011438:	af02      	add	r7, sp, #8
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	460b      	mov	r3, r1
 801143e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011440:	2300      	movs	r3, #0
 8011442:	61bb      	str	r3, [r7, #24]
 8011444:	2300      	movs	r3, #0
 8011446:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011448:	2300      	movs	r3, #0
 801144a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d106      	bne.n	8011460 <tcp_split_unsent_seg+0x2c>
 8011452:	4b97      	ldr	r3, [pc, #604]	@ (80116b0 <tcp_split_unsent_seg+0x27c>)
 8011454:	f240 324b 	movw	r2, #843	@ 0x34b
 8011458:	4996      	ldr	r1, [pc, #600]	@ (80116b4 <tcp_split_unsent_seg+0x280>)
 801145a:	4897      	ldr	r0, [pc, #604]	@ (80116b8 <tcp_split_unsent_seg+0x284>)
 801145c:	f005 fb6c 	bl	8016b38 <iprintf>

  useg = pcb->unsent;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011464:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d102      	bne.n	8011472 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801146c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011470:	e119      	b.n	80116a6 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8011472:	887b      	ldrh	r3, [r7, #2]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d109      	bne.n	801148c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011478:	4b8d      	ldr	r3, [pc, #564]	@ (80116b0 <tcp_split_unsent_seg+0x27c>)
 801147a:	f240 3253 	movw	r2, #851	@ 0x353
 801147e:	498f      	ldr	r1, [pc, #572]	@ (80116bc <tcp_split_unsent_seg+0x288>)
 8011480:	488d      	ldr	r0, [pc, #564]	@ (80116b8 <tcp_split_unsent_seg+0x284>)
 8011482:	f005 fb59 	bl	8016b38 <iprintf>
    return ERR_VAL;
 8011486:	f06f 0305 	mvn.w	r3, #5
 801148a:	e10c      	b.n	80116a6 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	891b      	ldrh	r3, [r3, #8]
 8011490:	887a      	ldrh	r2, [r7, #2]
 8011492:	429a      	cmp	r2, r3
 8011494:	d301      	bcc.n	801149a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011496:	2300      	movs	r3, #0
 8011498:	e105      	b.n	80116a6 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801149e:	887a      	ldrh	r2, [r7, #2]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d906      	bls.n	80114b2 <tcp_split_unsent_seg+0x7e>
 80114a4:	4b82      	ldr	r3, [pc, #520]	@ (80116b0 <tcp_split_unsent_seg+0x27c>)
 80114a6:	f240 325b 	movw	r2, #859	@ 0x35b
 80114aa:	4985      	ldr	r1, [pc, #532]	@ (80116c0 <tcp_split_unsent_seg+0x28c>)
 80114ac:	4882      	ldr	r0, [pc, #520]	@ (80116b8 <tcp_split_unsent_seg+0x284>)
 80114ae:	f005 fb43 	bl	8016b38 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	891b      	ldrh	r3, [r3, #8]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d106      	bne.n	80114c8 <tcp_split_unsent_seg+0x94>
 80114ba:	4b7d      	ldr	r3, [pc, #500]	@ (80116b0 <tcp_split_unsent_seg+0x27c>)
 80114bc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80114c0:	4980      	ldr	r1, [pc, #512]	@ (80116c4 <tcp_split_unsent_seg+0x290>)
 80114c2:	487d      	ldr	r0, [pc, #500]	@ (80116b8 <tcp_split_unsent_seg+0x284>)
 80114c4:	f005 fb38 	bl	8016b38 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	7b1b      	ldrb	r3, [r3, #12]
 80114cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80114ce:	7bfb      	ldrb	r3, [r7, #15]
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	f003 0304 	and.w	r3, r3, #4
 80114d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	891a      	ldrh	r2, [r3, #8]
 80114de:	887b      	ldrh	r3, [r7, #2]
 80114e0:	1ad3      	subs	r3, r2, r3
 80114e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80114e4:	7bbb      	ldrb	r3, [r7, #14]
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	89bb      	ldrh	r3, [r7, #12]
 80114ea:	4413      	add	r3, r2
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114f2:	4619      	mov	r1, r3
 80114f4:	2036      	movs	r0, #54	@ 0x36
 80114f6:	f7fb fab5 	bl	800ca64 <pbuf_alloc>
 80114fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f000 80ba 	beq.w	8011678 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	891a      	ldrh	r2, [r3, #8]
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	891b      	ldrh	r3, [r3, #8]
 801150e:	1ad3      	subs	r3, r2, r3
 8011510:	b29a      	uxth	r2, r3
 8011512:	887b      	ldrh	r3, [r7, #2]
 8011514:	4413      	add	r3, r2
 8011516:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	6858      	ldr	r0, [r3, #4]
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	685a      	ldr	r2, [r3, #4]
 8011520:	7bbb      	ldrb	r3, [r7, #14]
 8011522:	18d1      	adds	r1, r2, r3
 8011524:	897b      	ldrh	r3, [r7, #10]
 8011526:	89ba      	ldrh	r2, [r7, #12]
 8011528:	f7fb ff7a 	bl	800d420 <pbuf_copy_partial>
 801152c:	4603      	mov	r3, r0
 801152e:	461a      	mov	r2, r3
 8011530:	89bb      	ldrh	r3, [r7, #12]
 8011532:	4293      	cmp	r3, r2
 8011534:	f040 80a2 	bne.w	801167c <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	691b      	ldr	r3, [r3, #16]
 801153c:	899b      	ldrh	r3, [r3, #12]
 801153e:	b29b      	uxth	r3, r3
 8011540:	4618      	mov	r0, r3
 8011542:	f7fa f923 	bl	800b78c <lwip_htons>
 8011546:	4603      	mov	r3, r0
 8011548:	b2db      	uxtb	r3, r3
 801154a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801154e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011550:	2300      	movs	r3, #0
 8011552:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8011554:	7ffb      	ldrb	r3, [r7, #31]
 8011556:	f003 0308 	and.w	r3, r3, #8
 801155a:	2b00      	cmp	r3, #0
 801155c:	d007      	beq.n	801156e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801155e:	7ffb      	ldrb	r3, [r7, #31]
 8011560:	f023 0308 	bic.w	r3, r3, #8
 8011564:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8011566:	7fbb      	ldrb	r3, [r7, #30]
 8011568:	f043 0308 	orr.w	r3, r3, #8
 801156c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801156e:	7ffb      	ldrb	r3, [r7, #31]
 8011570:	f003 0301 	and.w	r3, r3, #1
 8011574:	2b00      	cmp	r3, #0
 8011576:	d007      	beq.n	8011588 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011578:	7ffb      	ldrb	r3, [r7, #31]
 801157a:	f023 0301 	bic.w	r3, r3, #1
 801157e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8011580:	7fbb      	ldrb	r3, [r7, #30]
 8011582:	f043 0301 	orr.w	r3, r3, #1
 8011586:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	691b      	ldr	r3, [r3, #16]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	4618      	mov	r0, r3
 8011590:	f7fa f912 	bl	800b7b8 <lwip_htonl>
 8011594:	4602      	mov	r2, r0
 8011596:	887b      	ldrh	r3, [r7, #2]
 8011598:	18d1      	adds	r1, r2, r3
 801159a:	7fba      	ldrb	r2, [r7, #30]
 801159c:	7bfb      	ldrb	r3, [r7, #15]
 801159e:	9300      	str	r3, [sp, #0]
 80115a0:	460b      	mov	r3, r1
 80115a2:	6939      	ldr	r1, [r7, #16]
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7ff fea5 	bl	80112f4 <tcp_create_segment>
 80115aa:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d066      	beq.n	8011680 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fb fdc0 	bl	800d13c <pbuf_clen>
 80115bc:	4603      	mov	r3, r0
 80115be:	461a      	mov	r2, r3
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80115c6:	1a9b      	subs	r3, r3, r2
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	6858      	ldr	r0, [r3, #4]
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	891a      	ldrh	r2, [r3, #8]
 80115da:	89bb      	ldrh	r3, [r7, #12]
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	b29b      	uxth	r3, r3
 80115e0:	4619      	mov	r1, r3
 80115e2:	f7fb fb9d 	bl	800cd20 <pbuf_realloc>
  useg->len -= remainder;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	891a      	ldrh	r2, [r3, #8]
 80115ea:	89bb      	ldrh	r3, [r7, #12]
 80115ec:	1ad3      	subs	r3, r2, r3
 80115ee:	b29a      	uxth	r2, r3
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	691b      	ldr	r3, [r3, #16]
 80115f8:	899b      	ldrh	r3, [r3, #12]
 80115fa:	b29c      	uxth	r4, r3
 80115fc:	7ffb      	ldrb	r3, [r7, #31]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	4618      	mov	r0, r3
 8011602:	f7fa f8c3 	bl	800b78c <lwip_htons>
 8011606:	4603      	mov	r3, r0
 8011608:	461a      	mov	r2, r3
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	691b      	ldr	r3, [r3, #16]
 801160e:	4322      	orrs	r2, r4
 8011610:	b292      	uxth	r2, r2
 8011612:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	2200      	movs	r2, #0
 8011618:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	4618      	mov	r0, r3
 8011620:	f7fb fd8c 	bl	800d13c <pbuf_clen>
 8011624:	4603      	mov	r3, r0
 8011626:	461a      	mov	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801162e:	4413      	add	r3, r2
 8011630:	b29a      	uxth	r2, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	4618      	mov	r0, r3
 801163e:	f7fb fd7d 	bl	800d13c <pbuf_clen>
 8011642:	4603      	mov	r3, r0
 8011644:	461a      	mov	r2, r3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801164c:	4413      	add	r3, r2
 801164e:	b29a      	uxth	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	69ba      	ldr	r2, [r7, #24]
 8011662:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d103      	bne.n	8011674 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2200      	movs	r2, #0
 8011670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011674:	2300      	movs	r3, #0
 8011676:	e016      	b.n	80116a6 <tcp_split_unsent_seg+0x272>
    goto memerr;
 8011678:	bf00      	nop
 801167a:	e002      	b.n	8011682 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801167c:	bf00      	nop
 801167e:	e000      	b.n	8011682 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8011680:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d006      	beq.n	8011696 <tcp_split_unsent_seg+0x262>
 8011688:	4b09      	ldr	r3, [pc, #36]	@ (80116b0 <tcp_split_unsent_seg+0x27c>)
 801168a:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801168e:	490e      	ldr	r1, [pc, #56]	@ (80116c8 <tcp_split_unsent_seg+0x294>)
 8011690:	4809      	ldr	r0, [pc, #36]	@ (80116b8 <tcp_split_unsent_seg+0x284>)
 8011692:	f005 fa51 	bl	8016b38 <iprintf>
  if (p != NULL) {
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d002      	beq.n	80116a2 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 801169c:	6938      	ldr	r0, [r7, #16]
 801169e:	f7fb fcc5 	bl	800d02c <pbuf_free>
  }

  return ERR_MEM;
 80116a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3724      	adds	r7, #36	@ 0x24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd90      	pop	{r4, r7, pc}
 80116ae:	bf00      	nop
 80116b0:	080194b0 	.word	0x080194b0
 80116b4:	080198a0 	.word	0x080198a0
 80116b8:	08019504 	.word	0x08019504
 80116bc:	080198c4 	.word	0x080198c4
 80116c0:	080198e8 	.word	0x080198e8
 80116c4:	080198f8 	.word	0x080198f8
 80116c8:	08019908 	.word	0x08019908

080116cc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80116cc:	b590      	push	{r4, r7, lr}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d106      	bne.n	80116e8 <tcp_send_fin+0x1c>
 80116da:	4b21      	ldr	r3, [pc, #132]	@ (8011760 <tcp_send_fin+0x94>)
 80116dc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80116e0:	4920      	ldr	r1, [pc, #128]	@ (8011764 <tcp_send_fin+0x98>)
 80116e2:	4821      	ldr	r0, [pc, #132]	@ (8011768 <tcp_send_fin+0x9c>)
 80116e4:	f005 fa28 	bl	8016b38 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d02e      	beq.n	801174e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116f4:	60fb      	str	r3, [r7, #12]
 80116f6:	e002      	b.n	80116fe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d1f8      	bne.n	80116f8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	899b      	ldrh	r3, [r3, #12]
 801170c:	b29b      	uxth	r3, r3
 801170e:	4618      	mov	r0, r3
 8011710:	f7fa f83c 	bl	800b78c <lwip_htons>
 8011714:	4603      	mov	r3, r0
 8011716:	b2db      	uxtb	r3, r3
 8011718:	f003 0307 	and.w	r3, r3, #7
 801171c:	2b00      	cmp	r3, #0
 801171e:	d116      	bne.n	801174e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	899b      	ldrh	r3, [r3, #12]
 8011726:	b29c      	uxth	r4, r3
 8011728:	2001      	movs	r0, #1
 801172a:	f7fa f82f 	bl	800b78c <lwip_htons>
 801172e:	4603      	mov	r3, r0
 8011730:	461a      	mov	r2, r3
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	691b      	ldr	r3, [r3, #16]
 8011736:	4322      	orrs	r2, r4
 8011738:	b292      	uxth	r2, r2
 801173a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	8b5b      	ldrh	r3, [r3, #26]
 8011740:	f043 0320 	orr.w	r3, r3, #32
 8011744:	b29a      	uxth	r2, r3
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801174a:	2300      	movs	r3, #0
 801174c:	e004      	b.n	8011758 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801174e:	2101      	movs	r1, #1
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 f80b 	bl	801176c <tcp_enqueue_flags>
 8011756:	4603      	mov	r3, r0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	bd90      	pop	{r4, r7, pc}
 8011760:	080194b0 	.word	0x080194b0
 8011764:	08019914 	.word	0x08019914
 8011768:	08019504 	.word	0x08019504

0801176c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b088      	sub	sp, #32
 8011770:	af02      	add	r7, sp, #8
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	460b      	mov	r3, r1
 8011776:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011778:	2300      	movs	r3, #0
 801177a:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801177c:	2300      	movs	r3, #0
 801177e:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011780:	78fb      	ldrb	r3, [r7, #3]
 8011782:	f003 0303 	and.w	r3, r3, #3
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <tcp_enqueue_flags+0x2c>
 801178a:	4b67      	ldr	r3, [pc, #412]	@ (8011928 <tcp_enqueue_flags+0x1bc>)
 801178c:	f240 4211 	movw	r2, #1041	@ 0x411
 8011790:	4966      	ldr	r1, [pc, #408]	@ (801192c <tcp_enqueue_flags+0x1c0>)
 8011792:	4867      	ldr	r0, [pc, #412]	@ (8011930 <tcp_enqueue_flags+0x1c4>)
 8011794:	f005 f9d0 	bl	8016b38 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d106      	bne.n	80117ac <tcp_enqueue_flags+0x40>
 801179e:	4b62      	ldr	r3, [pc, #392]	@ (8011928 <tcp_enqueue_flags+0x1bc>)
 80117a0:	f240 4213 	movw	r2, #1043	@ 0x413
 80117a4:	4963      	ldr	r1, [pc, #396]	@ (8011934 <tcp_enqueue_flags+0x1c8>)
 80117a6:	4862      	ldr	r0, [pc, #392]	@ (8011930 <tcp_enqueue_flags+0x1c4>)
 80117a8:	f005 f9c6 	bl	8016b38 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80117ac:	78fb      	ldrb	r3, [r7, #3]
 80117ae:	f003 0302 	and.w	r3, r3, #2
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80117b6:	2301      	movs	r3, #1
 80117b8:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80117ba:	7dfb      	ldrb	r3, [r7, #23]
 80117bc:	009b      	lsls	r3, r3, #2
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	f003 0304 	and.w	r3, r3, #4
 80117c4:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80117c6:	7dbb      	ldrb	r3, [r7, #22]
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80117ce:	4619      	mov	r1, r3
 80117d0:	2036      	movs	r0, #54	@ 0x36
 80117d2:	f7fb f947 	bl	800ca64 <pbuf_alloc>
 80117d6:	60f8      	str	r0, [r7, #12]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d109      	bne.n	80117f2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	8b5b      	ldrh	r3, [r3, #26]
 80117e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80117ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80117f0:	e095      	b.n	801191e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	895a      	ldrh	r2, [r3, #10]
 80117f6:	7dbb      	ldrb	r3, [r7, #22]
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d206      	bcs.n	801180c <tcp_enqueue_flags+0xa0>
 80117fe:	4b4a      	ldr	r3, [pc, #296]	@ (8011928 <tcp_enqueue_flags+0x1bc>)
 8011800:	f240 4239 	movw	r2, #1081	@ 0x439
 8011804:	494c      	ldr	r1, [pc, #304]	@ (8011938 <tcp_enqueue_flags+0x1cc>)
 8011806:	484a      	ldr	r0, [pc, #296]	@ (8011930 <tcp_enqueue_flags+0x1c4>)
 8011808:	f005 f996 	bl	8016b38 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011810:	78fa      	ldrb	r2, [r7, #3]
 8011812:	7dfb      	ldrb	r3, [r7, #23]
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	460b      	mov	r3, r1
 8011818:	68f9      	ldr	r1, [r7, #12]
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7ff fd6a 	bl	80112f4 <tcp_create_segment>
 8011820:	60b8      	str	r0, [r7, #8]
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d109      	bne.n	801183c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8b5b      	ldrh	r3, [r3, #26]
 801182c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011830:	b29a      	uxth	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801183a:	e070      	b.n	801191e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	691b      	ldr	r3, [r3, #16]
 8011840:	f003 0303 	and.w	r3, r3, #3
 8011844:	2b00      	cmp	r3, #0
 8011846:	d006      	beq.n	8011856 <tcp_enqueue_flags+0xea>
 8011848:	4b37      	ldr	r3, [pc, #220]	@ (8011928 <tcp_enqueue_flags+0x1bc>)
 801184a:	f240 4242 	movw	r2, #1090	@ 0x442
 801184e:	493b      	ldr	r1, [pc, #236]	@ (801193c <tcp_enqueue_flags+0x1d0>)
 8011850:	4837      	ldr	r0, [pc, #220]	@ (8011930 <tcp_enqueue_flags+0x1c4>)
 8011852:	f005 f971 	bl	8016b38 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	891b      	ldrh	r3, [r3, #8]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d006      	beq.n	801186c <tcp_enqueue_flags+0x100>
 801185e:	4b32      	ldr	r3, [pc, #200]	@ (8011928 <tcp_enqueue_flags+0x1bc>)
 8011860:	f240 4243 	movw	r2, #1091	@ 0x443
 8011864:	4936      	ldr	r1, [pc, #216]	@ (8011940 <tcp_enqueue_flags+0x1d4>)
 8011866:	4832      	ldr	r0, [pc, #200]	@ (8011930 <tcp_enqueue_flags+0x1c4>)
 8011868:	f005 f966 	bl	8016b38 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011870:	2b00      	cmp	r3, #0
 8011872:	d103      	bne.n	801187c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	66da      	str	r2, [r3, #108]	@ 0x6c
 801187a:	e00d      	b.n	8011898 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011880:	613b      	str	r3, [r7, #16]
 8011882:	e002      	b.n	801188a <tcp_enqueue_flags+0x11e>
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	613b      	str	r3, [r7, #16]
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1f8      	bne.n	8011884 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	68ba      	ldr	r2, [r7, #8]
 8011896:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2200      	movs	r2, #0
 801189c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80118a0:	78fb      	ldrb	r3, [r7, #3]
 80118a2:	f003 0302 	and.w	r3, r3, #2
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d104      	bne.n	80118b4 <tcp_enqueue_flags+0x148>
 80118aa:	78fb      	ldrb	r3, [r7, #3]
 80118ac:	f003 0301 	and.w	r3, r3, #1
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d004      	beq.n	80118be <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80118b8:	1c5a      	adds	r2, r3, #1
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80118be:	78fb      	ldrb	r3, [r7, #3]
 80118c0:	f003 0301 	and.w	r3, r3, #1
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d006      	beq.n	80118d6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	8b5b      	ldrh	r3, [r3, #26]
 80118cc:	f043 0320 	orr.w	r3, r3, #32
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7fb fc2e 	bl	800d13c <pbuf_clen>
 80118e0:	4603      	mov	r3, r0
 80118e2:	461a      	mov	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118ea:	4413      	add	r3, r2
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d00e      	beq.n	801191c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011902:	2b00      	cmp	r3, #0
 8011904:	d10a      	bne.n	801191c <tcp_enqueue_flags+0x1b0>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <tcp_enqueue_flags+0x1b0>
 801190e:	4b06      	ldr	r3, [pc, #24]	@ (8011928 <tcp_enqueue_flags+0x1bc>)
 8011910:	f240 4265 	movw	r2, #1125	@ 0x465
 8011914:	490b      	ldr	r1, [pc, #44]	@ (8011944 <tcp_enqueue_flags+0x1d8>)
 8011916:	4806      	ldr	r0, [pc, #24]	@ (8011930 <tcp_enqueue_flags+0x1c4>)
 8011918:	f005 f90e 	bl	8016b38 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	3718      	adds	r7, #24
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	080194b0 	.word	0x080194b0
 801192c:	08019930 	.word	0x08019930
 8011930:	08019504 	.word	0x08019504
 8011934:	08019988 	.word	0x08019988
 8011938:	080199a8 	.word	0x080199a8
 801193c:	080199e4 	.word	0x080199e4
 8011940:	080199fc 	.word	0x080199fc
 8011944:	08019a28 	.word	0x08019a28

08011948 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011948:	b5b0      	push	{r4, r5, r7, lr}
 801194a:	b08a      	sub	sp, #40	@ 0x28
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <tcp_output+0x1c>
 8011956:	4b8a      	ldr	r3, [pc, #552]	@ (8011b80 <tcp_output+0x238>)
 8011958:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801195c:	4989      	ldr	r1, [pc, #548]	@ (8011b84 <tcp_output+0x23c>)
 801195e:	488a      	ldr	r0, [pc, #552]	@ (8011b88 <tcp_output+0x240>)
 8011960:	f005 f8ea 	bl	8016b38 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	7d1b      	ldrb	r3, [r3, #20]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d106      	bne.n	801197a <tcp_output+0x32>
 801196c:	4b84      	ldr	r3, [pc, #528]	@ (8011b80 <tcp_output+0x238>)
 801196e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011972:	4986      	ldr	r1, [pc, #536]	@ (8011b8c <tcp_output+0x244>)
 8011974:	4884      	ldr	r0, [pc, #528]	@ (8011b88 <tcp_output+0x240>)
 8011976:	f005 f8df 	bl	8016b38 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801197a:	4b85      	ldr	r3, [pc, #532]	@ (8011b90 <tcp_output+0x248>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	429a      	cmp	r2, r3
 8011982:	d101      	bne.n	8011988 <tcp_output+0x40>
    return ERR_OK;
 8011984:	2300      	movs	r3, #0
 8011986:	e1d1      	b.n	8011d2c <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011994:	4293      	cmp	r3, r2
 8011996:	bf28      	it	cs
 8011998:	4613      	movcs	r3, r2
 801199a:	b29b      	uxth	r3, r3
 801199c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80119a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d10b      	bne.n	80119c2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	8b5b      	ldrh	r3, [r3, #26]
 80119ae:	f003 0302 	and.w	r3, r3, #2
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f000 81ad 	beq.w	8011d12 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f000 fdd7 	bl	801256c <tcp_send_empty_ack>
 80119be:	4603      	mov	r3, r0
 80119c0:	e1b4      	b.n	8011d2c <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80119c2:	6879      	ldr	r1, [r7, #4]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	3304      	adds	r3, #4
 80119c8:	461a      	mov	r2, r3
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f7ff fc76 	bl	80112bc <tcp_route>
 80119d0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d102      	bne.n	80119de <tcp_output+0x96>
    return ERR_RTE;
 80119d8:	f06f 0303 	mvn.w	r3, #3
 80119dc:	e1a6      	b.n	8011d2c <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d003      	beq.n	80119ec <tcp_output+0xa4>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d111      	bne.n	8011a10 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d002      	beq.n	80119f8 <tcp_output+0xb0>
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	3304      	adds	r3, #4
 80119f6:	e000      	b.n	80119fa <tcp_output+0xb2>
 80119f8:	2300      	movs	r3, #0
 80119fa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d102      	bne.n	8011a08 <tcp_output+0xc0>
      return ERR_RTE;
 8011a02:	f06f 0303 	mvn.w	r3, #3
 8011a06:	e191      	b.n	8011d2c <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a12:	691b      	ldr	r3, [r3, #16]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7f9 fece 	bl	800b7b8 <lwip_htonl>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a22:	1ad3      	subs	r3, r2, r3
 8011a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a26:	8912      	ldrh	r2, [r2, #8]
 8011a28:	4413      	add	r3, r2
 8011a2a:	69ba      	ldr	r2, [r7, #24]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d227      	bcs.n	8011a80 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011a36:	461a      	mov	r2, r3
 8011a38:	69bb      	ldr	r3, [r7, #24]
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d114      	bne.n	8011a68 <tcp_output+0x120>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d110      	bne.n	8011a68 <tcp_output+0x120>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d10b      	bne.n	8011a68 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2200      	movs	r2, #0
 8011a64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	8b5b      	ldrh	r3, [r3, #26]
 8011a6c:	f003 0302 	and.w	r3, r3, #2
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f000 8150 	beq.w	8011d16 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 fd78 	bl	801256c <tcp_send_empty_ack>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	e155      	b.n	8011d2c <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a8c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011a8e:	6a3b      	ldr	r3, [r7, #32]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	f000 811f 	beq.w	8011cd4 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8011a96:	e002      	b.n	8011a9e <tcp_output+0x156>
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	623b      	str	r3, [r7, #32]
 8011a9e:	6a3b      	ldr	r3, [r7, #32]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1f8      	bne.n	8011a98 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011aa6:	e115      	b.n	8011cd4 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aaa:	691b      	ldr	r3, [r3, #16]
 8011aac:	899b      	ldrh	r3, [r3, #12]
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7f9 fe6b 	bl	800b78c <lwip_htons>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	f003 0304 	and.w	r3, r3, #4
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d006      	beq.n	8011ad0 <tcp_output+0x188>
 8011ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8011b80 <tcp_output+0x238>)
 8011ac4:	f240 5236 	movw	r2, #1334	@ 0x536
 8011ac8:	4932      	ldr	r1, [pc, #200]	@ (8011b94 <tcp_output+0x24c>)
 8011aca:	482f      	ldr	r0, [pc, #188]	@ (8011b88 <tcp_output+0x240>)
 8011acc:	f005 f834 	bl	8016b38 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d01f      	beq.n	8011b18 <tcp_output+0x1d0>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	8b5b      	ldrh	r3, [r3, #26]
 8011adc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d119      	bne.n	8011b18 <tcp_output+0x1d0>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00b      	beq.n	8011b04 <tcp_output+0x1bc>
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d110      	bne.n	8011b18 <tcp_output+0x1d0>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011afa:	891a      	ldrh	r2, [r3, #8]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d209      	bcs.n	8011b18 <tcp_output+0x1d0>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d004      	beq.n	8011b18 <tcp_output+0x1d0>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b14:	2b08      	cmp	r3, #8
 8011b16:	d901      	bls.n	8011b1c <tcp_output+0x1d4>
 8011b18:	2301      	movs	r3, #1
 8011b1a:	e000      	b.n	8011b1e <tcp_output+0x1d6>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d106      	bne.n	8011b30 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	8b5b      	ldrh	r3, [r3, #26]
 8011b26:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	f000 80e7 	beq.w	8011cfe <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	7d1b      	ldrb	r3, [r3, #20]
 8011b34:	2b02      	cmp	r3, #2
 8011b36:	d00d      	beq.n	8011b54 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b3a:	691b      	ldr	r3, [r3, #16]
 8011b3c:	899b      	ldrh	r3, [r3, #12]
 8011b3e:	b29c      	uxth	r4, r3
 8011b40:	2010      	movs	r0, #16
 8011b42:	f7f9 fe23 	bl	800b78c <lwip_htons>
 8011b46:	4603      	mov	r3, r0
 8011b48:	461a      	mov	r2, r3
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b4c:	691b      	ldr	r3, [r3, #16]
 8011b4e:	4322      	orrs	r2, r4
 8011b50:	b292      	uxth	r2, r2
 8011b52:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011b54:	697a      	ldr	r2, [r7, #20]
 8011b56:	6879      	ldr	r1, [r7, #4]
 8011b58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b5a:	f000 f90b 	bl	8011d74 <tcp_output_segment>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d016      	beq.n	8011b98 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	8b5b      	ldrh	r3, [r3, #26]
 8011b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	835a      	strh	r2, [r3, #26]
      return err;
 8011b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b7c:	e0d6      	b.n	8011d2c <tcp_output+0x3e4>
 8011b7e:	bf00      	nop
 8011b80:	080194b0 	.word	0x080194b0
 8011b84:	08019a50 	.word	0x08019a50
 8011b88:	08019504 	.word	0x08019504
 8011b8c:	08019a68 	.word	0x08019a68
 8011b90:	20008454 	.word	0x20008454
 8011b94:	08019a90 	.word	0x08019a90
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8011b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba0:	681a      	ldr	r2, [r3, #0]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	7d1b      	ldrb	r3, [r3, #20]
 8011baa:	2b02      	cmp	r3, #2
 8011bac:	d006      	beq.n	8011bbc <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	8b5b      	ldrh	r3, [r3, #26]
 8011bb2:	f023 0303 	bic.w	r3, r3, #3
 8011bb6:	b29a      	uxth	r2, r3
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bbe:	691b      	ldr	r3, [r3, #16]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7f9 fdf8 	bl	800b7b8 <lwip_htonl>
 8011bc8:	4604      	mov	r4, r0
 8011bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bcc:	891b      	ldrh	r3, [r3, #8]
 8011bce:	461d      	mov	r5, r3
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd2:	691b      	ldr	r3, [r3, #16]
 8011bd4:	899b      	ldrh	r3, [r3, #12]
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7f9 fdd7 	bl	800b78c <lwip_htons>
 8011bde:	4603      	mov	r3, r0
 8011be0:	b2db      	uxtb	r3, r3
 8011be2:	f003 0303 	and.w	r3, r3, #3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d001      	beq.n	8011bee <tcp_output+0x2a6>
 8011bea:	2301      	movs	r3, #1
 8011bec:	e000      	b.n	8011bf0 <tcp_output+0x2a8>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	442b      	add	r3, r5
 8011bf2:	4423      	add	r3, r4
 8011bf4:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	da02      	bge.n	8011c08 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	68ba      	ldr	r2, [r7, #8]
 8011c06:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0a:	891b      	ldrh	r3, [r3, #8]
 8011c0c:	461c      	mov	r4, r3
 8011c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c10:	691b      	ldr	r3, [r3, #16]
 8011c12:	899b      	ldrh	r3, [r3, #12]
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7f9 fdb8 	bl	800b78c <lwip_htons>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	f003 0303 	and.w	r3, r3, #3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d001      	beq.n	8011c2c <tcp_output+0x2e4>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	e000      	b.n	8011c2e <tcp_output+0x2e6>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	4423      	add	r3, r4
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d049      	beq.n	8011cc8 <tcp_output+0x380>
      seg->next = NULL;
 8011c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c36:	2200      	movs	r2, #0
 8011c38:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d105      	bne.n	8011c4e <tcp_output+0x306>
        pcb->unacked = seg;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c46:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4a:	623b      	str	r3, [r7, #32]
 8011c4c:	e03f      	b.n	8011cce <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c50:	691b      	ldr	r3, [r3, #16]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7f9 fdaf 	bl	800b7b8 <lwip_htonl>
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	6a3b      	ldr	r3, [r7, #32]
 8011c5e:	691b      	ldr	r3, [r3, #16]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7f9 fda8 	bl	800b7b8 <lwip_htonl>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	1ae3      	subs	r3, r4, r3
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	da24      	bge.n	8011cba <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	3370      	adds	r3, #112	@ 0x70
 8011c74:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c76:	e002      	b.n	8011c7e <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c7e:	69fb      	ldr	r3, [r7, #28]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d011      	beq.n	8011caa <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	691b      	ldr	r3, [r3, #16]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7f9 fd92 	bl	800b7b8 <lwip_htonl>
 8011c94:	4604      	mov	r4, r0
 8011c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7f9 fd8b 	bl	800b7b8 <lwip_htonl>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	dbe6      	blt.n	8011c78 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cb6:	601a      	str	r2, [r3, #0]
 8011cb8:	e009      	b.n	8011cce <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011cba:	6a3b      	ldr	r3, [r7, #32]
 8011cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cbe:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011cc0:	6a3b      	ldr	r3, [r7, #32]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	623b      	str	r3, [r7, #32]
 8011cc6:	e002      	b.n	8011cce <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011cc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011cca:	f7fc fc34 	bl	800e536 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d012      	beq.n	8011d00 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cdc:	691b      	ldr	r3, [r3, #16]
 8011cde:	685b      	ldr	r3, [r3, #4]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7f9 fd69 	bl	800b7b8 <lwip_htonl>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cec:	1ad3      	subs	r3, r2, r3
 8011cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cf0:	8912      	ldrh	r2, [r2, #8]
 8011cf2:	4413      	add	r3, r2
  while (seg != NULL &&
 8011cf4:	69ba      	ldr	r2, [r7, #24]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	f4bf aed6 	bcs.w	8011aa8 <tcp_output+0x160>
 8011cfc:	e000      	b.n	8011d00 <tcp_output+0x3b8>
      break;
 8011cfe:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d108      	bne.n	8011d1a <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011d10:	e004      	b.n	8011d1c <tcp_output+0x3d4>
    goto output_done;
 8011d12:	bf00      	nop
 8011d14:	e002      	b.n	8011d1c <tcp_output+0x3d4>
    goto output_done;
 8011d16:	bf00      	nop
 8011d18:	e000      	b.n	8011d1c <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011d1a:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	8b5b      	ldrh	r3, [r3, #26]
 8011d20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011d24:	b29a      	uxth	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011d2a:	2300      	movs	r3, #0
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3728      	adds	r7, #40	@ 0x28
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bdb0      	pop	{r4, r5, r7, pc}

08011d34 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d106      	bne.n	8011d50 <tcp_output_segment_busy+0x1c>
 8011d42:	4b09      	ldr	r3, [pc, #36]	@ (8011d68 <tcp_output_segment_busy+0x34>)
 8011d44:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011d48:	4908      	ldr	r1, [pc, #32]	@ (8011d6c <tcp_output_segment_busy+0x38>)
 8011d4a:	4809      	ldr	r0, [pc, #36]	@ (8011d70 <tcp_output_segment_busy+0x3c>)
 8011d4c:	f004 fef4 	bl	8016b38 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	7b9b      	ldrb	r3, [r3, #14]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d001      	beq.n	8011d5e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e000      	b.n	8011d60 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	080194b0 	.word	0x080194b0
 8011d6c:	08019aa8 	.word	0x08019aa8
 8011d70:	08019504 	.word	0x08019504

08011d74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011d74:	b5b0      	push	{r4, r5, r7, lr}
 8011d76:	b08c      	sub	sp, #48	@ 0x30
 8011d78:	af04      	add	r7, sp, #16
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d106      	bne.n	8011d94 <tcp_output_segment+0x20>
 8011d86:	4b64      	ldr	r3, [pc, #400]	@ (8011f18 <tcp_output_segment+0x1a4>)
 8011d88:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011d8c:	4963      	ldr	r1, [pc, #396]	@ (8011f1c <tcp_output_segment+0x1a8>)
 8011d8e:	4864      	ldr	r0, [pc, #400]	@ (8011f20 <tcp_output_segment+0x1ac>)
 8011d90:	f004 fed2 	bl	8016b38 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d106      	bne.n	8011da8 <tcp_output_segment+0x34>
 8011d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8011f18 <tcp_output_segment+0x1a4>)
 8011d9c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011da0:	4960      	ldr	r1, [pc, #384]	@ (8011f24 <tcp_output_segment+0x1b0>)
 8011da2:	485f      	ldr	r0, [pc, #380]	@ (8011f20 <tcp_output_segment+0x1ac>)
 8011da4:	f004 fec8 	bl	8016b38 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d106      	bne.n	8011dbc <tcp_output_segment+0x48>
 8011dae:	4b5a      	ldr	r3, [pc, #360]	@ (8011f18 <tcp_output_segment+0x1a4>)
 8011db0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8011db4:	495c      	ldr	r1, [pc, #368]	@ (8011f28 <tcp_output_segment+0x1b4>)
 8011db6:	485a      	ldr	r0, [pc, #360]	@ (8011f20 <tcp_output_segment+0x1ac>)
 8011db8:	f004 febe 	bl	8016b38 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f7ff ffb9 	bl	8011d34 <tcp_output_segment_busy>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	e0a1      	b.n	8011f10 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	691c      	ldr	r4, [r3, #16]
 8011dd4:	4610      	mov	r0, r2
 8011dd6:	f7f9 fcef 	bl	800b7b8 <lwip_htonl>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	691c      	ldr	r4, [r3, #16]
 8011de6:	4610      	mov	r0, r2
 8011de8:	f7f9 fcd0 	bl	800b78c <lwip_htons>
 8011dec:	4603      	mov	r3, r0
 8011dee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011df4:	68ba      	ldr	r2, [r7, #8]
 8011df6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011df8:	441a      	add	r2, r3
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	691b      	ldr	r3, [r3, #16]
 8011e02:	3314      	adds	r3, #20
 8011e04:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	7b1b      	ldrb	r3, [r3, #12]
 8011e0a:	f003 0301 	and.w	r3, r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d015      	beq.n	8011e3e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	3304      	adds	r3, #4
 8011e16:	461a      	mov	r2, r3
 8011e18:	6879      	ldr	r1, [r7, #4]
 8011e1a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8011e1e:	f7fc fe81 	bl	800eb24 <tcp_eff_send_mss_netif>
 8011e22:	4603      	mov	r3, r0
 8011e24:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011e26:	8b7b      	ldrh	r3, [r7, #26]
 8011e28:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7f9 fcc3 	bl	800b7b8 <lwip_htonl>
 8011e32:	4602      	mov	r2, r0
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	3304      	adds	r3, #4
 8011e3c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	da02      	bge.n	8011e4e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10c      	bne.n	8011e70 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011e56:	4b35      	ldr	r3, [pc, #212]	@ (8011f2c <tcp_output_segment+0x1b8>)
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	691b      	ldr	r3, [r3, #16]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7f9 fca7 	bl	800b7b8 <lwip_htonl>
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	691a      	ldr	r2, [r3, #16]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	1ad3      	subs	r3, r2, r3
 8011e7c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	8959      	ldrh	r1, [r3, #10]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	8b3a      	ldrh	r2, [r7, #24]
 8011e8a:	1a8a      	subs	r2, r1, r2
 8011e8c:	b292      	uxth	r2, r2
 8011e8e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	8919      	ldrh	r1, [r3, #8]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	8b3a      	ldrh	r2, [r7, #24]
 8011e9c:	1a8a      	subs	r2, r1, r2
 8011e9e:	b292      	uxth	r2, r2
 8011ea0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	6912      	ldr	r2, [r2, #16]
 8011eaa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	691b      	ldr	r3, [r3, #16]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	741a      	strb	r2, [r3, #16]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	691a      	ldr	r2, [r3, #16]
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	7b1b      	ldrb	r3, [r3, #12]
 8011ec0:	f003 0301 	and.w	r3, r3, #1
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d001      	beq.n	8011ecc <tcp_output_segment+0x158>
 8011ec8:	2318      	movs	r3, #24
 8011eca:	e000      	b.n	8011ece <tcp_output_segment+0x15a>
 8011ecc:	2314      	movs	r3, #20
 8011ece:	4413      	add	r3, r2
 8011ed0:	69fa      	ldr	r2, [r7, #28]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d006      	beq.n	8011ee4 <tcp_output_segment+0x170>
 8011ed6:	4b10      	ldr	r3, [pc, #64]	@ (8011f18 <tcp_output_segment+0x1a4>)
 8011ed8:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011edc:	4914      	ldr	r1, [pc, #80]	@ (8011f30 <tcp_output_segment+0x1bc>)
 8011ede:	4810      	ldr	r0, [pc, #64]	@ (8011f20 <tcp_output_segment+0x1ac>)
 8011ee0:	f004 fe2a 	bl	8016b38 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	6858      	ldr	r0, [r3, #4]
 8011ee8:	68b9      	ldr	r1, [r7, #8]
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	1d1c      	adds	r4, r3, #4
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	7add      	ldrb	r5, [r3, #11]
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	7a9b      	ldrb	r3, [r3, #10]
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	9202      	str	r2, [sp, #8]
 8011efa:	2206      	movs	r2, #6
 8011efc:	9201      	str	r2, [sp, #4]
 8011efe:	9300      	str	r3, [sp, #0]
 8011f00:	462b      	mov	r3, r5
 8011f02:	4622      	mov	r2, r4
 8011f04:	f002 ffbe 	bl	8014e84 <ip4_output_if>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3720      	adds	r7, #32
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bdb0      	pop	{r4, r5, r7, pc}
 8011f18:	080194b0 	.word	0x080194b0
 8011f1c:	08019ad0 	.word	0x08019ad0
 8011f20:	08019504 	.word	0x08019504
 8011f24:	08019af0 	.word	0x08019af0
 8011f28:	08019b10 	.word	0x08019b10
 8011f2c:	20008404 	.word	0x20008404
 8011f30:	08019b34 	.word	0x08019b34

08011f34 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011f34:	b5b0      	push	{r4, r5, r7, lr}
 8011f36:	b084      	sub	sp, #16
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d106      	bne.n	8011f50 <tcp_rexmit_rto_prepare+0x1c>
 8011f42:	4b36      	ldr	r3, [pc, #216]	@ (801201c <tcp_rexmit_rto_prepare+0xe8>)
 8011f44:	f240 6263 	movw	r2, #1635	@ 0x663
 8011f48:	4935      	ldr	r1, [pc, #212]	@ (8012020 <tcp_rexmit_rto_prepare+0xec>)
 8011f4a:	4836      	ldr	r0, [pc, #216]	@ (8012024 <tcp_rexmit_rto_prepare+0xf0>)
 8011f4c:	f004 fdf4 	bl	8016b38 <iprintf>

  if (pcb->unacked == NULL) {
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d102      	bne.n	8011f5e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011f58:	f06f 0305 	mvn.w	r3, #5
 8011f5c:	e059      	b.n	8012012 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f62:	60fb      	str	r3, [r7, #12]
 8011f64:	e00b      	b.n	8011f7e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f7ff fee4 	bl	8011d34 <tcp_output_segment_busy>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d002      	beq.n	8011f78 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011f72:	f06f 0305 	mvn.w	r3, #5
 8011f76:	e04c      	b.n	8012012 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	60fb      	str	r3, [r7, #12]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1ef      	bne.n	8011f66 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f7ff fed4 	bl	8011d34 <tcp_output_segment_busy>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d002      	beq.n	8011f98 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011f92:	f06f 0305 	mvn.w	r3, #5
 8011f96:	e03c      	b.n	8012012 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d104      	bne.n	8011fb2 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	895a      	ldrh	r2, [r3, #10]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	8b5b      	ldrh	r3, [r3, #26]
 8011fc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	691b      	ldr	r3, [r3, #16]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7f9 fbef 	bl	800b7b8 <lwip_htonl>
 8011fda:	4604      	mov	r4, r0
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	891b      	ldrh	r3, [r3, #8]
 8011fe0:	461d      	mov	r5, r3
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	691b      	ldr	r3, [r3, #16]
 8011fe6:	899b      	ldrh	r3, [r3, #12]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7f9 fbce 	bl	800b78c <lwip_htons>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	f003 0303 	and.w	r3, r3, #3
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d001      	beq.n	8012000 <tcp_rexmit_rto_prepare+0xcc>
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e000      	b.n	8012002 <tcp_rexmit_rto_prepare+0xce>
 8012000:	2300      	movs	r3, #0
 8012002:	442b      	add	r3, r5
 8012004:	18e2      	adds	r2, r4, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2200      	movs	r2, #0
 801200e:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012010:	2300      	movs	r3, #0
}
 8012012:	4618      	mov	r0, r3
 8012014:	3710      	adds	r7, #16
 8012016:	46bd      	mov	sp, r7
 8012018:	bdb0      	pop	{r4, r5, r7, pc}
 801201a:	bf00      	nop
 801201c:	080194b0 	.word	0x080194b0
 8012020:	08019b48 	.word	0x08019b48
 8012024:	08019504 	.word	0x08019504

08012028 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d106      	bne.n	8012044 <tcp_rexmit_rto_commit+0x1c>
 8012036:	4b0d      	ldr	r3, [pc, #52]	@ (801206c <tcp_rexmit_rto_commit+0x44>)
 8012038:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801203c:	490c      	ldr	r1, [pc, #48]	@ (8012070 <tcp_rexmit_rto_commit+0x48>)
 801203e:	480d      	ldr	r0, [pc, #52]	@ (8012074 <tcp_rexmit_rto_commit+0x4c>)
 8012040:	f004 fd7a 	bl	8016b38 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801204a:	2bff      	cmp	r3, #255	@ 0xff
 801204c:	d007      	beq.n	801205e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012054:	3301      	adds	r3, #1
 8012056:	b2da      	uxtb	r2, r3
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f7ff fc72 	bl	8011948 <tcp_output>
}
 8012064:	bf00      	nop
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	080194b0 	.word	0x080194b0
 8012070:	08019b6c 	.word	0x08019b6c
 8012074:	08019504 	.word	0x08019504

08012078 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d106      	bne.n	8012094 <tcp_rexmit_rto+0x1c>
 8012086:	4b0a      	ldr	r3, [pc, #40]	@ (80120b0 <tcp_rexmit_rto+0x38>)
 8012088:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801208c:	4909      	ldr	r1, [pc, #36]	@ (80120b4 <tcp_rexmit_rto+0x3c>)
 801208e:	480a      	ldr	r0, [pc, #40]	@ (80120b8 <tcp_rexmit_rto+0x40>)
 8012090:	f004 fd52 	bl	8016b38 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ff ff4d 	bl	8011f34 <tcp_rexmit_rto_prepare>
 801209a:	4603      	mov	r3, r0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d102      	bne.n	80120a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f7ff ffc1 	bl	8012028 <tcp_rexmit_rto_commit>
  }
}
 80120a6:	bf00      	nop
 80120a8:	3708      	adds	r7, #8
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	080194b0 	.word	0x080194b0
 80120b4:	08019b90 	.word	0x08019b90
 80120b8:	08019504 	.word	0x08019504

080120bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80120bc:	b590      	push	{r4, r7, lr}
 80120be:	b085      	sub	sp, #20
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <tcp_rexmit+0x1c>
 80120ca:	4b2f      	ldr	r3, [pc, #188]	@ (8012188 <tcp_rexmit+0xcc>)
 80120cc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80120d0:	492e      	ldr	r1, [pc, #184]	@ (801218c <tcp_rexmit+0xd0>)
 80120d2:	482f      	ldr	r0, [pc, #188]	@ (8012190 <tcp_rexmit+0xd4>)
 80120d4:	f004 fd30 	bl	8016b38 <iprintf>

  if (pcb->unacked == NULL) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d102      	bne.n	80120e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80120e0:	f06f 0305 	mvn.w	r3, #5
 80120e4:	e04c      	b.n	8012180 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80120ec:	68b8      	ldr	r0, [r7, #8]
 80120ee:	f7ff fe21 	bl	8011d34 <tcp_output_segment_busy>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d002      	beq.n	80120fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80120f8:	f06f 0305 	mvn.w	r3, #5
 80120fc:	e040      	b.n	8012180 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	336c      	adds	r3, #108	@ 0x6c
 801210a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801210c:	e002      	b.n	8012114 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d011      	beq.n	8012140 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	691b      	ldr	r3, [r3, #16]
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	4618      	mov	r0, r3
 8012126:	f7f9 fb47 	bl	800b7b8 <lwip_htonl>
 801212a:	4604      	mov	r4, r0
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	691b      	ldr	r3, [r3, #16]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	4618      	mov	r0, r3
 8012134:	f7f9 fb40 	bl	800b7b8 <lwip_htonl>
 8012138:	4603      	mov	r3, r0
 801213a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801213c:	2b00      	cmp	r3, #0
 801213e:	dbe6      	blt.n	801210e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	68ba      	ldr	r2, [r7, #8]
 801214c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d103      	bne.n	801215e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012164:	2bff      	cmp	r3, #255	@ 0xff
 8012166:	d007      	beq.n	8012178 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801216e:	3301      	adds	r3, #1
 8012170:	b2da      	uxtb	r2, r3
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801217e:	2300      	movs	r3, #0
}
 8012180:	4618      	mov	r0, r3
 8012182:	3714      	adds	r7, #20
 8012184:	46bd      	mov	sp, r7
 8012186:	bd90      	pop	{r4, r7, pc}
 8012188:	080194b0 	.word	0x080194b0
 801218c:	08019bac 	.word	0x08019bac
 8012190:	08019504 	.word	0x08019504

08012194 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d106      	bne.n	80121b0 <tcp_rexmit_fast+0x1c>
 80121a2:	4b2a      	ldr	r3, [pc, #168]	@ (801224c <tcp_rexmit_fast+0xb8>)
 80121a4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80121a8:	4929      	ldr	r1, [pc, #164]	@ (8012250 <tcp_rexmit_fast+0xbc>)
 80121aa:	482a      	ldr	r0, [pc, #168]	@ (8012254 <tcp_rexmit_fast+0xc0>)
 80121ac:	f004 fcc4 	bl	8016b38 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d045      	beq.n	8012244 <tcp_rexmit_fast+0xb0>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	8b5b      	ldrh	r3, [r3, #26]
 80121bc:	f003 0304 	and.w	r3, r3, #4
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d13f      	bne.n	8012244 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f7ff ff79 	bl	80120bc <tcp_rexmit>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d139      	bne.n	8012244 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80121dc:	4293      	cmp	r3, r2
 80121de:	bf28      	it	cs
 80121e0:	4613      	movcs	r3, r2
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	da00      	bge.n	80121ea <tcp_rexmit_fast+0x56>
 80121e8:	3301      	adds	r3, #1
 80121ea:	105b      	asrs	r3, r3, #1
 80121ec:	b29a      	uxth	r2, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80121fa:	461a      	mov	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	429a      	cmp	r2, r3
 8012204:	d206      	bcs.n	8012214 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	b29a      	uxth	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801221e:	4619      	mov	r1, r3
 8012220:	0049      	lsls	r1, r1, #1
 8012222:	440b      	add	r3, r1
 8012224:	b29b      	uxth	r3, r3
 8012226:	4413      	add	r3, r2
 8012228:	b29a      	uxth	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	8b5b      	ldrh	r3, [r3, #26]
 8012234:	f043 0304 	orr.w	r3, r3, #4
 8012238:	b29a      	uxth	r2, r3
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2200      	movs	r2, #0
 8012242:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012244:	bf00      	nop
 8012246:	3708      	adds	r7, #8
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	080194b0 	.word	0x080194b0
 8012250:	08019bc4 	.word	0x08019bc4
 8012254:	08019504 	.word	0x08019504

08012258 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b086      	sub	sp, #24
 801225c:	af00      	add	r7, sp, #0
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	607b      	str	r3, [r7, #4]
 8012262:	460b      	mov	r3, r1
 8012264:	817b      	strh	r3, [r7, #10]
 8012266:	4613      	mov	r3, r2
 8012268:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801226a:	897a      	ldrh	r2, [r7, #10]
 801226c:	893b      	ldrh	r3, [r7, #8]
 801226e:	4413      	add	r3, r2
 8012270:	b29b      	uxth	r3, r3
 8012272:	3314      	adds	r3, #20
 8012274:	b29b      	uxth	r3, r3
 8012276:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801227a:	4619      	mov	r1, r3
 801227c:	2022      	movs	r0, #34	@ 0x22
 801227e:	f7fa fbf1 	bl	800ca64 <pbuf_alloc>
 8012282:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d04d      	beq.n	8012326 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801228a:	897b      	ldrh	r3, [r7, #10]
 801228c:	3313      	adds	r3, #19
 801228e:	697a      	ldr	r2, [r7, #20]
 8012290:	8952      	ldrh	r2, [r2, #10]
 8012292:	4293      	cmp	r3, r2
 8012294:	db06      	blt.n	80122a4 <tcp_output_alloc_header_common+0x4c>
 8012296:	4b26      	ldr	r3, [pc, #152]	@ (8012330 <tcp_output_alloc_header_common+0xd8>)
 8012298:	f240 7223 	movw	r2, #1827	@ 0x723
 801229c:	4925      	ldr	r1, [pc, #148]	@ (8012334 <tcp_output_alloc_header_common+0xdc>)
 801229e:	4826      	ldr	r0, [pc, #152]	@ (8012338 <tcp_output_alloc_header_common+0xe0>)
 80122a0:	f004 fc4a 	bl	8016b38 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	685b      	ldr	r3, [r3, #4]
 80122a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80122aa:	8c3b      	ldrh	r3, [r7, #32]
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7f9 fa6d 	bl	800b78c <lwip_htons>
 80122b2:	4603      	mov	r3, r0
 80122b4:	461a      	mov	r2, r3
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80122ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122bc:	4618      	mov	r0, r3
 80122be:	f7f9 fa65 	bl	800b78c <lwip_htons>
 80122c2:	4603      	mov	r3, r0
 80122c4:	461a      	mov	r2, r3
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f7f9 fa71 	bl	800b7b8 <lwip_htonl>
 80122d6:	4602      	mov	r2, r0
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80122dc:	897b      	ldrh	r3, [r7, #10]
 80122de:	089b      	lsrs	r3, r3, #2
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	3305      	adds	r3, #5
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	031b      	lsls	r3, r3, #12
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	4313      	orrs	r3, r2
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7f9 fa49 	bl	800b78c <lwip_htons>
 80122fa:	4603      	mov	r3, r0
 80122fc:	461a      	mov	r2, r3
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012302:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012304:	4618      	mov	r0, r3
 8012306:	f7f9 fa41 	bl	800b78c <lwip_htons>
 801230a:	4603      	mov	r3, r0
 801230c:	461a      	mov	r2, r3
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	2200      	movs	r2, #0
 8012316:	741a      	strb	r2, [r3, #16]
 8012318:	2200      	movs	r2, #0
 801231a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	2200      	movs	r2, #0
 8012320:	749a      	strb	r2, [r3, #18]
 8012322:	2200      	movs	r2, #0
 8012324:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012326:	697b      	ldr	r3, [r7, #20]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3718      	adds	r7, #24
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	080194b0 	.word	0x080194b0
 8012334:	08019be4 	.word	0x08019be4
 8012338:	08019504 	.word	0x08019504

0801233c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801233c:	b5b0      	push	{r4, r5, r7, lr}
 801233e:	b08a      	sub	sp, #40	@ 0x28
 8012340:	af04      	add	r7, sp, #16
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	607b      	str	r3, [r7, #4]
 8012346:	460b      	mov	r3, r1
 8012348:	817b      	strh	r3, [r7, #10]
 801234a:	4613      	mov	r3, r2
 801234c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d106      	bne.n	8012362 <tcp_output_alloc_header+0x26>
 8012354:	4b15      	ldr	r3, [pc, #84]	@ (80123ac <tcp_output_alloc_header+0x70>)
 8012356:	f240 7242 	movw	r2, #1858	@ 0x742
 801235a:	4915      	ldr	r1, [pc, #84]	@ (80123b0 <tcp_output_alloc_header+0x74>)
 801235c:	4815      	ldr	r0, [pc, #84]	@ (80123b4 <tcp_output_alloc_header+0x78>)
 801235e:	f004 fbeb 	bl	8016b38 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	8adb      	ldrh	r3, [r3, #22]
 801236a:	68fa      	ldr	r2, [r7, #12]
 801236c:	8b12      	ldrh	r2, [r2, #24]
 801236e:	68f9      	ldr	r1, [r7, #12]
 8012370:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012372:	893d      	ldrh	r5, [r7, #8]
 8012374:	897c      	ldrh	r4, [r7, #10]
 8012376:	9103      	str	r1, [sp, #12]
 8012378:	2110      	movs	r1, #16
 801237a:	9102      	str	r1, [sp, #8]
 801237c:	9201      	str	r2, [sp, #4]
 801237e:	9300      	str	r3, [sp, #0]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	462a      	mov	r2, r5
 8012384:	4621      	mov	r1, r4
 8012386:	f7ff ff67 	bl	8012258 <tcp_output_alloc_header_common>
 801238a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d006      	beq.n	80123a0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012396:	68fa      	ldr	r2, [r7, #12]
 8012398:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801239a:	441a      	add	r2, r3
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80123a0:	697b      	ldr	r3, [r7, #20]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3718      	adds	r7, #24
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bdb0      	pop	{r4, r5, r7, pc}
 80123aa:	bf00      	nop
 80123ac:	080194b0 	.word	0x080194b0
 80123b0:	08019c14 	.word	0x08019c14
 80123b4:	08019504 	.word	0x08019504

080123b8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b088      	sub	sp, #32
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	4611      	mov	r1, r2
 80123c4:	461a      	mov	r2, r3
 80123c6:	460b      	mov	r3, r1
 80123c8:	71fb      	strb	r3, [r7, #7]
 80123ca:	4613      	mov	r3, r2
 80123cc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80123ce:	2300      	movs	r3, #0
 80123d0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d106      	bne.n	80123e6 <tcp_output_fill_options+0x2e>
 80123d8:	4b12      	ldr	r3, [pc, #72]	@ (8012424 <tcp_output_fill_options+0x6c>)
 80123da:	f240 7256 	movw	r2, #1878	@ 0x756
 80123de:	4912      	ldr	r1, [pc, #72]	@ (8012428 <tcp_output_fill_options+0x70>)
 80123e0:	4812      	ldr	r0, [pc, #72]	@ (801242c <tcp_output_fill_options+0x74>)
 80123e2:	f004 fba9 	bl	8016b38 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80123ec:	69bb      	ldr	r3, [r7, #24]
 80123ee:	3314      	adds	r3, #20
 80123f0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80123f2:	8bfb      	ldrh	r3, [r7, #30]
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	461a      	mov	r2, r3
 80123f8:	79fb      	ldrb	r3, [r7, #7]
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	f003 0304 	and.w	r3, r3, #4
 8012400:	4413      	add	r3, r2
 8012402:	3314      	adds	r3, #20
 8012404:	69ba      	ldr	r2, [r7, #24]
 8012406:	4413      	add	r3, r2
 8012408:	697a      	ldr	r2, [r7, #20]
 801240a:	429a      	cmp	r2, r3
 801240c:	d006      	beq.n	801241c <tcp_output_fill_options+0x64>
 801240e:	4b05      	ldr	r3, [pc, #20]	@ (8012424 <tcp_output_fill_options+0x6c>)
 8012410:	f240 7275 	movw	r2, #1909	@ 0x775
 8012414:	4906      	ldr	r1, [pc, #24]	@ (8012430 <tcp_output_fill_options+0x78>)
 8012416:	4805      	ldr	r0, [pc, #20]	@ (801242c <tcp_output_fill_options+0x74>)
 8012418:	f004 fb8e 	bl	8016b38 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801241c:	bf00      	nop
 801241e:	3720      	adds	r7, #32
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}
 8012424:	080194b0 	.word	0x080194b0
 8012428:	08019c3c 	.word	0x08019c3c
 801242c:	08019504 	.word	0x08019504
 8012430:	08019b34 	.word	0x08019b34

08012434 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b08a      	sub	sp, #40	@ 0x28
 8012438:	af04      	add	r7, sp, #16
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	60b9      	str	r1, [r7, #8]
 801243e:	607a      	str	r2, [r7, #4]
 8012440:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d106      	bne.n	8012456 <tcp_output_control_segment+0x22>
 8012448:	4b1c      	ldr	r3, [pc, #112]	@ (80124bc <tcp_output_control_segment+0x88>)
 801244a:	f240 7287 	movw	r2, #1927	@ 0x787
 801244e:	491c      	ldr	r1, [pc, #112]	@ (80124c0 <tcp_output_control_segment+0x8c>)
 8012450:	481c      	ldr	r0, [pc, #112]	@ (80124c4 <tcp_output_control_segment+0x90>)
 8012452:	f004 fb71 	bl	8016b38 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012456:	683a      	ldr	r2, [r7, #0]
 8012458:	6879      	ldr	r1, [r7, #4]
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f7fe ff2e 	bl	80112bc <tcp_route>
 8012460:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d102      	bne.n	801246e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012468:	23fc      	movs	r3, #252	@ 0xfc
 801246a:	75fb      	strb	r3, [r7, #23]
 801246c:	e01c      	b.n	80124a8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d006      	beq.n	8012482 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	7adb      	ldrb	r3, [r3, #11]
 8012478:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	7a9b      	ldrb	r3, [r3, #10]
 801247e:	757b      	strb	r3, [r7, #21]
 8012480:	e003      	b.n	801248a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012482:	23ff      	movs	r3, #255	@ 0xff
 8012484:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801248a:	7dba      	ldrb	r2, [r7, #22]
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	9302      	str	r3, [sp, #8]
 8012490:	2306      	movs	r3, #6
 8012492:	9301      	str	r3, [sp, #4]
 8012494:	7d7b      	ldrb	r3, [r7, #21]
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	4613      	mov	r3, r2
 801249a:	683a      	ldr	r2, [r7, #0]
 801249c:	6879      	ldr	r1, [r7, #4]
 801249e:	68b8      	ldr	r0, [r7, #8]
 80124a0:	f002 fcf0 	bl	8014e84 <ip4_output_if>
 80124a4:	4603      	mov	r3, r0
 80124a6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80124a8:	68b8      	ldr	r0, [r7, #8]
 80124aa:	f7fa fdbf 	bl	800d02c <pbuf_free>
  return err;
 80124ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3718      	adds	r7, #24
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	080194b0 	.word	0x080194b0
 80124c0:	08019c64 	.word	0x08019c64
 80124c4:	08019504 	.word	0x08019504

080124c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80124c8:	b590      	push	{r4, r7, lr}
 80124ca:	b08b      	sub	sp, #44	@ 0x2c
 80124cc:	af04      	add	r7, sp, #16
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
 80124d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d106      	bne.n	80124ea <tcp_rst+0x22>
 80124dc:	4b1f      	ldr	r3, [pc, #124]	@ (801255c <tcp_rst+0x94>)
 80124de:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80124e2:	491f      	ldr	r1, [pc, #124]	@ (8012560 <tcp_rst+0x98>)
 80124e4:	481f      	ldr	r0, [pc, #124]	@ (8012564 <tcp_rst+0x9c>)
 80124e6:	f004 fb27 	bl	8016b38 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80124ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d106      	bne.n	80124fe <tcp_rst+0x36>
 80124f0:	4b1a      	ldr	r3, [pc, #104]	@ (801255c <tcp_rst+0x94>)
 80124f2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80124f6:	491c      	ldr	r1, [pc, #112]	@ (8012568 <tcp_rst+0xa0>)
 80124f8:	481a      	ldr	r0, [pc, #104]	@ (8012564 <tcp_rst+0x9c>)
 80124fa:	f004 fb1d 	bl	8016b38 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124fe:	2300      	movs	r3, #0
 8012500:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012502:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012506:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012508:	7dfb      	ldrb	r3, [r7, #23]
 801250a:	b29c      	uxth	r4, r3
 801250c:	68b8      	ldr	r0, [r7, #8]
 801250e:	f7f9 f953 	bl	800b7b8 <lwip_htonl>
 8012512:	4602      	mov	r2, r0
 8012514:	8abb      	ldrh	r3, [r7, #20]
 8012516:	9303      	str	r3, [sp, #12]
 8012518:	2314      	movs	r3, #20
 801251a:	9302      	str	r3, [sp, #8]
 801251c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801251e:	9301      	str	r3, [sp, #4]
 8012520:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	4613      	mov	r3, r2
 8012526:	2200      	movs	r2, #0
 8012528:	4621      	mov	r1, r4
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7ff fe94 	bl	8012258 <tcp_output_alloc_header_common>
 8012530:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d00c      	beq.n	8012552 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012538:	7dfb      	ldrb	r3, [r7, #23]
 801253a:	2200      	movs	r2, #0
 801253c:	6939      	ldr	r1, [r7, #16]
 801253e:	68f8      	ldr	r0, [r7, #12]
 8012540:	f7ff ff3a 	bl	80123b8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012546:	683a      	ldr	r2, [r7, #0]
 8012548:	6939      	ldr	r1, [r7, #16]
 801254a:	68f8      	ldr	r0, [r7, #12]
 801254c:	f7ff ff72 	bl	8012434 <tcp_output_control_segment>
 8012550:	e000      	b.n	8012554 <tcp_rst+0x8c>
    return;
 8012552:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012554:	371c      	adds	r7, #28
 8012556:	46bd      	mov	sp, r7
 8012558:	bd90      	pop	{r4, r7, pc}
 801255a:	bf00      	nop
 801255c:	080194b0 	.word	0x080194b0
 8012560:	08019c90 	.word	0x08019c90
 8012564:	08019504 	.word	0x08019504
 8012568:	08019cac 	.word	0x08019cac

0801256c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801256c:	b590      	push	{r4, r7, lr}
 801256e:	b087      	sub	sp, #28
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012574:	2300      	movs	r3, #0
 8012576:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012578:	2300      	movs	r3, #0
 801257a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d106      	bne.n	8012590 <tcp_send_empty_ack+0x24>
 8012582:	4b28      	ldr	r3, [pc, #160]	@ (8012624 <tcp_send_empty_ack+0xb8>)
 8012584:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012588:	4927      	ldr	r1, [pc, #156]	@ (8012628 <tcp_send_empty_ack+0xbc>)
 801258a:	4828      	ldr	r0, [pc, #160]	@ (801262c <tcp_send_empty_ack+0xc0>)
 801258c:	f004 fad4 	bl	8016b38 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012590:	7dfb      	ldrb	r3, [r7, #23]
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	b2db      	uxtb	r3, r3
 8012596:	f003 0304 	and.w	r3, r3, #4
 801259a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801259c:	7d7b      	ldrb	r3, [r7, #21]
 801259e:	b29c      	uxth	r4, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7f9 f907 	bl	800b7b8 <lwip_htonl>
 80125aa:	4603      	mov	r3, r0
 80125ac:	2200      	movs	r2, #0
 80125ae:	4621      	mov	r1, r4
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f7ff fec3 	bl	801233c <tcp_output_alloc_header>
 80125b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d109      	bne.n	80125d2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	8b5b      	ldrh	r3, [r3, #26]
 80125c2:	f043 0303 	orr.w	r3, r3, #3
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80125cc:	f06f 0301 	mvn.w	r3, #1
 80125d0:	e023      	b.n	801261a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80125d2:	7dbb      	ldrb	r3, [r7, #22]
 80125d4:	7dfa      	ldrb	r2, [r7, #23]
 80125d6:	6939      	ldr	r1, [r7, #16]
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f7ff feed 	bl	80123b8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	3304      	adds	r3, #4
 80125e4:	6939      	ldr	r1, [r7, #16]
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f7ff ff24 	bl	8012434 <tcp_output_control_segment>
 80125ec:	4603      	mov	r3, r0
 80125ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80125f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d007      	beq.n	8012608 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	8b5b      	ldrh	r3, [r3, #26]
 80125fc:	f043 0303 	orr.w	r3, r3, #3
 8012600:	b29a      	uxth	r2, r3
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	835a      	strh	r2, [r3, #26]
 8012606:	e006      	b.n	8012616 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	8b5b      	ldrh	r3, [r3, #26]
 801260c:	f023 0303 	bic.w	r3, r3, #3
 8012610:	b29a      	uxth	r2, r3
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801261a:	4618      	mov	r0, r3
 801261c:	371c      	adds	r7, #28
 801261e:	46bd      	mov	sp, r7
 8012620:	bd90      	pop	{r4, r7, pc}
 8012622:	bf00      	nop
 8012624:	080194b0 	.word	0x080194b0
 8012628:	08019cc8 	.word	0x08019cc8
 801262c:	08019504 	.word	0x08019504

08012630 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012630:	b590      	push	{r4, r7, lr}
 8012632:	b085      	sub	sp, #20
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012638:	2300      	movs	r3, #0
 801263a:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d106      	bne.n	8012650 <tcp_keepalive+0x20>
 8012642:	4b18      	ldr	r3, [pc, #96]	@ (80126a4 <tcp_keepalive+0x74>)
 8012644:	f640 0224 	movw	r2, #2084	@ 0x824
 8012648:	4917      	ldr	r1, [pc, #92]	@ (80126a8 <tcp_keepalive+0x78>)
 801264a:	4818      	ldr	r0, [pc, #96]	@ (80126ac <tcp_keepalive+0x7c>)
 801264c:	f004 fa74 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012650:	7abb      	ldrb	r3, [r7, #10]
 8012652:	b29c      	uxth	r4, r3
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012658:	3b01      	subs	r3, #1
 801265a:	4618      	mov	r0, r3
 801265c:	f7f9 f8ac 	bl	800b7b8 <lwip_htonl>
 8012660:	4603      	mov	r3, r0
 8012662:	2200      	movs	r2, #0
 8012664:	4621      	mov	r1, r4
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f7ff fe68 	bl	801233c <tcp_output_alloc_header>
 801266c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d102      	bne.n	801267a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012678:	e010      	b.n	801269c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801267a:	7abb      	ldrb	r3, [r7, #10]
 801267c:	2200      	movs	r2, #0
 801267e:	68f9      	ldr	r1, [r7, #12]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f7ff fe99 	bl	80123b8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	3304      	adds	r3, #4
 801268c:	68f9      	ldr	r1, [r7, #12]
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f7ff fed0 	bl	8012434 <tcp_output_control_segment>
 8012694:	4603      	mov	r3, r0
 8012696:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012698:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3714      	adds	r7, #20
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd90      	pop	{r4, r7, pc}
 80126a4:	080194b0 	.word	0x080194b0
 80126a8:	08019ce8 	.word	0x08019ce8
 80126ac:	08019504 	.word	0x08019504

080126b0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80126b0:	b590      	push	{r4, r7, lr}
 80126b2:	b08b      	sub	sp, #44	@ 0x2c
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80126b8:	2300      	movs	r3, #0
 80126ba:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d106      	bne.n	80126d0 <tcp_zero_window_probe+0x20>
 80126c2:	4b4d      	ldr	r3, [pc, #308]	@ (80127f8 <tcp_zero_window_probe+0x148>)
 80126c4:	f640 024f 	movw	r2, #2127	@ 0x84f
 80126c8:	494c      	ldr	r1, [pc, #304]	@ (80127fc <tcp_zero_window_probe+0x14c>)
 80126ca:	484d      	ldr	r0, [pc, #308]	@ (8012800 <tcp_zero_window_probe+0x150>)
 80126cc:	f004 fa34 	bl	8016b38 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 80126d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d101      	bne.n	80126e0 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80126dc:	2300      	movs	r3, #0
 80126de:	e087      	b.n	80127f0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80126e6:	2bff      	cmp	r3, #255	@ 0xff
 80126e8:	d007      	beq.n	80126fa <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80126f0:	3301      	adds	r3, #1
 80126f2:	b2da      	uxtb	r2, r3
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80126fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126fc:	691b      	ldr	r3, [r3, #16]
 80126fe:	899b      	ldrh	r3, [r3, #12]
 8012700:	b29b      	uxth	r3, r3
 8012702:	4618      	mov	r0, r3
 8012704:	f7f9 f842 	bl	800b78c <lwip_htons>
 8012708:	4603      	mov	r3, r0
 801270a:	b2db      	uxtb	r3, r3
 801270c:	f003 0301 	and.w	r3, r3, #1
 8012710:	2b00      	cmp	r3, #0
 8012712:	d005      	beq.n	8012720 <tcp_zero_window_probe+0x70>
 8012714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012716:	891b      	ldrh	r3, [r3, #8]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d101      	bne.n	8012720 <tcp_zero_window_probe+0x70>
 801271c:	2301      	movs	r3, #1
 801271e:	e000      	b.n	8012722 <tcp_zero_window_probe+0x72>
 8012720:	2300      	movs	r3, #0
 8012722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012726:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801272a:	2b00      	cmp	r3, #0
 801272c:	bf0c      	ite	eq
 801272e:	2301      	moveq	r3, #1
 8012730:	2300      	movne	r3, #0
 8012732:	b2db      	uxtb	r3, r3
 8012734:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012736:	7cfb      	ldrb	r3, [r7, #19]
 8012738:	b299      	uxth	r1, r3
 801273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801273c:	691b      	ldr	r3, [r3, #16]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	8c3a      	ldrh	r2, [r7, #32]
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7ff fdfa 	bl	801233c <tcp_output_alloc_header>
 8012748:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801274a:	69fb      	ldr	r3, [r7, #28]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d102      	bne.n	8012756 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012754:	e04c      	b.n	80127f0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801275c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012760:	2b00      	cmp	r3, #0
 8012762:	d011      	beq.n	8012788 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	899b      	ldrh	r3, [r3, #12]
 8012768:	b29b      	uxth	r3, r3
 801276a:	b21b      	sxth	r3, r3
 801276c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012770:	b21c      	sxth	r4, r3
 8012772:	2011      	movs	r0, #17
 8012774:	f7f9 f80a 	bl	800b78c <lwip_htons>
 8012778:	4603      	mov	r3, r0
 801277a:	b21b      	sxth	r3, r3
 801277c:	4323      	orrs	r3, r4
 801277e:	b21b      	sxth	r3, r3
 8012780:	b29a      	uxth	r2, r3
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	819a      	strh	r2, [r3, #12]
 8012786:	e010      	b.n	80127aa <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	3314      	adds	r3, #20
 801278e:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012792:	6858      	ldr	r0, [r3, #4]
 8012794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	891a      	ldrh	r2, [r3, #8]
 801279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801279c:	891b      	ldrh	r3, [r3, #8]
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	b29b      	uxth	r3, r3
 80127a2:	2201      	movs	r2, #1
 80127a4:	6979      	ldr	r1, [r7, #20]
 80127a6:	f7fa fe3b 	bl	800d420 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80127aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ac:	691b      	ldr	r3, [r3, #16]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7f9 f801 	bl	800b7b8 <lwip_htonl>
 80127b6:	4603      	mov	r3, r0
 80127b8:	3301      	adds	r3, #1
 80127ba:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	1ad3      	subs	r3, r2, r3
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	da02      	bge.n	80127ce <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	68fa      	ldr	r2, [r7, #12]
 80127cc:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80127ce:	7cfb      	ldrb	r3, [r7, #19]
 80127d0:	2200      	movs	r2, #0
 80127d2:	69f9      	ldr	r1, [r7, #28]
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7ff fdef 	bl	80123b8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80127da:	687a      	ldr	r2, [r7, #4]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	3304      	adds	r3, #4
 80127e0:	69f9      	ldr	r1, [r7, #28]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7ff fe26 	bl	8012434 <tcp_output_control_segment>
 80127e8:	4603      	mov	r3, r0
 80127ea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80127ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	372c      	adds	r7, #44	@ 0x2c
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd90      	pop	{r4, r7, pc}
 80127f8:	080194b0 	.word	0x080194b0
 80127fc:	08019d04 	.word	0x08019d04
 8012800:	08019504 	.word	0x08019504

08012804 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801280c:	f7fa fef6 	bl	800d5fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012810:	4b0a      	ldr	r3, [pc, #40]	@ (801283c <tcpip_tcp_timer+0x38>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d103      	bne.n	8012820 <tcpip_tcp_timer+0x1c>
 8012818:	4b09      	ldr	r3, [pc, #36]	@ (8012840 <tcpip_tcp_timer+0x3c>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d005      	beq.n	801282c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012820:	2200      	movs	r2, #0
 8012822:	4908      	ldr	r1, [pc, #32]	@ (8012844 <tcpip_tcp_timer+0x40>)
 8012824:	20fa      	movs	r0, #250	@ 0xfa
 8012826:	f000 f8f3 	bl	8012a10 <sys_timeout>
 801282a:	e003      	b.n	8012834 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801282c:	4b06      	ldr	r3, [pc, #24]	@ (8012848 <tcpip_tcp_timer+0x44>)
 801282e:	2200      	movs	r2, #0
 8012830:	601a      	str	r2, [r3, #0]
  }
}
 8012832:	bf00      	nop
 8012834:	bf00      	nop
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	20008410 	.word	0x20008410
 8012840:	20008414 	.word	0x20008414
 8012844:	08012805 	.word	0x08012805
 8012848:	20008460 	.word	0x20008460

0801284c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012850:	4b0a      	ldr	r3, [pc, #40]	@ (801287c <tcp_timer_needed+0x30>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d10f      	bne.n	8012878 <tcp_timer_needed+0x2c>
 8012858:	4b09      	ldr	r3, [pc, #36]	@ (8012880 <tcp_timer_needed+0x34>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d103      	bne.n	8012868 <tcp_timer_needed+0x1c>
 8012860:	4b08      	ldr	r3, [pc, #32]	@ (8012884 <tcp_timer_needed+0x38>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d007      	beq.n	8012878 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012868:	4b04      	ldr	r3, [pc, #16]	@ (801287c <tcp_timer_needed+0x30>)
 801286a:	2201      	movs	r2, #1
 801286c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801286e:	2200      	movs	r2, #0
 8012870:	4905      	ldr	r1, [pc, #20]	@ (8012888 <tcp_timer_needed+0x3c>)
 8012872:	20fa      	movs	r0, #250	@ 0xfa
 8012874:	f000 f8cc 	bl	8012a10 <sys_timeout>
  }
}
 8012878:	bf00      	nop
 801287a:	bd80      	pop	{r7, pc}
 801287c:	20008460 	.word	0x20008460
 8012880:	20008410 	.word	0x20008410
 8012884:	20008414 	.word	0x20008414
 8012888:	08012805 	.word	0x08012805

0801288c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b086      	sub	sp, #24
 8012890:	af00      	add	r7, sp, #0
 8012892:	60f8      	str	r0, [r7, #12]
 8012894:	60b9      	str	r1, [r7, #8]
 8012896:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012898:	2006      	movs	r0, #6
 801289a:	f7f9 fbeb 	bl	800c074 <memp_malloc>
 801289e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d109      	bne.n	80128ba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d151      	bne.n	8012950 <sys_timeout_abs+0xc4>
 80128ac:	4b2a      	ldr	r3, [pc, #168]	@ (8012958 <sys_timeout_abs+0xcc>)
 80128ae:	22be      	movs	r2, #190	@ 0xbe
 80128b0:	492a      	ldr	r1, [pc, #168]	@ (801295c <sys_timeout_abs+0xd0>)
 80128b2:	482b      	ldr	r0, [pc, #172]	@ (8012960 <sys_timeout_abs+0xd4>)
 80128b4:	f004 f940 	bl	8016b38 <iprintf>
    return;
 80128b8:	e04a      	b.n	8012950 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	2200      	movs	r2, #0
 80128be:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	68ba      	ldr	r2, [r7, #8]
 80128c4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	68fa      	ldr	r2, [r7, #12]
 80128d0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80128d2:	4b24      	ldr	r3, [pc, #144]	@ (8012964 <sys_timeout_abs+0xd8>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d103      	bne.n	80128e2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80128da:	4a22      	ldr	r2, [pc, #136]	@ (8012964 <sys_timeout_abs+0xd8>)
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	6013      	str	r3, [r2, #0]
    return;
 80128e0:	e037      	b.n	8012952 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	685a      	ldr	r2, [r3, #4]
 80128e6:	4b1f      	ldr	r3, [pc, #124]	@ (8012964 <sys_timeout_abs+0xd8>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	1ad3      	subs	r3, r2, r3
 80128ee:	0fdb      	lsrs	r3, r3, #31
 80128f0:	f003 0301 	and.w	r3, r3, #1
 80128f4:	b2db      	uxtb	r3, r3
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d007      	beq.n	801290a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80128fa:	4b1a      	ldr	r3, [pc, #104]	@ (8012964 <sys_timeout_abs+0xd8>)
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012902:	4a18      	ldr	r2, [pc, #96]	@ (8012964 <sys_timeout_abs+0xd8>)
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	6013      	str	r3, [r2, #0]
 8012908:	e023      	b.n	8012952 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801290a:	4b16      	ldr	r3, [pc, #88]	@ (8012964 <sys_timeout_abs+0xd8>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	617b      	str	r3, [r7, #20]
 8012910:	e01a      	b.n	8012948 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d00b      	beq.n	8012932 <sys_timeout_abs+0xa6>
 801291a:	693b      	ldr	r3, [r7, #16]
 801291c:	685a      	ldr	r2, [r3, #4]
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	1ad3      	subs	r3, r2, r3
 8012926:	0fdb      	lsrs	r3, r3, #31
 8012928:	f003 0301 	and.w	r3, r3, #1
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d007      	beq.n	8012942 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	681a      	ldr	r2, [r3, #0]
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	693a      	ldr	r2, [r7, #16]
 801293e:	601a      	str	r2, [r3, #0]
        break;
 8012940:	e007      	b.n	8012952 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	617b      	str	r3, [r7, #20]
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d1e1      	bne.n	8012912 <sys_timeout_abs+0x86>
 801294e:	e000      	b.n	8012952 <sys_timeout_abs+0xc6>
    return;
 8012950:	bf00      	nop
      }
    }
  }
}
 8012952:	3718      	adds	r7, #24
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	08019d28 	.word	0x08019d28
 801295c:	08019d5c 	.word	0x08019d5c
 8012960:	08019d9c 	.word	0x08019d9c
 8012964:	20008458 	.word	0x20008458

08012968 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b086      	sub	sp, #24
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	4798      	blx	r3

  now = sys_now();
 801297a:	f7f8 fccb 	bl	800b314 <sys_now>
 801297e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	681a      	ldr	r2, [r3, #0]
 8012984:	4b0f      	ldr	r3, [pc, #60]	@ (80129c4 <lwip_cyclic_timer+0x5c>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4413      	add	r3, r2
 801298a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801298c:	68fa      	ldr	r2, [r7, #12]
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	0fdb      	lsrs	r3, r3, #31
 8012994:	f003 0301 	and.w	r3, r3, #1
 8012998:	b2db      	uxtb	r3, r3
 801299a:	2b00      	cmp	r3, #0
 801299c:	d009      	beq.n	80129b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	4413      	add	r3, r2
 80129a6:	687a      	ldr	r2, [r7, #4]
 80129a8:	4907      	ldr	r1, [pc, #28]	@ (80129c8 <lwip_cyclic_timer+0x60>)
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ff ff6e 	bl	801288c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80129b0:	e004      	b.n	80129bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	4904      	ldr	r1, [pc, #16]	@ (80129c8 <lwip_cyclic_timer+0x60>)
 80129b6:	68f8      	ldr	r0, [r7, #12]
 80129b8:	f7ff ff68 	bl	801288c <sys_timeout_abs>
}
 80129bc:	bf00      	nop
 80129be:	3718      	adds	r7, #24
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	2000845c 	.word	0x2000845c
 80129c8:	08012969 	.word	0x08012969

080129cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129d2:	2301      	movs	r3, #1
 80129d4:	607b      	str	r3, [r7, #4]
 80129d6:	e00e      	b.n	80129f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80129d8:	4a0b      	ldr	r2, [pc, #44]	@ (8012a08 <sys_timeouts_init+0x3c>)
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	4a08      	ldr	r2, [pc, #32]	@ (8012a08 <sys_timeouts_init+0x3c>)
 80129e6:	4413      	add	r3, r2
 80129e8:	461a      	mov	r2, r3
 80129ea:	4908      	ldr	r1, [pc, #32]	@ (8012a0c <sys_timeouts_init+0x40>)
 80129ec:	f000 f810 	bl	8012a10 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	3301      	adds	r3, #1
 80129f4:	607b      	str	r3, [r7, #4]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2b02      	cmp	r3, #2
 80129fa:	d9ed      	bls.n	80129d8 <sys_timeouts_init+0xc>
  }
}
 80129fc:	bf00      	nop
 80129fe:	bf00      	nop
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	0801b1d8 	.word	0x0801b1d8
 8012a0c:	08012969 	.word	0x08012969

08012a10 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	60f8      	str	r0, [r7, #12]
 8012a18:	60b9      	str	r1, [r7, #8]
 8012a1a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a22:	d306      	bcc.n	8012a32 <sys_timeout+0x22>
 8012a24:	4b0a      	ldr	r3, [pc, #40]	@ (8012a50 <sys_timeout+0x40>)
 8012a26:	f240 1229 	movw	r2, #297	@ 0x129
 8012a2a:	490a      	ldr	r1, [pc, #40]	@ (8012a54 <sys_timeout+0x44>)
 8012a2c:	480a      	ldr	r0, [pc, #40]	@ (8012a58 <sys_timeout+0x48>)
 8012a2e:	f004 f883 	bl	8016b38 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012a32:	f7f8 fc6f 	bl	800b314 <sys_now>
 8012a36:	4602      	mov	r2, r0
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	68b9      	ldr	r1, [r7, #8]
 8012a42:	6978      	ldr	r0, [r7, #20]
 8012a44:	f7ff ff22 	bl	801288c <sys_timeout_abs>
#endif
}
 8012a48:	bf00      	nop
 8012a4a:	3718      	adds	r7, #24
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	08019d28 	.word	0x08019d28
 8012a54:	08019dc4 	.word	0x08019dc4
 8012a58:	08019d9c 	.word	0x08019d9c

08012a5c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012a62:	f7f8 fc57 	bl	800b314 <sys_now>
 8012a66:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012a68:	4b1a      	ldr	r3, [pc, #104]	@ (8012ad4 <sys_check_timeouts+0x78>)
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d001      	beq.n	8012a76 <sys_check_timeouts+0x1a>
 8012a72:	f7f9 ffa1 	bl	800c9b8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012a76:	4b18      	ldr	r3, [pc, #96]	@ (8012ad8 <sys_check_timeouts+0x7c>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d022      	beq.n	8012ac8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	68fa      	ldr	r2, [r7, #12]
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	0fdb      	lsrs	r3, r3, #31
 8012a8c:	f003 0301 	and.w	r3, r3, #1
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d11a      	bne.n	8012acc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8012ad8 <sys_check_timeouts+0x7c>)
 8012a9c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	689b      	ldr	r3, [r3, #8]
 8012aa2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	4a0b      	ldr	r2, [pc, #44]	@ (8012adc <sys_check_timeouts+0x80>)
 8012ab0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012ab2:	68b9      	ldr	r1, [r7, #8]
 8012ab4:	2006      	movs	r0, #6
 8012ab6:	f7f9 fb4d 	bl	800c154 <memp_free>
    if (handler != NULL) {
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d0d3      	beq.n	8012a68 <sys_check_timeouts+0xc>
      handler(arg);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6838      	ldr	r0, [r7, #0]
 8012ac4:	4798      	blx	r3
  do {
 8012ac6:	e7cf      	b.n	8012a68 <sys_check_timeouts+0xc>
      return;
 8012ac8:	bf00      	nop
 8012aca:	e000      	b.n	8012ace <sys_check_timeouts+0x72>
      return;
 8012acc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	20008401 	.word	0x20008401
 8012ad8:	20008458 	.word	0x20008458
 8012adc:	2000845c 	.word	0x2000845c

08012ae0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012ae4:	f003 ff28 	bl	8016938 <rand>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	4b01      	ldr	r3, [pc, #4]	@ (8012b00 <udp_init+0x20>)
 8012afa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012afc:	bf00      	nop
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	2000006c 	.word	0x2000006c

08012b04 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012b0e:	4b17      	ldr	r3, [pc, #92]	@ (8012b6c <udp_new_port+0x68>)
 8012b10:	881b      	ldrh	r3, [r3, #0]
 8012b12:	1c5a      	adds	r2, r3, #1
 8012b14:	b291      	uxth	r1, r2
 8012b16:	4a15      	ldr	r2, [pc, #84]	@ (8012b6c <udp_new_port+0x68>)
 8012b18:	8011      	strh	r1, [r2, #0]
 8012b1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d103      	bne.n	8012b2a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012b22:	4b12      	ldr	r3, [pc, #72]	@ (8012b6c <udp_new_port+0x68>)
 8012b24:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012b28:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b2a:	4b11      	ldr	r3, [pc, #68]	@ (8012b70 <udp_new_port+0x6c>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	603b      	str	r3, [r7, #0]
 8012b30:	e011      	b.n	8012b56 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	8a5a      	ldrh	r2, [r3, #18]
 8012b36:	4b0d      	ldr	r3, [pc, #52]	@ (8012b6c <udp_new_port+0x68>)
 8012b38:	881b      	ldrh	r3, [r3, #0]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d108      	bne.n	8012b50 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012b3e:	88fb      	ldrh	r3, [r7, #6]
 8012b40:	3301      	adds	r3, #1
 8012b42:	80fb      	strh	r3, [r7, #6]
 8012b44:	88fb      	ldrh	r3, [r7, #6]
 8012b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012b4a:	d3e0      	bcc.n	8012b0e <udp_new_port+0xa>
        return 0;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	e007      	b.n	8012b60 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	68db      	ldr	r3, [r3, #12]
 8012b54:	603b      	str	r3, [r7, #0]
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d1ea      	bne.n	8012b32 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012b5c:	4b03      	ldr	r3, [pc, #12]	@ (8012b6c <udp_new_port+0x68>)
 8012b5e:	881b      	ldrh	r3, [r3, #0]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	370c      	adds	r7, #12
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr
 8012b6c:	2000006c 	.word	0x2000006c
 8012b70:	20008464 	.word	0x20008464

08012b74 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b084      	sub	sp, #16
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	60b9      	str	r1, [r7, #8]
 8012b7e:	4613      	mov	r3, r2
 8012b80:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d105      	bne.n	8012b94 <udp_input_local_match+0x20>
 8012b88:	4b27      	ldr	r3, [pc, #156]	@ (8012c28 <udp_input_local_match+0xb4>)
 8012b8a:	2287      	movs	r2, #135	@ 0x87
 8012b8c:	4927      	ldr	r1, [pc, #156]	@ (8012c2c <udp_input_local_match+0xb8>)
 8012b8e:	4828      	ldr	r0, [pc, #160]	@ (8012c30 <udp_input_local_match+0xbc>)
 8012b90:	f003 ffd2 	bl	8016b38 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d105      	bne.n	8012ba6 <udp_input_local_match+0x32>
 8012b9a:	4b23      	ldr	r3, [pc, #140]	@ (8012c28 <udp_input_local_match+0xb4>)
 8012b9c:	2288      	movs	r2, #136	@ 0x88
 8012b9e:	4925      	ldr	r1, [pc, #148]	@ (8012c34 <udp_input_local_match+0xc0>)
 8012ba0:	4823      	ldr	r0, [pc, #140]	@ (8012c30 <udp_input_local_match+0xbc>)
 8012ba2:	f003 ffc9 	bl	8016b38 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	7a1b      	ldrb	r3, [r3, #8]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00b      	beq.n	8012bc6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	7a1a      	ldrb	r2, [r3, #8]
 8012bb2:	4b21      	ldr	r3, [pc, #132]	@ (8012c38 <udp_input_local_match+0xc4>)
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012bba:	3301      	adds	r3, #1
 8012bbc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d001      	beq.n	8012bc6 <udp_input_local_match+0x52>
    return 0;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	e02b      	b.n	8012c1e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012bc6:	79fb      	ldrb	r3, [r7, #7]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d018      	beq.n	8012bfe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d013      	beq.n	8012bfa <udp_input_local_match+0x86>
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d00f      	beq.n	8012bfa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012bda:	4b17      	ldr	r3, [pc, #92]	@ (8012c38 <udp_input_local_match+0xc4>)
 8012bdc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012be2:	d00a      	beq.n	8012bfa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	4b13      	ldr	r3, [pc, #76]	@ (8012c38 <udp_input_local_match+0xc4>)
 8012bea:	695b      	ldr	r3, [r3, #20]
 8012bec:	405a      	eors	r2, r3
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	3308      	adds	r3, #8
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d110      	bne.n	8012c1c <udp_input_local_match+0xa8>
          return 1;
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	e00f      	b.n	8012c1e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d009      	beq.n	8012c18 <udp_input_local_match+0xa4>
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d005      	beq.n	8012c18 <udp_input_local_match+0xa4>
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	4b09      	ldr	r3, [pc, #36]	@ (8012c38 <udp_input_local_match+0xc4>)
 8012c12:	695b      	ldr	r3, [r3, #20]
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d101      	bne.n	8012c1c <udp_input_local_match+0xa8>
        return 1;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e000      	b.n	8012c1e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012c1c:	2300      	movs	r3, #0
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	08019e10 	.word	0x08019e10
 8012c2c:	08019e40 	.word	0x08019e40
 8012c30:	08019e64 	.word	0x08019e64
 8012c34:	08019e8c 	.word	0x08019e8c
 8012c38:	200054a8 	.word	0x200054a8

08012c3c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012c3c:	b590      	push	{r4, r7, lr}
 8012c3e:	b08d      	sub	sp, #52	@ 0x34
 8012c40:	af02      	add	r7, sp, #8
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012c46:	2300      	movs	r3, #0
 8012c48:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d105      	bne.n	8012c5c <udp_input+0x20>
 8012c50:	4b95      	ldr	r3, [pc, #596]	@ (8012ea8 <udp_input+0x26c>)
 8012c52:	22cf      	movs	r2, #207	@ 0xcf
 8012c54:	4995      	ldr	r1, [pc, #596]	@ (8012eac <udp_input+0x270>)
 8012c56:	4896      	ldr	r0, [pc, #600]	@ (8012eb0 <udp_input+0x274>)
 8012c58:	f003 ff6e 	bl	8016b38 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d105      	bne.n	8012c6e <udp_input+0x32>
 8012c62:	4b91      	ldr	r3, [pc, #580]	@ (8012ea8 <udp_input+0x26c>)
 8012c64:	22d0      	movs	r2, #208	@ 0xd0
 8012c66:	4993      	ldr	r1, [pc, #588]	@ (8012eb4 <udp_input+0x278>)
 8012c68:	4891      	ldr	r0, [pc, #580]	@ (8012eb0 <udp_input+0x274>)
 8012c6a:	f003 ff65 	bl	8016b38 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	895b      	ldrh	r3, [r3, #10]
 8012c72:	2b07      	cmp	r3, #7
 8012c74:	d809      	bhi.n	8012c8a <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	891b      	ldrh	r3, [r3, #8]
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	488e      	ldr	r0, [pc, #568]	@ (8012eb8 <udp_input+0x27c>)
 8012c7e:	f003 ff5b 	bl	8016b38 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f7fa f9d2 	bl	800d02c <pbuf_free>
    goto end;
 8012c88:	e18d      	b.n	8012fa6 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012c90:	4b8a      	ldr	r3, [pc, #552]	@ (8012ebc <udp_input+0x280>)
 8012c92:	695b      	ldr	r3, [r3, #20]
 8012c94:	4a89      	ldr	r2, [pc, #548]	@ (8012ebc <udp_input+0x280>)
 8012c96:	6812      	ldr	r2, [r2, #0]
 8012c98:	4611      	mov	r1, r2
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f002 f9ca 	bl	8015034 <ip4_addr_isbroadcast_u32>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	891b      	ldrh	r3, [r3, #8]
 8012ca8:	4619      	mov	r1, r3
 8012caa:	4885      	ldr	r0, [pc, #532]	@ (8012ec0 <udp_input+0x284>)
 8012cac:	f003 ff44 	bl	8016b38 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	881b      	ldrh	r3, [r3, #0]
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7f8 fd68 	bl	800b78c <lwip_htons>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	885b      	ldrh	r3, [r3, #2]
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7f8 fd60 	bl	800b78c <lwip_htons>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8012cd0:	6978      	ldr	r0, [r7, #20]
 8012cd2:	f000 fd3b 	bl	801374c <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8012cd6:	487b      	ldr	r0, [pc, #492]	@ (8012ec4 <udp_input+0x288>)
 8012cd8:	f003 ff2e 	bl	8016b38 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8012cdc:	4b77      	ldr	r3, [pc, #476]	@ (8012ebc <udp_input+0x280>)
 8012cde:	695b      	ldr	r3, [r3, #20]
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	4b75      	ldr	r3, [pc, #468]	@ (8012ebc <udp_input+0x280>)
 8012ce6:	695b      	ldr	r3, [r3, #20]
 8012ce8:	0a1b      	lsrs	r3, r3, #8
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	461a      	mov	r2, r3
 8012cee:	4b73      	ldr	r3, [pc, #460]	@ (8012ebc <udp_input+0x280>)
 8012cf0:	695b      	ldr	r3, [r3, #20]
 8012cf2:	0c1b      	lsrs	r3, r3, #16
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	4b70      	ldr	r3, [pc, #448]	@ (8012ebc <udp_input+0x280>)
 8012cfa:	695b      	ldr	r3, [r3, #20]
 8012cfc:	0e1b      	lsrs	r3, r3, #24
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	4603      	mov	r3, r0
 8012d04:	4870      	ldr	r0, [pc, #448]	@ (8012ec8 <udp_input+0x28c>)
 8012d06:	f003 ff17 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	885b      	ldrh	r3, [r3, #2]
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7f8 fd3b 	bl	800b78c <lwip_htons>
 8012d16:	4603      	mov	r3, r0
 8012d18:	4619      	mov	r1, r3
 8012d1a:	486c      	ldr	r0, [pc, #432]	@ (8012ecc <udp_input+0x290>)
 8012d1c:	f003 ff0c 	bl	8016b38 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 8012d20:	4b66      	ldr	r3, [pc, #408]	@ (8012ebc <udp_input+0x280>)
 8012d22:	691b      	ldr	r3, [r3, #16]
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	4619      	mov	r1, r3
 8012d28:	4b64      	ldr	r3, [pc, #400]	@ (8012ebc <udp_input+0x280>)
 8012d2a:	691b      	ldr	r3, [r3, #16]
 8012d2c:	0a1b      	lsrs	r3, r3, #8
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	461a      	mov	r2, r3
 8012d32:	4b62      	ldr	r3, [pc, #392]	@ (8012ebc <udp_input+0x280>)
 8012d34:	691b      	ldr	r3, [r3, #16]
 8012d36:	0c1b      	lsrs	r3, r3, #16
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8012ebc <udp_input+0x280>)
 8012d3e:	691b      	ldr	r3, [r3, #16]
 8012d40:	0e1b      	lsrs	r3, r3, #24
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	9300      	str	r3, [sp, #0]
 8012d46:	4603      	mov	r3, r0
 8012d48:	485f      	ldr	r0, [pc, #380]	@ (8012ec8 <udp_input+0x28c>)
 8012d4a:	f003 fef5 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f8 fd19 	bl	800b78c <lwip_htons>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	485c      	ldr	r0, [pc, #368]	@ (8012ed0 <udp_input+0x294>)
 8012d60:	f003 feea 	bl	8016b38 <iprintf>

  pcb = NULL;
 8012d64:	2300      	movs	r3, #0
 8012d66:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d70:	4b58      	ldr	r3, [pc, #352]	@ (8012ed4 <udp_input+0x298>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8012d76:	e091      	b.n	8012e9c <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 8012d78:	4857      	ldr	r0, [pc, #348]	@ (8012ed8 <udp_input+0x29c>)
 8012d7a:	f003 fedd 	bl	8016b38 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8012d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	4619      	mov	r1, r3
 8012d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	0a1b      	lsrs	r3, r3, #8
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	461a      	mov	r2, r3
 8012d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	0c1b      	lsrs	r3, r3, #16
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	4618      	mov	r0, r3
 8012d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	0e1b      	lsrs	r3, r3, #24
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	9300      	str	r3, [sp, #0]
 8012da4:	4603      	mov	r3, r0
 8012da6:	4848      	ldr	r0, [pc, #288]	@ (8012ec8 <udp_input+0x28c>)
 8012da8:	f003 fec6 	bl	8016b38 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8012dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dae:	8a5b      	ldrh	r3, [r3, #18]
 8012db0:	4619      	mov	r1, r3
 8012db2:	4846      	ldr	r0, [pc, #280]	@ (8012ecc <udp_input+0x290>)
 8012db4:	f003 fec0 	bl	8016b38 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8012db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	0a1b      	lsrs	r3, r3, #8
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	461a      	mov	r2, r3
 8012dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	0c1b      	lsrs	r3, r3, #16
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	0e1b      	lsrs	r3, r3, #24
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	9300      	str	r3, [sp, #0]
 8012dde:	4603      	mov	r3, r0
 8012de0:	4839      	ldr	r0, [pc, #228]	@ (8012ec8 <udp_input+0x28c>)
 8012de2:	f003 fea9 	bl	8016b38 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8012de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de8:	8a9b      	ldrh	r3, [r3, #20]
 8012dea:	4619      	mov	r1, r3
 8012dec:	4838      	ldr	r0, [pc, #224]	@ (8012ed0 <udp_input+0x294>)
 8012dee:	f003 fea3 	bl	8016b38 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012df4:	8a5b      	ldrh	r3, [r3, #18]
 8012df6:	89fa      	ldrh	r2, [r7, #14]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d14a      	bne.n	8012e92 <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012dfc:	7cfb      	ldrb	r3, [r7, #19]
 8012dfe:	461a      	mov	r2, r3
 8012e00:	6839      	ldr	r1, [r7, #0]
 8012e02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e04:	f7ff feb6 	bl	8012b74 <udp_input_local_match>
 8012e08:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d041      	beq.n	8012e92 <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e10:	7c1b      	ldrb	r3, [r3, #16]
 8012e12:	f003 0304 	and.w	r3, r3, #4
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d11d      	bne.n	8012e56 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 8012e1a:	69fb      	ldr	r3, [r7, #28]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d102      	bne.n	8012e26 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e22:	61fb      	str	r3, [r7, #28]
 8012e24:	e017      	b.n	8012e56 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012e26:	7cfb      	ldrb	r3, [r7, #19]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d014      	beq.n	8012e56 <udp_input+0x21a>
 8012e2c:	4b23      	ldr	r3, [pc, #140]	@ (8012ebc <udp_input+0x280>)
 8012e2e:	695b      	ldr	r3, [r3, #20]
 8012e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e34:	d10f      	bne.n	8012e56 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012e36:	69fb      	ldr	r3, [r7, #28]
 8012e38:	681a      	ldr	r2, [r3, #0]
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	3304      	adds	r3, #4
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d008      	beq.n	8012e56 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	3304      	adds	r3, #4
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d101      	bne.n	8012e56 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 8012e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e54:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e58:	8a9b      	ldrh	r3, [r3, #20]
 8012e5a:	8a3a      	ldrh	r2, [r7, #16]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d118      	bne.n	8012e92 <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e62:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d005      	beq.n	8012e74 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e6a:	685a      	ldr	r2, [r3, #4]
 8012e6c:	4b13      	ldr	r3, [pc, #76]	@ (8012ebc <udp_input+0x280>)
 8012e6e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d10e      	bne.n	8012e92 <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012e74:	6a3b      	ldr	r3, [r7, #32]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d030      	beq.n	8012edc <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e7c:	68da      	ldr	r2, [r3, #12]
 8012e7e:	6a3b      	ldr	r3, [r7, #32]
 8012e80:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012e82:	4b14      	ldr	r3, [pc, #80]	@ (8012ed4 <udp_input+0x298>)
 8012e84:	681a      	ldr	r2, [r3, #0]
 8012e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e88:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012e8a:	4a12      	ldr	r2, [pc, #72]	@ (8012ed4 <udp_input+0x298>)
 8012e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e8e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012e90:	e024      	b.n	8012edc <udp_input+0x2a0>
      }
    }

    prev = pcb;
 8012e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e94:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e98:	68db      	ldr	r3, [r3, #12]
 8012e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	f47f af6a 	bne.w	8012d78 <udp_input+0x13c>
 8012ea4:	e01b      	b.n	8012ede <udp_input+0x2a2>
 8012ea6:	bf00      	nop
 8012ea8:	08019e10 	.word	0x08019e10
 8012eac:	08019eb4 	.word	0x08019eb4
 8012eb0:	08019e64 	.word	0x08019e64
 8012eb4:	08019ecc 	.word	0x08019ecc
 8012eb8:	08019ee8 	.word	0x08019ee8
 8012ebc:	200054a8 	.word	0x200054a8
 8012ec0:	08019f20 	.word	0x08019f20
 8012ec4:	08019f4c 	.word	0x08019f4c
 8012ec8:	08019f54 	.word	0x08019f54
 8012ecc:	08019f64 	.word	0x08019f64
 8012ed0:	08019f74 	.word	0x08019f74
 8012ed4:	20008464 	.word	0x20008464
 8012ed8:	08019f7c 	.word	0x08019f7c
        break;
 8012edc:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d101      	bne.n	8012ee8 <udp_input+0x2ac>
    pcb = uncon_pcb;
 8012ee4:	69fb      	ldr	r3, [r7, #28]
 8012ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d002      	beq.n	8012ef4 <udp_input+0x2b8>
    for_us = 1;
 8012eee:	2301      	movs	r3, #1
 8012ef0:	76fb      	strb	r3, [r7, #27]
 8012ef2:	e00a      	b.n	8012f0a <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	3304      	adds	r3, #4
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	4b2d      	ldr	r3, [pc, #180]	@ (8012fb0 <udp_input+0x374>)
 8012efc:	695b      	ldr	r3, [r3, #20]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	bf0c      	ite	eq
 8012f02:	2301      	moveq	r3, #1
 8012f04:	2300      	movne	r3, #0
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012f0a:	7efb      	ldrb	r3, [r7, #27]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d047      	beq.n	8012fa0 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8012f10:	4828      	ldr	r0, [pc, #160]	@ (8012fb4 <udp_input+0x378>)
 8012f12:	f003 fe81 	bl	8016c18 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012f16:	2108      	movs	r1, #8
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7fa f801 	bl	800cf20 <pbuf_remove_header>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d00a      	beq.n	8012f3a <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012f24:	4b24      	ldr	r3, [pc, #144]	@ (8012fb8 <udp_input+0x37c>)
 8012f26:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8012f2a:	4924      	ldr	r1, [pc, #144]	@ (8012fbc <udp_input+0x380>)
 8012f2c:	4824      	ldr	r0, [pc, #144]	@ (8012fc0 <udp_input+0x384>)
 8012f2e:	f003 fe03 	bl	8016b38 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7fa f87a 	bl	800d02c <pbuf_free>
      goto end;
 8012f38:	e035      	b.n	8012fa6 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 8012f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d012      	beq.n	8012f66 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f42:	699b      	ldr	r3, [r3, #24]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d00a      	beq.n	8012f5e <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f4a:	699c      	ldr	r4, [r3, #24]
 8012f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f4e:	69d8      	ldr	r0, [r3, #28]
 8012f50:	8a3b      	ldrh	r3, [r7, #16]
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	4b1b      	ldr	r3, [pc, #108]	@ (8012fc4 <udp_input+0x388>)
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012f5a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012f5c:	e024      	b.n	8012fa8 <udp_input+0x36c>
        pbuf_free(p);
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f7fa f864 	bl	800d02c <pbuf_free>
        goto end;
 8012f64:	e01f      	b.n	8012fa6 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 8012f66:	4818      	ldr	r0, [pc, #96]	@ (8012fc8 <udp_input+0x38c>)
 8012f68:	f003 fe56 	bl	8016c18 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012f6c:	7cfb      	ldrb	r3, [r7, #19]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d112      	bne.n	8012f98 <udp_input+0x35c>
 8012f72:	4b0f      	ldr	r3, [pc, #60]	@ (8012fb0 <udp_input+0x374>)
 8012f74:	695b      	ldr	r3, [r3, #20]
 8012f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012f7a:	2be0      	cmp	r3, #224	@ 0xe0
 8012f7c:	d00c      	beq.n	8012f98 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8012fb0 <udp_input+0x374>)
 8012f80:	899b      	ldrh	r3, [r3, #12]
 8012f82:	3308      	adds	r3, #8
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	b21b      	sxth	r3, r3
 8012f88:	4619      	mov	r1, r3
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7fa f83b 	bl	800d006 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012f90:	2103      	movs	r1, #3
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f001 fcee 	bl	8014974 <icmp_dest_unreach>
      pbuf_free(p);
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f7fa f847 	bl	800d02c <pbuf_free>
  return;
 8012f9e:	e003      	b.n	8012fa8 <udp_input+0x36c>
    pbuf_free(p);
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f7fa f843 	bl	800d02c <pbuf_free>
  return;
 8012fa6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012fa8:	372c      	adds	r7, #44	@ 0x2c
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd90      	pop	{r4, r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	200054a8 	.word	0x200054a8
 8012fb4:	08019f84 	.word	0x08019f84
 8012fb8:	08019e10 	.word	0x08019e10
 8012fbc:	08019fa4 	.word	0x08019fa4
 8012fc0:	08019e64 	.word	0x08019e64
 8012fc4:	200054b8 	.word	0x200054b8
 8012fc8:	08019fc0 	.word	0x08019fc0

08012fcc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b088      	sub	sp, #32
 8012fd0:	af02      	add	r7, sp, #8
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d109      	bne.n	8012ff4 <udp_sendto+0x28>
 8012fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80130d0 <udp_sendto+0x104>)
 8012fe2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012fe6:	493b      	ldr	r1, [pc, #236]	@ (80130d4 <udp_sendto+0x108>)
 8012fe8:	483b      	ldr	r0, [pc, #236]	@ (80130d8 <udp_sendto+0x10c>)
 8012fea:	f003 fda5 	bl	8016b38 <iprintf>
 8012fee:	f06f 030f 	mvn.w	r3, #15
 8012ff2:	e068      	b.n	80130c6 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d109      	bne.n	801300e <udp_sendto+0x42>
 8012ffa:	4b35      	ldr	r3, [pc, #212]	@ (80130d0 <udp_sendto+0x104>)
 8012ffc:	f240 2219 	movw	r2, #537	@ 0x219
 8013000:	4936      	ldr	r1, [pc, #216]	@ (80130dc <udp_sendto+0x110>)
 8013002:	4835      	ldr	r0, [pc, #212]	@ (80130d8 <udp_sendto+0x10c>)
 8013004:	f003 fd98 	bl	8016b38 <iprintf>
 8013008:	f06f 030f 	mvn.w	r3, #15
 801300c:	e05b      	b.n	80130c6 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d109      	bne.n	8013028 <udp_sendto+0x5c>
 8013014:	4b2e      	ldr	r3, [pc, #184]	@ (80130d0 <udp_sendto+0x104>)
 8013016:	f240 221a 	movw	r2, #538	@ 0x21a
 801301a:	4931      	ldr	r1, [pc, #196]	@ (80130e0 <udp_sendto+0x114>)
 801301c:	482e      	ldr	r0, [pc, #184]	@ (80130d8 <udp_sendto+0x10c>)
 801301e:	f003 fd8b 	bl	8016b38 <iprintf>
 8013022:	f06f 030f 	mvn.w	r3, #15
 8013026:	e04e      	b.n	80130c6 <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 8013028:	482e      	ldr	r0, [pc, #184]	@ (80130e4 <udp_sendto+0x118>)
 801302a:	f003 fdf5 	bl	8016c18 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	7a1b      	ldrb	r3, [r3, #8]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d006      	beq.n	8013044 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	7a1b      	ldrb	r3, [r3, #8]
 801303a:	4618      	mov	r0, r3
 801303c:	f7f9 fc96 	bl	800c96c <netif_get_by_index>
 8013040:	6178      	str	r0, [r7, #20]
 8013042:	e003      	b.n	801304c <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f001 fd5f 	bl	8014b08 <ip4_route>
 801304a:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d12f      	bne.n	80130b2 <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 8013052:	4825      	ldr	r0, [pc, #148]	@ (80130e8 <udp_sendto+0x11c>)
 8013054:	f003 fd70 	bl	8016b38 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d003      	beq.n	8013066 <udp_sendto+0x9a>
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	4619      	mov	r1, r3
 8013064:	e000      	b.n	8013068 <udp_sendto+0x9c>
 8013066:	2100      	movs	r1, #0
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d004      	beq.n	8013078 <udp_sendto+0xac>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	3301      	adds	r3, #1
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	461a      	mov	r2, r3
 8013076:	e000      	b.n	801307a <udp_sendto+0xae>
 8013078:	2200      	movs	r2, #0
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d004      	beq.n	801308a <udp_sendto+0xbe>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	3302      	adds	r3, #2
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	4618      	mov	r0, r3
 8013088:	e000      	b.n	801308c <udp_sendto+0xc0>
 801308a:	2000      	movs	r0, #0
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <udp_sendto+0xce>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	3303      	adds	r3, #3
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	e000      	b.n	801309c <udp_sendto+0xd0>
 801309a:	2300      	movs	r3, #0
 801309c:	9300      	str	r3, [sp, #0]
 801309e:	4603      	mov	r3, r0
 80130a0:	4812      	ldr	r0, [pc, #72]	@ (80130ec <udp_sendto+0x120>)
 80130a2:	f003 fd49 	bl	8016b38 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 80130a6:	200a      	movs	r0, #10
 80130a8:	f003 fd58 	bl	8016b5c <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80130ac:	f06f 0303 	mvn.w	r3, #3
 80130b0:	e009      	b.n	80130c6 <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80130b2:	887a      	ldrh	r2, [r7, #2]
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	4613      	mov	r3, r2
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	68b9      	ldr	r1, [r7, #8]
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f000 f816 	bl	80130f0 <udp_sendto_if>
 80130c4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3718      	adds	r7, #24
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	08019e10 	.word	0x08019e10
 80130d4:	0801a008 	.word	0x0801a008
 80130d8:	08019e64 	.word	0x08019e64
 80130dc:	0801a020 	.word	0x0801a020
 80130e0:	0801a03c 	.word	0x0801a03c
 80130e4:	0801a058 	.word	0x0801a058
 80130e8:	0801a064 	.word	0x0801a064
 80130ec:	08019f54 	.word	0x08019f54

080130f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b088      	sub	sp, #32
 80130f4:	af02      	add	r7, sp, #8
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	60b9      	str	r1, [r7, #8]
 80130fa:	607a      	str	r2, [r7, #4]
 80130fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d109      	bne.n	8013118 <udp_sendto_if+0x28>
 8013104:	4b2e      	ldr	r3, [pc, #184]	@ (80131c0 <udp_sendto_if+0xd0>)
 8013106:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801310a:	492e      	ldr	r1, [pc, #184]	@ (80131c4 <udp_sendto_if+0xd4>)
 801310c:	482e      	ldr	r0, [pc, #184]	@ (80131c8 <udp_sendto_if+0xd8>)
 801310e:	f003 fd13 	bl	8016b38 <iprintf>
 8013112:	f06f 030f 	mvn.w	r3, #15
 8013116:	e04f      	b.n	80131b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d109      	bne.n	8013132 <udp_sendto_if+0x42>
 801311e:	4b28      	ldr	r3, [pc, #160]	@ (80131c0 <udp_sendto_if+0xd0>)
 8013120:	f240 2281 	movw	r2, #641	@ 0x281
 8013124:	4929      	ldr	r1, [pc, #164]	@ (80131cc <udp_sendto_if+0xdc>)
 8013126:	4828      	ldr	r0, [pc, #160]	@ (80131c8 <udp_sendto_if+0xd8>)
 8013128:	f003 fd06 	bl	8016b38 <iprintf>
 801312c:	f06f 030f 	mvn.w	r3, #15
 8013130:	e042      	b.n	80131b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d109      	bne.n	801314c <udp_sendto_if+0x5c>
 8013138:	4b21      	ldr	r3, [pc, #132]	@ (80131c0 <udp_sendto_if+0xd0>)
 801313a:	f240 2282 	movw	r2, #642	@ 0x282
 801313e:	4924      	ldr	r1, [pc, #144]	@ (80131d0 <udp_sendto_if+0xe0>)
 8013140:	4821      	ldr	r0, [pc, #132]	@ (80131c8 <udp_sendto_if+0xd8>)
 8013142:	f003 fcf9 	bl	8016b38 <iprintf>
 8013146:	f06f 030f 	mvn.w	r3, #15
 801314a:	e035      	b.n	80131b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801314c:	6a3b      	ldr	r3, [r7, #32]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d109      	bne.n	8013166 <udp_sendto_if+0x76>
 8013152:	4b1b      	ldr	r3, [pc, #108]	@ (80131c0 <udp_sendto_if+0xd0>)
 8013154:	f240 2283 	movw	r2, #643	@ 0x283
 8013158:	491e      	ldr	r1, [pc, #120]	@ (80131d4 <udp_sendto_if+0xe4>)
 801315a:	481b      	ldr	r0, [pc, #108]	@ (80131c8 <udp_sendto_if+0xd8>)
 801315c:	f003 fcec 	bl	8016b38 <iprintf>
 8013160:	f06f 030f 	mvn.w	r3, #15
 8013164:	e028      	b.n	80131b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d009      	beq.n	8013180 <udp_sendto_if+0x90>
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d005      	beq.n	8013180 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801317c:	2be0      	cmp	r3, #224	@ 0xe0
 801317e:	d103      	bne.n	8013188 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013180:	6a3b      	ldr	r3, [r7, #32]
 8013182:	3304      	adds	r3, #4
 8013184:	617b      	str	r3, [r7, #20]
 8013186:	e00b      	b.n	80131a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	6a3b      	ldr	r3, [r7, #32]
 801318e:	3304      	adds	r3, #4
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	429a      	cmp	r2, r3
 8013194:	d002      	beq.n	801319c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013196:	f06f 0303 	mvn.w	r3, #3
 801319a:	e00d      	b.n	80131b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80131a0:	887a      	ldrh	r2, [r7, #2]
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	9301      	str	r3, [sp, #4]
 80131a6:	6a3b      	ldr	r3, [r7, #32]
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	4613      	mov	r3, r2
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	68b9      	ldr	r1, [r7, #8]
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f000 f811 	bl	80131d8 <udp_sendto_if_src>
 80131b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3718      	adds	r7, #24
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	08019e10 	.word	0x08019e10
 80131c4:	0801a07c 	.word	0x0801a07c
 80131c8:	08019e64 	.word	0x08019e64
 80131cc:	0801a098 	.word	0x0801a098
 80131d0:	0801a0b4 	.word	0x0801a0b4
 80131d4:	0801a0d4 	.word	0x0801a0d4

080131d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b08c      	sub	sp, #48	@ 0x30
 80131dc:	af04      	add	r7, sp, #16
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
 80131e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d109      	bne.n	8013200 <udp_sendto_if_src+0x28>
 80131ec:	4b7a      	ldr	r3, [pc, #488]	@ (80133d8 <udp_sendto_if_src+0x200>)
 80131ee:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80131f2:	497a      	ldr	r1, [pc, #488]	@ (80133dc <udp_sendto_if_src+0x204>)
 80131f4:	487a      	ldr	r0, [pc, #488]	@ (80133e0 <udp_sendto_if_src+0x208>)
 80131f6:	f003 fc9f 	bl	8016b38 <iprintf>
 80131fa:	f06f 030f 	mvn.w	r3, #15
 80131fe:	e0e6      	b.n	80133ce <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d109      	bne.n	801321a <udp_sendto_if_src+0x42>
 8013206:	4b74      	ldr	r3, [pc, #464]	@ (80133d8 <udp_sendto_if_src+0x200>)
 8013208:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801320c:	4975      	ldr	r1, [pc, #468]	@ (80133e4 <udp_sendto_if_src+0x20c>)
 801320e:	4874      	ldr	r0, [pc, #464]	@ (80133e0 <udp_sendto_if_src+0x208>)
 8013210:	f003 fc92 	bl	8016b38 <iprintf>
 8013214:	f06f 030f 	mvn.w	r3, #15
 8013218:	e0d9      	b.n	80133ce <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d109      	bne.n	8013234 <udp_sendto_if_src+0x5c>
 8013220:	4b6d      	ldr	r3, [pc, #436]	@ (80133d8 <udp_sendto_if_src+0x200>)
 8013222:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013226:	4970      	ldr	r1, [pc, #448]	@ (80133e8 <udp_sendto_if_src+0x210>)
 8013228:	486d      	ldr	r0, [pc, #436]	@ (80133e0 <udp_sendto_if_src+0x208>)
 801322a:	f003 fc85 	bl	8016b38 <iprintf>
 801322e:	f06f 030f 	mvn.w	r3, #15
 8013232:	e0cc      	b.n	80133ce <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013236:	2b00      	cmp	r3, #0
 8013238:	d109      	bne.n	801324e <udp_sendto_if_src+0x76>
 801323a:	4b67      	ldr	r3, [pc, #412]	@ (80133d8 <udp_sendto_if_src+0x200>)
 801323c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8013240:	496a      	ldr	r1, [pc, #424]	@ (80133ec <udp_sendto_if_src+0x214>)
 8013242:	4867      	ldr	r0, [pc, #412]	@ (80133e0 <udp_sendto_if_src+0x208>)
 8013244:	f003 fc78 	bl	8016b38 <iprintf>
 8013248:	f06f 030f 	mvn.w	r3, #15
 801324c:	e0bf      	b.n	80133ce <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013250:	2b00      	cmp	r3, #0
 8013252:	d109      	bne.n	8013268 <udp_sendto_if_src+0x90>
 8013254:	4b60      	ldr	r3, [pc, #384]	@ (80133d8 <udp_sendto_if_src+0x200>)
 8013256:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801325a:	4965      	ldr	r1, [pc, #404]	@ (80133f0 <udp_sendto_if_src+0x218>)
 801325c:	4860      	ldr	r0, [pc, #384]	@ (80133e0 <udp_sendto_if_src+0x208>)
 801325e:	f003 fc6b 	bl	8016b38 <iprintf>
 8013262:	f06f 030f 	mvn.w	r3, #15
 8013266:	e0b2      	b.n	80133ce <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	8a5b      	ldrh	r3, [r3, #18]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d115      	bne.n	801329c <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 8013270:	4860      	ldr	r0, [pc, #384]	@ (80133f4 <udp_sendto_if_src+0x21c>)
 8013272:	f003 fcd1 	bl	8016c18 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013276:	68f9      	ldr	r1, [r7, #12]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	8a5b      	ldrh	r3, [r3, #18]
 801327c:	461a      	mov	r2, r3
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f000 f8cc 	bl	801341c <udp_bind>
 8013284:	4603      	mov	r3, r0
 8013286:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013288:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d005      	beq.n	801329c <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 8013290:	4859      	ldr	r0, [pc, #356]	@ (80133f8 <udp_sendto_if_src+0x220>)
 8013292:	f003 fcc1 	bl	8016c18 <puts>
      return err;
 8013296:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801329a:	e098      	b.n	80133ce <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	891b      	ldrh	r3, [r3, #8]
 80132a0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80132a4:	4293      	cmp	r3, r2
 80132a6:	d902      	bls.n	80132ae <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 80132a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132ac:	e08f      	b.n	80133ce <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80132ae:	2108      	movs	r1, #8
 80132b0:	68b8      	ldr	r0, [r7, #8]
 80132b2:	f7f9 fe25 	bl	800cf00 <pbuf_add_header>
 80132b6:	4603      	mov	r3, r0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d01d      	beq.n	80132f8 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80132bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80132c0:	2108      	movs	r1, #8
 80132c2:	2022      	movs	r0, #34	@ 0x22
 80132c4:	f7f9 fbce 	bl	800ca64 <pbuf_alloc>
 80132c8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80132ca:	69fb      	ldr	r3, [r7, #28]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d105      	bne.n	80132dc <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 80132d0:	484a      	ldr	r0, [pc, #296]	@ (80133fc <udp_sendto_if_src+0x224>)
 80132d2:	f003 fca1 	bl	8016c18 <puts>
      return ERR_MEM;
 80132d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132da:	e078      	b.n	80133ce <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	891b      	ldrh	r3, [r3, #8]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d003      	beq.n	80132ec <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80132e4:	68b9      	ldr	r1, [r7, #8]
 80132e6:	69f8      	ldr	r0, [r7, #28]
 80132e8:	f7f9 ffb8 	bl	800d25c <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 80132ec:	68ba      	ldr	r2, [r7, #8]
 80132ee:	69f9      	ldr	r1, [r7, #28]
 80132f0:	4843      	ldr	r0, [pc, #268]	@ (8013400 <udp_sendto_if_src+0x228>)
 80132f2:	f003 fc21 	bl	8016b38 <iprintf>
 80132f6:	e005      	b.n	8013304 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 80132fc:	68b9      	ldr	r1, [r7, #8]
 80132fe:	4841      	ldr	r0, [pc, #260]	@ (8013404 <udp_sendto_if_src+0x22c>)
 8013300:	f003 fc1a 	bl	8016b38 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013304:	69fb      	ldr	r3, [r7, #28]
 8013306:	895b      	ldrh	r3, [r3, #10]
 8013308:	2b07      	cmp	r3, #7
 801330a:	d806      	bhi.n	801331a <udp_sendto_if_src+0x142>
 801330c:	4b32      	ldr	r3, [pc, #200]	@ (80133d8 <udp_sendto_if_src+0x200>)
 801330e:	f240 320d 	movw	r2, #781	@ 0x30d
 8013312:	493d      	ldr	r1, [pc, #244]	@ (8013408 <udp_sendto_if_src+0x230>)
 8013314:	4832      	ldr	r0, [pc, #200]	@ (80133e0 <udp_sendto_if_src+0x208>)
 8013316:	f003 fc0f 	bl	8016b38 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	8a5b      	ldrh	r3, [r3, #18]
 8013324:	4618      	mov	r0, r3
 8013326:	f7f8 fa31 	bl	800b78c <lwip_htons>
 801332a:	4603      	mov	r3, r0
 801332c:	461a      	mov	r2, r3
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013332:	887b      	ldrh	r3, [r7, #2]
 8013334:	4618      	mov	r0, r3
 8013336:	f7f8 fa29 	bl	800b78c <lwip_htons>
 801333a:	4603      	mov	r3, r0
 801333c:	461a      	mov	r2, r3
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	2200      	movs	r2, #0
 8013346:	719a      	strb	r2, [r3, #6]
 8013348:	2200      	movs	r2, #0
 801334a:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801334c:	69fb      	ldr	r3, [r7, #28]
 801334e:	891b      	ldrh	r3, [r3, #8]
 8013350:	4619      	mov	r1, r3
 8013352:	482e      	ldr	r0, [pc, #184]	@ (801340c <udp_sendto_if_src+0x234>)
 8013354:	f003 fbf0 	bl	8016b38 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	891b      	ldrh	r3, [r3, #8]
 801335c:	4619      	mov	r1, r3
 801335e:	482c      	ldr	r0, [pc, #176]	@ (8013410 <udp_sendto_if_src+0x238>)
 8013360:	f003 fbea 	bl	8016b38 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	891b      	ldrh	r3, [r3, #8]
 8013368:	4618      	mov	r0, r3
 801336a:	f7f8 fa0f 	bl	800b78c <lwip_htons>
 801336e:	4603      	mov	r3, r0
 8013370:	461a      	mov	r2, r3
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013376:	2311      	movs	r3, #17
 8013378:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	7adb      	ldrb	r3, [r3, #11]
 801337e:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	88db      	ldrh	r3, [r3, #6]
 8013384:	b29b      	uxth	r3, r3
 8013386:	4619      	mov	r1, r3
 8013388:	4822      	ldr	r0, [pc, #136]	@ (8013414 <udp_sendto_if_src+0x23c>)
 801338a:	f003 fbd5 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801338e:	7cfb      	ldrb	r3, [r7, #19]
 8013390:	4619      	mov	r1, r3
 8013392:	4821      	ldr	r0, [pc, #132]	@ (8013418 <udp_sendto_if_src+0x240>)
 8013394:	f003 fbd0 	bl	8016b38 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	7a9b      	ldrb	r3, [r3, #10]
 801339c:	7cb9      	ldrb	r1, [r7, #18]
 801339e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133a0:	9202      	str	r2, [sp, #8]
 80133a2:	7cfa      	ldrb	r2, [r7, #19]
 80133a4:	9201      	str	r2, [sp, #4]
 80133a6:	9300      	str	r3, [sp, #0]
 80133a8:	460b      	mov	r3, r1
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80133ae:	69f8      	ldr	r0, [r7, #28]
 80133b0:	f001 fd92 	bl	8014ed8 <ip4_output_if_src>
 80133b4:	4603      	mov	r3, r0
 80133b6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80133b8:	69fa      	ldr	r2, [r7, #28]
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d004      	beq.n	80133ca <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 80133c0:	69f8      	ldr	r0, [r7, #28]
 80133c2:	f7f9 fe33 	bl	800d02c <pbuf_free>
    q = NULL;
 80133c6:	2300      	movs	r3, #0
 80133c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80133ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3720      	adds	r7, #32
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	08019e10 	.word	0x08019e10
 80133dc:	0801a0f4 	.word	0x0801a0f4
 80133e0:	08019e64 	.word	0x08019e64
 80133e4:	0801a114 	.word	0x0801a114
 80133e8:	0801a134 	.word	0x0801a134
 80133ec:	0801a158 	.word	0x0801a158
 80133f0:	0801a17c 	.word	0x0801a17c
 80133f4:	0801a1a0 	.word	0x0801a1a0
 80133f8:	0801a1d0 	.word	0x0801a1d0
 80133fc:	0801a1f4 	.word	0x0801a1f4
 8013400:	0801a218 	.word	0x0801a218
 8013404:	0801a250 	.word	0x0801a250
 8013408:	0801a27c 	.word	0x0801a27c
 801340c:	0801a2ac 	.word	0x0801a2ac
 8013410:	0801a2d8 	.word	0x0801a2d8
 8013414:	0801a2fc 	.word	0x0801a2fc
 8013418:	0801a31c 	.word	0x0801a31c

0801341c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b088      	sub	sp, #32
 8013420:	af02      	add	r7, sp, #8
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	60b9      	str	r1, [r7, #8]
 8013426:	4613      	mov	r3, r2
 8013428:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d101      	bne.n	8013434 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013430:	4b65      	ldr	r3, [pc, #404]	@ (80135c8 <udp_bind+0x1ac>)
 8013432:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d109      	bne.n	801344e <udp_bind+0x32>
 801343a:	4b64      	ldr	r3, [pc, #400]	@ (80135cc <udp_bind+0x1b0>)
 801343c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013440:	4963      	ldr	r1, [pc, #396]	@ (80135d0 <udp_bind+0x1b4>)
 8013442:	4864      	ldr	r0, [pc, #400]	@ (80135d4 <udp_bind+0x1b8>)
 8013444:	f003 fb78 	bl	8016b38 <iprintf>
 8013448:	f06f 030f 	mvn.w	r3, #15
 801344c:	e0b7      	b.n	80135be <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801344e:	4862      	ldr	r0, [pc, #392]	@ (80135d8 <udp_bind+0x1bc>)
 8013450:	f003 fb72 	bl	8016b38 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d003      	beq.n	8013462 <udp_bind+0x46>
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	4619      	mov	r1, r3
 8013460:	e000      	b.n	8013464 <udp_bind+0x48>
 8013462:	2100      	movs	r1, #0
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d004      	beq.n	8013474 <udp_bind+0x58>
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	3301      	adds	r3, #1
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	461a      	mov	r2, r3
 8013472:	e000      	b.n	8013476 <udp_bind+0x5a>
 8013474:	2200      	movs	r2, #0
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d004      	beq.n	8013486 <udp_bind+0x6a>
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	3302      	adds	r3, #2
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	4618      	mov	r0, r3
 8013484:	e000      	b.n	8013488 <udp_bind+0x6c>
 8013486:	2000      	movs	r0, #0
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d003      	beq.n	8013496 <udp_bind+0x7a>
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	3303      	adds	r3, #3
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	e000      	b.n	8013498 <udp_bind+0x7c>
 8013496:	2300      	movs	r3, #0
 8013498:	9300      	str	r3, [sp, #0]
 801349a:	4603      	mov	r3, r0
 801349c:	484f      	ldr	r0, [pc, #316]	@ (80135dc <udp_bind+0x1c0>)
 801349e:	f003 fb4b 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 80134a2:	88fb      	ldrh	r3, [r7, #6]
 80134a4:	4619      	mov	r1, r3
 80134a6:	484e      	ldr	r0, [pc, #312]	@ (80135e0 <udp_bind+0x1c4>)
 80134a8:	f003 fb46 	bl	8016b38 <iprintf>

  rebind = 0;
 80134ac:	2300      	movs	r3, #0
 80134ae:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80134b0:	4b4c      	ldr	r3, [pc, #304]	@ (80135e4 <udp_bind+0x1c8>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	617b      	str	r3, [r7, #20]
 80134b6:	e009      	b.n	80134cc <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80134b8:	68fa      	ldr	r2, [r7, #12]
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	429a      	cmp	r2, r3
 80134be:	d102      	bne.n	80134c6 <udp_bind+0xaa>
      rebind = 1;
 80134c0:	2301      	movs	r3, #1
 80134c2:	74fb      	strb	r3, [r7, #19]
      break;
 80134c4:	e005      	b.n	80134d2 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	68db      	ldr	r3, [r3, #12]
 80134ca:	617b      	str	r3, [r7, #20]
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d1f2      	bne.n	80134b8 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80134d2:	88fb      	ldrh	r3, [r7, #6]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d10c      	bne.n	80134f2 <udp_bind+0xd6>
    port = udp_new_port();
 80134d8:	f7ff fb14 	bl	8012b04 <udp_new_port>
 80134dc:	4603      	mov	r3, r0
 80134de:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80134e0:	88fb      	ldrh	r3, [r7, #6]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d134      	bne.n	8013550 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 80134e6:	4840      	ldr	r0, [pc, #256]	@ (80135e8 <udp_bind+0x1cc>)
 80134e8:	f003 fb96 	bl	8016c18 <puts>
      return ERR_USE;
 80134ec:	f06f 0307 	mvn.w	r3, #7
 80134f0:	e065      	b.n	80135be <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80134f2:	4b3c      	ldr	r3, [pc, #240]	@ (80135e4 <udp_bind+0x1c8>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	617b      	str	r3, [r7, #20]
 80134f8:	e027      	b.n	801354a <udp_bind+0x12e>
      if (pcb != ipcb) {
 80134fa:	68fa      	ldr	r2, [r7, #12]
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	429a      	cmp	r2, r3
 8013500:	d020      	beq.n	8013544 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	8a5b      	ldrh	r3, [r3, #18]
 8013506:	88fa      	ldrh	r2, [r7, #6]
 8013508:	429a      	cmp	r2, r3
 801350a:	d11b      	bne.n	8013544 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013514:	429a      	cmp	r2, r3
 8013516:	d00d      	beq.n	8013534 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d00a      	beq.n	8013534 <udp_bind+0x118>
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d006      	beq.n	8013534 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8013526:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013528:	2b00      	cmp	r3, #0
 801352a:	d003      	beq.n	8013534 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d107      	bne.n	8013544 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 8013534:	88fb      	ldrh	r3, [r7, #6]
 8013536:	4619      	mov	r1, r3
 8013538:	482c      	ldr	r0, [pc, #176]	@ (80135ec <udp_bind+0x1d0>)
 801353a:	f003 fafd 	bl	8016b38 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801353e:	f06f 0307 	mvn.w	r3, #7
 8013542:	e03c      	b.n	80135be <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	617b      	str	r3, [r7, #20]
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d1d4      	bne.n	80134fa <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d002      	beq.n	801355c <udp_bind+0x140>
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	e000      	b.n	801355e <udp_bind+0x142>
 801355c:	2300      	movs	r3, #0
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	88fa      	ldrh	r2, [r7, #6]
 8013566:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013568:	7cfb      	ldrb	r3, [r7, #19]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d106      	bne.n	801357c <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801356e:	4b1d      	ldr	r3, [pc, #116]	@ (80135e4 <udp_bind+0x1c8>)
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013576:	4a1b      	ldr	r2, [pc, #108]	@ (80135e4 <udp_bind+0x1c8>)
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801357c:	481c      	ldr	r0, [pc, #112]	@ (80135f0 <udp_bind+0x1d4>)
 801357e:	f003 fadb 	bl	8016b38 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	b2db      	uxtb	r3, r3
 8013588:	4619      	mov	r1, r3
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	0a1b      	lsrs	r3, r3, #8
 8013590:	b2db      	uxtb	r3, r3
 8013592:	461a      	mov	r2, r3
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	0c1b      	lsrs	r3, r3, #16
 801359a:	b2db      	uxtb	r3, r3
 801359c:	4618      	mov	r0, r3
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	0e1b      	lsrs	r3, r3, #24
 80135a4:	b2db      	uxtb	r3, r3
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	4603      	mov	r3, r0
 80135aa:	480c      	ldr	r0, [pc, #48]	@ (80135dc <udp_bind+0x1c0>)
 80135ac:	f003 fac4 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	8a5b      	ldrh	r3, [r3, #18]
 80135b4:	4619      	mov	r1, r3
 80135b6:	480f      	ldr	r0, [pc, #60]	@ (80135f4 <udp_bind+0x1d8>)
 80135b8:	f003 fabe 	bl	8016b38 <iprintf>
  return ERR_OK;
 80135bc:	2300      	movs	r3, #0
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3718      	adds	r7, #24
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
 80135c6:	bf00      	nop
 80135c8:	0801b1f0 	.word	0x0801b1f0
 80135cc:	08019e10 	.word	0x08019e10
 80135d0:	0801a344 	.word	0x0801a344
 80135d4:	08019e64 	.word	0x08019e64
 80135d8:	0801a35c 	.word	0x0801a35c
 80135dc:	08019f54 	.word	0x08019f54
 80135e0:	0801a370 	.word	0x0801a370
 80135e4:	20008464 	.word	0x20008464
 80135e8:	0801a380 	.word	0x0801a380
 80135ec:	0801a3a0 	.word	0x0801a3a0
 80135f0:	0801a3d8 	.word	0x0801a3d8
 80135f4:	0801a3ec 	.word	0x0801a3ec

080135f8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b084      	sub	sp, #16
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d107      	bne.n	801361a <udp_recv+0x22>
 801360a:	4b08      	ldr	r3, [pc, #32]	@ (801362c <udp_recv+0x34>)
 801360c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013610:	4907      	ldr	r1, [pc, #28]	@ (8013630 <udp_recv+0x38>)
 8013612:	4808      	ldr	r0, [pc, #32]	@ (8013634 <udp_recv+0x3c>)
 8013614:	f003 fa90 	bl	8016b38 <iprintf>
 8013618:	e005      	b.n	8013626 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	68ba      	ldr	r2, [r7, #8]
 801361e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	61da      	str	r2, [r3, #28]
}
 8013626:	3710      	adds	r7, #16
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	08019e10 	.word	0x08019e10
 8013630:	0801a46c 	.word	0x0801a46c
 8013634:	08019e64 	.word	0x08019e64

08013638 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b084      	sub	sp, #16
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d107      	bne.n	8013656 <udp_remove+0x1e>
 8013646:	4b19      	ldr	r3, [pc, #100]	@ (80136ac <udp_remove+0x74>)
 8013648:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801364c:	4918      	ldr	r1, [pc, #96]	@ (80136b0 <udp_remove+0x78>)
 801364e:	4819      	ldr	r0, [pc, #100]	@ (80136b4 <udp_remove+0x7c>)
 8013650:	f003 fa72 	bl	8016b38 <iprintf>
 8013654:	e026      	b.n	80136a4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013656:	4b18      	ldr	r3, [pc, #96]	@ (80136b8 <udp_remove+0x80>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	429a      	cmp	r2, r3
 801365e:	d105      	bne.n	801366c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013660:	4b15      	ldr	r3, [pc, #84]	@ (80136b8 <udp_remove+0x80>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	4a14      	ldr	r2, [pc, #80]	@ (80136b8 <udp_remove+0x80>)
 8013668:	6013      	str	r3, [r2, #0]
 801366a:	e017      	b.n	801369c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801366c:	4b12      	ldr	r3, [pc, #72]	@ (80136b8 <udp_remove+0x80>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	60fb      	str	r3, [r7, #12]
 8013672:	e010      	b.n	8013696 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	68db      	ldr	r3, [r3, #12]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d009      	beq.n	8013690 <udp_remove+0x58>
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	429a      	cmp	r2, r3
 8013684:	d104      	bne.n	8013690 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	68da      	ldr	r2, [r3, #12]
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	60da      	str	r2, [r3, #12]
        break;
 801368e:	e005      	b.n	801369c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	60fb      	str	r3, [r7, #12]
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d1eb      	bne.n	8013674 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801369c:	6879      	ldr	r1, [r7, #4]
 801369e:	2000      	movs	r0, #0
 80136a0:	f7f8 fd58 	bl	800c154 <memp_free>
}
 80136a4:	3710      	adds	r7, #16
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	08019e10 	.word	0x08019e10
 80136b0:	0801a484 	.word	0x0801a484
 80136b4:	08019e64 	.word	0x08019e64
 80136b8:	20008464 	.word	0x20008464

080136bc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80136c2:	2000      	movs	r0, #0
 80136c4:	f7f8 fcd6 	bl	800c074 <memp_malloc>
 80136c8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d007      	beq.n	80136e0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80136d0:	2220      	movs	r2, #32
 80136d2:	2100      	movs	r1, #0
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f003 fb8f 	bl	8016df8 <memset>
    pcb->ttl = UDP_TTL;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	22ff      	movs	r2, #255	@ 0xff
 80136de:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80136e0:	687b      	ldr	r3, [r7, #4]
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
	...

080136ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80136ec:	b480      	push	{r7}
 80136ee:	b085      	sub	sp, #20
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d01e      	beq.n	801373a <udp_netif_ip_addr_changed+0x4e>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d01a      	beq.n	801373a <udp_netif_ip_addr_changed+0x4e>
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d017      	beq.n	801373a <udp_netif_ip_addr_changed+0x4e>
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d013      	beq.n	801373a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013712:	4b0d      	ldr	r3, [pc, #52]	@ (8013748 <udp_netif_ip_addr_changed+0x5c>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	60fb      	str	r3, [r7, #12]
 8013718:	e00c      	b.n	8013734 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	429a      	cmp	r2, r3
 8013724:	d103      	bne.n	801372e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	68db      	ldr	r3, [r3, #12]
 8013732:	60fb      	str	r3, [r7, #12]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d1ef      	bne.n	801371a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801373a:	bf00      	nop
 801373c:	3714      	adds	r7, #20
 801373e:	46bd      	mov	sp, r7
 8013740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop
 8013748:	20008464 	.word	0x20008464

0801374c <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801374c:	b590      	push	{r4, r7, lr}
 801374e:	b083      	sub	sp, #12
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8013754:	481b      	ldr	r0, [pc, #108]	@ (80137c4 <udp_debug_print+0x78>)
 8013756:	f003 fa5f 	bl	8016c18 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801375a:	481b      	ldr	r0, [pc, #108]	@ (80137c8 <udp_debug_print+0x7c>)
 801375c:	f003 fa5c 	bl	8016c18 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	881b      	ldrh	r3, [r3, #0]
 8013764:	b29b      	uxth	r3, r3
 8013766:	4618      	mov	r0, r3
 8013768:	f7f8 f810 	bl	800b78c <lwip_htons>
 801376c:	4603      	mov	r3, r0
 801376e:	461c      	mov	r4, r3
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	885b      	ldrh	r3, [r3, #2]
 8013774:	b29b      	uxth	r3, r3
 8013776:	4618      	mov	r0, r3
 8013778:	f7f8 f808 	bl	800b78c <lwip_htons>
 801377c:	4603      	mov	r3, r0
 801377e:	461a      	mov	r2, r3
 8013780:	4621      	mov	r1, r4
 8013782:	4812      	ldr	r0, [pc, #72]	@ (80137cc <udp_debug_print+0x80>)
 8013784:	f003 f9d8 	bl	8016b38 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8013788:	480f      	ldr	r0, [pc, #60]	@ (80137c8 <udp_debug_print+0x7c>)
 801378a:	f003 fa45 	bl	8016c18 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	889b      	ldrh	r3, [r3, #4]
 8013792:	b29b      	uxth	r3, r3
 8013794:	4618      	mov	r0, r3
 8013796:	f7f7 fff9 	bl	800b78c <lwip_htons>
 801379a:	4603      	mov	r3, r0
 801379c:	461c      	mov	r4, r3
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	88db      	ldrh	r3, [r3, #6]
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7f7 fff1 	bl	800b78c <lwip_htons>
 80137aa:	4603      	mov	r3, r0
 80137ac:	461a      	mov	r2, r3
 80137ae:	4621      	mov	r1, r4
 80137b0:	4807      	ldr	r0, [pc, #28]	@ (80137d0 <udp_debug_print+0x84>)
 80137b2:	f003 f9c1 	bl	8016b38 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80137b6:	4804      	ldr	r0, [pc, #16]	@ (80137c8 <udp_debug_print+0x7c>)
 80137b8:	f003 fa2e 	bl	8016c18 <puts>
}
 80137bc:	bf00      	nop
 80137be:	370c      	adds	r7, #12
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd90      	pop	{r4, r7, pc}
 80137c4:	0801a49c 	.word	0x0801a49c
 80137c8:	0801a4a8 	.word	0x0801a4a8
 80137cc:	0801a4cc 	.word	0x0801a4cc
 80137d0:	0801a504 	.word	0x0801a504

080137d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80137dc:	492b      	ldr	r1, [pc, #172]	@ (801388c <etharp_free_entry+0xb8>)
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	4613      	mov	r3, r2
 80137e2:	005b      	lsls	r3, r3, #1
 80137e4:	4413      	add	r3, r2
 80137e6:	00db      	lsls	r3, r3, #3
 80137e8:	440b      	add	r3, r1
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d013      	beq.n	8013818 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80137f0:	4926      	ldr	r1, [pc, #152]	@ (801388c <etharp_free_entry+0xb8>)
 80137f2:	687a      	ldr	r2, [r7, #4]
 80137f4:	4613      	mov	r3, r2
 80137f6:	005b      	lsls	r3, r3, #1
 80137f8:	4413      	add	r3, r2
 80137fa:	00db      	lsls	r3, r3, #3
 80137fc:	440b      	add	r3, r1
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4618      	mov	r0, r3
 8013802:	f7f9 fc13 	bl	800d02c <pbuf_free>
    arp_table[i].q = NULL;
 8013806:	4921      	ldr	r1, [pc, #132]	@ (801388c <etharp_free_entry+0xb8>)
 8013808:	687a      	ldr	r2, [r7, #4]
 801380a:	4613      	mov	r3, r2
 801380c:	005b      	lsls	r3, r3, #1
 801380e:	4413      	add	r3, r2
 8013810:	00db      	lsls	r3, r3, #3
 8013812:	440b      	add	r3, r1
 8013814:	2200      	movs	r2, #0
 8013816:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013818:	491c      	ldr	r1, [pc, #112]	@ (801388c <etharp_free_entry+0xb8>)
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	4613      	mov	r3, r2
 801381e:	005b      	lsls	r3, r3, #1
 8013820:	4413      	add	r3, r2
 8013822:	00db      	lsls	r3, r3, #3
 8013824:	440b      	add	r3, r1
 8013826:	3314      	adds	r3, #20
 8013828:	2200      	movs	r2, #0
 801382a:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801382c:	4917      	ldr	r1, [pc, #92]	@ (801388c <etharp_free_entry+0xb8>)
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	4613      	mov	r3, r2
 8013832:	005b      	lsls	r3, r3, #1
 8013834:	4413      	add	r3, r2
 8013836:	00db      	lsls	r3, r3, #3
 8013838:	440b      	add	r3, r1
 801383a:	3312      	adds	r3, #18
 801383c:	2200      	movs	r2, #0
 801383e:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8013840:	4912      	ldr	r1, [pc, #72]	@ (801388c <etharp_free_entry+0xb8>)
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	4613      	mov	r3, r2
 8013846:	005b      	lsls	r3, r3, #1
 8013848:	4413      	add	r3, r2
 801384a:	00db      	lsls	r3, r3, #3
 801384c:	440b      	add	r3, r1
 801384e:	3308      	adds	r3, #8
 8013850:	2200      	movs	r2, #0
 8013852:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8013854:	490d      	ldr	r1, [pc, #52]	@ (801388c <etharp_free_entry+0xb8>)
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	4613      	mov	r3, r2
 801385a:	005b      	lsls	r3, r3, #1
 801385c:	4413      	add	r3, r2
 801385e:	00db      	lsls	r3, r3, #3
 8013860:	440b      	add	r3, r1
 8013862:	3304      	adds	r3, #4
 8013864:	2200      	movs	r2, #0
 8013866:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8013868:	4908      	ldr	r1, [pc, #32]	@ (801388c <etharp_free_entry+0xb8>)
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	4613      	mov	r3, r2
 801386e:	005b      	lsls	r3, r3, #1
 8013870:	4413      	add	r3, r2
 8013872:	00db      	lsls	r3, r3, #3
 8013874:	440b      	add	r3, r1
 8013876:	3308      	adds	r3, #8
 8013878:	4a05      	ldr	r2, [pc, #20]	@ (8013890 <etharp_free_entry+0xbc>)
 801387a:	3304      	adds	r3, #4
 801387c:	6810      	ldr	r0, [r2, #0]
 801387e:	6018      	str	r0, [r3, #0]
 8013880:	8892      	ldrh	r2, [r2, #4]
 8013882:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8013884:	bf00      	nop
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	20008468 	.word	0x20008468
 8013890:	0801b1fc 	.word	0x0801b1fc

08013894 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b082      	sub	sp, #8
 8013898:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801389a:	2300      	movs	r3, #0
 801389c:	607b      	str	r3, [r7, #4]
 801389e:	e096      	b.n	80139ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80138a0:	494f      	ldr	r1, [pc, #316]	@ (80139e0 <etharp_tmr+0x14c>)
 80138a2:	687a      	ldr	r2, [r7, #4]
 80138a4:	4613      	mov	r3, r2
 80138a6:	005b      	lsls	r3, r3, #1
 80138a8:	4413      	add	r3, r2
 80138aa:	00db      	lsls	r3, r3, #3
 80138ac:	440b      	add	r3, r1
 80138ae:	3314      	adds	r3, #20
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80138b4:	78fb      	ldrb	r3, [r7, #3]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	f000 8086 	beq.w	80139c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80138bc:	4948      	ldr	r1, [pc, #288]	@ (80139e0 <etharp_tmr+0x14c>)
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	4613      	mov	r3, r2
 80138c2:	005b      	lsls	r3, r3, #1
 80138c4:	4413      	add	r3, r2
 80138c6:	00db      	lsls	r3, r3, #3
 80138c8:	440b      	add	r3, r1
 80138ca:	3312      	adds	r3, #18
 80138cc:	881b      	ldrh	r3, [r3, #0]
 80138ce:	3301      	adds	r3, #1
 80138d0:	b298      	uxth	r0, r3
 80138d2:	4943      	ldr	r1, [pc, #268]	@ (80139e0 <etharp_tmr+0x14c>)
 80138d4:	687a      	ldr	r2, [r7, #4]
 80138d6:	4613      	mov	r3, r2
 80138d8:	005b      	lsls	r3, r3, #1
 80138da:	4413      	add	r3, r2
 80138dc:	00db      	lsls	r3, r3, #3
 80138de:	440b      	add	r3, r1
 80138e0:	3312      	adds	r3, #18
 80138e2:	4602      	mov	r2, r0
 80138e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80138e6:	493e      	ldr	r1, [pc, #248]	@ (80139e0 <etharp_tmr+0x14c>)
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	4613      	mov	r3, r2
 80138ec:	005b      	lsls	r3, r3, #1
 80138ee:	4413      	add	r3, r2
 80138f0:	00db      	lsls	r3, r3, #3
 80138f2:	440b      	add	r3, r1
 80138f4:	3312      	adds	r3, #18
 80138f6:	881b      	ldrh	r3, [r3, #0]
 80138f8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80138fc:	d215      	bcs.n	801392a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80138fe:	4938      	ldr	r1, [pc, #224]	@ (80139e0 <etharp_tmr+0x14c>)
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	4613      	mov	r3, r2
 8013904:	005b      	lsls	r3, r3, #1
 8013906:	4413      	add	r3, r2
 8013908:	00db      	lsls	r3, r3, #3
 801390a:	440b      	add	r3, r1
 801390c:	3314      	adds	r3, #20
 801390e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013910:	2b01      	cmp	r3, #1
 8013912:	d10e      	bne.n	8013932 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013914:	4932      	ldr	r1, [pc, #200]	@ (80139e0 <etharp_tmr+0x14c>)
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	4613      	mov	r3, r2
 801391a:	005b      	lsls	r3, r3, #1
 801391c:	4413      	add	r3, r2
 801391e:	00db      	lsls	r3, r3, #3
 8013920:	440b      	add	r3, r1
 8013922:	3312      	adds	r3, #18
 8013924:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013926:	2b04      	cmp	r3, #4
 8013928:	d903      	bls.n	8013932 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff ff52 	bl	80137d4 <etharp_free_entry>
 8013930:	e04a      	b.n	80139c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013932:	492b      	ldr	r1, [pc, #172]	@ (80139e0 <etharp_tmr+0x14c>)
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	4613      	mov	r3, r2
 8013938:	005b      	lsls	r3, r3, #1
 801393a:	4413      	add	r3, r2
 801393c:	00db      	lsls	r3, r3, #3
 801393e:	440b      	add	r3, r1
 8013940:	3314      	adds	r3, #20
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	2b03      	cmp	r3, #3
 8013946:	d10a      	bne.n	801395e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013948:	4925      	ldr	r1, [pc, #148]	@ (80139e0 <etharp_tmr+0x14c>)
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	4613      	mov	r3, r2
 801394e:	005b      	lsls	r3, r3, #1
 8013950:	4413      	add	r3, r2
 8013952:	00db      	lsls	r3, r3, #3
 8013954:	440b      	add	r3, r1
 8013956:	3314      	adds	r3, #20
 8013958:	2204      	movs	r2, #4
 801395a:	701a      	strb	r2, [r3, #0]
 801395c:	e034      	b.n	80139c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801395e:	4920      	ldr	r1, [pc, #128]	@ (80139e0 <etharp_tmr+0x14c>)
 8013960:	687a      	ldr	r2, [r7, #4]
 8013962:	4613      	mov	r3, r2
 8013964:	005b      	lsls	r3, r3, #1
 8013966:	4413      	add	r3, r2
 8013968:	00db      	lsls	r3, r3, #3
 801396a:	440b      	add	r3, r1
 801396c:	3314      	adds	r3, #20
 801396e:	781b      	ldrb	r3, [r3, #0]
 8013970:	2b04      	cmp	r3, #4
 8013972:	d10a      	bne.n	801398a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013974:	491a      	ldr	r1, [pc, #104]	@ (80139e0 <etharp_tmr+0x14c>)
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	4613      	mov	r3, r2
 801397a:	005b      	lsls	r3, r3, #1
 801397c:	4413      	add	r3, r2
 801397e:	00db      	lsls	r3, r3, #3
 8013980:	440b      	add	r3, r1
 8013982:	3314      	adds	r3, #20
 8013984:	2202      	movs	r2, #2
 8013986:	701a      	strb	r2, [r3, #0]
 8013988:	e01e      	b.n	80139c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801398a:	4915      	ldr	r1, [pc, #84]	@ (80139e0 <etharp_tmr+0x14c>)
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	4613      	mov	r3, r2
 8013990:	005b      	lsls	r3, r3, #1
 8013992:	4413      	add	r3, r2
 8013994:	00db      	lsls	r3, r3, #3
 8013996:	440b      	add	r3, r1
 8013998:	3314      	adds	r3, #20
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	2b01      	cmp	r3, #1
 801399e:	d113      	bne.n	80139c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80139a0:	490f      	ldr	r1, [pc, #60]	@ (80139e0 <etharp_tmr+0x14c>)
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	4613      	mov	r3, r2
 80139a6:	005b      	lsls	r3, r3, #1
 80139a8:	4413      	add	r3, r2
 80139aa:	00db      	lsls	r3, r3, #3
 80139ac:	440b      	add	r3, r1
 80139ae:	3308      	adds	r3, #8
 80139b0:	6818      	ldr	r0, [r3, #0]
 80139b2:	687a      	ldr	r2, [r7, #4]
 80139b4:	4613      	mov	r3, r2
 80139b6:	005b      	lsls	r3, r3, #1
 80139b8:	4413      	add	r3, r2
 80139ba:	00db      	lsls	r3, r3, #3
 80139bc:	4a08      	ldr	r2, [pc, #32]	@ (80139e0 <etharp_tmr+0x14c>)
 80139be:	4413      	add	r3, r2
 80139c0:	3304      	adds	r3, #4
 80139c2:	4619      	mov	r1, r3
 80139c4:	f000 fe6e 	bl	80146a4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	3301      	adds	r3, #1
 80139cc:	607b      	str	r3, [r7, #4]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2b09      	cmp	r3, #9
 80139d2:	f77f af65 	ble.w	80138a0 <etharp_tmr+0xc>
      }
    }
  }
}
 80139d6:	bf00      	nop
 80139d8:	bf00      	nop
 80139da:	3708      	adds	r7, #8
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	20008468 	.word	0x20008468

080139e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b08a      	sub	sp, #40	@ 0x28
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	60f8      	str	r0, [r7, #12]
 80139ec:	460b      	mov	r3, r1
 80139ee:	607a      	str	r2, [r7, #4]
 80139f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80139f2:	230a      	movs	r3, #10
 80139f4:	843b      	strh	r3, [r7, #32]
 80139f6:	230a      	movs	r3, #10
 80139f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 80139fa:	230a      	movs	r3, #10
 80139fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013a02:	230a      	movs	r3, #10
 8013a04:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	83bb      	strh	r3, [r7, #28]
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	837b      	strh	r3, [r7, #26]
 8013a0e:	2300      	movs	r3, #0
 8013a10:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a12:	2300      	movs	r3, #0
 8013a14:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013a16:	e0ae      	b.n	8013b76 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013a18:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013a1c:	49a6      	ldr	r1, [pc, #664]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013a1e:	4613      	mov	r3, r2
 8013a20:	005b      	lsls	r3, r3, #1
 8013a22:	4413      	add	r3, r2
 8013a24:	00db      	lsls	r3, r3, #3
 8013a26:	440b      	add	r3, r1
 8013a28:	3314      	adds	r3, #20
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013a2e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013a32:	2b0a      	cmp	r3, #10
 8013a34:	d105      	bne.n	8013a42 <etharp_find_entry+0x5e>
 8013a36:	7dfb      	ldrb	r3, [r7, #23]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d102      	bne.n	8013a42 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013a3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013a3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013a40:	e095      	b.n	8013b6e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013a42:	7dfb      	ldrb	r3, [r7, #23]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f000 8092 	beq.w	8013b6e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013a4a:	7dfb      	ldrb	r3, [r7, #23]
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	d009      	beq.n	8013a64 <etharp_find_entry+0x80>
 8013a50:	7dfb      	ldrb	r3, [r7, #23]
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d806      	bhi.n	8013a64 <etharp_find_entry+0x80>
 8013a56:	4b99      	ldr	r3, [pc, #612]	@ (8013cbc <etharp_find_entry+0x2d8>)
 8013a58:	f240 1223 	movw	r2, #291	@ 0x123
 8013a5c:	4998      	ldr	r1, [pc, #608]	@ (8013cc0 <etharp_find_entry+0x2dc>)
 8013a5e:	4899      	ldr	r0, [pc, #612]	@ (8013cc4 <etharp_find_entry+0x2e0>)
 8013a60:	f003 f86a 	bl	8016b38 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d020      	beq.n	8013aac <etharp_find_entry+0xc8>
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	6819      	ldr	r1, [r3, #0]
 8013a6e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013a72:	4891      	ldr	r0, [pc, #580]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013a74:	4613      	mov	r3, r2
 8013a76:	005b      	lsls	r3, r3, #1
 8013a78:	4413      	add	r3, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	4403      	add	r3, r0
 8013a7e:	3304      	adds	r3, #4
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4299      	cmp	r1, r3
 8013a84:	d112      	bne.n	8013aac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00c      	beq.n	8013aa6 <etharp_find_entry+0xc2>
 8013a8c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013a90:	4989      	ldr	r1, [pc, #548]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013a92:	4613      	mov	r3, r2
 8013a94:	005b      	lsls	r3, r3, #1
 8013a96:	4413      	add	r3, r2
 8013a98:	00db      	lsls	r3, r3, #3
 8013a9a:	440b      	add	r3, r1
 8013a9c:	3308      	adds	r3, #8
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d102      	bne.n	8013aac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013aa6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013aaa:	e100      	b.n	8013cae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013aac:	7dfb      	ldrb	r3, [r7, #23]
 8013aae:	2b01      	cmp	r3, #1
 8013ab0:	d140      	bne.n	8013b34 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013ab2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013ab6:	4980      	ldr	r1, [pc, #512]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013ab8:	4613      	mov	r3, r2
 8013aba:	005b      	lsls	r3, r3, #1
 8013abc:	4413      	add	r3, r2
 8013abe:	00db      	lsls	r3, r3, #3
 8013ac0:	440b      	add	r3, r1
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d01a      	beq.n	8013afe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013ac8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013acc:	497a      	ldr	r1, [pc, #488]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013ace:	4613      	mov	r3, r2
 8013ad0:	005b      	lsls	r3, r3, #1
 8013ad2:	4413      	add	r3, r2
 8013ad4:	00db      	lsls	r3, r3, #3
 8013ad6:	440b      	add	r3, r1
 8013ad8:	3312      	adds	r3, #18
 8013ada:	881b      	ldrh	r3, [r3, #0]
 8013adc:	8bba      	ldrh	r2, [r7, #28]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d845      	bhi.n	8013b6e <etharp_find_entry+0x18a>
            old_queue = i;
 8013ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013ae4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013ae6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013aea:	4973      	ldr	r1, [pc, #460]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013aec:	4613      	mov	r3, r2
 8013aee:	005b      	lsls	r3, r3, #1
 8013af0:	4413      	add	r3, r2
 8013af2:	00db      	lsls	r3, r3, #3
 8013af4:	440b      	add	r3, r1
 8013af6:	3312      	adds	r3, #18
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	83bb      	strh	r3, [r7, #28]
 8013afc:	e037      	b.n	8013b6e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013afe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013b02:	496d      	ldr	r1, [pc, #436]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013b04:	4613      	mov	r3, r2
 8013b06:	005b      	lsls	r3, r3, #1
 8013b08:	4413      	add	r3, r2
 8013b0a:	00db      	lsls	r3, r3, #3
 8013b0c:	440b      	add	r3, r1
 8013b0e:	3312      	adds	r3, #18
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	8b7a      	ldrh	r2, [r7, #26]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d82a      	bhi.n	8013b6e <etharp_find_entry+0x18a>
            old_pending = i;
 8013b18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013b1a:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8013b1c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013b20:	4965      	ldr	r1, [pc, #404]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013b22:	4613      	mov	r3, r2
 8013b24:	005b      	lsls	r3, r3, #1
 8013b26:	4413      	add	r3, r2
 8013b28:	00db      	lsls	r3, r3, #3
 8013b2a:	440b      	add	r3, r1
 8013b2c:	3312      	adds	r3, #18
 8013b2e:	881b      	ldrh	r3, [r3, #0]
 8013b30:	837b      	strh	r3, [r7, #26]
 8013b32:	e01c      	b.n	8013b6e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013b34:	7dfb      	ldrb	r3, [r7, #23]
 8013b36:	2b01      	cmp	r3, #1
 8013b38:	d919      	bls.n	8013b6e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013b3a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013b3e:	495e      	ldr	r1, [pc, #376]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013b40:	4613      	mov	r3, r2
 8013b42:	005b      	lsls	r3, r3, #1
 8013b44:	4413      	add	r3, r2
 8013b46:	00db      	lsls	r3, r3, #3
 8013b48:	440b      	add	r3, r1
 8013b4a:	3312      	adds	r3, #18
 8013b4c:	881b      	ldrh	r3, [r3, #0]
 8013b4e:	8b3a      	ldrh	r2, [r7, #24]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d80c      	bhi.n	8013b6e <etharp_find_entry+0x18a>
            old_stable = i;
 8013b54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013b56:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8013b58:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013b5c:	4956      	ldr	r1, [pc, #344]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013b5e:	4613      	mov	r3, r2
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	4413      	add	r3, r2
 8013b64:	00db      	lsls	r3, r3, #3
 8013b66:	440b      	add	r3, r1
 8013b68:	3312      	adds	r3, #18
 8013b6a:	881b      	ldrh	r3, [r3, #0]
 8013b6c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013b70:	3301      	adds	r3, #1
 8013b72:	b29b      	uxth	r3, r3
 8013b74:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013b76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013b7a:	2b09      	cmp	r3, #9
 8013b7c:	f77f af4c 	ble.w	8013a18 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013b80:	7afb      	ldrb	r3, [r7, #11]
 8013b82:	f003 0302 	and.w	r3, r3, #2
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d108      	bne.n	8013b9c <etharp_find_entry+0x1b8>
 8013b8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013b8e:	2b0a      	cmp	r3, #10
 8013b90:	d107      	bne.n	8013ba2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013b92:	7afb      	ldrb	r3, [r7, #11]
 8013b94:	f003 0301 	and.w	r3, r3, #1
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d102      	bne.n	8013ba2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013ba0:	e085      	b.n	8013cae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013ba2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013ba6:	2b09      	cmp	r3, #9
 8013ba8:	dc02      	bgt.n	8013bb0 <etharp_find_entry+0x1cc>
    i = empty;
 8013baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013bae:	e039      	b.n	8013c24 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013bb0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013bb4:	2b09      	cmp	r3, #9
 8013bb6:	dc14      	bgt.n	8013be2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013bb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bba:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013bbc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013bc0:	493d      	ldr	r1, [pc, #244]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	005b      	lsls	r3, r3, #1
 8013bc6:	4413      	add	r3, r2
 8013bc8:	00db      	lsls	r3, r3, #3
 8013bca:	440b      	add	r3, r1
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d018      	beq.n	8013c04 <etharp_find_entry+0x220>
 8013bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8013cbc <etharp_find_entry+0x2d8>)
 8013bd4:	f240 126d 	movw	r2, #365	@ 0x16d
 8013bd8:	493b      	ldr	r1, [pc, #236]	@ (8013cc8 <etharp_find_entry+0x2e4>)
 8013bda:	483a      	ldr	r0, [pc, #232]	@ (8013cc4 <etharp_find_entry+0x2e0>)
 8013bdc:	f002 ffac 	bl	8016b38 <iprintf>
 8013be0:	e010      	b.n	8013c04 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013be2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013be6:	2b09      	cmp	r3, #9
 8013be8:	dc02      	bgt.n	8013bf0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013bea:	8c3b      	ldrh	r3, [r7, #32]
 8013bec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013bee:	e009      	b.n	8013c04 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013bf0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013bf4:	2b09      	cmp	r3, #9
 8013bf6:	dc02      	bgt.n	8013bfe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013bf8:	8bfb      	ldrh	r3, [r7, #30]
 8013bfa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013bfc:	e002      	b.n	8013c04 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013bfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c02:	e054      	b.n	8013cae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013c04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013c08:	2b09      	cmp	r3, #9
 8013c0a:	dd06      	ble.n	8013c1a <etharp_find_entry+0x236>
 8013c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8013cbc <etharp_find_entry+0x2d8>)
 8013c0e:	f240 127f 	movw	r2, #383	@ 0x17f
 8013c12:	492e      	ldr	r1, [pc, #184]	@ (8013ccc <etharp_find_entry+0x2e8>)
 8013c14:	482b      	ldr	r0, [pc, #172]	@ (8013cc4 <etharp_find_entry+0x2e0>)
 8013c16:	f002 ff8f 	bl	8016b38 <iprintf>
    etharp_free_entry(i);
 8013c1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7ff fdd8 	bl	80137d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013c24:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013c28:	2b09      	cmp	r3, #9
 8013c2a:	dd06      	ble.n	8013c3a <etharp_find_entry+0x256>
 8013c2c:	4b23      	ldr	r3, [pc, #140]	@ (8013cbc <etharp_find_entry+0x2d8>)
 8013c2e:	f240 1283 	movw	r2, #387	@ 0x183
 8013c32:	4926      	ldr	r1, [pc, #152]	@ (8013ccc <etharp_find_entry+0x2e8>)
 8013c34:	4823      	ldr	r0, [pc, #140]	@ (8013cc4 <etharp_find_entry+0x2e0>)
 8013c36:	f002 ff7f 	bl	8016b38 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013c3a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013c3e:	491e      	ldr	r1, [pc, #120]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013c40:	4613      	mov	r3, r2
 8013c42:	005b      	lsls	r3, r3, #1
 8013c44:	4413      	add	r3, r2
 8013c46:	00db      	lsls	r3, r3, #3
 8013c48:	440b      	add	r3, r1
 8013c4a:	3314      	adds	r3, #20
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d006      	beq.n	8013c60 <etharp_find_entry+0x27c>
 8013c52:	4b1a      	ldr	r3, [pc, #104]	@ (8013cbc <etharp_find_entry+0x2d8>)
 8013c54:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013c58:	491d      	ldr	r1, [pc, #116]	@ (8013cd0 <etharp_find_entry+0x2ec>)
 8013c5a:	481a      	ldr	r0, [pc, #104]	@ (8013cc4 <etharp_find_entry+0x2e0>)
 8013c5c:	f002 ff6c 	bl	8016b38 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d00b      	beq.n	8013c7e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013c66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	6819      	ldr	r1, [r3, #0]
 8013c6e:	4812      	ldr	r0, [pc, #72]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013c70:	4613      	mov	r3, r2
 8013c72:	005b      	lsls	r3, r3, #1
 8013c74:	4413      	add	r3, r2
 8013c76:	00db      	lsls	r3, r3, #3
 8013c78:	4403      	add	r3, r0
 8013c7a:	3304      	adds	r3, #4
 8013c7c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013c7e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013c82:	490d      	ldr	r1, [pc, #52]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013c84:	4613      	mov	r3, r2
 8013c86:	005b      	lsls	r3, r3, #1
 8013c88:	4413      	add	r3, r2
 8013c8a:	00db      	lsls	r3, r3, #3
 8013c8c:	440b      	add	r3, r1
 8013c8e:	3312      	adds	r3, #18
 8013c90:	2200      	movs	r2, #0
 8013c92:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013c94:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013c98:	4907      	ldr	r1, [pc, #28]	@ (8013cb8 <etharp_find_entry+0x2d4>)
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	005b      	lsls	r3, r3, #1
 8013c9e:	4413      	add	r3, r2
 8013ca0:	00db      	lsls	r3, r3, #3
 8013ca2:	440b      	add	r3, r1
 8013ca4:	3308      	adds	r3, #8
 8013ca6:	687a      	ldr	r2, [r7, #4]
 8013ca8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013caa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3728      	adds	r7, #40	@ 0x28
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	20008468 	.word	0x20008468
 8013cbc:	0801a538 	.word	0x0801a538
 8013cc0:	0801a570 	.word	0x0801a570
 8013cc4:	0801a5b0 	.word	0x0801a5b0
 8013cc8:	0801a5d8 	.word	0x0801a5d8
 8013ccc:	0801a5f0 	.word	0x0801a5f0
 8013cd0:	0801a604 	.word	0x0801a604

08013cd4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b088      	sub	sp, #32
 8013cd8:	af02      	add	r7, sp, #8
 8013cda:	60f8      	str	r0, [r7, #12]
 8013cdc:	60b9      	str	r1, [r7, #8]
 8013cde:	607a      	str	r2, [r7, #4]
 8013ce0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013ce8:	2b06      	cmp	r3, #6
 8013cea:	d006      	beq.n	8013cfa <etharp_update_arp_entry+0x26>
 8013cec:	4b48      	ldr	r3, [pc, #288]	@ (8013e10 <etharp_update_arp_entry+0x13c>)
 8013cee:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013cf2:	4948      	ldr	r1, [pc, #288]	@ (8013e14 <etharp_update_arp_entry+0x140>)
 8013cf4:	4848      	ldr	r0, [pc, #288]	@ (8013e18 <etharp_update_arp_entry+0x144>)
 8013cf6:	f002 ff1f 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d012      	beq.n	8013d26 <etharp_update_arp_entry+0x52>
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00e      	beq.n	8013d26 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	68f9      	ldr	r1, [r7, #12]
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f001 f990 	bl	8015034 <ip4_addr_isbroadcast_u32>
 8013d14:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d105      	bne.n	8013d26 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013d22:	2be0      	cmp	r3, #224	@ 0xe0
 8013d24:	d102      	bne.n	8013d2c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013d26:	f06f 030f 	mvn.w	r3, #15
 8013d2a:	e06c      	b.n	8013e06 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013d2c:	78fb      	ldrb	r3, [r7, #3]
 8013d2e:	68fa      	ldr	r2, [r7, #12]
 8013d30:	4619      	mov	r1, r3
 8013d32:	68b8      	ldr	r0, [r7, #8]
 8013d34:	f7ff fe56 	bl	80139e4 <etharp_find_entry>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013d3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	da02      	bge.n	8013d4a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013d44:	8afb      	ldrh	r3, [r7, #22]
 8013d46:	b25b      	sxtb	r3, r3
 8013d48:	e05d      	b.n	8013e06 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013d4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d4e:	4933      	ldr	r1, [pc, #204]	@ (8013e1c <etharp_update_arp_entry+0x148>)
 8013d50:	4613      	mov	r3, r2
 8013d52:	005b      	lsls	r3, r3, #1
 8013d54:	4413      	add	r3, r2
 8013d56:	00db      	lsls	r3, r3, #3
 8013d58:	440b      	add	r3, r1
 8013d5a:	3314      	adds	r3, #20
 8013d5c:	2202      	movs	r2, #2
 8013d5e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013d60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d64:	492d      	ldr	r1, [pc, #180]	@ (8013e1c <etharp_update_arp_entry+0x148>)
 8013d66:	4613      	mov	r3, r2
 8013d68:	005b      	lsls	r3, r3, #1
 8013d6a:	4413      	add	r3, r2
 8013d6c:	00db      	lsls	r3, r3, #3
 8013d6e:	440b      	add	r3, r1
 8013d70:	3308      	adds	r3, #8
 8013d72:	68fa      	ldr	r2, [r7, #12]
 8013d74:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013d76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d7a:	4613      	mov	r3, r2
 8013d7c:	005b      	lsls	r3, r3, #1
 8013d7e:	4413      	add	r3, r2
 8013d80:	00db      	lsls	r3, r3, #3
 8013d82:	3308      	adds	r3, #8
 8013d84:	4a25      	ldr	r2, [pc, #148]	@ (8013e1c <etharp_update_arp_entry+0x148>)
 8013d86:	4413      	add	r3, r2
 8013d88:	3304      	adds	r3, #4
 8013d8a:	2206      	movs	r2, #6
 8013d8c:	6879      	ldr	r1, [r7, #4]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f003 f8a7 	bl	8016ee2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013d94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d98:	4920      	ldr	r1, [pc, #128]	@ (8013e1c <etharp_update_arp_entry+0x148>)
 8013d9a:	4613      	mov	r3, r2
 8013d9c:	005b      	lsls	r3, r3, #1
 8013d9e:	4413      	add	r3, r2
 8013da0:	00db      	lsls	r3, r3, #3
 8013da2:	440b      	add	r3, r1
 8013da4:	3312      	adds	r3, #18
 8013da6:	2200      	movs	r2, #0
 8013da8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013daa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013dae:	491b      	ldr	r1, [pc, #108]	@ (8013e1c <etharp_update_arp_entry+0x148>)
 8013db0:	4613      	mov	r3, r2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	440b      	add	r3, r1
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d021      	beq.n	8013e04 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013dc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013dc4:	4915      	ldr	r1, [pc, #84]	@ (8013e1c <etharp_update_arp_entry+0x148>)
 8013dc6:	4613      	mov	r3, r2
 8013dc8:	005b      	lsls	r3, r3, #1
 8013dca:	4413      	add	r3, r2
 8013dcc:	00db      	lsls	r3, r3, #3
 8013dce:	440b      	add	r3, r1
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013dd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013dd8:	4910      	ldr	r1, [pc, #64]	@ (8013e1c <etharp_update_arp_entry+0x148>)
 8013dda:	4613      	mov	r3, r2
 8013ddc:	005b      	lsls	r3, r3, #1
 8013dde:	4413      	add	r3, r2
 8013de0:	00db      	lsls	r3, r3, #3
 8013de2:	440b      	add	r3, r1
 8013de4:	2200      	movs	r2, #0
 8013de6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013dee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013df2:	9300      	str	r3, [sp, #0]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6939      	ldr	r1, [r7, #16]
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f002 f829 	bl	8015e50 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013dfe:	6938      	ldr	r0, [r7, #16]
 8013e00:	f7f9 f914 	bl	800d02c <pbuf_free>
  }
  return ERR_OK;
 8013e04:	2300      	movs	r3, #0
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3718      	adds	r7, #24
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	0801a538 	.word	0x0801a538
 8013e14:	0801a630 	.word	0x0801a630
 8013e18:	0801a5b0 	.word	0x0801a5b0
 8013e1c:	20008468 	.word	0x20008468

08013e20 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e28:	2300      	movs	r3, #0
 8013e2a:	60fb      	str	r3, [r7, #12]
 8013e2c:	e01e      	b.n	8013e6c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013e2e:	4913      	ldr	r1, [pc, #76]	@ (8013e7c <etharp_cleanup_netif+0x5c>)
 8013e30:	68fa      	ldr	r2, [r7, #12]
 8013e32:	4613      	mov	r3, r2
 8013e34:	005b      	lsls	r3, r3, #1
 8013e36:	4413      	add	r3, r2
 8013e38:	00db      	lsls	r3, r3, #3
 8013e3a:	440b      	add	r3, r1
 8013e3c:	3314      	adds	r3, #20
 8013e3e:	781b      	ldrb	r3, [r3, #0]
 8013e40:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013e42:	7afb      	ldrb	r3, [r7, #11]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d00e      	beq.n	8013e66 <etharp_cleanup_netif+0x46>
 8013e48:	490c      	ldr	r1, [pc, #48]	@ (8013e7c <etharp_cleanup_netif+0x5c>)
 8013e4a:	68fa      	ldr	r2, [r7, #12]
 8013e4c:	4613      	mov	r3, r2
 8013e4e:	005b      	lsls	r3, r3, #1
 8013e50:	4413      	add	r3, r2
 8013e52:	00db      	lsls	r3, r3, #3
 8013e54:	440b      	add	r3, r1
 8013e56:	3308      	adds	r3, #8
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d102      	bne.n	8013e66 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013e60:	68f8      	ldr	r0, [r7, #12]
 8013e62:	f7ff fcb7 	bl	80137d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	60fb      	str	r3, [r7, #12]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	2b09      	cmp	r3, #9
 8013e70:	dddd      	ble.n	8013e2e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013e72:	bf00      	nop
 8013e74:	bf00      	nop
 8013e76:	3710      	adds	r7, #16
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}
 8013e7c:	20008468 	.word	0x20008468

08013e80 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013e80:	b5b0      	push	{r4, r5, r7, lr}
 8013e82:	b08a      	sub	sp, #40	@ 0x28
 8013e84:	af04      	add	r7, sp, #16
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d107      	bne.n	8013ea0 <etharp_input+0x20>
 8013e90:	4b3d      	ldr	r3, [pc, #244]	@ (8013f88 <etharp_input+0x108>)
 8013e92:	f240 228a 	movw	r2, #650	@ 0x28a
 8013e96:	493d      	ldr	r1, [pc, #244]	@ (8013f8c <etharp_input+0x10c>)
 8013e98:	483d      	ldr	r0, [pc, #244]	@ (8013f90 <etharp_input+0x110>)
 8013e9a:	f002 fe4d 	bl	8016b38 <iprintf>
 8013e9e:	e06f      	b.n	8013f80 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	881b      	ldrh	r3, [r3, #0]
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013eb0:	d10c      	bne.n	8013ecc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013eb6:	2b06      	cmp	r3, #6
 8013eb8:	d108      	bne.n	8013ecc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013ebe:	2b04      	cmp	r3, #4
 8013ec0:	d104      	bne.n	8013ecc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	885b      	ldrh	r3, [r3, #2]
 8013ec6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013ec8:	2b08      	cmp	r3, #8
 8013eca:	d003      	beq.n	8013ed4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f7f9 f8ad 	bl	800d02c <pbuf_free>
    return;
 8013ed2:	e055      	b.n	8013f80 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	330e      	adds	r3, #14
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	3318      	adds	r3, #24
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	3304      	adds	r3, #4
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d102      	bne.n	8013ef4 <etharp_input+0x74>
    for_us = 0;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	74fb      	strb	r3, [r7, #19]
 8013ef2:	e009      	b.n	8013f08 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013ef4:	68ba      	ldr	r2, [r7, #8]
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	3304      	adds	r3, #4
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	429a      	cmp	r2, r3
 8013efe:	bf0c      	ite	eq
 8013f00:	2301      	moveq	r3, #1
 8013f02:	2300      	movne	r3, #0
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	f103 0208 	add.w	r2, r3, #8
 8013f0e:	7cfb      	ldrb	r3, [r7, #19]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d001      	beq.n	8013f18 <etharp_input+0x98>
 8013f14:	2301      	movs	r3, #1
 8013f16:	e000      	b.n	8013f1a <etharp_input+0x9a>
 8013f18:	2302      	movs	r3, #2
 8013f1a:	f107 010c 	add.w	r1, r7, #12
 8013f1e:	6838      	ldr	r0, [r7, #0]
 8013f20:	f7ff fed8 	bl	8013cd4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	88db      	ldrh	r3, [r3, #6]
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013f2e:	d003      	beq.n	8013f38 <etharp_input+0xb8>
 8013f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013f34:	d01e      	beq.n	8013f74 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013f36:	e020      	b.n	8013f7a <etharp_input+0xfa>
      if (for_us) {
 8013f38:	7cfb      	ldrb	r3, [r7, #19]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d01c      	beq.n	8013f78 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013f54:	697a      	ldr	r2, [r7, #20]
 8013f56:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013f58:	2102      	movs	r1, #2
 8013f5a:	9103      	str	r1, [sp, #12]
 8013f5c:	f107 010c 	add.w	r1, r7, #12
 8013f60:	9102      	str	r1, [sp, #8]
 8013f62:	9201      	str	r2, [sp, #4]
 8013f64:	9300      	str	r3, [sp, #0]
 8013f66:	462b      	mov	r3, r5
 8013f68:	4622      	mov	r2, r4
 8013f6a:	4601      	mov	r1, r0
 8013f6c:	6838      	ldr	r0, [r7, #0]
 8013f6e:	f000 faeb 	bl	8014548 <etharp_raw>
      break;
 8013f72:	e001      	b.n	8013f78 <etharp_input+0xf8>
      break;
 8013f74:	bf00      	nop
 8013f76:	e000      	b.n	8013f7a <etharp_input+0xfa>
      break;
 8013f78:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f7f9 f856 	bl	800d02c <pbuf_free>
}
 8013f80:	3718      	adds	r7, #24
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bdb0      	pop	{r4, r5, r7, pc}
 8013f86:	bf00      	nop
 8013f88:	0801a538 	.word	0x0801a538
 8013f8c:	0801a688 	.word	0x0801a688
 8013f90:	0801a5b0 	.word	0x0801a5b0

08013f94 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b086      	sub	sp, #24
 8013f98:	af02      	add	r7, sp, #8
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013fa2:	79fa      	ldrb	r2, [r7, #7]
 8013fa4:	4944      	ldr	r1, [pc, #272]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	005b      	lsls	r3, r3, #1
 8013faa:	4413      	add	r3, r2
 8013fac:	00db      	lsls	r3, r3, #3
 8013fae:	440b      	add	r3, r1
 8013fb0:	3314      	adds	r3, #20
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d806      	bhi.n	8013fc6 <etharp_output_to_arp_index+0x32>
 8013fb8:	4b40      	ldr	r3, [pc, #256]	@ (80140bc <etharp_output_to_arp_index+0x128>)
 8013fba:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013fbe:	4940      	ldr	r1, [pc, #256]	@ (80140c0 <etharp_output_to_arp_index+0x12c>)
 8013fc0:	4840      	ldr	r0, [pc, #256]	@ (80140c4 <etharp_output_to_arp_index+0x130>)
 8013fc2:	f002 fdb9 	bl	8016b38 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013fc6:	79fa      	ldrb	r2, [r7, #7]
 8013fc8:	493b      	ldr	r1, [pc, #236]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 8013fca:	4613      	mov	r3, r2
 8013fcc:	005b      	lsls	r3, r3, #1
 8013fce:	4413      	add	r3, r2
 8013fd0:	00db      	lsls	r3, r3, #3
 8013fd2:	440b      	add	r3, r1
 8013fd4:	3314      	adds	r3, #20
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	2b02      	cmp	r3, #2
 8013fda:	d153      	bne.n	8014084 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013fdc:	79fa      	ldrb	r2, [r7, #7]
 8013fde:	4936      	ldr	r1, [pc, #216]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	005b      	lsls	r3, r3, #1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	00db      	lsls	r3, r3, #3
 8013fe8:	440b      	add	r3, r1
 8013fea:	3312      	adds	r3, #18
 8013fec:	881b      	ldrh	r3, [r3, #0]
 8013fee:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8013ff2:	d919      	bls.n	8014028 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013ff4:	79fa      	ldrb	r2, [r7, #7]
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	005b      	lsls	r3, r3, #1
 8013ffa:	4413      	add	r3, r2
 8013ffc:	00db      	lsls	r3, r3, #3
 8013ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 8014000:	4413      	add	r3, r2
 8014002:	3304      	adds	r3, #4
 8014004:	4619      	mov	r1, r3
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f000 fb4c 	bl	80146a4 <etharp_request>
 801400c:	4603      	mov	r3, r0
 801400e:	2b00      	cmp	r3, #0
 8014010:	d138      	bne.n	8014084 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014012:	79fa      	ldrb	r2, [r7, #7]
 8014014:	4928      	ldr	r1, [pc, #160]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 8014016:	4613      	mov	r3, r2
 8014018:	005b      	lsls	r3, r3, #1
 801401a:	4413      	add	r3, r2
 801401c:	00db      	lsls	r3, r3, #3
 801401e:	440b      	add	r3, r1
 8014020:	3314      	adds	r3, #20
 8014022:	2203      	movs	r2, #3
 8014024:	701a      	strb	r2, [r3, #0]
 8014026:	e02d      	b.n	8014084 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014028:	79fa      	ldrb	r2, [r7, #7]
 801402a:	4923      	ldr	r1, [pc, #140]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 801402c:	4613      	mov	r3, r2
 801402e:	005b      	lsls	r3, r3, #1
 8014030:	4413      	add	r3, r2
 8014032:	00db      	lsls	r3, r3, #3
 8014034:	440b      	add	r3, r1
 8014036:	3312      	adds	r3, #18
 8014038:	881b      	ldrh	r3, [r3, #0]
 801403a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801403e:	d321      	bcc.n	8014084 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014040:	79fa      	ldrb	r2, [r7, #7]
 8014042:	4613      	mov	r3, r2
 8014044:	005b      	lsls	r3, r3, #1
 8014046:	4413      	add	r3, r2
 8014048:	00db      	lsls	r3, r3, #3
 801404a:	4a1b      	ldr	r2, [pc, #108]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 801404c:	4413      	add	r3, r2
 801404e:	1d19      	adds	r1, r3, #4
 8014050:	79fa      	ldrb	r2, [r7, #7]
 8014052:	4613      	mov	r3, r2
 8014054:	005b      	lsls	r3, r3, #1
 8014056:	4413      	add	r3, r2
 8014058:	00db      	lsls	r3, r3, #3
 801405a:	3308      	adds	r3, #8
 801405c:	4a16      	ldr	r2, [pc, #88]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 801405e:	4413      	add	r3, r2
 8014060:	3304      	adds	r3, #4
 8014062:	461a      	mov	r2, r3
 8014064:	68f8      	ldr	r0, [r7, #12]
 8014066:	f000 fafb 	bl	8014660 <etharp_request_dst>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d109      	bne.n	8014084 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014070:	79fa      	ldrb	r2, [r7, #7]
 8014072:	4911      	ldr	r1, [pc, #68]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 8014074:	4613      	mov	r3, r2
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	4413      	add	r3, r2
 801407a:	00db      	lsls	r3, r3, #3
 801407c:	440b      	add	r3, r1
 801407e:	3314      	adds	r3, #20
 8014080:	2203      	movs	r2, #3
 8014082:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801408a:	79fa      	ldrb	r2, [r7, #7]
 801408c:	4613      	mov	r3, r2
 801408e:	005b      	lsls	r3, r3, #1
 8014090:	4413      	add	r3, r2
 8014092:	00db      	lsls	r3, r3, #3
 8014094:	3308      	adds	r3, #8
 8014096:	4a08      	ldr	r2, [pc, #32]	@ (80140b8 <etharp_output_to_arp_index+0x124>)
 8014098:	4413      	add	r3, r2
 801409a:	3304      	adds	r3, #4
 801409c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80140a0:	9200      	str	r2, [sp, #0]
 80140a2:	460a      	mov	r2, r1
 80140a4:	68b9      	ldr	r1, [r7, #8]
 80140a6:	68f8      	ldr	r0, [r7, #12]
 80140a8:	f001 fed2 	bl	8015e50 <ethernet_output>
 80140ac:	4603      	mov	r3, r0
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3710      	adds	r7, #16
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}
 80140b6:	bf00      	nop
 80140b8:	20008468 	.word	0x20008468
 80140bc:	0801a538 	.word	0x0801a538
 80140c0:	0801a6a8 	.word	0x0801a6a8
 80140c4:	0801a5b0 	.word	0x0801a5b0

080140c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b08a      	sub	sp, #40	@ 0x28
 80140cc:	af02      	add	r7, sp, #8
 80140ce:	60f8      	str	r0, [r7, #12]
 80140d0:	60b9      	str	r1, [r7, #8]
 80140d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d106      	bne.n	80140ec <etharp_output+0x24>
 80140de:	4b73      	ldr	r3, [pc, #460]	@ (80142ac <etharp_output+0x1e4>)
 80140e0:	f240 321e 	movw	r2, #798	@ 0x31e
 80140e4:	4972      	ldr	r1, [pc, #456]	@ (80142b0 <etharp_output+0x1e8>)
 80140e6:	4873      	ldr	r0, [pc, #460]	@ (80142b4 <etharp_output+0x1ec>)
 80140e8:	f002 fd26 	bl	8016b38 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d106      	bne.n	8014100 <etharp_output+0x38>
 80140f2:	4b6e      	ldr	r3, [pc, #440]	@ (80142ac <etharp_output+0x1e4>)
 80140f4:	f240 321f 	movw	r2, #799	@ 0x31f
 80140f8:	496f      	ldr	r1, [pc, #444]	@ (80142b8 <etharp_output+0x1f0>)
 80140fa:	486e      	ldr	r0, [pc, #440]	@ (80142b4 <etharp_output+0x1ec>)
 80140fc:	f002 fd1c 	bl	8016b38 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d106      	bne.n	8014114 <etharp_output+0x4c>
 8014106:	4b69      	ldr	r3, [pc, #420]	@ (80142ac <etharp_output+0x1e4>)
 8014108:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801410c:	496b      	ldr	r1, [pc, #428]	@ (80142bc <etharp_output+0x1f4>)
 801410e:	4869      	ldr	r0, [pc, #420]	@ (80142b4 <etharp_output+0x1ec>)
 8014110:	f002 fd12 	bl	8016b38 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	68f9      	ldr	r1, [r7, #12]
 801411a:	4618      	mov	r0, r3
 801411c:	f000 ff8a 	bl	8015034 <ip4_addr_isbroadcast_u32>
 8014120:	4603      	mov	r3, r0
 8014122:	2b00      	cmp	r3, #0
 8014124:	d002      	beq.n	801412c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014126:	4b66      	ldr	r3, [pc, #408]	@ (80142c0 <etharp_output+0x1f8>)
 8014128:	61fb      	str	r3, [r7, #28]
 801412a:	e0af      	b.n	801428c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014134:	2be0      	cmp	r3, #224	@ 0xe0
 8014136:	d118      	bne.n	801416a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014138:	2301      	movs	r3, #1
 801413a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801413c:	2300      	movs	r3, #0
 801413e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014140:	235e      	movs	r3, #94	@ 0x5e
 8014142:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	3301      	adds	r3, #1
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801414e:	b2db      	uxtb	r3, r3
 8014150:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	3302      	adds	r3, #2
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	3303      	adds	r3, #3
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014162:	f107 0310 	add.w	r3, r7, #16
 8014166:	61fb      	str	r3, [r7, #28]
 8014168:	e090      	b.n	801428c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	3304      	adds	r3, #4
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	405a      	eors	r2, r3
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	3308      	adds	r3, #8
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	4013      	ands	r3, r2
 801417e:	2b00      	cmp	r3, #0
 8014180:	d012      	beq.n	80141a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014188:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801418c:	4293      	cmp	r3, r2
 801418e:	d00b      	beq.n	80141a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	330c      	adds	r3, #12
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d003      	beq.n	80141a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	330c      	adds	r3, #12
 801419e:	61bb      	str	r3, [r7, #24]
 80141a0:	e002      	b.n	80141a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80141a2:	f06f 0303 	mvn.w	r3, #3
 80141a6:	e07d      	b.n	80142a4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80141a8:	4b46      	ldr	r3, [pc, #280]	@ (80142c4 <etharp_output+0x1fc>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	4619      	mov	r1, r3
 80141ae:	4a46      	ldr	r2, [pc, #280]	@ (80142c8 <etharp_output+0x200>)
 80141b0:	460b      	mov	r3, r1
 80141b2:	005b      	lsls	r3, r3, #1
 80141b4:	440b      	add	r3, r1
 80141b6:	00db      	lsls	r3, r3, #3
 80141b8:	4413      	add	r3, r2
 80141ba:	3314      	adds	r3, #20
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	2b01      	cmp	r3, #1
 80141c0:	d925      	bls.n	801420e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80141c2:	4b40      	ldr	r3, [pc, #256]	@ (80142c4 <etharp_output+0x1fc>)
 80141c4:	781b      	ldrb	r3, [r3, #0]
 80141c6:	4619      	mov	r1, r3
 80141c8:	4a3f      	ldr	r2, [pc, #252]	@ (80142c8 <etharp_output+0x200>)
 80141ca:	460b      	mov	r3, r1
 80141cc:	005b      	lsls	r3, r3, #1
 80141ce:	440b      	add	r3, r1
 80141d0:	00db      	lsls	r3, r3, #3
 80141d2:	4413      	add	r3, r2
 80141d4:	3308      	adds	r3, #8
 80141d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80141d8:	68fa      	ldr	r2, [r7, #12]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d117      	bne.n	801420e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80141de:	69bb      	ldr	r3, [r7, #24]
 80141e0:	681a      	ldr	r2, [r3, #0]
 80141e2:	4b38      	ldr	r3, [pc, #224]	@ (80142c4 <etharp_output+0x1fc>)
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	4618      	mov	r0, r3
 80141e8:	4937      	ldr	r1, [pc, #220]	@ (80142c8 <etharp_output+0x200>)
 80141ea:	4603      	mov	r3, r0
 80141ec:	005b      	lsls	r3, r3, #1
 80141ee:	4403      	add	r3, r0
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	440b      	add	r3, r1
 80141f4:	3304      	adds	r3, #4
 80141f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d108      	bne.n	801420e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80141fc:	4b31      	ldr	r3, [pc, #196]	@ (80142c4 <etharp_output+0x1fc>)
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	461a      	mov	r2, r3
 8014202:	68b9      	ldr	r1, [r7, #8]
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f7ff fec5 	bl	8013f94 <etharp_output_to_arp_index>
 801420a:	4603      	mov	r3, r0
 801420c:	e04a      	b.n	80142a4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801420e:	2300      	movs	r3, #0
 8014210:	75fb      	strb	r3, [r7, #23]
 8014212:	e031      	b.n	8014278 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014214:	7dfa      	ldrb	r2, [r7, #23]
 8014216:	492c      	ldr	r1, [pc, #176]	@ (80142c8 <etharp_output+0x200>)
 8014218:	4613      	mov	r3, r2
 801421a:	005b      	lsls	r3, r3, #1
 801421c:	4413      	add	r3, r2
 801421e:	00db      	lsls	r3, r3, #3
 8014220:	440b      	add	r3, r1
 8014222:	3314      	adds	r3, #20
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	2b01      	cmp	r3, #1
 8014228:	d923      	bls.n	8014272 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801422a:	7dfa      	ldrb	r2, [r7, #23]
 801422c:	4926      	ldr	r1, [pc, #152]	@ (80142c8 <etharp_output+0x200>)
 801422e:	4613      	mov	r3, r2
 8014230:	005b      	lsls	r3, r3, #1
 8014232:	4413      	add	r3, r2
 8014234:	00db      	lsls	r3, r3, #3
 8014236:	440b      	add	r3, r1
 8014238:	3308      	adds	r3, #8
 801423a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801423c:	68fa      	ldr	r2, [r7, #12]
 801423e:	429a      	cmp	r2, r3
 8014240:	d117      	bne.n	8014272 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014242:	69bb      	ldr	r3, [r7, #24]
 8014244:	6819      	ldr	r1, [r3, #0]
 8014246:	7dfa      	ldrb	r2, [r7, #23]
 8014248:	481f      	ldr	r0, [pc, #124]	@ (80142c8 <etharp_output+0x200>)
 801424a:	4613      	mov	r3, r2
 801424c:	005b      	lsls	r3, r3, #1
 801424e:	4413      	add	r3, r2
 8014250:	00db      	lsls	r3, r3, #3
 8014252:	4403      	add	r3, r0
 8014254:	3304      	adds	r3, #4
 8014256:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014258:	4299      	cmp	r1, r3
 801425a:	d10a      	bne.n	8014272 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801425c:	4a19      	ldr	r2, [pc, #100]	@ (80142c4 <etharp_output+0x1fc>)
 801425e:	7dfb      	ldrb	r3, [r7, #23]
 8014260:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014262:	7dfb      	ldrb	r3, [r7, #23]
 8014264:	461a      	mov	r2, r3
 8014266:	68b9      	ldr	r1, [r7, #8]
 8014268:	68f8      	ldr	r0, [r7, #12]
 801426a:	f7ff fe93 	bl	8013f94 <etharp_output_to_arp_index>
 801426e:	4603      	mov	r3, r0
 8014270:	e018      	b.n	80142a4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014272:	7dfb      	ldrb	r3, [r7, #23]
 8014274:	3301      	adds	r3, #1
 8014276:	75fb      	strb	r3, [r7, #23]
 8014278:	7dfb      	ldrb	r3, [r7, #23]
 801427a:	2b09      	cmp	r3, #9
 801427c:	d9ca      	bls.n	8014214 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801427e:	68ba      	ldr	r2, [r7, #8]
 8014280:	69b9      	ldr	r1, [r7, #24]
 8014282:	68f8      	ldr	r0, [r7, #12]
 8014284:	f000 f822 	bl	80142cc <etharp_query>
 8014288:	4603      	mov	r3, r0
 801428a:	e00b      	b.n	80142a4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014292:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	68b9      	ldr	r1, [r7, #8]
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f001 fdd7 	bl	8015e50 <ethernet_output>
 80142a2:	4603      	mov	r3, r0
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3720      	adds	r7, #32
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	0801a538 	.word	0x0801a538
 80142b0:	0801a688 	.word	0x0801a688
 80142b4:	0801a5b0 	.word	0x0801a5b0
 80142b8:	0801a6d8 	.word	0x0801a6d8
 80142bc:	0801a678 	.word	0x0801a678
 80142c0:	0801b1f4 	.word	0x0801b1f4
 80142c4:	20008558 	.word	0x20008558
 80142c8:	20008468 	.word	0x20008468

080142cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b08c      	sub	sp, #48	@ 0x30
 80142d0:	af02      	add	r7, sp, #8
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	3326      	adds	r3, #38	@ 0x26
 80142dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80142de:	23ff      	movs	r3, #255	@ 0xff
 80142e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80142e4:	2300      	movs	r3, #0
 80142e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	68f9      	ldr	r1, [r7, #12]
 80142ee:	4618      	mov	r0, r3
 80142f0:	f000 fea0 	bl	8015034 <ip4_addr_isbroadcast_u32>
 80142f4:	4603      	mov	r3, r0
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d10c      	bne.n	8014314 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014302:	2be0      	cmp	r3, #224	@ 0xe0
 8014304:	d006      	beq.n	8014314 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d003      	beq.n	8014314 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d102      	bne.n	801431a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014314:	f06f 030f 	mvn.w	r3, #15
 8014318:	e101      	b.n	801451e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801431a:	68fa      	ldr	r2, [r7, #12]
 801431c:	2101      	movs	r1, #1
 801431e:	68b8      	ldr	r0, [r7, #8]
 8014320:	f7ff fb60 	bl	80139e4 <etharp_find_entry>
 8014324:	4603      	mov	r3, r0
 8014326:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014328:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801432c:	2b00      	cmp	r3, #0
 801432e:	da02      	bge.n	8014336 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014330:	8a7b      	ldrh	r3, [r7, #18]
 8014332:	b25b      	sxtb	r3, r3
 8014334:	e0f3      	b.n	801451e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014336:	8a7b      	ldrh	r3, [r7, #18]
 8014338:	2b7e      	cmp	r3, #126	@ 0x7e
 801433a:	d906      	bls.n	801434a <etharp_query+0x7e>
 801433c:	4b7a      	ldr	r3, [pc, #488]	@ (8014528 <etharp_query+0x25c>)
 801433e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014342:	497a      	ldr	r1, [pc, #488]	@ (801452c <etharp_query+0x260>)
 8014344:	487a      	ldr	r0, [pc, #488]	@ (8014530 <etharp_query+0x264>)
 8014346:	f002 fbf7 	bl	8016b38 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801434a:	8a7b      	ldrh	r3, [r7, #18]
 801434c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801434e:	7c7a      	ldrb	r2, [r7, #17]
 8014350:	4978      	ldr	r1, [pc, #480]	@ (8014534 <etharp_query+0x268>)
 8014352:	4613      	mov	r3, r2
 8014354:	005b      	lsls	r3, r3, #1
 8014356:	4413      	add	r3, r2
 8014358:	00db      	lsls	r3, r3, #3
 801435a:	440b      	add	r3, r1
 801435c:	3314      	adds	r3, #20
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d115      	bne.n	8014390 <etharp_query+0xc4>
    is_new_entry = 1;
 8014364:	2301      	movs	r3, #1
 8014366:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014368:	7c7a      	ldrb	r2, [r7, #17]
 801436a:	4972      	ldr	r1, [pc, #456]	@ (8014534 <etharp_query+0x268>)
 801436c:	4613      	mov	r3, r2
 801436e:	005b      	lsls	r3, r3, #1
 8014370:	4413      	add	r3, r2
 8014372:	00db      	lsls	r3, r3, #3
 8014374:	440b      	add	r3, r1
 8014376:	3314      	adds	r3, #20
 8014378:	2201      	movs	r2, #1
 801437a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801437c:	7c7a      	ldrb	r2, [r7, #17]
 801437e:	496d      	ldr	r1, [pc, #436]	@ (8014534 <etharp_query+0x268>)
 8014380:	4613      	mov	r3, r2
 8014382:	005b      	lsls	r3, r3, #1
 8014384:	4413      	add	r3, r2
 8014386:	00db      	lsls	r3, r3, #3
 8014388:	440b      	add	r3, r1
 801438a:	3308      	adds	r3, #8
 801438c:	68fa      	ldr	r2, [r7, #12]
 801438e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014390:	7c7a      	ldrb	r2, [r7, #17]
 8014392:	4968      	ldr	r1, [pc, #416]	@ (8014534 <etharp_query+0x268>)
 8014394:	4613      	mov	r3, r2
 8014396:	005b      	lsls	r3, r3, #1
 8014398:	4413      	add	r3, r2
 801439a:	00db      	lsls	r3, r3, #3
 801439c:	440b      	add	r3, r1
 801439e:	3314      	adds	r3, #20
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	2b01      	cmp	r3, #1
 80143a4:	d011      	beq.n	80143ca <etharp_query+0xfe>
 80143a6:	7c7a      	ldrb	r2, [r7, #17]
 80143a8:	4962      	ldr	r1, [pc, #392]	@ (8014534 <etharp_query+0x268>)
 80143aa:	4613      	mov	r3, r2
 80143ac:	005b      	lsls	r3, r3, #1
 80143ae:	4413      	add	r3, r2
 80143b0:	00db      	lsls	r3, r3, #3
 80143b2:	440b      	add	r3, r1
 80143b4:	3314      	adds	r3, #20
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d806      	bhi.n	80143ca <etharp_query+0xfe>
 80143bc:	4b5a      	ldr	r3, [pc, #360]	@ (8014528 <etharp_query+0x25c>)
 80143be:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80143c2:	495d      	ldr	r1, [pc, #372]	@ (8014538 <etharp_query+0x26c>)
 80143c4:	485a      	ldr	r0, [pc, #360]	@ (8014530 <etharp_query+0x264>)
 80143c6:	f002 fbb7 	bl	8016b38 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80143ca:	6a3b      	ldr	r3, [r7, #32]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d102      	bne.n	80143d6 <etharp_query+0x10a>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d10c      	bne.n	80143f0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80143d6:	68b9      	ldr	r1, [r7, #8]
 80143d8:	68f8      	ldr	r0, [r7, #12]
 80143da:	f000 f963 	bl	80146a4 <etharp_request>
 80143de:	4603      	mov	r3, r0
 80143e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d102      	bne.n	80143f0 <etharp_query+0x124>
      return result;
 80143ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80143ee:	e096      	b.n	801451e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d106      	bne.n	8014404 <etharp_query+0x138>
 80143f6:	4b4c      	ldr	r3, [pc, #304]	@ (8014528 <etharp_query+0x25c>)
 80143f8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80143fc:	494f      	ldr	r1, [pc, #316]	@ (801453c <etharp_query+0x270>)
 80143fe:	484c      	ldr	r0, [pc, #304]	@ (8014530 <etharp_query+0x264>)
 8014400:	f002 fb9a 	bl	8016b38 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014404:	7c7a      	ldrb	r2, [r7, #17]
 8014406:	494b      	ldr	r1, [pc, #300]	@ (8014534 <etharp_query+0x268>)
 8014408:	4613      	mov	r3, r2
 801440a:	005b      	lsls	r3, r3, #1
 801440c:	4413      	add	r3, r2
 801440e:	00db      	lsls	r3, r3, #3
 8014410:	440b      	add	r3, r1
 8014412:	3314      	adds	r3, #20
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	2b01      	cmp	r3, #1
 8014418:	d917      	bls.n	801444a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801441a:	4a49      	ldr	r2, [pc, #292]	@ (8014540 <etharp_query+0x274>)
 801441c:	7c7b      	ldrb	r3, [r7, #17]
 801441e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014420:	7c7a      	ldrb	r2, [r7, #17]
 8014422:	4613      	mov	r3, r2
 8014424:	005b      	lsls	r3, r3, #1
 8014426:	4413      	add	r3, r2
 8014428:	00db      	lsls	r3, r3, #3
 801442a:	3308      	adds	r3, #8
 801442c:	4a41      	ldr	r2, [pc, #260]	@ (8014534 <etharp_query+0x268>)
 801442e:	4413      	add	r3, r2
 8014430:	3304      	adds	r3, #4
 8014432:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014436:	9200      	str	r2, [sp, #0]
 8014438:	697a      	ldr	r2, [r7, #20]
 801443a:	6879      	ldr	r1, [r7, #4]
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	f001 fd07 	bl	8015e50 <ethernet_output>
 8014442:	4603      	mov	r3, r0
 8014444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014448:	e067      	b.n	801451a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801444a:	7c7a      	ldrb	r2, [r7, #17]
 801444c:	4939      	ldr	r1, [pc, #228]	@ (8014534 <etharp_query+0x268>)
 801444e:	4613      	mov	r3, r2
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	4413      	add	r3, r2
 8014454:	00db      	lsls	r3, r3, #3
 8014456:	440b      	add	r3, r1
 8014458:	3314      	adds	r3, #20
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	2b01      	cmp	r3, #1
 801445e:	d15c      	bne.n	801451a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014460:	2300      	movs	r3, #0
 8014462:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014468:	e01c      	b.n	80144a4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801446a:	69fb      	ldr	r3, [r7, #28]
 801446c:	895a      	ldrh	r2, [r3, #10]
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	891b      	ldrh	r3, [r3, #8]
 8014472:	429a      	cmp	r2, r3
 8014474:	d10a      	bne.n	801448c <etharp_query+0x1c0>
 8014476:	69fb      	ldr	r3, [r7, #28]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d006      	beq.n	801448c <etharp_query+0x1c0>
 801447e:	4b2a      	ldr	r3, [pc, #168]	@ (8014528 <etharp_query+0x25c>)
 8014480:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014484:	492f      	ldr	r1, [pc, #188]	@ (8014544 <etharp_query+0x278>)
 8014486:	482a      	ldr	r0, [pc, #168]	@ (8014530 <etharp_query+0x264>)
 8014488:	f002 fb56 	bl	8016b38 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	7b1b      	ldrb	r3, [r3, #12]
 8014490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014494:	2b00      	cmp	r3, #0
 8014496:	d002      	beq.n	801449e <etharp_query+0x1d2>
        copy_needed = 1;
 8014498:	2301      	movs	r3, #1
 801449a:	61bb      	str	r3, [r7, #24]
        break;
 801449c:	e005      	b.n	80144aa <etharp_query+0x1de>
      }
      p = p->next;
 801449e:	69fb      	ldr	r3, [r7, #28]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80144a4:	69fb      	ldr	r3, [r7, #28]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d1df      	bne.n	801446a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d007      	beq.n	80144c0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80144b6:	200e      	movs	r0, #14
 80144b8:	f7f9 f824 	bl	800d504 <pbuf_clone>
 80144bc:	61f8      	str	r0, [r7, #28]
 80144be:	e004      	b.n	80144ca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80144c4:	69f8      	ldr	r0, [r7, #28]
 80144c6:	f7f8 fe51 	bl	800d16c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80144ca:	69fb      	ldr	r3, [r7, #28]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d021      	beq.n	8014514 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80144d0:	7c7a      	ldrb	r2, [r7, #17]
 80144d2:	4918      	ldr	r1, [pc, #96]	@ (8014534 <etharp_query+0x268>)
 80144d4:	4613      	mov	r3, r2
 80144d6:	005b      	lsls	r3, r3, #1
 80144d8:	4413      	add	r3, r2
 80144da:	00db      	lsls	r3, r3, #3
 80144dc:	440b      	add	r3, r1
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d00a      	beq.n	80144fa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80144e4:	7c7a      	ldrb	r2, [r7, #17]
 80144e6:	4913      	ldr	r1, [pc, #76]	@ (8014534 <etharp_query+0x268>)
 80144e8:	4613      	mov	r3, r2
 80144ea:	005b      	lsls	r3, r3, #1
 80144ec:	4413      	add	r3, r2
 80144ee:	00db      	lsls	r3, r3, #3
 80144f0:	440b      	add	r3, r1
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7f8 fd99 	bl	800d02c <pbuf_free>
      }
      arp_table[i].q = p;
 80144fa:	7c7a      	ldrb	r2, [r7, #17]
 80144fc:	490d      	ldr	r1, [pc, #52]	@ (8014534 <etharp_query+0x268>)
 80144fe:	4613      	mov	r3, r2
 8014500:	005b      	lsls	r3, r3, #1
 8014502:	4413      	add	r3, r2
 8014504:	00db      	lsls	r3, r3, #3
 8014506:	440b      	add	r3, r1
 8014508:	69fa      	ldr	r2, [r7, #28]
 801450a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801450c:	2300      	movs	r3, #0
 801450e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014512:	e002      	b.n	801451a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014514:	23ff      	movs	r3, #255	@ 0xff
 8014516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801451a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801451e:	4618      	mov	r0, r3
 8014520:	3728      	adds	r7, #40	@ 0x28
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	0801a538 	.word	0x0801a538
 801452c:	0801a6e4 	.word	0x0801a6e4
 8014530:	0801a5b0 	.word	0x0801a5b0
 8014534:	20008468 	.word	0x20008468
 8014538:	0801a6f4 	.word	0x0801a6f4
 801453c:	0801a6d8 	.word	0x0801a6d8
 8014540:	20008558 	.word	0x20008558
 8014544:	0801a71c 	.word	0x0801a71c

08014548 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b08a      	sub	sp, #40	@ 0x28
 801454c:	af02      	add	r7, sp, #8
 801454e:	60f8      	str	r0, [r7, #12]
 8014550:	60b9      	str	r1, [r7, #8]
 8014552:	607a      	str	r2, [r7, #4]
 8014554:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014556:	2300      	movs	r3, #0
 8014558:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d106      	bne.n	801456e <etharp_raw+0x26>
 8014560:	4b3a      	ldr	r3, [pc, #232]	@ (801464c <etharp_raw+0x104>)
 8014562:	f240 4257 	movw	r2, #1111	@ 0x457
 8014566:	493a      	ldr	r1, [pc, #232]	@ (8014650 <etharp_raw+0x108>)
 8014568:	483a      	ldr	r0, [pc, #232]	@ (8014654 <etharp_raw+0x10c>)
 801456a:	f002 fae5 	bl	8016b38 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801456e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014572:	211c      	movs	r1, #28
 8014574:	200e      	movs	r0, #14
 8014576:	f7f8 fa75 	bl	800ca64 <pbuf_alloc>
 801457a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801457c:	69bb      	ldr	r3, [r7, #24]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d102      	bne.n	8014588 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014582:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014586:	e05d      	b.n	8014644 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	895b      	ldrh	r3, [r3, #10]
 801458c:	2b1b      	cmp	r3, #27
 801458e:	d806      	bhi.n	801459e <etharp_raw+0x56>
 8014590:	4b2e      	ldr	r3, [pc, #184]	@ (801464c <etharp_raw+0x104>)
 8014592:	f240 4262 	movw	r2, #1122	@ 0x462
 8014596:	4930      	ldr	r1, [pc, #192]	@ (8014658 <etharp_raw+0x110>)
 8014598:	482e      	ldr	r0, [pc, #184]	@ (8014654 <etharp_raw+0x10c>)
 801459a:	f002 facd 	bl	8016b38 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	685b      	ldr	r3, [r3, #4]
 80145a2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80145a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7f7 f8f0 	bl	800b78c <lwip_htons>
 80145ac:	4603      	mov	r3, r0
 80145ae:	461a      	mov	r2, r3
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80145ba:	2b06      	cmp	r3, #6
 80145bc:	d006      	beq.n	80145cc <etharp_raw+0x84>
 80145be:	4b23      	ldr	r3, [pc, #140]	@ (801464c <etharp_raw+0x104>)
 80145c0:	f240 4269 	movw	r2, #1129	@ 0x469
 80145c4:	4925      	ldr	r1, [pc, #148]	@ (801465c <etharp_raw+0x114>)
 80145c6:	4823      	ldr	r0, [pc, #140]	@ (8014654 <etharp_raw+0x10c>)
 80145c8:	f002 fab6 	bl	8016b38 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	3308      	adds	r3, #8
 80145d0:	2206      	movs	r2, #6
 80145d2:	6839      	ldr	r1, [r7, #0]
 80145d4:	4618      	mov	r0, r3
 80145d6:	f002 fc84 	bl	8016ee2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	3312      	adds	r3, #18
 80145de:	2206      	movs	r2, #6
 80145e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80145e2:	4618      	mov	r0, r3
 80145e4:	f002 fc7d 	bl	8016ee2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	330e      	adds	r3, #14
 80145ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145ee:	6812      	ldr	r2, [r2, #0]
 80145f0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	3318      	adds	r3, #24
 80145f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145f8:	6812      	ldr	r2, [r2, #0]
 80145fa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	2200      	movs	r2, #0
 8014600:	701a      	strb	r2, [r3, #0]
 8014602:	2200      	movs	r2, #0
 8014604:	f042 0201 	orr.w	r2, r2, #1
 8014608:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	2200      	movs	r2, #0
 801460e:	f042 0208 	orr.w	r2, r2, #8
 8014612:	709a      	strb	r2, [r3, #2]
 8014614:	2200      	movs	r2, #0
 8014616:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	2206      	movs	r2, #6
 801461c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	2204      	movs	r2, #4
 8014622:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014624:	f640 0306 	movw	r3, #2054	@ 0x806
 8014628:	9300      	str	r3, [sp, #0]
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	68ba      	ldr	r2, [r7, #8]
 801462e:	69b9      	ldr	r1, [r7, #24]
 8014630:	68f8      	ldr	r0, [r7, #12]
 8014632:	f001 fc0d 	bl	8015e50 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014636:	69b8      	ldr	r0, [r7, #24]
 8014638:	f7f8 fcf8 	bl	800d02c <pbuf_free>
  p = NULL;
 801463c:	2300      	movs	r3, #0
 801463e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014640:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014644:	4618      	mov	r0, r3
 8014646:	3720      	adds	r7, #32
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}
 801464c:	0801a538 	.word	0x0801a538
 8014650:	0801a688 	.word	0x0801a688
 8014654:	0801a5b0 	.word	0x0801a5b0
 8014658:	0801a738 	.word	0x0801a738
 801465c:	0801a76c 	.word	0x0801a76c

08014660 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b088      	sub	sp, #32
 8014664:	af04      	add	r7, sp, #16
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	60b9      	str	r1, [r7, #8]
 801466a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801467c:	2201      	movs	r2, #1
 801467e:	9203      	str	r2, [sp, #12]
 8014680:	68ba      	ldr	r2, [r7, #8]
 8014682:	9202      	str	r2, [sp, #8]
 8014684:	4a06      	ldr	r2, [pc, #24]	@ (80146a0 <etharp_request_dst+0x40>)
 8014686:	9201      	str	r2, [sp, #4]
 8014688:	9300      	str	r3, [sp, #0]
 801468a:	4603      	mov	r3, r0
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	68f8      	ldr	r0, [r7, #12]
 8014690:	f7ff ff5a 	bl	8014548 <etharp_raw>
 8014694:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014696:	4618      	mov	r0, r3
 8014698:	3710      	adds	r7, #16
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}
 801469e:	bf00      	nop
 80146a0:	0801b1fc 	.word	0x0801b1fc

080146a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80146ae:	4a05      	ldr	r2, [pc, #20]	@ (80146c4 <etharp_request+0x20>)
 80146b0:	6839      	ldr	r1, [r7, #0]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff ffd4 	bl	8014660 <etharp_request_dst>
 80146b8:	4603      	mov	r3, r0
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3708      	adds	r7, #8
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	0801b1f4 	.word	0x0801b1f4

080146c8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b08e      	sub	sp, #56	@ 0x38
 80146cc:	af04      	add	r7, sp, #16
 80146ce:	6078      	str	r0, [r7, #4]
 80146d0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80146d2:	4b95      	ldr	r3, [pc, #596]	@ (8014928 <icmp_input+0x260>)
 80146d4:	689b      	ldr	r3, [r3, #8]
 80146d6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80146d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	f003 030f 	and.w	r3, r3, #15
 80146e0:	b2db      	uxtb	r3, r3
 80146e2:	009b      	lsls	r3, r3, #2
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80146e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146ea:	2b13      	cmp	r3, #19
 80146ec:	d805      	bhi.n	80146fa <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 80146ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146f0:	4619      	mov	r1, r3
 80146f2:	488e      	ldr	r0, [pc, #568]	@ (801492c <icmp_input+0x264>)
 80146f4:	f002 fa20 	bl	8016b38 <iprintf>
    goto lenerr;
 80146f8:	e10a      	b.n	8014910 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	895b      	ldrh	r3, [r3, #10]
 80146fe:	2b03      	cmp	r3, #3
 8014700:	d806      	bhi.n	8014710 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	891b      	ldrh	r3, [r3, #8]
 8014706:	4619      	mov	r1, r3
 8014708:	4889      	ldr	r0, [pc, #548]	@ (8014930 <icmp_input+0x268>)
 801470a:	f002 fa15 	bl	8016b38 <iprintf>
    goto lenerr;
 801470e:	e0ff      	b.n	8014910 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	785b      	ldrb	r3, [r3, #1]
 8014720:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014724:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014728:	2b00      	cmp	r3, #0
 801472a:	f000 80ea 	beq.w	8014902 <icmp_input+0x23a>
 801472e:	2b08      	cmp	r3, #8
 8014730:	f040 80de 	bne.w	80148f0 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014734:	4b7f      	ldr	r3, [pc, #508]	@ (8014934 <icmp_input+0x26c>)
 8014736:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014738:	4b7b      	ldr	r3, [pc, #492]	@ (8014928 <icmp_input+0x260>)
 801473a:	695b      	ldr	r3, [r3, #20]
 801473c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014740:	2be0      	cmp	r3, #224	@ 0xe0
 8014742:	d103      	bne.n	801474c <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 8014744:	487c      	ldr	r0, [pc, #496]	@ (8014938 <icmp_input+0x270>)
 8014746:	f002 fa67 	bl	8016c18 <puts>
        goto icmperr;
 801474a:	e0e5      	b.n	8014918 <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801474c:	4b76      	ldr	r3, [pc, #472]	@ (8014928 <icmp_input+0x260>)
 801474e:	695b      	ldr	r3, [r3, #20]
 8014750:	4a75      	ldr	r2, [pc, #468]	@ (8014928 <icmp_input+0x260>)
 8014752:	6812      	ldr	r2, [r2, #0]
 8014754:	4611      	mov	r1, r2
 8014756:	4618      	mov	r0, r3
 8014758:	f000 fc6c 	bl	8015034 <ip4_addr_isbroadcast_u32>
 801475c:	4603      	mov	r3, r0
 801475e:	2b00      	cmp	r3, #0
 8014760:	d003      	beq.n	801476a <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 8014762:	4876      	ldr	r0, [pc, #472]	@ (801493c <icmp_input+0x274>)
 8014764:	f002 fa58 	bl	8016c18 <puts>
        goto icmperr;
 8014768:	e0d6      	b.n	8014918 <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801476a:	4875      	ldr	r0, [pc, #468]	@ (8014940 <icmp_input+0x278>)
 801476c:	f002 fa54 	bl	8016c18 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	891b      	ldrh	r3, [r3, #8]
 8014774:	2b07      	cmp	r3, #7
 8014776:	d803      	bhi.n	8014780 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 8014778:	4872      	ldr	r0, [pc, #456]	@ (8014944 <icmp_input+0x27c>)
 801477a:	f002 fa4d 	bl	8016c18 <puts>
        goto lenerr;
 801477e:	e0c7      	b.n	8014910 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014780:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014782:	330e      	adds	r3, #14
 8014784:	4619      	mov	r1, r3
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f7f8 fbba 	bl	800cf00 <pbuf_add_header>
 801478c:	4603      	mov	r3, r0
 801478e:	2b00      	cmp	r3, #0
 8014790:	d057      	beq.n	8014842 <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	891a      	ldrh	r2, [r3, #8]
 8014796:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014798:	4413      	add	r3, r2
 801479a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	891b      	ldrh	r3, [r3, #8]
 80147a0:	8b7a      	ldrh	r2, [r7, #26]
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d203      	bcs.n	80147ae <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 80147a6:	4868      	ldr	r0, [pc, #416]	@ (8014948 <icmp_input+0x280>)
 80147a8:	f002 fa36 	bl	8016c18 <puts>
          goto icmperr;
 80147ac:	e0b4      	b.n	8014918 <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80147ae:	8b7b      	ldrh	r3, [r7, #26]
 80147b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80147b4:	4619      	mov	r1, r3
 80147b6:	200e      	movs	r0, #14
 80147b8:	f7f8 f954 	bl	800ca64 <pbuf_alloc>
 80147bc:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d103      	bne.n	80147cc <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 80147c4:	4861      	ldr	r0, [pc, #388]	@ (801494c <icmp_input+0x284>)
 80147c6:	f002 fa27 	bl	8016c18 <puts>
          goto icmperr;
 80147ca:	e0a5      	b.n	8014918 <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	895b      	ldrh	r3, [r3, #10]
 80147d0:	461a      	mov	r2, r3
 80147d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80147d4:	3308      	adds	r3, #8
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d206      	bcs.n	80147e8 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 80147da:	485d      	ldr	r0, [pc, #372]	@ (8014950 <icmp_input+0x288>)
 80147dc:	f002 f9ac 	bl	8016b38 <iprintf>
          pbuf_free(r);
 80147e0:	6978      	ldr	r0, [r7, #20]
 80147e2:	f7f8 fc23 	bl	800d02c <pbuf_free>
          goto icmperr;
 80147e6:	e097      	b.n	8014918 <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80147ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80147f0:	4618      	mov	r0, r3
 80147f2:	f002 fb76 	bl	8016ee2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80147f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80147f8:	4619      	mov	r1, r3
 80147fa:	6978      	ldr	r0, [r7, #20]
 80147fc:	f7f8 fb90 	bl	800cf20 <pbuf_remove_header>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d009      	beq.n	801481a <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014806:	4b53      	ldr	r3, [pc, #332]	@ (8014954 <icmp_input+0x28c>)
 8014808:	22b6      	movs	r2, #182	@ 0xb6
 801480a:	4953      	ldr	r1, [pc, #332]	@ (8014958 <icmp_input+0x290>)
 801480c:	4853      	ldr	r0, [pc, #332]	@ (801495c <icmp_input+0x294>)
 801480e:	f002 f993 	bl	8016b38 <iprintf>
          pbuf_free(r);
 8014812:	6978      	ldr	r0, [r7, #20]
 8014814:	f7f8 fc0a 	bl	800d02c <pbuf_free>
          goto icmperr;
 8014818:	e07e      	b.n	8014918 <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801481a:	6879      	ldr	r1, [r7, #4]
 801481c:	6978      	ldr	r0, [r7, #20]
 801481e:	f7f8 fd2d 	bl	800d27c <pbuf_copy>
 8014822:	4603      	mov	r3, r0
 8014824:	2b00      	cmp	r3, #0
 8014826:	d006      	beq.n	8014836 <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 8014828:	484d      	ldr	r0, [pc, #308]	@ (8014960 <icmp_input+0x298>)
 801482a:	f002 f985 	bl	8016b38 <iprintf>
          pbuf_free(r);
 801482e:	6978      	ldr	r0, [r7, #20]
 8014830:	f7f8 fbfc 	bl	800d02c <pbuf_free>
          goto icmperr;
 8014834:	e070      	b.n	8014918 <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7f8 fbf8 	bl	800d02c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	607b      	str	r3, [r7, #4]
 8014840:	e00f      	b.n	8014862 <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014842:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014844:	330e      	adds	r3, #14
 8014846:	4619      	mov	r1, r3
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f7f8 fb69 	bl	800cf20 <pbuf_remove_header>
 801484e:	4603      	mov	r3, r0
 8014850:	2b00      	cmp	r3, #0
 8014852:	d006      	beq.n	8014862 <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014854:	4b3f      	ldr	r3, [pc, #252]	@ (8014954 <icmp_input+0x28c>)
 8014856:	22c7      	movs	r2, #199	@ 0xc7
 8014858:	4942      	ldr	r1, [pc, #264]	@ (8014964 <icmp_input+0x29c>)
 801485a:	4840      	ldr	r0, [pc, #256]	@ (801495c <icmp_input+0x294>)
 801485c:	f002 f96c 	bl	8016b38 <iprintf>
          goto icmperr;
 8014860:	e05a      	b.n	8014918 <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	685b      	ldr	r3, [r3, #4]
 8014866:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014868:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801486a:	4619      	mov	r1, r3
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f7f8 fb47 	bl	800cf00 <pbuf_add_header>
 8014872:	4603      	mov	r3, r0
 8014874:	2b00      	cmp	r3, #0
 8014876:	d003      	beq.n	8014880 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 8014878:	483b      	ldr	r0, [pc, #236]	@ (8014968 <icmp_input+0x2a0>)
 801487a:	f002 f95d 	bl	8016b38 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801487e:	e042      	b.n	8014906 <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014886:	69fb      	ldr	r3, [r7, #28]
 8014888:	681a      	ldr	r2, [r3, #0]
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801488e:	4b26      	ldr	r3, [pc, #152]	@ (8014928 <icmp_input+0x260>)
 8014890:	691a      	ldr	r2, [r3, #16]
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	2200      	movs	r2, #0
 801489a:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	2200      	movs	r2, #0
 80148a0:	709a      	strb	r2, [r3, #2]
 80148a2:	2200      	movs	r2, #0
 80148a4:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	22ff      	movs	r2, #255	@ 0xff
 80148aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2200      	movs	r2, #0
 80148b0:	729a      	strb	r2, [r3, #10]
 80148b2:	2200      	movs	r2, #0
 80148b4:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	9302      	str	r3, [sp, #8]
 80148ba:	2301      	movs	r3, #1
 80148bc:	9301      	str	r3, [sp, #4]
 80148be:	2300      	movs	r3, #0
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	23ff      	movs	r3, #255	@ 0xff
 80148c4:	2200      	movs	r2, #0
 80148c6:	69f9      	ldr	r1, [r7, #28]
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 fadb 	bl	8014e84 <ip4_output_if>
 80148ce:	4603      	mov	r3, r0
 80148d0:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 80148d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d015      	beq.n	8014906 <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 80148da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80148de:	4618      	mov	r0, r3
 80148e0:	f7f6 ff34 	bl	800b74c <lwip_strerr>
 80148e4:	4603      	mov	r3, r0
 80148e6:	4619      	mov	r1, r3
 80148e8:	4820      	ldr	r0, [pc, #128]	@ (801496c <icmp_input+0x2a4>)
 80148ea:	f002 f925 	bl	8016b38 <iprintf>
      break;
 80148ee:	e00a      	b.n	8014906 <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 80148f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80148f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80148f8:	4619      	mov	r1, r3
 80148fa:	481d      	ldr	r0, [pc, #116]	@ (8014970 <icmp_input+0x2a8>)
 80148fc:	f002 f91c 	bl	8016b38 <iprintf>
 8014900:	e002      	b.n	8014908 <icmp_input+0x240>
      break;
 8014902:	bf00      	nop
 8014904:	e000      	b.n	8014908 <icmp_input+0x240>
      break;
 8014906:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f7f8 fb8f 	bl	800d02c <pbuf_free>
  return;
 801490e:	e007      	b.n	8014920 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f7f8 fb8b 	bl	800d02c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014916:	e003      	b.n	8014920 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f7f8 fb87 	bl	800d02c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801491e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014920:	3728      	adds	r7, #40	@ 0x28
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	200054a8 	.word	0x200054a8
 801492c:	0801a7b0 	.word	0x0801a7b0
 8014930:	0801a7e4 	.word	0x0801a7e4
 8014934:	200054bc 	.word	0x200054bc
 8014938:	0801a814 	.word	0x0801a814
 801493c:	0801a840 	.word	0x0801a840
 8014940:	0801a86c 	.word	0x0801a86c
 8014944:	0801a880 	.word	0x0801a880
 8014948:	0801a8a4 	.word	0x0801a8a4
 801494c:	0801a8e0 	.word	0x0801a8e0
 8014950:	0801a908 	.word	0x0801a908
 8014954:	0801a930 	.word	0x0801a930
 8014958:	0801a968 	.word	0x0801a968
 801495c:	0801a9a0 	.word	0x0801a9a0
 8014960:	0801a9c8 	.word	0x0801a9c8
 8014964:	0801a9f0 	.word	0x0801a9f0
 8014968:	0801aa24 	.word	0x0801aa24
 801496c:	0801aa48 	.word	0x0801aa48
 8014970:	0801aa78 	.word	0x0801aa78

08014974 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	460b      	mov	r3, r1
 801497e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014980:	78fb      	ldrb	r3, [r7, #3]
 8014982:	461a      	mov	r2, r3
 8014984:	2103      	movs	r1, #3
 8014986:	6878      	ldr	r0, [r7, #4]
 8014988:	f000 f814 	bl	80149b4 <icmp_send_response>
}
 801498c:	bf00      	nop
 801498e:	3708      	adds	r7, #8
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}

08014994 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	460b      	mov	r3, r1
 801499e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80149a0:	78fb      	ldrb	r3, [r7, #3]
 80149a2:	461a      	mov	r2, r3
 80149a4:	210b      	movs	r1, #11
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f000 f804 	bl	80149b4 <icmp_send_response>
}
 80149ac:	bf00      	nop
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b08c      	sub	sp, #48	@ 0x30
 80149b8:	af04      	add	r7, sp, #16
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	460b      	mov	r3, r1
 80149be:	70fb      	strb	r3, [r7, #3]
 80149c0:	4613      	mov	r3, r2
 80149c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80149c4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80149c8:	2124      	movs	r1, #36	@ 0x24
 80149ca:	2022      	movs	r0, #34	@ 0x22
 80149cc:	f7f8 f84a 	bl	800ca64 <pbuf_alloc>
 80149d0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d103      	bne.n	80149e0 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 80149d8:	4844      	ldr	r0, [pc, #272]	@ (8014aec <icmp_send_response+0x138>)
 80149da:	f002 f91d 	bl	8016c18 <puts>
 80149de:	e082      	b.n	8014ae6 <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80149e0:	69fb      	ldr	r3, [r7, #28]
 80149e2:	895b      	ldrh	r3, [r3, #10]
 80149e4:	2b23      	cmp	r3, #35	@ 0x23
 80149e6:	d806      	bhi.n	80149f6 <icmp_send_response+0x42>
 80149e8:	4b41      	ldr	r3, [pc, #260]	@ (8014af0 <icmp_send_response+0x13c>)
 80149ea:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80149ee:	4941      	ldr	r1, [pc, #260]	@ (8014af4 <icmp_send_response+0x140>)
 80149f0:	4841      	ldr	r0, [pc, #260]	@ (8014af8 <icmp_send_response+0x144>)
 80149f2:	f002 f8a1 	bl	8016b38 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 80149fc:	483f      	ldr	r0, [pc, #252]	@ (8014afc <icmp_send_response+0x148>)
 80149fe:	f002 f89b 	bl	8016b38 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 8014a02:	69bb      	ldr	r3, [r7, #24]
 8014a04:	68db      	ldr	r3, [r3, #12]
 8014a06:	b2db      	uxtb	r3, r3
 8014a08:	4619      	mov	r1, r3
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	68db      	ldr	r3, [r3, #12]
 8014a0e:	0a1b      	lsrs	r3, r3, #8
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	461a      	mov	r2, r3
 8014a14:	69bb      	ldr	r3, [r7, #24]
 8014a16:	68db      	ldr	r3, [r3, #12]
 8014a18:	0c1b      	lsrs	r3, r3, #16
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	68db      	ldr	r3, [r3, #12]
 8014a22:	0e1b      	lsrs	r3, r3, #24
 8014a24:	b2db      	uxtb	r3, r3
 8014a26:	9300      	str	r3, [sp, #0]
 8014a28:	4603      	mov	r3, r0
 8014a2a:	4835      	ldr	r0, [pc, #212]	@ (8014b00 <icmp_send_response+0x14c>)
 8014a2c:	f002 f884 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 8014a30:	4834      	ldr	r0, [pc, #208]	@ (8014b04 <icmp_send_response+0x150>)
 8014a32:	f002 f881 	bl	8016b38 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 8014a36:	69bb      	ldr	r3, [r7, #24]
 8014a38:	691b      	ldr	r3, [r3, #16]
 8014a3a:	b2db      	uxtb	r3, r3
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	691b      	ldr	r3, [r3, #16]
 8014a42:	0a1b      	lsrs	r3, r3, #8
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	461a      	mov	r2, r3
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	691b      	ldr	r3, [r3, #16]
 8014a4c:	0c1b      	lsrs	r3, r3, #16
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	4618      	mov	r0, r3
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	691b      	ldr	r3, [r3, #16]
 8014a56:	0e1b      	lsrs	r3, r3, #24
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	4828      	ldr	r0, [pc, #160]	@ (8014b00 <icmp_send_response+0x14c>)
 8014a60:	f002 f86a 	bl	8016b38 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 8014a64:	200a      	movs	r0, #10
 8014a66:	f002 f879 	bl	8016b5c <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014a6a:	69fb      	ldr	r3, [r7, #28]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	78fa      	ldrb	r2, [r7, #3]
 8014a74:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	78ba      	ldrb	r2, [r7, #2]
 8014a7a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	2200      	movs	r2, #0
 8014a80:	711a      	strb	r2, [r3, #4]
 8014a82:	2200      	movs	r2, #0
 8014a84:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	2200      	movs	r2, #0
 8014a8a:	719a      	strb	r2, [r3, #6]
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014a90:	69fb      	ldr	r3, [r7, #28]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	f103 0008 	add.w	r0, r3, #8
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	221c      	movs	r2, #28
 8014a9e:	4619      	mov	r1, r3
 8014aa0:	f002 fa1f 	bl	8016ee2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014aaa:	f107 030c 	add.w	r3, r7, #12
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f000 f82a 	bl	8014b08 <ip4_route>
 8014ab4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014ab6:	693b      	ldr	r3, [r7, #16]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d011      	beq.n	8014ae0 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	709a      	strb	r2, [r3, #2]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014ac6:	f107 020c 	add.w	r2, r7, #12
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	9302      	str	r3, [sp, #8]
 8014ace:	2301      	movs	r3, #1
 8014ad0:	9301      	str	r3, [sp, #4]
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	9300      	str	r3, [sp, #0]
 8014ad6:	23ff      	movs	r3, #255	@ 0xff
 8014ad8:	2100      	movs	r1, #0
 8014ada:	69f8      	ldr	r0, [r7, #28]
 8014adc:	f000 f9d2 	bl	8014e84 <ip4_output_if>
  }
  pbuf_free(q);
 8014ae0:	69f8      	ldr	r0, [r7, #28]
 8014ae2:	f7f8 faa3 	bl	800d02c <pbuf_free>
}
 8014ae6:	3720      	adds	r7, #32
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	0801aaac 	.word	0x0801aaac
 8014af0:	0801a930 	.word	0x0801a930
 8014af4:	0801aaec 	.word	0x0801aaec
 8014af8:	0801a9a0 	.word	0x0801a9a0
 8014afc:	0801ab18 	.word	0x0801ab18
 8014b00:	0801ab34 	.word	0x0801ab34
 8014b04:	0801ab44 	.word	0x0801ab44

08014b08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014b08:	b480      	push	{r7}
 8014b0a:	b085      	sub	sp, #20
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014b10:	4b33      	ldr	r3, [pc, #204]	@ (8014be0 <ip4_route+0xd8>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	60fb      	str	r3, [r7, #12]
 8014b16:	e036      	b.n	8014b86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b1e:	f003 0301 	and.w	r3, r3, #1
 8014b22:	b2db      	uxtb	r3, r3
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d02b      	beq.n	8014b80 <ip4_route+0x78>
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b2e:	089b      	lsrs	r3, r3, #2
 8014b30:	f003 0301 	and.w	r3, r3, #1
 8014b34:	b2db      	uxtb	r3, r3
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d022      	beq.n	8014b80 <ip4_route+0x78>
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	3304      	adds	r3, #4
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d01d      	beq.n	8014b80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681a      	ldr	r2, [r3, #0]
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	405a      	eors	r2, r3
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	3308      	adds	r3, #8
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	4013      	ands	r3, r2
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d101      	bne.n	8014b60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	e038      	b.n	8014bd2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b66:	f003 0302 	and.w	r3, r3, #2
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d108      	bne.n	8014b80 <ip4_route+0x78>
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681a      	ldr	r2, [r3, #0]
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	330c      	adds	r3, #12
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	429a      	cmp	r2, r3
 8014b7a:	d101      	bne.n	8014b80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	e028      	b.n	8014bd2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	60fb      	str	r3, [r7, #12]
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d1c5      	bne.n	8014b18 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014b8c:	4b15      	ldr	r3, [pc, #84]	@ (8014be4 <ip4_route+0xdc>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d01a      	beq.n	8014bca <ip4_route+0xc2>
 8014b94:	4b13      	ldr	r3, [pc, #76]	@ (8014be4 <ip4_route+0xdc>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b9c:	f003 0301 	and.w	r3, r3, #1
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d012      	beq.n	8014bca <ip4_route+0xc2>
 8014ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8014be4 <ip4_route+0xdc>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014bac:	f003 0304 	and.w	r3, r3, #4
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d00a      	beq.n	8014bca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8014be4 <ip4_route+0xdc>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	3304      	adds	r3, #4
 8014bba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d004      	beq.n	8014bca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8014bc8:	d101      	bne.n	8014bce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	e001      	b.n	8014bd2 <ip4_route+0xca>
  }

  return netif_default;
 8014bce:	4b05      	ldr	r3, [pc, #20]	@ (8014be4 <ip4_route+0xdc>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3714      	adds	r7, #20
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop
 8014be0:	200083f8 	.word	0x200083f8
 8014be4:	200083fc 	.word	0x200083fc

08014be8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014bf6:	f003 0301 	and.w	r3, r3, #1
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d016      	beq.n	8014c2e <ip4_input_accept+0x46>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	3304      	adds	r3, #4
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d011      	beq.n	8014c2e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8014c38 <ip4_input_accept+0x50>)
 8014c0c:	695a      	ldr	r2, [r3, #20]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	3304      	adds	r3, #4
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d008      	beq.n	8014c2a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014c18:	4b07      	ldr	r3, [pc, #28]	@ (8014c38 <ip4_input_accept+0x50>)
 8014c1a:	695b      	ldr	r3, [r3, #20]
 8014c1c:	6879      	ldr	r1, [r7, #4]
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f000 fa08 	bl	8015034 <ip4_addr_isbroadcast_u32>
 8014c24:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d001      	beq.n	8014c2e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	e000      	b.n	8014c30 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014c2e:	2300      	movs	r3, #0
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3708      	adds	r7, #8
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	200054a8 	.word	0x200054a8

08014c3c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b086      	sub	sp, #24
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	685b      	ldr	r3, [r3, #4]
 8014c4a:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	781b      	ldrb	r3, [r3, #0]
 8014c50:	091b      	lsrs	r3, r3, #4
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	2b04      	cmp	r3, #4
 8014c56:	d004      	beq.n	8014c62 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f7f8 f9e7 	bl	800d02c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	e107      	b.n	8014e72 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	781b      	ldrb	r3, [r3, #0]
 8014c66:	f003 030f 	and.w	r3, r3, #15
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	885b      	ldrh	r3, [r3, #2]
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7f6 fd87 	bl	800b78c <lwip_htons>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	891b      	ldrh	r3, [r3, #8]
 8014c86:	89ba      	ldrh	r2, [r7, #12]
 8014c88:	429a      	cmp	r2, r3
 8014c8a:	d204      	bcs.n	8014c96 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014c8c:	89bb      	ldrh	r3, [r7, #12]
 8014c8e:	4619      	mov	r1, r3
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f7f8 f845 	bl	800cd20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	895b      	ldrh	r3, [r3, #10]
 8014c9a:	89fa      	ldrh	r2, [r7, #14]
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d807      	bhi.n	8014cb0 <ip4_input+0x74>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	891b      	ldrh	r3, [r3, #8]
 8014ca4:	89ba      	ldrh	r2, [r7, #12]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d802      	bhi.n	8014cb0 <ip4_input+0x74>
 8014caa:	89fb      	ldrh	r3, [r7, #14]
 8014cac:	2b13      	cmp	r3, #19
 8014cae:	d804      	bhi.n	8014cba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7f8 f9bb 	bl	800d02c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	e0db      	b.n	8014e72 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	691b      	ldr	r3, [r3, #16]
 8014cbe:	4a6f      	ldr	r2, [pc, #444]	@ (8014e7c <ip4_input+0x240>)
 8014cc0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	4a6d      	ldr	r2, [pc, #436]	@ (8014e7c <ip4_input+0x240>)
 8014cc8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014cca:	4b6c      	ldr	r3, [pc, #432]	@ (8014e7c <ip4_input+0x240>)
 8014ccc:	695b      	ldr	r3, [r3, #20]
 8014cce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014cd2:	2be0      	cmp	r3, #224	@ 0xe0
 8014cd4:	d112      	bne.n	8014cfc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cdc:	f003 0301 	and.w	r3, r3, #1
 8014ce0:	b2db      	uxtb	r3, r3
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d007      	beq.n	8014cf6 <ip4_input+0xba>
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	3304      	adds	r3, #4
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d002      	beq.n	8014cf6 <ip4_input+0xba>
      netif = inp;
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	617b      	str	r3, [r7, #20]
 8014cf4:	e02a      	b.n	8014d4c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	617b      	str	r3, [r7, #20]
 8014cfa:	e027      	b.n	8014d4c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014cfc:	6838      	ldr	r0, [r7, #0]
 8014cfe:	f7ff ff73 	bl	8014be8 <ip4_input_accept>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d002      	beq.n	8014d0e <ip4_input+0xd2>
      netif = inp;
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	617b      	str	r3, [r7, #20]
 8014d0c:	e01e      	b.n	8014d4c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014d12:	4b5a      	ldr	r3, [pc, #360]	@ (8014e7c <ip4_input+0x240>)
 8014d14:	695b      	ldr	r3, [r3, #20]
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d1a:	d017      	beq.n	8014d4c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014d1c:	4b58      	ldr	r3, [pc, #352]	@ (8014e80 <ip4_input+0x244>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	617b      	str	r3, [r7, #20]
 8014d22:	e00e      	b.n	8014d42 <ip4_input+0x106>
          if (netif == inp) {
 8014d24:	697a      	ldr	r2, [r7, #20]
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d006      	beq.n	8014d3a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014d2c:	6978      	ldr	r0, [r7, #20]
 8014d2e:	f7ff ff5b 	bl	8014be8 <ip4_input_accept>
 8014d32:	4603      	mov	r3, r0
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d108      	bne.n	8014d4a <ip4_input+0x10e>
 8014d38:	e000      	b.n	8014d3c <ip4_input+0x100>
            continue;
 8014d3a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	617b      	str	r3, [r7, #20]
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d1ed      	bne.n	8014d24 <ip4_input+0xe8>
 8014d48:	e000      	b.n	8014d4c <ip4_input+0x110>
            break;
 8014d4a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8014e7c <ip4_input+0x240>)
 8014d4e:	691b      	ldr	r3, [r3, #16]
 8014d50:	6839      	ldr	r1, [r7, #0]
 8014d52:	4618      	mov	r0, r3
 8014d54:	f000 f96e 	bl	8015034 <ip4_addr_isbroadcast_u32>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d105      	bne.n	8014d6a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014d5e:	4b47      	ldr	r3, [pc, #284]	@ (8014e7c <ip4_input+0x240>)
 8014d60:	691b      	ldr	r3, [r3, #16]
 8014d62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014d66:	2be0      	cmp	r3, #224	@ 0xe0
 8014d68:	d104      	bne.n	8014d74 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f7f8 f95e 	bl	800d02c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014d70:	2300      	movs	r3, #0
 8014d72:	e07e      	b.n	8014e72 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d104      	bne.n	8014d84 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f7f8 f956 	bl	800d02c <pbuf_free>
    return ERR_OK;
 8014d80:	2300      	movs	r3, #0
 8014d82:	e076      	b.n	8014e72 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	88db      	ldrh	r3, [r3, #6]
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014d90:	4013      	ands	r3, r2
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d00b      	beq.n	8014dae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f000 fc92 	bl	80156c0 <ip4_reass>
 8014d9c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d101      	bne.n	8014da8 <ip4_input+0x16c>
      return ERR_OK;
 8014da4:	2300      	movs	r3, #0
 8014da6:	e064      	b.n	8014e72 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014dae:	4a33      	ldr	r2, [pc, #204]	@ (8014e7c <ip4_input+0x240>)
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014db4:	4a31      	ldr	r2, [pc, #196]	@ (8014e7c <ip4_input+0x240>)
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014dba:	4a30      	ldr	r2, [pc, #192]	@ (8014e7c <ip4_input+0x240>)
 8014dbc:	693b      	ldr	r3, [r7, #16]
 8014dbe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	f003 030f 	and.w	r3, r3, #15
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	b2db      	uxtb	r3, r3
 8014dce:	461a      	mov	r2, r3
 8014dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8014e7c <ip4_input+0x240>)
 8014dd2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014dd4:	89fb      	ldrh	r3, [r7, #14]
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f7f8 f8a1 	bl	800cf20 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	7a5b      	ldrb	r3, [r3, #9]
 8014de2:	2b11      	cmp	r3, #17
 8014de4:	d006      	beq.n	8014df4 <ip4_input+0x1b8>
 8014de6:	2b11      	cmp	r3, #17
 8014de8:	dc13      	bgt.n	8014e12 <ip4_input+0x1d6>
 8014dea:	2b01      	cmp	r3, #1
 8014dec:	d00c      	beq.n	8014e08 <ip4_input+0x1cc>
 8014dee:	2b06      	cmp	r3, #6
 8014df0:	d005      	beq.n	8014dfe <ip4_input+0x1c2>
 8014df2:	e00e      	b.n	8014e12 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014df4:	6839      	ldr	r1, [r7, #0]
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f7fd ff20 	bl	8012c3c <udp_input>
        break;
 8014dfc:	e026      	b.n	8014e4c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014dfe:	6839      	ldr	r1, [r7, #0]
 8014e00:	6878      	ldr	r0, [r7, #4]
 8014e02:	f7f9 ff53 	bl	800ecac <tcp_input>
        break;
 8014e06:	e021      	b.n	8014e4c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014e08:	6839      	ldr	r1, [r7, #0]
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f7ff fc5c 	bl	80146c8 <icmp_input>
        break;
 8014e10:	e01c      	b.n	8014e4c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014e12:	4b1a      	ldr	r3, [pc, #104]	@ (8014e7c <ip4_input+0x240>)
 8014e14:	695b      	ldr	r3, [r3, #20]
 8014e16:	6979      	ldr	r1, [r7, #20]
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f000 f90b 	bl	8015034 <ip4_addr_isbroadcast_u32>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d10f      	bne.n	8014e44 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e24:	4b15      	ldr	r3, [pc, #84]	@ (8014e7c <ip4_input+0x240>)
 8014e26:	695b      	ldr	r3, [r3, #20]
 8014e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014e2c:	2be0      	cmp	r3, #224	@ 0xe0
 8014e2e:	d009      	beq.n	8014e44 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e34:	4619      	mov	r1, r3
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	f7f8 f8e5 	bl	800d006 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014e3c:	2102      	movs	r1, #2
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f7ff fd98 	bl	8014974 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014e44:	6878      	ldr	r0, [r7, #4]
 8014e46:	f7f8 f8f1 	bl	800d02c <pbuf_free>
        break;
 8014e4a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8014e7c <ip4_input+0x240>)
 8014e4e:	2200      	movs	r2, #0
 8014e50:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014e52:	4b0a      	ldr	r3, [pc, #40]	@ (8014e7c <ip4_input+0x240>)
 8014e54:	2200      	movs	r2, #0
 8014e56:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014e58:	4b08      	ldr	r3, [pc, #32]	@ (8014e7c <ip4_input+0x240>)
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014e5e:	4b07      	ldr	r3, [pc, #28]	@ (8014e7c <ip4_input+0x240>)
 8014e60:	2200      	movs	r2, #0
 8014e62:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014e64:	4b05      	ldr	r3, [pc, #20]	@ (8014e7c <ip4_input+0x240>)
 8014e66:	2200      	movs	r2, #0
 8014e68:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014e6a:	4b04      	ldr	r3, [pc, #16]	@ (8014e7c <ip4_input+0x240>)
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014e70:	2300      	movs	r3, #0
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3718      	adds	r7, #24
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	200054a8 	.word	0x200054a8
 8014e80:	200083f8 	.word	0x200083f8

08014e84 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b08a      	sub	sp, #40	@ 0x28
 8014e88:	af04      	add	r7, sp, #16
 8014e8a:	60f8      	str	r0, [r7, #12]
 8014e8c:	60b9      	str	r1, [r7, #8]
 8014e8e:	607a      	str	r2, [r7, #4]
 8014e90:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d009      	beq.n	8014eb0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d003      	beq.n	8014eaa <ip4_output_if+0x26>
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d102      	bne.n	8014eb0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eac:	3304      	adds	r3, #4
 8014eae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014eb0:	78fa      	ldrb	r2, [r7, #3]
 8014eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eb4:	9302      	str	r3, [sp, #8]
 8014eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014eba:	9301      	str	r3, [sp, #4]
 8014ebc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	4613      	mov	r3, r2
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	6979      	ldr	r1, [r7, #20]
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f000 f805 	bl	8014ed8 <ip4_output_if_src>
 8014ece:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3718      	adds	r7, #24
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b088      	sub	sp, #32
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	60f8      	str	r0, [r7, #12]
 8014ee0:	60b9      	str	r1, [r7, #8]
 8014ee2:	607a      	str	r2, [r7, #4]
 8014ee4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	7b9b      	ldrb	r3, [r3, #14]
 8014eea:	2b01      	cmp	r3, #1
 8014eec:	d006      	beq.n	8014efc <ip4_output_if_src+0x24>
 8014eee:	4b4b      	ldr	r3, [pc, #300]	@ (801501c <ip4_output_if_src+0x144>)
 8014ef0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014ef4:	494a      	ldr	r1, [pc, #296]	@ (8015020 <ip4_output_if_src+0x148>)
 8014ef6:	484b      	ldr	r0, [pc, #300]	@ (8015024 <ip4_output_if_src+0x14c>)
 8014ef8:	f001 fe1e 	bl	8016b38 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d060      	beq.n	8014fc4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014f02:	2314      	movs	r3, #20
 8014f04:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014f06:	2114      	movs	r1, #20
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f7f7 fff9 	bl	800cf00 <pbuf_add_header>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d002      	beq.n	8014f1a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014f14:	f06f 0301 	mvn.w	r3, #1
 8014f18:	e07c      	b.n	8015014 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	685b      	ldr	r3, [r3, #4]
 8014f1e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	895b      	ldrh	r3, [r3, #10]
 8014f24:	2b13      	cmp	r3, #19
 8014f26:	d806      	bhi.n	8014f36 <ip4_output_if_src+0x5e>
 8014f28:	4b3c      	ldr	r3, [pc, #240]	@ (801501c <ip4_output_if_src+0x144>)
 8014f2a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014f2e:	493e      	ldr	r1, [pc, #248]	@ (8015028 <ip4_output_if_src+0x150>)
 8014f30:	483c      	ldr	r0, [pc, #240]	@ (8015024 <ip4_output_if_src+0x14c>)
 8014f32:	f001 fe01 	bl	8016b38 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	78fa      	ldrb	r2, [r7, #3]
 8014f3a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014f3c:	69fb      	ldr	r3, [r7, #28]
 8014f3e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014f42:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681a      	ldr	r2, [r3, #0]
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014f4c:	8b7b      	ldrh	r3, [r7, #26]
 8014f4e:	089b      	lsrs	r3, r3, #2
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	b2db      	uxtb	r3, r3
 8014f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f58:	b2da      	uxtb	r2, r3
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014f5e:	69fb      	ldr	r3, [r7, #28]
 8014f60:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014f64:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	891b      	ldrh	r3, [r3, #8]
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f7f6 fc0e 	bl	800b78c <lwip_htons>
 8014f70:	4603      	mov	r3, r0
 8014f72:	461a      	mov	r2, r3
 8014f74:	69fb      	ldr	r3, [r7, #28]
 8014f76:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	719a      	strb	r2, [r3, #6]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014f82:	4b2a      	ldr	r3, [pc, #168]	@ (801502c <ip4_output_if_src+0x154>)
 8014f84:	881b      	ldrh	r3, [r3, #0]
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7f6 fc00 	bl	800b78c <lwip_htons>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	461a      	mov	r2, r3
 8014f90:	69fb      	ldr	r3, [r7, #28]
 8014f92:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014f94:	4b25      	ldr	r3, [pc, #148]	@ (801502c <ip4_output_if_src+0x154>)
 8014f96:	881b      	ldrh	r3, [r3, #0]
 8014f98:	3301      	adds	r3, #1
 8014f9a:	b29a      	uxth	r2, r3
 8014f9c:	4b23      	ldr	r3, [pc, #140]	@ (801502c <ip4_output_if_src+0x154>)
 8014f9e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d104      	bne.n	8014fb0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014fa6:	4b22      	ldr	r3, [pc, #136]	@ (8015030 <ip4_output_if_src+0x158>)
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	69fb      	ldr	r3, [r7, #28]
 8014fac:	60da      	str	r2, [r3, #12]
 8014fae:	e003      	b.n	8014fb8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	681a      	ldr	r2, [r3, #0]
 8014fb4:	69fb      	ldr	r3, [r7, #28]
 8014fb6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	729a      	strb	r2, [r3, #10]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	72da      	strb	r2, [r3, #11]
 8014fc2:	e00f      	b.n	8014fe4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	895b      	ldrh	r3, [r3, #10]
 8014fc8:	2b13      	cmp	r3, #19
 8014fca:	d802      	bhi.n	8014fd2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014fcc:	f06f 0301 	mvn.w	r3, #1
 8014fd0:	e020      	b.n	8015014 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014fd8:	69fb      	ldr	r3, [r7, #28]
 8014fda:	691b      	ldr	r3, [r3, #16]
 8014fdc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014fde:	f107 0314 	add.w	r3, r7, #20
 8014fe2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fe6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d00c      	beq.n	8015006 <ip4_output_if_src+0x12e>
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	891a      	ldrh	r2, [r3, #8]
 8014ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ff2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d906      	bls.n	8015006 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014ffc:	68f8      	ldr	r0, [r7, #12]
 8014ffe:	f000 fd53 	bl	8015aa8 <ip4_frag>
 8015002:	4603      	mov	r3, r0
 8015004:	e006      	b.n	8015014 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015008:	695b      	ldr	r3, [r3, #20]
 801500a:	687a      	ldr	r2, [r7, #4]
 801500c:	68f9      	ldr	r1, [r7, #12]
 801500e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015010:	4798      	blx	r3
 8015012:	4603      	mov	r3, r0
}
 8015014:	4618      	mov	r0, r3
 8015016:	3720      	adds	r7, #32
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}
 801501c:	0801ab4c 	.word	0x0801ab4c
 8015020:	0801ab80 	.word	0x0801ab80
 8015024:	0801ab8c 	.word	0x0801ab8c
 8015028:	0801abb4 	.word	0x0801abb4
 801502c:	2000855a 	.word	0x2000855a
 8015030:	0801b1f0 	.word	0x0801b1f0

08015034 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015034:	b480      	push	{r7}
 8015036:	b085      	sub	sp, #20
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015048:	d002      	beq.n	8015050 <ip4_addr_isbroadcast_u32+0x1c>
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d101      	bne.n	8015054 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015050:	2301      	movs	r3, #1
 8015052:	e02a      	b.n	80150aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801505a:	f003 0302 	and.w	r3, r3, #2
 801505e:	2b00      	cmp	r3, #0
 8015060:	d101      	bne.n	8015066 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015062:	2300      	movs	r3, #0
 8015064:	e021      	b.n	80150aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	3304      	adds	r3, #4
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	429a      	cmp	r2, r3
 8015070:	d101      	bne.n	8015076 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015072:	2300      	movs	r3, #0
 8015074:	e019      	b.n	80150aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015076:	68fa      	ldr	r2, [r7, #12]
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	3304      	adds	r3, #4
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	405a      	eors	r2, r3
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	3308      	adds	r3, #8
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	4013      	ands	r3, r2
 8015088:	2b00      	cmp	r3, #0
 801508a:	d10d      	bne.n	80150a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	3308      	adds	r3, #8
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	43da      	mvns	r2, r3
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	3308      	adds	r3, #8
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d101      	bne.n	80150a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80150a4:	2301      	movs	r3, #1
 80150a6:	e000      	b.n	80150aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80150a8:	2300      	movs	r3, #0
  }
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3714      	adds	r7, #20
 80150ae:	46bd      	mov	sp, r7
 80150b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b4:	4770      	bx	lr
	...

080150b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80150be:	2300      	movs	r3, #0
 80150c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80150c2:	4b12      	ldr	r3, [pc, #72]	@ (801510c <ip_reass_tmr+0x54>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80150c8:	e018      	b.n	80150fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	7fdb      	ldrb	r3, [r3, #31]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d00b      	beq.n	80150ea <ip_reass_tmr+0x32>
      r->timer--;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	7fdb      	ldrb	r3, [r3, #31]
 80150d6:	3b01      	subs	r3, #1
 80150d8:	b2da      	uxtb	r2, r3
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	60fb      	str	r3, [r7, #12]
 80150e8:	e008      	b.n	80150fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80150f4:	68b9      	ldr	r1, [r7, #8]
 80150f6:	6878      	ldr	r0, [r7, #4]
 80150f8:	f000 f80a 	bl	8015110 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d1e3      	bne.n	80150ca <ip_reass_tmr+0x12>
    }
  }
}
 8015102:	bf00      	nop
 8015104:	bf00      	nop
 8015106:	3710      	adds	r7, #16
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	2000855c 	.word	0x2000855c

08015110 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b088      	sub	sp, #32
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801511a:	2300      	movs	r3, #0
 801511c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801511e:	683a      	ldr	r2, [r7, #0]
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	429a      	cmp	r2, r3
 8015124:	d105      	bne.n	8015132 <ip_reass_free_complete_datagram+0x22>
 8015126:	4b45      	ldr	r3, [pc, #276]	@ (801523c <ip_reass_free_complete_datagram+0x12c>)
 8015128:	22ab      	movs	r2, #171	@ 0xab
 801512a:	4945      	ldr	r1, [pc, #276]	@ (8015240 <ip_reass_free_complete_datagram+0x130>)
 801512c:	4845      	ldr	r0, [pc, #276]	@ (8015244 <ip_reass_free_complete_datagram+0x134>)
 801512e:	f001 fd03 	bl	8016b38 <iprintf>
  if (prev != NULL) {
 8015132:	683b      	ldr	r3, [r7, #0]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d00a      	beq.n	801514e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	429a      	cmp	r2, r3
 8015140:	d005      	beq.n	801514e <ip_reass_free_complete_datagram+0x3e>
 8015142:	4b3e      	ldr	r3, [pc, #248]	@ (801523c <ip_reass_free_complete_datagram+0x12c>)
 8015144:	22ad      	movs	r2, #173	@ 0xad
 8015146:	4940      	ldr	r1, [pc, #256]	@ (8015248 <ip_reass_free_complete_datagram+0x138>)
 8015148:	483e      	ldr	r0, [pc, #248]	@ (8015244 <ip_reass_free_complete_datagram+0x134>)
 801514a:	f001 fcf5 	bl	8016b38 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	889b      	ldrh	r3, [r3, #4]
 801515a:	b29b      	uxth	r3, r3
 801515c:	2b00      	cmp	r3, #0
 801515e:	d12a      	bne.n	80151b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	681a      	ldr	r2, [r3, #0]
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	6858      	ldr	r0, [r3, #4]
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	3308      	adds	r3, #8
 8015176:	2214      	movs	r2, #20
 8015178:	4619      	mov	r1, r3
 801517a:	f001 feb2 	bl	8016ee2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801517e:	2101      	movs	r1, #1
 8015180:	69b8      	ldr	r0, [r7, #24]
 8015182:	f7ff fc07 	bl	8014994 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015186:	69b8      	ldr	r0, [r7, #24]
 8015188:	f7f7 ffd8 	bl	800d13c <pbuf_clen>
 801518c:	4603      	mov	r3, r0
 801518e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015190:	8bfa      	ldrh	r2, [r7, #30]
 8015192:	8a7b      	ldrh	r3, [r7, #18]
 8015194:	4413      	add	r3, r2
 8015196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801519a:	db05      	blt.n	80151a8 <ip_reass_free_complete_datagram+0x98>
 801519c:	4b27      	ldr	r3, [pc, #156]	@ (801523c <ip_reass_free_complete_datagram+0x12c>)
 801519e:	22bc      	movs	r2, #188	@ 0xbc
 80151a0:	492a      	ldr	r1, [pc, #168]	@ (801524c <ip_reass_free_complete_datagram+0x13c>)
 80151a2:	4828      	ldr	r0, [pc, #160]	@ (8015244 <ip_reass_free_complete_datagram+0x134>)
 80151a4:	f001 fcc8 	bl	8016b38 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80151a8:	8bfa      	ldrh	r2, [r7, #30]
 80151aa:	8a7b      	ldrh	r3, [r7, #18]
 80151ac:	4413      	add	r3, r2
 80151ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80151b0:	69b8      	ldr	r0, [r7, #24]
 80151b2:	f7f7 ff3b 	bl	800d02c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80151bc:	e01f      	b.n	80151fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80151c4:	69bb      	ldr	r3, [r7, #24]
 80151c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80151ce:	68f8      	ldr	r0, [r7, #12]
 80151d0:	f7f7 ffb4 	bl	800d13c <pbuf_clen>
 80151d4:	4603      	mov	r3, r0
 80151d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80151d8:	8bfa      	ldrh	r2, [r7, #30]
 80151da:	8a7b      	ldrh	r3, [r7, #18]
 80151dc:	4413      	add	r3, r2
 80151de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80151e2:	db05      	blt.n	80151f0 <ip_reass_free_complete_datagram+0xe0>
 80151e4:	4b15      	ldr	r3, [pc, #84]	@ (801523c <ip_reass_free_complete_datagram+0x12c>)
 80151e6:	22cc      	movs	r2, #204	@ 0xcc
 80151e8:	4918      	ldr	r1, [pc, #96]	@ (801524c <ip_reass_free_complete_datagram+0x13c>)
 80151ea:	4816      	ldr	r0, [pc, #88]	@ (8015244 <ip_reass_free_complete_datagram+0x134>)
 80151ec:	f001 fca4 	bl	8016b38 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80151f0:	8bfa      	ldrh	r2, [r7, #30]
 80151f2:	8a7b      	ldrh	r3, [r7, #18]
 80151f4:	4413      	add	r3, r2
 80151f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80151f8:	68f8      	ldr	r0, [r7, #12]
 80151fa:	f7f7 ff17 	bl	800d02c <pbuf_free>
  while (p != NULL) {
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d1dc      	bne.n	80151be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015204:	6839      	ldr	r1, [r7, #0]
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f000 f8c2 	bl	8015390 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801520c:	4b10      	ldr	r3, [pc, #64]	@ (8015250 <ip_reass_free_complete_datagram+0x140>)
 801520e:	881b      	ldrh	r3, [r3, #0]
 8015210:	8bfa      	ldrh	r2, [r7, #30]
 8015212:	429a      	cmp	r2, r3
 8015214:	d905      	bls.n	8015222 <ip_reass_free_complete_datagram+0x112>
 8015216:	4b09      	ldr	r3, [pc, #36]	@ (801523c <ip_reass_free_complete_datagram+0x12c>)
 8015218:	22d2      	movs	r2, #210	@ 0xd2
 801521a:	490e      	ldr	r1, [pc, #56]	@ (8015254 <ip_reass_free_complete_datagram+0x144>)
 801521c:	4809      	ldr	r0, [pc, #36]	@ (8015244 <ip_reass_free_complete_datagram+0x134>)
 801521e:	f001 fc8b 	bl	8016b38 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015222:	4b0b      	ldr	r3, [pc, #44]	@ (8015250 <ip_reass_free_complete_datagram+0x140>)
 8015224:	881a      	ldrh	r2, [r3, #0]
 8015226:	8bfb      	ldrh	r3, [r7, #30]
 8015228:	1ad3      	subs	r3, r2, r3
 801522a:	b29a      	uxth	r2, r3
 801522c:	4b08      	ldr	r3, [pc, #32]	@ (8015250 <ip_reass_free_complete_datagram+0x140>)
 801522e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015230:	8bfb      	ldrh	r3, [r7, #30]
}
 8015232:	4618      	mov	r0, r3
 8015234:	3720      	adds	r7, #32
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	0801abe4 	.word	0x0801abe4
 8015240:	0801ac20 	.word	0x0801ac20
 8015244:	0801ac2c 	.word	0x0801ac2c
 8015248:	0801ac54 	.word	0x0801ac54
 801524c:	0801ac68 	.word	0x0801ac68
 8015250:	20008560 	.word	0x20008560
 8015254:	0801ac88 	.word	0x0801ac88

08015258 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b08a      	sub	sp, #40	@ 0x28
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015262:	2300      	movs	r3, #0
 8015264:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015266:	2300      	movs	r3, #0
 8015268:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801526a:	2300      	movs	r3, #0
 801526c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801526e:	2300      	movs	r3, #0
 8015270:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015272:	2300      	movs	r3, #0
 8015274:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015276:	4b28      	ldr	r3, [pc, #160]	@ (8015318 <ip_reass_remove_oldest_datagram+0xc0>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801527c:	e030      	b.n	80152e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015280:	695a      	ldr	r2, [r3, #20]
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	68db      	ldr	r3, [r3, #12]
 8015286:	429a      	cmp	r2, r3
 8015288:	d10c      	bne.n	80152a4 <ip_reass_remove_oldest_datagram+0x4c>
 801528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801528c:	699a      	ldr	r2, [r3, #24]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	691b      	ldr	r3, [r3, #16]
 8015292:	429a      	cmp	r2, r3
 8015294:	d106      	bne.n	80152a4 <ip_reass_remove_oldest_datagram+0x4c>
 8015296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015298:	899a      	ldrh	r2, [r3, #12]
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	889b      	ldrh	r3, [r3, #4]
 801529e:	b29b      	uxth	r3, r3
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d014      	beq.n	80152ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	3301      	adds	r3, #1
 80152a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80152aa:	6a3b      	ldr	r3, [r7, #32]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d104      	bne.n	80152ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80152b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80152b4:	69fb      	ldr	r3, [r7, #28]
 80152b6:	61bb      	str	r3, [r7, #24]
 80152b8:	e009      	b.n	80152ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80152ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152bc:	7fda      	ldrb	r2, [r3, #31]
 80152be:	6a3b      	ldr	r3, [r7, #32]
 80152c0:	7fdb      	ldrb	r3, [r3, #31]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d803      	bhi.n	80152ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80152c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80152ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d001      	beq.n	80152da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80152d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80152da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80152e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1cb      	bne.n	801527e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80152e6:	6a3b      	ldr	r3, [r7, #32]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d008      	beq.n	80152fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80152ec:	69b9      	ldr	r1, [r7, #24]
 80152ee:	6a38      	ldr	r0, [r7, #32]
 80152f0:	f7ff ff0e 	bl	8015110 <ip_reass_free_complete_datagram>
 80152f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80152f6:	697a      	ldr	r2, [r7, #20]
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	4413      	add	r3, r2
 80152fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80152fe:	697a      	ldr	r2, [r7, #20]
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	da02      	bge.n	801530c <ip_reass_remove_oldest_datagram+0xb4>
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	2b01      	cmp	r3, #1
 801530a:	dcac      	bgt.n	8015266 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801530c:	697b      	ldr	r3, [r7, #20]
}
 801530e:	4618      	mov	r0, r3
 8015310:	3728      	adds	r7, #40	@ 0x28
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	2000855c 	.word	0x2000855c

0801531c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015326:	2004      	movs	r0, #4
 8015328:	f7f6 fea4 	bl	800c074 <memp_malloc>
 801532c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d110      	bne.n	8015356 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015334:	6839      	ldr	r1, [r7, #0]
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f7ff ff8e 	bl	8015258 <ip_reass_remove_oldest_datagram>
 801533c:	4602      	mov	r2, r0
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	4293      	cmp	r3, r2
 8015342:	dc03      	bgt.n	801534c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015344:	2004      	movs	r0, #4
 8015346:	f7f6 fe95 	bl	800c074 <memp_malloc>
 801534a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d101      	bne.n	8015356 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015352:	2300      	movs	r3, #0
 8015354:	e016      	b.n	8015384 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015356:	2220      	movs	r2, #32
 8015358:	2100      	movs	r1, #0
 801535a:	68f8      	ldr	r0, [r7, #12]
 801535c:	f001 fd4c 	bl	8016df8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	220f      	movs	r2, #15
 8015364:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015366:	4b09      	ldr	r3, [pc, #36]	@ (801538c <ip_reass_enqueue_new_datagram+0x70>)
 8015368:	681a      	ldr	r2, [r3, #0]
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801536e:	4a07      	ldr	r2, [pc, #28]	@ (801538c <ip_reass_enqueue_new_datagram+0x70>)
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	3308      	adds	r3, #8
 8015378:	2214      	movs	r2, #20
 801537a:	6879      	ldr	r1, [r7, #4]
 801537c:	4618      	mov	r0, r3
 801537e:	f001 fdb0 	bl	8016ee2 <memcpy>
  return ipr;
 8015382:	68fb      	ldr	r3, [r7, #12]
}
 8015384:	4618      	mov	r0, r3
 8015386:	3710      	adds	r7, #16
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}
 801538c:	2000855c 	.word	0x2000855c

08015390 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801539a:	4b10      	ldr	r3, [pc, #64]	@ (80153dc <ip_reass_dequeue_datagram+0x4c>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d104      	bne.n	80153ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	4a0c      	ldr	r2, [pc, #48]	@ (80153dc <ip_reass_dequeue_datagram+0x4c>)
 80153aa:	6013      	str	r3, [r2, #0]
 80153ac:	e00d      	b.n	80153ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d106      	bne.n	80153c2 <ip_reass_dequeue_datagram+0x32>
 80153b4:	4b0a      	ldr	r3, [pc, #40]	@ (80153e0 <ip_reass_dequeue_datagram+0x50>)
 80153b6:	f240 1245 	movw	r2, #325	@ 0x145
 80153ba:	490a      	ldr	r1, [pc, #40]	@ (80153e4 <ip_reass_dequeue_datagram+0x54>)
 80153bc:	480a      	ldr	r0, [pc, #40]	@ (80153e8 <ip_reass_dequeue_datagram+0x58>)
 80153be:	f001 fbbb 	bl	8016b38 <iprintf>
    prev->next = ipr->next;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80153ca:	6879      	ldr	r1, [r7, #4]
 80153cc:	2004      	movs	r0, #4
 80153ce:	f7f6 fec1 	bl	800c154 <memp_free>
}
 80153d2:	bf00      	nop
 80153d4:	3708      	adds	r7, #8
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	2000855c 	.word	0x2000855c
 80153e0:	0801abe4 	.word	0x0801abe4
 80153e4:	0801acac 	.word	0x0801acac
 80153e8:	0801ac2c 	.word	0x0801ac2c

080153ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b08c      	sub	sp, #48	@ 0x30
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	60f8      	str	r0, [r7, #12]
 80153f4:	60b9      	str	r1, [r7, #8]
 80153f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80153f8:	2300      	movs	r3, #0
 80153fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80153fc:	2301      	movs	r3, #1
 80153fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	685b      	ldr	r3, [r3, #4]
 8015404:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015406:	69fb      	ldr	r3, [r7, #28]
 8015408:	885b      	ldrh	r3, [r3, #2]
 801540a:	b29b      	uxth	r3, r3
 801540c:	4618      	mov	r0, r3
 801540e:	f7f6 f9bd 	bl	800b78c <lwip_htons>
 8015412:	4603      	mov	r3, r0
 8015414:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015416:	69fb      	ldr	r3, [r7, #28]
 8015418:	781b      	ldrb	r3, [r3, #0]
 801541a:	f003 030f 	and.w	r3, r3, #15
 801541e:	b2db      	uxtb	r3, r3
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015424:	7e7b      	ldrb	r3, [r7, #25]
 8015426:	b29b      	uxth	r3, r3
 8015428:	8b7a      	ldrh	r2, [r7, #26]
 801542a:	429a      	cmp	r2, r3
 801542c:	d202      	bcs.n	8015434 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801542e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015432:	e135      	b.n	80156a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015434:	7e7b      	ldrb	r3, [r7, #25]
 8015436:	b29b      	uxth	r3, r3
 8015438:	8b7a      	ldrh	r2, [r7, #26]
 801543a:	1ad3      	subs	r3, r2, r3
 801543c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	88db      	ldrh	r3, [r3, #6]
 8015442:	b29b      	uxth	r3, r3
 8015444:	4618      	mov	r0, r3
 8015446:	f7f6 f9a1 	bl	800b78c <lwip_htons>
 801544a:	4603      	mov	r3, r0
 801544c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015450:	b29b      	uxth	r3, r3
 8015452:	00db      	lsls	r3, r3, #3
 8015454:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801545e:	2200      	movs	r2, #0
 8015460:	701a      	strb	r2, [r3, #0]
 8015462:	2200      	movs	r2, #0
 8015464:	705a      	strb	r2, [r3, #1]
 8015466:	2200      	movs	r2, #0
 8015468:	709a      	strb	r2, [r3, #2]
 801546a:	2200      	movs	r2, #0
 801546c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015470:	8afa      	ldrh	r2, [r7, #22]
 8015472:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015474:	8afa      	ldrh	r2, [r7, #22]
 8015476:	8b7b      	ldrh	r3, [r7, #26]
 8015478:	4413      	add	r3, r2
 801547a:	b29a      	uxth	r2, r3
 801547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801547e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015482:	88db      	ldrh	r3, [r3, #6]
 8015484:	b29b      	uxth	r3, r3
 8015486:	8afa      	ldrh	r2, [r7, #22]
 8015488:	429a      	cmp	r2, r3
 801548a:	d902      	bls.n	8015492 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801548c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015490:	e106      	b.n	80156a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	627b      	str	r3, [r7, #36]	@ 0x24
 8015498:	e068      	b.n	801556c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80154a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a2:	889b      	ldrh	r3, [r3, #4]
 80154a4:	b29a      	uxth	r2, r3
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	889b      	ldrh	r3, [r3, #4]
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d235      	bcs.n	801551c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80154b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80154b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80154b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d020      	beq.n	80154fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80154bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154be:	889b      	ldrh	r3, [r3, #4]
 80154c0:	b29a      	uxth	r2, r3
 80154c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154c4:	88db      	ldrh	r3, [r3, #6]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d307      	bcc.n	80154dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80154cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ce:	88db      	ldrh	r3, [r3, #6]
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	889b      	ldrh	r3, [r3, #4]
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	429a      	cmp	r2, r3
 80154da:	d902      	bls.n	80154e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80154dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80154e0:	e0de      	b.n	80156a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80154e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154e4:	68ba      	ldr	r2, [r7, #8]
 80154e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80154e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154ea:	88db      	ldrh	r3, [r3, #6]
 80154ec:	b29a      	uxth	r2, r3
 80154ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f0:	889b      	ldrh	r3, [r3, #4]
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d03d      	beq.n	8015574 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80154f8:	2300      	movs	r3, #0
 80154fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80154fc:	e03a      	b.n	8015574 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80154fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015500:	88db      	ldrh	r3, [r3, #6]
 8015502:	b29a      	uxth	r2, r3
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	889b      	ldrh	r3, [r3, #4]
 8015508:	b29b      	uxth	r3, r3
 801550a:	429a      	cmp	r2, r3
 801550c:	d902      	bls.n	8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801550e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015512:	e0c5      	b.n	80156a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	68ba      	ldr	r2, [r7, #8]
 8015518:	605a      	str	r2, [r3, #4]
      break;
 801551a:	e02b      	b.n	8015574 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801551e:	889b      	ldrh	r3, [r3, #4]
 8015520:	b29a      	uxth	r2, r3
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	889b      	ldrh	r3, [r3, #4]
 8015526:	b29b      	uxth	r3, r3
 8015528:	429a      	cmp	r2, r3
 801552a:	d102      	bne.n	8015532 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801552c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015530:	e0b6      	b.n	80156a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015534:	889b      	ldrh	r3, [r3, #4]
 8015536:	b29a      	uxth	r2, r3
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	88db      	ldrh	r3, [r3, #6]
 801553c:	b29b      	uxth	r3, r3
 801553e:	429a      	cmp	r2, r3
 8015540:	d202      	bcs.n	8015548 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015546:	e0ab      	b.n	80156a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801554a:	2b00      	cmp	r3, #0
 801554c:	d009      	beq.n	8015562 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015550:	88db      	ldrh	r3, [r3, #6]
 8015552:	b29a      	uxth	r2, r3
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	889b      	ldrh	r3, [r3, #4]
 8015558:	b29b      	uxth	r3, r3
 801555a:	429a      	cmp	r2, r3
 801555c:	d001      	beq.n	8015562 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801555e:	2300      	movs	r3, #0
 8015560:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015562:	693b      	ldr	r3, [r7, #16]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015568:	693b      	ldr	r3, [r7, #16]
 801556a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801556e:	2b00      	cmp	r3, #0
 8015570:	d193      	bne.n	801549a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015572:	e000      	b.n	8015576 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015574:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015578:	2b00      	cmp	r3, #0
 801557a:	d12d      	bne.n	80155d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801557e:	2b00      	cmp	r3, #0
 8015580:	d01c      	beq.n	80155bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015584:	88db      	ldrh	r3, [r3, #6]
 8015586:	b29a      	uxth	r2, r3
 8015588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801558a:	889b      	ldrh	r3, [r3, #4]
 801558c:	b29b      	uxth	r3, r3
 801558e:	429a      	cmp	r2, r3
 8015590:	d906      	bls.n	80155a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015592:	4b45      	ldr	r3, [pc, #276]	@ (80156a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015594:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015598:	4944      	ldr	r1, [pc, #272]	@ (80156ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801559a:	4845      	ldr	r0, [pc, #276]	@ (80156b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801559c:	f001 facc 	bl	8016b38 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80155a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155a2:	68ba      	ldr	r2, [r7, #8]
 80155a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80155a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155a8:	88db      	ldrh	r3, [r3, #6]
 80155aa:	b29a      	uxth	r2, r3
 80155ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ae:	889b      	ldrh	r3, [r3, #4]
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d010      	beq.n	80155d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80155b6:	2300      	movs	r3, #0
 80155b8:	623b      	str	r3, [r7, #32]
 80155ba:	e00d      	b.n	80155d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d006      	beq.n	80155d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80155c4:	4b38      	ldr	r3, [pc, #224]	@ (80156a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80155c6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80155ca:	493a      	ldr	r1, [pc, #232]	@ (80156b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80155cc:	4838      	ldr	r0, [pc, #224]	@ (80156b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80155ce:	f001 fab3 	bl	8016b38 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	68ba      	ldr	r2, [r7, #8]
 80155d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d105      	bne.n	80155ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	7f9b      	ldrb	r3, [r3, #30]
 80155e2:	f003 0301 	and.w	r3, r3, #1
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d059      	beq.n	801569e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80155ea:	6a3b      	ldr	r3, [r7, #32]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d04f      	beq.n	8015690 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d006      	beq.n	8015606 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	685b      	ldr	r3, [r3, #4]
 80155fe:	889b      	ldrh	r3, [r3, #4]
 8015600:	b29b      	uxth	r3, r3
 8015602:	2b00      	cmp	r3, #0
 8015604:	d002      	beq.n	801560c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015606:	2300      	movs	r3, #0
 8015608:	623b      	str	r3, [r7, #32]
 801560a:	e041      	b.n	8015690 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801560c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801560e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015616:	e012      	b.n	801563e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015620:	88db      	ldrh	r3, [r3, #6]
 8015622:	b29a      	uxth	r2, r3
 8015624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015626:	889b      	ldrh	r3, [r3, #4]
 8015628:	b29b      	uxth	r3, r3
 801562a:	429a      	cmp	r2, r3
 801562c:	d002      	beq.n	8015634 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801562e:	2300      	movs	r3, #0
 8015630:	623b      	str	r3, [r7, #32]
            break;
 8015632:	e007      	b.n	8015644 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015636:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015640:	2b00      	cmp	r3, #0
 8015642:	d1e9      	bne.n	8015618 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015644:	6a3b      	ldr	r3, [r7, #32]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d022      	beq.n	8015690 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d106      	bne.n	8015660 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015652:	4b15      	ldr	r3, [pc, #84]	@ (80156a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015654:	f240 12df 	movw	r2, #479	@ 0x1df
 8015658:	4917      	ldr	r1, [pc, #92]	@ (80156b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801565a:	4815      	ldr	r0, [pc, #84]	@ (80156b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801565c:	f001 fa6c 	bl	8016b38 <iprintf>
          LWIP_ASSERT("sanity check",
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015668:	429a      	cmp	r2, r3
 801566a:	d106      	bne.n	801567a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801566c:	4b0e      	ldr	r3, [pc, #56]	@ (80156a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801566e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015672:	4911      	ldr	r1, [pc, #68]	@ (80156b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015674:	480e      	ldr	r0, [pc, #56]	@ (80156b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015676:	f001 fa5f 	bl	8016b38 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801567a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d006      	beq.n	8015690 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015682:	4b09      	ldr	r3, [pc, #36]	@ (80156a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015684:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015688:	490c      	ldr	r1, [pc, #48]	@ (80156bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801568a:	4809      	ldr	r0, [pc, #36]	@ (80156b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801568c:	f001 fa54 	bl	8016b38 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015690:	6a3b      	ldr	r3, [r7, #32]
 8015692:	2b00      	cmp	r3, #0
 8015694:	bf14      	ite	ne
 8015696:	2301      	movne	r3, #1
 8015698:	2300      	moveq	r3, #0
 801569a:	b2db      	uxtb	r3, r3
 801569c:	e000      	b.n	80156a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801569e:	2300      	movs	r3, #0
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3730      	adds	r7, #48	@ 0x30
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}
 80156a8:	0801abe4 	.word	0x0801abe4
 80156ac:	0801acc8 	.word	0x0801acc8
 80156b0:	0801ac2c 	.word	0x0801ac2c
 80156b4:	0801ace8 	.word	0x0801ace8
 80156b8:	0801ad20 	.word	0x0801ad20
 80156bc:	0801ad30 	.word	0x0801ad30

080156c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b08e      	sub	sp, #56	@ 0x38
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80156ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	f003 030f 	and.w	r3, r3, #15
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	009b      	lsls	r3, r3, #2
 80156da:	b2db      	uxtb	r3, r3
 80156dc:	2b14      	cmp	r3, #20
 80156de:	f040 8171 	bne.w	80159c4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80156e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156e4:	88db      	ldrh	r3, [r3, #6]
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7f6 f84f 	bl	800b78c <lwip_htons>
 80156ee:	4603      	mov	r3, r0
 80156f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	00db      	lsls	r3, r3, #3
 80156f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80156fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156fc:	885b      	ldrh	r3, [r3, #2]
 80156fe:	b29b      	uxth	r3, r3
 8015700:	4618      	mov	r0, r3
 8015702:	f7f6 f843 	bl	800b78c <lwip_htons>
 8015706:	4603      	mov	r3, r0
 8015708:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	f003 030f 	and.w	r3, r3, #15
 8015712:	b2db      	uxtb	r3, r3
 8015714:	009b      	lsls	r3, r3, #2
 8015716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801571a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801571e:	b29b      	uxth	r3, r3
 8015720:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015722:	429a      	cmp	r2, r3
 8015724:	f0c0 8150 	bcc.w	80159c8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801572c:	b29b      	uxth	r3, r3
 801572e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015730:	1ad3      	subs	r3, r2, r3
 8015732:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f7f7 fd01 	bl	800d13c <pbuf_clen>
 801573a:	4603      	mov	r3, r0
 801573c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801573e:	4b8c      	ldr	r3, [pc, #560]	@ (8015970 <ip4_reass+0x2b0>)
 8015740:	881b      	ldrh	r3, [r3, #0]
 8015742:	461a      	mov	r2, r3
 8015744:	8c3b      	ldrh	r3, [r7, #32]
 8015746:	4413      	add	r3, r2
 8015748:	2b0a      	cmp	r3, #10
 801574a:	dd10      	ble.n	801576e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801574c:	8c3b      	ldrh	r3, [r7, #32]
 801574e:	4619      	mov	r1, r3
 8015750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015752:	f7ff fd81 	bl	8015258 <ip_reass_remove_oldest_datagram>
 8015756:	4603      	mov	r3, r0
 8015758:	2b00      	cmp	r3, #0
 801575a:	f000 8137 	beq.w	80159cc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801575e:	4b84      	ldr	r3, [pc, #528]	@ (8015970 <ip4_reass+0x2b0>)
 8015760:	881b      	ldrh	r3, [r3, #0]
 8015762:	461a      	mov	r2, r3
 8015764:	8c3b      	ldrh	r3, [r7, #32]
 8015766:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015768:	2b0a      	cmp	r3, #10
 801576a:	f300 812f 	bgt.w	80159cc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801576e:	4b81      	ldr	r3, [pc, #516]	@ (8015974 <ip4_reass+0x2b4>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	633b      	str	r3, [r7, #48]	@ 0x30
 8015774:	e015      	b.n	80157a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015778:	695a      	ldr	r2, [r3, #20]
 801577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801577c:	68db      	ldr	r3, [r3, #12]
 801577e:	429a      	cmp	r2, r3
 8015780:	d10c      	bne.n	801579c <ip4_reass+0xdc>
 8015782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015784:	699a      	ldr	r2, [r3, #24]
 8015786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015788:	691b      	ldr	r3, [r3, #16]
 801578a:	429a      	cmp	r2, r3
 801578c:	d106      	bne.n	801579c <ip4_reass+0xdc>
 801578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015790:	899a      	ldrh	r2, [r3, #12]
 8015792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015794:	889b      	ldrh	r3, [r3, #4]
 8015796:	b29b      	uxth	r3, r3
 8015798:	429a      	cmp	r2, r3
 801579a:	d006      	beq.n	80157aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80157a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d1e6      	bne.n	8015776 <ip4_reass+0xb6>
 80157a8:	e000      	b.n	80157ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80157aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80157ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d109      	bne.n	80157c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80157b2:	8c3b      	ldrh	r3, [r7, #32]
 80157b4:	4619      	mov	r1, r3
 80157b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80157b8:	f7ff fdb0 	bl	801531c <ip_reass_enqueue_new_datagram>
 80157bc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80157be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d11c      	bne.n	80157fe <ip4_reass+0x13e>
      goto nullreturn;
 80157c4:	e105      	b.n	80159d2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80157c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157c8:	88db      	ldrh	r3, [r3, #6]
 80157ca:	b29b      	uxth	r3, r3
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7f5 ffdd 	bl	800b78c <lwip_htons>
 80157d2:	4603      	mov	r3, r0
 80157d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d110      	bne.n	80157fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80157dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157de:	89db      	ldrh	r3, [r3, #14]
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7f5 ffd3 	bl	800b78c <lwip_htons>
 80157e6:	4603      	mov	r3, r0
 80157e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d006      	beq.n	80157fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80157f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157f2:	3308      	adds	r3, #8
 80157f4:	2214      	movs	r2, #20
 80157f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80157f8:	4618      	mov	r0, r3
 80157fa:	f001 fb72 	bl	8016ee2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80157fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015800:	88db      	ldrh	r3, [r3, #6]
 8015802:	b29b      	uxth	r3, r3
 8015804:	f003 0320 	and.w	r3, r3, #32
 8015808:	2b00      	cmp	r3, #0
 801580a:	bf0c      	ite	eq
 801580c:	2301      	moveq	r3, #1
 801580e:	2300      	movne	r3, #0
 8015810:	b2db      	uxtb	r3, r3
 8015812:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d00e      	beq.n	8015838 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801581a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801581c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801581e:	4413      	add	r3, r2
 8015820:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015822:	8b7a      	ldrh	r2, [r7, #26]
 8015824:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015826:	429a      	cmp	r2, r3
 8015828:	f0c0 80a0 	bcc.w	801596c <ip4_reass+0x2ac>
 801582c:	8b7b      	ldrh	r3, [r7, #26]
 801582e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015832:	4293      	cmp	r3, r2
 8015834:	f200 809a 	bhi.w	801596c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015838:	69fa      	ldr	r2, [r7, #28]
 801583a:	6879      	ldr	r1, [r7, #4]
 801583c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801583e:	f7ff fdd5 	bl	80153ec <ip_reass_chain_frag_into_datagram_and_validate>
 8015842:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801584a:	f000 809b 	beq.w	8015984 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801584e:	4b48      	ldr	r3, [pc, #288]	@ (8015970 <ip4_reass+0x2b0>)
 8015850:	881a      	ldrh	r2, [r3, #0]
 8015852:	8c3b      	ldrh	r3, [r7, #32]
 8015854:	4413      	add	r3, r2
 8015856:	b29a      	uxth	r2, r3
 8015858:	4b45      	ldr	r3, [pc, #276]	@ (8015970 <ip4_reass+0x2b0>)
 801585a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d00d      	beq.n	801587e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015862:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015866:	4413      	add	r3, r2
 8015868:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801586c:	8a7a      	ldrh	r2, [r7, #18]
 801586e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015872:	7f9b      	ldrb	r3, [r3, #30]
 8015874:	f043 0301 	orr.w	r3, r3, #1
 8015878:	b2da      	uxtb	r2, r3
 801587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801587c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	2b01      	cmp	r3, #1
 8015882:	d171      	bne.n	8015968 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015886:	8b9b      	ldrh	r3, [r3, #28]
 8015888:	3314      	adds	r3, #20
 801588a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	685b      	ldr	r3, [r3, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	685b      	ldr	r3, [r3, #4]
 801589c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158a0:	3308      	adds	r3, #8
 80158a2:	2214      	movs	r2, #20
 80158a4:	4619      	mov	r1, r3
 80158a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158a8:	f001 fb1b 	bl	8016ee2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80158ac:	8a3b      	ldrh	r3, [r7, #16]
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7f5 ff6c 	bl	800b78c <lwip_htons>
 80158b4:	4603      	mov	r3, r0
 80158b6:	461a      	mov	r2, r3
 80158b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80158bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158be:	2200      	movs	r2, #0
 80158c0:	719a      	strb	r2, [r3, #6]
 80158c2:	2200      	movs	r2, #0
 80158c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80158c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158c8:	2200      	movs	r2, #0
 80158ca:	729a      	strb	r2, [r3, #10]
 80158cc:	2200      	movs	r2, #0
 80158ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80158d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158d2:	685b      	ldr	r3, [r3, #4]
 80158d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80158d6:	e00d      	b.n	80158f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80158d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80158de:	2114      	movs	r1, #20
 80158e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158e2:	f7f7 fb1d 	bl	800cf20 <pbuf_remove_header>
      pbuf_cat(p, r);
 80158e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7f7 fc61 	bl	800d1b0 <pbuf_cat>
      r = iprh->next_pbuf;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 80158f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d1ee      	bne.n	80158d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80158fa:	4b1e      	ldr	r3, [pc, #120]	@ (8015974 <ip4_reass+0x2b4>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015900:	429a      	cmp	r2, r3
 8015902:	d102      	bne.n	801590a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015904:	2300      	movs	r3, #0
 8015906:	637b      	str	r3, [r7, #52]	@ 0x34
 8015908:	e010      	b.n	801592c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801590a:	4b1a      	ldr	r3, [pc, #104]	@ (8015974 <ip4_reass+0x2b4>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015910:	e007      	b.n	8015922 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015918:	429a      	cmp	r2, r3
 801591a:	d006      	beq.n	801592a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801591c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	637b      	str	r3, [r7, #52]	@ 0x34
 8015922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015924:	2b00      	cmp	r3, #0
 8015926:	d1f4      	bne.n	8015912 <ip4_reass+0x252>
 8015928:	e000      	b.n	801592c <ip4_reass+0x26c>
          break;
 801592a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801592c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801592e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015930:	f7ff fd2e 	bl	8015390 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f7f7 fc01 	bl	800d13c <pbuf_clen>
 801593a:	4603      	mov	r3, r0
 801593c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801593e:	4b0c      	ldr	r3, [pc, #48]	@ (8015970 <ip4_reass+0x2b0>)
 8015940:	881b      	ldrh	r3, [r3, #0]
 8015942:	8c3a      	ldrh	r2, [r7, #32]
 8015944:	429a      	cmp	r2, r3
 8015946:	d906      	bls.n	8015956 <ip4_reass+0x296>
 8015948:	4b0b      	ldr	r3, [pc, #44]	@ (8015978 <ip4_reass+0x2b8>)
 801594a:	f240 229b 	movw	r2, #667	@ 0x29b
 801594e:	490b      	ldr	r1, [pc, #44]	@ (801597c <ip4_reass+0x2bc>)
 8015950:	480b      	ldr	r0, [pc, #44]	@ (8015980 <ip4_reass+0x2c0>)
 8015952:	f001 f8f1 	bl	8016b38 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015956:	4b06      	ldr	r3, [pc, #24]	@ (8015970 <ip4_reass+0x2b0>)
 8015958:	881a      	ldrh	r2, [r3, #0]
 801595a:	8c3b      	ldrh	r3, [r7, #32]
 801595c:	1ad3      	subs	r3, r2, r3
 801595e:	b29a      	uxth	r2, r3
 8015960:	4b03      	ldr	r3, [pc, #12]	@ (8015970 <ip4_reass+0x2b0>)
 8015962:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	e038      	b.n	80159da <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015968:	2300      	movs	r3, #0
 801596a:	e036      	b.n	80159da <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801596c:	bf00      	nop
 801596e:	e00a      	b.n	8015986 <ip4_reass+0x2c6>
 8015970:	20008560 	.word	0x20008560
 8015974:	2000855c 	.word	0x2000855c
 8015978:	0801abe4 	.word	0x0801abe4
 801597c:	0801ad54 	.word	0x0801ad54
 8015980:	0801ac2c 	.word	0x0801ac2c
    goto nullreturn_ipr;
 8015984:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015988:	2b00      	cmp	r3, #0
 801598a:	d106      	bne.n	801599a <ip4_reass+0x2da>
 801598c:	4b15      	ldr	r3, [pc, #84]	@ (80159e4 <ip4_reass+0x324>)
 801598e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015992:	4915      	ldr	r1, [pc, #84]	@ (80159e8 <ip4_reass+0x328>)
 8015994:	4815      	ldr	r0, [pc, #84]	@ (80159ec <ip4_reass+0x32c>)
 8015996:	f001 f8cf 	bl	8016b38 <iprintf>
  if (ipr->p == NULL) {
 801599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801599c:	685b      	ldr	r3, [r3, #4]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d116      	bne.n	80159d0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80159a2:	4b13      	ldr	r3, [pc, #76]	@ (80159f0 <ip4_reass+0x330>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80159a8:	429a      	cmp	r2, r3
 80159aa:	d006      	beq.n	80159ba <ip4_reass+0x2fa>
 80159ac:	4b0d      	ldr	r3, [pc, #52]	@ (80159e4 <ip4_reass+0x324>)
 80159ae:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80159b2:	4910      	ldr	r1, [pc, #64]	@ (80159f4 <ip4_reass+0x334>)
 80159b4:	480d      	ldr	r0, [pc, #52]	@ (80159ec <ip4_reass+0x32c>)
 80159b6:	f001 f8bf 	bl	8016b38 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80159ba:	2100      	movs	r1, #0
 80159bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80159be:	f7ff fce7 	bl	8015390 <ip_reass_dequeue_datagram>
 80159c2:	e006      	b.n	80159d2 <ip4_reass+0x312>
    goto nullreturn;
 80159c4:	bf00      	nop
 80159c6:	e004      	b.n	80159d2 <ip4_reass+0x312>
    goto nullreturn;
 80159c8:	bf00      	nop
 80159ca:	e002      	b.n	80159d2 <ip4_reass+0x312>
      goto nullreturn;
 80159cc:	bf00      	nop
 80159ce:	e000      	b.n	80159d2 <ip4_reass+0x312>
  }

nullreturn:
 80159d0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f7f7 fb2a 	bl	800d02c <pbuf_free>
  return NULL;
 80159d8:	2300      	movs	r3, #0
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3738      	adds	r7, #56	@ 0x38
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	0801abe4 	.word	0x0801abe4
 80159e8:	0801ad70 	.word	0x0801ad70
 80159ec:	0801ac2c 	.word	0x0801ac2c
 80159f0:	2000855c 	.word	0x2000855c
 80159f4:	0801ad7c 	.word	0x0801ad7c

080159f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80159fc:	2005      	movs	r0, #5
 80159fe:	f7f6 fb39 	bl	800c074 <memp_malloc>
 8015a02:	4603      	mov	r3, r0
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	bd80      	pop	{r7, pc}

08015a08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b082      	sub	sp, #8
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d106      	bne.n	8015a24 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015a16:	4b07      	ldr	r3, [pc, #28]	@ (8015a34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015a18:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015a1c:	4906      	ldr	r1, [pc, #24]	@ (8015a38 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015a1e:	4807      	ldr	r0, [pc, #28]	@ (8015a3c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015a20:	f001 f88a 	bl	8016b38 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015a24:	6879      	ldr	r1, [r7, #4]
 8015a26:	2005      	movs	r0, #5
 8015a28:	f7f6 fb94 	bl	800c154 <memp_free>
}
 8015a2c:	bf00      	nop
 8015a2e:	3708      	adds	r7, #8
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	0801abe4 	.word	0x0801abe4
 8015a38:	0801ad9c 	.word	0x0801ad9c
 8015a3c:	0801ac2c 	.word	0x0801ac2c

08015a40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b084      	sub	sp, #16
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d106      	bne.n	8015a60 <ipfrag_free_pbuf_custom+0x20>
 8015a52:	4b11      	ldr	r3, [pc, #68]	@ (8015a98 <ipfrag_free_pbuf_custom+0x58>)
 8015a54:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015a58:	4910      	ldr	r1, [pc, #64]	@ (8015a9c <ipfrag_free_pbuf_custom+0x5c>)
 8015a5a:	4811      	ldr	r0, [pc, #68]	@ (8015aa0 <ipfrag_free_pbuf_custom+0x60>)
 8015a5c:	f001 f86c 	bl	8016b38 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015a60:	68fa      	ldr	r2, [r7, #12]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d006      	beq.n	8015a76 <ipfrag_free_pbuf_custom+0x36>
 8015a68:	4b0b      	ldr	r3, [pc, #44]	@ (8015a98 <ipfrag_free_pbuf_custom+0x58>)
 8015a6a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015a6e:	490d      	ldr	r1, [pc, #52]	@ (8015aa4 <ipfrag_free_pbuf_custom+0x64>)
 8015a70:	480b      	ldr	r0, [pc, #44]	@ (8015aa0 <ipfrag_free_pbuf_custom+0x60>)
 8015a72:	f001 f861 	bl	8016b38 <iprintf>
  if (pcr->original != NULL) {
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	695b      	ldr	r3, [r3, #20]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d004      	beq.n	8015a88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	695b      	ldr	r3, [r3, #20]
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7f7 fad2 	bl	800d02c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015a88:	68f8      	ldr	r0, [r7, #12]
 8015a8a:	f7ff ffbd 	bl	8015a08 <ip_frag_free_pbuf_custom_ref>
}
 8015a8e:	bf00      	nop
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	0801abe4 	.word	0x0801abe4
 8015a9c:	0801ada8 	.word	0x0801ada8
 8015aa0:	0801ac2c 	.word	0x0801ac2c
 8015aa4:	0801adb4 	.word	0x0801adb4

08015aa8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b094      	sub	sp, #80	@ 0x50
 8015aac:	af02      	add	r7, sp, #8
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015abe:	3b14      	subs	r3, #20
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	da00      	bge.n	8015ac6 <ip4_frag+0x1e>
 8015ac4:	3307      	adds	r3, #7
 8015ac6:	10db      	asrs	r3, r3, #3
 8015ac8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015aca:	2314      	movs	r3, #20
 8015acc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	685b      	ldr	r3, [r3, #4]
 8015ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	f003 030f 	and.w	r3, r3, #15
 8015ae0:	b2db      	uxtb	r3, r3
 8015ae2:	009b      	lsls	r3, r3, #2
 8015ae4:	b2db      	uxtb	r3, r3
 8015ae6:	2b14      	cmp	r3, #20
 8015ae8:	d002      	beq.n	8015af0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015aea:	f06f 0305 	mvn.w	r3, #5
 8015aee:	e110      	b.n	8015d12 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	895b      	ldrh	r3, [r3, #10]
 8015af4:	2b13      	cmp	r3, #19
 8015af6:	d809      	bhi.n	8015b0c <ip4_frag+0x64>
 8015af8:	4b88      	ldr	r3, [pc, #544]	@ (8015d1c <ip4_frag+0x274>)
 8015afa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015afe:	4988      	ldr	r1, [pc, #544]	@ (8015d20 <ip4_frag+0x278>)
 8015b00:	4888      	ldr	r0, [pc, #544]	@ (8015d24 <ip4_frag+0x27c>)
 8015b02:	f001 f819 	bl	8016b38 <iprintf>
 8015b06:	f06f 0305 	mvn.w	r3, #5
 8015b0a:	e102      	b.n	8015d12 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b0e:	88db      	ldrh	r3, [r3, #6]
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7f5 fe3a 	bl	800b78c <lwip_htons>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015b1c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015b1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015b26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	891b      	ldrh	r3, [r3, #8]
 8015b32:	3b14      	subs	r3, #20
 8015b34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015b38:	e0e1      	b.n	8015cfe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015b3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b3c:	00db      	lsls	r3, r3, #3
 8015b3e:	b29b      	uxth	r3, r3
 8015b40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015b44:	4293      	cmp	r3, r2
 8015b46:	bf28      	it	cs
 8015b48:	4613      	movcs	r3, r2
 8015b4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015b4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015b50:	2114      	movs	r1, #20
 8015b52:	200e      	movs	r0, #14
 8015b54:	f7f6 ff86 	bl	800ca64 <pbuf_alloc>
 8015b58:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8015b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	f000 80d5 	beq.w	8015d0c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b64:	895b      	ldrh	r3, [r3, #10]
 8015b66:	2b13      	cmp	r3, #19
 8015b68:	d806      	bhi.n	8015b78 <ip4_frag+0xd0>
 8015b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8015d1c <ip4_frag+0x274>)
 8015b6c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8015b70:	496d      	ldr	r1, [pc, #436]	@ (8015d28 <ip4_frag+0x280>)
 8015b72:	486c      	ldr	r0, [pc, #432]	@ (8015d24 <ip4_frag+0x27c>)
 8015b74:	f000 ffe0 	bl	8016b38 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	2214      	movs	r2, #20
 8015b7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015b80:	4618      	mov	r0, r3
 8015b82:	f001 f9ae 	bl	8016ee2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8015b8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015b8e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8015b92:	e064      	b.n	8015c5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	895a      	ldrh	r2, [r3, #10]
 8015b98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015b9a:	1ad3      	subs	r3, r2, r3
 8015b9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	895b      	ldrh	r3, [r3, #10]
 8015ba2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d906      	bls.n	8015bb6 <ip4_frag+0x10e>
 8015ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8015d1c <ip4_frag+0x274>)
 8015baa:	f240 322d 	movw	r2, #813	@ 0x32d
 8015bae:	495f      	ldr	r1, [pc, #380]	@ (8015d2c <ip4_frag+0x284>)
 8015bb0:	485c      	ldr	r0, [pc, #368]	@ (8015d24 <ip4_frag+0x27c>)
 8015bb2:	f000 ffc1 	bl	8016b38 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015bb6:	8bfa      	ldrh	r2, [r7, #30]
 8015bb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015bbc:	4293      	cmp	r3, r2
 8015bbe:	bf28      	it	cs
 8015bc0:	4613      	movcs	r3, r2
 8015bc2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015bc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d105      	bne.n	8015bda <ip4_frag+0x132>
        poff = 0;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	60fb      	str	r3, [r7, #12]
        continue;
 8015bd8:	e041      	b.n	8015c5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015bda:	f7ff ff0d 	bl	80159f8 <ip_frag_alloc_pbuf_custom_ref>
 8015bde:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015be0:	69bb      	ldr	r3, [r7, #24]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d103      	bne.n	8015bee <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015be6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015be8:	f7f7 fa20 	bl	800d02c <pbuf_free>
        goto memerr;
 8015bec:	e08f      	b.n	8015d0e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015bee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015bf4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015bf6:	4413      	add	r3, r2
 8015bf8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015bfc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015c00:	9201      	str	r2, [sp, #4]
 8015c02:	9300      	str	r3, [sp, #0]
 8015c04:	4603      	mov	r3, r0
 8015c06:	2241      	movs	r2, #65	@ 0x41
 8015c08:	2000      	movs	r0, #0
 8015c0a:	f7f7 f855 	bl	800ccb8 <pbuf_alloced_custom>
 8015c0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015c10:	697b      	ldr	r3, [r7, #20]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d106      	bne.n	8015c24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015c16:	69b8      	ldr	r0, [r7, #24]
 8015c18:	f7ff fef6 	bl	8015a08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015c1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015c1e:	f7f7 fa05 	bl	800d02c <pbuf_free>
        goto memerr;
 8015c22:	e074      	b.n	8015d0e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015c24:	68f8      	ldr	r0, [r7, #12]
 8015c26:	f7f7 faa1 	bl	800d16c <pbuf_ref>
      pcr->original = p;
 8015c2a:	69bb      	ldr	r3, [r7, #24]
 8015c2c:	68fa      	ldr	r2, [r7, #12]
 8015c2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015c30:	69bb      	ldr	r3, [r7, #24]
 8015c32:	4a3f      	ldr	r2, [pc, #252]	@ (8015d30 <ip4_frag+0x288>)
 8015c34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015c36:	6979      	ldr	r1, [r7, #20]
 8015c38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015c3a:	f7f7 fab9 	bl	800d1b0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015c3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015c42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015c46:	1ad3      	subs	r3, r2, r3
 8015c48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015c4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d004      	beq.n	8015c5e <ip4_frag+0x1b6>
        poff = 0;
 8015c54:	2300      	movs	r3, #0
 8015c56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015c5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d196      	bne.n	8015b94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015c66:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015c68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015c6c:	4413      	add	r3, r2
 8015c6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015c74:	f1a3 0213 	sub.w	r2, r3, #19
 8015c78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	bfcc      	ite	gt
 8015c80:	2301      	movgt	r3, #1
 8015c82:	2300      	movle	r3, #0
 8015c84:	b2db      	uxtb	r3, r3
 8015c86:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015c88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8015c92:	6a3b      	ldr	r3, [r7, #32]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d002      	beq.n	8015c9e <ip4_frag+0x1f6>
 8015c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d003      	beq.n	8015ca6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015c9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015ca0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015ca4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015ca6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7f5 fd6f 	bl	800b78c <lwip_htons>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cb4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015cb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015cb8:	3314      	adds	r3, #20
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f7f5 fd65 	bl	800b78c <lwip_htons>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cc8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ccc:	2200      	movs	r2, #0
 8015cce:	729a      	strb	r2, [r3, #10]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015cd4:	68bb      	ldr	r3, [r7, #8]
 8015cd6:	695b      	ldr	r3, [r3, #20]
 8015cd8:	687a      	ldr	r2, [r7, #4]
 8015cda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015cdc:	68b8      	ldr	r0, [r7, #8]
 8015cde:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015ce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ce2:	f7f7 f9a3 	bl	800d02c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015ce6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015cea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015cec:	1ad3      	subs	r3, r2, r3
 8015cee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015cf2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015cf6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015cf8:	4413      	add	r3, r2
 8015cfa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015cfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	f47f af19 	bne.w	8015b3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	e002      	b.n	8015d12 <ip4_frag+0x26a>
      goto memerr;
 8015d0c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3748      	adds	r7, #72	@ 0x48
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
 8015d1a:	bf00      	nop
 8015d1c:	0801abe4 	.word	0x0801abe4
 8015d20:	0801adc0 	.word	0x0801adc0
 8015d24:	0801ac2c 	.word	0x0801ac2c
 8015d28:	0801addc 	.word	0x0801addc
 8015d2c:	0801adfc 	.word	0x0801adfc
 8015d30:	08015a41 	.word	0x08015a41

08015d34 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b086      	sub	sp, #24
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015d3e:	230e      	movs	r3, #14
 8015d40:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	895b      	ldrh	r3, [r3, #10]
 8015d46:	2b0e      	cmp	r3, #14
 8015d48:	d96e      	bls.n	8015e28 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	7bdb      	ldrb	r3, [r3, #15]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d106      	bne.n	8015d60 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015d58:	3301      	adds	r3, #1
 8015d5a:	b2da      	uxtb	r2, r3
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	7b1a      	ldrb	r2, [r3, #12]
 8015d6a:	7b5b      	ldrb	r3, [r3, #13]
 8015d6c:	021b      	lsls	r3, r3, #8
 8015d6e:	4313      	orrs	r3, r2
 8015d70:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	f003 0301 	and.w	r3, r3, #1
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d023      	beq.n	8015dc6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	781b      	ldrb	r3, [r3, #0]
 8015d82:	2b01      	cmp	r3, #1
 8015d84:	d10f      	bne.n	8015da6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015d86:	693b      	ldr	r3, [r7, #16]
 8015d88:	785b      	ldrb	r3, [r3, #1]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d11b      	bne.n	8015dc6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015d92:	2b5e      	cmp	r3, #94	@ 0x5e
 8015d94:	d117      	bne.n	8015dc6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	7b5b      	ldrb	r3, [r3, #13]
 8015d9a:	f043 0310 	orr.w	r3, r3, #16
 8015d9e:	b2da      	uxtb	r2, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	735a      	strb	r2, [r3, #13]
 8015da4:	e00f      	b.n	8015dc6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015da6:	693b      	ldr	r3, [r7, #16]
 8015da8:	2206      	movs	r2, #6
 8015daa:	4928      	ldr	r1, [pc, #160]	@ (8015e4c <ethernet_input+0x118>)
 8015dac:	4618      	mov	r0, r3
 8015dae:	f001 f813 	bl	8016dd8 <memcmp>
 8015db2:	4603      	mov	r3, r0
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d106      	bne.n	8015dc6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	7b5b      	ldrb	r3, [r3, #13]
 8015dbc:	f043 0308 	orr.w	r3, r3, #8
 8015dc0:	b2da      	uxtb	r2, r3
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015dc6:	89fb      	ldrh	r3, [r7, #14]
 8015dc8:	2b08      	cmp	r3, #8
 8015dca:	d003      	beq.n	8015dd4 <ethernet_input+0xa0>
 8015dcc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015dd0:	d014      	beq.n	8015dfc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015dd2:	e032      	b.n	8015e3a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015dda:	f003 0308 	and.w	r3, r3, #8
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d024      	beq.n	8015e2c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015de2:	8afb      	ldrh	r3, [r7, #22]
 8015de4:	4619      	mov	r1, r3
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f7f7 f89a 	bl	800cf20 <pbuf_remove_header>
 8015dec:	4603      	mov	r3, r0
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d11e      	bne.n	8015e30 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015df2:	6839      	ldr	r1, [r7, #0]
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f7fe ff21 	bl	8014c3c <ip4_input>
      break;
 8015dfa:	e013      	b.n	8015e24 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015e02:	f003 0308 	and.w	r3, r3, #8
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d014      	beq.n	8015e34 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015e0a:	8afb      	ldrh	r3, [r7, #22]
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f7f7 f886 	bl	800cf20 <pbuf_remove_header>
 8015e14:	4603      	mov	r3, r0
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d10e      	bne.n	8015e38 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015e1a:	6839      	ldr	r1, [r7, #0]
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7fe f82f 	bl	8013e80 <etharp_input>
      break;
 8015e22:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015e24:	2300      	movs	r3, #0
 8015e26:	e00c      	b.n	8015e42 <ethernet_input+0x10e>
    goto free_and_return;
 8015e28:	bf00      	nop
 8015e2a:	e006      	b.n	8015e3a <ethernet_input+0x106>
        goto free_and_return;
 8015e2c:	bf00      	nop
 8015e2e:	e004      	b.n	8015e3a <ethernet_input+0x106>
        goto free_and_return;
 8015e30:	bf00      	nop
 8015e32:	e002      	b.n	8015e3a <ethernet_input+0x106>
        goto free_and_return;
 8015e34:	bf00      	nop
 8015e36:	e000      	b.n	8015e3a <ethernet_input+0x106>
        goto free_and_return;
 8015e38:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015e3a:	6878      	ldr	r0, [r7, #4]
 8015e3c:	f7f7 f8f6 	bl	800d02c <pbuf_free>
  return ERR_OK;
 8015e40:	2300      	movs	r3, #0
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3718      	adds	r7, #24
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	0801b1f4 	.word	0x0801b1f4

08015e50 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b086      	sub	sp, #24
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	60f8      	str	r0, [r7, #12]
 8015e58:	60b9      	str	r1, [r7, #8]
 8015e5a:	607a      	str	r2, [r7, #4]
 8015e5c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015e5e:	8c3b      	ldrh	r3, [r7, #32]
 8015e60:	4618      	mov	r0, r3
 8015e62:	f7f5 fc93 	bl	800b78c <lwip_htons>
 8015e66:	4603      	mov	r3, r0
 8015e68:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015e6a:	210e      	movs	r1, #14
 8015e6c:	68b8      	ldr	r0, [r7, #8]
 8015e6e:	f7f7 f847 	bl	800cf00 <pbuf_add_header>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d125      	bne.n	8015ec4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	685b      	ldr	r3, [r3, #4]
 8015e7c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	8afa      	ldrh	r2, [r7, #22]
 8015e82:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015e84:	693b      	ldr	r3, [r7, #16]
 8015e86:	2206      	movs	r2, #6
 8015e88:	6839      	ldr	r1, [r7, #0]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f001 f829 	bl	8016ee2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	3306      	adds	r3, #6
 8015e94:	2206      	movs	r2, #6
 8015e96:	6879      	ldr	r1, [r7, #4]
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f001 f822 	bl	8016ee2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015ea4:	2b06      	cmp	r3, #6
 8015ea6:	d006      	beq.n	8015eb6 <ethernet_output+0x66>
 8015ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8015ed4 <ethernet_output+0x84>)
 8015eaa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015eae:	490a      	ldr	r1, [pc, #40]	@ (8015ed8 <ethernet_output+0x88>)
 8015eb0:	480a      	ldr	r0, [pc, #40]	@ (8015edc <ethernet_output+0x8c>)
 8015eb2:	f000 fe41 	bl	8016b38 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	699b      	ldr	r3, [r3, #24]
 8015eba:	68b9      	ldr	r1, [r7, #8]
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	4798      	blx	r3
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	e002      	b.n	8015eca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015ec4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015ec6:	f06f 0301 	mvn.w	r3, #1
}
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3718      	adds	r7, #24
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}
 8015ed2:	bf00      	nop
 8015ed4:	0801ae0c 	.word	0x0801ae0c
 8015ed8:	0801ae44 	.word	0x0801ae44
 8015edc:	0801ae78 	.word	0x0801ae78

08015ee0 <ADC_Test_Perform>:

uint16_t adc_buf[MAX_BUF];
int adc_ready = 0;

uint8_t ADC_Test_Perform(void)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b082      	sub	sp, #8
 8015ee4:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing adc test\n");
 8015ee6:	4816      	ldr	r0, [pc, #88]	@ (8015f40 <ADC_Test_Perform+0x60>)
 8015ee8:	f000 fe96 	bl	8016c18 <puts>
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 8015eec:	2201      	movs	r2, #1
 8015eee:	4915      	ldr	r1, [pc, #84]	@ (8015f44 <ADC_Test_Perform+0x64>)
 8015ef0:	4815      	ldr	r0, [pc, #84]	@ (8015f48 <ADC_Test_Perform+0x68>)
 8015ef2:	f7eb fff3 	bl	8001edc <HAL_ADC_Start_DMA>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8015efa:	79fb      	ldrb	r3, [r7, #7]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d004      	beq.n	8015f0a <ADC_Test_Perform+0x2a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
 8015f00:	4812      	ldr	r0, [pc, #72]	@ (8015f4c <ADC_Test_Perform+0x6c>)
 8015f02:	f000 fe89 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 8015f06:	23ff      	movs	r3, #255	@ 0xff
 8015f08:	e015      	b.n	8015f36 <ADC_Test_Perform+0x56>
	}

	while (!adc_ready);
 8015f0a:	bf00      	nop
 8015f0c:	4b10      	ldr	r3, [pc, #64]	@ (8015f50 <ADC_Test_Perform+0x70>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d0fb      	beq.n	8015f0c <ADC_Test_Perform+0x2c>
	adc_ready=0;
 8015f14:	4b0e      	ldr	r3, [pc, #56]	@ (8015f50 <ADC_Test_Perform+0x70>)
 8015f16:	2200      	movs	r2, #0
 8015f18:	601a      	str	r2, [r3, #0]

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
 8015f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8015f44 <ADC_Test_Perform+0x64>)
 8015f1c:	881b      	ldrh	r3, [r3, #0]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	480c      	ldr	r0, [pc, #48]	@ (8015f54 <ADC_Test_Perform+0x74>)
 8015f22:	f000 fe09 	bl	8016b38 <iprintf>
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 8015f26:	4b07      	ldr	r3, [pc, #28]	@ (8015f44 <ADC_Test_Perform+0x64>)
 8015f28:	881b      	ldrh	r3, [r3, #0]
 8015f2a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8015f2e:	d301      	bcc.n	8015f34 <ADC_Test_Perform+0x54>
 8015f30:	2301      	movs	r3, #1
 8015f32:	e000      	b.n	8015f36 <ADC_Test_Perform+0x56>

	return TEST_FAILED;
 8015f34:	23ff      	movs	r3, #255	@ 0xff
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3708      	adds	r7, #8
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	bf00      	nop
 8015f40:	0801aea0 	.word	0x0801aea0
 8015f44:	20008564 	.word	0x20008564
 8015f48:	20000228 	.word	0x20000228
 8015f4c:	0801aeb4 	.word	0x0801aeb4
 8015f50:	20008764 	.word	0x20008764
 8015f54:	0801aecc 	.word	0x0801aecc

08015f58 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
	adc_ready=1;
 8015f60:	4b08      	ldr	r3, [pc, #32]	@ (8015f84 <HAL_ADC_ConvCpltCallback+0x2c>)
 8015f62:	2201      	movs	r2, #1
 8015f64:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8015f66:	4808      	ldr	r0, [pc, #32]	@ (8015f88 <HAL_ADC_ConvCpltCallback+0x30>)
 8015f68:	f7ec f8b6 	bl	80020d8 <HAL_ADC_Stop_DMA>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d004      	beq.n	8015f7c <HAL_ADC_ConvCpltCallback+0x24>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
 8015f72:	4806      	ldr	r0, [pc, #24]	@ (8015f8c <HAL_ADC_ConvCpltCallback+0x34>)
 8015f74:	f000 fe50 	bl	8016c18 <puts>
#endif
		Error_Handler();
 8015f78:	f7ea ffc8 	bl	8000f0c <Error_Handler>
	}
}
 8015f7c:	bf00      	nop
 8015f7e:	3708      	adds	r7, #8
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	20008764 	.word	0x20008764
 8015f88:	20000228 	.word	0x20000228
 8015f8c:	0801aedc 	.word	0x0801aedc

08015f90 <HW_Verification_Proccess>:
 *      Author: leah
 */
#include "hw_verif.h"

void HW_Verification_Proccess(void)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	af00      	add	r7, sp, #0
	UDP_Server_Init();
 8015f94:	f000 f82a 	bl	8015fec <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 8015f98:	f7f4 ffd4 	bl	800af44 <MX_LWIP_Process>
 8015f9c:	e7fc      	b.n	8015f98 <HW_Verification_Proccess+0x8>
	...

08015fa0 <Match_CRC>:
 */
#include "crc.h"
#include "hw_verif_crc.h"

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b086      	sub	sp, #24
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	60f8      	str	r0, [r7, #12]
 8015fa8:	607a      	str	r2, [r7, #4]
 8015faa:	461a      	mov	r2, r3
 8015fac:	460b      	mov	r3, r1
 8015fae:	72fb      	strb	r3, [r7, #11]
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 8015fb4:	7afb      	ldrb	r3, [r7, #11]
 8015fb6:	461a      	mov	r2, r3
 8015fb8:	68f9      	ldr	r1, [r7, #12]
 8015fba:	480b      	ldr	r0, [pc, #44]	@ (8015fe8 <Match_CRC+0x48>)
 8015fbc:	f7ec fd46 	bl	8002a4c <HAL_CRC_Calculate>
 8015fc0:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 8015fc2:	7abb      	ldrb	r3, [r7, #10]
 8015fc4:	461a      	mov	r2, r3
 8015fc6:	6879      	ldr	r1, [r7, #4]
 8015fc8:	4807      	ldr	r0, [pc, #28]	@ (8015fe8 <Match_CRC+0x48>)
 8015fca:	f7ec fd3f 	bl	8002a4c <HAL_CRC_Calculate>
 8015fce:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 8015fd0:	697a      	ldr	r2, [r7, #20]
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d101      	bne.n	8015fdc <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 8015fd8:	2301      	movs	r3, #1
 8015fda:	e000      	b.n	8015fde <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 8015fdc:	2300      	movs	r3, #0
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3718      	adds	r7, #24
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	200002d0 	.word	0x200002d0

08015fec <UDP_Server_Init>:

uint8_t perform_test();
void send_result(uint8_t result);

void UDP_Server_Init(void)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b082      	sub	sp, #8
 8015ff0:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 8015ff2:	f7fd fb63 	bl	80136bc <udp_new>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	4a12      	ldr	r2, [pc, #72]	@ (8016044 <UDP_Server_Init+0x58>)
 8015ffa:	6013      	str	r3, [r2, #0]

	if (upcb)
 8015ffc:	4b11      	ldr	r3, [pc, #68]	@ (8016044 <UDP_Server_Init+0x58>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d01a      	beq.n	801603a <UDP_Server_Init+0x4e>
	{
		// Bind the upcb to the UDP_PORT port
		// Using IP_ADDR_ANY allow the upcb to be used by any local interface
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 8016004:	4b0f      	ldr	r3, [pc, #60]	@ (8016044 <UDP_Server_Init+0x58>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801600c:	490e      	ldr	r1, [pc, #56]	@ (8016048 <UDP_Server_Init+0x5c>)
 801600e:	4618      	mov	r0, r3
 8016010:	f7fd fa04 	bl	801341c <udp_bind>
 8016014:	4603      	mov	r3, r0
 8016016:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 8016018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d107      	bne.n	8016030 <UDP_Server_Init+0x44>
		{
			// Set a receive callback for the upcb
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 8016020:	4b08      	ldr	r3, [pc, #32]	@ (8016044 <UDP_Server_Init+0x58>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	2200      	movs	r2, #0
 8016026:	4909      	ldr	r1, [pc, #36]	@ (801604c <UDP_Server_Init+0x60>)
 8016028:	4618      	mov	r0, r3
 801602a:	f7fd fae5 	bl	80135f8 <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 801602e:	e004      	b.n	801603a <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 8016030:	4b04      	ldr	r3, [pc, #16]	@ (8016044 <UDP_Server_Init+0x58>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	4618      	mov	r0, r3
 8016036:	f7fd faff 	bl	8013638 <udp_remove>
}
 801603a:	bf00      	nop
 801603c:	3708      	adds	r7, #8
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	20008768 	.word	0x20008768
 8016048:	0801b1f0 	.word	0x0801b1f0
 801604c:	08016051 	.word	0x08016051

08016050 <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b086      	sub	sp, #24
 8016054:	af00      	add	r7, sp, #0
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
 801605c:	603b      	str	r3, [r7, #0]
	// Load data to in_msg
	in_msg.upcb = upcb;
 801605e:	4a24      	ldr	r2, [pc, #144]	@ (80160f0 <UDP_Recv_Callback+0xa0>)
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	6013      	str	r3, [r2, #0]
	in_msg.addr = addr;
 8016064:	4a22      	ldr	r2, [pc, #136]	@ (80160f0 <UDP_Recv_Callback+0xa0>)
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	6053      	str	r3, [r2, #4]
	in_msg.port = port;
 801606a:	4a21      	ldr	r2, [pc, #132]	@ (80160f0 <UDP_Recv_Callback+0xa0>)
 801606c:	8c3b      	ldrh	r3, [r7, #32]
 801606e:	8113      	strh	r3, [r2, #8]

	int n_read = 0;
 8016070:	2300      	movs	r3, #0
 8016072:	617b      	str	r3, [r7, #20]
	memcpy(&in_msg.test_id, p->payload, sizeof(in_msg.test_id));
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	461a      	mov	r2, r3
 801607c:	4b1c      	ldr	r3, [pc, #112]	@ (80160f0 <UDP_Recv_Callback+0xa0>)
 801607e:	60da      	str	r2, [r3, #12]
	n_read += sizeof(in_msg.test_id);
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	3304      	adds	r3, #4
 8016084:	617b      	str	r3, [r7, #20]

	memcpy(&in_msg.peripheral, &((uint8_t *)p->payload)[n_read++], 1);
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	685a      	ldr	r2, [r3, #4]
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	1c59      	adds	r1, r3, #1
 801608e:	6179      	str	r1, [r7, #20]
 8016090:	4413      	add	r3, r2
 8016092:	781a      	ldrb	r2, [r3, #0]
 8016094:	4b16      	ldr	r3, [pc, #88]	@ (80160f0 <UDP_Recv_Callback+0xa0>)
 8016096:	741a      	strb	r2, [r3, #16]
	memcpy(&in_msg.n_iter, &((uint8_t *)p->payload)[n_read++], 1);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	685a      	ldr	r2, [r3, #4]
 801609c:	697b      	ldr	r3, [r7, #20]
 801609e:	1c59      	adds	r1, r3, #1
 80160a0:	6179      	str	r1, [r7, #20]
 80160a2:	4413      	add	r3, r2
 80160a4:	781a      	ldrb	r2, [r3, #0]
 80160a6:	4b12      	ldr	r3, [pc, #72]	@ (80160f0 <UDP_Recv_Callback+0xa0>)
 80160a8:	745a      	strb	r2, [r3, #17]
	memcpy(&in_msg.p_len, &((uint8_t *)p->payload)[n_read++], 1);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	685a      	ldr	r2, [r3, #4]
 80160ae:	697b      	ldr	r3, [r7, #20]
 80160b0:	1c59      	adds	r1, r3, #1
 80160b2:	6179      	str	r1, [r7, #20]
 80160b4:	4413      	add	r3, r2
 80160b6:	781a      	ldrb	r2, [r3, #0]
 80160b8:	4b0d      	ldr	r3, [pc, #52]	@ (80160f0 <UDP_Recv_Callback+0xa0>)
 80160ba:	749a      	strb	r2, [r3, #18]
	memcpy(&in_msg.payload, &((char *)p->payload)[n_read], in_msg.p_len);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	685a      	ldr	r2, [r3, #4]
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	4413      	add	r3, r2
 80160c4:	4a0a      	ldr	r2, [pc, #40]	@ (80160f0 <UDP_Recv_Callback+0xa0>)
 80160c6:	7c92      	ldrb	r2, [r2, #18]
 80160c8:	4619      	mov	r1, r3
 80160ca:	480a      	ldr	r0, [pc, #40]	@ (80160f4 <UDP_Recv_Callback+0xa4>)
 80160cc:	f000 ff09 	bl	8016ee2 <memcpy>

	uint8_t result = perform_test();
 80160d0:	f000 f812 	bl	80160f8 <perform_test>
 80160d4:	4603      	mov	r3, r0
 80160d6:	74fb      	strb	r3, [r7, #19]
	send_result(result);
 80160d8:	7cfb      	ldrb	r3, [r7, #19]
 80160da:	4618      	mov	r0, r3
 80160dc:	f000 f88e 	bl	80161fc <send_result>

	// Free the p buffer
	pbuf_free(p);
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f7f6 ffa3 	bl	800d02c <pbuf_free>
}
 80160e6:	bf00      	nop
 80160e8:	3718      	adds	r7, #24
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	2000876c 	.word	0x2000876c
 80160f4:	2000877f 	.word	0x2000877f

080160f8 <perform_test>:

uint8_t perform_test()
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af02      	add	r7, sp, #8
	switch (in_msg.peripheral) {
 80160fe:	4b33      	ldr	r3, [pc, #204]	@ (80161cc <perform_test+0xd4>)
 8016100:	7c1b      	ldrb	r3, [r3, #16]
 8016102:	3b01      	subs	r3, #1
 8016104:	2b0f      	cmp	r3, #15
 8016106:	d85c      	bhi.n	80161c2 <perform_test+0xca>
 8016108:	a201      	add	r2, pc, #4	@ (adr r2, 8016110 <perform_test+0x18>)
 801610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801610e:	bf00      	nop
 8016110:	08016151 	.word	0x08016151
 8016114:	08016163 	.word	0x08016163
 8016118:	080161c3 	.word	0x080161c3
 801611c:	0801617d 	.word	0x0801617d
 8016120:	080161c3 	.word	0x080161c3
 8016124:	080161c3 	.word	0x080161c3
 8016128:	080161c3 	.word	0x080161c3
 801612c:	08016197 	.word	0x08016197
 8016130:	080161c3 	.word	0x080161c3
 8016134:	080161c3 	.word	0x080161c3
 8016138:	080161c3 	.word	0x080161c3
 801613c:	080161c3 	.word	0x080161c3
 8016140:	080161c3 	.word	0x080161c3
 8016144:	080161c3 	.word	0x080161c3
 8016148:	080161c3 	.word	0x080161c3
 801614c:	080161b1 	.word	0x080161b1
		case TEST_TIM:
			return Test_N_Perform("TIMER", TIM_Test_Perform, in_msg.n_iter);
 8016150:	4b1e      	ldr	r3, [pc, #120]	@ (80161cc <perform_test+0xd4>)
 8016152:	7c5b      	ldrb	r3, [r3, #17]
 8016154:	461a      	mov	r2, r3
 8016156:	491e      	ldr	r1, [pc, #120]	@ (80161d0 <perform_test+0xd8>)
 8016158:	481e      	ldr	r0, [pc, #120]	@ (80161d4 <perform_test+0xdc>)
 801615a:	f000 fab5 	bl	80166c8 <Test_N_Perform>
 801615e:	4603      	mov	r3, r0
 8016160:	e030      	b.n	80161c4 <perform_test+0xcc>
			break;
		case TEST_UART:
			return Test_N_Perform_Msg("UART", UART_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 8016162:	4b1a      	ldr	r3, [pc, #104]	@ (80161cc <perform_test+0xd4>)
 8016164:	7c9a      	ldrb	r2, [r3, #18]
 8016166:	4b19      	ldr	r3, [pc, #100]	@ (80161cc <perform_test+0xd4>)
 8016168:	7c5b      	ldrb	r3, [r3, #17]
 801616a:	9300      	str	r3, [sp, #0]
 801616c:	4613      	mov	r3, r2
 801616e:	4a1a      	ldr	r2, [pc, #104]	@ (80161d8 <perform_test+0xe0>)
 8016170:	491a      	ldr	r1, [pc, #104]	@ (80161dc <perform_test+0xe4>)
 8016172:	481b      	ldr	r0, [pc, #108]	@ (80161e0 <perform_test+0xe8>)
 8016174:	f000 fad8 	bl	8016728 <Test_N_Perform_Msg>
 8016178:	4603      	mov	r3, r0
 801617a:	e023      	b.n	80161c4 <perform_test+0xcc>
			break;
		case TEST_SPI:
			return Test_N_Perform_Msg("SPI", SPI_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);;
 801617c:	4b13      	ldr	r3, [pc, #76]	@ (80161cc <perform_test+0xd4>)
 801617e:	7c9a      	ldrb	r2, [r3, #18]
 8016180:	4b12      	ldr	r3, [pc, #72]	@ (80161cc <perform_test+0xd4>)
 8016182:	7c5b      	ldrb	r3, [r3, #17]
 8016184:	9300      	str	r3, [sp, #0]
 8016186:	4613      	mov	r3, r2
 8016188:	4a13      	ldr	r2, [pc, #76]	@ (80161d8 <perform_test+0xe0>)
 801618a:	4916      	ldr	r1, [pc, #88]	@ (80161e4 <perform_test+0xec>)
 801618c:	4816      	ldr	r0, [pc, #88]	@ (80161e8 <perform_test+0xf0>)
 801618e:	f000 facb 	bl	8016728 <Test_N_Perform_Msg>
 8016192:	4603      	mov	r3, r0
 8016194:	e016      	b.n	80161c4 <perform_test+0xcc>
			break;
		case TEST_I2C:
			return Test_N_Perform_Msg("I2C", I2C_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 8016196:	4b0d      	ldr	r3, [pc, #52]	@ (80161cc <perform_test+0xd4>)
 8016198:	7c9a      	ldrb	r2, [r3, #18]
 801619a:	4b0c      	ldr	r3, [pc, #48]	@ (80161cc <perform_test+0xd4>)
 801619c:	7c5b      	ldrb	r3, [r3, #17]
 801619e:	9300      	str	r3, [sp, #0]
 80161a0:	4613      	mov	r3, r2
 80161a2:	4a0d      	ldr	r2, [pc, #52]	@ (80161d8 <perform_test+0xe0>)
 80161a4:	4911      	ldr	r1, [pc, #68]	@ (80161ec <perform_test+0xf4>)
 80161a6:	4812      	ldr	r0, [pc, #72]	@ (80161f0 <perform_test+0xf8>)
 80161a8:	f000 fabe 	bl	8016728 <Test_N_Perform_Msg>
 80161ac:	4603      	mov	r3, r0
 80161ae:	e009      	b.n	80161c4 <perform_test+0xcc>
			break;
		case TEST_ADC:
			return Test_N_Perform("ADC", ADC_Test_Perform, in_msg.n_iter);
 80161b0:	4b06      	ldr	r3, [pc, #24]	@ (80161cc <perform_test+0xd4>)
 80161b2:	7c5b      	ldrb	r3, [r3, #17]
 80161b4:	461a      	mov	r2, r3
 80161b6:	490f      	ldr	r1, [pc, #60]	@ (80161f4 <perform_test+0xfc>)
 80161b8:	480f      	ldr	r0, [pc, #60]	@ (80161f8 <perform_test+0x100>)
 80161ba:	f000 fa85 	bl	80166c8 <Test_N_Perform>
 80161be:	4603      	mov	r3, r0
 80161c0:	e000      	b.n	80161c4 <perform_test+0xcc>
			break;
		default:
			return TEST_FAILED;
 80161c2:	23ff      	movs	r3, #255	@ 0xff
			break;
	}

	return TEST_FAILED;
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}
 80161ca:	bf00      	nop
 80161cc:	2000876c 	.word	0x2000876c
 80161d0:	08016791 	.word	0x08016791
 80161d4:	0801aef0 	.word	0x0801aef0
 80161d8:	2000877f 	.word	0x2000877f
 80161dc:	080167a5 	.word	0x080167a5
 80161e0:	0801aef8 	.word	0x0801aef8
 80161e4:	080164ad 	.word	0x080164ad
 80161e8:	0801af00 	.word	0x0801af00
 80161ec:	0801625d 	.word	0x0801625d
 80161f0:	0801af04 	.word	0x0801af04
 80161f4:	08015ee1 	.word	0x08015ee1
 80161f8:	0801af08 	.word	0x0801af08

080161fc <send_result>:

void send_result(uint8_t result)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b086      	sub	sp, #24
 8016200:	af00      	add	r7, sp, #0
 8016202:	4603      	mov	r3, r0
 8016204:	71fb      	strb	r3, [r7, #7]
	uint8_t response[RESPONSE_SIZE];
	memcpy(response, &in_msg.test_id, sizeof(in_msg.test_id));
 8016206:	4b14      	ldr	r3, [pc, #80]	@ (8016258 <send_result+0x5c>)
 8016208:	68db      	ldr	r3, [r3, #12]
 801620a:	60fb      	str	r3, [r7, #12]
	response[sizeof(in_msg.test_id)] = result;
 801620c:	79fb      	ldrb	r3, [r7, #7]
 801620e:	743b      	strb	r3, [r7, #16]

	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 8016210:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016214:	2105      	movs	r1, #5
 8016216:	2036      	movs	r0, #54	@ 0x36
 8016218:	f7f6 fc24 	bl	800ca64 <pbuf_alloc>
 801621c:	6178      	str	r0, [r7, #20]
	if (resp_buf != NULL)
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d014      	beq.n	801624e <send_result+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	685b      	ldr	r3, [r3, #4]
 8016228:	461a      	mov	r2, r3
 801622a:	f107 030c 	add.w	r3, r7, #12
 801622e:	6818      	ldr	r0, [r3, #0]
 8016230:	6010      	str	r0, [r2, #0]
 8016232:	791b      	ldrb	r3, [r3, #4]
 8016234:	7113      	strb	r3, [r2, #4]
		udp_sendto(in_msg.upcb, resp_buf, in_msg.addr, in_msg.port);
 8016236:	4b08      	ldr	r3, [pc, #32]	@ (8016258 <send_result+0x5c>)
 8016238:	6818      	ldr	r0, [r3, #0]
 801623a:	4b07      	ldr	r3, [pc, #28]	@ (8016258 <send_result+0x5c>)
 801623c:	685a      	ldr	r2, [r3, #4]
 801623e:	4b06      	ldr	r3, [pc, #24]	@ (8016258 <send_result+0x5c>)
 8016240:	891b      	ldrh	r3, [r3, #8]
 8016242:	6979      	ldr	r1, [r7, #20]
 8016244:	f7fc fec2 	bl	8012fcc <udp_sendto>
	    pbuf_free(resp_buf);
 8016248:	6978      	ldr	r0, [r7, #20]
 801624a:	f7f6 feef 	bl	800d02c <pbuf_free>
	}
}
 801624e:	bf00      	nop
 8016250:	3718      	adds	r7, #24
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	2000876c 	.word	0x2000876c

0801625c <I2C_Test_Perform>:
volatile uint8_t i2c1_rx_done;
volatile uint8_t i2c2_tx_done;
volatile uint8_t i2c2_rx_done;

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801625c:	b590      	push	{r4, r7, lr}
 801625e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8016262:	af00      	add	r7, sp, #0
 8016264:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016268:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801626c:	6018      	str	r0, [r3, #0]
 801626e:	460a      	mov	r2, r1
 8016270:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016274:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016278:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing i2c test\n");
 801627a:	4855      	ldr	r0, [pc, #340]	@ (80163d0 <I2C_Test_Perform+0x174>)
 801627c:	f000 fccc 	bl	8016c18 <puts>
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 8016280:	4b54      	ldr	r3, [pc, #336]	@ (80163d4 <I2C_Test_Perform+0x178>)
 8016282:	2200      	movs	r2, #0
 8016284:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 8016286:	4b54      	ldr	r3, [pc, #336]	@ (80163d8 <I2C_Test_Perform+0x17c>)
 8016288:	2200      	movs	r2, #0
 801628a:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 801628c:	4b53      	ldr	r3, [pc, #332]	@ (80163dc <I2C_Test_Perform+0x180>)
 801628e:	2200      	movs	r2, #0
 8016290:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 8016292:	4b53      	ldr	r3, [pc, #332]	@ (80163e0 <I2C_Test_Perform+0x184>)
 8016294:	2200      	movs	r2, #0
 8016296:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 8016298:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801629c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	b29a      	uxth	r2, r3
 80162a4:	f107 0308 	add.w	r3, r7, #8
 80162a8:	4619      	mov	r1, r3
 80162aa:	484e      	ldr	r0, [pc, #312]	@ (80163e4 <I2C_Test_Perform+0x188>)
 80162ac:	f7ef f91e 	bl	80054ec <HAL_I2C_Slave_Receive_DMA>
 80162b0:	4603      	mov	r3, r0
 80162b2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80162b6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d004      	beq.n	80162c8 <I2C_Test_Perform+0x6c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
 80162be:	484a      	ldr	r0, [pc, #296]	@ (80163e8 <I2C_Test_Perform+0x18c>)
 80162c0:	f000 fcaa 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 80162c4:	23ff      	movs	r3, #255	@ 0xff
 80162c6:	e07d      	b.n	80163c4 <I2C_Test_Perform+0x168>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 80162c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80162cc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80162d0:	781b      	ldrb	r3, [r3, #0]
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80162d8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80162dc:	6812      	ldr	r2, [r2, #0]
 80162de:	2114      	movs	r1, #20
 80162e0:	4842      	ldr	r0, [pc, #264]	@ (80163ec <I2C_Test_Perform+0x190>)
 80162e2:	f7ee fe13 	bl	8004f0c <HAL_I2C_Master_Transmit_DMA>
 80162e6:	4603      	mov	r3, r0
 80162e8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80162ec:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d004      	beq.n	80162fe <I2C_Test_Perform+0xa2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
 80162f4:	483e      	ldr	r0, [pc, #248]	@ (80163f0 <I2C_Test_Perform+0x194>)
 80162f6:	f000 fc8f 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 80162fa:	23ff      	movs	r3, #255	@ 0xff
 80162fc:	e062      	b.n	80163c4 <I2C_Test_Perform+0x168>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 80162fe:	bf00      	nop
 8016300:	4b37      	ldr	r3, [pc, #220]	@ (80163e0 <I2C_Test_Perform+0x184>)
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	b2db      	uxtb	r3, r3
 8016306:	2b00      	cmp	r3, #0
 8016308:	d0fa      	beq.n	8016300 <I2C_Test_Perform+0xa4>
 801630a:	4b32      	ldr	r3, [pc, #200]	@ (80163d4 <I2C_Test_Perform+0x178>)
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b00      	cmp	r3, #0
 8016312:	d0f5      	beq.n	8016300 <I2C_Test_Perform+0xa4>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 8016314:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016318:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	b29b      	uxth	r3, r3
 8016320:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8016324:	2114      	movs	r1, #20
 8016326:	4831      	ldr	r0, [pc, #196]	@ (80163ec <I2C_Test_Perform+0x190>)
 8016328:	f7ee ff04 	bl	8005134 <HAL_I2C_Master_Receive_DMA>
 801632c:	4603      	mov	r3, r0
 801632e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016332:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016336:	2b00      	cmp	r3, #0
 8016338:	d004      	beq.n	8016344 <I2C_Test_Perform+0xe8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
 801633a:	482e      	ldr	r0, [pc, #184]	@ (80163f4 <I2C_Test_Perform+0x198>)
 801633c:	f000 fc6c 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 8016340:	23ff      	movs	r3, #255	@ 0xff
 8016342:	e03f      	b.n	80163c4 <I2C_Test_Perform+0x168>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 8016344:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016348:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	b29a      	uxth	r2, r3
 8016350:	f107 0308 	add.w	r3, r7, #8
 8016354:	4619      	mov	r1, r3
 8016356:	4823      	ldr	r0, [pc, #140]	@ (80163e4 <I2C_Test_Perform+0x188>)
 8016358:	f7ee ffdc 	bl	8005314 <HAL_I2C_Slave_Transmit_DMA>
 801635c:	4603      	mov	r3, r0
 801635e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016362:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016366:	2b00      	cmp	r3, #0
 8016368:	d004      	beq.n	8016374 <I2C_Test_Perform+0x118>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
 801636a:	4823      	ldr	r0, [pc, #140]	@ (80163f8 <I2C_Test_Perform+0x19c>)
 801636c:	f000 fc54 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 8016370:	23ff      	movs	r3, #255	@ 0xff
 8016372:	e027      	b.n	80163c4 <I2C_Test_Perform+0x168>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 8016374:	bf00      	nop
 8016376:	4b18      	ldr	r3, [pc, #96]	@ (80163d8 <I2C_Test_Perform+0x17c>)
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	b2db      	uxtb	r3, r3
 801637c:	2b00      	cmp	r3, #0
 801637e:	d0fa      	beq.n	8016376 <I2C_Test_Perform+0x11a>
 8016380:	4b16      	ldr	r3, [pc, #88]	@ (80163dc <I2C_Test_Perform+0x180>)
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	b2db      	uxtb	r3, r3
 8016386:	2b00      	cmp	r3, #0
 8016388:	d0f5      	beq.n	8016376 <I2C_Test_Perform+0x11a>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801638a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801638e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016392:	781c      	ldrb	r4, [r3, #0]
 8016394:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8016398:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801639c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80163a0:	7819      	ldrb	r1, [r3, #0]
 80163a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80163a6:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80163aa:	4623      	mov	r3, r4
 80163ac:	6800      	ldr	r0, [r0, #0]
 80163ae:	f7ff fdf7 	bl	8015fa0 <Match_CRC>
 80163b2:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80163b6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80163ba:	2b01      	cmp	r3, #1
 80163bc:	d101      	bne.n	80163c2 <I2C_Test_Perform+0x166>
 80163be:	2301      	movs	r3, #1
 80163c0:	e000      	b.n	80163c4 <I2C_Test_Perform+0x168>

	return TEST_FAILED;
 80163c2:	23ff      	movs	r3, #255	@ 0xff
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd90      	pop	{r4, r7, pc}
 80163ce:	bf00      	nop
 80163d0:	0801af0c 	.word	0x0801af0c
 80163d4:	20008880 	.word	0x20008880
 80163d8:	20008881 	.word	0x20008881
 80163dc:	20008882 	.word	0x20008882
 80163e0:	20008883 	.word	0x20008883
 80163e4:	20000348 	.word	0x20000348
 80163e8:	0801af20 	.word	0x0801af20
 80163ec:	200002f4 	.word	0x200002f4
 80163f0:	0801af38 	.word	0x0801af38
 80163f4:	0801af50 	.word	0x0801af50
 80163f8:	0801af68 	.word	0x0801af68

080163fc <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80163fc:	b480      	push	{r7}
 80163fe:	b083      	sub	sp, #12
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	4a06      	ldr	r2, [pc, #24]	@ (8016420 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8016408:	4293      	cmp	r3, r2
 801640a:	d102      	bne.n	8016412 <HAL_I2C_MasterTxCpltCallback+0x16>
 801640c:	4b05      	ldr	r3, [pc, #20]	@ (8016424 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801640e:	2201      	movs	r2, #1
 8016410:	701a      	strb	r2, [r3, #0]
}
 8016412:	bf00      	nop
 8016414:	370c      	adds	r7, #12
 8016416:	46bd      	mov	sp, r7
 8016418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641c:	4770      	bx	lr
 801641e:	bf00      	nop
 8016420:	200002f4 	.word	0x200002f4
 8016424:	20008880 	.word	0x20008880

08016428 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	4a06      	ldr	r2, [pc, #24]	@ (801644c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8016434:	4293      	cmp	r3, r2
 8016436:	d102      	bne.n	801643e <HAL_I2C_MasterRxCpltCallback+0x16>
 8016438:	4b05      	ldr	r3, [pc, #20]	@ (8016450 <HAL_I2C_MasterRxCpltCallback+0x28>)
 801643a:	2201      	movs	r2, #1
 801643c:	701a      	strb	r2, [r3, #0]
}
 801643e:	bf00      	nop
 8016440:	370c      	adds	r7, #12
 8016442:	46bd      	mov	sp, r7
 8016444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016448:	4770      	bx	lr
 801644a:	bf00      	nop
 801644c:	200002f4 	.word	0x200002f4
 8016450:	20008881 	.word	0x20008881

08016454 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016454:	b480      	push	{r7}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	4a06      	ldr	r2, [pc, #24]	@ (8016478 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8016460:	4293      	cmp	r3, r2
 8016462:	d102      	bne.n	801646a <HAL_I2C_SlaveTxCpltCallback+0x16>
 8016464:	4b05      	ldr	r3, [pc, #20]	@ (801647c <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8016466:	2201      	movs	r2, #1
 8016468:	701a      	strb	r2, [r3, #0]
}
 801646a:	bf00      	nop
 801646c:	370c      	adds	r7, #12
 801646e:	46bd      	mov	sp, r7
 8016470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016474:	4770      	bx	lr
 8016476:	bf00      	nop
 8016478:	20000348 	.word	0x20000348
 801647c:	20008882 	.word	0x20008882

08016480 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016480:	b480      	push	{r7}
 8016482:	b083      	sub	sp, #12
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	4a06      	ldr	r2, [pc, #24]	@ (80164a4 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801648c:	4293      	cmp	r3, r2
 801648e:	d102      	bne.n	8016496 <HAL_I2C_SlaveRxCpltCallback+0x16>
 8016490:	4b05      	ldr	r3, [pc, #20]	@ (80164a8 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8016492:	2201      	movs	r2, #1
 8016494:	701a      	strb	r2, [r3, #0]
}
 8016496:	bf00      	nop
 8016498:	370c      	adds	r7, #12
 801649a:	46bd      	mov	sp, r7
 801649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a0:	4770      	bx	lr
 80164a2:	bf00      	nop
 80164a4:	20000348 	.word	0x20000348
 80164a8:	20008883 	.word	0x20008883

080164ac <SPI_Test_Perform>:
volatile uint8_t spi1_rx_done;
volatile uint8_t spi4_tx_done;
volatile uint8_t spi4_rx_done;

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 80164ac:	b590      	push	{r4, r7, lr}
 80164ae:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80164b8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80164bc:	6018      	str	r0, [r3, #0]
 80164be:	460a      	mov	r2, r1
 80164c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80164c4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80164c8:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing SPI test\n");
 80164ca:	4854      	ldr	r0, [pc, #336]	@ (801661c <SPI_Test_Perform+0x170>)
 80164cc:	f000 fba4 	bl	8016c18 <puts>
#endif

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 80164d0:	4b53      	ldr	r3, [pc, #332]	@ (8016620 <SPI_Test_Perform+0x174>)
 80164d2:	2200      	movs	r2, #0
 80164d4:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 80164d6:	4b53      	ldr	r3, [pc, #332]	@ (8016624 <SPI_Test_Perform+0x178>)
 80164d8:	2200      	movs	r2, #0
 80164da:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 80164dc:	4b52      	ldr	r3, [pc, #328]	@ (8016628 <SPI_Test_Perform+0x17c>)
 80164de:	2200      	movs	r2, #0
 80164e0:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 80164e2:	4b52      	ldr	r3, [pc, #328]	@ (801662c <SPI_Test_Perform+0x180>)
 80164e4:	2200      	movs	r2, #0
 80164e6:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 80164e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80164ec:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80164f0:	781b      	ldrb	r3, [r3, #0]
 80164f2:	b29a      	uxth	r2, r3
 80164f4:	f107 0308 	add.w	r3, r7, #8
 80164f8:	4619      	mov	r1, r3
 80164fa:	484d      	ldr	r0, [pc, #308]	@ (8016630 <SPI_Test_Perform+0x184>)
 80164fc:	f7f2 f912 	bl	8008724 <HAL_SPI_Receive_DMA>
 8016500:	4603      	mov	r3, r0
 8016502:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016506:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801650a:	2b00      	cmp	r3, #0
 801650c:	d004      	beq.n	8016518 <SPI_Test_Perform+0x6c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
 801650e:	4849      	ldr	r0, [pc, #292]	@ (8016634 <SPI_Test_Perform+0x188>)
 8016510:	f000 fb82 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 8016514:	23ff      	movs	r3, #255	@ 0xff
 8016516:	e07c      	b.n	8016612 <SPI_Test_Perform+0x166>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 8016518:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801651c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016520:	781b      	ldrb	r3, [r3, #0]
 8016522:	b29a      	uxth	r2, r3
 8016524:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016528:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801652c:	6819      	ldr	r1, [r3, #0]
 801652e:	4842      	ldr	r0, [pc, #264]	@ (8016638 <SPI_Test_Perform+0x18c>)
 8016530:	f7f2 f80a 	bl	8008548 <HAL_SPI_Transmit_DMA>
 8016534:	4603      	mov	r3, r0
 8016536:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801653a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801653e:	2b00      	cmp	r3, #0
 8016540:	d004      	beq.n	801654c <SPI_Test_Perform+0xa0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
 8016542:	483e      	ldr	r0, [pc, #248]	@ (801663c <SPI_Test_Perform+0x190>)
 8016544:	f000 fb68 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 8016548:	23ff      	movs	r3, #255	@ 0xff
 801654a:	e062      	b.n	8016612 <SPI_Test_Perform+0x166>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 801654c:	bf00      	nop
 801654e:	4b37      	ldr	r3, [pc, #220]	@ (801662c <SPI_Test_Perform+0x180>)
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	b2db      	uxtb	r3, r3
 8016554:	2b00      	cmp	r3, #0
 8016556:	d0fa      	beq.n	801654e <SPI_Test_Perform+0xa2>
 8016558:	4b31      	ldr	r3, [pc, #196]	@ (8016620 <SPI_Test_Perform+0x174>)
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	2b00      	cmp	r3, #0
 8016560:	d0f5      	beq.n	801654e <SPI_Test_Perform+0xa2>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 8016562:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016566:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	b29a      	uxth	r2, r3
 801656e:	f107 0308 	add.w	r3, r7, #8
 8016572:	4619      	mov	r1, r3
 8016574:	482e      	ldr	r0, [pc, #184]	@ (8016630 <SPI_Test_Perform+0x184>)
 8016576:	f7f1 ffe7 	bl	8008548 <HAL_SPI_Transmit_DMA>
 801657a:	4603      	mov	r3, r0
 801657c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8016580:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8016584:	2b00      	cmp	r3, #0
 8016586:	d004      	beq.n	8016592 <SPI_Test_Perform+0xe6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
 8016588:	482d      	ldr	r0, [pc, #180]	@ (8016640 <SPI_Test_Perform+0x194>)
 801658a:	f000 fb45 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 801658e:	23ff      	movs	r3, #255	@ 0xff
 8016590:	e03f      	b.n	8016612 <SPI_Test_Perform+0x166>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 8016592:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016596:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	b29a      	uxth	r2, r3
 801659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80165a2:	4619      	mov	r1, r3
 80165a4:	4824      	ldr	r0, [pc, #144]	@ (8016638 <SPI_Test_Perform+0x18c>)
 80165a6:	f7f2 f8bd 	bl	8008724 <HAL_SPI_Receive_DMA>
 80165aa:	4603      	mov	r3, r0
 80165ac:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80165b0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d004      	beq.n	80165c2 <SPI_Test_Perform+0x116>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
 80165b8:	4822      	ldr	r0, [pc, #136]	@ (8016644 <SPI_Test_Perform+0x198>)
 80165ba:	f000 fb2d 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 80165be:	23ff      	movs	r3, #255	@ 0xff
 80165c0:	e027      	b.n	8016612 <SPI_Test_Perform+0x166>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 80165c2:	bf00      	nop
 80165c4:	4b17      	ldr	r3, [pc, #92]	@ (8016624 <SPI_Test_Perform+0x178>)
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	b2db      	uxtb	r3, r3
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d0fa      	beq.n	80165c4 <SPI_Test_Perform+0x118>
 80165ce:	4b16      	ldr	r3, [pc, #88]	@ (8016628 <SPI_Test_Perform+0x17c>)
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	b2db      	uxtb	r3, r3
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d0f5      	beq.n	80165c4 <SPI_Test_Perform+0x118>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 80165d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80165dc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80165e0:	781c      	ldrb	r4, [r3, #0]
 80165e2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80165e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80165ea:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80165ee:	7819      	ldrb	r1, [r3, #0]
 80165f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80165f4:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80165f8:	4623      	mov	r3, r4
 80165fa:	6800      	ldr	r0, [r0, #0]
 80165fc:	f7ff fcd0 	bl	8015fa0 <Match_CRC>
 8016600:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8016604:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8016608:	2b01      	cmp	r3, #1
 801660a:	d101      	bne.n	8016610 <SPI_Test_Perform+0x164>
 801660c:	2301      	movs	r3, #1
 801660e:	e000      	b.n	8016612 <SPI_Test_Perform+0x166>

	return TEST_FAILED;
 8016610:	23ff      	movs	r3, #255	@ 0xff
}
 8016612:	4618      	mov	r0, r3
 8016614:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8016618:	46bd      	mov	sp, r7
 801661a:	bd90      	pop	{r4, r7, pc}
 801661c:	0801af80 	.word	0x0801af80
 8016620:	20008884 	.word	0x20008884
 8016624:	20008885 	.word	0x20008885
 8016628:	20008886 	.word	0x20008886
 801662c:	20008887 	.word	0x20008887
 8016630:	20000580 	.word	0x20000580
 8016634:	0801af94 	.word	0x0801af94
 8016638:	2000051c 	.word	0x2000051c
 801663c:	0801afac 	.word	0x0801afac
 8016640:	0801afc4 	.word	0x0801afc4
 8016644:	0801afdc 	.word	0x0801afdc

08016648 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	4a09      	ldr	r2, [pc, #36]	@ (8016678 <HAL_SPI_TxCpltCallback+0x30>)
 8016654:	4293      	cmp	r3, r2
 8016656:	d102      	bne.n	801665e <HAL_SPI_TxCpltCallback+0x16>
 8016658:	4b08      	ldr	r3, [pc, #32]	@ (801667c <HAL_SPI_TxCpltCallback+0x34>)
 801665a:	2201      	movs	r2, #1
 801665c:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	4a07      	ldr	r2, [pc, #28]	@ (8016680 <HAL_SPI_TxCpltCallback+0x38>)
 8016662:	4293      	cmp	r3, r2
 8016664:	d102      	bne.n	801666c <HAL_SPI_TxCpltCallback+0x24>
 8016666:	4b07      	ldr	r3, [pc, #28]	@ (8016684 <HAL_SPI_TxCpltCallback+0x3c>)
 8016668:	2201      	movs	r2, #1
 801666a:	701a      	strb	r2, [r3, #0]
}
 801666c:	bf00      	nop
 801666e:	370c      	adds	r7, #12
 8016670:	46bd      	mov	sp, r7
 8016672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016676:	4770      	bx	lr
 8016678:	2000051c 	.word	0x2000051c
 801667c:	20008884 	.word	0x20008884
 8016680:	20000580 	.word	0x20000580
 8016684:	20008886 	.word	0x20008886

08016688 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8016688:	b480      	push	{r7}
 801668a:	b083      	sub	sp, #12
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	4a09      	ldr	r2, [pc, #36]	@ (80166b8 <HAL_SPI_RxCpltCallback+0x30>)
 8016694:	4293      	cmp	r3, r2
 8016696:	d102      	bne.n	801669e <HAL_SPI_RxCpltCallback+0x16>
 8016698:	4b08      	ldr	r3, [pc, #32]	@ (80166bc <HAL_SPI_RxCpltCallback+0x34>)
 801669a:	2201      	movs	r2, #1
 801669c:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	4a07      	ldr	r2, [pc, #28]	@ (80166c0 <HAL_SPI_RxCpltCallback+0x38>)
 80166a2:	4293      	cmp	r3, r2
 80166a4:	d102      	bne.n	80166ac <HAL_SPI_RxCpltCallback+0x24>
 80166a6:	4b07      	ldr	r3, [pc, #28]	@ (80166c4 <HAL_SPI_RxCpltCallback+0x3c>)
 80166a8:	2201      	movs	r2, #1
 80166aa:	701a      	strb	r2, [r3, #0]
}
 80166ac:	bf00      	nop
 80166ae:	370c      	adds	r7, #12
 80166b0:	46bd      	mov	sp, r7
 80166b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b6:	4770      	bx	lr
 80166b8:	2000051c 	.word	0x2000051c
 80166bc:	20008885 	.word	0x20008885
 80166c0:	20000580 	.word	0x20000580
 80166c4:	20008887 	.word	0x20008887

080166c8 <Test_N_Perform>:

#include "tests.h"
#include <stdio.h>

uint8_t Test_N_Perform(const char *test_name, TestFunction test_func, uint8_t n)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b086      	sub	sp, #24
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	60f8      	str	r0, [r7, #12]
 80166d0:	60b9      	str	r1, [r7, #8]
 80166d2:	4613      	mov	r3, r2
 80166d4:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < n; i++)
 80166d6:	2300      	movs	r3, #0
 80166d8:	617b      	str	r3, [r7, #20]
 80166da:	e017      	b.n	801670c <Test_N_Perform+0x44>
	{
		if (test_func() == TEST_FAILED)
 80166dc:	68bb      	ldr	r3, [r7, #8]
 80166de:	4798      	blx	r3
 80166e0:	4603      	mov	r3, r0
 80166e2:	2bff      	cmp	r3, #255	@ 0xff
 80166e4:	d108      	bne.n	80166f8 <Test_N_Perform+0x30>
		{
#ifdef PRINT_TESTS_DEBUG
			printf("TEST %d: %s test failed\n", i + 1, test_name);
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	3301      	adds	r3, #1
 80166ea:	68fa      	ldr	r2, [r7, #12]
 80166ec:	4619      	mov	r1, r3
 80166ee:	480c      	ldr	r0, [pc, #48]	@ (8016720 <Test_N_Perform+0x58>)
 80166f0:	f000 fa22 	bl	8016b38 <iprintf>
#endif
			return TEST_FAILED;
 80166f4:	23ff      	movs	r3, #255	@ 0xff
 80166f6:	e00e      	b.n	8016716 <Test_N_Perform+0x4e>
		}
#ifdef PRINT_TESTS_DEBUG
		else
		{
			printf("TEST %d: %s test success\n", i + 1, test_name);
 80166f8:	697b      	ldr	r3, [r7, #20]
 80166fa:	3301      	adds	r3, #1
 80166fc:	68fa      	ldr	r2, [r7, #12]
 80166fe:	4619      	mov	r1, r3
 8016700:	4808      	ldr	r0, [pc, #32]	@ (8016724 <Test_N_Perform+0x5c>)
 8016702:	f000 fa19 	bl	8016b38 <iprintf>
	for (int i = 0; i < n; i++)
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	3301      	adds	r3, #1
 801670a:	617b      	str	r3, [r7, #20]
 801670c:	79fb      	ldrb	r3, [r7, #7]
 801670e:	697a      	ldr	r2, [r7, #20]
 8016710:	429a      	cmp	r2, r3
 8016712:	dbe3      	blt.n	80166dc <Test_N_Perform+0x14>
		}
#endif
	}

	return TEST_SUCCESS;
 8016714:	2301      	movs	r3, #1
}
 8016716:	4618      	mov	r0, r3
 8016718:	3718      	adds	r7, #24
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}
 801671e:	bf00      	nop
 8016720:	0801aff4 	.word	0x0801aff4
 8016724:	0801b010 	.word	0x0801b010

08016728 <Test_N_Perform_Msg>:

uint8_t Test_N_Perform_Msg(const char *test_name, MsgTestFunction test_func, uint8_t *msg, uint8_t msg_len, uint8_t n)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b086      	sub	sp, #24
 801672c:	af00      	add	r7, sp, #0
 801672e:	60f8      	str	r0, [r7, #12]
 8016730:	60b9      	str	r1, [r7, #8]
 8016732:	607a      	str	r2, [r7, #4]
 8016734:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < n; i++)
 8016736:	2300      	movs	r3, #0
 8016738:	617b      	str	r3, [r7, #20]
 801673a:	e01a      	b.n	8016772 <Test_N_Perform_Msg+0x4a>
	{
		if (test_func(msg, msg_len) == TEST_FAILED)
 801673c:	78fa      	ldrb	r2, [r7, #3]
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	4611      	mov	r1, r2
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	4798      	blx	r3
 8016746:	4603      	mov	r3, r0
 8016748:	2bff      	cmp	r3, #255	@ 0xff
 801674a:	d108      	bne.n	801675e <Test_N_Perform_Msg+0x36>
		{
#ifdef PRINT_TESTS_DEBUG
			printf("TEST %d: %s test failed\n", i + 1, test_name);
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	3301      	adds	r3, #1
 8016750:	68fa      	ldr	r2, [r7, #12]
 8016752:	4619      	mov	r1, r3
 8016754:	480c      	ldr	r0, [pc, #48]	@ (8016788 <Test_N_Perform_Msg+0x60>)
 8016756:	f000 f9ef 	bl	8016b38 <iprintf>
#endif
			return TEST_FAILED;
 801675a:	23ff      	movs	r3, #255	@ 0xff
 801675c:	e00f      	b.n	801677e <Test_N_Perform_Msg+0x56>
		}
#ifdef PRINT_TESTS_DEBUG
		else
		{
			printf("TEST %d: %s test success\n", i + 1, test_name);
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	3301      	adds	r3, #1
 8016762:	68fa      	ldr	r2, [r7, #12]
 8016764:	4619      	mov	r1, r3
 8016766:	4809      	ldr	r0, [pc, #36]	@ (801678c <Test_N_Perform_Msg+0x64>)
 8016768:	f000 f9e6 	bl	8016b38 <iprintf>
	for (int i = 0; i < n; i++)
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	3301      	adds	r3, #1
 8016770:	617b      	str	r3, [r7, #20]
 8016772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016776:	697a      	ldr	r2, [r7, #20]
 8016778:	429a      	cmp	r2, r3
 801677a:	dbdf      	blt.n	801673c <Test_N_Perform_Msg+0x14>
		}
#endif
	}

	return TEST_SUCCESS;
 801677c:	2301      	movs	r3, #1
}
 801677e:	4618      	mov	r0, r3
 8016780:	3718      	adds	r7, #24
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	0801aff4 	.word	0x0801aff4
 801678c:	0801b010 	.word	0x0801b010

08016790 <TIM_Test_Perform>:
#include "test_consts.h"
#include <stdio.h>
#include <stdint.h>

uint8_t TIM_Test_Perform(void)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing timer test\n");
 8016794:	4802      	ldr	r0, [pc, #8]	@ (80167a0 <TIM_Test_Perform+0x10>)
 8016796:	f000 fa3f 	bl	8016c18 <puts>
#endif

	return TEST_SUCCESS;
 801679a:	2301      	movs	r3, #1
}
 801679c:	4618      	mov	r0, r3
 801679e:	bd80      	pop	{r7, pc}
 80167a0:	0801b02c 	.word	0x0801b02c

080167a4 <UART_Test_Perform>:
// DMA synchronization
volatile uint8_t uart4_rx_done;
volatile uint8_t uart5_rx_done;

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 80167a4:	b590      	push	{r4, r7, lr}
 80167a6:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80167b0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80167b4:	6018      	str	r0, [r3, #0]
 80167b6:	460a      	mov	r2, r1
 80167b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80167bc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80167c0:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing uart test\n");
 80167c2:	4844      	ldr	r0, [pc, #272]	@ (80168d4 <UART_Test_Perform+0x130>)
 80167c4:	f000 fa28 	bl	8016c18 <puts>
#endif

	uart4_rx_done = 0;
 80167c8:	4b43      	ldr	r3, [pc, #268]	@ (80168d8 <UART_Test_Perform+0x134>)
 80167ca:	2200      	movs	r2, #0
 80167cc:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 80167ce:	4b43      	ldr	r3, [pc, #268]	@ (80168dc <UART_Test_Perform+0x138>)
 80167d0:	2200      	movs	r2, #0
 80167d2:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 80167d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80167d8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	b29a      	uxth	r2, r3
 80167e0:	f107 030c 	add.w	r3, r7, #12
 80167e4:	4619      	mov	r1, r3
 80167e6:	483e      	ldr	r0, [pc, #248]	@ (80168e0 <UART_Test_Perform+0x13c>)
 80167e8:	f7f3 f800 	bl	80097ec <HAL_UART_Receive_DMA>
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d004      	beq.n	80167fc <UART_Test_Perform+0x58>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
 80167f2:	483c      	ldr	r0, [pc, #240]	@ (80168e4 <UART_Test_Perform+0x140>)
 80167f4:	f000 fa10 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 80167f8:	23ff      	movs	r3, #255	@ 0xff
 80167fa:	e066      	b.n	80168ca <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 80167fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016800:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	b29a      	uxth	r2, r3
 8016808:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801680c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016810:	6819      	ldr	r1, [r3, #0]
 8016812:	4835      	ldr	r0, [pc, #212]	@ (80168e8 <UART_Test_Perform+0x144>)
 8016814:	f7f2 ff8c 	bl	8009730 <HAL_UART_Transmit_IT>
 8016818:	4603      	mov	r3, r0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d004      	beq.n	8016828 <UART_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
 801681e:	4833      	ldr	r0, [pc, #204]	@ (80168ec <UART_Test_Perform+0x148>)
 8016820:	f000 f9fa 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 8016824:	23ff      	movs	r3, #255	@ 0xff
 8016826:	e050      	b.n	80168ca <UART_Test_Perform+0x126>
	}
	while (!uart5_rx_done);
 8016828:	bf00      	nop
 801682a:	4b2c      	ldr	r3, [pc, #176]	@ (80168dc <UART_Test_Perform+0x138>)
 801682c:	781b      	ldrb	r3, [r3, #0]
 801682e:	b2db      	uxtb	r3, r3
 8016830:	2b00      	cmp	r3, #0
 8016832:	d0fa      	beq.n	801682a <UART_Test_Perform+0x86>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8016834:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016838:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	b29a      	uxth	r2, r3
 8016840:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8016844:	4619      	mov	r1, r3
 8016846:	4828      	ldr	r0, [pc, #160]	@ (80168e8 <UART_Test_Perform+0x144>)
 8016848:	f7f2 ffd0 	bl	80097ec <HAL_UART_Receive_DMA>
 801684c:	4603      	mov	r3, r0
 801684e:	2b00      	cmp	r3, #0
 8016850:	d004      	beq.n	801685c <UART_Test_Perform+0xb8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
 8016852:	4827      	ldr	r0, [pc, #156]	@ (80168f0 <UART_Test_Perform+0x14c>)
 8016854:	f000 f9e0 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 8016858:	23ff      	movs	r3, #255	@ 0xff
 801685a:	e036      	b.n	80168ca <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 801685c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016860:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	b29a      	uxth	r2, r3
 8016868:	f107 030c 	add.w	r3, r7, #12
 801686c:	4619      	mov	r1, r3
 801686e:	481c      	ldr	r0, [pc, #112]	@ (80168e0 <UART_Test_Perform+0x13c>)
 8016870:	f7f2 ff5e 	bl	8009730 <HAL_UART_Transmit_IT>
 8016874:	4603      	mov	r3, r0
 8016876:	2b00      	cmp	r3, #0
 8016878:	d004      	beq.n	8016884 <UART_Test_Perform+0xe0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
 801687a:	481e      	ldr	r0, [pc, #120]	@ (80168f4 <UART_Test_Perform+0x150>)
 801687c:	f000 f9cc 	bl	8016c18 <puts>
#endif
		return TEST_FAILED;
 8016880:	23ff      	movs	r3, #255	@ 0xff
 8016882:	e022      	b.n	80168ca <UART_Test_Perform+0x126>
	}
	while (!uart4_rx_done);
 8016884:	bf00      	nop
 8016886:	4b14      	ldr	r3, [pc, #80]	@ (80168d8 <UART_Test_Perform+0x134>)
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	b2db      	uxtb	r3, r3
 801688c:	2b00      	cmp	r3, #0
 801688e:	d0fa      	beq.n	8016886 <UART_Test_Perform+0xe2>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8016890:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016894:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8016898:	781c      	ldrb	r4, [r3, #0]
 801689a:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 801689e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80168a2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80168a6:	7819      	ldrb	r1, [r3, #0]
 80168a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80168ac:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80168b0:	4623      	mov	r3, r4
 80168b2:	6800      	ldr	r0, [r0, #0]
 80168b4:	f7ff fb74 	bl	8015fa0 <Match_CRC>
 80168b8:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80168bc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	d101      	bne.n	80168c8 <UART_Test_Perform+0x124>
 80168c4:	2301      	movs	r3, #1
 80168c6:	e000      	b.n	80168ca <UART_Test_Perform+0x126>

	return TEST_FAILED;
 80168c8:	23ff      	movs	r3, #255	@ 0xff
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd90      	pop	{r4, r7, pc}
 80168d4:	0801b044 	.word	0x0801b044
 80168d8:	20008888 	.word	0x20008888
 80168dc:	20008889 	.word	0x20008889
 80168e0:	200007f0 	.word	0x200007f0
 80168e4:	0801b05c 	.word	0x0801b05c
 80168e8:	20000768 	.word	0x20000768
 80168ec:	0801b078 	.word	0x0801b078
 80168f0:	0801b094 	.word	0x0801b094
 80168f4:	0801b0b0 	.word	0x0801b0b0

080168f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80168f8:	b480      	push	{r7}
 80168fa:	b083      	sub	sp, #12
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	4a09      	ldr	r2, [pc, #36]	@ (8016928 <HAL_UART_RxCpltCallback+0x30>)
 8016904:	4293      	cmp	r3, r2
 8016906:	d102      	bne.n	801690e <HAL_UART_RxCpltCallback+0x16>
 8016908:	4b08      	ldr	r3, [pc, #32]	@ (801692c <HAL_UART_RxCpltCallback+0x34>)
 801690a:	2201      	movs	r2, #1
 801690c:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	4a07      	ldr	r2, [pc, #28]	@ (8016930 <HAL_UART_RxCpltCallback+0x38>)
 8016912:	4293      	cmp	r3, r2
 8016914:	d102      	bne.n	801691c <HAL_UART_RxCpltCallback+0x24>
 8016916:	4b07      	ldr	r3, [pc, #28]	@ (8016934 <HAL_UART_RxCpltCallback+0x3c>)
 8016918:	2201      	movs	r2, #1
 801691a:	701a      	strb	r2, [r3, #0]
}
 801691c:	bf00      	nop
 801691e:	370c      	adds	r7, #12
 8016920:	46bd      	mov	sp, r7
 8016922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016926:	4770      	bx	lr
 8016928:	20000768 	.word	0x20000768
 801692c:	20008888 	.word	0x20008888
 8016930:	200007f0 	.word	0x200007f0
 8016934:	20008889 	.word	0x20008889

08016938 <rand>:
 8016938:	4b16      	ldr	r3, [pc, #88]	@ (8016994 <rand+0x5c>)
 801693a:	b510      	push	{r4, lr}
 801693c:	681c      	ldr	r4, [r3, #0]
 801693e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016940:	b9b3      	cbnz	r3, 8016970 <rand+0x38>
 8016942:	2018      	movs	r0, #24
 8016944:	f000 fb44 	bl	8016fd0 <malloc>
 8016948:	4602      	mov	r2, r0
 801694a:	6320      	str	r0, [r4, #48]	@ 0x30
 801694c:	b920      	cbnz	r0, 8016958 <rand+0x20>
 801694e:	4b12      	ldr	r3, [pc, #72]	@ (8016998 <rand+0x60>)
 8016950:	4812      	ldr	r0, [pc, #72]	@ (801699c <rand+0x64>)
 8016952:	2152      	movs	r1, #82	@ 0x52
 8016954:	f000 fad4 	bl	8016f00 <__assert_func>
 8016958:	4911      	ldr	r1, [pc, #68]	@ (80169a0 <rand+0x68>)
 801695a:	4b12      	ldr	r3, [pc, #72]	@ (80169a4 <rand+0x6c>)
 801695c:	e9c0 1300 	strd	r1, r3, [r0]
 8016960:	4b11      	ldr	r3, [pc, #68]	@ (80169a8 <rand+0x70>)
 8016962:	6083      	str	r3, [r0, #8]
 8016964:	230b      	movs	r3, #11
 8016966:	8183      	strh	r3, [r0, #12]
 8016968:	2100      	movs	r1, #0
 801696a:	2001      	movs	r0, #1
 801696c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016970:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016972:	480e      	ldr	r0, [pc, #56]	@ (80169ac <rand+0x74>)
 8016974:	690b      	ldr	r3, [r1, #16]
 8016976:	694c      	ldr	r4, [r1, #20]
 8016978:	4a0d      	ldr	r2, [pc, #52]	@ (80169b0 <rand+0x78>)
 801697a:	4358      	muls	r0, r3
 801697c:	fb02 0004 	mla	r0, r2, r4, r0
 8016980:	fba3 3202 	umull	r3, r2, r3, r2
 8016984:	3301      	adds	r3, #1
 8016986:	eb40 0002 	adc.w	r0, r0, r2
 801698a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801698e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016992:	bd10      	pop	{r4, pc}
 8016994:	2000007c 	.word	0x2000007c
 8016998:	0801b202 	.word	0x0801b202
 801699c:	0801b219 	.word	0x0801b219
 80169a0:	abcd330e 	.word	0xabcd330e
 80169a4:	e66d1234 	.word	0xe66d1234
 80169a8:	0005deec 	.word	0x0005deec
 80169ac:	5851f42d 	.word	0x5851f42d
 80169b0:	4c957f2d 	.word	0x4c957f2d

080169b4 <std>:
 80169b4:	2300      	movs	r3, #0
 80169b6:	b510      	push	{r4, lr}
 80169b8:	4604      	mov	r4, r0
 80169ba:	e9c0 3300 	strd	r3, r3, [r0]
 80169be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80169c2:	6083      	str	r3, [r0, #8]
 80169c4:	8181      	strh	r1, [r0, #12]
 80169c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80169c8:	81c2      	strh	r2, [r0, #14]
 80169ca:	6183      	str	r3, [r0, #24]
 80169cc:	4619      	mov	r1, r3
 80169ce:	2208      	movs	r2, #8
 80169d0:	305c      	adds	r0, #92	@ 0x5c
 80169d2:	f000 fa11 	bl	8016df8 <memset>
 80169d6:	4b0d      	ldr	r3, [pc, #52]	@ (8016a0c <std+0x58>)
 80169d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80169da:	4b0d      	ldr	r3, [pc, #52]	@ (8016a10 <std+0x5c>)
 80169dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80169de:	4b0d      	ldr	r3, [pc, #52]	@ (8016a14 <std+0x60>)
 80169e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80169e2:	4b0d      	ldr	r3, [pc, #52]	@ (8016a18 <std+0x64>)
 80169e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80169e6:	4b0d      	ldr	r3, [pc, #52]	@ (8016a1c <std+0x68>)
 80169e8:	6224      	str	r4, [r4, #32]
 80169ea:	429c      	cmp	r4, r3
 80169ec:	d006      	beq.n	80169fc <std+0x48>
 80169ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80169f2:	4294      	cmp	r4, r2
 80169f4:	d002      	beq.n	80169fc <std+0x48>
 80169f6:	33d0      	adds	r3, #208	@ 0xd0
 80169f8:	429c      	cmp	r4, r3
 80169fa:	d105      	bne.n	8016a08 <std+0x54>
 80169fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a04:	f000 ba6a 	b.w	8016edc <__retarget_lock_init_recursive>
 8016a08:	bd10      	pop	{r4, pc}
 8016a0a:	bf00      	nop
 8016a0c:	08016c29 	.word	0x08016c29
 8016a10:	08016c4b 	.word	0x08016c4b
 8016a14:	08016c83 	.word	0x08016c83
 8016a18:	08016ca7 	.word	0x08016ca7
 8016a1c:	2000888c 	.word	0x2000888c

08016a20 <stdio_exit_handler>:
 8016a20:	4a02      	ldr	r2, [pc, #8]	@ (8016a2c <stdio_exit_handler+0xc>)
 8016a22:	4903      	ldr	r1, [pc, #12]	@ (8016a30 <stdio_exit_handler+0x10>)
 8016a24:	4803      	ldr	r0, [pc, #12]	@ (8016a34 <stdio_exit_handler+0x14>)
 8016a26:	f000 b869 	b.w	8016afc <_fwalk_sglue>
 8016a2a:	bf00      	nop
 8016a2c:	20000070 	.word	0x20000070
 8016a30:	080177e1 	.word	0x080177e1
 8016a34:	20000080 	.word	0x20000080

08016a38 <cleanup_stdio>:
 8016a38:	6841      	ldr	r1, [r0, #4]
 8016a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8016a6c <cleanup_stdio+0x34>)
 8016a3c:	4299      	cmp	r1, r3
 8016a3e:	b510      	push	{r4, lr}
 8016a40:	4604      	mov	r4, r0
 8016a42:	d001      	beq.n	8016a48 <cleanup_stdio+0x10>
 8016a44:	f000 fecc 	bl	80177e0 <_fflush_r>
 8016a48:	68a1      	ldr	r1, [r4, #8]
 8016a4a:	4b09      	ldr	r3, [pc, #36]	@ (8016a70 <cleanup_stdio+0x38>)
 8016a4c:	4299      	cmp	r1, r3
 8016a4e:	d002      	beq.n	8016a56 <cleanup_stdio+0x1e>
 8016a50:	4620      	mov	r0, r4
 8016a52:	f000 fec5 	bl	80177e0 <_fflush_r>
 8016a56:	68e1      	ldr	r1, [r4, #12]
 8016a58:	4b06      	ldr	r3, [pc, #24]	@ (8016a74 <cleanup_stdio+0x3c>)
 8016a5a:	4299      	cmp	r1, r3
 8016a5c:	d004      	beq.n	8016a68 <cleanup_stdio+0x30>
 8016a5e:	4620      	mov	r0, r4
 8016a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a64:	f000 bebc 	b.w	80177e0 <_fflush_r>
 8016a68:	bd10      	pop	{r4, pc}
 8016a6a:	bf00      	nop
 8016a6c:	2000888c 	.word	0x2000888c
 8016a70:	200088f4 	.word	0x200088f4
 8016a74:	2000895c 	.word	0x2000895c

08016a78 <global_stdio_init.part.0>:
 8016a78:	b510      	push	{r4, lr}
 8016a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8016aa8 <global_stdio_init.part.0+0x30>)
 8016a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8016aac <global_stdio_init.part.0+0x34>)
 8016a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8016ab0 <global_stdio_init.part.0+0x38>)
 8016a80:	601a      	str	r2, [r3, #0]
 8016a82:	4620      	mov	r0, r4
 8016a84:	2200      	movs	r2, #0
 8016a86:	2104      	movs	r1, #4
 8016a88:	f7ff ff94 	bl	80169b4 <std>
 8016a8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016a90:	2201      	movs	r2, #1
 8016a92:	2109      	movs	r1, #9
 8016a94:	f7ff ff8e 	bl	80169b4 <std>
 8016a98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016a9c:	2202      	movs	r2, #2
 8016a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aa2:	2112      	movs	r1, #18
 8016aa4:	f7ff bf86 	b.w	80169b4 <std>
 8016aa8:	200089c4 	.word	0x200089c4
 8016aac:	2000888c 	.word	0x2000888c
 8016ab0:	08016a21 	.word	0x08016a21

08016ab4 <__sfp_lock_acquire>:
 8016ab4:	4801      	ldr	r0, [pc, #4]	@ (8016abc <__sfp_lock_acquire+0x8>)
 8016ab6:	f000 ba12 	b.w	8016ede <__retarget_lock_acquire_recursive>
 8016aba:	bf00      	nop
 8016abc:	200089cd 	.word	0x200089cd

08016ac0 <__sfp_lock_release>:
 8016ac0:	4801      	ldr	r0, [pc, #4]	@ (8016ac8 <__sfp_lock_release+0x8>)
 8016ac2:	f000 ba0d 	b.w	8016ee0 <__retarget_lock_release_recursive>
 8016ac6:	bf00      	nop
 8016ac8:	200089cd 	.word	0x200089cd

08016acc <__sinit>:
 8016acc:	b510      	push	{r4, lr}
 8016ace:	4604      	mov	r4, r0
 8016ad0:	f7ff fff0 	bl	8016ab4 <__sfp_lock_acquire>
 8016ad4:	6a23      	ldr	r3, [r4, #32]
 8016ad6:	b11b      	cbz	r3, 8016ae0 <__sinit+0x14>
 8016ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016adc:	f7ff bff0 	b.w	8016ac0 <__sfp_lock_release>
 8016ae0:	4b04      	ldr	r3, [pc, #16]	@ (8016af4 <__sinit+0x28>)
 8016ae2:	6223      	str	r3, [r4, #32]
 8016ae4:	4b04      	ldr	r3, [pc, #16]	@ (8016af8 <__sinit+0x2c>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d1f5      	bne.n	8016ad8 <__sinit+0xc>
 8016aec:	f7ff ffc4 	bl	8016a78 <global_stdio_init.part.0>
 8016af0:	e7f2      	b.n	8016ad8 <__sinit+0xc>
 8016af2:	bf00      	nop
 8016af4:	08016a39 	.word	0x08016a39
 8016af8:	200089c4 	.word	0x200089c4

08016afc <_fwalk_sglue>:
 8016afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b00:	4607      	mov	r7, r0
 8016b02:	4688      	mov	r8, r1
 8016b04:	4614      	mov	r4, r2
 8016b06:	2600      	movs	r6, #0
 8016b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8016b10:	d505      	bpl.n	8016b1e <_fwalk_sglue+0x22>
 8016b12:	6824      	ldr	r4, [r4, #0]
 8016b14:	2c00      	cmp	r4, #0
 8016b16:	d1f7      	bne.n	8016b08 <_fwalk_sglue+0xc>
 8016b18:	4630      	mov	r0, r6
 8016b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b1e:	89ab      	ldrh	r3, [r5, #12]
 8016b20:	2b01      	cmp	r3, #1
 8016b22:	d907      	bls.n	8016b34 <_fwalk_sglue+0x38>
 8016b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b28:	3301      	adds	r3, #1
 8016b2a:	d003      	beq.n	8016b34 <_fwalk_sglue+0x38>
 8016b2c:	4629      	mov	r1, r5
 8016b2e:	4638      	mov	r0, r7
 8016b30:	47c0      	blx	r8
 8016b32:	4306      	orrs	r6, r0
 8016b34:	3568      	adds	r5, #104	@ 0x68
 8016b36:	e7e9      	b.n	8016b0c <_fwalk_sglue+0x10>

08016b38 <iprintf>:
 8016b38:	b40f      	push	{r0, r1, r2, r3}
 8016b3a:	b507      	push	{r0, r1, r2, lr}
 8016b3c:	4906      	ldr	r1, [pc, #24]	@ (8016b58 <iprintf+0x20>)
 8016b3e:	ab04      	add	r3, sp, #16
 8016b40:	6808      	ldr	r0, [r1, #0]
 8016b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b46:	6881      	ldr	r1, [r0, #8]
 8016b48:	9301      	str	r3, [sp, #4]
 8016b4a:	f000 fb21 	bl	8017190 <_vfiprintf_r>
 8016b4e:	b003      	add	sp, #12
 8016b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b54:	b004      	add	sp, #16
 8016b56:	4770      	bx	lr
 8016b58:	2000007c 	.word	0x2000007c

08016b5c <putchar>:
 8016b5c:	4b02      	ldr	r3, [pc, #8]	@ (8016b68 <putchar+0xc>)
 8016b5e:	4601      	mov	r1, r0
 8016b60:	6818      	ldr	r0, [r3, #0]
 8016b62:	6882      	ldr	r2, [r0, #8]
 8016b64:	f000 bed8 	b.w	8017918 <_putc_r>
 8016b68:	2000007c 	.word	0x2000007c

08016b6c <_puts_r>:
 8016b6c:	6a03      	ldr	r3, [r0, #32]
 8016b6e:	b570      	push	{r4, r5, r6, lr}
 8016b70:	6884      	ldr	r4, [r0, #8]
 8016b72:	4605      	mov	r5, r0
 8016b74:	460e      	mov	r6, r1
 8016b76:	b90b      	cbnz	r3, 8016b7c <_puts_r+0x10>
 8016b78:	f7ff ffa8 	bl	8016acc <__sinit>
 8016b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b7e:	07db      	lsls	r3, r3, #31
 8016b80:	d405      	bmi.n	8016b8e <_puts_r+0x22>
 8016b82:	89a3      	ldrh	r3, [r4, #12]
 8016b84:	0598      	lsls	r0, r3, #22
 8016b86:	d402      	bmi.n	8016b8e <_puts_r+0x22>
 8016b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b8a:	f000 f9a8 	bl	8016ede <__retarget_lock_acquire_recursive>
 8016b8e:	89a3      	ldrh	r3, [r4, #12]
 8016b90:	0719      	lsls	r1, r3, #28
 8016b92:	d502      	bpl.n	8016b9a <_puts_r+0x2e>
 8016b94:	6923      	ldr	r3, [r4, #16]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d135      	bne.n	8016c06 <_puts_r+0x9a>
 8016b9a:	4621      	mov	r1, r4
 8016b9c:	4628      	mov	r0, r5
 8016b9e:	f000 f8c5 	bl	8016d2c <__swsetup_r>
 8016ba2:	b380      	cbz	r0, 8016c06 <_puts_r+0x9a>
 8016ba4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016ba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016baa:	07da      	lsls	r2, r3, #31
 8016bac:	d405      	bmi.n	8016bba <_puts_r+0x4e>
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	059b      	lsls	r3, r3, #22
 8016bb2:	d402      	bmi.n	8016bba <_puts_r+0x4e>
 8016bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016bb6:	f000 f993 	bl	8016ee0 <__retarget_lock_release_recursive>
 8016bba:	4628      	mov	r0, r5
 8016bbc:	bd70      	pop	{r4, r5, r6, pc}
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	da04      	bge.n	8016bcc <_puts_r+0x60>
 8016bc2:	69a2      	ldr	r2, [r4, #24]
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	dc17      	bgt.n	8016bf8 <_puts_r+0x8c>
 8016bc8:	290a      	cmp	r1, #10
 8016bca:	d015      	beq.n	8016bf8 <_puts_r+0x8c>
 8016bcc:	6823      	ldr	r3, [r4, #0]
 8016bce:	1c5a      	adds	r2, r3, #1
 8016bd0:	6022      	str	r2, [r4, #0]
 8016bd2:	7019      	strb	r1, [r3, #0]
 8016bd4:	68a3      	ldr	r3, [r4, #8]
 8016bd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016bda:	3b01      	subs	r3, #1
 8016bdc:	60a3      	str	r3, [r4, #8]
 8016bde:	2900      	cmp	r1, #0
 8016be0:	d1ed      	bne.n	8016bbe <_puts_r+0x52>
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	da11      	bge.n	8016c0a <_puts_r+0x9e>
 8016be6:	4622      	mov	r2, r4
 8016be8:	210a      	movs	r1, #10
 8016bea:	4628      	mov	r0, r5
 8016bec:	f000 f85f 	bl	8016cae <__swbuf_r>
 8016bf0:	3001      	adds	r0, #1
 8016bf2:	d0d7      	beq.n	8016ba4 <_puts_r+0x38>
 8016bf4:	250a      	movs	r5, #10
 8016bf6:	e7d7      	b.n	8016ba8 <_puts_r+0x3c>
 8016bf8:	4622      	mov	r2, r4
 8016bfa:	4628      	mov	r0, r5
 8016bfc:	f000 f857 	bl	8016cae <__swbuf_r>
 8016c00:	3001      	adds	r0, #1
 8016c02:	d1e7      	bne.n	8016bd4 <_puts_r+0x68>
 8016c04:	e7ce      	b.n	8016ba4 <_puts_r+0x38>
 8016c06:	3e01      	subs	r6, #1
 8016c08:	e7e4      	b.n	8016bd4 <_puts_r+0x68>
 8016c0a:	6823      	ldr	r3, [r4, #0]
 8016c0c:	1c5a      	adds	r2, r3, #1
 8016c0e:	6022      	str	r2, [r4, #0]
 8016c10:	220a      	movs	r2, #10
 8016c12:	701a      	strb	r2, [r3, #0]
 8016c14:	e7ee      	b.n	8016bf4 <_puts_r+0x88>
	...

08016c18 <puts>:
 8016c18:	4b02      	ldr	r3, [pc, #8]	@ (8016c24 <puts+0xc>)
 8016c1a:	4601      	mov	r1, r0
 8016c1c:	6818      	ldr	r0, [r3, #0]
 8016c1e:	f7ff bfa5 	b.w	8016b6c <_puts_r>
 8016c22:	bf00      	nop
 8016c24:	2000007c 	.word	0x2000007c

08016c28 <__sread>:
 8016c28:	b510      	push	{r4, lr}
 8016c2a:	460c      	mov	r4, r1
 8016c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c30:	f000 f90c 	bl	8016e4c <_read_r>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	bfab      	itete	ge
 8016c38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8016c3c:	181b      	addge	r3, r3, r0
 8016c3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016c42:	bfac      	ite	ge
 8016c44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016c46:	81a3      	strhlt	r3, [r4, #12]
 8016c48:	bd10      	pop	{r4, pc}

08016c4a <__swrite>:
 8016c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c4e:	461f      	mov	r7, r3
 8016c50:	898b      	ldrh	r3, [r1, #12]
 8016c52:	05db      	lsls	r3, r3, #23
 8016c54:	4605      	mov	r5, r0
 8016c56:	460c      	mov	r4, r1
 8016c58:	4616      	mov	r6, r2
 8016c5a:	d505      	bpl.n	8016c68 <__swrite+0x1e>
 8016c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c60:	2302      	movs	r3, #2
 8016c62:	2200      	movs	r2, #0
 8016c64:	f000 f8e0 	bl	8016e28 <_lseek_r>
 8016c68:	89a3      	ldrh	r3, [r4, #12]
 8016c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c72:	81a3      	strh	r3, [r4, #12]
 8016c74:	4632      	mov	r2, r6
 8016c76:	463b      	mov	r3, r7
 8016c78:	4628      	mov	r0, r5
 8016c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c7e:	f000 b8f7 	b.w	8016e70 <_write_r>

08016c82 <__sseek>:
 8016c82:	b510      	push	{r4, lr}
 8016c84:	460c      	mov	r4, r1
 8016c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c8a:	f000 f8cd 	bl	8016e28 <_lseek_r>
 8016c8e:	1c43      	adds	r3, r0, #1
 8016c90:	89a3      	ldrh	r3, [r4, #12]
 8016c92:	bf15      	itete	ne
 8016c94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016c96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016c9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016c9e:	81a3      	strheq	r3, [r4, #12]
 8016ca0:	bf18      	it	ne
 8016ca2:	81a3      	strhne	r3, [r4, #12]
 8016ca4:	bd10      	pop	{r4, pc}

08016ca6 <__sclose>:
 8016ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016caa:	f000 b8ad 	b.w	8016e08 <_close_r>

08016cae <__swbuf_r>:
 8016cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cb0:	460e      	mov	r6, r1
 8016cb2:	4614      	mov	r4, r2
 8016cb4:	4605      	mov	r5, r0
 8016cb6:	b118      	cbz	r0, 8016cc0 <__swbuf_r+0x12>
 8016cb8:	6a03      	ldr	r3, [r0, #32]
 8016cba:	b90b      	cbnz	r3, 8016cc0 <__swbuf_r+0x12>
 8016cbc:	f7ff ff06 	bl	8016acc <__sinit>
 8016cc0:	69a3      	ldr	r3, [r4, #24]
 8016cc2:	60a3      	str	r3, [r4, #8]
 8016cc4:	89a3      	ldrh	r3, [r4, #12]
 8016cc6:	071a      	lsls	r2, r3, #28
 8016cc8:	d501      	bpl.n	8016cce <__swbuf_r+0x20>
 8016cca:	6923      	ldr	r3, [r4, #16]
 8016ccc:	b943      	cbnz	r3, 8016ce0 <__swbuf_r+0x32>
 8016cce:	4621      	mov	r1, r4
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	f000 f82b 	bl	8016d2c <__swsetup_r>
 8016cd6:	b118      	cbz	r0, 8016ce0 <__swbuf_r+0x32>
 8016cd8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016cdc:	4638      	mov	r0, r7
 8016cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ce0:	6823      	ldr	r3, [r4, #0]
 8016ce2:	6922      	ldr	r2, [r4, #16]
 8016ce4:	1a98      	subs	r0, r3, r2
 8016ce6:	6963      	ldr	r3, [r4, #20]
 8016ce8:	b2f6      	uxtb	r6, r6
 8016cea:	4283      	cmp	r3, r0
 8016cec:	4637      	mov	r7, r6
 8016cee:	dc05      	bgt.n	8016cfc <__swbuf_r+0x4e>
 8016cf0:	4621      	mov	r1, r4
 8016cf2:	4628      	mov	r0, r5
 8016cf4:	f000 fd74 	bl	80177e0 <_fflush_r>
 8016cf8:	2800      	cmp	r0, #0
 8016cfa:	d1ed      	bne.n	8016cd8 <__swbuf_r+0x2a>
 8016cfc:	68a3      	ldr	r3, [r4, #8]
 8016cfe:	3b01      	subs	r3, #1
 8016d00:	60a3      	str	r3, [r4, #8]
 8016d02:	6823      	ldr	r3, [r4, #0]
 8016d04:	1c5a      	adds	r2, r3, #1
 8016d06:	6022      	str	r2, [r4, #0]
 8016d08:	701e      	strb	r6, [r3, #0]
 8016d0a:	6962      	ldr	r2, [r4, #20]
 8016d0c:	1c43      	adds	r3, r0, #1
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d004      	beq.n	8016d1c <__swbuf_r+0x6e>
 8016d12:	89a3      	ldrh	r3, [r4, #12]
 8016d14:	07db      	lsls	r3, r3, #31
 8016d16:	d5e1      	bpl.n	8016cdc <__swbuf_r+0x2e>
 8016d18:	2e0a      	cmp	r6, #10
 8016d1a:	d1df      	bne.n	8016cdc <__swbuf_r+0x2e>
 8016d1c:	4621      	mov	r1, r4
 8016d1e:	4628      	mov	r0, r5
 8016d20:	f000 fd5e 	bl	80177e0 <_fflush_r>
 8016d24:	2800      	cmp	r0, #0
 8016d26:	d0d9      	beq.n	8016cdc <__swbuf_r+0x2e>
 8016d28:	e7d6      	b.n	8016cd8 <__swbuf_r+0x2a>
	...

08016d2c <__swsetup_r>:
 8016d2c:	b538      	push	{r3, r4, r5, lr}
 8016d2e:	4b29      	ldr	r3, [pc, #164]	@ (8016dd4 <__swsetup_r+0xa8>)
 8016d30:	4605      	mov	r5, r0
 8016d32:	6818      	ldr	r0, [r3, #0]
 8016d34:	460c      	mov	r4, r1
 8016d36:	b118      	cbz	r0, 8016d40 <__swsetup_r+0x14>
 8016d38:	6a03      	ldr	r3, [r0, #32]
 8016d3a:	b90b      	cbnz	r3, 8016d40 <__swsetup_r+0x14>
 8016d3c:	f7ff fec6 	bl	8016acc <__sinit>
 8016d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d44:	0719      	lsls	r1, r3, #28
 8016d46:	d422      	bmi.n	8016d8e <__swsetup_r+0x62>
 8016d48:	06da      	lsls	r2, r3, #27
 8016d4a:	d407      	bmi.n	8016d5c <__swsetup_r+0x30>
 8016d4c:	2209      	movs	r2, #9
 8016d4e:	602a      	str	r2, [r5, #0]
 8016d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d54:	81a3      	strh	r3, [r4, #12]
 8016d56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d5a:	e033      	b.n	8016dc4 <__swsetup_r+0x98>
 8016d5c:	0758      	lsls	r0, r3, #29
 8016d5e:	d512      	bpl.n	8016d86 <__swsetup_r+0x5a>
 8016d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d62:	b141      	cbz	r1, 8016d76 <__swsetup_r+0x4a>
 8016d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016d68:	4299      	cmp	r1, r3
 8016d6a:	d002      	beq.n	8016d72 <__swsetup_r+0x46>
 8016d6c:	4628      	mov	r0, r5
 8016d6e:	f000 f8e5 	bl	8016f3c <_free_r>
 8016d72:	2300      	movs	r3, #0
 8016d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8016d76:	89a3      	ldrh	r3, [r4, #12]
 8016d78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016d7c:	81a3      	strh	r3, [r4, #12]
 8016d7e:	2300      	movs	r3, #0
 8016d80:	6063      	str	r3, [r4, #4]
 8016d82:	6923      	ldr	r3, [r4, #16]
 8016d84:	6023      	str	r3, [r4, #0]
 8016d86:	89a3      	ldrh	r3, [r4, #12]
 8016d88:	f043 0308 	orr.w	r3, r3, #8
 8016d8c:	81a3      	strh	r3, [r4, #12]
 8016d8e:	6923      	ldr	r3, [r4, #16]
 8016d90:	b94b      	cbnz	r3, 8016da6 <__swsetup_r+0x7a>
 8016d92:	89a3      	ldrh	r3, [r4, #12]
 8016d94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d9c:	d003      	beq.n	8016da6 <__swsetup_r+0x7a>
 8016d9e:	4621      	mov	r1, r4
 8016da0:	4628      	mov	r0, r5
 8016da2:	f000 fd7d 	bl	80178a0 <__smakebuf_r>
 8016da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016daa:	f013 0201 	ands.w	r2, r3, #1
 8016dae:	d00a      	beq.n	8016dc6 <__swsetup_r+0x9a>
 8016db0:	2200      	movs	r2, #0
 8016db2:	60a2      	str	r2, [r4, #8]
 8016db4:	6962      	ldr	r2, [r4, #20]
 8016db6:	4252      	negs	r2, r2
 8016db8:	61a2      	str	r2, [r4, #24]
 8016dba:	6922      	ldr	r2, [r4, #16]
 8016dbc:	b942      	cbnz	r2, 8016dd0 <__swsetup_r+0xa4>
 8016dbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016dc2:	d1c5      	bne.n	8016d50 <__swsetup_r+0x24>
 8016dc4:	bd38      	pop	{r3, r4, r5, pc}
 8016dc6:	0799      	lsls	r1, r3, #30
 8016dc8:	bf58      	it	pl
 8016dca:	6962      	ldrpl	r2, [r4, #20]
 8016dcc:	60a2      	str	r2, [r4, #8]
 8016dce:	e7f4      	b.n	8016dba <__swsetup_r+0x8e>
 8016dd0:	2000      	movs	r0, #0
 8016dd2:	e7f7      	b.n	8016dc4 <__swsetup_r+0x98>
 8016dd4:	2000007c 	.word	0x2000007c

08016dd8 <memcmp>:
 8016dd8:	b510      	push	{r4, lr}
 8016dda:	3901      	subs	r1, #1
 8016ddc:	4402      	add	r2, r0
 8016dde:	4290      	cmp	r0, r2
 8016de0:	d101      	bne.n	8016de6 <memcmp+0xe>
 8016de2:	2000      	movs	r0, #0
 8016de4:	e005      	b.n	8016df2 <memcmp+0x1a>
 8016de6:	7803      	ldrb	r3, [r0, #0]
 8016de8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016dec:	42a3      	cmp	r3, r4
 8016dee:	d001      	beq.n	8016df4 <memcmp+0x1c>
 8016df0:	1b18      	subs	r0, r3, r4
 8016df2:	bd10      	pop	{r4, pc}
 8016df4:	3001      	adds	r0, #1
 8016df6:	e7f2      	b.n	8016dde <memcmp+0x6>

08016df8 <memset>:
 8016df8:	4402      	add	r2, r0
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	4293      	cmp	r3, r2
 8016dfe:	d100      	bne.n	8016e02 <memset+0xa>
 8016e00:	4770      	bx	lr
 8016e02:	f803 1b01 	strb.w	r1, [r3], #1
 8016e06:	e7f9      	b.n	8016dfc <memset+0x4>

08016e08 <_close_r>:
 8016e08:	b538      	push	{r3, r4, r5, lr}
 8016e0a:	4d06      	ldr	r5, [pc, #24]	@ (8016e24 <_close_r+0x1c>)
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	4604      	mov	r4, r0
 8016e10:	4608      	mov	r0, r1
 8016e12:	602b      	str	r3, [r5, #0]
 8016e14:	f7ea fbd6 	bl	80015c4 <_close>
 8016e18:	1c43      	adds	r3, r0, #1
 8016e1a:	d102      	bne.n	8016e22 <_close_r+0x1a>
 8016e1c:	682b      	ldr	r3, [r5, #0]
 8016e1e:	b103      	cbz	r3, 8016e22 <_close_r+0x1a>
 8016e20:	6023      	str	r3, [r4, #0]
 8016e22:	bd38      	pop	{r3, r4, r5, pc}
 8016e24:	200089c8 	.word	0x200089c8

08016e28 <_lseek_r>:
 8016e28:	b538      	push	{r3, r4, r5, lr}
 8016e2a:	4d07      	ldr	r5, [pc, #28]	@ (8016e48 <_lseek_r+0x20>)
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	4608      	mov	r0, r1
 8016e30:	4611      	mov	r1, r2
 8016e32:	2200      	movs	r2, #0
 8016e34:	602a      	str	r2, [r5, #0]
 8016e36:	461a      	mov	r2, r3
 8016e38:	f7ea fbeb 	bl	8001612 <_lseek>
 8016e3c:	1c43      	adds	r3, r0, #1
 8016e3e:	d102      	bne.n	8016e46 <_lseek_r+0x1e>
 8016e40:	682b      	ldr	r3, [r5, #0]
 8016e42:	b103      	cbz	r3, 8016e46 <_lseek_r+0x1e>
 8016e44:	6023      	str	r3, [r4, #0]
 8016e46:	bd38      	pop	{r3, r4, r5, pc}
 8016e48:	200089c8 	.word	0x200089c8

08016e4c <_read_r>:
 8016e4c:	b538      	push	{r3, r4, r5, lr}
 8016e4e:	4d07      	ldr	r5, [pc, #28]	@ (8016e6c <_read_r+0x20>)
 8016e50:	4604      	mov	r4, r0
 8016e52:	4608      	mov	r0, r1
 8016e54:	4611      	mov	r1, r2
 8016e56:	2200      	movs	r2, #0
 8016e58:	602a      	str	r2, [r5, #0]
 8016e5a:	461a      	mov	r2, r3
 8016e5c:	f7ea fb95 	bl	800158a <_read>
 8016e60:	1c43      	adds	r3, r0, #1
 8016e62:	d102      	bne.n	8016e6a <_read_r+0x1e>
 8016e64:	682b      	ldr	r3, [r5, #0]
 8016e66:	b103      	cbz	r3, 8016e6a <_read_r+0x1e>
 8016e68:	6023      	str	r3, [r4, #0]
 8016e6a:	bd38      	pop	{r3, r4, r5, pc}
 8016e6c:	200089c8 	.word	0x200089c8

08016e70 <_write_r>:
 8016e70:	b538      	push	{r3, r4, r5, lr}
 8016e72:	4d07      	ldr	r5, [pc, #28]	@ (8016e90 <_write_r+0x20>)
 8016e74:	4604      	mov	r4, r0
 8016e76:	4608      	mov	r0, r1
 8016e78:	4611      	mov	r1, r2
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	602a      	str	r2, [r5, #0]
 8016e7e:	461a      	mov	r2, r3
 8016e80:	f7e9 ff94 	bl	8000dac <_write>
 8016e84:	1c43      	adds	r3, r0, #1
 8016e86:	d102      	bne.n	8016e8e <_write_r+0x1e>
 8016e88:	682b      	ldr	r3, [r5, #0]
 8016e8a:	b103      	cbz	r3, 8016e8e <_write_r+0x1e>
 8016e8c:	6023      	str	r3, [r4, #0]
 8016e8e:	bd38      	pop	{r3, r4, r5, pc}
 8016e90:	200089c8 	.word	0x200089c8

08016e94 <__libc_init_array>:
 8016e94:	b570      	push	{r4, r5, r6, lr}
 8016e96:	4d0d      	ldr	r5, [pc, #52]	@ (8016ecc <__libc_init_array+0x38>)
 8016e98:	4c0d      	ldr	r4, [pc, #52]	@ (8016ed0 <__libc_init_array+0x3c>)
 8016e9a:	1b64      	subs	r4, r4, r5
 8016e9c:	10a4      	asrs	r4, r4, #2
 8016e9e:	2600      	movs	r6, #0
 8016ea0:	42a6      	cmp	r6, r4
 8016ea2:	d109      	bne.n	8016eb8 <__libc_init_array+0x24>
 8016ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8016ed4 <__libc_init_array+0x40>)
 8016ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8016ed8 <__libc_init_array+0x44>)
 8016ea8:	f000 fde8 	bl	8017a7c <_init>
 8016eac:	1b64      	subs	r4, r4, r5
 8016eae:	10a4      	asrs	r4, r4, #2
 8016eb0:	2600      	movs	r6, #0
 8016eb2:	42a6      	cmp	r6, r4
 8016eb4:	d105      	bne.n	8016ec2 <__libc_init_array+0x2e>
 8016eb6:	bd70      	pop	{r4, r5, r6, pc}
 8016eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ebc:	4798      	blx	r3
 8016ebe:	3601      	adds	r6, #1
 8016ec0:	e7ee      	b.n	8016ea0 <__libc_init_array+0xc>
 8016ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ec6:	4798      	blx	r3
 8016ec8:	3601      	adds	r6, #1
 8016eca:	e7f2      	b.n	8016eb2 <__libc_init_array+0x1e>
 8016ecc:	0801b2e8 	.word	0x0801b2e8
 8016ed0:	0801b2e8 	.word	0x0801b2e8
 8016ed4:	0801b2e8 	.word	0x0801b2e8
 8016ed8:	0801b2ec 	.word	0x0801b2ec

08016edc <__retarget_lock_init_recursive>:
 8016edc:	4770      	bx	lr

08016ede <__retarget_lock_acquire_recursive>:
 8016ede:	4770      	bx	lr

08016ee0 <__retarget_lock_release_recursive>:
 8016ee0:	4770      	bx	lr

08016ee2 <memcpy>:
 8016ee2:	440a      	add	r2, r1
 8016ee4:	4291      	cmp	r1, r2
 8016ee6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016eea:	d100      	bne.n	8016eee <memcpy+0xc>
 8016eec:	4770      	bx	lr
 8016eee:	b510      	push	{r4, lr}
 8016ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ef8:	4291      	cmp	r1, r2
 8016efa:	d1f9      	bne.n	8016ef0 <memcpy+0xe>
 8016efc:	bd10      	pop	{r4, pc}
	...

08016f00 <__assert_func>:
 8016f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f02:	4614      	mov	r4, r2
 8016f04:	461a      	mov	r2, r3
 8016f06:	4b09      	ldr	r3, [pc, #36]	@ (8016f2c <__assert_func+0x2c>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	4605      	mov	r5, r0
 8016f0c:	68d8      	ldr	r0, [r3, #12]
 8016f0e:	b14c      	cbz	r4, 8016f24 <__assert_func+0x24>
 8016f10:	4b07      	ldr	r3, [pc, #28]	@ (8016f30 <__assert_func+0x30>)
 8016f12:	9100      	str	r1, [sp, #0]
 8016f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f18:	4906      	ldr	r1, [pc, #24]	@ (8016f34 <__assert_func+0x34>)
 8016f1a:	462b      	mov	r3, r5
 8016f1c:	f000 fc88 	bl	8017830 <fiprintf>
 8016f20:	f000 fd60 	bl	80179e4 <abort>
 8016f24:	4b04      	ldr	r3, [pc, #16]	@ (8016f38 <__assert_func+0x38>)
 8016f26:	461c      	mov	r4, r3
 8016f28:	e7f3      	b.n	8016f12 <__assert_func+0x12>
 8016f2a:	bf00      	nop
 8016f2c:	2000007c 	.word	0x2000007c
 8016f30:	0801b271 	.word	0x0801b271
 8016f34:	0801b27e 	.word	0x0801b27e
 8016f38:	0801b2ac 	.word	0x0801b2ac

08016f3c <_free_r>:
 8016f3c:	b538      	push	{r3, r4, r5, lr}
 8016f3e:	4605      	mov	r5, r0
 8016f40:	2900      	cmp	r1, #0
 8016f42:	d041      	beq.n	8016fc8 <_free_r+0x8c>
 8016f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f48:	1f0c      	subs	r4, r1, #4
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	bfb8      	it	lt
 8016f4e:	18e4      	addlt	r4, r4, r3
 8016f50:	f000 f8e8 	bl	8017124 <__malloc_lock>
 8016f54:	4a1d      	ldr	r2, [pc, #116]	@ (8016fcc <_free_r+0x90>)
 8016f56:	6813      	ldr	r3, [r2, #0]
 8016f58:	b933      	cbnz	r3, 8016f68 <_free_r+0x2c>
 8016f5a:	6063      	str	r3, [r4, #4]
 8016f5c:	6014      	str	r4, [r2, #0]
 8016f5e:	4628      	mov	r0, r5
 8016f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f64:	f000 b8e4 	b.w	8017130 <__malloc_unlock>
 8016f68:	42a3      	cmp	r3, r4
 8016f6a:	d908      	bls.n	8016f7e <_free_r+0x42>
 8016f6c:	6820      	ldr	r0, [r4, #0]
 8016f6e:	1821      	adds	r1, r4, r0
 8016f70:	428b      	cmp	r3, r1
 8016f72:	bf01      	itttt	eq
 8016f74:	6819      	ldreq	r1, [r3, #0]
 8016f76:	685b      	ldreq	r3, [r3, #4]
 8016f78:	1809      	addeq	r1, r1, r0
 8016f7a:	6021      	streq	r1, [r4, #0]
 8016f7c:	e7ed      	b.n	8016f5a <_free_r+0x1e>
 8016f7e:	461a      	mov	r2, r3
 8016f80:	685b      	ldr	r3, [r3, #4]
 8016f82:	b10b      	cbz	r3, 8016f88 <_free_r+0x4c>
 8016f84:	42a3      	cmp	r3, r4
 8016f86:	d9fa      	bls.n	8016f7e <_free_r+0x42>
 8016f88:	6811      	ldr	r1, [r2, #0]
 8016f8a:	1850      	adds	r0, r2, r1
 8016f8c:	42a0      	cmp	r0, r4
 8016f8e:	d10b      	bne.n	8016fa8 <_free_r+0x6c>
 8016f90:	6820      	ldr	r0, [r4, #0]
 8016f92:	4401      	add	r1, r0
 8016f94:	1850      	adds	r0, r2, r1
 8016f96:	4283      	cmp	r3, r0
 8016f98:	6011      	str	r1, [r2, #0]
 8016f9a:	d1e0      	bne.n	8016f5e <_free_r+0x22>
 8016f9c:	6818      	ldr	r0, [r3, #0]
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	6053      	str	r3, [r2, #4]
 8016fa2:	4408      	add	r0, r1
 8016fa4:	6010      	str	r0, [r2, #0]
 8016fa6:	e7da      	b.n	8016f5e <_free_r+0x22>
 8016fa8:	d902      	bls.n	8016fb0 <_free_r+0x74>
 8016faa:	230c      	movs	r3, #12
 8016fac:	602b      	str	r3, [r5, #0]
 8016fae:	e7d6      	b.n	8016f5e <_free_r+0x22>
 8016fb0:	6820      	ldr	r0, [r4, #0]
 8016fb2:	1821      	adds	r1, r4, r0
 8016fb4:	428b      	cmp	r3, r1
 8016fb6:	bf04      	itt	eq
 8016fb8:	6819      	ldreq	r1, [r3, #0]
 8016fba:	685b      	ldreq	r3, [r3, #4]
 8016fbc:	6063      	str	r3, [r4, #4]
 8016fbe:	bf04      	itt	eq
 8016fc0:	1809      	addeq	r1, r1, r0
 8016fc2:	6021      	streq	r1, [r4, #0]
 8016fc4:	6054      	str	r4, [r2, #4]
 8016fc6:	e7ca      	b.n	8016f5e <_free_r+0x22>
 8016fc8:	bd38      	pop	{r3, r4, r5, pc}
 8016fca:	bf00      	nop
 8016fcc:	200089d4 	.word	0x200089d4

08016fd0 <malloc>:
 8016fd0:	4b02      	ldr	r3, [pc, #8]	@ (8016fdc <malloc+0xc>)
 8016fd2:	4601      	mov	r1, r0
 8016fd4:	6818      	ldr	r0, [r3, #0]
 8016fd6:	f000 b825 	b.w	8017024 <_malloc_r>
 8016fda:	bf00      	nop
 8016fdc:	2000007c 	.word	0x2000007c

08016fe0 <sbrk_aligned>:
 8016fe0:	b570      	push	{r4, r5, r6, lr}
 8016fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8017020 <sbrk_aligned+0x40>)
 8016fe4:	460c      	mov	r4, r1
 8016fe6:	6831      	ldr	r1, [r6, #0]
 8016fe8:	4605      	mov	r5, r0
 8016fea:	b911      	cbnz	r1, 8016ff2 <sbrk_aligned+0x12>
 8016fec:	f000 fcea 	bl	80179c4 <_sbrk_r>
 8016ff0:	6030      	str	r0, [r6, #0]
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f000 fce5 	bl	80179c4 <_sbrk_r>
 8016ffa:	1c43      	adds	r3, r0, #1
 8016ffc:	d103      	bne.n	8017006 <sbrk_aligned+0x26>
 8016ffe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017002:	4620      	mov	r0, r4
 8017004:	bd70      	pop	{r4, r5, r6, pc}
 8017006:	1cc4      	adds	r4, r0, #3
 8017008:	f024 0403 	bic.w	r4, r4, #3
 801700c:	42a0      	cmp	r0, r4
 801700e:	d0f8      	beq.n	8017002 <sbrk_aligned+0x22>
 8017010:	1a21      	subs	r1, r4, r0
 8017012:	4628      	mov	r0, r5
 8017014:	f000 fcd6 	bl	80179c4 <_sbrk_r>
 8017018:	3001      	adds	r0, #1
 801701a:	d1f2      	bne.n	8017002 <sbrk_aligned+0x22>
 801701c:	e7ef      	b.n	8016ffe <sbrk_aligned+0x1e>
 801701e:	bf00      	nop
 8017020:	200089d0 	.word	0x200089d0

08017024 <_malloc_r>:
 8017024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017028:	1ccd      	adds	r5, r1, #3
 801702a:	f025 0503 	bic.w	r5, r5, #3
 801702e:	3508      	adds	r5, #8
 8017030:	2d0c      	cmp	r5, #12
 8017032:	bf38      	it	cc
 8017034:	250c      	movcc	r5, #12
 8017036:	2d00      	cmp	r5, #0
 8017038:	4606      	mov	r6, r0
 801703a:	db01      	blt.n	8017040 <_malloc_r+0x1c>
 801703c:	42a9      	cmp	r1, r5
 801703e:	d904      	bls.n	801704a <_malloc_r+0x26>
 8017040:	230c      	movs	r3, #12
 8017042:	6033      	str	r3, [r6, #0]
 8017044:	2000      	movs	r0, #0
 8017046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801704a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017120 <_malloc_r+0xfc>
 801704e:	f000 f869 	bl	8017124 <__malloc_lock>
 8017052:	f8d8 3000 	ldr.w	r3, [r8]
 8017056:	461c      	mov	r4, r3
 8017058:	bb44      	cbnz	r4, 80170ac <_malloc_r+0x88>
 801705a:	4629      	mov	r1, r5
 801705c:	4630      	mov	r0, r6
 801705e:	f7ff ffbf 	bl	8016fe0 <sbrk_aligned>
 8017062:	1c43      	adds	r3, r0, #1
 8017064:	4604      	mov	r4, r0
 8017066:	d158      	bne.n	801711a <_malloc_r+0xf6>
 8017068:	f8d8 4000 	ldr.w	r4, [r8]
 801706c:	4627      	mov	r7, r4
 801706e:	2f00      	cmp	r7, #0
 8017070:	d143      	bne.n	80170fa <_malloc_r+0xd6>
 8017072:	2c00      	cmp	r4, #0
 8017074:	d04b      	beq.n	801710e <_malloc_r+0xea>
 8017076:	6823      	ldr	r3, [r4, #0]
 8017078:	4639      	mov	r1, r7
 801707a:	4630      	mov	r0, r6
 801707c:	eb04 0903 	add.w	r9, r4, r3
 8017080:	f000 fca0 	bl	80179c4 <_sbrk_r>
 8017084:	4581      	cmp	r9, r0
 8017086:	d142      	bne.n	801710e <_malloc_r+0xea>
 8017088:	6821      	ldr	r1, [r4, #0]
 801708a:	1a6d      	subs	r5, r5, r1
 801708c:	4629      	mov	r1, r5
 801708e:	4630      	mov	r0, r6
 8017090:	f7ff ffa6 	bl	8016fe0 <sbrk_aligned>
 8017094:	3001      	adds	r0, #1
 8017096:	d03a      	beq.n	801710e <_malloc_r+0xea>
 8017098:	6823      	ldr	r3, [r4, #0]
 801709a:	442b      	add	r3, r5
 801709c:	6023      	str	r3, [r4, #0]
 801709e:	f8d8 3000 	ldr.w	r3, [r8]
 80170a2:	685a      	ldr	r2, [r3, #4]
 80170a4:	bb62      	cbnz	r2, 8017100 <_malloc_r+0xdc>
 80170a6:	f8c8 7000 	str.w	r7, [r8]
 80170aa:	e00f      	b.n	80170cc <_malloc_r+0xa8>
 80170ac:	6822      	ldr	r2, [r4, #0]
 80170ae:	1b52      	subs	r2, r2, r5
 80170b0:	d420      	bmi.n	80170f4 <_malloc_r+0xd0>
 80170b2:	2a0b      	cmp	r2, #11
 80170b4:	d917      	bls.n	80170e6 <_malloc_r+0xc2>
 80170b6:	1961      	adds	r1, r4, r5
 80170b8:	42a3      	cmp	r3, r4
 80170ba:	6025      	str	r5, [r4, #0]
 80170bc:	bf18      	it	ne
 80170be:	6059      	strne	r1, [r3, #4]
 80170c0:	6863      	ldr	r3, [r4, #4]
 80170c2:	bf08      	it	eq
 80170c4:	f8c8 1000 	streq.w	r1, [r8]
 80170c8:	5162      	str	r2, [r4, r5]
 80170ca:	604b      	str	r3, [r1, #4]
 80170cc:	4630      	mov	r0, r6
 80170ce:	f000 f82f 	bl	8017130 <__malloc_unlock>
 80170d2:	f104 000b 	add.w	r0, r4, #11
 80170d6:	1d23      	adds	r3, r4, #4
 80170d8:	f020 0007 	bic.w	r0, r0, #7
 80170dc:	1ac2      	subs	r2, r0, r3
 80170de:	bf1c      	itt	ne
 80170e0:	1a1b      	subne	r3, r3, r0
 80170e2:	50a3      	strne	r3, [r4, r2]
 80170e4:	e7af      	b.n	8017046 <_malloc_r+0x22>
 80170e6:	6862      	ldr	r2, [r4, #4]
 80170e8:	42a3      	cmp	r3, r4
 80170ea:	bf0c      	ite	eq
 80170ec:	f8c8 2000 	streq.w	r2, [r8]
 80170f0:	605a      	strne	r2, [r3, #4]
 80170f2:	e7eb      	b.n	80170cc <_malloc_r+0xa8>
 80170f4:	4623      	mov	r3, r4
 80170f6:	6864      	ldr	r4, [r4, #4]
 80170f8:	e7ae      	b.n	8017058 <_malloc_r+0x34>
 80170fa:	463c      	mov	r4, r7
 80170fc:	687f      	ldr	r7, [r7, #4]
 80170fe:	e7b6      	b.n	801706e <_malloc_r+0x4a>
 8017100:	461a      	mov	r2, r3
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	42a3      	cmp	r3, r4
 8017106:	d1fb      	bne.n	8017100 <_malloc_r+0xdc>
 8017108:	2300      	movs	r3, #0
 801710a:	6053      	str	r3, [r2, #4]
 801710c:	e7de      	b.n	80170cc <_malloc_r+0xa8>
 801710e:	230c      	movs	r3, #12
 8017110:	6033      	str	r3, [r6, #0]
 8017112:	4630      	mov	r0, r6
 8017114:	f000 f80c 	bl	8017130 <__malloc_unlock>
 8017118:	e794      	b.n	8017044 <_malloc_r+0x20>
 801711a:	6005      	str	r5, [r0, #0]
 801711c:	e7d6      	b.n	80170cc <_malloc_r+0xa8>
 801711e:	bf00      	nop
 8017120:	200089d4 	.word	0x200089d4

08017124 <__malloc_lock>:
 8017124:	4801      	ldr	r0, [pc, #4]	@ (801712c <__malloc_lock+0x8>)
 8017126:	f7ff beda 	b.w	8016ede <__retarget_lock_acquire_recursive>
 801712a:	bf00      	nop
 801712c:	200089cc 	.word	0x200089cc

08017130 <__malloc_unlock>:
 8017130:	4801      	ldr	r0, [pc, #4]	@ (8017138 <__malloc_unlock+0x8>)
 8017132:	f7ff bed5 	b.w	8016ee0 <__retarget_lock_release_recursive>
 8017136:	bf00      	nop
 8017138:	200089cc 	.word	0x200089cc

0801713c <__sfputc_r>:
 801713c:	6893      	ldr	r3, [r2, #8]
 801713e:	3b01      	subs	r3, #1
 8017140:	2b00      	cmp	r3, #0
 8017142:	b410      	push	{r4}
 8017144:	6093      	str	r3, [r2, #8]
 8017146:	da08      	bge.n	801715a <__sfputc_r+0x1e>
 8017148:	6994      	ldr	r4, [r2, #24]
 801714a:	42a3      	cmp	r3, r4
 801714c:	db01      	blt.n	8017152 <__sfputc_r+0x16>
 801714e:	290a      	cmp	r1, #10
 8017150:	d103      	bne.n	801715a <__sfputc_r+0x1e>
 8017152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017156:	f7ff bdaa 	b.w	8016cae <__swbuf_r>
 801715a:	6813      	ldr	r3, [r2, #0]
 801715c:	1c58      	adds	r0, r3, #1
 801715e:	6010      	str	r0, [r2, #0]
 8017160:	7019      	strb	r1, [r3, #0]
 8017162:	4608      	mov	r0, r1
 8017164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017168:	4770      	bx	lr

0801716a <__sfputs_r>:
 801716a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801716c:	4606      	mov	r6, r0
 801716e:	460f      	mov	r7, r1
 8017170:	4614      	mov	r4, r2
 8017172:	18d5      	adds	r5, r2, r3
 8017174:	42ac      	cmp	r4, r5
 8017176:	d101      	bne.n	801717c <__sfputs_r+0x12>
 8017178:	2000      	movs	r0, #0
 801717a:	e007      	b.n	801718c <__sfputs_r+0x22>
 801717c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017180:	463a      	mov	r2, r7
 8017182:	4630      	mov	r0, r6
 8017184:	f7ff ffda 	bl	801713c <__sfputc_r>
 8017188:	1c43      	adds	r3, r0, #1
 801718a:	d1f3      	bne.n	8017174 <__sfputs_r+0xa>
 801718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017190 <_vfiprintf_r>:
 8017190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017194:	460d      	mov	r5, r1
 8017196:	b09d      	sub	sp, #116	@ 0x74
 8017198:	4614      	mov	r4, r2
 801719a:	4698      	mov	r8, r3
 801719c:	4606      	mov	r6, r0
 801719e:	b118      	cbz	r0, 80171a8 <_vfiprintf_r+0x18>
 80171a0:	6a03      	ldr	r3, [r0, #32]
 80171a2:	b90b      	cbnz	r3, 80171a8 <_vfiprintf_r+0x18>
 80171a4:	f7ff fc92 	bl	8016acc <__sinit>
 80171a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80171aa:	07d9      	lsls	r1, r3, #31
 80171ac:	d405      	bmi.n	80171ba <_vfiprintf_r+0x2a>
 80171ae:	89ab      	ldrh	r3, [r5, #12]
 80171b0:	059a      	lsls	r2, r3, #22
 80171b2:	d402      	bmi.n	80171ba <_vfiprintf_r+0x2a>
 80171b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171b6:	f7ff fe92 	bl	8016ede <__retarget_lock_acquire_recursive>
 80171ba:	89ab      	ldrh	r3, [r5, #12]
 80171bc:	071b      	lsls	r3, r3, #28
 80171be:	d501      	bpl.n	80171c4 <_vfiprintf_r+0x34>
 80171c0:	692b      	ldr	r3, [r5, #16]
 80171c2:	b99b      	cbnz	r3, 80171ec <_vfiprintf_r+0x5c>
 80171c4:	4629      	mov	r1, r5
 80171c6:	4630      	mov	r0, r6
 80171c8:	f7ff fdb0 	bl	8016d2c <__swsetup_r>
 80171cc:	b170      	cbz	r0, 80171ec <_vfiprintf_r+0x5c>
 80171ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80171d0:	07dc      	lsls	r4, r3, #31
 80171d2:	d504      	bpl.n	80171de <_vfiprintf_r+0x4e>
 80171d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80171d8:	b01d      	add	sp, #116	@ 0x74
 80171da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171de:	89ab      	ldrh	r3, [r5, #12]
 80171e0:	0598      	lsls	r0, r3, #22
 80171e2:	d4f7      	bmi.n	80171d4 <_vfiprintf_r+0x44>
 80171e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171e6:	f7ff fe7b 	bl	8016ee0 <__retarget_lock_release_recursive>
 80171ea:	e7f3      	b.n	80171d4 <_vfiprintf_r+0x44>
 80171ec:	2300      	movs	r3, #0
 80171ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80171f0:	2320      	movs	r3, #32
 80171f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80171f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80171fa:	2330      	movs	r3, #48	@ 0x30
 80171fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80173ac <_vfiprintf_r+0x21c>
 8017200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017204:	f04f 0901 	mov.w	r9, #1
 8017208:	4623      	mov	r3, r4
 801720a:	469a      	mov	sl, r3
 801720c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017210:	b10a      	cbz	r2, 8017216 <_vfiprintf_r+0x86>
 8017212:	2a25      	cmp	r2, #37	@ 0x25
 8017214:	d1f9      	bne.n	801720a <_vfiprintf_r+0x7a>
 8017216:	ebba 0b04 	subs.w	fp, sl, r4
 801721a:	d00b      	beq.n	8017234 <_vfiprintf_r+0xa4>
 801721c:	465b      	mov	r3, fp
 801721e:	4622      	mov	r2, r4
 8017220:	4629      	mov	r1, r5
 8017222:	4630      	mov	r0, r6
 8017224:	f7ff ffa1 	bl	801716a <__sfputs_r>
 8017228:	3001      	adds	r0, #1
 801722a:	f000 80a7 	beq.w	801737c <_vfiprintf_r+0x1ec>
 801722e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017230:	445a      	add	r2, fp
 8017232:	9209      	str	r2, [sp, #36]	@ 0x24
 8017234:	f89a 3000 	ldrb.w	r3, [sl]
 8017238:	2b00      	cmp	r3, #0
 801723a:	f000 809f 	beq.w	801737c <_vfiprintf_r+0x1ec>
 801723e:	2300      	movs	r3, #0
 8017240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017248:	f10a 0a01 	add.w	sl, sl, #1
 801724c:	9304      	str	r3, [sp, #16]
 801724e:	9307      	str	r3, [sp, #28]
 8017250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017254:	931a      	str	r3, [sp, #104]	@ 0x68
 8017256:	4654      	mov	r4, sl
 8017258:	2205      	movs	r2, #5
 801725a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801725e:	4853      	ldr	r0, [pc, #332]	@ (80173ac <_vfiprintf_r+0x21c>)
 8017260:	f7e8 ffd6 	bl	8000210 <memchr>
 8017264:	9a04      	ldr	r2, [sp, #16]
 8017266:	b9d8      	cbnz	r0, 80172a0 <_vfiprintf_r+0x110>
 8017268:	06d1      	lsls	r1, r2, #27
 801726a:	bf44      	itt	mi
 801726c:	2320      	movmi	r3, #32
 801726e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017272:	0713      	lsls	r3, r2, #28
 8017274:	bf44      	itt	mi
 8017276:	232b      	movmi	r3, #43	@ 0x2b
 8017278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801727c:	f89a 3000 	ldrb.w	r3, [sl]
 8017280:	2b2a      	cmp	r3, #42	@ 0x2a
 8017282:	d015      	beq.n	80172b0 <_vfiprintf_r+0x120>
 8017284:	9a07      	ldr	r2, [sp, #28]
 8017286:	4654      	mov	r4, sl
 8017288:	2000      	movs	r0, #0
 801728a:	f04f 0c0a 	mov.w	ip, #10
 801728e:	4621      	mov	r1, r4
 8017290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017294:	3b30      	subs	r3, #48	@ 0x30
 8017296:	2b09      	cmp	r3, #9
 8017298:	d94b      	bls.n	8017332 <_vfiprintf_r+0x1a2>
 801729a:	b1b0      	cbz	r0, 80172ca <_vfiprintf_r+0x13a>
 801729c:	9207      	str	r2, [sp, #28]
 801729e:	e014      	b.n	80172ca <_vfiprintf_r+0x13a>
 80172a0:	eba0 0308 	sub.w	r3, r0, r8
 80172a4:	fa09 f303 	lsl.w	r3, r9, r3
 80172a8:	4313      	orrs	r3, r2
 80172aa:	9304      	str	r3, [sp, #16]
 80172ac:	46a2      	mov	sl, r4
 80172ae:	e7d2      	b.n	8017256 <_vfiprintf_r+0xc6>
 80172b0:	9b03      	ldr	r3, [sp, #12]
 80172b2:	1d19      	adds	r1, r3, #4
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	9103      	str	r1, [sp, #12]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	bfbb      	ittet	lt
 80172bc:	425b      	neglt	r3, r3
 80172be:	f042 0202 	orrlt.w	r2, r2, #2
 80172c2:	9307      	strge	r3, [sp, #28]
 80172c4:	9307      	strlt	r3, [sp, #28]
 80172c6:	bfb8      	it	lt
 80172c8:	9204      	strlt	r2, [sp, #16]
 80172ca:	7823      	ldrb	r3, [r4, #0]
 80172cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80172ce:	d10a      	bne.n	80172e6 <_vfiprintf_r+0x156>
 80172d0:	7863      	ldrb	r3, [r4, #1]
 80172d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80172d4:	d132      	bne.n	801733c <_vfiprintf_r+0x1ac>
 80172d6:	9b03      	ldr	r3, [sp, #12]
 80172d8:	1d1a      	adds	r2, r3, #4
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	9203      	str	r2, [sp, #12]
 80172de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80172e2:	3402      	adds	r4, #2
 80172e4:	9305      	str	r3, [sp, #20]
 80172e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80173bc <_vfiprintf_r+0x22c>
 80172ea:	7821      	ldrb	r1, [r4, #0]
 80172ec:	2203      	movs	r2, #3
 80172ee:	4650      	mov	r0, sl
 80172f0:	f7e8 ff8e 	bl	8000210 <memchr>
 80172f4:	b138      	cbz	r0, 8017306 <_vfiprintf_r+0x176>
 80172f6:	9b04      	ldr	r3, [sp, #16]
 80172f8:	eba0 000a 	sub.w	r0, r0, sl
 80172fc:	2240      	movs	r2, #64	@ 0x40
 80172fe:	4082      	lsls	r2, r0
 8017300:	4313      	orrs	r3, r2
 8017302:	3401      	adds	r4, #1
 8017304:	9304      	str	r3, [sp, #16]
 8017306:	f814 1b01 	ldrb.w	r1, [r4], #1
 801730a:	4829      	ldr	r0, [pc, #164]	@ (80173b0 <_vfiprintf_r+0x220>)
 801730c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017310:	2206      	movs	r2, #6
 8017312:	f7e8 ff7d 	bl	8000210 <memchr>
 8017316:	2800      	cmp	r0, #0
 8017318:	d03f      	beq.n	801739a <_vfiprintf_r+0x20a>
 801731a:	4b26      	ldr	r3, [pc, #152]	@ (80173b4 <_vfiprintf_r+0x224>)
 801731c:	bb1b      	cbnz	r3, 8017366 <_vfiprintf_r+0x1d6>
 801731e:	9b03      	ldr	r3, [sp, #12]
 8017320:	3307      	adds	r3, #7
 8017322:	f023 0307 	bic.w	r3, r3, #7
 8017326:	3308      	adds	r3, #8
 8017328:	9303      	str	r3, [sp, #12]
 801732a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801732c:	443b      	add	r3, r7
 801732e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017330:	e76a      	b.n	8017208 <_vfiprintf_r+0x78>
 8017332:	fb0c 3202 	mla	r2, ip, r2, r3
 8017336:	460c      	mov	r4, r1
 8017338:	2001      	movs	r0, #1
 801733a:	e7a8      	b.n	801728e <_vfiprintf_r+0xfe>
 801733c:	2300      	movs	r3, #0
 801733e:	3401      	adds	r4, #1
 8017340:	9305      	str	r3, [sp, #20]
 8017342:	4619      	mov	r1, r3
 8017344:	f04f 0c0a 	mov.w	ip, #10
 8017348:	4620      	mov	r0, r4
 801734a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801734e:	3a30      	subs	r2, #48	@ 0x30
 8017350:	2a09      	cmp	r2, #9
 8017352:	d903      	bls.n	801735c <_vfiprintf_r+0x1cc>
 8017354:	2b00      	cmp	r3, #0
 8017356:	d0c6      	beq.n	80172e6 <_vfiprintf_r+0x156>
 8017358:	9105      	str	r1, [sp, #20]
 801735a:	e7c4      	b.n	80172e6 <_vfiprintf_r+0x156>
 801735c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017360:	4604      	mov	r4, r0
 8017362:	2301      	movs	r3, #1
 8017364:	e7f0      	b.n	8017348 <_vfiprintf_r+0x1b8>
 8017366:	ab03      	add	r3, sp, #12
 8017368:	9300      	str	r3, [sp, #0]
 801736a:	462a      	mov	r2, r5
 801736c:	4b12      	ldr	r3, [pc, #72]	@ (80173b8 <_vfiprintf_r+0x228>)
 801736e:	a904      	add	r1, sp, #16
 8017370:	4630      	mov	r0, r6
 8017372:	f3af 8000 	nop.w
 8017376:	4607      	mov	r7, r0
 8017378:	1c78      	adds	r0, r7, #1
 801737a:	d1d6      	bne.n	801732a <_vfiprintf_r+0x19a>
 801737c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801737e:	07d9      	lsls	r1, r3, #31
 8017380:	d405      	bmi.n	801738e <_vfiprintf_r+0x1fe>
 8017382:	89ab      	ldrh	r3, [r5, #12]
 8017384:	059a      	lsls	r2, r3, #22
 8017386:	d402      	bmi.n	801738e <_vfiprintf_r+0x1fe>
 8017388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801738a:	f7ff fda9 	bl	8016ee0 <__retarget_lock_release_recursive>
 801738e:	89ab      	ldrh	r3, [r5, #12]
 8017390:	065b      	lsls	r3, r3, #25
 8017392:	f53f af1f 	bmi.w	80171d4 <_vfiprintf_r+0x44>
 8017396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017398:	e71e      	b.n	80171d8 <_vfiprintf_r+0x48>
 801739a:	ab03      	add	r3, sp, #12
 801739c:	9300      	str	r3, [sp, #0]
 801739e:	462a      	mov	r2, r5
 80173a0:	4b05      	ldr	r3, [pc, #20]	@ (80173b8 <_vfiprintf_r+0x228>)
 80173a2:	a904      	add	r1, sp, #16
 80173a4:	4630      	mov	r0, r6
 80173a6:	f000 f879 	bl	801749c <_printf_i>
 80173aa:	e7e4      	b.n	8017376 <_vfiprintf_r+0x1e6>
 80173ac:	0801b2ad 	.word	0x0801b2ad
 80173b0:	0801b2b7 	.word	0x0801b2b7
 80173b4:	00000000 	.word	0x00000000
 80173b8:	0801716b 	.word	0x0801716b
 80173bc:	0801b2b3 	.word	0x0801b2b3

080173c0 <_printf_common>:
 80173c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173c4:	4616      	mov	r6, r2
 80173c6:	4698      	mov	r8, r3
 80173c8:	688a      	ldr	r2, [r1, #8]
 80173ca:	690b      	ldr	r3, [r1, #16]
 80173cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80173d0:	4293      	cmp	r3, r2
 80173d2:	bfb8      	it	lt
 80173d4:	4613      	movlt	r3, r2
 80173d6:	6033      	str	r3, [r6, #0]
 80173d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80173dc:	4607      	mov	r7, r0
 80173de:	460c      	mov	r4, r1
 80173e0:	b10a      	cbz	r2, 80173e6 <_printf_common+0x26>
 80173e2:	3301      	adds	r3, #1
 80173e4:	6033      	str	r3, [r6, #0]
 80173e6:	6823      	ldr	r3, [r4, #0]
 80173e8:	0699      	lsls	r1, r3, #26
 80173ea:	bf42      	ittt	mi
 80173ec:	6833      	ldrmi	r3, [r6, #0]
 80173ee:	3302      	addmi	r3, #2
 80173f0:	6033      	strmi	r3, [r6, #0]
 80173f2:	6825      	ldr	r5, [r4, #0]
 80173f4:	f015 0506 	ands.w	r5, r5, #6
 80173f8:	d106      	bne.n	8017408 <_printf_common+0x48>
 80173fa:	f104 0a19 	add.w	sl, r4, #25
 80173fe:	68e3      	ldr	r3, [r4, #12]
 8017400:	6832      	ldr	r2, [r6, #0]
 8017402:	1a9b      	subs	r3, r3, r2
 8017404:	42ab      	cmp	r3, r5
 8017406:	dc26      	bgt.n	8017456 <_printf_common+0x96>
 8017408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801740c:	6822      	ldr	r2, [r4, #0]
 801740e:	3b00      	subs	r3, #0
 8017410:	bf18      	it	ne
 8017412:	2301      	movne	r3, #1
 8017414:	0692      	lsls	r2, r2, #26
 8017416:	d42b      	bmi.n	8017470 <_printf_common+0xb0>
 8017418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801741c:	4641      	mov	r1, r8
 801741e:	4638      	mov	r0, r7
 8017420:	47c8      	blx	r9
 8017422:	3001      	adds	r0, #1
 8017424:	d01e      	beq.n	8017464 <_printf_common+0xa4>
 8017426:	6823      	ldr	r3, [r4, #0]
 8017428:	6922      	ldr	r2, [r4, #16]
 801742a:	f003 0306 	and.w	r3, r3, #6
 801742e:	2b04      	cmp	r3, #4
 8017430:	bf02      	ittt	eq
 8017432:	68e5      	ldreq	r5, [r4, #12]
 8017434:	6833      	ldreq	r3, [r6, #0]
 8017436:	1aed      	subeq	r5, r5, r3
 8017438:	68a3      	ldr	r3, [r4, #8]
 801743a:	bf0c      	ite	eq
 801743c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017440:	2500      	movne	r5, #0
 8017442:	4293      	cmp	r3, r2
 8017444:	bfc4      	itt	gt
 8017446:	1a9b      	subgt	r3, r3, r2
 8017448:	18ed      	addgt	r5, r5, r3
 801744a:	2600      	movs	r6, #0
 801744c:	341a      	adds	r4, #26
 801744e:	42b5      	cmp	r5, r6
 8017450:	d11a      	bne.n	8017488 <_printf_common+0xc8>
 8017452:	2000      	movs	r0, #0
 8017454:	e008      	b.n	8017468 <_printf_common+0xa8>
 8017456:	2301      	movs	r3, #1
 8017458:	4652      	mov	r2, sl
 801745a:	4641      	mov	r1, r8
 801745c:	4638      	mov	r0, r7
 801745e:	47c8      	blx	r9
 8017460:	3001      	adds	r0, #1
 8017462:	d103      	bne.n	801746c <_printf_common+0xac>
 8017464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801746c:	3501      	adds	r5, #1
 801746e:	e7c6      	b.n	80173fe <_printf_common+0x3e>
 8017470:	18e1      	adds	r1, r4, r3
 8017472:	1c5a      	adds	r2, r3, #1
 8017474:	2030      	movs	r0, #48	@ 0x30
 8017476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801747a:	4422      	add	r2, r4
 801747c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017484:	3302      	adds	r3, #2
 8017486:	e7c7      	b.n	8017418 <_printf_common+0x58>
 8017488:	2301      	movs	r3, #1
 801748a:	4622      	mov	r2, r4
 801748c:	4641      	mov	r1, r8
 801748e:	4638      	mov	r0, r7
 8017490:	47c8      	blx	r9
 8017492:	3001      	adds	r0, #1
 8017494:	d0e6      	beq.n	8017464 <_printf_common+0xa4>
 8017496:	3601      	adds	r6, #1
 8017498:	e7d9      	b.n	801744e <_printf_common+0x8e>
	...

0801749c <_printf_i>:
 801749c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80174a0:	7e0f      	ldrb	r7, [r1, #24]
 80174a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80174a4:	2f78      	cmp	r7, #120	@ 0x78
 80174a6:	4691      	mov	r9, r2
 80174a8:	4680      	mov	r8, r0
 80174aa:	460c      	mov	r4, r1
 80174ac:	469a      	mov	sl, r3
 80174ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80174b2:	d807      	bhi.n	80174c4 <_printf_i+0x28>
 80174b4:	2f62      	cmp	r7, #98	@ 0x62
 80174b6:	d80a      	bhi.n	80174ce <_printf_i+0x32>
 80174b8:	2f00      	cmp	r7, #0
 80174ba:	f000 80d1 	beq.w	8017660 <_printf_i+0x1c4>
 80174be:	2f58      	cmp	r7, #88	@ 0x58
 80174c0:	f000 80b8 	beq.w	8017634 <_printf_i+0x198>
 80174c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80174c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80174cc:	e03a      	b.n	8017544 <_printf_i+0xa8>
 80174ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80174d2:	2b15      	cmp	r3, #21
 80174d4:	d8f6      	bhi.n	80174c4 <_printf_i+0x28>
 80174d6:	a101      	add	r1, pc, #4	@ (adr r1, 80174dc <_printf_i+0x40>)
 80174d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80174dc:	08017535 	.word	0x08017535
 80174e0:	08017549 	.word	0x08017549
 80174e4:	080174c5 	.word	0x080174c5
 80174e8:	080174c5 	.word	0x080174c5
 80174ec:	080174c5 	.word	0x080174c5
 80174f0:	080174c5 	.word	0x080174c5
 80174f4:	08017549 	.word	0x08017549
 80174f8:	080174c5 	.word	0x080174c5
 80174fc:	080174c5 	.word	0x080174c5
 8017500:	080174c5 	.word	0x080174c5
 8017504:	080174c5 	.word	0x080174c5
 8017508:	08017647 	.word	0x08017647
 801750c:	08017573 	.word	0x08017573
 8017510:	08017601 	.word	0x08017601
 8017514:	080174c5 	.word	0x080174c5
 8017518:	080174c5 	.word	0x080174c5
 801751c:	08017669 	.word	0x08017669
 8017520:	080174c5 	.word	0x080174c5
 8017524:	08017573 	.word	0x08017573
 8017528:	080174c5 	.word	0x080174c5
 801752c:	080174c5 	.word	0x080174c5
 8017530:	08017609 	.word	0x08017609
 8017534:	6833      	ldr	r3, [r6, #0]
 8017536:	1d1a      	adds	r2, r3, #4
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	6032      	str	r2, [r6, #0]
 801753c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017544:	2301      	movs	r3, #1
 8017546:	e09c      	b.n	8017682 <_printf_i+0x1e6>
 8017548:	6833      	ldr	r3, [r6, #0]
 801754a:	6820      	ldr	r0, [r4, #0]
 801754c:	1d19      	adds	r1, r3, #4
 801754e:	6031      	str	r1, [r6, #0]
 8017550:	0606      	lsls	r6, r0, #24
 8017552:	d501      	bpl.n	8017558 <_printf_i+0xbc>
 8017554:	681d      	ldr	r5, [r3, #0]
 8017556:	e003      	b.n	8017560 <_printf_i+0xc4>
 8017558:	0645      	lsls	r5, r0, #25
 801755a:	d5fb      	bpl.n	8017554 <_printf_i+0xb8>
 801755c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017560:	2d00      	cmp	r5, #0
 8017562:	da03      	bge.n	801756c <_printf_i+0xd0>
 8017564:	232d      	movs	r3, #45	@ 0x2d
 8017566:	426d      	negs	r5, r5
 8017568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801756c:	4858      	ldr	r0, [pc, #352]	@ (80176d0 <_printf_i+0x234>)
 801756e:	230a      	movs	r3, #10
 8017570:	e011      	b.n	8017596 <_printf_i+0xfa>
 8017572:	6821      	ldr	r1, [r4, #0]
 8017574:	6833      	ldr	r3, [r6, #0]
 8017576:	0608      	lsls	r0, r1, #24
 8017578:	f853 5b04 	ldr.w	r5, [r3], #4
 801757c:	d402      	bmi.n	8017584 <_printf_i+0xe8>
 801757e:	0649      	lsls	r1, r1, #25
 8017580:	bf48      	it	mi
 8017582:	b2ad      	uxthmi	r5, r5
 8017584:	2f6f      	cmp	r7, #111	@ 0x6f
 8017586:	4852      	ldr	r0, [pc, #328]	@ (80176d0 <_printf_i+0x234>)
 8017588:	6033      	str	r3, [r6, #0]
 801758a:	bf14      	ite	ne
 801758c:	230a      	movne	r3, #10
 801758e:	2308      	moveq	r3, #8
 8017590:	2100      	movs	r1, #0
 8017592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017596:	6866      	ldr	r6, [r4, #4]
 8017598:	60a6      	str	r6, [r4, #8]
 801759a:	2e00      	cmp	r6, #0
 801759c:	db05      	blt.n	80175aa <_printf_i+0x10e>
 801759e:	6821      	ldr	r1, [r4, #0]
 80175a0:	432e      	orrs	r6, r5
 80175a2:	f021 0104 	bic.w	r1, r1, #4
 80175a6:	6021      	str	r1, [r4, #0]
 80175a8:	d04b      	beq.n	8017642 <_printf_i+0x1a6>
 80175aa:	4616      	mov	r6, r2
 80175ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80175b0:	fb03 5711 	mls	r7, r3, r1, r5
 80175b4:	5dc7      	ldrb	r7, [r0, r7]
 80175b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80175ba:	462f      	mov	r7, r5
 80175bc:	42bb      	cmp	r3, r7
 80175be:	460d      	mov	r5, r1
 80175c0:	d9f4      	bls.n	80175ac <_printf_i+0x110>
 80175c2:	2b08      	cmp	r3, #8
 80175c4:	d10b      	bne.n	80175de <_printf_i+0x142>
 80175c6:	6823      	ldr	r3, [r4, #0]
 80175c8:	07df      	lsls	r7, r3, #31
 80175ca:	d508      	bpl.n	80175de <_printf_i+0x142>
 80175cc:	6923      	ldr	r3, [r4, #16]
 80175ce:	6861      	ldr	r1, [r4, #4]
 80175d0:	4299      	cmp	r1, r3
 80175d2:	bfde      	ittt	le
 80175d4:	2330      	movle	r3, #48	@ 0x30
 80175d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80175da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80175de:	1b92      	subs	r2, r2, r6
 80175e0:	6122      	str	r2, [r4, #16]
 80175e2:	f8cd a000 	str.w	sl, [sp]
 80175e6:	464b      	mov	r3, r9
 80175e8:	aa03      	add	r2, sp, #12
 80175ea:	4621      	mov	r1, r4
 80175ec:	4640      	mov	r0, r8
 80175ee:	f7ff fee7 	bl	80173c0 <_printf_common>
 80175f2:	3001      	adds	r0, #1
 80175f4:	d14a      	bne.n	801768c <_printf_i+0x1f0>
 80175f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175fa:	b004      	add	sp, #16
 80175fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017600:	6823      	ldr	r3, [r4, #0]
 8017602:	f043 0320 	orr.w	r3, r3, #32
 8017606:	6023      	str	r3, [r4, #0]
 8017608:	4832      	ldr	r0, [pc, #200]	@ (80176d4 <_printf_i+0x238>)
 801760a:	2778      	movs	r7, #120	@ 0x78
 801760c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017610:	6823      	ldr	r3, [r4, #0]
 8017612:	6831      	ldr	r1, [r6, #0]
 8017614:	061f      	lsls	r7, r3, #24
 8017616:	f851 5b04 	ldr.w	r5, [r1], #4
 801761a:	d402      	bmi.n	8017622 <_printf_i+0x186>
 801761c:	065f      	lsls	r7, r3, #25
 801761e:	bf48      	it	mi
 8017620:	b2ad      	uxthmi	r5, r5
 8017622:	6031      	str	r1, [r6, #0]
 8017624:	07d9      	lsls	r1, r3, #31
 8017626:	bf44      	itt	mi
 8017628:	f043 0320 	orrmi.w	r3, r3, #32
 801762c:	6023      	strmi	r3, [r4, #0]
 801762e:	b11d      	cbz	r5, 8017638 <_printf_i+0x19c>
 8017630:	2310      	movs	r3, #16
 8017632:	e7ad      	b.n	8017590 <_printf_i+0xf4>
 8017634:	4826      	ldr	r0, [pc, #152]	@ (80176d0 <_printf_i+0x234>)
 8017636:	e7e9      	b.n	801760c <_printf_i+0x170>
 8017638:	6823      	ldr	r3, [r4, #0]
 801763a:	f023 0320 	bic.w	r3, r3, #32
 801763e:	6023      	str	r3, [r4, #0]
 8017640:	e7f6      	b.n	8017630 <_printf_i+0x194>
 8017642:	4616      	mov	r6, r2
 8017644:	e7bd      	b.n	80175c2 <_printf_i+0x126>
 8017646:	6833      	ldr	r3, [r6, #0]
 8017648:	6825      	ldr	r5, [r4, #0]
 801764a:	6961      	ldr	r1, [r4, #20]
 801764c:	1d18      	adds	r0, r3, #4
 801764e:	6030      	str	r0, [r6, #0]
 8017650:	062e      	lsls	r6, r5, #24
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	d501      	bpl.n	801765a <_printf_i+0x1be>
 8017656:	6019      	str	r1, [r3, #0]
 8017658:	e002      	b.n	8017660 <_printf_i+0x1c4>
 801765a:	0668      	lsls	r0, r5, #25
 801765c:	d5fb      	bpl.n	8017656 <_printf_i+0x1ba>
 801765e:	8019      	strh	r1, [r3, #0]
 8017660:	2300      	movs	r3, #0
 8017662:	6123      	str	r3, [r4, #16]
 8017664:	4616      	mov	r6, r2
 8017666:	e7bc      	b.n	80175e2 <_printf_i+0x146>
 8017668:	6833      	ldr	r3, [r6, #0]
 801766a:	1d1a      	adds	r2, r3, #4
 801766c:	6032      	str	r2, [r6, #0]
 801766e:	681e      	ldr	r6, [r3, #0]
 8017670:	6862      	ldr	r2, [r4, #4]
 8017672:	2100      	movs	r1, #0
 8017674:	4630      	mov	r0, r6
 8017676:	f7e8 fdcb 	bl	8000210 <memchr>
 801767a:	b108      	cbz	r0, 8017680 <_printf_i+0x1e4>
 801767c:	1b80      	subs	r0, r0, r6
 801767e:	6060      	str	r0, [r4, #4]
 8017680:	6863      	ldr	r3, [r4, #4]
 8017682:	6123      	str	r3, [r4, #16]
 8017684:	2300      	movs	r3, #0
 8017686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801768a:	e7aa      	b.n	80175e2 <_printf_i+0x146>
 801768c:	6923      	ldr	r3, [r4, #16]
 801768e:	4632      	mov	r2, r6
 8017690:	4649      	mov	r1, r9
 8017692:	4640      	mov	r0, r8
 8017694:	47d0      	blx	sl
 8017696:	3001      	adds	r0, #1
 8017698:	d0ad      	beq.n	80175f6 <_printf_i+0x15a>
 801769a:	6823      	ldr	r3, [r4, #0]
 801769c:	079b      	lsls	r3, r3, #30
 801769e:	d413      	bmi.n	80176c8 <_printf_i+0x22c>
 80176a0:	68e0      	ldr	r0, [r4, #12]
 80176a2:	9b03      	ldr	r3, [sp, #12]
 80176a4:	4298      	cmp	r0, r3
 80176a6:	bfb8      	it	lt
 80176a8:	4618      	movlt	r0, r3
 80176aa:	e7a6      	b.n	80175fa <_printf_i+0x15e>
 80176ac:	2301      	movs	r3, #1
 80176ae:	4632      	mov	r2, r6
 80176b0:	4649      	mov	r1, r9
 80176b2:	4640      	mov	r0, r8
 80176b4:	47d0      	blx	sl
 80176b6:	3001      	adds	r0, #1
 80176b8:	d09d      	beq.n	80175f6 <_printf_i+0x15a>
 80176ba:	3501      	adds	r5, #1
 80176bc:	68e3      	ldr	r3, [r4, #12]
 80176be:	9903      	ldr	r1, [sp, #12]
 80176c0:	1a5b      	subs	r3, r3, r1
 80176c2:	42ab      	cmp	r3, r5
 80176c4:	dcf2      	bgt.n	80176ac <_printf_i+0x210>
 80176c6:	e7eb      	b.n	80176a0 <_printf_i+0x204>
 80176c8:	2500      	movs	r5, #0
 80176ca:	f104 0619 	add.w	r6, r4, #25
 80176ce:	e7f5      	b.n	80176bc <_printf_i+0x220>
 80176d0:	0801b2be 	.word	0x0801b2be
 80176d4:	0801b2cf 	.word	0x0801b2cf

080176d8 <__sflush_r>:
 80176d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80176dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176e0:	0716      	lsls	r6, r2, #28
 80176e2:	4605      	mov	r5, r0
 80176e4:	460c      	mov	r4, r1
 80176e6:	d454      	bmi.n	8017792 <__sflush_r+0xba>
 80176e8:	684b      	ldr	r3, [r1, #4]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	dc02      	bgt.n	80176f4 <__sflush_r+0x1c>
 80176ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	dd48      	ble.n	8017786 <__sflush_r+0xae>
 80176f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176f6:	2e00      	cmp	r6, #0
 80176f8:	d045      	beq.n	8017786 <__sflush_r+0xae>
 80176fa:	2300      	movs	r3, #0
 80176fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017700:	682f      	ldr	r7, [r5, #0]
 8017702:	6a21      	ldr	r1, [r4, #32]
 8017704:	602b      	str	r3, [r5, #0]
 8017706:	d030      	beq.n	801776a <__sflush_r+0x92>
 8017708:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801770a:	89a3      	ldrh	r3, [r4, #12]
 801770c:	0759      	lsls	r1, r3, #29
 801770e:	d505      	bpl.n	801771c <__sflush_r+0x44>
 8017710:	6863      	ldr	r3, [r4, #4]
 8017712:	1ad2      	subs	r2, r2, r3
 8017714:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017716:	b10b      	cbz	r3, 801771c <__sflush_r+0x44>
 8017718:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801771a:	1ad2      	subs	r2, r2, r3
 801771c:	2300      	movs	r3, #0
 801771e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017720:	6a21      	ldr	r1, [r4, #32]
 8017722:	4628      	mov	r0, r5
 8017724:	47b0      	blx	r6
 8017726:	1c43      	adds	r3, r0, #1
 8017728:	89a3      	ldrh	r3, [r4, #12]
 801772a:	d106      	bne.n	801773a <__sflush_r+0x62>
 801772c:	6829      	ldr	r1, [r5, #0]
 801772e:	291d      	cmp	r1, #29
 8017730:	d82b      	bhi.n	801778a <__sflush_r+0xb2>
 8017732:	4a2a      	ldr	r2, [pc, #168]	@ (80177dc <__sflush_r+0x104>)
 8017734:	40ca      	lsrs	r2, r1
 8017736:	07d6      	lsls	r6, r2, #31
 8017738:	d527      	bpl.n	801778a <__sflush_r+0xb2>
 801773a:	2200      	movs	r2, #0
 801773c:	6062      	str	r2, [r4, #4]
 801773e:	04d9      	lsls	r1, r3, #19
 8017740:	6922      	ldr	r2, [r4, #16]
 8017742:	6022      	str	r2, [r4, #0]
 8017744:	d504      	bpl.n	8017750 <__sflush_r+0x78>
 8017746:	1c42      	adds	r2, r0, #1
 8017748:	d101      	bne.n	801774e <__sflush_r+0x76>
 801774a:	682b      	ldr	r3, [r5, #0]
 801774c:	b903      	cbnz	r3, 8017750 <__sflush_r+0x78>
 801774e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017750:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017752:	602f      	str	r7, [r5, #0]
 8017754:	b1b9      	cbz	r1, 8017786 <__sflush_r+0xae>
 8017756:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801775a:	4299      	cmp	r1, r3
 801775c:	d002      	beq.n	8017764 <__sflush_r+0x8c>
 801775e:	4628      	mov	r0, r5
 8017760:	f7ff fbec 	bl	8016f3c <_free_r>
 8017764:	2300      	movs	r3, #0
 8017766:	6363      	str	r3, [r4, #52]	@ 0x34
 8017768:	e00d      	b.n	8017786 <__sflush_r+0xae>
 801776a:	2301      	movs	r3, #1
 801776c:	4628      	mov	r0, r5
 801776e:	47b0      	blx	r6
 8017770:	4602      	mov	r2, r0
 8017772:	1c50      	adds	r0, r2, #1
 8017774:	d1c9      	bne.n	801770a <__sflush_r+0x32>
 8017776:	682b      	ldr	r3, [r5, #0]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d0c6      	beq.n	801770a <__sflush_r+0x32>
 801777c:	2b1d      	cmp	r3, #29
 801777e:	d001      	beq.n	8017784 <__sflush_r+0xac>
 8017780:	2b16      	cmp	r3, #22
 8017782:	d11e      	bne.n	80177c2 <__sflush_r+0xea>
 8017784:	602f      	str	r7, [r5, #0]
 8017786:	2000      	movs	r0, #0
 8017788:	e022      	b.n	80177d0 <__sflush_r+0xf8>
 801778a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801778e:	b21b      	sxth	r3, r3
 8017790:	e01b      	b.n	80177ca <__sflush_r+0xf2>
 8017792:	690f      	ldr	r7, [r1, #16]
 8017794:	2f00      	cmp	r7, #0
 8017796:	d0f6      	beq.n	8017786 <__sflush_r+0xae>
 8017798:	0793      	lsls	r3, r2, #30
 801779a:	680e      	ldr	r6, [r1, #0]
 801779c:	bf08      	it	eq
 801779e:	694b      	ldreq	r3, [r1, #20]
 80177a0:	600f      	str	r7, [r1, #0]
 80177a2:	bf18      	it	ne
 80177a4:	2300      	movne	r3, #0
 80177a6:	eba6 0807 	sub.w	r8, r6, r7
 80177aa:	608b      	str	r3, [r1, #8]
 80177ac:	f1b8 0f00 	cmp.w	r8, #0
 80177b0:	dde9      	ble.n	8017786 <__sflush_r+0xae>
 80177b2:	6a21      	ldr	r1, [r4, #32]
 80177b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80177b6:	4643      	mov	r3, r8
 80177b8:	463a      	mov	r2, r7
 80177ba:	4628      	mov	r0, r5
 80177bc:	47b0      	blx	r6
 80177be:	2800      	cmp	r0, #0
 80177c0:	dc08      	bgt.n	80177d4 <__sflush_r+0xfc>
 80177c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80177ca:	81a3      	strh	r3, [r4, #12]
 80177cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80177d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177d4:	4407      	add	r7, r0
 80177d6:	eba8 0800 	sub.w	r8, r8, r0
 80177da:	e7e7      	b.n	80177ac <__sflush_r+0xd4>
 80177dc:	20400001 	.word	0x20400001

080177e0 <_fflush_r>:
 80177e0:	b538      	push	{r3, r4, r5, lr}
 80177e2:	690b      	ldr	r3, [r1, #16]
 80177e4:	4605      	mov	r5, r0
 80177e6:	460c      	mov	r4, r1
 80177e8:	b913      	cbnz	r3, 80177f0 <_fflush_r+0x10>
 80177ea:	2500      	movs	r5, #0
 80177ec:	4628      	mov	r0, r5
 80177ee:	bd38      	pop	{r3, r4, r5, pc}
 80177f0:	b118      	cbz	r0, 80177fa <_fflush_r+0x1a>
 80177f2:	6a03      	ldr	r3, [r0, #32]
 80177f4:	b90b      	cbnz	r3, 80177fa <_fflush_r+0x1a>
 80177f6:	f7ff f969 	bl	8016acc <__sinit>
 80177fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d0f3      	beq.n	80177ea <_fflush_r+0xa>
 8017802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017804:	07d0      	lsls	r0, r2, #31
 8017806:	d404      	bmi.n	8017812 <_fflush_r+0x32>
 8017808:	0599      	lsls	r1, r3, #22
 801780a:	d402      	bmi.n	8017812 <_fflush_r+0x32>
 801780c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801780e:	f7ff fb66 	bl	8016ede <__retarget_lock_acquire_recursive>
 8017812:	4628      	mov	r0, r5
 8017814:	4621      	mov	r1, r4
 8017816:	f7ff ff5f 	bl	80176d8 <__sflush_r>
 801781a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801781c:	07da      	lsls	r2, r3, #31
 801781e:	4605      	mov	r5, r0
 8017820:	d4e4      	bmi.n	80177ec <_fflush_r+0xc>
 8017822:	89a3      	ldrh	r3, [r4, #12]
 8017824:	059b      	lsls	r3, r3, #22
 8017826:	d4e1      	bmi.n	80177ec <_fflush_r+0xc>
 8017828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801782a:	f7ff fb59 	bl	8016ee0 <__retarget_lock_release_recursive>
 801782e:	e7dd      	b.n	80177ec <_fflush_r+0xc>

08017830 <fiprintf>:
 8017830:	b40e      	push	{r1, r2, r3}
 8017832:	b503      	push	{r0, r1, lr}
 8017834:	4601      	mov	r1, r0
 8017836:	ab03      	add	r3, sp, #12
 8017838:	4805      	ldr	r0, [pc, #20]	@ (8017850 <fiprintf+0x20>)
 801783a:	f853 2b04 	ldr.w	r2, [r3], #4
 801783e:	6800      	ldr	r0, [r0, #0]
 8017840:	9301      	str	r3, [sp, #4]
 8017842:	f7ff fca5 	bl	8017190 <_vfiprintf_r>
 8017846:	b002      	add	sp, #8
 8017848:	f85d eb04 	ldr.w	lr, [sp], #4
 801784c:	b003      	add	sp, #12
 801784e:	4770      	bx	lr
 8017850:	2000007c 	.word	0x2000007c

08017854 <__swhatbuf_r>:
 8017854:	b570      	push	{r4, r5, r6, lr}
 8017856:	460c      	mov	r4, r1
 8017858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801785c:	2900      	cmp	r1, #0
 801785e:	b096      	sub	sp, #88	@ 0x58
 8017860:	4615      	mov	r5, r2
 8017862:	461e      	mov	r6, r3
 8017864:	da0d      	bge.n	8017882 <__swhatbuf_r+0x2e>
 8017866:	89a3      	ldrh	r3, [r4, #12]
 8017868:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801786c:	f04f 0100 	mov.w	r1, #0
 8017870:	bf14      	ite	ne
 8017872:	2340      	movne	r3, #64	@ 0x40
 8017874:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017878:	2000      	movs	r0, #0
 801787a:	6031      	str	r1, [r6, #0]
 801787c:	602b      	str	r3, [r5, #0]
 801787e:	b016      	add	sp, #88	@ 0x58
 8017880:	bd70      	pop	{r4, r5, r6, pc}
 8017882:	466a      	mov	r2, sp
 8017884:	f000 f87c 	bl	8017980 <_fstat_r>
 8017888:	2800      	cmp	r0, #0
 801788a:	dbec      	blt.n	8017866 <__swhatbuf_r+0x12>
 801788c:	9901      	ldr	r1, [sp, #4]
 801788e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017892:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017896:	4259      	negs	r1, r3
 8017898:	4159      	adcs	r1, r3
 801789a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801789e:	e7eb      	b.n	8017878 <__swhatbuf_r+0x24>

080178a0 <__smakebuf_r>:
 80178a0:	898b      	ldrh	r3, [r1, #12]
 80178a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178a4:	079d      	lsls	r5, r3, #30
 80178a6:	4606      	mov	r6, r0
 80178a8:	460c      	mov	r4, r1
 80178aa:	d507      	bpl.n	80178bc <__smakebuf_r+0x1c>
 80178ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80178b0:	6023      	str	r3, [r4, #0]
 80178b2:	6123      	str	r3, [r4, #16]
 80178b4:	2301      	movs	r3, #1
 80178b6:	6163      	str	r3, [r4, #20]
 80178b8:	b003      	add	sp, #12
 80178ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178bc:	ab01      	add	r3, sp, #4
 80178be:	466a      	mov	r2, sp
 80178c0:	f7ff ffc8 	bl	8017854 <__swhatbuf_r>
 80178c4:	9f00      	ldr	r7, [sp, #0]
 80178c6:	4605      	mov	r5, r0
 80178c8:	4639      	mov	r1, r7
 80178ca:	4630      	mov	r0, r6
 80178cc:	f7ff fbaa 	bl	8017024 <_malloc_r>
 80178d0:	b948      	cbnz	r0, 80178e6 <__smakebuf_r+0x46>
 80178d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178d6:	059a      	lsls	r2, r3, #22
 80178d8:	d4ee      	bmi.n	80178b8 <__smakebuf_r+0x18>
 80178da:	f023 0303 	bic.w	r3, r3, #3
 80178de:	f043 0302 	orr.w	r3, r3, #2
 80178e2:	81a3      	strh	r3, [r4, #12]
 80178e4:	e7e2      	b.n	80178ac <__smakebuf_r+0xc>
 80178e6:	89a3      	ldrh	r3, [r4, #12]
 80178e8:	6020      	str	r0, [r4, #0]
 80178ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80178ee:	81a3      	strh	r3, [r4, #12]
 80178f0:	9b01      	ldr	r3, [sp, #4]
 80178f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80178f6:	b15b      	cbz	r3, 8017910 <__smakebuf_r+0x70>
 80178f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178fc:	4630      	mov	r0, r6
 80178fe:	f000 f851 	bl	80179a4 <_isatty_r>
 8017902:	b128      	cbz	r0, 8017910 <__smakebuf_r+0x70>
 8017904:	89a3      	ldrh	r3, [r4, #12]
 8017906:	f023 0303 	bic.w	r3, r3, #3
 801790a:	f043 0301 	orr.w	r3, r3, #1
 801790e:	81a3      	strh	r3, [r4, #12]
 8017910:	89a3      	ldrh	r3, [r4, #12]
 8017912:	431d      	orrs	r5, r3
 8017914:	81a5      	strh	r5, [r4, #12]
 8017916:	e7cf      	b.n	80178b8 <__smakebuf_r+0x18>

08017918 <_putc_r>:
 8017918:	b570      	push	{r4, r5, r6, lr}
 801791a:	460d      	mov	r5, r1
 801791c:	4614      	mov	r4, r2
 801791e:	4606      	mov	r6, r0
 8017920:	b118      	cbz	r0, 801792a <_putc_r+0x12>
 8017922:	6a03      	ldr	r3, [r0, #32]
 8017924:	b90b      	cbnz	r3, 801792a <_putc_r+0x12>
 8017926:	f7ff f8d1 	bl	8016acc <__sinit>
 801792a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801792c:	07d8      	lsls	r0, r3, #31
 801792e:	d405      	bmi.n	801793c <_putc_r+0x24>
 8017930:	89a3      	ldrh	r3, [r4, #12]
 8017932:	0599      	lsls	r1, r3, #22
 8017934:	d402      	bmi.n	801793c <_putc_r+0x24>
 8017936:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017938:	f7ff fad1 	bl	8016ede <__retarget_lock_acquire_recursive>
 801793c:	68a3      	ldr	r3, [r4, #8]
 801793e:	3b01      	subs	r3, #1
 8017940:	2b00      	cmp	r3, #0
 8017942:	60a3      	str	r3, [r4, #8]
 8017944:	da05      	bge.n	8017952 <_putc_r+0x3a>
 8017946:	69a2      	ldr	r2, [r4, #24]
 8017948:	4293      	cmp	r3, r2
 801794a:	db12      	blt.n	8017972 <_putc_r+0x5a>
 801794c:	b2eb      	uxtb	r3, r5
 801794e:	2b0a      	cmp	r3, #10
 8017950:	d00f      	beq.n	8017972 <_putc_r+0x5a>
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	1c5a      	adds	r2, r3, #1
 8017956:	6022      	str	r2, [r4, #0]
 8017958:	701d      	strb	r5, [r3, #0]
 801795a:	b2ed      	uxtb	r5, r5
 801795c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801795e:	07da      	lsls	r2, r3, #31
 8017960:	d405      	bmi.n	801796e <_putc_r+0x56>
 8017962:	89a3      	ldrh	r3, [r4, #12]
 8017964:	059b      	lsls	r3, r3, #22
 8017966:	d402      	bmi.n	801796e <_putc_r+0x56>
 8017968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801796a:	f7ff fab9 	bl	8016ee0 <__retarget_lock_release_recursive>
 801796e:	4628      	mov	r0, r5
 8017970:	bd70      	pop	{r4, r5, r6, pc}
 8017972:	4629      	mov	r1, r5
 8017974:	4622      	mov	r2, r4
 8017976:	4630      	mov	r0, r6
 8017978:	f7ff f999 	bl	8016cae <__swbuf_r>
 801797c:	4605      	mov	r5, r0
 801797e:	e7ed      	b.n	801795c <_putc_r+0x44>

08017980 <_fstat_r>:
 8017980:	b538      	push	{r3, r4, r5, lr}
 8017982:	4d07      	ldr	r5, [pc, #28]	@ (80179a0 <_fstat_r+0x20>)
 8017984:	2300      	movs	r3, #0
 8017986:	4604      	mov	r4, r0
 8017988:	4608      	mov	r0, r1
 801798a:	4611      	mov	r1, r2
 801798c:	602b      	str	r3, [r5, #0]
 801798e:	f7e9 fe25 	bl	80015dc <_fstat>
 8017992:	1c43      	adds	r3, r0, #1
 8017994:	d102      	bne.n	801799c <_fstat_r+0x1c>
 8017996:	682b      	ldr	r3, [r5, #0]
 8017998:	b103      	cbz	r3, 801799c <_fstat_r+0x1c>
 801799a:	6023      	str	r3, [r4, #0]
 801799c:	bd38      	pop	{r3, r4, r5, pc}
 801799e:	bf00      	nop
 80179a0:	200089c8 	.word	0x200089c8

080179a4 <_isatty_r>:
 80179a4:	b538      	push	{r3, r4, r5, lr}
 80179a6:	4d06      	ldr	r5, [pc, #24]	@ (80179c0 <_isatty_r+0x1c>)
 80179a8:	2300      	movs	r3, #0
 80179aa:	4604      	mov	r4, r0
 80179ac:	4608      	mov	r0, r1
 80179ae:	602b      	str	r3, [r5, #0]
 80179b0:	f7e9 fe24 	bl	80015fc <_isatty>
 80179b4:	1c43      	adds	r3, r0, #1
 80179b6:	d102      	bne.n	80179be <_isatty_r+0x1a>
 80179b8:	682b      	ldr	r3, [r5, #0]
 80179ba:	b103      	cbz	r3, 80179be <_isatty_r+0x1a>
 80179bc:	6023      	str	r3, [r4, #0]
 80179be:	bd38      	pop	{r3, r4, r5, pc}
 80179c0:	200089c8 	.word	0x200089c8

080179c4 <_sbrk_r>:
 80179c4:	b538      	push	{r3, r4, r5, lr}
 80179c6:	4d06      	ldr	r5, [pc, #24]	@ (80179e0 <_sbrk_r+0x1c>)
 80179c8:	2300      	movs	r3, #0
 80179ca:	4604      	mov	r4, r0
 80179cc:	4608      	mov	r0, r1
 80179ce:	602b      	str	r3, [r5, #0]
 80179d0:	f7e9 fe2c 	bl	800162c <_sbrk>
 80179d4:	1c43      	adds	r3, r0, #1
 80179d6:	d102      	bne.n	80179de <_sbrk_r+0x1a>
 80179d8:	682b      	ldr	r3, [r5, #0]
 80179da:	b103      	cbz	r3, 80179de <_sbrk_r+0x1a>
 80179dc:	6023      	str	r3, [r4, #0]
 80179de:	bd38      	pop	{r3, r4, r5, pc}
 80179e0:	200089c8 	.word	0x200089c8

080179e4 <abort>:
 80179e4:	b508      	push	{r3, lr}
 80179e6:	2006      	movs	r0, #6
 80179e8:	f000 f82c 	bl	8017a44 <raise>
 80179ec:	2001      	movs	r0, #1
 80179ee:	f7e9 fdc1 	bl	8001574 <_exit>

080179f2 <_raise_r>:
 80179f2:	291f      	cmp	r1, #31
 80179f4:	b538      	push	{r3, r4, r5, lr}
 80179f6:	4605      	mov	r5, r0
 80179f8:	460c      	mov	r4, r1
 80179fa:	d904      	bls.n	8017a06 <_raise_r+0x14>
 80179fc:	2316      	movs	r3, #22
 80179fe:	6003      	str	r3, [r0, #0]
 8017a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a04:	bd38      	pop	{r3, r4, r5, pc}
 8017a06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017a08:	b112      	cbz	r2, 8017a10 <_raise_r+0x1e>
 8017a0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017a0e:	b94b      	cbnz	r3, 8017a24 <_raise_r+0x32>
 8017a10:	4628      	mov	r0, r5
 8017a12:	f000 f831 	bl	8017a78 <_getpid_r>
 8017a16:	4622      	mov	r2, r4
 8017a18:	4601      	mov	r1, r0
 8017a1a:	4628      	mov	r0, r5
 8017a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a20:	f000 b818 	b.w	8017a54 <_kill_r>
 8017a24:	2b01      	cmp	r3, #1
 8017a26:	d00a      	beq.n	8017a3e <_raise_r+0x4c>
 8017a28:	1c59      	adds	r1, r3, #1
 8017a2a:	d103      	bne.n	8017a34 <_raise_r+0x42>
 8017a2c:	2316      	movs	r3, #22
 8017a2e:	6003      	str	r3, [r0, #0]
 8017a30:	2001      	movs	r0, #1
 8017a32:	e7e7      	b.n	8017a04 <_raise_r+0x12>
 8017a34:	2100      	movs	r1, #0
 8017a36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017a3a:	4620      	mov	r0, r4
 8017a3c:	4798      	blx	r3
 8017a3e:	2000      	movs	r0, #0
 8017a40:	e7e0      	b.n	8017a04 <_raise_r+0x12>
	...

08017a44 <raise>:
 8017a44:	4b02      	ldr	r3, [pc, #8]	@ (8017a50 <raise+0xc>)
 8017a46:	4601      	mov	r1, r0
 8017a48:	6818      	ldr	r0, [r3, #0]
 8017a4a:	f7ff bfd2 	b.w	80179f2 <_raise_r>
 8017a4e:	bf00      	nop
 8017a50:	2000007c 	.word	0x2000007c

08017a54 <_kill_r>:
 8017a54:	b538      	push	{r3, r4, r5, lr}
 8017a56:	4d07      	ldr	r5, [pc, #28]	@ (8017a74 <_kill_r+0x20>)
 8017a58:	2300      	movs	r3, #0
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	4608      	mov	r0, r1
 8017a5e:	4611      	mov	r1, r2
 8017a60:	602b      	str	r3, [r5, #0]
 8017a62:	f7e9 fd75 	bl	8001550 <_kill>
 8017a66:	1c43      	adds	r3, r0, #1
 8017a68:	d102      	bne.n	8017a70 <_kill_r+0x1c>
 8017a6a:	682b      	ldr	r3, [r5, #0]
 8017a6c:	b103      	cbz	r3, 8017a70 <_kill_r+0x1c>
 8017a6e:	6023      	str	r3, [r4, #0]
 8017a70:	bd38      	pop	{r3, r4, r5, pc}
 8017a72:	bf00      	nop
 8017a74:	200089c8 	.word	0x200089c8

08017a78 <_getpid_r>:
 8017a78:	f7e9 bd62 	b.w	8001540 <_getpid>

08017a7c <_init>:
 8017a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a7e:	bf00      	nop
 8017a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a82:	bc08      	pop	{r3}
 8017a84:	469e      	mov	lr, r3
 8017a86:	4770      	bx	lr

08017a88 <_fini>:
 8017a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a8a:	bf00      	nop
 8017a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a8e:	bc08      	pop	{r3}
 8017a90:	469e      	mov	lr, r3
 8017a92:	4770      	bx	lr
