
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c58  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036a8  08011e28  08011e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154d0  080154d0  0001720c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080154d0  080154d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154d8  080154d8  0001720c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154d8  080154d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080154dc  080154dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  080154e0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  080155ac  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  0801564c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000080a4  2000020c  080156ec  0001720c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200082b0  080156ec  000172b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001720c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020acb  00000000  00000000  0001723c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000602e  00000000  00000000  00037d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001720  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000123c  00000000  00000000  0003f458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034abe  00000000  00000000  00040694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029981  00000000  00000000  00075152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010277b  00000000  00000000  0009ead3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a124e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006390  00000000  00000000  001a1294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001a7624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011e10 	.word	0x08011e10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08011e10 	.word	0x08011e10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <MX_CRC_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000606:	f000 ff7b 	bl	8001500 <HAL_CRC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 f93a 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000228 	.word	0x20000228
 800061c:	40023000 	.word	0x40023000

08000620 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <HAL_CRC_MspInit+0x38>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023000 	.word	0x40023000
 800065c:	40023800 	.word	0x40023800

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <MX_DMA_Init+0x48>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a0f      	ldr	r2, [pc, #60]	@ (80006a8 <MX_DMA_Init+0x48>)
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <MX_DMA_Init+0x48>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200b      	movs	r0, #11
 8000684:	f000 ff05 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000688:	200b      	movs	r0, #11
 800068a:	f000 ff1e 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	200f      	movs	r0, #15
 8000694:	f000 fefd 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000698:	200f      	movs	r0, #15
 800069a:	f000 ff16 	bl	80014ca <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a20      	ldr	r2, [pc, #128]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <MX_GPIO_Init+0x8c>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_GPIO_Init+0x8c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_GPIO_Init+0x8c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <MX_GPIO_Init+0x8c>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_GPIO_Init+0x8c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

}
 800072a:	bf00      	nop
 800072c:	371c      	adds	r7, #28
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <_write+0x3c>)
 800074a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	b29a      	uxth	r2, r3
 8000750:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000754:	68b9      	ldr	r1, [r7, #8]
 8000756:	4809      	ldr	r0, [pc, #36]	@ (800077c <_write+0x40>)
 8000758:	f004 f852 	bl	8004800 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 800075c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000760:	2201      	movs	r2, #1
 8000762:	6979      	ldr	r1, [r7, #20]
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <_write+0x40>)
 8000766:	f004 f84b 	bl	8004800 <HAL_UART_Transmit>
	return len + 1;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3301      	adds	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08011e28 	.word	0x08011e28
 800077c:	20000360 	.word	0x20000360

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fd29 	bl	80011da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f812 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f7ff ff8e 	bl	80006ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000790:	f7ff ff66 	bl	8000660 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000794:	f000 fa38 	bl	8000c08 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000798:	f005 f832 	bl	8005800 <MX_LWIP_Init>
  MX_CRC_Init();
 800079c:	f7ff ff1e 	bl	80005dc <MX_CRC_Init>
  MX_UART4_Init();
 80007a0:	f000 f9d2 	bl	8000b48 <MX_UART4_Init>
  MX_UART5_Init();
 80007a4:	f000 fa00 	bl	8000ba8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 80007a8:	f010 f938 	bl	8010a1c <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <main+0x2c>

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	@ 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	@ 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f010 fce4 	bl	801118c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <SystemClock_Config+0xd0>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a29      	ldr	r2, [pc, #164]	@ (8000880 <SystemClock_Config+0xd0>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <SystemClock_Config+0xd0>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <SystemClock_Config+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a24      	ldr	r2, [pc, #144]	@ (8000884 <SystemClock_Config+0xd4>)
 80007f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000818:	2308      	movs	r3, #8
 800081a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800081c:	23d8      	movs	r3, #216	@ 0xd8
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f002 ff1f 	bl	8003670 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000838:	f000 f826 	bl	8000888 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800083c:	f002 fec8 	bl	80035d0 <HAL_PWREx_EnableOverDrive>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000846:	f000 f81f 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000856:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2107      	movs	r1, #7
 8000868:	4618      	mov	r0, r3
 800086a:	f003 f9a5 	bl	8003bb8 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000874:	f000 f808 	bl	8000888 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	@ 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <HAL_MspInit+0x44>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <HAL_MspInit+0x44>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <HAL_MspInit+0x44>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_MspInit+0x44>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <NMI_Handler+0x4>

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <MemManage_Handler+0x4>

080008f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <UsageFault_Handler+0x4>

08000904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 fc8f 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000940:	4802      	ldr	r0, [pc, #8]	@ (800094c <DMA1_Stream0_IRQHandler+0x10>)
 8000942:	f001 f80f 	bl	8001964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000448 	.word	0x20000448

08000950 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000954:	4802      	ldr	r0, [pc, #8]	@ (8000960 <DMA1_Stream4_IRQHandler+0x10>)
 8000956:	f001 f805 	bl	8001964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200003e8 	.word	0x200003e8

08000964 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000968:	4802      	ldr	r0, [pc, #8]	@ (8000974 <USART3_IRQHandler+0x10>)
 800096a:	f003 ffd3 	bl	8004914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000360 	.word	0x20000360

08000978 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800097c:	4802      	ldr	r0, [pc, #8]	@ (8000988 <UART4_IRQHandler+0x10>)
 800097e:	f003 ffc9 	bl	8004914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000250 	.word	0x20000250

0800098c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <UART5_IRQHandler+0x10>)
 8000992:	f003 ffbf 	bl	8004914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002d8 	.word	0x200002d8

080009a0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009a4:	4802      	ldr	r0, [pc, #8]	@ (80009b0 <ETH_IRQHandler+0x10>)
 80009a6:	f001 fd7b 	bl	80024a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20004e88 	.word	0x20004e88

080009b4 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <ETH_WKUP_IRQHandler+0x10>)
 80009ba:	f001 fd71 	bl	80024a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20004e88 	.word	0x20004e88

080009c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_kill>:

int _kill(int pid, int sig)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009e2:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <_kill+0x20>)
 80009e4:	2216      	movs	r2, #22
 80009e6:	601a      	str	r2, [r3, #0]
  return -1;
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	200082a0 	.word	0x200082a0

080009fc <_exit>:

void _exit (int status)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ffe5 	bl	80009d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a0e:	bf00      	nop
 8000a10:	e7fd      	b.n	8000a0e <_exit+0x12>

08000a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e00a      	b.n	8000a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a24:	f3af 8000 	nop.w
 8000a28:	4601      	mov	r1, r0
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	60ba      	str	r2, [r7, #8]
 8000a30:	b2ca      	uxtb	r2, r1
 8000a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	3301      	adds	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	dbf0      	blt.n	8000a24 <_read+0x12>
  }

  return len;
 8000a42:	687b      	ldr	r3, [r7, #4]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a74:	605a      	str	r2, [r3, #4]
  return 0;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_isatty>:

int _isatty(int file)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b085      	sub	sp, #20
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	@ (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d205      	bcs.n	8000af0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <_sbrk+0x6c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a06      	ldr	r2, [pc, #24]	@ (8000b18 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20050000 	.word	0x20050000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	2000024c 	.word	0x2000024c
 8000b1c:	200082b0 	.word	0x200082b0
 8000b20:	200082a0 	.word	0x200082a0

08000b24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ba4 <MX_UART4_Init+0x5c>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_UART4_Init+0x58>)
 8000b8c:	f003 fdea 	bl	8004764 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000b96:	f7ff fe77 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000250 	.word	0x20000250
 8000ba4:	40004c00 	.word	0x40004c00

08000ba8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bae:	4a15      	ldr	r2, [pc, #84]	@ (8000c04 <MX_UART5_Init+0x5c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_UART5_Init+0x58>)
 8000bec:	f003 fdba 	bl	8004764 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000bf6:	f7ff fe47 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200002d8 	.word	0x200002d8
 8000c04:	40005000 	.word	0x40005000

08000c08 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c0e:	4a15      	ldr	r2, [pc, #84]	@ (8000c64 <MX_USART3_UART_Init+0x5c>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_USART3_UART_Init+0x58>)
 8000c4c:	f003 fd8a 	bl	8004764 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f7ff fe17 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000360 	.word	0x20000360
 8000c64:	40004800 	.word	0x40004800

08000c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0b0      	sub	sp, #192	@ 0xc0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c84:	2284      	movs	r2, #132	@ 0x84
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f010 fa7f 	bl	801118c <memset>
  if(uartHandle->Instance==UART4)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4ab0      	ldr	r2, [pc, #704]	@ (8000f54 <HAL_UART_MspInit+0x2ec>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d173      	bne.n	8000d80 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 f96c 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cb2:	f7ff fde9 	bl	8000888 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cb6:	4ba8      	ldr	r3, [pc, #672]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4aa7      	ldr	r2, [pc, #668]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000cbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4ba5      	ldr	r3, [pc, #660]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4ba2      	ldr	r3, [pc, #648]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4aa1      	ldr	r2, [pc, #644]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b9f      	ldr	r3, [pc, #636]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	623b      	str	r3, [r7, #32]
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ce6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d00:	2308      	movs	r3, #8
 8000d02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4893      	ldr	r0, [pc, #588]	@ (8000f5c <HAL_UART_MspInit+0x2f4>)
 8000d0e:	f002 fab3 	bl	8003278 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000d12:	4b93      	ldr	r3, [pc, #588]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d14:	4a93      	ldr	r2, [pc, #588]	@ (8000f64 <HAL_UART_MspInit+0x2fc>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000d18:	4b91      	ldr	r3, [pc, #580]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d1e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d20:	4b8f      	ldr	r3, [pc, #572]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d22:	2240      	movs	r2, #64	@ 0x40
 8000d24:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d26:	4b8e      	ldr	r3, [pc, #568]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d32:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d34:	4b8a      	ldr	r3, [pc, #552]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d3a:	4b89      	ldr	r3, [pc, #548]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000d40:	4b87      	ldr	r3, [pc, #540]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d46:	4b86      	ldr	r3, [pc, #536]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d4c:	4b84      	ldr	r3, [pc, #528]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000d52:	4883      	ldr	r0, [pc, #524]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d54:	f000 fcc6 	bl	80016e4 <HAL_DMA_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000d5e:	f7ff fd93 	bl	8000888 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a7e      	ldr	r2, [pc, #504]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d66:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d68:	4a7d      	ldr	r2, [pc, #500]	@ (8000f60 <HAL_UART_MspInit+0x2f8>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2034      	movs	r0, #52	@ 0x34
 8000d74:	f000 fb8d 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d78:	2034      	movs	r0, #52	@ 0x34
 8000d7a:	f000 fba6 	bl	80014ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d7e:	e0e4      	b.n	8000f4a <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a78      	ldr	r2, [pc, #480]	@ (8000f68 <HAL_UART_MspInit+0x300>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	f040 8095 	bne.w	8000eb6 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 f8f2 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0x142>
      Error_Handler();
 8000da6:	f7ff fd6f 	bl	8000888 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000daa:	4b6b      	ldr	r3, [pc, #428]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a6a      	ldr	r2, [pc, #424]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000db0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b68      	ldr	r3, [pc, #416]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dbe:	61fb      	str	r3, [r7, #28]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b65      	ldr	r3, [pc, #404]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a64      	ldr	r2, [pc, #400]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b62      	ldr	r3, [pc, #392]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dda:	4b5f      	ldr	r3, [pc, #380]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a5e      	ldr	r2, [pc, #376]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000df2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e16:	4619      	mov	r1, r3
 8000e18:	4850      	ldr	r0, [pc, #320]	@ (8000f5c <HAL_UART_MspInit+0x2f4>)
 8000e1a:	f002 fa2d 	bl	8003278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e36:	2308      	movs	r3, #8
 8000e38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e40:	4619      	mov	r1, r3
 8000e42:	484a      	ldr	r0, [pc, #296]	@ (8000f6c <HAL_UART_MspInit+0x304>)
 8000e44:	f002 fa18 	bl	8003278 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000e48:	4b49      	ldr	r3, [pc, #292]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8000f74 <HAL_UART_MspInit+0x30c>)
 8000e4c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000e4e:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e54:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e56:	4b46      	ldr	r3, [pc, #280]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5c:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e62:	4b43      	ldr	r3, [pc, #268]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6a:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e70:	4b3f      	ldr	r3, [pc, #252]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000e76:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e82:	4b3b      	ldr	r3, [pc, #236]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000e88:	4839      	ldr	r0, [pc, #228]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e8a:	f000 fc2b 	bl	80016e4 <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8000e94:	f7ff fcf8 	bl	8000888 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a35      	ldr	r2, [pc, #212]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000e9c:	675a      	str	r2, [r3, #116]	@ 0x74
 8000e9e:	4a34      	ldr	r2, [pc, #208]	@ (8000f70 <HAL_UART_MspInit+0x308>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2035      	movs	r0, #53	@ 0x35
 8000eaa:	f000 faf2 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000eae:	2035      	movs	r0, #53	@ 0x35
 8000eb0:	f000 fb0b 	bl	80014ca <HAL_NVIC_EnableIRQ>
}
 8000eb4:	e049      	b.n	8000f4a <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a2f      	ldr	r2, [pc, #188]	@ (8000f78 <HAL_UART_MspInit+0x310>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d144      	bne.n	8000f4a <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 f858 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_UART_MspInit+0x276>
      Error_Handler();
 8000eda:	f7ff fcd5 	bl	8000888 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ede:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eea:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_UART_MspInit+0x2f0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f32:	4619      	mov	r1, r3
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <HAL_UART_MspInit+0x304>)
 8000f36:	f002 f99f 	bl	8003278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2027      	movs	r0, #39	@ 0x27
 8000f40:	f000 faa7 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f44:	2027      	movs	r0, #39	@ 0x27
 8000f46:	f000 fac0 	bl	80014ca <HAL_NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	37c0      	adds	r7, #192	@ 0xc0
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004c00 	.word	0x40004c00
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	200003e8 	.word	0x200003e8
 8000f64:	40026070 	.word	0x40026070
 8000f68:	40005000 	.word	0x40005000
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	20000448 	.word	0x20000448
 8000f74:	40026010 	.word	0x40026010
 8000f78:	40004800 	.word	0x40004800

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f80:	f7ff fdd0 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000faa:	f010 f93d 	bl	8011228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fbe7 	bl	8000780 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000fc0:	080154e0 	.word	0x080154e0
  ldr r2, =_sbss
 8000fc4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000fc8:	200082b0 	.word	0x200082b0

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>

08000fce <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <LAN8742_RegisterBusIO+0x28>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <LAN8742_RegisterBusIO+0x28>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <LAN8742_RegisterBusIO+0x28>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ffa:	e014      	b.n	8001026 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d139      	bne.n	80010c2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2220      	movs	r2, #32
 8001060:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e01c      	b.n	80010a2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f107 020c 	add.w	r2, r7, #12
 8001070:	2112      	movs	r1, #18
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	4798      	blx	r3
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	da03      	bge.n	8001084 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800107c:	f06f 0304 	mvn.w	r3, #4
 8001080:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001082:	e00b      	b.n	800109c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	d105      	bne.n	800109c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
         break;
 800109a:	e005      	b.n	80010a8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b1f      	cmp	r3, #31
 80010a6:	d9df      	bls.n	8001068 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b1f      	cmp	r3, #31
 80010ae:	d902      	bls.n	80010b6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80010b0:	f06f 0302 	mvn.w	r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80010c2:	693b      	ldr	r3, [r7, #16]
 }
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6810      	ldr	r0, [r2, #0]
 80010e0:	f107 020c 	add.w	r2, r7, #12
 80010e4:	2101      	movs	r1, #1
 80010e6:	4798      	blx	r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da02      	bge.n	80010f4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010ee:	f06f 0304 	mvn.w	r3, #4
 80010f2:	e06e      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	f107 020c 	add.w	r2, r7, #12
 8001100:	2101      	movs	r1, #1
 8001102:	4798      	blx	r3
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	da02      	bge.n	8001110 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800110a:	f06f 0304 	mvn.w	r3, #4
 800110e:	e060      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800111a:	2301      	movs	r3, #1
 800111c:	e059      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6810      	ldr	r0, [r2, #0]
 8001126:	f107 020c 	add.w	r2, r7, #12
 800112a:	2100      	movs	r1, #0
 800112c:	4798      	blx	r3
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	da02      	bge.n	800113a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001134:	f06f 0304 	mvn.w	r3, #4
 8001138:	e04b      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d11b      	bne.n	800117c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <LAN8742_GetLinkState+0x90>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001158:	2302      	movs	r3, #2
 800115a:	e03a      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001166:	2303      	movs	r3, #3
 8001168:	e033      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001174:	2304      	movs	r3, #4
 8001176:	e02c      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001178:	2305      	movs	r3, #5
 800117a:	e02a      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6810      	ldr	r0, [r2, #0]
 8001184:	f107 020c 	add.w	r2, r7, #12
 8001188:	211f      	movs	r1, #31
 800118a:	4798      	blx	r3
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	da02      	bge.n	8001198 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001192:	f06f 0304 	mvn.w	r3, #4
 8001196:	e01c      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80011a2:	2306      	movs	r3, #6
 80011a4:	e015      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f003 031c 	and.w	r3, r3, #28
 80011ac:	2b18      	cmp	r3, #24
 80011ae:	d101      	bne.n	80011b4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011b0:	2302      	movs	r3, #2
 80011b2:	e00e      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 031c 	and.w	r3, r3, #28
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d101      	bne.n	80011c2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011be:	2303      	movs	r3, #3
 80011c0:	e007      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f003 031c 	and.w	r3, r3, #28
 80011c8:	2b14      	cmp	r3, #20
 80011ca:	d101      	bne.n	80011d0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011cc:	2304      	movs	r3, #4
 80011ce:	e000      	b.n	80011d2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011d0:	2305      	movs	r3, #5
    }
  }
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011de:	2003      	movs	r0, #3
 80011e0:	f000 f94c 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e4:	200f      	movs	r0, #15
 80011e6:	f000 f805 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ea:	f7ff fb53 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f967 	bl	80014e6 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001230:	f000 f92f 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	200004a8 	.word	0x200004a8

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200004a8 	.word	0x200004a8

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <__NVIC_SetPriorityGrouping+0x40>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <__NVIC_SetPriorityGrouping+0x40>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	05fa0000 	.word	0x05fa0000

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	@ (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e054      	b.n	80015bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7f5b      	ldrb	r3, [r3, #29]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff f87c 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10c      	bne.n	8001550 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a22      	ldr	r2, [pc, #136]	@ (80015c4 <HAL_CRC_Init+0xc4>)
 800153c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0218 	bic.w	r2, r2, #24
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e00c      	b.n	800156a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	461a      	mov	r2, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f834 	bl	80015c8 <HAL_CRCEx_Polynomial_Set>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e028      	b.n	80015bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	795b      	ldrb	r3, [r3, #5]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	e004      	b.n	8001588 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6912      	ldr	r2, [r2, #16]
 8001586:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	04c11db7 	.word	0x04c11db7

080015c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80015d8:	231f      	movs	r3, #31
 80015da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	75fb      	strb	r3, [r7, #23]
 80015ea:	e063      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80015ec:	bf00      	nop
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	613a      	str	r2, [r7, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <HAL_CRCEx_Polynomial_Set+0x44>
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b18      	cmp	r3, #24
 8001610:	d846      	bhi.n	80016a0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001612:	a201      	add	r2, pc, #4	@ (adr r2, 8001618 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	080016a7 	.word	0x080016a7
 800161c:	080016a1 	.word	0x080016a1
 8001620:	080016a1 	.word	0x080016a1
 8001624:	080016a1 	.word	0x080016a1
 8001628:	080016a1 	.word	0x080016a1
 800162c:	080016a1 	.word	0x080016a1
 8001630:	080016a1 	.word	0x080016a1
 8001634:	080016a1 	.word	0x080016a1
 8001638:	08001695 	.word	0x08001695
 800163c:	080016a1 	.word	0x080016a1
 8001640:	080016a1 	.word	0x080016a1
 8001644:	080016a1 	.word	0x080016a1
 8001648:	080016a1 	.word	0x080016a1
 800164c:	080016a1 	.word	0x080016a1
 8001650:	080016a1 	.word	0x080016a1
 8001654:	080016a1 	.word	0x080016a1
 8001658:	08001689 	.word	0x08001689
 800165c:	080016a1 	.word	0x080016a1
 8001660:	080016a1 	.word	0x080016a1
 8001664:	080016a1 	.word	0x080016a1
 8001668:	080016a1 	.word	0x080016a1
 800166c:	080016a1 	.word	0x080016a1
 8001670:	080016a1 	.word	0x080016a1
 8001674:	080016a1 	.word	0x080016a1
 8001678:	0800167d 	.word	0x0800167d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b06      	cmp	r3, #6
 8001680:	d913      	bls.n	80016aa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001686:	e010      	b.n	80016aa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b07      	cmp	r3, #7
 800168c:	d90f      	bls.n	80016ae <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001692:	e00c      	b.n	80016ae <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d90b      	bls.n	80016b2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800169e:	e008      	b.n	80016b2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	75fb      	strb	r3, [r7, #23]
        break;
 80016a4:	e006      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016a6:	bf00      	nop
 80016a8:	e004      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016aa:	bf00      	nop
 80016ac:	e002      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016ae:	bf00      	nop
 80016b0:	e000      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016b2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10d      	bne.n	80016d6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 0118 	bic.w	r1, r3, #24
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff fdc4 	bl	800127c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e099      	b.n	8001834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001720:	e00f      	b.n	8001742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001722:	f7ff fdab 	bl	800127c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b05      	cmp	r3, #5
 800172e:	d908      	bls.n	8001742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e078      	b.n	8001834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1e8      	bne.n	8001722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	4b38      	ldr	r3, [pc, #224]	@ (800183c <HAL_DMA_Init+0x158>)
 800175c:	4013      	ands	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	2b04      	cmp	r3, #4
 800179a:	d107      	bne.n	80017ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	4313      	orrs	r3, r2
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f023 0307 	bic.w	r3, r3, #7
 80017c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d117      	bne.n	8001806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00e      	beq.n	8001806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fa7b 	bl	8001ce4 <DMA_CheckFifoParam>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2240      	movs	r2, #64	@ 0x40
 80017f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001802:	2301      	movs	r3, #1
 8001804:	e016      	b.n	8001834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa32 	bl	8001c78 <DMA_CalcBaseAndBitshift>
 8001814:	4603      	mov	r3, r0
 8001816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181c:	223f      	movs	r2, #63	@ 0x3f
 800181e:	409a      	lsls	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	f010803f 	.word	0xf010803f

08001840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800184e:	f7ff fd15 	bl	800127c <HAL_GetTick>
 8001852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d008      	beq.n	8001872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2280      	movs	r2, #128	@ 0x80
 8001864:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e052      	b.n	8001918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0216 	bic.w	r2, r2, #22
 8001880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <HAL_DMA_Abort+0x62>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0208 	bic.w	r2, r2, #8
 80018b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c2:	e013      	b.n	80018ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c4:	f7ff fcda 	bl	800127c <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d90c      	bls.n	80018ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2220      	movs	r2, #32
 80018d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e015      	b.n	8001918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1e4      	bne.n	80018c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fe:	223f      	movs	r2, #63	@ 0x3f
 8001900:	409a      	lsls	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d004      	beq.n	800193e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2280      	movs	r2, #128	@ 0x80
 8001938:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00c      	b.n	8001958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2205      	movs	r2, #5
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001970:	4b8e      	ldr	r3, [pc, #568]	@ (8001bac <HAL_DMA_IRQHandler+0x248>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a8e      	ldr	r2, [pc, #568]	@ (8001bb0 <HAL_DMA_IRQHandler+0x24c>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	2208      	movs	r2, #8
 8001990:	409a      	lsls	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019bc:	2208      	movs	r2, #8
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d4:	2201      	movs	r2, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f2:	2201      	movs	r2, #1
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fe:	f043 0202 	orr.w	r2, r3, #2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a28:	2204      	movs	r2, #4
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	2210      	movs	r2, #16
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d043      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d03c      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5e:	2210      	movs	r2, #16
 8001a60:	409a      	lsls	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d108      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d024      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
 8001a92:	e01f      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	e016      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0208 	bic.w	r2, r2, #8
 8001ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad8:	2220      	movs	r2, #32
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 808f 	beq.w	8001c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8087 	beq.w	8001c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afa:	2220      	movs	r2, #32
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d136      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0216 	bic.w	r2, r2, #22
 8001b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d103      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x1da>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0208 	bic.w	r2, r2, #8
 8001b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	223f      	movs	r2, #63	@ 0x3f
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d07e      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
        }
        return;
 8001b7a:	e079      	b.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01d      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d031      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
 8001ba8:	e02c      	b.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d023      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e01e      	b.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10f      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0210 	bic.w	r2, r2, #16
 8001be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d032      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3301      	adds	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d307      	bcc.n	8001c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x2cc>
 8001c4a:	e000      	b.n	8001c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	4798      	blx	r3
 8001c6e:	e000      	b.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c70:	bf00      	nop
    }
  }
}
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3b10      	subs	r3, #16
 8001c88:	4a13      	ldr	r2, [pc, #76]	@ (8001cd8 <DMA_CalcBaseAndBitshift+0x60>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <DMA_CalcBaseAndBitshift+0x64>)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d908      	bls.n	8001cb8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	1d1a      	adds	r2, r3, #4
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cb6:	e006      	b.n	8001cc6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	aaaaaaab 	.word	0xaaaaaaab
 8001cdc:	080152d4 	.word	0x080152d4
 8001ce0:	fffffc00 	.word	0xfffffc00

08001ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11f      	bne.n	8001d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d856      	bhi.n	8001db2 <DMA_CheckFifoParam+0xce>
 8001d04:	a201      	add	r2, pc, #4	@ (adr r2, 8001d0c <DMA_CheckFifoParam+0x28>)
 8001d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0a:	bf00      	nop
 8001d0c:	08001d1d 	.word	0x08001d1d
 8001d10:	08001d2f 	.word	0x08001d2f
 8001d14:	08001d1d 	.word	0x08001d1d
 8001d18:	08001db3 	.word	0x08001db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d046      	beq.n	8001db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d2c:	e043      	b.n	8001db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d36:	d140      	bne.n	8001dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d3c:	e03d      	b.n	8001dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d46:	d121      	bne.n	8001d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d837      	bhi.n	8001dbe <DMA_CheckFifoParam+0xda>
 8001d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d54 <DMA_CheckFifoParam+0x70>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d6b 	.word	0x08001d6b
 8001d5c:	08001d65 	.word	0x08001d65
 8001d60:	08001d7d 	.word	0x08001d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
      break;
 8001d68:	e030      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d025      	beq.n	8001dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7a:	e022      	b.n	8001dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d84:	d11f      	bne.n	8001dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d8a:	e01c      	b.n	8001dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d903      	bls.n	8001d9a <DMA_CheckFifoParam+0xb6>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d003      	beq.n	8001da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d98:	e018      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9e:	e015      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
      break;
 8001db0:	e00b      	b.n	8001dca <DMA_CheckFifoParam+0xe6>
      break;
 8001db2:	bf00      	nop
 8001db4:	e00a      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
 8001db8:	e008      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e006      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e004      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e002      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8001dc6:	bf00      	nop
 8001dc8:	e000      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dca:	bf00      	nop
    }
  } 
  
  return status; 
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e086      	b.n	8001efc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d106      	bne.n	8001e06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f004 f82d 	bl	8005e60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b3f      	ldr	r3, [pc, #252]	@ (8001f04 <HAL_ETH_Init+0x128>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f04 <HAL_ETH_Init+0x128>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b3c      	ldr	r3, [pc, #240]	@ (8001f04 <HAL_ETH_Init+0x128>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a39      	ldr	r2, [pc, #228]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e28:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e2a:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e38:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e54:	f7ff fa12 	bl	800127c <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e5a:	e011      	b.n	8001e80 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e5c:	f7ff fa0e 	bl	800127c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e6a:	d909      	bls.n	8001e80 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	22e0      	movs	r2, #224	@ 0xe0
 8001e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e03d      	b.n	8001efc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e4      	bne.n	8001e5c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 ff34 	bl	8002d00 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 ffdf 	bl	8002e5c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f001 f835 	bl	8002f0e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2100      	movs	r1, #0
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 ff9d 	bl	8002dec <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <HAL_ETH_Init+0x130>)
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001ee6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	00020060 	.word	0x00020060

08001f10 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d15f      	bne.n	8001fe2 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fa2e 	bl	8002398 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7ff f9a5 	bl	8001294 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f68:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f80:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fd58 	bl	8002a38 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0208 	orr.w	r2, r2, #8
 8001f96:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff f977 	bl	8001294 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0204 	orr.w	r2, r2, #4
 8001fbc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc6:	69d9      	ldr	r1, [r3, #28]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <HAL_ETH_Start_IT+0xdc>)
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fd4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2240      	movs	r2, #64	@ 0x40
 8001fda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
  }
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	0001a0c1 	.word	0x0001a0c1

08001ff0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ffe:	2b40      	cmp	r3, #64	@ 0x40
 8002000:	d16e      	bne.n	80020e0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002012:	69d9      	ldr	r1, [r3, #28]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b34      	ldr	r3, [pc, #208]	@ (80020ec <HAL_ETH_Stop_IT+0xfc>)
 800201a:	400b      	ands	r3, r1
 800201c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002020:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002034:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002038:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f023 0302 	bic.w	r3, r3, #2
 800204c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002050:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0204 	bic.w	r2, r2, #4
 8002060:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800206a:	2001      	movs	r0, #1
 800206c:	f7ff f912 	bl	8001294 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fcdd 	bl	8002a38 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0208 	bic.w	r2, r2, #8
 800208c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff f8fc 	bl	8001294 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00e      	b.n	80020c8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	3212      	adds	r2, #18
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d9ed      	bls.n	80020aa <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2210      	movs	r2, #16
 80020d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	fffe5f3e 	.word	0xfffe5f3e

080020f0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07c      	b.n	8002210 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800211c:	2b40      	cmp	r3, #64	@ 0x40
 800211e:	d176      	bne.n	800220e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002120:	2200      	movs	r2, #0
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 ff61 	bl	8002fec <ETH_Prepare_Tx_Descriptors>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e065      	b.n	8002210 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002144:	f3bf 8f4f 	dsb	sy
}
 8002148:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3206      	adds	r2, #6
 8002152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002156:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	2b03      	cmp	r3, #3
 8002168:	d904      	bls.n	8002174 <HAL_ETH_Transmit+0x84>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	1f1a      	subs	r2, r3, #4
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3106      	adds	r1, #6
 8002180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002184:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002188:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800218a:	f7ff f877 	bl	800127c <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002190:	e037      	b.n	8002202 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d011      	beq.n	80021c8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	f043 0208 	orr.w	r2, r3, #8
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e023      	b.n	8002210 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ce:	d018      	beq.n	8002202 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021d0:	f7ff f854 	bl	800127c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d302      	bcc.n	80021e6 <HAL_ETH_Transmit+0xf6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80021fc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e006      	b.n	8002210 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	dbc3      	blt.n	8002192 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
  }
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0a4      	b.n	800238e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800224a:	2b40      	cmp	r3, #64	@ 0x40
 800224c:	d001      	beq.n	8002252 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e09d      	b.n	800238e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	3212      	adds	r2, #18
 800225e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002268:	f1c3 0304 	rsb	r3, r3, #4
 800226c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800226e:	e066      	b.n	800233e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <HAL_ETH_ReadData+0x88>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d03c      	beq.n	800231a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80022c2:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f003 ff83 	bl	8006204 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	441a      	add	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2200      	movs	r2, #0
 8002318:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d902      	bls.n	800232c <HAL_ETH_ReadData+0x114>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b04      	subs	r3, #4
 800232a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	3212      	adds	r2, #18
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002342:	2b00      	cmp	r3, #0
 8002344:	db06      	blt.n	8002354 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	429a      	cmp	r2, r3
 800234c:	d202      	bcs.n	8002354 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d08d      	beq.n	8002270 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	441a      	add	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f815 	bl	8002398 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
}
 800238e:	4618      	mov	r0, r3
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80023a4:	2301      	movs	r3, #1
 80023a6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023ac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	3212      	adds	r2, #18
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023be:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80023c0:	e042      	b.n	8002448 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d112      	bne.n	80023f0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80023ca:	f107 0308 	add.w	r3, r7, #8
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 fee8 	bl	80061a4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	74fb      	strb	r3, [r7, #19]
 80023de:	e007      	b.n	80023f0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	461a      	mov	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	461a      	mov	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d028      	beq.n	8002448 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	4b26      	ldr	r3, [pc, #152]	@ (800249c <ETH_UpdateDescriptor+0x104>)
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	6053      	str	r3, [r2, #4]
 800240a:	e005      	b.n	8002418 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	3301      	adds	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d902      	bls.n	8002436 <ETH_UpdateDescriptor+0x9e>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	3b04      	subs	r3, #4
 8002434:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	3212      	adds	r2, #18
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	617b      	str	r3, [r7, #20]
      desccount--;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	3b01      	subs	r3, #1
 8002446:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <ETH_UpdateDescriptor+0xbc>
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1b6      	bne.n	80023c2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	429a      	cmp	r2, r3
 800245c:	d01a      	beq.n	8002494 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3303      	adds	r3, #3
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002468:	f3bf 8f5f 	dmb	sy
}
 800246c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6919      	ldr	r1, [r3, #16]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	18ca      	adds	r2, r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002486:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	80004000 	.word	0x80004000

080024a0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80024c8:	4b4b      	ldr	r3, [pc, #300]	@ (80025f8 <HAL_ETH_IRQHandler+0x158>)
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <HAL_ETH_IRQHandler+0x56>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b43      	ldr	r3, [pc, #268]	@ (80025fc <HAL_ETH_IRQHandler+0x15c>)
 80024ee:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f891 	bl	8002618 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00f      	beq.n	8002520 <HAL_ETH_IRQHandler+0x80>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002512:	461a      	mov	r2, r3
 8002514:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002518:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f872 	bl	8002604 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d042      	beq.n	80025b0 <HAL_ETH_IRQHandler+0x110>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d03d      	beq.n	80025b0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	f043 0208 	orr.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01a      	beq.n	8002584 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	4b29      	ldr	r3, [pc, #164]	@ (8002600 <HAL_ETH_IRQHandler+0x160>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002574:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002578:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	22e0      	movs	r2, #224	@ 0xe0
 800257e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002582:	e012      	b.n	80025aa <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002592:	4013      	ands	r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a2:	461a      	mov	r2, r3
 80025a4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80025a8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f83e 	bl	800262c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f838 	bl	8002640 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80025e2:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_ETH_IRQHandler+0x158>)
 80025e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025e8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f832 	bl	8002654 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40013c00 	.word	0x40013c00
 80025fc:	00010040 	.word	0x00010040
 8002600:	007e2000 	.word	0x007e2000

08002604 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f003 031c 	and.w	r3, r3, #28
 8002684:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	02db      	lsls	r3, r3, #11
 800268a:	b29b      	uxth	r3, r3
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	019b      	lsls	r3, r3, #6
 8002696:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0302 	bic.w	r3, r3, #2
 80026a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80026b8:	f7fe fde0 	bl	800127c <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026be:	e00d      	b.n	80026dc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80026c0:	f7fe fddc 	bl	800127c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ce:	d301      	bcc.n	80026d4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e010      	b.n	80026f6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ec      	bne.n	80026c0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 031c 	and.w	r3, r3, #28
 800271a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	02db      	lsls	r3, r3, #11
 8002720:	b29b      	uxth	r3, r3
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	019b      	lsls	r3, r3, #6
 800272c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002758:	f7fe fd90 	bl	800127c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800275e:	e00d      	b.n	800277c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002760:	f7fe fd8c 	bl	800127c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276e:	d301      	bcc.n	8002774 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e009      	b.n	8002788 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ec      	bne.n	8002760 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0e6      	b.n	8002972 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b29a      	uxth	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00b      	b.n	80029aa <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002998:	2b10      	cmp	r3, #16
 800299a:	d105      	bne.n	80029a8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800299c:	6839      	ldr	r1, [r7, #0]
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f870 	bl	8002a84 <ETH_SetMACConfig>

    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 031c 	bic.w	r3, r3, #28
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80029cc:	f001 faa6 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 80029d0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4a14      	ldr	r2, [pc, #80]	@ (8002a28 <HAL_ETH_SetMDIOClockRange+0x74>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d804      	bhi.n	80029e4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f043 0308 	orr.w	r3, r3, #8
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e019      	b.n	8002a18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4a11      	ldr	r2, [pc, #68]	@ (8002a2c <HAL_ETH_SetMDIOClockRange+0x78>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d204      	bcs.n	80029f6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f043 030c 	orr.w	r3, r3, #12
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e010      	b.n	8002a18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a30 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d90c      	bls.n	8002a18 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4a0c      	ldr	r2, [pc, #48]	@ (8002a34 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d804      	bhi.n	8002a10 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e003      	b.n	8002a18 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f043 0310 	orr.w	r3, r3, #16
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	02160ebf 	.word	0x02160ebf
 8002a2c:	03938700 	.word	0x03938700
 8002a30:	05f5e0ff 	.word	0x05f5e0ff
 8002a34:	08f0d17f 	.word	0x08f0d17f

08002a38 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a5a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7fe fc13 	bl	8001294 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a78:	6193      	str	r3, [r2, #24]
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4b53      	ldr	r3, [pc, #332]	@ (8002be8 <ETH_SetMACConfig+0x164>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7b9b      	ldrb	r3, [r3, #14]
 8002aa2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	7c12      	ldrb	r2, [r2, #16]
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	d102      	bne.n	8002ab2 <ETH_SetMACConfig+0x2e>
 8002aac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ab0:	e000      	b.n	8002ab4 <ETH_SetMACConfig+0x30>
 8002ab2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ab4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	7c52      	ldrb	r2, [r2, #17]
 8002aba:	2a00      	cmp	r2, #0
 8002abc:	d102      	bne.n	8002ac4 <ETH_SetMACConfig+0x40>
 8002abe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ac2:	e000      	b.n	8002ac6 <ETH_SetMACConfig+0x42>
 8002ac4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ac6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002acc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	7fdb      	ldrb	r3, [r3, #31]
 8002ad2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ad4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ada:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	7f92      	ldrb	r2, [r2, #30]
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d102      	bne.n	8002aea <ETH_SetMACConfig+0x66>
 8002ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ae8:	e000      	b.n	8002aec <ETH_SetMACConfig+0x68>
 8002aea:	2200      	movs	r2, #0
                        macconf->Speed |
 8002aec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7f1b      	ldrb	r3, [r3, #28]
 8002af2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002af4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002afa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	791b      	ldrb	r3, [r3, #4]
 8002b00:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002b02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d102      	bne.n	8002b14 <ETH_SetMACConfig+0x90>
 8002b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b12:	e000      	b.n	8002b16 <ETH_SetMACConfig+0x92>
 8002b14:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	7bdb      	ldrb	r3, [r3, #15]
 8002b1c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b1e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b2c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7fe fba4 	bl	8001294 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002b62:	4013      	ands	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b72:	2a00      	cmp	r2, #0
 8002b74:	d101      	bne.n	8002b7a <ETH_SetMACConfig+0xf6>
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	e000      	b.n	8002b7c <ETH_SetMACConfig+0xf8>
 8002b7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b7c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002b8a:	2a01      	cmp	r2, #1
 8002b8c:	d101      	bne.n	8002b92 <ETH_SetMACConfig+0x10e>
 8002b8e:	2208      	movs	r2, #8
 8002b90:	e000      	b.n	8002b94 <ETH_SetMACConfig+0x110>
 8002b92:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b94:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002b9c:	2a01      	cmp	r2, #1
 8002b9e:	d101      	bne.n	8002ba4 <ETH_SetMACConfig+0x120>
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	e000      	b.n	8002ba6 <ETH_SetMACConfig+0x122>
 8002ba4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ba6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002bae:	2a01      	cmp	r2, #1
 8002bb0:	d101      	bne.n	8002bb6 <ETH_SetMACConfig+0x132>
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	e000      	b.n	8002bb8 <ETH_SetMACConfig+0x134>
 8002bb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7fe fb5f 	bl	8001294 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	fd20810f 	.word	0xfd20810f

08002bec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4b3d      	ldr	r3, [pc, #244]	@ (8002cfc <ETH_SetDMAConfig+0x110>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	7b1b      	ldrb	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <ETH_SetDMAConfig+0x2c>
 8002c12:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c16:	e000      	b.n	8002c1a <ETH_SetDMAConfig+0x2e>
 8002c18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	7b5b      	ldrb	r3, [r3, #13]
 8002c1e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c20:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	7f52      	ldrb	r2, [r2, #29]
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d102      	bne.n	8002c30 <ETH_SetDMAConfig+0x44>
 8002c2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c2e:	e000      	b.n	8002c32 <ETH_SetDMAConfig+0x46>
 8002c30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	7b9b      	ldrb	r3, [r3, #14]
 8002c38:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c3a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	7f1b      	ldrb	r3, [r3, #28]
 8002c46:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	7f9b      	ldrb	r3, [r3, #30]
 8002c4e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c50:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c56:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c5e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c60:	4313      	orrs	r3, r2
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c70:	461a      	mov	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fe fb06 	bl	8001294 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c90:	461a      	mov	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	791b      	ldrb	r3, [r3, #4]
 8002c9a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ca0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ca6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002cac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cb4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002cb6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002cbe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cc4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cd2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7fe fad7 	bl	8001294 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	f8de3f23 	.word	0xf8de3f23

08002d00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0a6      	sub	sp, #152	@ 0x98
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002d14:	2300      	movs	r3, #0
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d42:	2300      	movs	r3, #0
 8002d44:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff fe7f 	bl	8002a84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d86:	2301      	movs	r3, #1
 8002d88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002db2:	2301      	movs	r3, #1
 8002db4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002db6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dc0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002dc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dc6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff05 	bl	8002bec <ETH_SetDMAConfig>
}
 8002de2:	bf00      	nop
 8002de4:	3798      	adds	r7, #152	@ 0x98
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3305      	adds	r3, #5
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	3204      	adds	r2, #4
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <ETH_MACAddressConfig+0x68>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3303      	adds	r3, #3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	061a      	lsls	r2, r3, #24
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3302      	adds	r3, #2
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	4313      	orrs	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <ETH_MACAddressConfig+0x6c>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40028040 	.word	0x40028040
 8002e58:	40028044 	.word	0x40028044

08002e5c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e03e      	b.n	8002ee8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68d9      	ldr	r1, [r3, #12]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	3206      	adds	r2, #6
 8002e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d80c      	bhi.n	8002ecc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68d9      	ldr	r1, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	e004      	b.n	8002ed6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d9bd      	bls.n	8002e6a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f00:	611a      	str	r2, [r3, #16]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e048      	b.n	8002fae <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6919      	ldr	r1, [r3, #16]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f58:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	3212      	adds	r2, #18
 8002f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d80c      	bhi.n	8002f9e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6919      	ldr	r1, [r3, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e004      	b.n	8002fa8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d9b3      	bls.n	8002f1c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fde:	60da      	str	r2, [r3, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b091      	sub	sp, #68	@ 0x44
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800302a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800302e:	d007      	beq.n	8003040 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003034:	3304      	adds	r3, #4
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	e111      	b.n	8003268 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003046:	3301      	adds	r3, #1
 8003048:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800304a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003052:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4b86      	ldr	r3, [pc, #536]	@ (8003274 <ETH_Prepare_Tx_Descriptors+0x288>)
 800305a:	4013      	ands	r3, r2
 800305c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800305e:	6852      	ldr	r2, [r2, #4]
 8003060:	431a      	orrs	r2, r3
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	431a      	orrs	r2, r3
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	431a      	orrs	r2, r3
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80030ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80030c6:	e082      	b.n	80031ce <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e005      	b.n	80030f4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80030f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80030f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f6:	3301      	adds	r3, #1
 80030f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d902      	bls.n	8003106 <ETH_Prepare_Tx_Descriptors+0x11a>
 8003100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003102:	3b04      	subs	r3, #4
 8003104:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800310a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800311c:	d007      	beq.n	800312e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800311e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003122:	3304      	adds	r3, #4
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d029      	beq.n	8003182 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800313c:	2300      	movs	r3, #0
 800313e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003140:	e019      	b.n	8003176 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003142:	f3bf 8f5f 	dmb	sy
}
 8003146:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003156:	3301      	adds	r3, #1
 8003158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800315a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800315c:	2b03      	cmp	r3, #3
 800315e:	d902      	bls.n	8003166 <ETH_Prepare_Tx_Descriptors+0x17a>
 8003160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003162:	3b04      	subs	r3, #4
 8003164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800316a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003172:	3301      	adds	r3, #1
 8003174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317a:	429a      	cmp	r2, r3
 800317c:	d3e1      	bcc.n	8003142 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	e072      	b.n	8003268 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800318a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800318e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003190:	3301      	adds	r3, #1
 8003192:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800319a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4b32      	ldr	r3, [pc, #200]	@ (8003274 <ETH_Prepare_Tx_Descriptors+0x288>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ae:	6852      	ldr	r2, [r2, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	3301      	adds	r3, #1
 80031ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80031bc:	f3bf 8f5f 	dmb	sy
}
 80031c0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80031c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80031ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f47f af78 	bne.w	80030c8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80031de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e005      	b.n	80031f8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800320e:	f3bf 8f5f 	dmb	sy
}
 8003212:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003228:	3304      	adds	r3, #4
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003234:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003236:	f3ef 8310 	mrs	r3, PRIMASK
 800323a:	613b      	str	r3, [r7, #16]
  return(result);
 800323c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	2301      	movs	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f383 8810 	msr	PRIMASK, r3
}
 800324a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003252:	4413      	add	r3, r2
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	629a      	str	r2, [r3, #40]	@ 0x28
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3744      	adds	r7, #68	@ 0x44
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	ffffe000 	.word	0xffffe000

08003278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	@ 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	e175      	b.n	8003584 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003298:	2201      	movs	r2, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	f040 8164 	bne.w	800357e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d005      	beq.n	80032ce <HAL_GPIO_Init+0x56>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d130      	bne.n	8003330 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2203      	movs	r2, #3
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003304:	2201      	movs	r2, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 0201 	and.w	r2, r3, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b03      	cmp	r3, #3
 800333a:	d017      	beq.n	800336c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d123      	bne.n	80033c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	08da      	lsrs	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3208      	adds	r2, #8
 8003380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	220f      	movs	r2, #15
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	08da      	lsrs	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3208      	adds	r2, #8
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0203 	and.w	r2, r3, #3
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80be 	beq.w	800357e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003402:	4b66      	ldr	r3, [pc, #408]	@ (800359c <HAL_GPIO_Init+0x324>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	4a65      	ldr	r2, [pc, #404]	@ (800359c <HAL_GPIO_Init+0x324>)
 8003408:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800340c:	6453      	str	r3, [r2, #68]	@ 0x44
 800340e:	4b63      	ldr	r3, [pc, #396]	@ (800359c <HAL_GPIO_Init+0x324>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800341a:	4a61      	ldr	r2, [pc, #388]	@ (80035a0 <HAL_GPIO_Init+0x328>)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	3302      	adds	r3, #2
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	220f      	movs	r2, #15
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a58      	ldr	r2, [pc, #352]	@ (80035a4 <HAL_GPIO_Init+0x32c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d037      	beq.n	80034b6 <HAL_GPIO_Init+0x23e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a57      	ldr	r2, [pc, #348]	@ (80035a8 <HAL_GPIO_Init+0x330>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d031      	beq.n	80034b2 <HAL_GPIO_Init+0x23a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a56      	ldr	r2, [pc, #344]	@ (80035ac <HAL_GPIO_Init+0x334>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d02b      	beq.n	80034ae <HAL_GPIO_Init+0x236>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a55      	ldr	r2, [pc, #340]	@ (80035b0 <HAL_GPIO_Init+0x338>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d025      	beq.n	80034aa <HAL_GPIO_Init+0x232>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a54      	ldr	r2, [pc, #336]	@ (80035b4 <HAL_GPIO_Init+0x33c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01f      	beq.n	80034a6 <HAL_GPIO_Init+0x22e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a53      	ldr	r2, [pc, #332]	@ (80035b8 <HAL_GPIO_Init+0x340>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d019      	beq.n	80034a2 <HAL_GPIO_Init+0x22a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a52      	ldr	r2, [pc, #328]	@ (80035bc <HAL_GPIO_Init+0x344>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_GPIO_Init+0x226>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a51      	ldr	r2, [pc, #324]	@ (80035c0 <HAL_GPIO_Init+0x348>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00d      	beq.n	800349a <HAL_GPIO_Init+0x222>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a50      	ldr	r2, [pc, #320]	@ (80035c4 <HAL_GPIO_Init+0x34c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <HAL_GPIO_Init+0x21e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4f      	ldr	r2, [pc, #316]	@ (80035c8 <HAL_GPIO_Init+0x350>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_GPIO_Init+0x21a>
 800348e:	2309      	movs	r3, #9
 8003490:	e012      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 8003492:	230a      	movs	r3, #10
 8003494:	e010      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 8003496:	2308      	movs	r3, #8
 8003498:	e00e      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 800349a:	2307      	movs	r3, #7
 800349c:	e00c      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 800349e:	2306      	movs	r3, #6
 80034a0:	e00a      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034a2:	2305      	movs	r3, #5
 80034a4:	e008      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034a6:	2304      	movs	r3, #4
 80034a8:	e006      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034aa:	2303      	movs	r3, #3
 80034ac:	e004      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034b6:	2300      	movs	r3, #0
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	f002 0203 	and.w	r2, r2, #3
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	4093      	lsls	r3, r2
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034c8:	4935      	ldr	r1, [pc, #212]	@ (80035a0 <HAL_GPIO_Init+0x328>)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d6:	4b3d      	ldr	r3, [pc, #244]	@ (80035cc <HAL_GPIO_Init+0x354>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fa:	4a34      	ldr	r2, [pc, #208]	@ (80035cc <HAL_GPIO_Init+0x354>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003500:	4b32      	ldr	r3, [pc, #200]	@ (80035cc <HAL_GPIO_Init+0x354>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003524:	4a29      	ldr	r2, [pc, #164]	@ (80035cc <HAL_GPIO_Init+0x354>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800352a:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <HAL_GPIO_Init+0x354>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800354e:	4a1f      	ldr	r2, [pc, #124]	@ (80035cc <HAL_GPIO_Init+0x354>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003554:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <HAL_GPIO_Init+0x354>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003578:	4a14      	ldr	r2, [pc, #80]	@ (80035cc <HAL_GPIO_Init+0x354>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3301      	adds	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	f67f ae86 	bls.w	8003298 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3724      	adds	r7, #36	@ 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40020000 	.word	0x40020000
 80035a8:	40020400 	.word	0x40020400
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40021400 	.word	0x40021400
 80035bc:	40021800 	.word	0x40021800
 80035c0:	40021c00 	.word	0x40021c00
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40022400 	.word	0x40022400
 80035cc:	40013c00 	.word	0x40013c00

080035d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b23      	ldr	r3, [pc, #140]	@ (8003668 <HAL_PWREx_EnableOverDrive+0x98>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	4a22      	ldr	r2, [pc, #136]	@ (8003668 <HAL_PWREx_EnableOverDrive+0x98>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e6:	4b20      	ldr	r3, [pc, #128]	@ (8003668 <HAL_PWREx_EnableOverDrive+0x98>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035f2:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1d      	ldr	r2, [pc, #116]	@ (800366c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035fe:	f7fd fe3d 	bl	800127c <HAL_GetTick>
 8003602:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003604:	e009      	b.n	800361a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003606:	f7fd fe39 	bl	800127c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003614:	d901      	bls.n	800361a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e022      	b.n	8003660 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800361a:	4b14      	ldr	r3, [pc, #80]	@ (800366c <HAL_PWREx_EnableOverDrive+0x9c>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003626:	d1ee      	bne.n	8003606 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003628:	4b10      	ldr	r3, [pc, #64]	@ (800366c <HAL_PWREx_EnableOverDrive+0x9c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0f      	ldr	r2, [pc, #60]	@ (800366c <HAL_PWREx_EnableOverDrive+0x9c>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003634:	f7fd fe22 	bl	800127c <HAL_GetTick>
 8003638:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800363a:	e009      	b.n	8003650 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800363c:	f7fd fe1e 	bl	800127c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800364a:	d901      	bls.n	8003650 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e007      	b.n	8003660 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800365c:	d1ee      	bne.n	800363c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	40007000 	.word	0x40007000

08003670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003678:	2300      	movs	r3, #0
 800367a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e291      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8087 	beq.w	80037a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003694:	4b96      	ldr	r3, [pc, #600]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b04      	cmp	r3, #4
 800369e:	d00c      	beq.n	80036ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a0:	4b93      	ldr	r3, [pc, #588]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d112      	bne.n	80036d2 <HAL_RCC_OscConfig+0x62>
 80036ac:	4b90      	ldr	r3, [pc, #576]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036b8:	d10b      	bne.n	80036d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ba:	4b8d      	ldr	r3, [pc, #564]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d06c      	beq.n	80037a0 <HAL_RCC_OscConfig+0x130>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d168      	bne.n	80037a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e26b      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x7a>
 80036dc:	4b84      	ldr	r3, [pc, #528]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a83      	ldr	r2, [pc, #524]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e02e      	b.n	8003748 <HAL_RCC_OscConfig+0xd8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x9c>
 80036f2:	4b7f      	ldr	r3, [pc, #508]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7e      	ldr	r2, [pc, #504]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80036f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b7c      	ldr	r3, [pc, #496]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7b      	ldr	r2, [pc, #492]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003704:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e01d      	b.n	8003748 <HAL_RCC_OscConfig+0xd8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0xc0>
 8003716:	4b76      	ldr	r3, [pc, #472]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a75      	ldr	r2, [pc, #468]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b73      	ldr	r3, [pc, #460]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a72      	ldr	r2, [pc, #456]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0xd8>
 8003730:	4b6f      	ldr	r3, [pc, #444]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6e      	ldr	r2, [pc, #440]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b6c      	ldr	r3, [pc, #432]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6b      	ldr	r2, [pc, #428]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd fd94 	bl	800127c <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fd fd90 	bl	800127c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	@ 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e21f      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b61      	ldr	r3, [pc, #388]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0xe8>
 8003776:	e014      	b.n	80037a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fd80 	bl	800127c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003780:	f7fd fd7c 	bl	800127c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	@ 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e20b      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	4b57      	ldr	r3, [pc, #348]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x110>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d069      	beq.n	8003882 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ae:	4b50      	ldr	r3, [pc, #320]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ba:	4b4d      	ldr	r3, [pc, #308]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11c      	bne.n	8003800 <HAL_RCC_OscConfig+0x190>
 80037c6:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d116      	bne.n	8003800 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	4b47      	ldr	r3, [pc, #284]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_OscConfig+0x17a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d001      	beq.n	80037ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1df      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	4b41      	ldr	r3, [pc, #260]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	493d      	ldr	r1, [pc, #244]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	e040      	b.n	8003882 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d023      	beq.n	8003850 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003808:	4b39      	ldr	r3, [pc, #228]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a38      	ldr	r2, [pc, #224]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fd32 	bl	800127c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381c:	f7fd fd2e 	bl	800127c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e1bd      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382e:	4b30      	ldr	r3, [pc, #192]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	4b2d      	ldr	r3, [pc, #180]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4929      	ldr	r1, [pc, #164]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
 800384e:	e018      	b.n	8003882 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003850:	4b27      	ldr	r3, [pc, #156]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a26      	ldr	r2, [pc, #152]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd fd0e 	bl	800127c <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003864:	f7fd fd0a 	bl	800127c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e199      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d038      	beq.n	8003900 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d019      	beq.n	80038ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003896:	4b16      	ldr	r3, [pc, #88]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 8003898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800389a:	4a15      	ldr	r2, [pc, #84]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a2:	f7fd fceb 	bl	800127c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fd fce7 	bl	800127c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e176      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038bc:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80038be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x23a>
 80038c8:	e01a      	b.n	8003900 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ca:	4b09      	ldr	r3, [pc, #36]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80038cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ce:	4a08      	ldr	r2, [pc, #32]	@ (80038f0 <HAL_RCC_OscConfig+0x280>)
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd fcd1 	bl	800127c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038de:	f7fd fccd 	bl	800127c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d903      	bls.n	80038f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e15c      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
 80038f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	4b91      	ldr	r3, [pc, #580]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80038f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ee      	bne.n	80038de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a4 	beq.w	8003a56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	4b88      	ldr	r3, [pc, #544]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	4a87      	ldr	r2, [pc, #540]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	@ 0x40
 8003926:	4b85      	ldr	r3, [pc, #532]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003936:	4b82      	ldr	r3, [pc, #520]	@ (8003b40 <HAL_RCC_OscConfig+0x4d0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d118      	bne.n	8003974 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003942:	4b7f      	ldr	r3, [pc, #508]	@ (8003b40 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7e      	ldr	r2, [pc, #504]	@ (8003b40 <HAL_RCC_OscConfig+0x4d0>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800394c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394e:	f7fd fc95 	bl	800127c <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003956:	f7fd fc91 	bl	800127c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	@ 0x64
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e120      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003968:	4b75      	ldr	r3, [pc, #468]	@ (8003b40 <HAL_RCC_OscConfig+0x4d0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d106      	bne.n	800398a <HAL_RCC_OscConfig+0x31a>
 800397c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003980:	4a6e      	ldr	r2, [pc, #440]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6713      	str	r3, [r2, #112]	@ 0x70
 8003988:	e02d      	b.n	80039e6 <HAL_RCC_OscConfig+0x376>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x33c>
 8003992:	4b6a      	ldr	r3, [pc, #424]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003996:	4a69      	ldr	r2, [pc, #420]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	6713      	str	r3, [r2, #112]	@ 0x70
 800399e:	4b67      	ldr	r3, [pc, #412]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a2:	4a66      	ldr	r2, [pc, #408]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039aa:	e01c      	b.n	80039e6 <HAL_RCC_OscConfig+0x376>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d10c      	bne.n	80039ce <HAL_RCC_OscConfig+0x35e>
 80039b4:	4b61      	ldr	r3, [pc, #388]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b8:	4a60      	ldr	r2, [pc, #384]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c0:	4b5e      	ldr	r3, [pc, #376]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80039cc:	e00b      	b.n	80039e6 <HAL_RCC_OscConfig+0x376>
 80039ce:	4b5b      	ldr	r3, [pc, #364]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	4a5a      	ldr	r2, [pc, #360]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039da:	4b58      	ldr	r3, [pc, #352]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	4a57      	ldr	r2, [pc, #348]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d015      	beq.n	8003a1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fd fc45 	bl	800127c <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fd fc41 	bl	800127c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0ce      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ee      	beq.n	80039f6 <HAL_RCC_OscConfig+0x386>
 8003a18:	e014      	b.n	8003a44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fc2f 	bl	800127c <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a22:	f7fd fc2b 	bl	800127c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	4b40      	ldr	r3, [pc, #256]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ee      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80a4 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a60:	4b36      	ldr	r3, [pc, #216]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d06b      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d149      	bne.n	8003b08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a74:	4b31      	ldr	r3, [pc, #196]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a30      	ldr	r2, [pc, #192]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003a7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fbfc 	bl	800127c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fd fbf8 	bl	800127c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e087      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	4b28      	ldr	r3, [pc, #160]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	4313      	orrs	r3, r2
 8003acc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003ace:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ad2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fbcc 	bl	800127c <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fd fbc8 	bl	800127c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e057      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x478>
 8003b06:	e04f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b08:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd fbb2 	bl	800127c <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fd fbae 	bl	800127c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e03d      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2e:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <HAL_RCC_OscConfig+0x4cc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4ac>
 8003b3a:	e035      	b.n	8003ba8 <HAL_RCC_OscConfig+0x538>
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb4 <HAL_RCC_OscConfig+0x544>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d028      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d121      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d11a      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d111      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800

08003bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0d0      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d910      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b67      	ldr	r3, [pc, #412]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 020f 	bic.w	r2, r3, #15
 8003be6:	4965      	ldr	r1, [pc, #404]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a52      	ldr	r2, [pc, #328]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d040      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d115      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	4b41      	ldr	r3, [pc, #260]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e073      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06b      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4936      	ldr	r1, [pc, #216]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cac:	f7fd fae6 	bl	800127c <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fd fae2 	bl	800127c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e053      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b2d      	ldr	r3, [pc, #180]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d210      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b24      	ldr	r3, [pc, #144]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 020f 	bic.w	r2, r3, #15
 8003cf2:	4922      	ldr	r1, [pc, #136]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d36:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	@ (8003d84 <HAL_RCC_ClockConfig+0x1cc>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <HAL_RCC_ClockConfig+0x1d0>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <HAL_RCC_ClockConfig+0x1d4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fa42 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	080152bc 	.word	0x080152bc
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b090      	sub	sp, #64	@ 0x40
 8003d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003da0:	2300      	movs	r3, #0
 8003da2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da8:	4b59      	ldr	r3, [pc, #356]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d00d      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	f200 80a1 	bhi.w	8003efc <HAL_RCC_GetSysClockFreq+0x16c>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x3a>
 8003dc2:	e09b      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dc8:	e09b      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dca:	4b53      	ldr	r3, [pc, #332]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dce:	e098      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4b4f      	ldr	r3, [pc, #316]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003dda:	4b4d      	ldr	r3, [pc, #308]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d028      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	4b4a      	ldr	r3, [pc, #296]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	2200      	movs	r2, #0
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4b47      	ldr	r3, [pc, #284]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dfc:	fb03 f201 	mul.w	r2, r3, r1
 8003e00:	2300      	movs	r3, #0
 8003e02:	fb00 f303 	mul.w	r3, r0, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	4a43      	ldr	r2, [pc, #268]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e0a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e10:	460a      	mov	r2, r1
 8003e12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e16:	4413      	add	r3, r2
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	61fa      	str	r2, [r7, #28]
 8003e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e2a:	f7fc fa41 	bl	80002b0 <__aeabi_uldivmod>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4613      	mov	r3, r2
 8003e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e36:	e053      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e38:	4b35      	ldr	r3, [pc, #212]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	099b      	lsrs	r3, r3, #6
 8003e3e:	2200      	movs	r2, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	617a      	str	r2, [r7, #20]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e4a:	f04f 0b00 	mov.w	fp, #0
 8003e4e:	4652      	mov	r2, sl
 8003e50:	465b      	mov	r3, fp
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	0159      	lsls	r1, r3, #5
 8003e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e60:	0150      	lsls	r0, r2, #5
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	ebb2 080a 	subs.w	r8, r2, sl
 8003e6a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e82:	ebb2 0408 	subs.w	r4, r2, r8
 8003e86:	eb63 0509 	sbc.w	r5, r3, r9
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	00eb      	lsls	r3, r5, #3
 8003e94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e98:	00e2      	lsls	r2, r4, #3
 8003e9a:	4614      	mov	r4, r2
 8003e9c:	461d      	mov	r5, r3
 8003e9e:	eb14 030a 	adds.w	r3, r4, sl
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	eb45 030b 	adc.w	r3, r5, fp
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	028b      	lsls	r3, r1, #10
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	028a      	lsls	r2, r1, #10
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	60fa      	str	r2, [r7, #12]
 8003ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed4:	f7fc f9ec 	bl	80002b0 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4613      	mov	r3, r2
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	3301      	adds	r3, #1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ef0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3740      	adds	r7, #64	@ 0x40
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	017d7840 	.word	0x017d7840

08003f1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f20:	4b03      	ldr	r3, [pc, #12]	@ (8003f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000000 	.word	0x20000000

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f38:	f7ff fff0 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a9b      	lsrs	r3, r3, #10
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	080152cc 	.word	0x080152cc

08003f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f60:	f7ff ffdc 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0b5b      	lsrs	r3, r3, #13
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	@ (8003f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	080152cc 	.word	0x080152cc

08003f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d012      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fac:	4b69      	ldr	r3, [pc, #420]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a68      	ldr	r2, [pc, #416]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003fb6:	6093      	str	r3, [r2, #8]
 8003fb8:	4b66      	ldr	r3, [pc, #408]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	4964      	ldr	r1, [pc, #400]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d017      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fde:	4b5d      	ldr	r3, [pc, #372]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	4959      	ldr	r1, [pc, #356]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffc:	d101      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800401a:	4b4e      	ldr	r3, [pc, #312]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004020:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	494a      	ldr	r1, [pc, #296]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004038:	d101      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004046:	2301      	movs	r3, #1
 8004048:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 808b 	beq.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b3a      	ldr	r3, [pc, #232]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	4a39      	ldr	r2, [pc, #228]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004072:	6413      	str	r3, [r2, #64]	@ 0x40
 8004074:	4b37      	ldr	r3, [pc, #220]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004080:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a34      	ldr	r2, [pc, #208]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd f8f6 	bl	800127c <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fd f8f2 	bl	800127c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e357      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b2:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d035      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d02e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d0:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040f2:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040f8:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d114      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd f8ba 	bl	800127c <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fd f8b6 	bl	800127c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e319      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ee      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800413a:	d111      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004148:	4b04      	ldr	r3, [pc, #16]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800414a:	400b      	ands	r3, r1
 800414c:	4901      	ldr	r1, [pc, #4]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
 8004152:	e00b      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004154:	40023800 	.word	0x40023800
 8004158:	40007000 	.word	0x40007000
 800415c:	0ffffcff 	.word	0x0ffffcff
 8004160:	4baa      	ldr	r3, [pc, #680]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4aa9      	ldr	r2, [pc, #676]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	4ba7      	ldr	r3, [pc, #668]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	49a4      	ldr	r1, [pc, #656]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417a:	4313      	orrs	r3, r2
 800417c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d010      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800418a:	4ba0      	ldr	r3, [pc, #640]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004190:	4a9e      	ldr	r2, [pc, #632]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004196:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800419a:	4b9c      	ldr	r3, [pc, #624]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	4999      	ldr	r1, [pc, #612]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041b8:	4b94      	ldr	r3, [pc, #592]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041c6:	4991      	ldr	r1, [pc, #580]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041da:	4b8c      	ldr	r3, [pc, #560]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e8:	4988      	ldr	r1, [pc, #544]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041fc:	4b83      	ldr	r3, [pc, #524]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800420a:	4980      	ldr	r1, [pc, #512]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800421e:	4b7b      	ldr	r3, [pc, #492]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004224:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	4977      	ldr	r1, [pc, #476]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004240:	4b72      	ldr	r3, [pc, #456]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	496f      	ldr	r1, [pc, #444]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004262:	4b6a      	ldr	r3, [pc, #424]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004268:	f023 020c 	bic.w	r2, r3, #12
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004270:	4966      	ldr	r1, [pc, #408]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004284:	4b61      	ldr	r3, [pc, #388]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	495e      	ldr	r1, [pc, #376]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042a6:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b4:	4955      	ldr	r1, [pc, #340]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042c8:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	494d      	ldr	r1, [pc, #308]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042ea:	4b48      	ldr	r3, [pc, #288]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	4944      	ldr	r1, [pc, #272]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800430c:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004312:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431a:	493c      	ldr	r1, [pc, #240]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800432e:	4b37      	ldr	r3, [pc, #220]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004334:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433c:	4933      	ldr	r1, [pc, #204]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004350:	4b2e      	ldr	r3, [pc, #184]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800435e:	492b      	ldr	r1, [pc, #172]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004372:	4b26      	ldr	r3, [pc, #152]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004378:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004380:	4922      	ldr	r1, [pc, #136]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004390:	d101      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b2:	4b16      	ldr	r3, [pc, #88]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c0:	4912      	ldr	r1, [pc, #72]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043d4:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e4:	4909      	ldr	r1, [pc, #36]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d006      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80d9 	beq.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004400:	4b02      	ldr	r3, [pc, #8]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a01      	ldr	r2, [pc, #4]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004406:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800440a:	e001      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800440c:	40023800 	.word	0x40023800
 8004410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004412:	f7fc ff33 	bl	800127c <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004418:	e008      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800441a:	f7fc ff2f 	bl	800127c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b64      	cmp	r3, #100	@ 0x64
 8004426:	d901      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e194      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800442c:	4b6c      	ldr	r3, [pc, #432]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d021      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004448:	2b00      	cmp	r3, #0
 800444a:	d11d      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800444c:	4b64      	ldr	r3, [pc, #400]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800445a:	4b61      	ldr	r3, [pc, #388]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004460:	0e1b      	lsrs	r3, r3, #24
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	019a      	lsls	r2, r3, #6
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	431a      	orrs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	071b      	lsls	r3, r3, #28
 8004480:	4957      	ldr	r1, [pc, #348]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02e      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b2:	d129      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044b4:	4b4a      	ldr	r3, [pc, #296]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044c2:	4b47      	ldr	r3, [pc, #284]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c8:	0f1b      	lsrs	r3, r3, #28
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	019a      	lsls	r2, r3, #6
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	041b      	lsls	r3, r3, #16
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	431a      	orrs	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	071b      	lsls	r3, r3, #28
 80044e8:	493d      	ldr	r1, [pc, #244]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044f0:	4b3b      	ldr	r3, [pc, #236]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f6:	f023 021f 	bic.w	r2, r3, #31
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	3b01      	subs	r3, #1
 8004500:	4937      	ldr	r1, [pc, #220]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01d      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004514:	4b32      	ldr	r3, [pc, #200]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451a:	0e1b      	lsrs	r3, r3, #24
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004522:	4b2f      	ldr	r3, [pc, #188]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004528:	0f1b      	lsrs	r3, r3, #28
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	019a      	lsls	r2, r3, #6
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	071b      	lsls	r3, r3, #28
 8004548:	4925      	ldr	r1, [pc, #148]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d011      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	019a      	lsls	r2, r3, #6
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	061b      	lsls	r3, r3, #24
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	071b      	lsls	r3, r3, #28
 8004578:	4919      	ldr	r1, [pc, #100]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004580:	4b17      	ldr	r3, [pc, #92]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a16      	ldr	r2, [pc, #88]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004586:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800458a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fc fe76 	bl	800127c <HAL_GetTick>
 8004590:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004594:	f7fc fe72 	bl	800127c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0d7      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045a6:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	f040 80cd 	bne.w	8004754 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045ba:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a08      	ldr	r2, [pc, #32]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c6:	f7fc fe59 	bl	800127c <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045ce:	f7fc fe55 	bl	800127c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b64      	cmp	r3, #100	@ 0x64
 80045da:	d903      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0ba      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80045e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045f0:	d0ed      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02e      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d12a      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800461a:	4b51      	ldr	r3, [pc, #324]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004628:	4b4d      	ldr	r3, [pc, #308]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	0f1b      	lsrs	r3, r3, #28
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	019a      	lsls	r2, r3, #6
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	431a      	orrs	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	071b      	lsls	r3, r3, #28
 800464e:	4944      	ldr	r1, [pc, #272]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004656:	4b42      	ldr	r3, [pc, #264]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800465c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	493d      	ldr	r1, [pc, #244]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004684:	d11d      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004686:	4b36      	ldr	r3, [pc, #216]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004694:	4b32      	ldr	r3, [pc, #200]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	0f1b      	lsrs	r3, r3, #28
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	019a      	lsls	r2, r3, #6
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	071b      	lsls	r3, r3, #28
 80046ba:	4929      	ldr	r1, [pc, #164]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d028      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046ce:	4b24      	ldr	r3, [pc, #144]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046dc:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	0c1b      	lsrs	r3, r3, #16
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	019a      	lsls	r2, r3, #6
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	431a      	orrs	r2, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	061b      	lsls	r3, r3, #24
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	071b      	lsls	r3, r3, #28
 8004702:	4917      	ldr	r1, [pc, #92]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800470a:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004710:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	4911      	ldr	r1, [pc, #68]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004720:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0e      	ldr	r2, [pc, #56]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800472a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fc fda6 	bl	800127c <HAL_GetTick>
 8004730:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004734:	f7fc fda2 	bl	800127c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	@ 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e007      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004746:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800474e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004752:	d1ef      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800

08004764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e040      	b.n	80047f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc fa6e 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	@ 0x24
 8004790:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fe22 	bl	80053f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fbbb 	bl	8004f2c <UART_SetConfig>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e01b      	b.n	80047f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fea1 	bl	8005538 <UART_CheckIdleState>
 80047f6:	4603      	mov	r3, r0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	@ 0x28
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004814:	2b20      	cmp	r3, #32
 8004816:	d177      	bne.n	8004908 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_UART_Transmit+0x24>
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e070      	b.n	800490a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2221      	movs	r2, #33	@ 0x21
 8004834:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004836:	f7fc fd21 	bl	800127c <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	88fa      	ldrh	r2, [r7, #6]
 8004840:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004854:	d108      	bne.n	8004868 <HAL_UART_Transmit+0x68>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e003      	b.n	8004870 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004870:	e02f      	b.n	80048d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2180      	movs	r1, #128	@ 0x80
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 feb2 	bl	80055e6 <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e03b      	b.n	800490a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	3302      	adds	r3, #2
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e007      	b.n	80048c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3301      	adds	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1c9      	bne.n	8004872 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2140      	movs	r1, #64	@ 0x40
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fe7c 	bl	80055e6 <UART_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e005      	b.n	800490a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b0ba      	sub	sp, #232	@ 0xe8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800493a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800493e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004942:	4013      	ands	r3, r2
 8004944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d115      	bne.n	800497c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00f      	beq.n	800497c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d009      	beq.n	800497c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 82b1 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	4798      	blx	r3
      }
      return;
 800497a:	e2ab      	b.n	8004ed4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800497c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8117 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004996:	4b85      	ldr	r3, [pc, #532]	@ (8004bac <HAL_UART_IRQHandler+0x298>)
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 810a 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d011      	beq.n	80049d0 <HAL_UART_IRQHandler+0xbc>
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00b      	beq.n	80049d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2201      	movs	r2, #1
 80049be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d011      	beq.n	8004a00 <HAL_UART_IRQHandler+0xec>
 80049dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2202      	movs	r2, #2
 80049ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049f6:	f043 0204 	orr.w	r2, r3, #4
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d011      	beq.n	8004a30 <HAL_UART_IRQHandler+0x11c>
 8004a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00b      	beq.n	8004a30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a26:	f043 0202 	orr.w	r2, r3, #2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d017      	beq.n	8004a6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a62:	f043 0208 	orr.w	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <HAL_UART_IRQHandler+0x18a>
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8217 	beq.w	8004ed8 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae6:	2b40      	cmp	r3, #64	@ 0x40
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d04f      	beq.n	8004b96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fde2 	bl	80056c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b06:	2b40      	cmp	r3, #64	@ 0x40
 8004b08:	d141      	bne.n	8004b8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1d9      	bne.n	8004b0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d013      	beq.n	8004b86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b62:	4a13      	ldr	r2, [pc, #76]	@ (8004bb0 <HAL_UART_IRQHandler+0x29c>)
 8004b64:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fc fed8 	bl	8001920 <HAL_DMA_Abort_IT>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d017      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b80:	4610      	mov	r0, r2
 8004b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	e00f      	b.n	8004ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9ba 	bl	8004f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	e00b      	b.n	8004ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f9b6 	bl	8004f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b94:	e007      	b.n	8004ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f9b2 	bl	8004f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004ba4:	e198      	b.n	8004ed8 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba6:	bf00      	nop
    return;
 8004ba8:	e196      	b.n	8004ed8 <HAL_UART_IRQHandler+0x5c4>
 8004baa:	bf00      	nop
 8004bac:	04000120 	.word	0x04000120
 8004bb0:	08005789 	.word	0x08005789

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	f040 8166 	bne.w	8004e8a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 815f 	beq.w	8004e8a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8158 	beq.w	8004e8a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2210      	movs	r2, #16
 8004be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	f040 80d0 	bne.w	8004d92 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80ab 	beq.w	8004d5e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c12:	429a      	cmp	r2, r3
 8004c14:	f080 80a3 	bcs.w	8004d5e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2c:	f000 8086 	beq.w	8004d3c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1da      	bne.n	8004c30 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3308      	adds	r3, #8
 8004c80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e1      	bne.n	8004c7a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3308      	adds	r3, #8
 8004cbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ce0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e3      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d0c:	f023 0310 	bic.w	r3, r3, #16
 8004d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e4      	bne.n	8004cfc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fd82 	bl	8001840 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f8dc 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d5c:	e0be      	b.n	8004edc <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	f040 80b7 	bne.w	8004edc <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d78:	f040 80b0 	bne.w	8004edc <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8c2 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
      return;
 8004d90:	e0a4      	b.n	8004edc <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8096 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8004db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8091 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e4      	bne.n	8004dbe <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	623b      	str	r3, [r7, #32]
   return(result);
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3308      	adds	r3, #8
 8004e14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e18:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e3      	bne.n	8004df4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f023 0310 	bic.w	r3, r3, #16
 8004e54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	69b9      	ldr	r1, [r7, #24]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e4      	bne.n	8004e40 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f846 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e88:	e02a      	b.n	8004ee0 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00e      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01c      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
    }
    return;
 8004eb2:	e017      	b.n	8004ee4 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d012      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x5d2>
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00c      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fc6d 	bl	80057ac <UART_EndTransmit_IT>
    return;
 8004ed2:	e008      	b.n	8004ee6 <HAL_UART_IRQHandler+0x5d2>
      return;
 8004ed4:	bf00      	nop
 8004ed6:	e006      	b.n	8004ee6 <HAL_UART_IRQHandler+0x5d2>
    return;
 8004ed8:	bf00      	nop
 8004eda:	e004      	b.n	8004ee6 <HAL_UART_IRQHandler+0x5d2>
      return;
 8004edc:	bf00      	nop
 8004ede:	e002      	b.n	8004ee6 <HAL_UART_IRQHandler+0x5d2>
      return;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <HAL_UART_IRQHandler+0x5d2>
    return;
 8004ee4:	bf00      	nop
  }

}
 8004ee6:	37e8      	adds	r7, #232	@ 0xe8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4ba6      	ldr	r3, [pc, #664]	@ (80051f0 <UART_SetConfig+0x2c4>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a94      	ldr	r2, [pc, #592]	@ (80051f4 <UART_SetConfig+0x2c8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d120      	bne.n	8004fea <UART_SetConfig+0xbe>
 8004fa8:	4b93      	ldr	r3, [pc, #588]	@ (80051f8 <UART_SetConfig+0x2cc>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d816      	bhi.n	8004fe4 <UART_SetConfig+0xb8>
 8004fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fbc <UART_SetConfig+0x90>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fd3 	.word	0x08004fd3
 8004fc8:	08004fdf 	.word	0x08004fdf
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e150      	b.n	8005274 <UART_SetConfig+0x348>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e14d      	b.n	8005274 <UART_SetConfig+0x348>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e14a      	b.n	8005274 <UART_SetConfig+0x348>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e147      	b.n	8005274 <UART_SetConfig+0x348>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e144      	b.n	8005274 <UART_SetConfig+0x348>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a83      	ldr	r2, [pc, #524]	@ (80051fc <UART_SetConfig+0x2d0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d132      	bne.n	800505a <UART_SetConfig+0x12e>
 8004ff4:	4b80      	ldr	r3, [pc, #512]	@ (80051f8 <UART_SetConfig+0x2cc>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d828      	bhi.n	8005054 <UART_SetConfig+0x128>
 8005002:	a201      	add	r2, pc, #4	@ (adr r2, 8005008 <UART_SetConfig+0xdc>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800503d 	.word	0x0800503d
 800500c:	08005055 	.word	0x08005055
 8005010:	08005055 	.word	0x08005055
 8005014:	08005055 	.word	0x08005055
 8005018:	08005049 	.word	0x08005049
 800501c:	08005055 	.word	0x08005055
 8005020:	08005055 	.word	0x08005055
 8005024:	08005055 	.word	0x08005055
 8005028:	08005043 	.word	0x08005043
 800502c:	08005055 	.word	0x08005055
 8005030:	08005055 	.word	0x08005055
 8005034:	08005055 	.word	0x08005055
 8005038:	0800504f 	.word	0x0800504f
 800503c:	2300      	movs	r3, #0
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e118      	b.n	8005274 <UART_SetConfig+0x348>
 8005042:	2302      	movs	r3, #2
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e115      	b.n	8005274 <UART_SetConfig+0x348>
 8005048:	2304      	movs	r3, #4
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e112      	b.n	8005274 <UART_SetConfig+0x348>
 800504e:	2308      	movs	r3, #8
 8005050:	77fb      	strb	r3, [r7, #31]
 8005052:	e10f      	b.n	8005274 <UART_SetConfig+0x348>
 8005054:	2310      	movs	r3, #16
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e10c      	b.n	8005274 <UART_SetConfig+0x348>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a68      	ldr	r2, [pc, #416]	@ (8005200 <UART_SetConfig+0x2d4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d120      	bne.n	80050a6 <UART_SetConfig+0x17a>
 8005064:	4b64      	ldr	r3, [pc, #400]	@ (80051f8 <UART_SetConfig+0x2cc>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800506e:	2b30      	cmp	r3, #48	@ 0x30
 8005070:	d013      	beq.n	800509a <UART_SetConfig+0x16e>
 8005072:	2b30      	cmp	r3, #48	@ 0x30
 8005074:	d814      	bhi.n	80050a0 <UART_SetConfig+0x174>
 8005076:	2b20      	cmp	r3, #32
 8005078:	d009      	beq.n	800508e <UART_SetConfig+0x162>
 800507a:	2b20      	cmp	r3, #32
 800507c:	d810      	bhi.n	80050a0 <UART_SetConfig+0x174>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <UART_SetConfig+0x15c>
 8005082:	2b10      	cmp	r3, #16
 8005084:	d006      	beq.n	8005094 <UART_SetConfig+0x168>
 8005086:	e00b      	b.n	80050a0 <UART_SetConfig+0x174>
 8005088:	2300      	movs	r3, #0
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e0f2      	b.n	8005274 <UART_SetConfig+0x348>
 800508e:	2302      	movs	r3, #2
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e0ef      	b.n	8005274 <UART_SetConfig+0x348>
 8005094:	2304      	movs	r3, #4
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e0ec      	b.n	8005274 <UART_SetConfig+0x348>
 800509a:	2308      	movs	r3, #8
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e0e9      	b.n	8005274 <UART_SetConfig+0x348>
 80050a0:	2310      	movs	r3, #16
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e0e6      	b.n	8005274 <UART_SetConfig+0x348>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a56      	ldr	r2, [pc, #344]	@ (8005204 <UART_SetConfig+0x2d8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d120      	bne.n	80050f2 <UART_SetConfig+0x1c6>
 80050b0:	4b51      	ldr	r3, [pc, #324]	@ (80051f8 <UART_SetConfig+0x2cc>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80050bc:	d013      	beq.n	80050e6 <UART_SetConfig+0x1ba>
 80050be:	2bc0      	cmp	r3, #192	@ 0xc0
 80050c0:	d814      	bhi.n	80050ec <UART_SetConfig+0x1c0>
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d009      	beq.n	80050da <UART_SetConfig+0x1ae>
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d810      	bhi.n	80050ec <UART_SetConfig+0x1c0>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <UART_SetConfig+0x1a8>
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	d006      	beq.n	80050e0 <UART_SetConfig+0x1b4>
 80050d2:	e00b      	b.n	80050ec <UART_SetConfig+0x1c0>
 80050d4:	2300      	movs	r3, #0
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e0cc      	b.n	8005274 <UART_SetConfig+0x348>
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e0c9      	b.n	8005274 <UART_SetConfig+0x348>
 80050e0:	2304      	movs	r3, #4
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e0c6      	b.n	8005274 <UART_SetConfig+0x348>
 80050e6:	2308      	movs	r3, #8
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e0c3      	b.n	8005274 <UART_SetConfig+0x348>
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e0c0      	b.n	8005274 <UART_SetConfig+0x348>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a44      	ldr	r2, [pc, #272]	@ (8005208 <UART_SetConfig+0x2dc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d125      	bne.n	8005148 <UART_SetConfig+0x21c>
 80050fc:	4b3e      	ldr	r3, [pc, #248]	@ (80051f8 <UART_SetConfig+0x2cc>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800510a:	d017      	beq.n	800513c <UART_SetConfig+0x210>
 800510c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005110:	d817      	bhi.n	8005142 <UART_SetConfig+0x216>
 8005112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005116:	d00b      	beq.n	8005130 <UART_SetConfig+0x204>
 8005118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800511c:	d811      	bhi.n	8005142 <UART_SetConfig+0x216>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <UART_SetConfig+0x1fe>
 8005122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005126:	d006      	beq.n	8005136 <UART_SetConfig+0x20a>
 8005128:	e00b      	b.n	8005142 <UART_SetConfig+0x216>
 800512a:	2300      	movs	r3, #0
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e0a1      	b.n	8005274 <UART_SetConfig+0x348>
 8005130:	2302      	movs	r3, #2
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e09e      	b.n	8005274 <UART_SetConfig+0x348>
 8005136:	2304      	movs	r3, #4
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e09b      	b.n	8005274 <UART_SetConfig+0x348>
 800513c:	2308      	movs	r3, #8
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e098      	b.n	8005274 <UART_SetConfig+0x348>
 8005142:	2310      	movs	r3, #16
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e095      	b.n	8005274 <UART_SetConfig+0x348>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2f      	ldr	r2, [pc, #188]	@ (800520c <UART_SetConfig+0x2e0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d125      	bne.n	800519e <UART_SetConfig+0x272>
 8005152:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <UART_SetConfig+0x2cc>)
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005158:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800515c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005160:	d017      	beq.n	8005192 <UART_SetConfig+0x266>
 8005162:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005166:	d817      	bhi.n	8005198 <UART_SetConfig+0x26c>
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800516c:	d00b      	beq.n	8005186 <UART_SetConfig+0x25a>
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005172:	d811      	bhi.n	8005198 <UART_SetConfig+0x26c>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <UART_SetConfig+0x254>
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517c:	d006      	beq.n	800518c <UART_SetConfig+0x260>
 800517e:	e00b      	b.n	8005198 <UART_SetConfig+0x26c>
 8005180:	2301      	movs	r3, #1
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e076      	b.n	8005274 <UART_SetConfig+0x348>
 8005186:	2302      	movs	r3, #2
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e073      	b.n	8005274 <UART_SetConfig+0x348>
 800518c:	2304      	movs	r3, #4
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e070      	b.n	8005274 <UART_SetConfig+0x348>
 8005192:	2308      	movs	r3, #8
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e06d      	b.n	8005274 <UART_SetConfig+0x348>
 8005198:	2310      	movs	r3, #16
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e06a      	b.n	8005274 <UART_SetConfig+0x348>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005210 <UART_SetConfig+0x2e4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d138      	bne.n	800521a <UART_SetConfig+0x2ee>
 80051a8:	4b13      	ldr	r3, [pc, #76]	@ (80051f8 <UART_SetConfig+0x2cc>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051b6:	d017      	beq.n	80051e8 <UART_SetConfig+0x2bc>
 80051b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051bc:	d82a      	bhi.n	8005214 <UART_SetConfig+0x2e8>
 80051be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c2:	d00b      	beq.n	80051dc <UART_SetConfig+0x2b0>
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c8:	d824      	bhi.n	8005214 <UART_SetConfig+0x2e8>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <UART_SetConfig+0x2aa>
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d2:	d006      	beq.n	80051e2 <UART_SetConfig+0x2b6>
 80051d4:	e01e      	b.n	8005214 <UART_SetConfig+0x2e8>
 80051d6:	2300      	movs	r3, #0
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e04b      	b.n	8005274 <UART_SetConfig+0x348>
 80051dc:	2302      	movs	r3, #2
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e048      	b.n	8005274 <UART_SetConfig+0x348>
 80051e2:	2304      	movs	r3, #4
 80051e4:	77fb      	strb	r3, [r7, #31]
 80051e6:	e045      	b.n	8005274 <UART_SetConfig+0x348>
 80051e8:	2308      	movs	r3, #8
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e042      	b.n	8005274 <UART_SetConfig+0x348>
 80051ee:	bf00      	nop
 80051f0:	efff69f3 	.word	0xefff69f3
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40004400 	.word	0x40004400
 8005200:	40004800 	.word	0x40004800
 8005204:	40004c00 	.word	0x40004c00
 8005208:	40005000 	.word	0x40005000
 800520c:	40011400 	.word	0x40011400
 8005210:	40007800 	.word	0x40007800
 8005214:	2310      	movs	r3, #16
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e02c      	b.n	8005274 <UART_SetConfig+0x348>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a72      	ldr	r2, [pc, #456]	@ (80053e8 <UART_SetConfig+0x4bc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d125      	bne.n	8005270 <UART_SetConfig+0x344>
 8005224:	4b71      	ldr	r3, [pc, #452]	@ (80053ec <UART_SetConfig+0x4c0>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800522e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005232:	d017      	beq.n	8005264 <UART_SetConfig+0x338>
 8005234:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005238:	d817      	bhi.n	800526a <UART_SetConfig+0x33e>
 800523a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800523e:	d00b      	beq.n	8005258 <UART_SetConfig+0x32c>
 8005240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005244:	d811      	bhi.n	800526a <UART_SetConfig+0x33e>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <UART_SetConfig+0x326>
 800524a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800524e:	d006      	beq.n	800525e <UART_SetConfig+0x332>
 8005250:	e00b      	b.n	800526a <UART_SetConfig+0x33e>
 8005252:	2300      	movs	r3, #0
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e00d      	b.n	8005274 <UART_SetConfig+0x348>
 8005258:	2302      	movs	r3, #2
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e00a      	b.n	8005274 <UART_SetConfig+0x348>
 800525e:	2304      	movs	r3, #4
 8005260:	77fb      	strb	r3, [r7, #31]
 8005262:	e007      	b.n	8005274 <UART_SetConfig+0x348>
 8005264:	2308      	movs	r3, #8
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e004      	b.n	8005274 <UART_SetConfig+0x348>
 800526a:	2310      	movs	r3, #16
 800526c:	77fb      	strb	r3, [r7, #31]
 800526e:	e001      	b.n	8005274 <UART_SetConfig+0x348>
 8005270:	2310      	movs	r3, #16
 8005272:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527c:	d15b      	bne.n	8005336 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d828      	bhi.n	80052d6 <UART_SetConfig+0x3aa>
 8005284:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <UART_SetConfig+0x360>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b9 	.word	0x080052b9
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052d7 	.word	0x080052d7
 800529c:	080052c7 	.word	0x080052c7
 80052a0:	080052d7 	.word	0x080052d7
 80052a4:	080052d7 	.word	0x080052d7
 80052a8:	080052d7 	.word	0x080052d7
 80052ac:	080052cf 	.word	0x080052cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fe fe40 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 80052b4:	61b8      	str	r0, [r7, #24]
        break;
 80052b6:	e013      	b.n	80052e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7fe fe50 	bl	8003f5c <HAL_RCC_GetPCLK2Freq>
 80052bc:	61b8      	str	r0, [r7, #24]
        break;
 80052be:	e00f      	b.n	80052e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c0:	4b4b      	ldr	r3, [pc, #300]	@ (80053f0 <UART_SetConfig+0x4c4>)
 80052c2:	61bb      	str	r3, [r7, #24]
        break;
 80052c4:	e00c      	b.n	80052e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f7fe fd63 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 80052ca:	61b8      	str	r0, [r7, #24]
        break;
 80052cc:	e008      	b.n	80052e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052d2:	61bb      	str	r3, [r7, #24]
        break;
 80052d4:	e004      	b.n	80052e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	77bb      	strb	r3, [r7, #30]
        break;
 80052de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d074      	beq.n	80053d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	005a      	lsls	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	441a      	add	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b0f      	cmp	r3, #15
 8005300:	d916      	bls.n	8005330 <UART_SetConfig+0x404>
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005308:	d212      	bcs.n	8005330 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f023 030f 	bic.w	r3, r3, #15
 8005312:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	b29b      	uxth	r3, r3
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	b29a      	uxth	r2, r3
 8005320:	89fb      	ldrh	r3, [r7, #14]
 8005322:	4313      	orrs	r3, r2
 8005324:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	89fa      	ldrh	r2, [r7, #14]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e04f      	b.n	80053d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	77bb      	strb	r3, [r7, #30]
 8005334:	e04c      	b.n	80053d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005336:	7ffb      	ldrb	r3, [r7, #31]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d828      	bhi.n	800538e <UART_SetConfig+0x462>
 800533c:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <UART_SetConfig+0x418>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005369 	.word	0x08005369
 8005348:	08005371 	.word	0x08005371
 800534c:	08005379 	.word	0x08005379
 8005350:	0800538f 	.word	0x0800538f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800538f 	.word	0x0800538f
 800535c:	0800538f 	.word	0x0800538f
 8005360:	0800538f 	.word	0x0800538f
 8005364:	08005387 	.word	0x08005387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005368:	f7fe fde4 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 800536c:	61b8      	str	r0, [r7, #24]
        break;
 800536e:	e013      	b.n	8005398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7fe fdf4 	bl	8003f5c <HAL_RCC_GetPCLK2Freq>
 8005374:	61b8      	str	r0, [r7, #24]
        break;
 8005376:	e00f      	b.n	8005398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005378:	4b1d      	ldr	r3, [pc, #116]	@ (80053f0 <UART_SetConfig+0x4c4>)
 800537a:	61bb      	str	r3, [r7, #24]
        break;
 800537c:	e00c      	b.n	8005398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537e:	f7fe fd07 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8005382:	61b8      	str	r0, [r7, #24]
        break;
 8005384:	e008      	b.n	8005398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800538a:	61bb      	str	r3, [r7, #24]
        break;
 800538c:	e004      	b.n	8005398 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	77bb      	strb	r3, [r7, #30]
        break;
 8005396:	bf00      	nop
    }

    if (pclk != 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d018      	beq.n	80053d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	085a      	lsrs	r2, r3, #1
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	441a      	add	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b0f      	cmp	r3, #15
 80053b6:	d909      	bls.n	80053cc <UART_SetConfig+0x4a0>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053be:	d205      	bcs.n	80053cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	e001      	b.n	80053d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40007c00 	.word	0x40007c00
 80053ec:	40023800 	.word	0x40023800
 80053f0:	00f42400 	.word	0x00f42400

080053f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01a      	beq.n	800550a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054f2:	d10a      	bne.n	800550a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	605a      	str	r2, [r3, #4]
  }
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	@ 0x30
 800553c:	af02      	add	r7, sp, #8
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005548:	f7fb fe98 	bl	800127c <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b08      	cmp	r3, #8
 800555a:	d12e      	bne.n	80055ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800555c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	2200      	movs	r2, #0
 8005566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f83b 	bl	80055e6 <UART_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d021      	beq.n	80055ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	60fb      	str	r3, [r7, #12]
   return(result);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800558a:	623b      	str	r3, [r7, #32]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	617b      	str	r3, [r7, #20]
   return(result);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e6      	bne.n	8005576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e011      	b.n	80055de <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3728      	adds	r7, #40	@ 0x28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f6:	e04f      	b.n	8005698 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055fe:	d04b      	beq.n	8005698 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005600:	f7fb fe3c 	bl	800127c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	429a      	cmp	r2, r3
 800560e:	d302      	bcc.n	8005616 <UART_WaitOnFlagUntilTimeout+0x30>
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e04e      	b.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d037      	beq.n	8005698 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b80      	cmp	r3, #128	@ 0x80
 800562c:	d034      	beq.n	8005698 <UART_WaitOnFlagUntilTimeout+0xb2>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	d031      	beq.n	8005698 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b08      	cmp	r3, #8
 8005640:	d110      	bne.n	8005664 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2208      	movs	r2, #8
 8005648:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f838 	bl	80056c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2208      	movs	r2, #8
 8005654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e029      	b.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005672:	d111      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800567c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f81e 	bl	80056c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e00f      	b.n	80056b8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69da      	ldr	r2, [r3, #28]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4013      	ands	r3, r2
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d0a0      	beq.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b095      	sub	sp, #84	@ 0x54
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e6      	bne.n	80056c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	61fb      	str	r3, [r7, #28]
   return(result);
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3308      	adds	r3, #8
 8005718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800571a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e5      	bne.n	80056fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005732:	2b01      	cmp	r3, #1
 8005734:	d118      	bne.n	8005768 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	60bb      	str	r3, [r7, #8]
   return(result);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f023 0310 	bic.w	r3, r3, #16
 800574a:	647b      	str	r3, [r7, #68]	@ 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6979      	ldr	r1, [r7, #20]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	613b      	str	r3, [r7, #16]
   return(result);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e6      	bne.n	8005736 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800577c:	bf00      	nop
 800577e:	3754      	adds	r7, #84	@ 0x54
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f7ff fbae 	bl	8004f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6979      	ldr	r1, [r7, #20]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	613b      	str	r3, [r7, #16]
   return(result);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e6      	bne.n	80057b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fb7a 	bl	8004eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f8:	bf00      	nop
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8005806:	4b87      	ldr	r3, [pc, #540]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005808:	220a      	movs	r2, #10
 800580a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800580c:	4b85      	ldr	r3, [pc, #532]	@ (8005a24 <MX_LWIP_Init+0x224>)
 800580e:	2200      	movs	r2, #0
 8005810:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005812:	4b84      	ldr	r3, [pc, #528]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005814:	2201      	movs	r2, #1
 8005816:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8005818:	4b82      	ldr	r3, [pc, #520]	@ (8005a24 <MX_LWIP_Init+0x224>)
 800581a:	2264      	movs	r2, #100	@ 0x64
 800581c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800581e:	4b82      	ldr	r3, [pc, #520]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005820:	22ff      	movs	r2, #255	@ 0xff
 8005822:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005824:	4b80      	ldr	r3, [pc, #512]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005826:	22ff      	movs	r2, #255	@ 0xff
 8005828:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800582a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a28 <MX_LWIP_Init+0x228>)
 800582c:	22ff      	movs	r2, #255	@ 0xff
 800582e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005830:	4b7d      	ldr	r3, [pc, #500]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005832:	2200      	movs	r2, #0
 8005834:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8005836:	4b7d      	ldr	r3, [pc, #500]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 8005838:	220a      	movs	r2, #10
 800583a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800583c:	4b7b      	ldr	r3, [pc, #492]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 800583e:	2200      	movs	r2, #0
 8005840:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005842:	4b7a      	ldr	r3, [pc, #488]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 8005844:	2201      	movs	r2, #1
 8005846:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 8005848:	4b78      	ldr	r3, [pc, #480]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 800584a:	2265      	movs	r2, #101	@ 0x65
 800584c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800584e:	f000 fd6a 	bl	8006326 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005852:	4b74      	ldr	r3, [pc, #464]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	061a      	lsls	r2, r3, #24
 8005858:	4b72      	ldr	r3, [pc, #456]	@ (8005a24 <MX_LWIP_Init+0x224>)
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	431a      	orrs	r2, r3
 8005860:	4b70      	ldr	r3, [pc, #448]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005862:	789b      	ldrb	r3, [r3, #2]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	4313      	orrs	r3, r2
 8005868:	4a6e      	ldr	r2, [pc, #440]	@ (8005a24 <MX_LWIP_Init+0x224>)
 800586a:	78d2      	ldrb	r2, [r2, #3]
 800586c:	4313      	orrs	r3, r2
 800586e:	061a      	lsls	r2, r3, #24
 8005870:	4b6c      	ldr	r3, [pc, #432]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	0619      	lsls	r1, r3, #24
 8005876:	4b6b      	ldr	r3, [pc, #428]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	041b      	lsls	r3, r3, #16
 800587c:	4319      	orrs	r1, r3
 800587e:	4b69      	ldr	r3, [pc, #420]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005880:	789b      	ldrb	r3, [r3, #2]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	430b      	orrs	r3, r1
 8005886:	4967      	ldr	r1, [pc, #412]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005888:	78c9      	ldrb	r1, [r1, #3]
 800588a:	430b      	orrs	r3, r1
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005892:	431a      	orrs	r2, r3
 8005894:	4b63      	ldr	r3, [pc, #396]	@ (8005a24 <MX_LWIP_Init+0x224>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	0619      	lsls	r1, r3, #24
 800589a:	4b62      	ldr	r3, [pc, #392]	@ (8005a24 <MX_LWIP_Init+0x224>)
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	041b      	lsls	r3, r3, #16
 80058a0:	4319      	orrs	r1, r3
 80058a2:	4b60      	ldr	r3, [pc, #384]	@ (8005a24 <MX_LWIP_Init+0x224>)
 80058a4:	789b      	ldrb	r3, [r3, #2]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	430b      	orrs	r3, r1
 80058aa:	495e      	ldr	r1, [pc, #376]	@ (8005a24 <MX_LWIP_Init+0x224>)
 80058ac:	78c9      	ldrb	r1, [r1, #3]
 80058ae:	430b      	orrs	r3, r1
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80058b6:	431a      	orrs	r2, r3
 80058b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a24 <MX_LWIP_Init+0x224>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	0619      	lsls	r1, r3, #24
 80058be:	4b59      	ldr	r3, [pc, #356]	@ (8005a24 <MX_LWIP_Init+0x224>)
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	4319      	orrs	r1, r3
 80058c6:	4b57      	ldr	r3, [pc, #348]	@ (8005a24 <MX_LWIP_Init+0x224>)
 80058c8:	789b      	ldrb	r3, [r3, #2]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	430b      	orrs	r3, r1
 80058ce:	4955      	ldr	r1, [pc, #340]	@ (8005a24 <MX_LWIP_Init+0x224>)
 80058d0:	78c9      	ldrb	r1, [r1, #3]
 80058d2:	430b      	orrs	r3, r1
 80058d4:	0e1b      	lsrs	r3, r3, #24
 80058d6:	4313      	orrs	r3, r2
 80058d8:	4a55      	ldr	r2, [pc, #340]	@ (8005a30 <MX_LWIP_Init+0x230>)
 80058da:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80058dc:	4b52      	ldr	r3, [pc, #328]	@ (8005a28 <MX_LWIP_Init+0x228>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	061a      	lsls	r2, r3, #24
 80058e2:	4b51      	ldr	r3, [pc, #324]	@ (8005a28 <MX_LWIP_Init+0x228>)
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	431a      	orrs	r2, r3
 80058ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005a28 <MX_LWIP_Init+0x228>)
 80058ec:	789b      	ldrb	r3, [r3, #2]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	4313      	orrs	r3, r2
 80058f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005a28 <MX_LWIP_Init+0x228>)
 80058f4:	78d2      	ldrb	r2, [r2, #3]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	061a      	lsls	r2, r3, #24
 80058fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005a28 <MX_LWIP_Init+0x228>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	0619      	lsls	r1, r3, #24
 8005900:	4b49      	ldr	r3, [pc, #292]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	041b      	lsls	r3, r3, #16
 8005906:	4319      	orrs	r1, r3
 8005908:	4b47      	ldr	r3, [pc, #284]	@ (8005a28 <MX_LWIP_Init+0x228>)
 800590a:	789b      	ldrb	r3, [r3, #2]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	430b      	orrs	r3, r1
 8005910:	4945      	ldr	r1, [pc, #276]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005912:	78c9      	ldrb	r1, [r1, #3]
 8005914:	430b      	orrs	r3, r1
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800591c:	431a      	orrs	r2, r3
 800591e:	4b42      	ldr	r3, [pc, #264]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	0619      	lsls	r1, r3, #24
 8005924:	4b40      	ldr	r3, [pc, #256]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	4319      	orrs	r1, r3
 800592c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a28 <MX_LWIP_Init+0x228>)
 800592e:	789b      	ldrb	r3, [r3, #2]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	430b      	orrs	r3, r1
 8005934:	493c      	ldr	r1, [pc, #240]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005936:	78c9      	ldrb	r1, [r1, #3]
 8005938:	430b      	orrs	r3, r1
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005940:	431a      	orrs	r2, r3
 8005942:	4b39      	ldr	r3, [pc, #228]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	0619      	lsls	r1, r3, #24
 8005948:	4b37      	ldr	r3, [pc, #220]	@ (8005a28 <MX_LWIP_Init+0x228>)
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	4319      	orrs	r1, r3
 8005950:	4b35      	ldr	r3, [pc, #212]	@ (8005a28 <MX_LWIP_Init+0x228>)
 8005952:	789b      	ldrb	r3, [r3, #2]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	430b      	orrs	r3, r1
 8005958:	4933      	ldr	r1, [pc, #204]	@ (8005a28 <MX_LWIP_Init+0x228>)
 800595a:	78c9      	ldrb	r1, [r1, #3]
 800595c:	430b      	orrs	r3, r1
 800595e:	0e1b      	lsrs	r3, r3, #24
 8005960:	4313      	orrs	r3, r2
 8005962:	4a34      	ldr	r2, [pc, #208]	@ (8005a34 <MX_LWIP_Init+0x234>)
 8005964:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005966:	4b31      	ldr	r3, [pc, #196]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	061a      	lsls	r2, r3, #24
 800596c:	4b2f      	ldr	r3, [pc, #188]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	041b      	lsls	r3, r3, #16
 8005972:	431a      	orrs	r2, r3
 8005974:	4b2d      	ldr	r3, [pc, #180]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 8005976:	789b      	ldrb	r3, [r3, #2]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	4313      	orrs	r3, r2
 800597c:	4a2b      	ldr	r2, [pc, #172]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 800597e:	78d2      	ldrb	r2, [r2, #3]
 8005980:	4313      	orrs	r3, r2
 8005982:	061a      	lsls	r2, r3, #24
 8005984:	4b29      	ldr	r3, [pc, #164]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	0619      	lsls	r1, r3, #24
 800598a:	4b28      	ldr	r3, [pc, #160]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	4319      	orrs	r1, r3
 8005992:	4b26      	ldr	r3, [pc, #152]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 8005994:	789b      	ldrb	r3, [r3, #2]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	430b      	orrs	r3, r1
 800599a:	4924      	ldr	r1, [pc, #144]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 800599c:	78c9      	ldrb	r1, [r1, #3]
 800599e:	430b      	orrs	r3, r1
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80059a6:	431a      	orrs	r2, r3
 80059a8:	4b20      	ldr	r3, [pc, #128]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	0619      	lsls	r1, r3, #24
 80059ae:	4b1f      	ldr	r3, [pc, #124]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	4319      	orrs	r1, r3
 80059b6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 80059b8:	789b      	ldrb	r3, [r3, #2]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	430b      	orrs	r3, r1
 80059be:	491b      	ldr	r1, [pc, #108]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 80059c0:	78c9      	ldrb	r1, [r1, #3]
 80059c2:	430b      	orrs	r3, r1
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80059ca:	431a      	orrs	r2, r3
 80059cc:	4b17      	ldr	r3, [pc, #92]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	0619      	lsls	r1, r3, #24
 80059d2:	4b16      	ldr	r3, [pc, #88]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	4319      	orrs	r1, r3
 80059da:	4b14      	ldr	r3, [pc, #80]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 80059dc:	789b      	ldrb	r3, [r3, #2]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	430b      	orrs	r3, r1
 80059e2:	4912      	ldr	r1, [pc, #72]	@ (8005a2c <MX_LWIP_Init+0x22c>)
 80059e4:	78c9      	ldrb	r1, [r1, #3]
 80059e6:	430b      	orrs	r3, r1
 80059e8:	0e1b      	lsrs	r3, r3, #24
 80059ea:	4313      	orrs	r3, r2
 80059ec:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <MX_LWIP_Init+0x238>)
 80059ee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80059f0:	4b12      	ldr	r3, [pc, #72]	@ (8005a3c <MX_LWIP_Init+0x23c>)
 80059f2:	9302      	str	r3, [sp, #8]
 80059f4:	4b12      	ldr	r3, [pc, #72]	@ (8005a40 <MX_LWIP_Init+0x240>)
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	2300      	movs	r3, #0
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a38 <MX_LWIP_Init+0x238>)
 80059fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005a34 <MX_LWIP_Init+0x234>)
 8005a00:	490b      	ldr	r1, [pc, #44]	@ (8005a30 <MX_LWIP_Init+0x230>)
 8005a02:	4810      	ldr	r0, [pc, #64]	@ (8005a44 <MX_LWIP_Init+0x244>)
 8005a04:	f001 f976 	bl	8006cf4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005a08:	480e      	ldr	r0, [pc, #56]	@ (8005a44 <MX_LWIP_Init+0x244>)
 8005a0a:	f001 fc07 	bl	800721c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005a0e:	480d      	ldr	r0, [pc, #52]	@ (8005a44 <MX_LWIP_Init+0x244>)
 8005a10:	f001 fc28 	bl	8007264 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005a14:	490c      	ldr	r1, [pc, #48]	@ (8005a48 <MX_LWIP_Init+0x248>)
 8005a16:	480b      	ldr	r0, [pc, #44]	@ (8005a44 <MX_LWIP_Init+0x244>)
 8005a18:	f001 fd26 	bl	8007468 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	200004f0 	.word	0x200004f0
 8005a28:	200004f4 	.word	0x200004f4
 8005a2c:	200004f8 	.word	0x200004f8
 8005a30:	200004e4 	.word	0x200004e4
 8005a34:	200004e8 	.word	0x200004e8
 8005a38:	200004ec 	.word	0x200004ec
 8005a3c:	08010871 	.word	0x08010871
 8005a40:	08005dc1 	.word	0x08005dc1
 8005a44:	200004b0 	.word	0x200004b0
 8005a48:	08005a9d 	.word	0x08005a9d

08005a4c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005a54:	f7fb fc12 	bl	800127c <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <Ethernet_Link_Periodic_Handle+0x30>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b63      	cmp	r3, #99	@ 0x63
 8005a62:	d907      	bls.n	8005a74 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005a64:	f7fb fc0a 	bl	800127c <HAL_GetTick>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4a04      	ldr	r2, [pc, #16]	@ (8005a7c <Ethernet_Link_Periodic_Handle+0x30>)
 8005a6c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fb0c 	bl	800608c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200004ac 	.word	0x200004ac

08005a80 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005a84:	4804      	ldr	r0, [pc, #16]	@ (8005a98 <MX_LWIP_Process+0x18>)
 8005a86:	f000 f97b 	bl	8005d80 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005a8a:	f007 fd85 	bl	800d598 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005a8e:	4802      	ldr	r0, [pc, #8]	@ (8005a98 <MX_LWIP_Process+0x18>)
 8005a90:	f7ff ffdc 	bl	8005a4c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005a94:	bf00      	nop
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	200004b0 	.word	0x200004b0

08005a9c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <SCB_InvalidateDCache_by_Addr>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ac6:	f3bf 8f4f 	dsb	sy
}
 8005aca:	bf00      	nop
    while (op_size > 0) {
 8005acc:	e00b      	b.n	8005ae6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005ace:	4a0d      	ldr	r2, [pc, #52]	@ (8005b04 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dcf0      	bgt.n	8005ace <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005aec:	f3bf 8f4f 	dsb	sy
}
 8005af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005af2:	f3bf 8f6f 	isb	sy
}
 8005af6:	bf00      	nop
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	e000ed00 	.word	0xe000ed00

08005b08 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005b14:	4b44      	ldr	r3, [pc, #272]	@ (8005c28 <low_level_init+0x120>)
 8005b16:	4a45      	ldr	r2, [pc, #276]	@ (8005c2c <low_level_init+0x124>)
 8005b18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005b1e:	2380      	movs	r3, #128	@ 0x80
 8005b20:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005b22:	23e1      	movs	r3, #225	@ 0xe1
 8005b24:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005b26:	2300      	movs	r3, #0
 8005b28:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005b32:	4a3d      	ldr	r2, [pc, #244]	@ (8005c28 <low_level_init+0x120>)
 8005b34:	f107 0308 	add.w	r3, r7, #8
 8005b38:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c28 <low_level_init+0x120>)
 8005b3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005b40:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005b42:	4b39      	ldr	r3, [pc, #228]	@ (8005c28 <low_level_init+0x120>)
 8005b44:	4a3a      	ldr	r2, [pc, #232]	@ (8005c30 <low_level_init+0x128>)
 8005b46:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005b48:	4b37      	ldr	r3, [pc, #220]	@ (8005c28 <low_level_init+0x120>)
 8005b4a:	4a3a      	ldr	r2, [pc, #232]	@ (8005c34 <low_level_init+0x12c>)
 8005b4c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005b4e:	4b36      	ldr	r3, [pc, #216]	@ (8005c28 <low_level_init+0x120>)
 8005b50:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005b54:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b56:	4834      	ldr	r0, [pc, #208]	@ (8005c28 <low_level_init+0x120>)
 8005b58:	f7fc f940 	bl	8001ddc <HAL_ETH_Init>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005b60:	2238      	movs	r2, #56	@ 0x38
 8005b62:	2100      	movs	r1, #0
 8005b64:	4834      	ldr	r0, [pc, #208]	@ (8005c38 <low_level_init+0x130>)
 8005b66:	f00b fb11 	bl	801118c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005b6a:	4b33      	ldr	r3, [pc, #204]	@ (8005c38 <low_level_init+0x130>)
 8005b6c:	2221      	movs	r2, #33	@ 0x21
 8005b6e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005b70:	4b31      	ldr	r3, [pc, #196]	@ (8005c38 <low_level_init+0x130>)
 8005b72:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005b76:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005b78:	4b2f      	ldr	r3, [pc, #188]	@ (8005c38 <low_level_init+0x130>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005b7e:	482f      	ldr	r0, [pc, #188]	@ (8005c3c <low_level_init+0x134>)
 8005b80:	f000 ff80 	bl	8006a84 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2206      	movs	r2, #6
 8005b88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005b8c:	4b26      	ldr	r3, [pc, #152]	@ (8005c28 <low_level_init+0x120>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005b98:	4b23      	ldr	r3, [pc, #140]	@ (8005c28 <low_level_init+0x120>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	785a      	ldrb	r2, [r3, #1]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ba4:	4b20      	ldr	r3, [pc, #128]	@ (8005c28 <low_level_init+0x120>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	789a      	ldrb	r2, [r3, #2]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c28 <low_level_init+0x120>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	78da      	ldrb	r2, [r3, #3]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c28 <low_level_init+0x120>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	791a      	ldrb	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005bc8:	4b17      	ldr	r3, [pc, #92]	@ (8005c28 <low_level_init+0x120>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	795a      	ldrb	r2, [r3, #5]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005bda:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005be2:	f043 030a 	orr.w	r3, r3, #10
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005bee:	4914      	ldr	r1, [pc, #80]	@ (8005c40 <low_level_init+0x138>)
 8005bf0:	4814      	ldr	r0, [pc, #80]	@ (8005c44 <low_level_init+0x13c>)
 8005bf2:	f7fb f9ec 	bl	8000fce <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005bf6:	4813      	ldr	r0, [pc, #76]	@ (8005c44 <low_level_init+0x13c>)
 8005bf8:	f7fb fa1b 	bl	8001032 <LAN8742_Init>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 fc00 	bl	8007408 <netif_set_link_down>
    netif_set_down(netif);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fb97 	bl	800733c <netif_set_down>
 8005c0e:	e008      	b.n	8005c22 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa38 	bl	800608c <ethernet_link_check_state>
 8005c1c:	e001      	b.n	8005c22 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8005c1e:	f7fa fe33 	bl	8000888 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20004e88 	.word	0x20004e88
 8005c2c:	40028000 	.word	0x40028000
 8005c30:	2000016c 	.word	0x2000016c
 8005c34:	200000cc 	.word	0x200000cc
 8005c38:	20004f38 	.word	0x20004f38
 8005c3c:	080152dc 	.word	0x080152dc
 8005c40:	2000000c 	.word	0x2000000c
 8005c44:	20004f70 	.word	0x20004f70

08005c48 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b092      	sub	sp, #72	@ 0x48
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	2230      	movs	r2, #48	@ 0x30
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f00b fa8f 	bl	801118c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005c6e:	f107 030c 	add.w	r3, r7, #12
 8005c72:	2230      	movs	r2, #48	@ 0x30
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f00b fa88 	bl	801118c <memset>

  for(q = p; q != NULL; q = q->next)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c80:	e045      	b.n	8005d0e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d902      	bls.n	8005c8e <low_level_output+0x46>
      return ERR_IF;
 8005c88:	f06f 030b 	mvn.w	r3, #11
 8005c8c:	e055      	b.n	8005d3a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c90:	6859      	ldr	r1, [r3, #4]
 8005c92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c94:	4613      	mov	r3, r2
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	3348      	adds	r3, #72	@ 0x48
 8005c9e:	443b      	add	r3, r7
 8005ca0:	3b3c      	subs	r3, #60	@ 0x3c
 8005ca2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ca6:	895b      	ldrh	r3, [r3, #10]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cac:	4613      	mov	r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	3348      	adds	r3, #72	@ 0x48
 8005cb6:	443b      	add	r3, r7
 8005cb8:	3b38      	subs	r3, #56	@ 0x38
 8005cba:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d011      	beq.n	8005ce6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	f107 000c 	add.w	r0, r7, #12
 8005cca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ccc:	460b      	mov	r3, r1
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	440b      	add	r3, r1
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	18c1      	adds	r1, r0, r3
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	3348      	adds	r3, #72	@ 0x48
 8005ce0:	443b      	add	r3, r7
 8005ce2:	3b34      	subs	r3, #52	@ 0x34
 8005ce4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005cee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	3348      	adds	r3, #72	@ 0x48
 8005cfa:	443b      	add	r3, r7
 8005cfc:	3b34      	subs	r3, #52	@ 0x34
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d04:	3301      	adds	r3, #1
 8005d06:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1b6      	bne.n	8005c82 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	891b      	ldrh	r3, [r3, #8]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d44 <low_level_output+0xfc>)
 8005d1c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005d1e:	4a09      	ldr	r2, [pc, #36]	@ (8005d44 <low_level_output+0xfc>)
 8005d20:	f107 030c 	add.w	r3, r7, #12
 8005d24:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005d26:	4a07      	ldr	r2, [pc, #28]	@ (8005d44 <low_level_output+0xfc>)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005d2c:	2214      	movs	r2, #20
 8005d2e:	4905      	ldr	r1, [pc, #20]	@ (8005d44 <low_level_output+0xfc>)
 8005d30:	4805      	ldr	r0, [pc, #20]	@ (8005d48 <low_level_output+0x100>)
 8005d32:	f7fc f9dd 	bl	80020f0 <HAL_ETH_Transmit>

  return errval;
 8005d36:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3748      	adds	r7, #72	@ 0x48
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20004f38 	.word	0x20004f38
 8005d48:	20004e88 	.word	0x20004e88

08005d4c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005d58:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <low_level_input+0x2c>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005d60:	f107 030c 	add.w	r3, r7, #12
 8005d64:	4619      	mov	r1, r3
 8005d66:	4805      	ldr	r0, [pc, #20]	@ (8005d7c <low_level_input+0x30>)
 8005d68:	f7fc fa56 	bl	8002218 <HAL_ETH_ReadData>
  }

  return p;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20004e84 	.word	0x20004e84
 8005d7c:	20004e88 	.word	0x20004e88

08005d80 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ffdd 	bl	8005d4c <low_level_input>
 8005d92:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	4798      	blx	r3
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f001 fedc 	bl	8007b68 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1ea      	bne.n	8005d8c <ethernetif_input+0xc>
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <ethernetif_init+0x1c>
 8005dce:	4b0e      	ldr	r3, [pc, #56]	@ (8005e08 <ethernetif_init+0x48>)
 8005dd0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005dd4:	490d      	ldr	r1, [pc, #52]	@ (8005e0c <ethernetif_init+0x4c>)
 8005dd6:	480e      	ldr	r0, [pc, #56]	@ (8005e10 <ethernetif_init+0x50>)
 8005dd8:	f00b f878 	bl	8010ecc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2273      	movs	r2, #115	@ 0x73
 8005de0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2274      	movs	r2, #116	@ 0x74
 8005de8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a09      	ldr	r2, [pc, #36]	@ (8005e14 <ethernetif_init+0x54>)
 8005df0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a08      	ldr	r2, [pc, #32]	@ (8005e18 <ethernetif_init+0x58>)
 8005df6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fe85 	bl	8005b08 <low_level_init>

  return ERR_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	08011e44 	.word	0x08011e44
 8005e0c:	08011e60 	.word	0x08011e60
 8005e10:	08011e70 	.word	0x08011e70
 8005e14:	0800ec05 	.word	0x0800ec05
 8005e18:	08005c49 	.word	0x08005c49

08005e1c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	4807      	ldr	r0, [pc, #28]	@ (8005e48 <pbuf_free_custom+0x2c>)
 8005e2c:	f000 ff0c 	bl	8006c48 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005e30:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <pbuf_free_custom+0x30>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d102      	bne.n	8005e3e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005e38:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <pbuf_free_custom+0x30>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
  }
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	080152dc 	.word	0x080152dc
 8005e4c:	20004e84 	.word	0x20004e84

08005e50 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e54:	f7fb fa12 	bl	800127c <HAL_GetTick>
 8005e58:	4603      	mov	r3, r0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08e      	sub	sp, #56	@ 0x38
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	605a      	str	r2, [r3, #4]
 8005e72:	609a      	str	r2, [r3, #8]
 8005e74:	60da      	str	r2, [r3, #12]
 8005e76:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a56      	ldr	r2, [pc, #344]	@ (8005fd8 <HAL_ETH_MspInit+0x178>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	f040 80a6 	bne.w	8005fd0 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005e84:	4b55      	ldr	r3, [pc, #340]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e88:	4a54      	ldr	r2, [pc, #336]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005e8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e90:	4b52      	ldr	r3, [pc, #328]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e98:	623b      	str	r3, [r7, #32]
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005ea2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ea6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4b49      	ldr	r3, [pc, #292]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	4a48      	ldr	r2, [pc, #288]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005eba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ec0:	4b46      	ldr	r3, [pc, #280]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ecc:	4b43      	ldr	r3, [pc, #268]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed0:	4a42      	ldr	r2, [pc, #264]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005ed2:	f043 0304 	orr.w	r3, r3, #4
 8005ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ed8:	4b40      	ldr	r3, [pc, #256]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005efc:	4b37      	ldr	r3, [pc, #220]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f00:	4a36      	ldr	r2, [pc, #216]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005f02:	f043 0302 	orr.w	r3, r3, #2
 8005f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f08:	4b34      	ldr	r3, [pc, #208]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005f14:	4b31      	ldr	r3, [pc, #196]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	4a30      	ldr	r2, [pc, #192]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f20:	4b2e      	ldr	r3, [pc, #184]	@ (8005fdc <HAL_ETH_MspInit+0x17c>)
 8005f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005f2c:	2332      	movs	r3, #50	@ 0x32
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f30:	2302      	movs	r3, #2
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f3c:	230b      	movs	r3, #11
 8005f3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f44:	4619      	mov	r1, r3
 8005f46:	4826      	ldr	r0, [pc, #152]	@ (8005fe0 <HAL_ETH_MspInit+0x180>)
 8005f48:	f7fd f996 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005f4c:	2386      	movs	r3, #134	@ 0x86
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f50:	2302      	movs	r3, #2
 8005f52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f5c:	230b      	movs	r3, #11
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f64:	4619      	mov	r1, r3
 8005f66:	481f      	ldr	r0, [pc, #124]	@ (8005fe4 <HAL_ETH_MspInit+0x184>)
 8005f68:	f7fd f986 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005f6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f72:	2302      	movs	r3, #2
 8005f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f7e:	230b      	movs	r3, #11
 8005f80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f86:	4619      	mov	r1, r3
 8005f88:	4817      	ldr	r0, [pc, #92]	@ (8005fe8 <HAL_ETH_MspInit+0x188>)
 8005f8a:	f7fd f975 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005f8e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f94:	2302      	movs	r3, #2
 8005f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fa0:	230b      	movs	r3, #11
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4810      	ldr	r0, [pc, #64]	@ (8005fec <HAL_ETH_MspInit+0x18c>)
 8005fac:	f7fd f964 	bl	8003278 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	203d      	movs	r0, #61	@ 0x3d
 8005fb6:	f7fb fa6c 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005fba:	203d      	movs	r0, #61	@ 0x3d
 8005fbc:	f7fb fa85 	bl	80014ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	203e      	movs	r0, #62	@ 0x3e
 8005fc6:	f7fb fa64 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8005fca:	203e      	movs	r0, #62	@ 0x3e
 8005fcc:	f7fb fa7d 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	3738      	adds	r7, #56	@ 0x38
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40028000 	.word	0x40028000
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	40020800 	.word	0x40020800
 8005fe4:	40020000 	.word	0x40020000
 8005fe8:	40020400 	.word	0x40020400
 8005fec:	40021800 	.word	0x40021800

08005ff0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005ff4:	4802      	ldr	r0, [pc, #8]	@ (8006000 <ETH_PHY_IO_Init+0x10>)
 8005ff6:	f7fc fcdd 	bl	80029b4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20004e88 	.word	0x20004e88

08006004 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return 0;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	68f9      	ldr	r1, [r7, #12]
 8006026:	4807      	ldr	r0, [pc, #28]	@ (8006044 <ETH_PHY_IO_ReadReg+0x30>)
 8006028:	f7fc fb1e 	bl	8002668 <HAL_ETH_ReadPHYRegister>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006036:	e000      	b.n	800603a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20004e88 	.word	0x20004e88

08006048 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	68f9      	ldr	r1, [r7, #12]
 800605a:	4807      	ldr	r0, [pc, #28]	@ (8006078 <ETH_PHY_IO_WriteReg+0x30>)
 800605c:	f7fc fb4f 	bl	80026fe <HAL_ETH_WritePHYRegister>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800606a:	e000      	b.n	800606e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20004e88 	.word	0x20004e88

0800607c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006080:	f7fb f8fc 	bl	800127c <HAL_GetTick>
 8006084:	4603      	mov	r3, r0
}
 8006086:	4618      	mov	r0, r3
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b0a0      	sub	sp, #128	@ 0x80
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006094:	f107 030c 	add.w	r3, r7, #12
 8006098:	2264      	movs	r2, #100	@ 0x64
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f00b f875 	bl	801118c <memset>
  int32_t PHYLinkState = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060aa:	2300      	movs	r3, #0
 80060ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060ae:	2300      	movs	r3, #0
 80060b0:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80060b2:	483a      	ldr	r0, [pc, #232]	@ (800619c <ethernet_link_check_state+0x110>)
 80060b4:	f7fb f80a 	bl	80010cc <LAN8742_GetLinkState>
 80060b8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80060c0:	089b      	lsrs	r3, r3, #2
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00c      	beq.n	80060e6 <ethernet_link_check_state+0x5a>
 80060cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	dc09      	bgt.n	80060e6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 80060d2:	4833      	ldr	r0, [pc, #204]	@ (80061a0 <ethernet_link_check_state+0x114>)
 80060d4:	f7fb ff8c 	bl	8001ff0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 f92f 	bl	800733c <netif_set_down>
    netif_set_link_down(netif);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 f992 	bl	8007408 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80060e4:	e055      	b.n	8006192 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d14e      	bne.n	8006192 <ethernet_link_check_state+0x106>
 80060f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	dd4b      	ble.n	8006192 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80060fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060fc:	3b02      	subs	r3, #2
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d82a      	bhi.n	8006158 <ethernet_link_check_state+0xcc>
 8006102:	a201      	add	r2, pc, #4	@ (adr r2, 8006108 <ethernet_link_check_state+0x7c>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	08006119 	.word	0x08006119
 800610c:	0800612b 	.word	0x0800612b
 8006110:	0800613b 	.word	0x0800613b
 8006114:	0800614b 	.word	0x0800614b
      duplex = ETH_FULLDUPLEX_MODE;
 8006118:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800611c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800611e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006122:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006124:	2301      	movs	r3, #1
 8006126:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006128:	e017      	b.n	800615a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800612a:	2300      	movs	r3, #0
 800612c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800612e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006132:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006134:	2301      	movs	r3, #1
 8006136:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006138:	e00f      	b.n	800615a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800613a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800613e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006140:	2300      	movs	r3, #0
 8006142:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006144:	2301      	movs	r3, #1
 8006146:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006148:	e007      	b.n	800615a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800614a:	2300      	movs	r3, #0
 800614c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800614e:	2300      	movs	r3, #0
 8006150:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006156:	e000      	b.n	800615a <ethernet_link_check_state+0xce>
      break;
 8006158:	bf00      	nop
    if(linkchanged)
 800615a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d018      	beq.n	8006192 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006160:	f107 030c 	add.w	r3, r7, #12
 8006164:	4619      	mov	r1, r3
 8006166:	480e      	ldr	r0, [pc, #56]	@ (80061a0 <ethernet_link_check_state+0x114>)
 8006168:	f7fc fb12 	bl	8002790 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800616c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800616e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006172:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	4619      	mov	r1, r3
 800617a:	4809      	ldr	r0, [pc, #36]	@ (80061a0 <ethernet_link_check_state+0x114>)
 800617c:	f7fc fbff 	bl	800297e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006180:	4807      	ldr	r0, [pc, #28]	@ (80061a0 <ethernet_link_check_state+0x114>)
 8006182:	f7fb fec5 	bl	8001f10 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 f86c 	bl	8007264 <netif_set_up>
      netif_set_link_up(netif);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 f907 	bl	80073a0 <netif_set_link_up>
}
 8006192:	bf00      	nop
 8006194:	3780      	adds	r7, #128	@ 0x80
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20004f70 	.word	0x20004f70
 80061a0:	20004e88 	.word	0x20004e88

080061a4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80061ac:	4812      	ldr	r0, [pc, #72]	@ (80061f8 <HAL_ETH_RxAllocateCallback+0x54>)
 80061ae:	f000 fcdd 	bl	8006b6c <memp_malloc_pool>
 80061b2:	60f8      	str	r0, [r7, #12]
  if (p)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d014      	beq.n	80061e4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f103 0220 	add.w	r2, r3, #32
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a0d      	ldr	r2, [pc, #52]	@ (80061fc <HAL_ETH_RxAllocateCallback+0x58>)
 80061c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80061d2:	9201      	str	r2, [sp, #4]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2241      	movs	r2, #65	@ 0x41
 80061da:	2100      	movs	r1, #0
 80061dc:	2000      	movs	r0, #0
 80061de:	f001 fb09 	bl	80077f4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80061e2:	e005      	b.n	80061f0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80061e4:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <HAL_ETH_RxAllocateCallback+0x5c>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	080152dc 	.word	0x080152dc
 80061fc:	08005e1d 	.word	0x08005e1d
 8006200:	20004e84 	.word	0x20004e84

08006204 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3b20      	subs	r3, #32
 8006222:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2200      	movs	r2, #0
 800622e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	887a      	ldrh	r2, [r7, #2]
 8006234:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e003      	b.n	800624e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e009      	b.n	8006270 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	891a      	ldrh	r2, [r3, #8]
 8006260:	887b      	ldrh	r3, [r7, #2]
 8006262:	4413      	add	r3, r2
 8006264:	b29a      	uxth	r2, r3
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f2      	bne.n	800625c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006276:	887b      	ldrh	r3, [r7, #2]
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff fc18 	bl	8005ab0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006280:	bf00      	nop
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	2b00      	cmp	r3, #0
 8006298:	dc04      	bgt.n	80062a4 <lwip_strerr+0x1c>
 800629a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629e:	f113 0f10 	cmn.w	r3, #16
 80062a2:	da01      	bge.n	80062a8 <lwip_strerr+0x20>
    return "Unknown error.";
 80062a4:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <lwip_strerr+0x38>)
 80062a6:	e005      	b.n	80062b4 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 80062a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ac:	425b      	negs	r3, r3
 80062ae:	4a05      	ldr	r2, [pc, #20]	@ (80062c4 <lwip_strerr+0x3c>)
 80062b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	08011fd4 	.word	0x08011fd4
 80062c4:	20000020 	.word	0x20000020

080062c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80062d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	b21a      	sxth	r2, r3
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b29b      	uxth	r3, r3
 80062e0:	b21b      	sxth	r3, r3
 80062e2:	4313      	orrs	r3, r2
 80062e4:	b21b      	sxth	r3, r3
 80062e6:	b29b      	uxth	r3, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	061a      	lsls	r2, r3, #24
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	0e1b      	lsrs	r3, r3, #24
 8006318:	4313      	orrs	r3, r2
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006330:	f000 f8d4 	bl	80064dc <mem_init>
  memp_init();
 8006334:	f000 fbd6 	bl	8006ae4 <memp_init>
  pbuf_init();
  netif_init();
 8006338:	f000 fcd4 	bl	8006ce4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800633c:	f007 f96e 	bl	800d61c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006340:	f001 feb0 	bl	80080a4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006344:	f007 f8e0 	bl	800d508 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800635a:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <ptr_to_mem+0x20>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	4413      	add	r3, r2
}
 8006362:	4618      	mov	r0, r3
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20004fa8 	.word	0x20004fa8

08006374 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800637c:	4b05      	ldr	r3, [pc, #20]	@ (8006394 <mem_to_ptr+0x20>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	b29b      	uxth	r3, r3
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20004fa8 	.word	0x20004fa8

08006398 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006398:	b590      	push	{r4, r7, lr}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80063a0:	4b45      	ldr	r3, [pc, #276]	@ (80064b8 <plug_holes+0x120>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d206      	bcs.n	80063b8 <plug_holes+0x20>
 80063aa:	4b44      	ldr	r3, [pc, #272]	@ (80064bc <plug_holes+0x124>)
 80063ac:	f240 12df 	movw	r2, #479	@ 0x1df
 80063b0:	4943      	ldr	r1, [pc, #268]	@ (80064c0 <plug_holes+0x128>)
 80063b2:	4844      	ldr	r0, [pc, #272]	@ (80064c4 <plug_holes+0x12c>)
 80063b4:	f00a fd8a 	bl	8010ecc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80063b8:	4b43      	ldr	r3, [pc, #268]	@ (80064c8 <plug_holes+0x130>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d306      	bcc.n	80063d0 <plug_holes+0x38>
 80063c2:	4b3e      	ldr	r3, [pc, #248]	@ (80064bc <plug_holes+0x124>)
 80063c4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80063c8:	4940      	ldr	r1, [pc, #256]	@ (80064cc <plug_holes+0x134>)
 80063ca:	483e      	ldr	r0, [pc, #248]	@ (80064c4 <plug_holes+0x12c>)
 80063cc:	f00a fd7e 	bl	8010ecc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	791b      	ldrb	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <plug_holes+0x4e>
 80063d8:	4b38      	ldr	r3, [pc, #224]	@ (80064bc <plug_holes+0x124>)
 80063da:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80063de:	493c      	ldr	r1, [pc, #240]	@ (80064d0 <plug_holes+0x138>)
 80063e0:	4838      	ldr	r0, [pc, #224]	@ (80064c4 <plug_holes+0x12c>)
 80063e2:	f00a fd73 	bl	8010ecc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80063ee:	d906      	bls.n	80063fe <plug_holes+0x66>
 80063f0:	4b32      	ldr	r3, [pc, #200]	@ (80064bc <plug_holes+0x124>)
 80063f2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80063f6:	4937      	ldr	r1, [pc, #220]	@ (80064d4 <plug_holes+0x13c>)
 80063f8:	4832      	ldr	r0, [pc, #200]	@ (80064c4 <plug_holes+0x12c>)
 80063fa:	f00a fd67 	bl	8010ecc <iprintf>

  nmem = ptr_to_mem(mem->next);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff ffa4 	bl	8006350 <ptr_to_mem>
 8006408:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	429a      	cmp	r2, r3
 8006410:	d024      	beq.n	800645c <plug_holes+0xc4>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	791b      	ldrb	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d120      	bne.n	800645c <plug_holes+0xc4>
 800641a:	4b2b      	ldr	r3, [pc, #172]	@ (80064c8 <plug_holes+0x130>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	d01b      	beq.n	800645c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006424:	4b2c      	ldr	r3, [pc, #176]	@ (80064d8 <plug_holes+0x140>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	429a      	cmp	r2, r3
 800642c:	d102      	bne.n	8006434 <plug_holes+0x9c>
      lfree = mem;
 800642e:	4a2a      	ldr	r2, [pc, #168]	@ (80064d8 <plug_holes+0x140>)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	881a      	ldrh	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006444:	d00a      	beq.n	800645c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff ff80 	bl	8006350 <ptr_to_mem>
 8006450:	4604      	mov	r4, r0
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff ff8e 	bl	8006374 <mem_to_ptr>
 8006458:	4603      	mov	r3, r0
 800645a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff ff75 	bl	8006350 <ptr_to_mem>
 8006466:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d01f      	beq.n	80064b0 <plug_holes+0x118>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	791b      	ldrb	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11b      	bne.n	80064b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006478:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <plug_holes+0x140>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d102      	bne.n	8006488 <plug_holes+0xf0>
      lfree = pmem;
 8006482:	4a15      	ldr	r2, [pc, #84]	@ (80064d8 <plug_holes+0x140>)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	881a      	ldrh	r2, [r3, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006498:	d00a      	beq.n	80064b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff ff56 	bl	8006350 <ptr_to_mem>
 80064a4:	4604      	mov	r4, r0
 80064a6:	68b8      	ldr	r0, [r7, #8]
 80064a8:	f7ff ff64 	bl	8006374 <mem_to_ptr>
 80064ac:	4603      	mov	r3, r0
 80064ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd90      	pop	{r4, r7, pc}
 80064b8:	20004fa8 	.word	0x20004fa8
 80064bc:	08011fe4 	.word	0x08011fe4
 80064c0:	08012014 	.word	0x08012014
 80064c4:	0801202c 	.word	0x0801202c
 80064c8:	20004fac 	.word	0x20004fac
 80064cc:	08012054 	.word	0x08012054
 80064d0:	08012070 	.word	0x08012070
 80064d4:	0801208c 	.word	0x0801208c
 80064d8:	20004fb0 	.word	0x20004fb0

080064dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80064e2:	4b16      	ldr	r3, [pc, #88]	@ (800653c <mem_init+0x60>)
 80064e4:	4a16      	ldr	r2, [pc, #88]	@ (8006540 <mem_init+0x64>)
 80064e6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80064e8:	4b14      	ldr	r3, [pc, #80]	@ (800653c <mem_init+0x60>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80064f4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006502:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8006506:	f7ff ff23 	bl	8006350 <ptr_to_mem>
 800650a:	4603      	mov	r3, r0
 800650c:	4a0d      	ldr	r2, [pc, #52]	@ (8006544 <mem_init+0x68>)
 800650e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006510:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <mem_init+0x68>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2201      	movs	r2, #1
 8006516:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006518:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <mem_init+0x68>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006520:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006522:	4b08      	ldr	r3, [pc, #32]	@ (8006544 <mem_init+0x68>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800652a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800652c:	4b03      	ldr	r3, [pc, #12]	@ (800653c <mem_init+0x60>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a05      	ldr	r2, [pc, #20]	@ (8006548 <mem_init+0x6c>)
 8006532:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20004fa8 	.word	0x20004fa8
 8006540:	20048000 	.word	0x20048000
 8006544:	20004fac 	.word	0x20004fac
 8006548:	20004fb0 	.word	0x20004fb0

0800654c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff0d 	bl	8006374 <mem_to_ptr>
 800655a:	4603      	mov	r3, r0
 800655c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fef4 	bl	8006350 <ptr_to_mem>
 8006568:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff feee 	bl	8006350 <ptr_to_mem>
 8006574:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800657e:	d818      	bhi.n	80065b2 <mem_link_valid+0x66>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	885b      	ldrh	r3, [r3, #2]
 8006584:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006588:	d813      	bhi.n	80065b2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800658e:	8afa      	ldrh	r2, [r7, #22]
 8006590:	429a      	cmp	r2, r3
 8006592:	d004      	beq.n	800659e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	8afa      	ldrh	r2, [r7, #22]
 800659a:	429a      	cmp	r2, r3
 800659c:	d109      	bne.n	80065b2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800659e:	4b08      	ldr	r3, [pc, #32]	@ (80065c0 <mem_link_valid+0x74>)
 80065a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d006      	beq.n	80065b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	885b      	ldrh	r3, [r3, #2]
 80065ac:	8afa      	ldrh	r2, [r7, #22]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d001      	beq.n	80065b6 <mem_link_valid+0x6a>
    return 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e000      	b.n	80065b8 <mem_link_valid+0x6c>
  }
  return 1;
 80065b6:	2301      	movs	r3, #1
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20004fac 	.word	0x20004fac

080065c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d04c      	beq.n	800666c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80065dc:	4b25      	ldr	r3, [pc, #148]	@ (8006674 <mem_free+0xb0>)
 80065de:	f240 2273 	movw	r2, #627	@ 0x273
 80065e2:	4925      	ldr	r1, [pc, #148]	@ (8006678 <mem_free+0xb4>)
 80065e4:	4825      	ldr	r0, [pc, #148]	@ (800667c <mem_free+0xb8>)
 80065e6:	f00a fc71 	bl	8010ecc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80065ea:	e040      	b.n	800666e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3b08      	subs	r3, #8
 80065f0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80065f2:	4b23      	ldr	r3, [pc, #140]	@ (8006680 <mem_free+0xbc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d306      	bcc.n	800660a <mem_free+0x46>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f103 020c 	add.w	r2, r3, #12
 8006602:	4b20      	ldr	r3, [pc, #128]	@ (8006684 <mem_free+0xc0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d907      	bls.n	800661a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800660a:	4b1a      	ldr	r3, [pc, #104]	@ (8006674 <mem_free+0xb0>)
 800660c:	f240 227f 	movw	r2, #639	@ 0x27f
 8006610:	491d      	ldr	r1, [pc, #116]	@ (8006688 <mem_free+0xc4>)
 8006612:	481a      	ldr	r0, [pc, #104]	@ (800667c <mem_free+0xb8>)
 8006614:	f00a fc5a 	bl	8010ecc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006618:	e029      	b.n	800666e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	791b      	ldrb	r3, [r3, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d107      	bne.n	8006632 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006622:	4b14      	ldr	r3, [pc, #80]	@ (8006674 <mem_free+0xb0>)
 8006624:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006628:	4918      	ldr	r1, [pc, #96]	@ (800668c <mem_free+0xc8>)
 800662a:	4814      	ldr	r0, [pc, #80]	@ (800667c <mem_free+0xb8>)
 800662c:	f00a fc4e 	bl	8010ecc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006630:	e01d      	b.n	800666e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff ff8a 	bl	800654c <mem_link_valid>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d107      	bne.n	800664e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800663e:	4b0d      	ldr	r3, [pc, #52]	@ (8006674 <mem_free+0xb0>)
 8006640:	f240 2295 	movw	r2, #661	@ 0x295
 8006644:	4912      	ldr	r1, [pc, #72]	@ (8006690 <mem_free+0xcc>)
 8006646:	480d      	ldr	r0, [pc, #52]	@ (800667c <mem_free+0xb8>)
 8006648:	f00a fc40 	bl	8010ecc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800664c:	e00f      	b.n	800666e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006654:	4b0f      	ldr	r3, [pc, #60]	@ (8006694 <mem_free+0xd0>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	429a      	cmp	r2, r3
 800665c:	d202      	bcs.n	8006664 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800665e:	4a0d      	ldr	r2, [pc, #52]	@ (8006694 <mem_free+0xd0>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fe97 	bl	8006398 <plug_holes>
 800666a:	e000      	b.n	800666e <mem_free+0xaa>
    return;
 800666c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	08011fe4 	.word	0x08011fe4
 8006678:	080120b8 	.word	0x080120b8
 800667c:	0801202c 	.word	0x0801202c
 8006680:	20004fa8 	.word	0x20004fa8
 8006684:	20004fac 	.word	0x20004fac
 8006688:	080120dc 	.word	0x080120dc
 800668c:	080120f8 	.word	0x080120f8
 8006690:	08012120 	.word	0x08012120
 8006694:	20004fb0 	.word	0x20004fb0

08006698 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80066a4:	887b      	ldrh	r3, [r7, #2]
 80066a6:	3303      	adds	r3, #3
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80066b0:	8bfb      	ldrh	r3, [r7, #30]
 80066b2:	2b0b      	cmp	r3, #11
 80066b4:	d801      	bhi.n	80066ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80066b6:	230c      	movs	r3, #12
 80066b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80066ba:	8bfb      	ldrh	r3, [r7, #30]
 80066bc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80066c0:	d803      	bhi.n	80066ca <mem_trim+0x32>
 80066c2:	8bfa      	ldrh	r2, [r7, #30]
 80066c4:	887b      	ldrh	r3, [r7, #2]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d201      	bcs.n	80066ce <mem_trim+0x36>
    return NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e0cc      	b.n	8006868 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80066ce:	4b68      	ldr	r3, [pc, #416]	@ (8006870 <mem_trim+0x1d8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d304      	bcc.n	80066e2 <mem_trim+0x4a>
 80066d8:	4b66      	ldr	r3, [pc, #408]	@ (8006874 <mem_trim+0x1dc>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d306      	bcc.n	80066f0 <mem_trim+0x58>
 80066e2:	4b65      	ldr	r3, [pc, #404]	@ (8006878 <mem_trim+0x1e0>)
 80066e4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80066e8:	4964      	ldr	r1, [pc, #400]	@ (800687c <mem_trim+0x1e4>)
 80066ea:	4865      	ldr	r0, [pc, #404]	@ (8006880 <mem_trim+0x1e8>)
 80066ec:	f00a fbee 	bl	8010ecc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80066f0:	4b5f      	ldr	r3, [pc, #380]	@ (8006870 <mem_trim+0x1d8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d304      	bcc.n	8006704 <mem_trim+0x6c>
 80066fa:	4b5e      	ldr	r3, [pc, #376]	@ (8006874 <mem_trim+0x1dc>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d301      	bcc.n	8006708 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	e0af      	b.n	8006868 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3b08      	subs	r3, #8
 800670c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800670e:	69b8      	ldr	r0, [r7, #24]
 8006710:	f7ff fe30 	bl	8006374 <mem_to_ptr>
 8006714:	4603      	mov	r3, r0
 8006716:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	881a      	ldrh	r2, [r3, #0]
 800671c:	8afb      	ldrh	r3, [r7, #22]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b08      	subs	r3, #8
 8006724:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006726:	8bfa      	ldrh	r2, [r7, #30]
 8006728:	8abb      	ldrh	r3, [r7, #20]
 800672a:	429a      	cmp	r2, r3
 800672c:	d906      	bls.n	800673c <mem_trim+0xa4>
 800672e:	4b52      	ldr	r3, [pc, #328]	@ (8006878 <mem_trim+0x1e0>)
 8006730:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8006734:	4953      	ldr	r1, [pc, #332]	@ (8006884 <mem_trim+0x1ec>)
 8006736:	4852      	ldr	r0, [pc, #328]	@ (8006880 <mem_trim+0x1e8>)
 8006738:	f00a fbc8 	bl	8010ecc <iprintf>
  if (newsize > size) {
 800673c:	8bfa      	ldrh	r2, [r7, #30]
 800673e:	8abb      	ldrh	r3, [r7, #20]
 8006740:	429a      	cmp	r2, r3
 8006742:	d901      	bls.n	8006748 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	e08f      	b.n	8006868 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006748:	8bfa      	ldrh	r2, [r7, #30]
 800674a:	8abb      	ldrh	r3, [r7, #20]
 800674c:	429a      	cmp	r2, r3
 800674e:	d101      	bne.n	8006754 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	e089      	b.n	8006868 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff fdf9 	bl	8006350 <ptr_to_mem>
 800675e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	791b      	ldrb	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d13f      	bne.n	80067e8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006770:	d106      	bne.n	8006780 <mem_trim+0xe8>
 8006772:	4b41      	ldr	r3, [pc, #260]	@ (8006878 <mem_trim+0x1e0>)
 8006774:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8006778:	4943      	ldr	r1, [pc, #268]	@ (8006888 <mem_trim+0x1f0>)
 800677a:	4841      	ldr	r0, [pc, #260]	@ (8006880 <mem_trim+0x1e8>)
 800677c:	f00a fba6 	bl	8010ecc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006786:	8afa      	ldrh	r2, [r7, #22]
 8006788:	8bfb      	ldrh	r3, [r7, #30]
 800678a:	4413      	add	r3, r2
 800678c:	b29b      	uxth	r3, r3
 800678e:	3308      	adds	r3, #8
 8006790:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006792:	4b3e      	ldr	r3, [pc, #248]	@ (800688c <mem_trim+0x1f4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d106      	bne.n	80067aa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800679c:	89fb      	ldrh	r3, [r7, #14]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fdd6 	bl	8006350 <ptr_to_mem>
 80067a4:	4603      	mov	r3, r0
 80067a6:	4a39      	ldr	r2, [pc, #228]	@ (800688c <mem_trim+0x1f4>)
 80067a8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80067aa:	89fb      	ldrh	r3, [r7, #14]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fdcf 	bl	8006350 <ptr_to_mem>
 80067b2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2200      	movs	r2, #0
 80067b8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	89ba      	ldrh	r2, [r7, #12]
 80067be:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	8afa      	ldrh	r2, [r7, #22]
 80067c4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	89fa      	ldrh	r2, [r7, #14]
 80067ca:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80067d4:	d047      	beq.n	8006866 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fdb8 	bl	8006350 <ptr_to_mem>
 80067e0:	4602      	mov	r2, r0
 80067e2:	89fb      	ldrh	r3, [r7, #14]
 80067e4:	8053      	strh	r3, [r2, #2]
 80067e6:	e03e      	b.n	8006866 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80067e8:	8bfb      	ldrh	r3, [r7, #30]
 80067ea:	f103 0214 	add.w	r2, r3, #20
 80067ee:	8abb      	ldrh	r3, [r7, #20]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d838      	bhi.n	8006866 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80067f4:	8afa      	ldrh	r2, [r7, #22]
 80067f6:	8bfb      	ldrh	r3, [r7, #30]
 80067f8:	4413      	add	r3, r2
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3308      	adds	r3, #8
 80067fe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006808:	d106      	bne.n	8006818 <mem_trim+0x180>
 800680a:	4b1b      	ldr	r3, [pc, #108]	@ (8006878 <mem_trim+0x1e0>)
 800680c:	f240 3216 	movw	r2, #790	@ 0x316
 8006810:	491d      	ldr	r1, [pc, #116]	@ (8006888 <mem_trim+0x1f0>)
 8006812:	481b      	ldr	r0, [pc, #108]	@ (8006880 <mem_trim+0x1e8>)
 8006814:	f00a fb5a 	bl	8010ecc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fd98 	bl	8006350 <ptr_to_mem>
 8006820:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006822:	4b1a      	ldr	r3, [pc, #104]	@ (800688c <mem_trim+0x1f4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	429a      	cmp	r2, r3
 800682a:	d202      	bcs.n	8006832 <mem_trim+0x19a>
      lfree = mem2;
 800682c:	4a17      	ldr	r2, [pc, #92]	@ (800688c <mem_trim+0x1f4>)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2200      	movs	r2, #0
 8006836:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	881a      	ldrh	r2, [r3, #0]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	8afa      	ldrh	r2, [r7, #22]
 8006844:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	89fa      	ldrh	r2, [r7, #14]
 800684a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006854:	d007      	beq.n	8006866 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fd78 	bl	8006350 <ptr_to_mem>
 8006860:	4602      	mov	r2, r0
 8006862:	89fb      	ldrh	r3, [r7, #14]
 8006864:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006866:	687b      	ldr	r3, [r7, #4]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20004fa8 	.word	0x20004fa8
 8006874:	20004fac 	.word	0x20004fac
 8006878:	08011fe4 	.word	0x08011fe4
 800687c:	08012154 	.word	0x08012154
 8006880:	0801202c 	.word	0x0801202c
 8006884:	0801216c 	.word	0x0801216c
 8006888:	0801218c 	.word	0x0801218c
 800688c:	20004fb0 	.word	0x20004fb0

08006890 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800689a:	88fb      	ldrh	r3, [r7, #6]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <mem_malloc+0x14>
    return NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e0d9      	b.n	8006a58 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	3303      	adds	r3, #3
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f023 0303 	bic.w	r3, r3, #3
 80068ae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80068b0:	8bbb      	ldrh	r3, [r7, #28]
 80068b2:	2b0b      	cmp	r3, #11
 80068b4:	d801      	bhi.n	80068ba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80068b6:	230c      	movs	r3, #12
 80068b8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80068ba:	8bbb      	ldrh	r3, [r7, #28]
 80068bc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80068c0:	d803      	bhi.n	80068ca <mem_malloc+0x3a>
 80068c2:	8bba      	ldrh	r2, [r7, #28]
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d201      	bcs.n	80068ce <mem_malloc+0x3e>
    return NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e0c4      	b.n	8006a58 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80068ce:	4b64      	ldr	r3, [pc, #400]	@ (8006a60 <mem_malloc+0x1d0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff fd4e 	bl	8006374 <mem_to_ptr>
 80068d8:	4603      	mov	r3, r0
 80068da:	83fb      	strh	r3, [r7, #30]
 80068dc:	e0b4      	b.n	8006a48 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80068de:	8bfb      	ldrh	r3, [r7, #30]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fd35 	bl	8006350 <ptr_to_mem>
 80068e6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	791b      	ldrb	r3, [r3, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 80a4 	bne.w	8006a3a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	8bfb      	ldrh	r3, [r7, #30]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	f1a3 0208 	sub.w	r2, r3, #8
 8006900:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006902:	429a      	cmp	r2, r3
 8006904:	f0c0 8099 	bcc.w	8006a3a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	8bfb      	ldrh	r3, [r7, #30]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	f1a3 0208 	sub.w	r2, r3, #8
 8006916:	8bbb      	ldrh	r3, [r7, #28]
 8006918:	3314      	adds	r3, #20
 800691a:	429a      	cmp	r2, r3
 800691c:	d333      	bcc.n	8006986 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800691e:	8bfa      	ldrh	r2, [r7, #30]
 8006920:	8bbb      	ldrh	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	b29b      	uxth	r3, r3
 8006926:	3308      	adds	r3, #8
 8006928:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800692a:	8a7b      	ldrh	r3, [r7, #18]
 800692c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006930:	d106      	bne.n	8006940 <mem_malloc+0xb0>
 8006932:	4b4c      	ldr	r3, [pc, #304]	@ (8006a64 <mem_malloc+0x1d4>)
 8006934:	f240 3287 	movw	r2, #903	@ 0x387
 8006938:	494b      	ldr	r1, [pc, #300]	@ (8006a68 <mem_malloc+0x1d8>)
 800693a:	484c      	ldr	r0, [pc, #304]	@ (8006a6c <mem_malloc+0x1dc>)
 800693c:	f00a fac6 	bl	8010ecc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006940:	8a7b      	ldrh	r3, [r7, #18]
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff fd04 	bl	8006350 <ptr_to_mem>
 8006948:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	881a      	ldrh	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8bfa      	ldrh	r2, [r7, #30]
 800695c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	8a7a      	ldrh	r2, [r7, #18]
 8006962:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2201      	movs	r2, #1
 8006968:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006972:	d00b      	beq.n	800698c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fce9 	bl	8006350 <ptr_to_mem>
 800697e:	4602      	mov	r2, r0
 8006980:	8a7b      	ldrh	r3, [r7, #18]
 8006982:	8053      	strh	r3, [r2, #2]
 8006984:	e002      	b.n	800698c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2201      	movs	r2, #1
 800698a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800698c:	4b34      	ldr	r3, [pc, #208]	@ (8006a60 <mem_malloc+0x1d0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	429a      	cmp	r2, r3
 8006994:	d127      	bne.n	80069e6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006996:	4b32      	ldr	r3, [pc, #200]	@ (8006a60 <mem_malloc+0x1d0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800699c:	e005      	b.n	80069aa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fcd4 	bl	8006350 <ptr_to_mem>
 80069a8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	791b      	ldrb	r3, [r3, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <mem_malloc+0x12c>
 80069b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006a70 <mem_malloc+0x1e0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d1f0      	bne.n	800699e <mem_malloc+0x10e>
          }
          lfree = cur;
 80069bc:	4a28      	ldr	r2, [pc, #160]	@ (8006a60 <mem_malloc+0x1d0>)
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80069c2:	4b27      	ldr	r3, [pc, #156]	@ (8006a60 <mem_malloc+0x1d0>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a70 <mem_malloc+0x1e0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d00b      	beq.n	80069e6 <mem_malloc+0x156>
 80069ce:	4b24      	ldr	r3, [pc, #144]	@ (8006a60 <mem_malloc+0x1d0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	791b      	ldrb	r3, [r3, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d006      	beq.n	80069e6 <mem_malloc+0x156>
 80069d8:	4b22      	ldr	r3, [pc, #136]	@ (8006a64 <mem_malloc+0x1d4>)
 80069da:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80069de:	4925      	ldr	r1, [pc, #148]	@ (8006a74 <mem_malloc+0x1e4>)
 80069e0:	4822      	ldr	r0, [pc, #136]	@ (8006a6c <mem_malloc+0x1dc>)
 80069e2:	f00a fa73 	bl	8010ecc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80069e6:	8bba      	ldrh	r2, [r7, #28]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4413      	add	r3, r2
 80069ec:	3308      	adds	r3, #8
 80069ee:	4a20      	ldr	r2, [pc, #128]	@ (8006a70 <mem_malloc+0x1e0>)
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d906      	bls.n	8006a04 <mem_malloc+0x174>
 80069f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a64 <mem_malloc+0x1d4>)
 80069f8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80069fc:	491e      	ldr	r1, [pc, #120]	@ (8006a78 <mem_malloc+0x1e8>)
 80069fe:	481b      	ldr	r0, [pc, #108]	@ (8006a6c <mem_malloc+0x1dc>)
 8006a00:	f00a fa64 	bl	8010ecc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d006      	beq.n	8006a1c <mem_malloc+0x18c>
 8006a0e:	4b15      	ldr	r3, [pc, #84]	@ (8006a64 <mem_malloc+0x1d4>)
 8006a10:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006a14:	4919      	ldr	r1, [pc, #100]	@ (8006a7c <mem_malloc+0x1ec>)
 8006a16:	4815      	ldr	r0, [pc, #84]	@ (8006a6c <mem_malloc+0x1dc>)
 8006a18:	f00a fa58 	bl	8010ecc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d006      	beq.n	8006a34 <mem_malloc+0x1a4>
 8006a26:	4b0f      	ldr	r3, [pc, #60]	@ (8006a64 <mem_malloc+0x1d4>)
 8006a28:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006a2c:	4914      	ldr	r1, [pc, #80]	@ (8006a80 <mem_malloc+0x1f0>)
 8006a2e:	480f      	ldr	r0, [pc, #60]	@ (8006a6c <mem_malloc+0x1dc>)
 8006a30:	f00a fa4c 	bl	8010ecc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3308      	adds	r3, #8
 8006a38:	e00e      	b.n	8006a58 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006a3a:	8bfb      	ldrh	r3, [r7, #30]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff fc87 	bl	8006350 <ptr_to_mem>
 8006a42:	4603      	mov	r3, r0
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006a48:	8bfa      	ldrh	r2, [r7, #30]
 8006a4a:	8bbb      	ldrh	r3, [r7, #28]
 8006a4c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8006a50:	429a      	cmp	r2, r3
 8006a52:	f4ff af44 	bcc.w	80068de <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20004fb0 	.word	0x20004fb0
 8006a64:	08011fe4 	.word	0x08011fe4
 8006a68:	0801218c 	.word	0x0801218c
 8006a6c:	0801202c 	.word	0x0801202c
 8006a70:	20004fac 	.word	0x20004fac
 8006a74:	080121a0 	.word	0x080121a0
 8006a78:	080121bc 	.word	0x080121bc
 8006a7c:	080121ec 	.word	0x080121ec
 8006a80:	0801221c 	.word	0x0801221c

08006a84 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	3303      	adds	r3, #3
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e011      	b.n	8006aca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	889b      	ldrh	r3, [r3, #4]
 8006abc:	461a      	mov	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	88db      	ldrh	r3, [r3, #6]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	dbe7      	blt.n	8006aa6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006ad6:	bf00      	nop
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006aea:	2300      	movs	r3, #0
 8006aec:	80fb      	strh	r3, [r7, #6]
 8006aee:	e009      	b.n	8006b04 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006af0:	88fb      	ldrh	r3, [r7, #6]
 8006af2:	4a08      	ldr	r2, [pc, #32]	@ (8006b14 <memp_init+0x30>)
 8006af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff ffc3 	bl	8006a84 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	3301      	adds	r3, #1
 8006b02:	80fb      	strh	r3, [r7, #6]
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d9f2      	bls.n	8006af0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	0801537c 	.word	0x0801537c

08006b18 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d012      	beq.n	8006b54 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d006      	beq.n	8006b50 <do_memp_malloc_pool+0x38>
 8006b42:	4b07      	ldr	r3, [pc, #28]	@ (8006b60 <do_memp_malloc_pool+0x48>)
 8006b44:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006b48:	4906      	ldr	r1, [pc, #24]	@ (8006b64 <do_memp_malloc_pool+0x4c>)
 8006b4a:	4807      	ldr	r0, [pc, #28]	@ (8006b68 <do_memp_malloc_pool+0x50>)
 8006b4c:	f00a f9be 	bl	8010ecc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	e000      	b.n	8006b56 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	080122a8 	.word	0x080122a8
 8006b64:	080122d8 	.word	0x080122d8
 8006b68:	080122fc 	.word	0x080122fc

08006b6c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <memp_malloc_pool+0x1c>
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba4 <memp_malloc_pool+0x38>)
 8006b7c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006b80:	4909      	ldr	r1, [pc, #36]	@ (8006ba8 <memp_malloc_pool+0x3c>)
 8006b82:	480a      	ldr	r0, [pc, #40]	@ (8006bac <memp_malloc_pool+0x40>)
 8006b84:	f00a f9a2 	bl	8010ecc <iprintf>
  if (desc == NULL) {
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <memp_malloc_pool+0x26>
    return NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e003      	b.n	8006b9a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff ffc0 	bl	8006b18 <do_memp_malloc_pool>
 8006b98:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	080122a8 	.word	0x080122a8
 8006ba8:	08012324 	.word	0x08012324
 8006bac:	080122fc 	.word	0x080122fc

08006bb0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d908      	bls.n	8006bd2 <memp_malloc+0x22>
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bec <memp_malloc+0x3c>)
 8006bc2:	f240 1257 	movw	r2, #343	@ 0x157
 8006bc6:	490a      	ldr	r1, [pc, #40]	@ (8006bf0 <memp_malloc+0x40>)
 8006bc8:	480a      	ldr	r0, [pc, #40]	@ (8006bf4 <memp_malloc+0x44>)
 8006bca:	f00a f97f 	bl	8010ecc <iprintf>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e008      	b.n	8006be4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	4a08      	ldr	r2, [pc, #32]	@ (8006bf8 <memp_malloc+0x48>)
 8006bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff ff9c 	bl	8006b18 <do_memp_malloc_pool>
 8006be0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006be2:	68fb      	ldr	r3, [r7, #12]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	080122a8 	.word	0x080122a8
 8006bf0:	08012338 	.word	0x08012338
 8006bf4:	080122fc 	.word	0x080122fc
 8006bf8:	0801537c 	.word	0x0801537c

08006bfc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d006      	beq.n	8006c1e <do_memp_free_pool+0x22>
 8006c10:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <do_memp_free_pool+0x40>)
 8006c12:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006c16:	490a      	ldr	r1, [pc, #40]	@ (8006c40 <do_memp_free_pool+0x44>)
 8006c18:	480a      	ldr	r0, [pc, #40]	@ (8006c44 <do_memp_free_pool+0x48>)
 8006c1a:	f00a f957 	bl	8010ecc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	080122a8 	.word	0x080122a8
 8006c40:	08012358 	.word	0x08012358
 8006c44:	080122fc 	.word	0x080122fc

08006c48 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <memp_free_pool+0x1e>
 8006c58:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <memp_free_pool+0x3c>)
 8006c5a:	f240 1295 	movw	r2, #405	@ 0x195
 8006c5e:	490a      	ldr	r1, [pc, #40]	@ (8006c88 <memp_free_pool+0x40>)
 8006c60:	480a      	ldr	r0, [pc, #40]	@ (8006c8c <memp_free_pool+0x44>)
 8006c62:	f00a f933 	bl	8010ecc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <memp_free_pool+0x34>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff ffc1 	bl	8006bfc <do_memp_free_pool>
 8006c7a:	e000      	b.n	8006c7e <memp_free_pool+0x36>
    return;
 8006c7c:	bf00      	nop
}
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	080122a8 	.word	0x080122a8
 8006c88:	08012324 	.word	0x08012324
 8006c8c:	080122fc 	.word	0x080122fc

08006c90 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	6039      	str	r1, [r7, #0]
 8006c9a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d907      	bls.n	8006cb2 <memp_free+0x22>
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd4 <memp_free+0x44>)
 8006ca4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006ca8:	490b      	ldr	r1, [pc, #44]	@ (8006cd8 <memp_free+0x48>)
 8006caa:	480c      	ldr	r0, [pc, #48]	@ (8006cdc <memp_free+0x4c>)
 8006cac:	f00a f90e 	bl	8010ecc <iprintf>
 8006cb0:	e00c      	b.n	8006ccc <memp_free+0x3c>

  if (mem == NULL) {
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	4a09      	ldr	r2, [pc, #36]	@ (8006ce0 <memp_free+0x50>)
 8006cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff ff9a 	bl	8006bfc <do_memp_free_pool>
 8006cc8:	e000      	b.n	8006ccc <memp_free+0x3c>
    return;
 8006cca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	080122a8 	.word	0x080122a8
 8006cd8:	08012378 	.word	0x08012378
 8006cdc:	080122fc 	.word	0x080122fc
 8006ce0:	0801537c 	.word	0x0801537c

08006ce4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006ce8:	bf00      	nop
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d108      	bne.n	8006d1a <netif_add+0x26>
 8006d08:	4b96      	ldr	r3, [pc, #600]	@ (8006f64 <netif_add+0x270>)
 8006d0a:	f240 1227 	movw	r2, #295	@ 0x127
 8006d0e:	4996      	ldr	r1, [pc, #600]	@ (8006f68 <netif_add+0x274>)
 8006d10:	4896      	ldr	r0, [pc, #600]	@ (8006f6c <netif_add+0x278>)
 8006d12:	f00a f8db 	bl	8010ecc <iprintf>
 8006d16:	2300      	movs	r3, #0
 8006d18:	e14c      	b.n	8006fb4 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d108      	bne.n	8006d32 <netif_add+0x3e>
 8006d20:	4b90      	ldr	r3, [pc, #576]	@ (8006f64 <netif_add+0x270>)
 8006d22:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006d26:	4992      	ldr	r1, [pc, #584]	@ (8006f70 <netif_add+0x27c>)
 8006d28:	4890      	ldr	r0, [pc, #576]	@ (8006f6c <netif_add+0x278>)
 8006d2a:	f00a f8cf 	bl	8010ecc <iprintf>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e140      	b.n	8006fb4 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006d38:	4b8e      	ldr	r3, [pc, #568]	@ (8006f74 <netif_add+0x280>)
 8006d3a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006d42:	4b8c      	ldr	r3, [pc, #560]	@ (8006f74 <netif_add+0x280>)
 8006d44:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006d4c:	4b89      	ldr	r3, [pc, #548]	@ (8006f74 <netif_add+0x280>)
 8006d4e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a84      	ldr	r2, [pc, #528]	@ (8006f78 <netif_add+0x284>)
 8006d66:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006d82:	4b7e      	ldr	r3, [pc, #504]	@ (8006f7c <netif_add+0x288>)
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d90:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f9f5 	bl	8007188 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	4798      	blx	r3
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <netif_add+0xba>
    return NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e102      	b.n	8006fb4 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006db4:	2bff      	cmp	r3, #255	@ 0xff
 8006db6:	d103      	bne.n	8006dc0 <netif_add+0xcc>
        netif->num = 0;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006dc4:	4b6e      	ldr	r3, [pc, #440]	@ (8006f80 <netif_add+0x28c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e02b      	b.n	8006e24 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d106      	bne.n	8006de2 <netif_add+0xee>
 8006dd4:	4b63      	ldr	r3, [pc, #396]	@ (8006f64 <netif_add+0x270>)
 8006dd6:	f240 128b 	movw	r2, #395	@ 0x18b
 8006dda:	496a      	ldr	r1, [pc, #424]	@ (8006f84 <netif_add+0x290>)
 8006ddc:	4863      	ldr	r0, [pc, #396]	@ (8006f6c <netif_add+0x278>)
 8006dde:	f00a f875 	bl	8010ecc <iprintf>
        num_netifs++;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	3301      	adds	r3, #1
 8006de6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2bff      	cmp	r3, #255	@ 0xff
 8006dec:	dd06      	ble.n	8006dfc <netif_add+0x108>
 8006dee:	4b5d      	ldr	r3, [pc, #372]	@ (8006f64 <netif_add+0x270>)
 8006df0:	f240 128d 	movw	r2, #397	@ 0x18d
 8006df4:	4964      	ldr	r1, [pc, #400]	@ (8006f88 <netif_add+0x294>)
 8006df6:	485d      	ldr	r0, [pc, #372]	@ (8006f6c <netif_add+0x278>)
 8006df8:	f00a f868 	bl	8010ecc <iprintf>
        if (netif2->num == netif->num) {
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d108      	bne.n	8006e1e <netif_add+0x12a>
          netif->num++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e12:	3301      	adds	r3, #1
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006e1c:	e005      	b.n	8006e2a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1d0      	bne.n	8006dcc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1be      	bne.n	8006dae <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e36:	2bfe      	cmp	r3, #254	@ 0xfe
 8006e38:	d103      	bne.n	8006e42 <netif_add+0x14e>
    netif_num = 0;
 8006e3a:	4b50      	ldr	r3, [pc, #320]	@ (8006f7c <netif_add+0x288>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e006      	b.n	8006e50 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e48:	3301      	adds	r3, #1
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8006f7c <netif_add+0x288>)
 8006e4e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006e50:	4b4b      	ldr	r3, [pc, #300]	@ (8006f80 <netif_add+0x28c>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006e58:	4a49      	ldr	r2, [pc, #292]	@ (8006f80 <netif_add+0x28c>)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006e64:	4619      	mov	r1, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4847      	ldr	r0, [pc, #284]	@ (8006f8c <netif_add+0x298>)
 8006e70:	f00a f82c 	bl	8010ecc <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 8006e74:	4846      	ldr	r0, [pc, #280]	@ (8006f90 <netif_add+0x29c>)
 8006e76:	f00a f829 	bl	8010ecc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <netif_add+0x194>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	4619      	mov	r1, r3
 8006e86:	e000      	b.n	8006e8a <netif_add+0x196>
 8006e88:	2100      	movs	r1, #0
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <netif_add+0x1a6>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	3301      	adds	r3, #1
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	e000      	b.n	8006e9c <netif_add+0x1a8>
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <netif_add+0x1b8>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	3302      	adds	r3, #2
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	e000      	b.n	8006eae <netif_add+0x1ba>
 8006eac:	2000      	movs	r0, #0
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <netif_add+0x1c8>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3303      	adds	r3, #3
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	e000      	b.n	8006ebe <netif_add+0x1ca>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	4834      	ldr	r0, [pc, #208]	@ (8006f94 <netif_add+0x2a0>)
 8006ec4:	f00a f802 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8006ec8:	4833      	ldr	r0, [pc, #204]	@ (8006f98 <netif_add+0x2a4>)
 8006eca:	f009 ffff 	bl	8010ecc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <netif_add+0x1e8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	e000      	b.n	8006ede <netif_add+0x1ea>
 8006edc:	2100      	movs	r1, #0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <netif_add+0x1fa>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	e000      	b.n	8006ef0 <netif_add+0x1fc>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <netif_add+0x20c>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3302      	adds	r3, #2
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	e000      	b.n	8006f02 <netif_add+0x20e>
 8006f00:	2000      	movs	r0, #0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <netif_add+0x21c>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3303      	adds	r3, #3
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	e000      	b.n	8006f12 <netif_add+0x21e>
 8006f10:	2300      	movs	r3, #0
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	4603      	mov	r3, r0
 8006f16:	481f      	ldr	r0, [pc, #124]	@ (8006f94 <netif_add+0x2a0>)
 8006f18:	f009 ffd8 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8006f1c:	481f      	ldr	r0, [pc, #124]	@ (8006f9c <netif_add+0x2a8>)
 8006f1e:	f009 ffd5 	bl	8010ecc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <netif_add+0x23c>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	e000      	b.n	8006f32 <netif_add+0x23e>
 8006f30:	2100      	movs	r1, #0
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <netif_add+0x24e>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	e000      	b.n	8006f44 <netif_add+0x250>
 8006f42:	2200      	movs	r2, #0
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <netif_add+0x260>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	e000      	b.n	8006f56 <netif_add+0x262>
 8006f54:	2000      	movs	r0, #0
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d021      	beq.n	8006fa0 <netif_add+0x2ac>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	3303      	adds	r3, #3
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	e01e      	b.n	8006fa2 <netif_add+0x2ae>
 8006f64:	08012394 	.word	0x08012394
 8006f68:	08012428 	.word	0x08012428
 8006f6c:	080123e4 	.word	0x080123e4
 8006f70:	08012444 	.word	0x08012444
 8006f74:	080153e0 	.word	0x080153e0
 8006f78:	0800748b 	.word	0x0800748b
 8006f7c:	20007ee8 	.word	0x20007ee8
 8006f80:	20007ee0 	.word	0x20007ee0
 8006f84:	08012468 	.word	0x08012468
 8006f88:	0801247c 	.word	0x0801247c
 8006f8c:	080124ac 	.word	0x080124ac
 8006f90:	080124cc 	.word	0x080124cc
 8006f94:	080124d4 	.word	0x080124d4
 8006f98:	080124e4 	.word	0x080124e4
 8006f9c:	080124f0 	.word	0x080124f0
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	4805      	ldr	r0, [pc, #20]	@ (8006fbc <netif_add+0x2c8>)
 8006fa8:	f009 ff90 	bl	8010ecc <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8006fac:	200a      	movs	r0, #10
 8006fae:	f009 ff9f 	bl	8010ef0 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	080124d4 	.word	0x080124d4

08006fc0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f002 fbb9 	bl	8009744 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f007 f927 	bl	800e228 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <netif_do_set_ipaddr+0x20>
 8006ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8007070 <netif_do_set_ipaddr+0x8c>)
 8006ff8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006ffc:	491d      	ldr	r1, [pc, #116]	@ (8007074 <netif_do_set_ipaddr+0x90>)
 8006ffe:	481e      	ldr	r0, [pc, #120]	@ (8007078 <netif_do_set_ipaddr+0x94>)
 8007000:	f009 ff64 	bl	8010ecc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <netif_do_set_ipaddr+0x34>
 800700a:	4b19      	ldr	r3, [pc, #100]	@ (8007070 <netif_do_set_ipaddr+0x8c>)
 800700c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007010:	4918      	ldr	r1, [pc, #96]	@ (8007074 <netif_do_set_ipaddr+0x90>)
 8007012:	4819      	ldr	r0, [pc, #100]	@ (8007078 <netif_do_set_ipaddr+0x94>)
 8007014:	f009 ff5a 	bl	8010ecc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3304      	adds	r3, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d01f      	beq.n	8007066 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3304      	adds	r3, #4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 8007036:	4811      	ldr	r0, [pc, #68]	@ (800707c <netif_do_set_ipaddr+0x98>)
 8007038:	f009 ffb8 	bl	8010fac <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800703c:	f107 0314 	add.w	r3, r7, #20
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff ffbc 	bl	8006fc0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <netif_do_set_ipaddr+0x70>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	e000      	b.n	8007056 <netif_do_set_ipaddr+0x72>
 8007054:	2300      	movs	r3, #0
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800705a:	2101      	movs	r1, #1
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f92d 	bl	80072bc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	08012394 	.word	0x08012394
 8007074:	080124f8 	.word	0x080124f8
 8007078:	080123e4 	.word	0x080123e4
 800707c:	08012508 	.word	0x08012508

08007080 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007080:	b5b0      	push	{r4, r5, r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af04      	add	r7, sp, #16
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3308      	adds	r3, #8
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d02d      	beq.n	80070f6 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <netif_do_set_netmask+0x26>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	e000      	b.n	80070a8 <netif_do_set_netmask+0x28>
 80070a6:	2300      	movs	r3, #0
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80070b2:	4618      	mov	r0, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80070ba:	461c      	mov	r4, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3308      	adds	r3, #8
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	461d      	mov	r5, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3308      	adds	r3, #8
 80070c8:	3301      	adds	r3, #1
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3308      	adds	r3, #8
 80070d2:	3302      	adds	r3, #2
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	4619      	mov	r1, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3308      	adds	r3, #8
 80070dc:	3303      	adds	r3, #3
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	9302      	str	r3, [sp, #8]
 80070e2:	9101      	str	r1, [sp, #4]
 80070e4:	9200      	str	r2, [sp, #0]
 80070e6:	462b      	mov	r3, r5
 80070e8:	4622      	mov	r2, r4
 80070ea:	4601      	mov	r1, r0
 80070ec:	4804      	ldr	r0, [pc, #16]	@ (8007100 <netif_do_set_netmask+0x80>)
 80070ee:	f009 feed 	bl	8010ecc <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007100:	08012558 	.word	0x08012558

08007104 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007104:	b5b0      	push	{r4, r5, r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af04      	add	r7, sp, #16
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	330c      	adds	r3, #12
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d02d      	beq.n	800717a <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <netif_do_set_gw+0x26>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	e000      	b.n	800712c <netif_do_set_gw+0x28>
 800712a:	2300      	movs	r3, #0
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007136:	4618      	mov	r0, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800713e:	461c      	mov	r4, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	330c      	adds	r3, #12
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	461d      	mov	r5, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	330c      	adds	r3, #12
 800714c:	3301      	adds	r3, #1
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	330c      	adds	r3, #12
 8007156:	3302      	adds	r3, #2
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	4619      	mov	r1, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	330c      	adds	r3, #12
 8007160:	3303      	adds	r3, #3
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	9302      	str	r3, [sp, #8]
 8007166:	9101      	str	r1, [sp, #4]
 8007168:	9200      	str	r2, [sp, #0]
 800716a:	462b      	mov	r3, r5
 800716c:	4622      	mov	r2, r4
 800716e:	4601      	mov	r1, r0
 8007170:	4804      	ldr	r0, [pc, #16]	@ (8007184 <netif_do_set_gw+0x80>)
 8007172:	f009 feab 	bl	8010ecc <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bdb0      	pop	{r4, r5, r7, pc}
 8007184:	080125b8 	.word	0x080125b8

08007188 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80071a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007218 <netif_set_addr+0x90>)
 80071a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80071ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007218 <netif_set_addr+0x90>)
 80071b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80071b8:	4b17      	ldr	r3, [pc, #92]	@ (8007218 <netif_set_addr+0x90>)
 80071ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <netif_set_addr+0x42>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <netif_set_addr+0x46>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <netif_set_addr+0x48>
 80071ce:	2300      	movs	r3, #0
 80071d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d006      	beq.n	80071e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80071d8:	f107 0310 	add.w	r3, r7, #16
 80071dc:	461a      	mov	r2, r3
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff feff 	bl	8006fe4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff ff48 	bl	8007080 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff ff85 	bl	8007104 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	461a      	mov	r2, r3
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff feeb 	bl	8006fe4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800720e:	bf00      	nop
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	080153e0 	.word	0x080153e0

0800721c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007224:	4a0d      	ldr	r2, [pc, #52]	@ (800725c <netif_set_default+0x40>)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d004      	beq.n	800723a <netif_set_default+0x1e>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007236:	4619      	mov	r1, r3
 8007238:	e000      	b.n	800723c <netif_set_default+0x20>
 800723a:	2127      	movs	r1, #39	@ 0x27
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <netif_set_default+0x2e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007248:	e000      	b.n	800724c <netif_set_default+0x30>
 800724a:	2327      	movs	r3, #39	@ 0x27
 800724c:	461a      	mov	r2, r3
 800724e:	4804      	ldr	r0, [pc, #16]	@ (8007260 <netif_set_default+0x44>)
 8007250:	f009 fe3c 	bl	8010ecc <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20007ee4 	.word	0x20007ee4
 8007260:	0801262c 	.word	0x0801262c

08007264 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d107      	bne.n	8007282 <netif_set_up+0x1e>
 8007272:	4b0f      	ldr	r3, [pc, #60]	@ (80072b0 <netif_set_up+0x4c>)
 8007274:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007278:	490e      	ldr	r1, [pc, #56]	@ (80072b4 <netif_set_up+0x50>)
 800727a:	480f      	ldr	r0, [pc, #60]	@ (80072b8 <netif_set_up+0x54>)
 800727c:	f009 fe26 	bl	8010ecc <iprintf>
 8007280:	e013      	b.n	80072aa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10c      	bne.n	80072aa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072a2:	2103      	movs	r1, #3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f809 	bl	80072bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	08012394 	.word	0x08012394
 80072b4:	08012654 	.word	0x08012654
 80072b8:	080123e4 	.word	0x080123e4

080072bc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <netif_issue_reports+0x20>
 80072ce:	4b18      	ldr	r3, [pc, #96]	@ (8007330 <netif_issue_reports+0x74>)
 80072d0:	f240 326d 	movw	r2, #877	@ 0x36d
 80072d4:	4917      	ldr	r1, [pc, #92]	@ (8007334 <netif_issue_reports+0x78>)
 80072d6:	4818      	ldr	r0, [pc, #96]	@ (8007338 <netif_issue_reports+0x7c>)
 80072d8:	f009 fdf8 	bl	8010ecc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072e2:	f003 0304 	and.w	r3, r3, #4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d01e      	beq.n	8007328 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072f0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d017      	beq.n	8007328 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d013      	beq.n	800732a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3304      	adds	r3, #4
 8007306:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3304      	adds	r3, #4
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f007 ff5d 	bl	800f1e0 <etharp_request>
 8007326:	e000      	b.n	800732a <netif_issue_reports+0x6e>
    return;
 8007328:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	08012394 	.word	0x08012394
 8007334:	08012670 	.word	0x08012670
 8007338:	080123e4 	.word	0x080123e4

0800733c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d107      	bne.n	800735a <netif_set_down+0x1e>
 800734a:	4b12      	ldr	r3, [pc, #72]	@ (8007394 <netif_set_down+0x58>)
 800734c:	f240 329b 	movw	r2, #923	@ 0x39b
 8007350:	4911      	ldr	r1, [pc, #68]	@ (8007398 <netif_set_down+0x5c>)
 8007352:	4812      	ldr	r0, [pc, #72]	@ (800739c <netif_set_down+0x60>)
 8007354:	f009 fdba 	bl	8010ecc <iprintf>
 8007358:	e019      	b.n	800738e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d012      	beq.n	800738e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	b2da      	uxtb	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f007 fae7 	bl	800e95c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	08012394 	.word	0x08012394
 8007398:	08012694 	.word	0x08012694
 800739c:	080123e4 	.word	0x080123e4

080073a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d107      	bne.n	80073be <netif_set_link_up+0x1e>
 80073ae:	4b13      	ldr	r3, [pc, #76]	@ (80073fc <netif_set_link_up+0x5c>)
 80073b0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80073b4:	4912      	ldr	r1, [pc, #72]	@ (8007400 <netif_set_link_up+0x60>)
 80073b6:	4813      	ldr	r0, [pc, #76]	@ (8007404 <netif_set_link_up+0x64>)
 80073b8:	f009 fd88 	bl	8010ecc <iprintf>
 80073bc:	e01b      	b.n	80073f6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d114      	bne.n	80073f6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073d2:	f043 0304 	orr.w	r3, r3, #4
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80073de:	2103      	movs	r1, #3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff ff6b 	bl	80072bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <netif_set_link_up+0x56>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	08012394 	.word	0x08012394
 8007400:	080126b4 	.word	0x080126b4
 8007404:	080123e4 	.word	0x080123e4

08007408 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d107      	bne.n	8007426 <netif_set_link_down+0x1e>
 8007416:	4b11      	ldr	r3, [pc, #68]	@ (800745c <netif_set_link_down+0x54>)
 8007418:	f240 4206 	movw	r2, #1030	@ 0x406
 800741c:	4910      	ldr	r1, [pc, #64]	@ (8007460 <netif_set_link_down+0x58>)
 800741e:	4811      	ldr	r0, [pc, #68]	@ (8007464 <netif_set_link_down+0x5c>)
 8007420:	f009 fd54 	bl	8010ecc <iprintf>
 8007424:	e017      	b.n	8007456 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800743a:	f023 0304 	bic.w	r3, r3, #4
 800743e:	b2da      	uxtb	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <netif_set_link_down+0x4e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	08012394 	.word	0x08012394
 8007460:	080126d8 	.word	0x080126d8
 8007464:	080123e4 	.word	0x080123e4

08007468 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	61da      	str	r2, [r3, #28]
  }
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007496:	f06f 030b 	mvn.w	r3, #11
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d013      	beq.n	80074e0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80074b8:	4b0d      	ldr	r3, [pc, #52]	@ (80074f0 <netif_get_by_index+0x48>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	60fb      	str	r3, [r7, #12]
 80074be:	e00c      	b.n	80074da <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80074c6:	3301      	adds	r3, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	79fa      	ldrb	r2, [r7, #7]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d101      	bne.n	80074d4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	e006      	b.n	80074e2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1ef      	bne.n	80074c0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20007ee0 	.word	0x20007ee0

080074f4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80074fa:	4b0c      	ldr	r3, [pc, #48]	@ (800752c <pbuf_free_ooseq+0x38>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007500:	4b0b      	ldr	r3, [pc, #44]	@ (8007530 <pbuf_free_ooseq+0x3c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	e00a      	b.n	800751e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f002 f955 	bl	80097c0 <tcp_free_ooseq>
      return;
 8007516:	e005      	b.n	8007524 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	607b      	str	r3, [r7, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1f1      	bne.n	8007508 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20007ee9 	.word	0x20007ee9
 8007530:	20007ef8 	.word	0x20007ef8

08007534 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007538:	4b03      	ldr	r3, [pc, #12]	@ (8007548 <pbuf_pool_is_empty+0x14>)
 800753a:	2201      	movs	r2, #1
 800753c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800753e:	bf00      	nop
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	20007ee9 	.word	0x20007ee9

0800754c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	4611      	mov	r1, r2
 8007558:	461a      	mov	r2, r3
 800755a:	460b      	mov	r3, r1
 800755c:	80fb      	strh	r3, [r7, #6]
 800755e:	4613      	mov	r3, r2
 8007560:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	88fa      	ldrh	r2, [r7, #6]
 8007572:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	88ba      	ldrh	r2, [r7, #4]
 8007578:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800757a:	8b3b      	ldrh	r3, [r7, #24]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	7f3a      	ldrb	r2, [r7, #28]
 8007586:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	73da      	strb	r2, [r3, #15]
}
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	@ 0x30
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	4603      	mov	r3, r0
 80075a8:	71fb      	strb	r3, [r7, #7]
 80075aa:	460b      	mov	r3, r1
 80075ac:	80bb      	strh	r3, [r7, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80075b6:	887b      	ldrh	r3, [r7, #2]
 80075b8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80075bc:	d07f      	beq.n	80076be <pbuf_alloc+0x11e>
 80075be:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80075c2:	f300 80c8 	bgt.w	8007756 <pbuf_alloc+0x1b6>
 80075c6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80075ca:	d010      	beq.n	80075ee <pbuf_alloc+0x4e>
 80075cc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80075d0:	f300 80c1 	bgt.w	8007756 <pbuf_alloc+0x1b6>
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d002      	beq.n	80075de <pbuf_alloc+0x3e>
 80075d8:	2b41      	cmp	r3, #65	@ 0x41
 80075da:	f040 80bc 	bne.w	8007756 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80075de:	887a      	ldrh	r2, [r7, #2]
 80075e0:	88bb      	ldrh	r3, [r7, #4]
 80075e2:	4619      	mov	r1, r3
 80075e4:	2000      	movs	r0, #0
 80075e6:	f000 f8d1 	bl	800778c <pbuf_alloc_reference>
 80075ea:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80075ec:	e0bd      	b.n	800776a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80075f6:	88bb      	ldrh	r3, [r7, #4]
 80075f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80075fa:	2008      	movs	r0, #8
 80075fc:	f7ff fad8 	bl	8006bb0 <memp_malloc>
 8007600:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007608:	f7ff ff94 	bl	8007534 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007612:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007614:	f000 faa8 	bl	8007b68 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007618:	2300      	movs	r3, #0
 800761a:	e0a7      	b.n	800776c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800761c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800761e:	3303      	adds	r3, #3
 8007620:	b29b      	uxth	r3, r3
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	b29b      	uxth	r3, r3
 8007628:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800762c:	b29b      	uxth	r3, r3
 800762e:	8b7a      	ldrh	r2, [r7, #26]
 8007630:	4293      	cmp	r3, r2
 8007632:	bf28      	it	cs
 8007634:	4613      	movcs	r3, r2
 8007636:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007638:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800763a:	3310      	adds	r3, #16
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	4413      	add	r3, r2
 8007640:	3303      	adds	r3, #3
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	4618      	mov	r0, r3
 8007648:	89f9      	ldrh	r1, [r7, #14]
 800764a:	8b7a      	ldrh	r2, [r7, #26]
 800764c:	2300      	movs	r3, #0
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	887b      	ldrh	r3, [r7, #2]
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	460b      	mov	r3, r1
 8007656:	4601      	mov	r1, r0
 8007658:	6938      	ldr	r0, [r7, #16]
 800765a:	f7ff ff77 	bl	800754c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d006      	beq.n	8007678 <pbuf_alloc+0xd8>
 800766a:	4b42      	ldr	r3, [pc, #264]	@ (8007774 <pbuf_alloc+0x1d4>)
 800766c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007670:	4941      	ldr	r1, [pc, #260]	@ (8007778 <pbuf_alloc+0x1d8>)
 8007672:	4842      	ldr	r0, [pc, #264]	@ (800777c <pbuf_alloc+0x1dc>)
 8007674:	f009 fc2a 	bl	8010ecc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007678:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800767a:	3303      	adds	r3, #3
 800767c:	f023 0303 	bic.w	r3, r3, #3
 8007680:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007684:	d106      	bne.n	8007694 <pbuf_alloc+0xf4>
 8007686:	4b3b      	ldr	r3, [pc, #236]	@ (8007774 <pbuf_alloc+0x1d4>)
 8007688:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800768c:	493c      	ldr	r1, [pc, #240]	@ (8007780 <pbuf_alloc+0x1e0>)
 800768e:	483b      	ldr	r0, [pc, #236]	@ (800777c <pbuf_alloc+0x1dc>)
 8007690:	f009 fc1c 	bl	8010ecc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
 800769e:	e002      	b.n	80076a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80076aa:	8b7a      	ldrh	r2, [r7, #26]
 80076ac:	89fb      	ldrh	r3, [r7, #14]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80076b6:	8b7b      	ldrh	r3, [r7, #26]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d19e      	bne.n	80075fa <pbuf_alloc+0x5a>
      break;
 80076bc:	e055      	b.n	800776a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80076be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076c0:	3303      	adds	r3, #3
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f023 0303 	bic.w	r3, r3, #3
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	88bb      	ldrh	r3, [r7, #4]
 80076cc:	3303      	adds	r3, #3
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f023 0303 	bic.w	r3, r3, #3
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80076da:	8b3b      	ldrh	r3, [r7, #24]
 80076dc:	3310      	adds	r3, #16
 80076de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80076e0:	8b3a      	ldrh	r2, [r7, #24]
 80076e2:	88bb      	ldrh	r3, [r7, #4]
 80076e4:	3303      	adds	r3, #3
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d306      	bcc.n	80076fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80076ee:	8afa      	ldrh	r2, [r7, #22]
 80076f0:	88bb      	ldrh	r3, [r7, #4]
 80076f2:	3303      	adds	r3, #3
 80076f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d201      	bcs.n	8007700 <pbuf_alloc+0x160>
        return NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e035      	b.n	800776c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007700:	8afb      	ldrh	r3, [r7, #22]
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff f8c4 	bl	8006890 <mem_malloc>
 8007708:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <pbuf_alloc+0x174>
        return NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	e02b      	b.n	800776c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007714:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007716:	3310      	adds	r3, #16
 8007718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800771a:	4413      	add	r3, r2
 800771c:	3303      	adds	r3, #3
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	4618      	mov	r0, r3
 8007724:	88b9      	ldrh	r1, [r7, #4]
 8007726:	88ba      	ldrh	r2, [r7, #4]
 8007728:	2300      	movs	r3, #0
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	460b      	mov	r3, r1
 8007732:	4601      	mov	r1, r0
 8007734:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007736:	f7ff ff09 	bl	800754c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d010      	beq.n	8007768 <pbuf_alloc+0x1c8>
 8007746:	4b0b      	ldr	r3, [pc, #44]	@ (8007774 <pbuf_alloc+0x1d4>)
 8007748:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800774c:	490d      	ldr	r1, [pc, #52]	@ (8007784 <pbuf_alloc+0x1e4>)
 800774e:	480b      	ldr	r0, [pc, #44]	@ (800777c <pbuf_alloc+0x1dc>)
 8007750:	f009 fbbc 	bl	8010ecc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007754:	e008      	b.n	8007768 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007756:	4b07      	ldr	r3, [pc, #28]	@ (8007774 <pbuf_alloc+0x1d4>)
 8007758:	f240 1227 	movw	r2, #295	@ 0x127
 800775c:	490a      	ldr	r1, [pc, #40]	@ (8007788 <pbuf_alloc+0x1e8>)
 800775e:	4807      	ldr	r0, [pc, #28]	@ (800777c <pbuf_alloc+0x1dc>)
 8007760:	f009 fbb4 	bl	8010ecc <iprintf>
      return NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	e001      	b.n	800776c <pbuf_alloc+0x1cc>
      break;
 8007768:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800776c:	4618      	mov	r0, r3
 800776e:	3728      	adds	r7, #40	@ 0x28
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	08012734 	.word	0x08012734
 8007778:	08012764 	.word	0x08012764
 800777c:	08012794 	.word	0x08012794
 8007780:	080127bc 	.word	0x080127bc
 8007784:	080127f0 	.word	0x080127f0
 8007788:	0801281c 	.word	0x0801281c

0800778c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af02      	add	r7, sp, #8
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	807b      	strh	r3, [r7, #2]
 8007798:	4613      	mov	r3, r2
 800779a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800779c:	883b      	ldrh	r3, [r7, #0]
 800779e:	2b41      	cmp	r3, #65	@ 0x41
 80077a0:	d009      	beq.n	80077b6 <pbuf_alloc_reference+0x2a>
 80077a2:	883b      	ldrh	r3, [r7, #0]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d006      	beq.n	80077b6 <pbuf_alloc_reference+0x2a>
 80077a8:	4b0f      	ldr	r3, [pc, #60]	@ (80077e8 <pbuf_alloc_reference+0x5c>)
 80077aa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80077ae:	490f      	ldr	r1, [pc, #60]	@ (80077ec <pbuf_alloc_reference+0x60>)
 80077b0:	480f      	ldr	r0, [pc, #60]	@ (80077f0 <pbuf_alloc_reference+0x64>)
 80077b2:	f009 fb8b 	bl	8010ecc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80077b6:	2007      	movs	r0, #7
 80077b8:	f7ff f9fa 	bl	8006bb0 <memp_malloc>
 80077bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	e00b      	b.n	80077e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80077c8:	8879      	ldrh	r1, [r7, #2]
 80077ca:	887a      	ldrh	r2, [r7, #2]
 80077cc:	2300      	movs	r3, #0
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	883b      	ldrh	r3, [r7, #0]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	460b      	mov	r3, r1
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff feb7 	bl	800754c <pbuf_init_alloced_pbuf>
  return p;
 80077de:	68fb      	ldr	r3, [r7, #12]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	08012734 	.word	0x08012734
 80077ec:	08012838 	.word	0x08012838
 80077f0:	08012794 	.word	0x08012794

080077f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]
 8007800:	460b      	mov	r3, r1
 8007802:	81bb      	strh	r3, [r7, #12]
 8007804:	4613      	mov	r3, r2
 8007806:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800780c:	8a7b      	ldrh	r3, [r7, #18]
 800780e:	3303      	adds	r3, #3
 8007810:	f023 0203 	bic.w	r2, r3, #3
 8007814:	89bb      	ldrh	r3, [r7, #12]
 8007816:	441a      	add	r2, r3
 8007818:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800781a:	429a      	cmp	r2, r3
 800781c:	d901      	bls.n	8007822 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	e018      	b.n	8007854 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007828:	8a7b      	ldrh	r3, [r7, #18]
 800782a:	3303      	adds	r3, #3
 800782c:	f023 0303 	bic.w	r3, r3, #3
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	4413      	add	r3, r2
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e001      	b.n	800783c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	89b9      	ldrh	r1, [r7, #12]
 8007840:	89ba      	ldrh	r2, [r7, #12]
 8007842:	2302      	movs	r3, #2
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	897b      	ldrh	r3, [r7, #10]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	460b      	mov	r3, r1
 800784c:	6979      	ldr	r1, [r7, #20]
 800784e:	f7ff fe7d 	bl	800754c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007852:	687b      	ldr	r3, [r7, #4]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d106      	bne.n	800787c <pbuf_realloc+0x20>
 800786e:	4b3a      	ldr	r3, [pc, #232]	@ (8007958 <pbuf_realloc+0xfc>)
 8007870:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007874:	4939      	ldr	r1, [pc, #228]	@ (800795c <pbuf_realloc+0x100>)
 8007876:	483a      	ldr	r0, [pc, #232]	@ (8007960 <pbuf_realloc+0x104>)
 8007878:	f009 fb28 	bl	8010ecc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	891b      	ldrh	r3, [r3, #8]
 8007880:	887a      	ldrh	r2, [r7, #2]
 8007882:	429a      	cmp	r2, r3
 8007884:	d263      	bcs.n	800794e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	891a      	ldrh	r2, [r3, #8]
 800788a:	887b      	ldrh	r3, [r7, #2]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	817b      	strh	r3, [r7, #10]
  q = p;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007898:	e018      	b.n	80078cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	895b      	ldrh	r3, [r3, #10]
 800789e:	897a      	ldrh	r2, [r7, #10]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	891a      	ldrh	r2, [r3, #8]
 80078a8:	893b      	ldrh	r3, [r7, #8]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <pbuf_realloc+0x70>
 80078be:	4b26      	ldr	r3, [pc, #152]	@ (8007958 <pbuf_realloc+0xfc>)
 80078c0:	f240 12af 	movw	r2, #431	@ 0x1af
 80078c4:	4927      	ldr	r1, [pc, #156]	@ (8007964 <pbuf_realloc+0x108>)
 80078c6:	4826      	ldr	r0, [pc, #152]	@ (8007960 <pbuf_realloc+0x104>)
 80078c8:	f009 fb00 	bl	8010ecc <iprintf>
  while (rem_len > q->len) {
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	895b      	ldrh	r3, [r3, #10]
 80078d0:	897a      	ldrh	r2, [r7, #10]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d8e1      	bhi.n	800789a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	7b1b      	ldrb	r3, [r3, #12]
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d121      	bne.n	8007926 <pbuf_realloc+0xca>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	895b      	ldrh	r3, [r3, #10]
 80078e6:	897a      	ldrh	r2, [r7, #10]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d01c      	beq.n	8007926 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	7b5b      	ldrb	r3, [r3, #13]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d116      	bne.n	8007926 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	b29a      	uxth	r2, r3
 8007902:	897b      	ldrh	r3, [r7, #10]
 8007904:	4413      	add	r3, r2
 8007906:	b29b      	uxth	r3, r3
 8007908:	4619      	mov	r1, r3
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7fe fec4 	bl	8006698 <mem_trim>
 8007910:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d106      	bne.n	8007926 <pbuf_realloc+0xca>
 8007918:	4b0f      	ldr	r3, [pc, #60]	@ (8007958 <pbuf_realloc+0xfc>)
 800791a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800791e:	4912      	ldr	r1, [pc, #72]	@ (8007968 <pbuf_realloc+0x10c>)
 8007920:	480f      	ldr	r0, [pc, #60]	@ (8007960 <pbuf_realloc+0x104>)
 8007922:	f009 fad3 	bl	8010ecc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	897a      	ldrh	r2, [r7, #10]
 800792a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	895a      	ldrh	r2, [r3, #10]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f911 	bl	8007b68 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e000      	b.n	8007950 <pbuf_realloc+0xf4>
    return;
 800794e:	bf00      	nop

}
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	08012734 	.word	0x08012734
 800795c:	0801284c 	.word	0x0801284c
 8007960:	08012794 	.word	0x08012794
 8007964:	08012864 	.word	0x08012864
 8007968:	0801287c 	.word	0x0801287c

0800796c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d106      	bne.n	800798e <pbuf_add_header_impl+0x22>
 8007980:	4b2b      	ldr	r3, [pc, #172]	@ (8007a30 <pbuf_add_header_impl+0xc4>)
 8007982:	f240 12df 	movw	r2, #479	@ 0x1df
 8007986:	492b      	ldr	r1, [pc, #172]	@ (8007a34 <pbuf_add_header_impl+0xc8>)
 8007988:	482b      	ldr	r0, [pc, #172]	@ (8007a38 <pbuf_add_header_impl+0xcc>)
 800798a:	f009 fa9f 	bl	8010ecc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <pbuf_add_header_impl+0x30>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800799a:	d301      	bcc.n	80079a0 <pbuf_add_header_impl+0x34>
    return 1;
 800799c:	2301      	movs	r3, #1
 800799e:	e043      	b.n	8007a28 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <pbuf_add_header_impl+0x3e>
    return 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e03e      	b.n	8007a28 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	891a      	ldrh	r2, [r3, #8]
 80079b2:	8a7b      	ldrh	r3, [r7, #18]
 80079b4:	4413      	add	r3, r2
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	8a7a      	ldrh	r2, [r7, #18]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d901      	bls.n	80079c2 <pbuf_add_header_impl+0x56>
    return 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	e032      	b.n	8007a28 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	7b1b      	ldrb	r3, [r3, #12]
 80079c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80079c8:	8a3b      	ldrh	r3, [r7, #16]
 80079ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00c      	beq.n	80079ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	425b      	negs	r3, r3
 80079da:	4413      	add	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3310      	adds	r3, #16
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d20d      	bcs.n	8007a04 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e01d      	b.n	8007a28 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d006      	beq.n	8007a00 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	425b      	negs	r3, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	e001      	b.n	8007a04 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e011      	b.n	8007a28 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	895a      	ldrh	r2, [r3, #10]
 8007a0e:	8a7b      	ldrh	r3, [r7, #18]
 8007a10:	4413      	add	r3, r2
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	891a      	ldrh	r2, [r3, #8]
 8007a1c:	8a7b      	ldrh	r3, [r7, #18]
 8007a1e:	4413      	add	r3, r2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	811a      	strh	r2, [r3, #8]


  return 0;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	08012734 	.word	0x08012734
 8007a34:	08012898 	.word	0x08012898
 8007a38:	08012794 	.word	0x08012794

08007a3c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007a46:	2200      	movs	r2, #0
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff ff8e 	bl	800796c <pbuf_add_header_impl>
 8007a50:	4603      	mov	r3, r0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <pbuf_remove_header+0x1e>
 8007a6c:	4b20      	ldr	r3, [pc, #128]	@ (8007af0 <pbuf_remove_header+0x94>)
 8007a6e:	f240 224b 	movw	r2, #587	@ 0x24b
 8007a72:	4920      	ldr	r1, [pc, #128]	@ (8007af4 <pbuf_remove_header+0x98>)
 8007a74:	4820      	ldr	r0, [pc, #128]	@ (8007af8 <pbuf_remove_header+0x9c>)
 8007a76:	f009 fa29 	bl	8010ecc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <pbuf_remove_header+0x2c>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a86:	d301      	bcc.n	8007a8c <pbuf_remove_header+0x30>
    return 1;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e02c      	b.n	8007ae6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <pbuf_remove_header+0x3a>
    return 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	e027      	b.n	8007ae6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	895b      	ldrh	r3, [r3, #10]
 8007a9e:	89fa      	ldrh	r2, [r7, #14]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d908      	bls.n	8007ab6 <pbuf_remove_header+0x5a>
 8007aa4:	4b12      	ldr	r3, [pc, #72]	@ (8007af0 <pbuf_remove_header+0x94>)
 8007aa6:	f240 2255 	movw	r2, #597	@ 0x255
 8007aaa:	4914      	ldr	r1, [pc, #80]	@ (8007afc <pbuf_remove_header+0xa0>)
 8007aac:	4812      	ldr	r0, [pc, #72]	@ (8007af8 <pbuf_remove_header+0x9c>)
 8007aae:	f009 fa0d 	bl	8010ecc <iprintf>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e017      	b.n	8007ae6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	441a      	add	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	895a      	ldrh	r2, [r3, #10]
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	891a      	ldrh	r2, [r3, #8]
 8007ada:	89fb      	ldrh	r3, [r7, #14]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	08012734 	.word	0x08012734
 8007af4:	08012898 	.word	0x08012898
 8007af8:	08012794 	.word	0x08012794
 8007afc:	080128a4 	.word	0x080128a4

08007b00 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	807b      	strh	r3, [r7, #2]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007b10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	da08      	bge.n	8007b2a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007b18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b1c:	425b      	negs	r3, r3
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff ff9b 	bl	8007a5c <pbuf_remove_header>
 8007b26:	4603      	mov	r3, r0
 8007b28:	e007      	b.n	8007b3a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007b2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b2e:	787a      	ldrb	r2, [r7, #1]
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff ff1a 	bl	800796c <pbuf_add_header_impl>
 8007b38:	4603      	mov	r3, r0
  }
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007b4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b52:	2201      	movs	r2, #1
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff ffd2 	bl	8007b00 <pbuf_header_impl>
 8007b5c:	4603      	mov	r3, r0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <pbuf_free+0x22>
 8007b7c:	4b38      	ldr	r3, [pc, #224]	@ (8007c60 <pbuf_free+0xf8>)
 8007b7e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007b82:	4938      	ldr	r1, [pc, #224]	@ (8007c64 <pbuf_free+0xfc>)
 8007b84:	4838      	ldr	r0, [pc, #224]	@ (8007c68 <pbuf_free+0x100>)
 8007b86:	f009 f9a1 	bl	8010ecc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e063      	b.n	8007c56 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007b92:	e05c      	b.n	8007c4e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7b9b      	ldrb	r3, [r3, #14]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <pbuf_free+0x42>
 8007b9c:	4b30      	ldr	r3, [pc, #192]	@ (8007c60 <pbuf_free+0xf8>)
 8007b9e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007ba2:	4932      	ldr	r1, [pc, #200]	@ (8007c6c <pbuf_free+0x104>)
 8007ba4:	4830      	ldr	r0, [pc, #192]	@ (8007c68 <pbuf_free+0x100>)
 8007ba6:	f009 f991 	bl	8010ecc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	7b9b      	ldrb	r3, [r3, #14]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	739a      	strb	r2, [r3, #14]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7b9b      	ldrb	r3, [r3, #14]
 8007bba:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007bbc:	7dbb      	ldrb	r3, [r7, #22]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d143      	bne.n	8007c4a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	7b1b      	ldrb	r3, [r3, #12]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7b5b      	ldrb	r3, [r3, #13]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d011      	beq.n	8007c02 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d106      	bne.n	8007bf8 <pbuf_free+0x90>
 8007bea:	4b1d      	ldr	r3, [pc, #116]	@ (8007c60 <pbuf_free+0xf8>)
 8007bec:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007bf0:	491f      	ldr	r1, [pc, #124]	@ (8007c70 <pbuf_free+0x108>)
 8007bf2:	481d      	ldr	r0, [pc, #116]	@ (8007c68 <pbuf_free+0x100>)
 8007bf4:	f009 f96a 	bl	8010ecc <iprintf>
        pc->custom_free_function(p);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
 8007c00:	e01d      	b.n	8007c3e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d104      	bne.n	8007c12 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	2008      	movs	r0, #8
 8007c0c:	f7ff f840 	bl	8006c90 <memp_free>
 8007c10:	e015      	b.n	8007c3e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d104      	bne.n	8007c22 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	2007      	movs	r0, #7
 8007c1c:	f7ff f838 	bl	8006c90 <memp_free>
 8007c20:	e00d      	b.n	8007c3e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d103      	bne.n	8007c30 <pbuf_free+0xc8>
          mem_free(p);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7fe fccb 	bl	80065c4 <mem_free>
 8007c2e:	e006      	b.n	8007c3e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007c30:	4b0b      	ldr	r3, [pc, #44]	@ (8007c60 <pbuf_free+0xf8>)
 8007c32:	f240 320f 	movw	r2, #783	@ 0x30f
 8007c36:	490f      	ldr	r1, [pc, #60]	@ (8007c74 <pbuf_free+0x10c>)
 8007c38:	480b      	ldr	r0, [pc, #44]	@ (8007c68 <pbuf_free+0x100>)
 8007c3a:	f009 f947 	bl	8010ecc <iprintf>
        }
      }
      count++;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	3301      	adds	r3, #1
 8007c42:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	607b      	str	r3, [r7, #4]
 8007c48:	e001      	b.n	8007c4e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d19f      	bne.n	8007b94 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	08012734 	.word	0x08012734
 8007c64:	08012898 	.word	0x08012898
 8007c68:	08012794 	.word	0x08012794
 8007c6c:	080128c4 	.word	0x080128c4
 8007c70:	080128dc 	.word	0x080128dc
 8007c74:	08012900 	.word	0x08012900

08007c78 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007c84:	e005      	b.n	8007c92 <pbuf_clen+0x1a>
    ++len;
 8007c86:	89fb      	ldrh	r3, [r7, #14]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f6      	bne.n	8007c86 <pbuf_clen+0xe>
  }
  return len;
 8007c98:	89fb      	ldrh	r3, [r7, #14]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d010      	beq.n	8007cd8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7b9b      	ldrb	r3, [r3, #14]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7b9b      	ldrb	r3, [r3, #14]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d106      	bne.n	8007cd8 <pbuf_ref+0x30>
 8007cca:	4b05      	ldr	r3, [pc, #20]	@ (8007ce0 <pbuf_ref+0x38>)
 8007ccc:	f240 3242 	movw	r2, #834	@ 0x342
 8007cd0:	4904      	ldr	r1, [pc, #16]	@ (8007ce4 <pbuf_ref+0x3c>)
 8007cd2:	4805      	ldr	r0, [pc, #20]	@ (8007ce8 <pbuf_ref+0x40>)
 8007cd4:	f009 f8fa 	bl	8010ecc <iprintf>
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	08012734 	.word	0x08012734
 8007ce4:	08012914 	.word	0x08012914
 8007ce8:	08012794 	.word	0x08012794

08007cec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <pbuf_cat+0x16>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d107      	bne.n	8007d12 <pbuf_cat+0x26>
 8007d02:	4b20      	ldr	r3, [pc, #128]	@ (8007d84 <pbuf_cat+0x98>)
 8007d04:	f240 3259 	movw	r2, #857	@ 0x359
 8007d08:	491f      	ldr	r1, [pc, #124]	@ (8007d88 <pbuf_cat+0x9c>)
 8007d0a:	4820      	ldr	r0, [pc, #128]	@ (8007d8c <pbuf_cat+0xa0>)
 8007d0c:	f009 f8de 	bl	8010ecc <iprintf>
 8007d10:	e034      	b.n	8007d7c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e00a      	b.n	8007d2e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	891a      	ldrh	r2, [r3, #8]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	891b      	ldrh	r3, [r3, #8]
 8007d20:	4413      	add	r3, r2
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1f0      	bne.n	8007d18 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	891a      	ldrh	r2, [r3, #8]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	895b      	ldrh	r3, [r3, #10]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d006      	beq.n	8007d50 <pbuf_cat+0x64>
 8007d42:	4b10      	ldr	r3, [pc, #64]	@ (8007d84 <pbuf_cat+0x98>)
 8007d44:	f240 3262 	movw	r2, #866	@ 0x362
 8007d48:	4911      	ldr	r1, [pc, #68]	@ (8007d90 <pbuf_cat+0xa4>)
 8007d4a:	4810      	ldr	r0, [pc, #64]	@ (8007d8c <pbuf_cat+0xa0>)
 8007d4c:	f009 f8be 	bl	8010ecc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d006      	beq.n	8007d66 <pbuf_cat+0x7a>
 8007d58:	4b0a      	ldr	r3, [pc, #40]	@ (8007d84 <pbuf_cat+0x98>)
 8007d5a:	f240 3263 	movw	r2, #867	@ 0x363
 8007d5e:	490d      	ldr	r1, [pc, #52]	@ (8007d94 <pbuf_cat+0xa8>)
 8007d60:	480a      	ldr	r0, [pc, #40]	@ (8007d8c <pbuf_cat+0xa0>)
 8007d62:	f009 f8b3 	bl	8010ecc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	891a      	ldrh	r2, [r3, #8]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	891b      	ldrh	r3, [r3, #8]
 8007d6e:	4413      	add	r3, r2
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	08012734 	.word	0x08012734
 8007d88:	08012928 	.word	0x08012928
 8007d8c:	08012794 	.word	0x08012794
 8007d90:	08012960 	.word	0x08012960
 8007d94:	08012990 	.word	0x08012990

08007d98 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff ffa1 	bl	8007cec <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007daa:	6838      	ldr	r0, [r7, #0]
 8007dac:	f7ff ff7c 	bl	8007ca8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <pbuf_copy+0x2a>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <pbuf_copy+0x2a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	891a      	ldrh	r2, [r3, #8]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	891b      	ldrh	r3, [r3, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d209      	bcs.n	8007df6 <pbuf_copy+0x3e>
 8007de2:	4b57      	ldr	r3, [pc, #348]	@ (8007f40 <pbuf_copy+0x188>)
 8007de4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007de8:	4956      	ldr	r1, [pc, #344]	@ (8007f44 <pbuf_copy+0x18c>)
 8007dea:	4857      	ldr	r0, [pc, #348]	@ (8007f48 <pbuf_copy+0x190>)
 8007dec:	f009 f86e 	bl	8010ecc <iprintf>
 8007df0:	f06f 030f 	mvn.w	r3, #15
 8007df4:	e09f      	b.n	8007f36 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	895b      	ldrh	r3, [r3, #10]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	895b      	ldrh	r3, [r3, #10]
 8007e04:	4619      	mov	r1, r3
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	1acb      	subs	r3, r1, r3
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d306      	bcc.n	8007e1c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	895b      	ldrh	r3, [r3, #10]
 8007e12:	461a      	mov	r2, r3
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	e005      	b.n	8007e28 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	895b      	ldrh	r3, [r3, #10]
 8007e20:	461a      	mov	r2, r3
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	18d0      	adds	r0, r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4413      	add	r3, r2
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f009 fa1b 	bl	8011276 <memcpy>
    offset_to += len;
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	895b      	ldrh	r3, [r3, #10]
 8007e54:	461a      	mov	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d906      	bls.n	8007e6a <pbuf_copy+0xb2>
 8007e5c:	4b38      	ldr	r3, [pc, #224]	@ (8007f40 <pbuf_copy+0x188>)
 8007e5e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007e62:	493a      	ldr	r1, [pc, #232]	@ (8007f4c <pbuf_copy+0x194>)
 8007e64:	4838      	ldr	r0, [pc, #224]	@ (8007f48 <pbuf_copy+0x190>)
 8007e66:	f009 f831 	bl	8010ecc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	895b      	ldrh	r3, [r3, #10]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d906      	bls.n	8007e84 <pbuf_copy+0xcc>
 8007e76:	4b32      	ldr	r3, [pc, #200]	@ (8007f40 <pbuf_copy+0x188>)
 8007e78:	f240 32da 	movw	r2, #986	@ 0x3da
 8007e7c:	4934      	ldr	r1, [pc, #208]	@ (8007f50 <pbuf_copy+0x198>)
 8007e7e:	4832      	ldr	r0, [pc, #200]	@ (8007f48 <pbuf_copy+0x190>)
 8007e80:	f009 f824 	bl	8010ecc <iprintf>
    if (offset_from >= p_from->len) {
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	895b      	ldrh	r3, [r3, #10]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d304      	bcc.n	8007e9a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	895b      	ldrh	r3, [r3, #10]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d114      	bne.n	8007ed0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10c      	bne.n	8007ed0 <pbuf_copy+0x118>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d009      	beq.n	8007ed0 <pbuf_copy+0x118>
 8007ebc:	4b20      	ldr	r3, [pc, #128]	@ (8007f40 <pbuf_copy+0x188>)
 8007ebe:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007ec2:	4924      	ldr	r1, [pc, #144]	@ (8007f54 <pbuf_copy+0x19c>)
 8007ec4:	4820      	ldr	r0, [pc, #128]	@ (8007f48 <pbuf_copy+0x190>)
 8007ec6:	f009 f801 	bl	8010ecc <iprintf>
 8007eca:	f06f 030f 	mvn.w	r3, #15
 8007ece:	e032      	b.n	8007f36 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d013      	beq.n	8007efe <pbuf_copy+0x146>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	895a      	ldrh	r2, [r3, #10]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	891b      	ldrh	r3, [r3, #8]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d10d      	bne.n	8007efe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <pbuf_copy+0x146>
 8007eea:	4b15      	ldr	r3, [pc, #84]	@ (8007f40 <pbuf_copy+0x188>)
 8007eec:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007ef0:	4919      	ldr	r1, [pc, #100]	@ (8007f58 <pbuf_copy+0x1a0>)
 8007ef2:	4815      	ldr	r0, [pc, #84]	@ (8007f48 <pbuf_copy+0x190>)
 8007ef4:	f008 ffea 	bl	8010ecc <iprintf>
 8007ef8:	f06f 0305 	mvn.w	r3, #5
 8007efc:	e01b      	b.n	8007f36 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d013      	beq.n	8007f2c <pbuf_copy+0x174>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	895a      	ldrh	r2, [r3, #10]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	891b      	ldrh	r3, [r3, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d10d      	bne.n	8007f2c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d009      	beq.n	8007f2c <pbuf_copy+0x174>
 8007f18:	4b09      	ldr	r3, [pc, #36]	@ (8007f40 <pbuf_copy+0x188>)
 8007f1a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007f1e:	490e      	ldr	r1, [pc, #56]	@ (8007f58 <pbuf_copy+0x1a0>)
 8007f20:	4809      	ldr	r0, [pc, #36]	@ (8007f48 <pbuf_copy+0x190>)
 8007f22:	f008 ffd3 	bl	8010ecc <iprintf>
 8007f26:	f06f 0305 	mvn.w	r3, #5
 8007f2a:	e004      	b.n	8007f36 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f47f af61 	bne.w	8007df6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	08012734 	.word	0x08012734
 8007f44:	080129dc 	.word	0x080129dc
 8007f48:	08012794 	.word	0x08012794
 8007f4c:	08012a0c 	.word	0x08012a0c
 8007f50:	08012a24 	.word	0x08012a24
 8007f54:	08012a40 	.word	0x08012a40
 8007f58:	08012a50 	.word	0x08012a50

08007f5c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4611      	mov	r1, r2
 8007f68:	461a      	mov	r2, r3
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	80fb      	strh	r3, [r7, #6]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d108      	bne.n	8007f92 <pbuf_copy_partial+0x36>
 8007f80:	4b2b      	ldr	r3, [pc, #172]	@ (8008030 <pbuf_copy_partial+0xd4>)
 8007f82:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007f86:	492b      	ldr	r1, [pc, #172]	@ (8008034 <pbuf_copy_partial+0xd8>)
 8007f88:	482b      	ldr	r0, [pc, #172]	@ (8008038 <pbuf_copy_partial+0xdc>)
 8007f8a:	f008 ff9f 	bl	8010ecc <iprintf>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e04a      	b.n	8008028 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d108      	bne.n	8007faa <pbuf_copy_partial+0x4e>
 8007f98:	4b25      	ldr	r3, [pc, #148]	@ (8008030 <pbuf_copy_partial+0xd4>)
 8007f9a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007f9e:	4927      	ldr	r1, [pc, #156]	@ (800803c <pbuf_copy_partial+0xe0>)
 8007fa0:	4825      	ldr	r0, [pc, #148]	@ (8008038 <pbuf_copy_partial+0xdc>)
 8007fa2:	f008 ff93 	bl	8010ecc <iprintf>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e03e      	b.n	8008028 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	e034      	b.n	800801a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007fb0:	88bb      	ldrh	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <pbuf_copy_partial+0x70>
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	895b      	ldrh	r3, [r3, #10]
 8007fba:	88ba      	ldrh	r2, [r7, #4]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d305      	bcc.n	8007fcc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	895b      	ldrh	r3, [r3, #10]
 8007fc4:	88ba      	ldrh	r2, [r7, #4]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	80bb      	strh	r3, [r7, #4]
 8007fca:	e023      	b.n	8008014 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	895a      	ldrh	r2, [r3, #10]
 8007fd0:	88bb      	ldrh	r3, [r7, #4]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007fd6:	8b3a      	ldrh	r2, [r7, #24]
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d901      	bls.n	8007fe2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007fe2:	8b7b      	ldrh	r3, [r7, #26]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	18d0      	adds	r0, r2, r3
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	88bb      	ldrh	r3, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	8b3a      	ldrh	r2, [r7, #24]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f009 f93f 	bl	8011276 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007ff8:	8afa      	ldrh	r2, [r7, #22]
 8007ffa:	8b3b      	ldrh	r3, [r7, #24]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008000:	8b7a      	ldrh	r2, [r7, #26]
 8008002:	8b3b      	ldrh	r3, [r7, #24]
 8008004:	4413      	add	r3, r2
 8008006:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	8b3b      	ldrh	r3, [r7, #24]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	88fb      	ldrh	r3, [r7, #6]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <pbuf_copy_partial+0xca>
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1c4      	bne.n	8007fb0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008026:	8afb      	ldrh	r3, [r7, #22]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3720      	adds	r7, #32
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	08012734 	.word	0x08012734
 8008034:	08012a7c 	.word	0x08012a7c
 8008038:	08012794 	.word	0x08012794
 800803c:	08012a9c 	.word	0x08012a9c

08008040 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	603a      	str	r2, [r7, #0]
 800804a:	71fb      	strb	r3, [r7, #7]
 800804c:	460b      	mov	r3, r1
 800804e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	8919      	ldrh	r1, [r3, #8]
 8008054:	88ba      	ldrh	r2, [r7, #4]
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff faa1 	bl	80075a0 <pbuf_alloc>
 800805e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <pbuf_clone+0x2a>
    return NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	e011      	b.n	800808e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fea3 	bl	8007db8 <pbuf_copy>
 8008072:	4603      	mov	r3, r0
 8008074:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008076:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d006      	beq.n	800808c <pbuf_clone+0x4c>
 800807e:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <pbuf_clone+0x58>)
 8008080:	f240 5224 	movw	r2, #1316	@ 0x524
 8008084:	4905      	ldr	r1, [pc, #20]	@ (800809c <pbuf_clone+0x5c>)
 8008086:	4806      	ldr	r0, [pc, #24]	@ (80080a0 <pbuf_clone+0x60>)
 8008088:	f008 ff20 	bl	8010ecc <iprintf>
  return q;
 800808c:	68fb      	ldr	r3, [r7, #12]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	08012734 	.word	0x08012734
 800809c:	08012ba8 	.word	0x08012ba8
 80080a0:	08012794 	.word	0x08012794

080080a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80080a8:	f008 fe10 	bl	8010ccc <rand>
 80080ac:	4603      	mov	r3, r0
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	4b01      	ldr	r3, [pc, #4]	@ (80080c4 <tcp_init+0x20>)
 80080be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80080c0:	bf00      	nop
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000064 	.word	0x20000064

080080c8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7d1b      	ldrb	r3, [r3, #20]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d105      	bne.n	80080e4 <tcp_free+0x1c>
 80080d8:	4b06      	ldr	r3, [pc, #24]	@ (80080f4 <tcp_free+0x2c>)
 80080da:	22d4      	movs	r2, #212	@ 0xd4
 80080dc:	4906      	ldr	r1, [pc, #24]	@ (80080f8 <tcp_free+0x30>)
 80080de:	4807      	ldr	r0, [pc, #28]	@ (80080fc <tcp_free+0x34>)
 80080e0:	f008 fef4 	bl	8010ecc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	2001      	movs	r0, #1
 80080e8:	f7fe fdd2 	bl	8006c90 <memp_free>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	08012c34 	.word	0x08012c34
 80080f8:	08012c64 	.word	0x08012c64
 80080fc:	08012c78 	.word	0x08012c78

08008100 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7d1b      	ldrb	r3, [r3, #20]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d105      	bne.n	800811c <tcp_free_listen+0x1c>
 8008110:	4b06      	ldr	r3, [pc, #24]	@ (800812c <tcp_free_listen+0x2c>)
 8008112:	22df      	movs	r2, #223	@ 0xdf
 8008114:	4906      	ldr	r1, [pc, #24]	@ (8008130 <tcp_free_listen+0x30>)
 8008116:	4807      	ldr	r0, [pc, #28]	@ (8008134 <tcp_free_listen+0x34>)
 8008118:	f008 fed8 	bl	8010ecc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	2002      	movs	r0, #2
 8008120:	f7fe fdb6 	bl	8006c90 <memp_free>
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	08012c34 	.word	0x08012c34
 8008130:	08012ca0 	.word	0x08012ca0
 8008134:	08012c78 	.word	0x08012c78

08008138 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800813c:	f000 fea4 	bl	8008e88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <tcp_tmr+0x28>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	b2da      	uxtb	r2, r3
 8008148:	4b05      	ldr	r3, [pc, #20]	@ (8008160 <tcp_tmr+0x28>)
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	4b04      	ldr	r3, [pc, #16]	@ (8008160 <tcp_tmr+0x28>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008158:	f000 fb54 	bl	8008804 <tcp_slowtmr>
  }
}
 800815c:	bf00      	nop
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20007f01 	.word	0x20007f01

08008164 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d105      	bne.n	8008180 <tcp_remove_listener+0x1c>
 8008174:	4b0d      	ldr	r3, [pc, #52]	@ (80081ac <tcp_remove_listener+0x48>)
 8008176:	22ff      	movs	r2, #255	@ 0xff
 8008178:	490d      	ldr	r1, [pc, #52]	@ (80081b0 <tcp_remove_listener+0x4c>)
 800817a:	480e      	ldr	r0, [pc, #56]	@ (80081b4 <tcp_remove_listener+0x50>)
 800817c:	f008 fea6 	bl	8010ecc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e00a      	b.n	800819c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d102      	bne.n	8008196 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f1      	bne.n	8008186 <tcp_remove_listener+0x22>
    }
  }
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	08012c34 	.word	0x08012c34
 80081b0:	08012cbc 	.word	0x08012cbc
 80081b4:	08012c78 	.word	0x08012c78

080081b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d106      	bne.n	80081d4 <tcp_listen_closed+0x1c>
 80081c6:	4b14      	ldr	r3, [pc, #80]	@ (8008218 <tcp_listen_closed+0x60>)
 80081c8:	f240 1211 	movw	r2, #273	@ 0x111
 80081cc:	4913      	ldr	r1, [pc, #76]	@ (800821c <tcp_listen_closed+0x64>)
 80081ce:	4814      	ldr	r0, [pc, #80]	@ (8008220 <tcp_listen_closed+0x68>)
 80081d0:	f008 fe7c 	bl	8010ecc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7d1b      	ldrb	r3, [r3, #20]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d006      	beq.n	80081ea <tcp_listen_closed+0x32>
 80081dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008218 <tcp_listen_closed+0x60>)
 80081de:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80081e2:	4910      	ldr	r1, [pc, #64]	@ (8008224 <tcp_listen_closed+0x6c>)
 80081e4:	480e      	ldr	r0, [pc, #56]	@ (8008220 <tcp_listen_closed+0x68>)
 80081e6:	f008 fe71 	bl	8010ecc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80081ea:	2301      	movs	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e00b      	b.n	8008208 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80081f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008228 <tcp_listen_closed+0x70>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff ffb1 	bl	8008164 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b03      	cmp	r3, #3
 800820c:	d9f0      	bls.n	80081f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	08012c34 	.word	0x08012c34
 800821c:	08012ce4 	.word	0x08012ce4
 8008220:	08012c78 	.word	0x08012c78
 8008224:	08012cf0 	.word	0x08012cf0
 8008228:	080153b8 	.word	0x080153b8

0800822c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800822c:	b5b0      	push	{r4, r5, r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af04      	add	r7, sp, #16
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <tcp_close_shutdown+0x20>
 800823e:	4b63      	ldr	r3, [pc, #396]	@ (80083cc <tcp_close_shutdown+0x1a0>)
 8008240:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008244:	4962      	ldr	r1, [pc, #392]	@ (80083d0 <tcp_close_shutdown+0x1a4>)
 8008246:	4863      	ldr	r0, [pc, #396]	@ (80083d4 <tcp_close_shutdown+0x1a8>)
 8008248:	f008 fe40 	bl	8010ecc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800824c:	78fb      	ldrb	r3, [r7, #3]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d066      	beq.n	8008320 <tcp_close_shutdown+0xf4>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7d1b      	ldrb	r3, [r3, #20]
 8008256:	2b04      	cmp	r3, #4
 8008258:	d003      	beq.n	8008262 <tcp_close_shutdown+0x36>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7d1b      	ldrb	r3, [r3, #20]
 800825e:	2b07      	cmp	r3, #7
 8008260:	d15e      	bne.n	8008320 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <tcp_close_shutdown+0x48>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800826e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008272:	d055      	beq.n	8008320 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8b5b      	ldrh	r3, [r3, #26]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <tcp_close_shutdown+0x62>
 8008280:	4b52      	ldr	r3, [pc, #328]	@ (80083cc <tcp_close_shutdown+0x1a0>)
 8008282:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008286:	4954      	ldr	r1, [pc, #336]	@ (80083d8 <tcp_close_shutdown+0x1ac>)
 8008288:	4852      	ldr	r0, [pc, #328]	@ (80083d4 <tcp_close_shutdown+0x1a8>)
 800828a:	f008 fe1f 	bl	8010ecc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008296:	687d      	ldr	r5, [r7, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3304      	adds	r3, #4
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	8ad2      	ldrh	r2, [r2, #22]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	8b09      	ldrh	r1, [r1, #24]
 80082a4:	9102      	str	r1, [sp, #8]
 80082a6:	9201      	str	r2, [sp, #4]
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	462b      	mov	r3, r5
 80082ac:	4622      	mov	r2, r4
 80082ae:	4601      	mov	r1, r0
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f004 fea7 	bl	800d004 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 f8c8 	bl	800944c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082bc:	4b47      	ldr	r3, [pc, #284]	@ (80083dc <tcp_close_shutdown+0x1b0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d105      	bne.n	80082d2 <tcp_close_shutdown+0xa6>
 80082c6:	4b45      	ldr	r3, [pc, #276]	@ (80083dc <tcp_close_shutdown+0x1b0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	4a43      	ldr	r2, [pc, #268]	@ (80083dc <tcp_close_shutdown+0x1b0>)
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	e013      	b.n	80082fa <tcp_close_shutdown+0xce>
 80082d2:	4b42      	ldr	r3, [pc, #264]	@ (80083dc <tcp_close_shutdown+0x1b0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	e00c      	b.n	80082f4 <tcp_close_shutdown+0xc8>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d104      	bne.n	80082ee <tcp_close_shutdown+0xc2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	60da      	str	r2, [r3, #12]
 80082ec:	e005      	b.n	80082fa <tcp_close_shutdown+0xce>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1ef      	bne.n	80082da <tcp_close_shutdown+0xae>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	60da      	str	r2, [r3, #12]
 8008300:	4b37      	ldr	r3, [pc, #220]	@ (80083e0 <tcp_close_shutdown+0x1b4>)
 8008302:	2201      	movs	r2, #1
 8008304:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008306:	4b37      	ldr	r3, [pc, #220]	@ (80083e4 <tcp_close_shutdown+0x1b8>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	429a      	cmp	r2, r3
 800830e:	d102      	bne.n	8008316 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008310:	f003 fd62 	bl	800bdd8 <tcp_trigger_input_pcb_close>
 8008314:	e002      	b.n	800831c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7ff fed6 	bl	80080c8 <tcp_free>
      }
      return ERR_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	e050      	b.n	80083c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7d1b      	ldrb	r3, [r3, #20]
 8008324:	2b02      	cmp	r3, #2
 8008326:	d03b      	beq.n	80083a0 <tcp_close_shutdown+0x174>
 8008328:	2b02      	cmp	r3, #2
 800832a:	dc44      	bgt.n	80083b6 <tcp_close_shutdown+0x18a>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <tcp_close_shutdown+0x10a>
 8008330:	2b01      	cmp	r3, #1
 8008332:	d02a      	beq.n	800838a <tcp_close_shutdown+0x15e>
 8008334:	e03f      	b.n	80083b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8adb      	ldrh	r3, [r3, #22]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d021      	beq.n	8008382 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800833e:	4b2a      	ldr	r3, [pc, #168]	@ (80083e8 <tcp_close_shutdown+0x1bc>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d105      	bne.n	8008354 <tcp_close_shutdown+0x128>
 8008348:	4b27      	ldr	r3, [pc, #156]	@ (80083e8 <tcp_close_shutdown+0x1bc>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	4a26      	ldr	r2, [pc, #152]	@ (80083e8 <tcp_close_shutdown+0x1bc>)
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	e013      	b.n	800837c <tcp_close_shutdown+0x150>
 8008354:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <tcp_close_shutdown+0x1bc>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60bb      	str	r3, [r7, #8]
 800835a:	e00c      	b.n	8008376 <tcp_close_shutdown+0x14a>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d104      	bne.n	8008370 <tcp_close_shutdown+0x144>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	e005      	b.n	800837c <tcp_close_shutdown+0x150>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	60bb      	str	r3, [r7, #8]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1ef      	bne.n	800835c <tcp_close_shutdown+0x130>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fea0 	bl	80080c8 <tcp_free>
      break;
 8008388:	e01a      	b.n	80083c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff ff14 	bl	80081b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4816      	ldr	r0, [pc, #88]	@ (80083ec <tcp_close_shutdown+0x1c0>)
 8008394:	f001 f8aa 	bl	80094ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7ff feb1 	bl	8008100 <tcp_free_listen>
      break;
 800839e:	e00f      	b.n	80083c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	480e      	ldr	r0, [pc, #56]	@ (80083dc <tcp_close_shutdown+0x1b0>)
 80083a4:	f001 f8a2 	bl	80094ec <tcp_pcb_remove>
 80083a8:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <tcp_close_shutdown+0x1b4>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff fe8a 	bl	80080c8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80083b4:	e004      	b.n	80083c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f81a 	bl	80083f0 <tcp_close_shutdown_fin>
 80083bc:	4603      	mov	r3, r0
 80083be:	e000      	b.n	80083c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bdb0      	pop	{r4, r5, r7, pc}
 80083ca:	bf00      	nop
 80083cc:	08012c34 	.word	0x08012c34
 80083d0:	08012d08 	.word	0x08012d08
 80083d4:	08012c78 	.word	0x08012c78
 80083d8:	08012d28 	.word	0x08012d28
 80083dc:	20007ef8 	.word	0x20007ef8
 80083e0:	20007f00 	.word	0x20007f00
 80083e4:	20007f3c 	.word	0x20007f3c
 80083e8:	20007ef0 	.word	0x20007ef0
 80083ec:	20007ef4 	.word	0x20007ef4

080083f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <tcp_close_shutdown_fin+0x1c>
 80083fe:	4b2e      	ldr	r3, [pc, #184]	@ (80084b8 <tcp_close_shutdown_fin+0xc8>)
 8008400:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008404:	492d      	ldr	r1, [pc, #180]	@ (80084bc <tcp_close_shutdown_fin+0xcc>)
 8008406:	482e      	ldr	r0, [pc, #184]	@ (80084c0 <tcp_close_shutdown_fin+0xd0>)
 8008408:	f008 fd60 	bl	8010ecc <iprintf>

  switch (pcb->state) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	7d1b      	ldrb	r3, [r3, #20]
 8008410:	2b07      	cmp	r3, #7
 8008412:	d020      	beq.n	8008456 <tcp_close_shutdown_fin+0x66>
 8008414:	2b07      	cmp	r3, #7
 8008416:	dc2b      	bgt.n	8008470 <tcp_close_shutdown_fin+0x80>
 8008418:	2b03      	cmp	r3, #3
 800841a:	d002      	beq.n	8008422 <tcp_close_shutdown_fin+0x32>
 800841c:	2b04      	cmp	r3, #4
 800841e:	d00d      	beq.n	800843c <tcp_close_shutdown_fin+0x4c>
 8008420:	e026      	b.n	8008470 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f003 fef0 	bl	800c208 <tcp_send_fin>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800842c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11f      	bne.n	8008474 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2205      	movs	r2, #5
 8008438:	751a      	strb	r2, [r3, #20]
      }
      break;
 800843a:	e01b      	b.n	8008474 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f003 fee3 	bl	800c208 <tcp_send_fin>
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d114      	bne.n	8008478 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2205      	movs	r2, #5
 8008452:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008454:	e010      	b.n	8008478 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f003 fed6 	bl	800c208 <tcp_send_fin>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d109      	bne.n	800847c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2209      	movs	r2, #9
 800846c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800846e:	e005      	b.n	800847c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	e01c      	b.n	80084ae <tcp_close_shutdown_fin+0xbe>
      break;
 8008474:	bf00      	nop
 8008476:	e002      	b.n	800847e <tcp_close_shutdown_fin+0x8e>
      break;
 8008478:	bf00      	nop
 800847a:	e000      	b.n	800847e <tcp_close_shutdown_fin+0x8e>
      break;
 800847c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800847e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f003 fffc 	bl	800c484 <tcp_output>
 800848c:	e00d      	b.n	80084aa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800848e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008496:	d108      	bne.n	80084aa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	8b5b      	ldrh	r3, [r3, #26]
 800849c:	f043 0308 	orr.w	r3, r3, #8
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e001      	b.n	80084ae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80084aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	08012c34 	.word	0x08012c34
 80084bc:	08012ce4 	.word	0x08012ce4
 80084c0:	08012c78 	.word	0x08012c78

080084c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <tcp_close+0x22>
 80084d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008510 <tcp_close+0x4c>)
 80084d4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80084d8:	490e      	ldr	r1, [pc, #56]	@ (8008514 <tcp_close+0x50>)
 80084da:	480f      	ldr	r0, [pc, #60]	@ (8008518 <tcp_close+0x54>)
 80084dc:	f008 fcf6 	bl	8010ecc <iprintf>
 80084e0:	f06f 030f 	mvn.w	r3, #15
 80084e4:	e00f      	b.n	8008506 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	7d1b      	ldrb	r3, [r3, #20]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d006      	beq.n	80084fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8b5b      	ldrh	r3, [r3, #26]
 80084f2:	f043 0310 	orr.w	r3, r3, #16
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80084fc:	2101      	movs	r1, #1
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fe94 	bl	800822c <tcp_close_shutdown>
 8008504:	4603      	mov	r3, r0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	08012c34 	.word	0x08012c34
 8008514:	08012d44 	.word	0x08012d44
 8008518:	08012c78 	.word	0x08012c78

0800851c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08e      	sub	sp, #56	@ 0x38
 8008520:	af04      	add	r7, sp, #16
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d107      	bne.n	800853c <tcp_abandon+0x20>
 800852c:	4b52      	ldr	r3, [pc, #328]	@ (8008678 <tcp_abandon+0x15c>)
 800852e:	f240 223d 	movw	r2, #573	@ 0x23d
 8008532:	4952      	ldr	r1, [pc, #328]	@ (800867c <tcp_abandon+0x160>)
 8008534:	4852      	ldr	r0, [pc, #328]	@ (8008680 <tcp_abandon+0x164>)
 8008536:	f008 fcc9 	bl	8010ecc <iprintf>
 800853a:	e099      	b.n	8008670 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7d1b      	ldrb	r3, [r3, #20]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d106      	bne.n	8008552 <tcp_abandon+0x36>
 8008544:	4b4c      	ldr	r3, [pc, #304]	@ (8008678 <tcp_abandon+0x15c>)
 8008546:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800854a:	494e      	ldr	r1, [pc, #312]	@ (8008684 <tcp_abandon+0x168>)
 800854c:	484c      	ldr	r0, [pc, #304]	@ (8008680 <tcp_abandon+0x164>)
 800854e:	f008 fcbd 	bl	8010ecc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7d1b      	ldrb	r3, [r3, #20]
 8008556:	2b0a      	cmp	r3, #10
 8008558:	d107      	bne.n	800856a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	484a      	ldr	r0, [pc, #296]	@ (8008688 <tcp_abandon+0x16c>)
 800855e:	f000 ffc5 	bl	80094ec <tcp_pcb_remove>
    tcp_free(pcb);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fdb0 	bl	80080c8 <tcp_free>
 8008568:	e082      	b.n	8008670 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008576:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008584:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	7d1b      	ldrb	r3, [r3, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d126      	bne.n	80085e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	8adb      	ldrh	r3, [r3, #22]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d02e      	beq.n	80085fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800859c:	4b3b      	ldr	r3, [pc, #236]	@ (800868c <tcp_abandon+0x170>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d105      	bne.n	80085b2 <tcp_abandon+0x96>
 80085a6:	4b39      	ldr	r3, [pc, #228]	@ (800868c <tcp_abandon+0x170>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	4a37      	ldr	r2, [pc, #220]	@ (800868c <tcp_abandon+0x170>)
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	e013      	b.n	80085da <tcp_abandon+0xbe>
 80085b2:	4b36      	ldr	r3, [pc, #216]	@ (800868c <tcp_abandon+0x170>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e00c      	b.n	80085d4 <tcp_abandon+0xb8>
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d104      	bne.n	80085ce <tcp_abandon+0xb2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	60da      	str	r2, [r3, #12]
 80085cc:	e005      	b.n	80085da <tcp_abandon+0xbe>
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1ef      	bne.n	80085ba <tcp_abandon+0x9e>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	e00b      	b.n	80085fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	8adb      	ldrh	r3, [r3, #22]
 80085ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	4828      	ldr	r0, [pc, #160]	@ (8008690 <tcp_abandon+0x174>)
 80085f0:	f000 ff7c 	bl	80094ec <tcp_pcb_remove>
 80085f4:	4b27      	ldr	r3, [pc, #156]	@ (8008694 <tcp_abandon+0x178>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fd1e 	bl	8009048 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fd15 	bl	8009048 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008622:	2b00      	cmp	r3, #0
 8008624:	d004      	beq.n	8008630 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800862a:	4618      	mov	r0, r3
 800862c:	f000 fd0c 	bl	8009048 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	8b12      	ldrh	r2, [r2, #24]
 8008640:	9202      	str	r2, [sp, #8]
 8008642:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008644:	9201      	str	r2, [sp, #4]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	460b      	mov	r3, r1
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	69b9      	ldr	r1, [r7, #24]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f004 fcd8 	bl	800d004 <tcp_rst>
    }
    last_state = pcb->state;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7d1b      	ldrb	r3, [r3, #20]
 8008658:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff fd34 	bl	80080c8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <tcp_abandon+0x154>
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f06f 010c 	mvn.w	r1, #12
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	4798      	blx	r3
  }
}
 8008670:	3728      	adds	r7, #40	@ 0x28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	08012c34 	.word	0x08012c34
 800867c:	08012d78 	.word	0x08012d78
 8008680:	08012c78 	.word	0x08012c78
 8008684:	08012d94 	.word	0x08012d94
 8008688:	20007efc 	.word	0x20007efc
 800868c:	20007ef0 	.word	0x20007ef0
 8008690:	20007ef8 	.word	0x20007ef8
 8008694:	20007f00 	.word	0x20007f00

08008698 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80086a0:	2101      	movs	r1, #1
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff ff3a 	bl	800851c <tcp_abandon>
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <tcp_update_rcv_ann_wnd+0x1c>
 80086be:	4b25      	ldr	r3, [pc, #148]	@ (8008754 <tcp_update_rcv_ann_wnd+0xa4>)
 80086c0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80086c4:	4924      	ldr	r1, [pc, #144]	@ (8008758 <tcp_update_rcv_ann_wnd+0xa8>)
 80086c6:	4825      	ldr	r0, [pc, #148]	@ (800875c <tcp_update_rcv_ann_wnd+0xac>)
 80086c8:	f008 fc00 	bl	8010ecc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80086d4:	4413      	add	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80086e0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80086e4:	bf28      	it	cs
 80086e6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80086ea:	b292      	uxth	r2, r2
 80086ec:	4413      	add	r3, r2
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	db08      	blt.n	8008708 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	e020      	b.n	800874a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	dd03      	ble.n	800871e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800871c:	e014      	b.n	8008748 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008730:	d306      	bcc.n	8008740 <tcp_update_rcv_ann_wnd+0x90>
 8008732:	4b08      	ldr	r3, [pc, #32]	@ (8008754 <tcp_update_rcv_ann_wnd+0xa4>)
 8008734:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008738:	4909      	ldr	r1, [pc, #36]	@ (8008760 <tcp_update_rcv_ann_wnd+0xb0>)
 800873a:	4808      	ldr	r0, [pc, #32]	@ (800875c <tcp_update_rcv_ann_wnd+0xac>)
 800873c:	f008 fbc6 	bl	8010ecc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8008748:	2300      	movs	r3, #0
  }
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	08012c34 	.word	0x08012c34
 8008758:	08012e90 	.word	0x08012e90
 800875c:	08012c78 	.word	0x08012c78
 8008760:	08012eb4 	.word	0x08012eb4

08008764 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d107      	bne.n	8008786 <tcp_recved+0x22>
 8008776:	4b1f      	ldr	r3, [pc, #124]	@ (80087f4 <tcp_recved+0x90>)
 8008778:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800877c:	491e      	ldr	r1, [pc, #120]	@ (80087f8 <tcp_recved+0x94>)
 800877e:	481f      	ldr	r0, [pc, #124]	@ (80087fc <tcp_recved+0x98>)
 8008780:	f008 fba4 	bl	8010ecc <iprintf>
 8008784:	e032      	b.n	80087ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	7d1b      	ldrb	r3, [r3, #20]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d106      	bne.n	800879c <tcp_recved+0x38>
 800878e:	4b19      	ldr	r3, [pc, #100]	@ (80087f4 <tcp_recved+0x90>)
 8008790:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008794:	491a      	ldr	r1, [pc, #104]	@ (8008800 <tcp_recved+0x9c>)
 8008796:	4819      	ldr	r0, [pc, #100]	@ (80087fc <tcp_recved+0x98>)
 8008798:	f008 fb98 	bl	8010ecc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80087a0:	887b      	ldrh	r3, [r7, #2]
 80087a2:	4413      	add	r3, r2
 80087a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80087a6:	89fb      	ldrh	r3, [r7, #14]
 80087a8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80087ac:	d804      	bhi.n	80087b8 <tcp_recved+0x54>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087b2:	89fa      	ldrh	r2, [r7, #14]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d204      	bcs.n	80087c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80087be:	851a      	strh	r2, [r3, #40]	@ 0x28
 80087c0:	e002      	b.n	80087c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	89fa      	ldrh	r2, [r7, #14]
 80087c6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ff71 	bl	80086b0 <tcp_update_rcv_ann_wnd>
 80087ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80087d6:	d309      	bcc.n	80087ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	8b5b      	ldrh	r3, [r3, #26]
 80087dc:	f043 0302 	orr.w	r3, r3, #2
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f003 fe4c 	bl	800c484 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	08012c34 	.word	0x08012c34
 80087f8:	08012ed0 	.word	0x08012ed0
 80087fc:	08012c78 	.word	0x08012c78
 8008800:	08012ee8 	.word	0x08012ee8

08008804 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008804:	b5b0      	push	{r4, r5, r7, lr}
 8008806:	b090      	sub	sp, #64	@ 0x40
 8008808:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8008810:	4b95      	ldr	r3, [pc, #596]	@ (8008a68 <tcp_slowtmr+0x264>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	4a94      	ldr	r2, [pc, #592]	@ (8008a68 <tcp_slowtmr+0x264>)
 8008818:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800881a:	4b94      	ldr	r3, [pc, #592]	@ (8008a6c <tcp_slowtmr+0x268>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	b2da      	uxtb	r2, r3
 8008822:	4b92      	ldr	r3, [pc, #584]	@ (8008a6c <tcp_slowtmr+0x268>)
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e000      	b.n	800882a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8008828:	bf00      	nop
  prev = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800882e:	4b90      	ldr	r3, [pc, #576]	@ (8008a70 <tcp_slowtmr+0x26c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008834:	e29d      	b.n	8008d72 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008838:	7d1b      	ldrb	r3, [r3, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d106      	bne.n	800884c <tcp_slowtmr+0x48>
 800883e:	4b8d      	ldr	r3, [pc, #564]	@ (8008a74 <tcp_slowtmr+0x270>)
 8008840:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008844:	498c      	ldr	r1, [pc, #560]	@ (8008a78 <tcp_slowtmr+0x274>)
 8008846:	488d      	ldr	r0, [pc, #564]	@ (8008a7c <tcp_slowtmr+0x278>)
 8008848:	f008 fb40 	bl	8010ecc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800884c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884e:	7d1b      	ldrb	r3, [r3, #20]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d106      	bne.n	8008862 <tcp_slowtmr+0x5e>
 8008854:	4b87      	ldr	r3, [pc, #540]	@ (8008a74 <tcp_slowtmr+0x270>)
 8008856:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800885a:	4989      	ldr	r1, [pc, #548]	@ (8008a80 <tcp_slowtmr+0x27c>)
 800885c:	4887      	ldr	r0, [pc, #540]	@ (8008a7c <tcp_slowtmr+0x278>)
 800885e:	f008 fb35 	bl	8010ecc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008864:	7d1b      	ldrb	r3, [r3, #20]
 8008866:	2b0a      	cmp	r3, #10
 8008868:	d106      	bne.n	8008878 <tcp_slowtmr+0x74>
 800886a:	4b82      	ldr	r3, [pc, #520]	@ (8008a74 <tcp_slowtmr+0x270>)
 800886c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8008870:	4984      	ldr	r1, [pc, #528]	@ (8008a84 <tcp_slowtmr+0x280>)
 8008872:	4882      	ldr	r0, [pc, #520]	@ (8008a7c <tcp_slowtmr+0x278>)
 8008874:	f008 fb2a 	bl	8010ecc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887a:	7f9a      	ldrb	r2, [r3, #30]
 800887c:	4b7b      	ldr	r3, [pc, #492]	@ (8008a6c <tcp_slowtmr+0x268>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d105      	bne.n	8008890 <tcp_slowtmr+0x8c>
      prev = pcb;
 8008884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008886:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800888e:	e270      	b.n	8008d72 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8008890:	4b76      	ldr	r3, [pc, #472]	@ (8008a6c <tcp_slowtmr+0x268>)
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008896:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a6:	7d1b      	ldrb	r3, [r3, #20]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d10a      	bne.n	80088c2 <tcp_slowtmr+0xbe>
 80088ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088b2:	2b05      	cmp	r3, #5
 80088b4:	d905      	bls.n	80088c2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80088b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088ba:	3301      	adds	r3, #1
 80088bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80088c0:	e11e      	b.n	8008b00 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80088c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088c8:	2b0b      	cmp	r3, #11
 80088ca:	d905      	bls.n	80088d8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80088cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088d0:	3301      	adds	r3, #1
 80088d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088d6:	e113      	b.n	8008b00 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80088d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d075      	beq.n	80089ce <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80088e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d006      	beq.n	80088f8 <tcp_slowtmr+0xf4>
 80088ea:	4b62      	ldr	r3, [pc, #392]	@ (8008a74 <tcp_slowtmr+0x270>)
 80088ec:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80088f0:	4965      	ldr	r1, [pc, #404]	@ (8008a88 <tcp_slowtmr+0x284>)
 80088f2:	4862      	ldr	r0, [pc, #392]	@ (8008a7c <tcp_slowtmr+0x278>)
 80088f4:	f008 faea 	bl	8010ecc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80088f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d106      	bne.n	800890e <tcp_slowtmr+0x10a>
 8008900:	4b5c      	ldr	r3, [pc, #368]	@ (8008a74 <tcp_slowtmr+0x270>)
 8008902:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008906:	4961      	ldr	r1, [pc, #388]	@ (8008a8c <tcp_slowtmr+0x288>)
 8008908:	485c      	ldr	r0, [pc, #368]	@ (8008a7c <tcp_slowtmr+0x278>)
 800890a:	f008 fadf 	bl	8010ecc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800890e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008910:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8008914:	2b0b      	cmp	r3, #11
 8008916:	d905      	bls.n	8008924 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800891c:	3301      	adds	r3, #1
 800891e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008922:	e0ed      	b.n	8008b00 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008926:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800892a:	3b01      	subs	r3, #1
 800892c:	4a58      	ldr	r2, [pc, #352]	@ (8008a90 <tcp_slowtmr+0x28c>)
 800892e:	5cd3      	ldrb	r3, [r2, r3]
 8008930:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008934:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008938:	7c7a      	ldrb	r2, [r7, #17]
 800893a:	429a      	cmp	r2, r3
 800893c:	d907      	bls.n	800894e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800893e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008940:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008944:	3301      	adds	r3, #1
 8008946:	b2da      	uxtb	r2, r3
 8008948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800894e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008950:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008954:	7c7a      	ldrb	r2, [r7, #17]
 8008956:	429a      	cmp	r2, r3
 8008958:	f200 80d2 	bhi.w	8008b00 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800895c:	2301      	movs	r3, #1
 800895e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008966:	2b00      	cmp	r3, #0
 8008968:	d108      	bne.n	800897c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800896a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800896c:	f004 fc3e 	bl	800d1ec <tcp_zero_window_probe>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d014      	beq.n	80089a0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8008976:	2300      	movs	r3, #0
 8008978:	623b      	str	r3, [r7, #32]
 800897a:	e011      	b.n	80089a0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800897c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008982:	4619      	mov	r1, r3
 8008984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008986:	f003 faf3 	bl	800bf70 <tcp_split_unsent_seg>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d107      	bne.n	80089a0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008990:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008992:	f003 fd77 	bl	800c484 <tcp_output>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 80ac 	beq.w	8008b00 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80089a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089b6:	2b06      	cmp	r3, #6
 80089b8:	f200 80a2 	bhi.w	8008b00 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80089bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089be:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089c2:	3301      	adds	r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80089cc:	e098      	b.n	8008b00 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80089ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	db0f      	blt.n	80089f8 <tcp_slowtmr+0x1f4>
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80089de:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d008      	beq.n	80089f8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80089e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3301      	adds	r3, #1
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	b21a      	sxth	r2, r3
 80089f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80089fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008a04:	429a      	cmp	r2, r3
 8008a06:	db7b      	blt.n	8008b00 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a0a:	f004 f831 	bl	800ca70 <tcp_rexmit_rto_prepare>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <tcp_slowtmr+0x220>
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d171      	bne.n	8008b00 <tcp_slowtmr+0x2fc>
 8008a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d06d      	beq.n	8008b00 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a26:	7d1b      	ldrb	r3, [r3, #20]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d03a      	beq.n	8008aa2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a32:	2b0c      	cmp	r3, #12
 8008a34:	bf28      	it	cs
 8008a36:	230c      	movcs	r3, #12
 8008a38:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a40:	10db      	asrs	r3, r3, #3
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a4c:	4413      	add	r3, r2
 8008a4e:	7efa      	ldrb	r2, [r7, #27]
 8008a50:	4910      	ldr	r1, [pc, #64]	@ (8008a94 <tcp_slowtmr+0x290>)
 8008a52:	5c8a      	ldrb	r2, [r1, r2]
 8008a54:	4093      	lsls	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	dc1a      	bgt.n	8008a98 <tcp_slowtmr+0x294>
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	b21a      	sxth	r2, r3
 8008a66:	e019      	b.n	8008a9c <tcp_slowtmr+0x298>
 8008a68:	20007eec 	.word	0x20007eec
 8008a6c:	20007f02 	.word	0x20007f02
 8008a70:	20007ef8 	.word	0x20007ef8
 8008a74:	08012c34 	.word	0x08012c34
 8008a78:	08012f78 	.word	0x08012f78
 8008a7c:	08012c78 	.word	0x08012c78
 8008a80:	08012fa4 	.word	0x08012fa4
 8008a84:	08012fd0 	.word	0x08012fd0
 8008a88:	08013000 	.word	0x08013000
 8008a8c:	08013034 	.word	0x08013034
 8008a90:	080153b0 	.word	0x080153b0
 8008a94:	080153a0 	.word	0x080153a0
 8008a98:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	bf28      	it	cs
 8008ab8:	4613      	movcs	r3, r2
 8008aba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008abc:	8a7b      	ldrh	r3, [r7, #18]
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d206      	bcs.n	8008ae8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008afa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008afc:	f004 f832 	bl	800cb64 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b02:	7d1b      	ldrb	r3, [r3, #20]
 8008b04:	2b06      	cmp	r3, #6
 8008b06:	d111      	bne.n	8008b2c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0a:	8b5b      	ldrh	r3, [r3, #26]
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b14:	4b9c      	ldr	r3, [pc, #624]	@ (8008d88 <tcp_slowtmr+0x584>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b28      	cmp	r3, #40	@ 0x28
 8008b20:	d904      	bls.n	8008b2c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008b22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b26:	3301      	adds	r3, #1
 8008b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2e:	7a5b      	ldrb	r3, [r3, #9]
 8008b30:	f003 0308 	and.w	r3, r3, #8
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d04a      	beq.n	8008bce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d003      	beq.n	8008b48 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b42:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b44:	2b07      	cmp	r3, #7
 8008b46:	d142      	bne.n	8008bce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b48:	4b8f      	ldr	r3, [pc, #572]	@ (8008d88 <tcp_slowtmr+0x584>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b54:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008b58:	4b8c      	ldr	r3, [pc, #560]	@ (8008d8c <tcp_slowtmr+0x588>)
 8008b5a:	440b      	add	r3, r1
 8008b5c:	498c      	ldr	r1, [pc, #560]	@ (8008d90 <tcp_slowtmr+0x58c>)
 8008b5e:	fba1 1303 	umull	r1, r3, r1, r3
 8008b62:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d90a      	bls.n	8008b7e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8008b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008b72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b76:	3301      	adds	r3, #1
 8008b78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b7c:	e027      	b.n	8008bce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b7e:	4b82      	ldr	r3, [pc, #520]	@ (8008d88 <tcp_slowtmr+0x584>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008b94:	4618      	mov	r0, r3
 8008b96:	4b7f      	ldr	r3, [pc, #508]	@ (8008d94 <tcp_slowtmr+0x590>)
 8008b98:	fb00 f303 	mul.w	r3, r0, r3
 8008b9c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008b9e:	497c      	ldr	r1, [pc, #496]	@ (8008d90 <tcp_slowtmr+0x58c>)
 8008ba0:	fba1 1303 	umull	r1, r3, r1, r3
 8008ba4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d911      	bls.n	8008bce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bac:	f004 fade 	bl	800d16c <tcp_keepalive>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008bb6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d107      	bne.n	8008bce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bca:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d011      	beq.n	8008bfa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8008d88 <tcp_slowtmr+0x584>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008be6:	4619      	mov	r1, r3
 8008be8:	460b      	mov	r3, r1
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	440b      	add	r3, r1
 8008bee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d302      	bcc.n	8008bfa <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008bf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bf6:	f000 fde3 	bl	80097c0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	7d1b      	ldrb	r3, [r3, #20]
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d10b      	bne.n	8008c1a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c02:	4b61      	ldr	r3, [pc, #388]	@ (8008d88 <tcp_slowtmr+0x584>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b28      	cmp	r3, #40	@ 0x28
 8008c0e:	d904      	bls.n	8008c1a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c14:	3301      	adds	r3, #1
 8008c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1c:	7d1b      	ldrb	r3, [r3, #20]
 8008c1e:	2b09      	cmp	r3, #9
 8008c20:	d10b      	bne.n	8008c3a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c22:	4b59      	ldr	r3, [pc, #356]	@ (8008d88 <tcp_slowtmr+0x584>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2bf0      	cmp	r3, #240	@ 0xf0
 8008c2e:	d904      	bls.n	8008c3a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c34:	3301      	adds	r3, #1
 8008c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d060      	beq.n	8008d04 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c48:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008c4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c4c:	f000 fbfe 	bl	800944c <tcp_pcb_purge>
      if (prev != NULL) {
 8008c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d010      	beq.n	8008c78 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c56:	4b50      	ldr	r3, [pc, #320]	@ (8008d98 <tcp_slowtmr+0x594>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d106      	bne.n	8008c6e <tcp_slowtmr+0x46a>
 8008c60:	4b4e      	ldr	r3, [pc, #312]	@ (8008d9c <tcp_slowtmr+0x598>)
 8008c62:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008c66:	494e      	ldr	r1, [pc, #312]	@ (8008da0 <tcp_slowtmr+0x59c>)
 8008c68:	484e      	ldr	r0, [pc, #312]	@ (8008da4 <tcp_slowtmr+0x5a0>)
 8008c6a:	f008 f92f 	bl	8010ecc <iprintf>
        prev->next = pcb->next;
 8008c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	e00f      	b.n	8008c98 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008c78:	4b47      	ldr	r3, [pc, #284]	@ (8008d98 <tcp_slowtmr+0x594>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d006      	beq.n	8008c90 <tcp_slowtmr+0x48c>
 8008c82:	4b46      	ldr	r3, [pc, #280]	@ (8008d9c <tcp_slowtmr+0x598>)
 8008c84:	f240 5271 	movw	r2, #1393	@ 0x571
 8008c88:	4947      	ldr	r1, [pc, #284]	@ (8008da8 <tcp_slowtmr+0x5a4>)
 8008c8a:	4846      	ldr	r0, [pc, #280]	@ (8008da4 <tcp_slowtmr+0x5a0>)
 8008c8c:	f008 f91e 	bl	8010ecc <iprintf>
        tcp_active_pcbs = pcb->next;
 8008c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	4a40      	ldr	r2, [pc, #256]	@ (8008d98 <tcp_slowtmr+0x594>)
 8008c96:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008c98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d013      	beq.n	8008cc8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008ca8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cac:	3304      	adds	r3, #4
 8008cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cb0:	8ad2      	ldrh	r2, [r2, #22]
 8008cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cb4:	8b09      	ldrh	r1, [r1, #24]
 8008cb6:	9102      	str	r1, [sp, #8]
 8008cb8:	9201      	str	r2, [sp, #4]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cc4:	f004 f99e 	bl	800d004 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd0:	7d1b      	ldrb	r3, [r3, #20]
 8008cd2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008cde:	6838      	ldr	r0, [r7, #0]
 8008ce0:	f7ff f9f2 	bl	80080c8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008ce4:	4b31      	ldr	r3, [pc, #196]	@ (8008dac <tcp_slowtmr+0x5a8>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <tcp_slowtmr+0x4f6>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f06f 010c 	mvn.w	r1, #12
 8008cf6:	68b8      	ldr	r0, [r7, #8]
 8008cf8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8008dac <tcp_slowtmr+0x5a8>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d037      	beq.n	8008d72 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008d02:	e592      	b.n	800882a <tcp_slowtmr+0x26>
      prev = pcb;
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d10:	7f1b      	ldrb	r3, [r3, #28]
 8008d12:	3301      	adds	r3, #1
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1c:	7f1a      	ldrb	r2, [r3, #28]
 8008d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d20:	7f5b      	ldrb	r3, [r3, #29]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d325      	bcc.n	8008d72 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d28:	2200      	movs	r2, #0
 8008d2a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dac <tcp_slowtmr+0x5a8>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <tcp_slowtmr+0x550>
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d44:	6912      	ldr	r2, [r2, #16]
 8008d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4798      	blx	r3
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008d52:	e002      	b.n	8008d5a <tcp_slowtmr+0x556>
 8008d54:	2300      	movs	r3, #0
 8008d56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008d5a:	4b14      	ldr	r3, [pc, #80]	@ (8008dac <tcp_slowtmr+0x5a8>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f47f ad62 	bne.w	8008828 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d64:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008d6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d6e:	f003 fb89 	bl	800c484 <tcp_output>
  while (pcb != NULL) {
 8008d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f47f ad5e 	bne.w	8008836 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008db0 <tcp_slowtmr+0x5ac>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008d84:	e069      	b.n	8008e5a <tcp_slowtmr+0x656>
 8008d86:	bf00      	nop
 8008d88:	20007eec 	.word	0x20007eec
 8008d8c:	000a4cb8 	.word	0x000a4cb8
 8008d90:	10624dd3 	.word	0x10624dd3
 8008d94:	000124f8 	.word	0x000124f8
 8008d98:	20007ef8 	.word	0x20007ef8
 8008d9c:	08012c34 	.word	0x08012c34
 8008da0:	0801306c 	.word	0x0801306c
 8008da4:	08012c78 	.word	0x08012c78
 8008da8:	08013098 	.word	0x08013098
 8008dac:	20007f00 	.word	0x20007f00
 8008db0:	20007efc 	.word	0x20007efc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	7d1b      	ldrb	r3, [r3, #20]
 8008db8:	2b0a      	cmp	r3, #10
 8008dba:	d006      	beq.n	8008dca <tcp_slowtmr+0x5c6>
 8008dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8008e6c <tcp_slowtmr+0x668>)
 8008dbe:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008dc2:	492b      	ldr	r1, [pc, #172]	@ (8008e70 <tcp_slowtmr+0x66c>)
 8008dc4:	482b      	ldr	r0, [pc, #172]	@ (8008e74 <tcp_slowtmr+0x670>)
 8008dc6:	f008 f881 	bl	8010ecc <iprintf>
    pcb_remove = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008dd0:	4b29      	ldr	r3, [pc, #164]	@ (8008e78 <tcp_slowtmr+0x674>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2bf0      	cmp	r3, #240	@ 0xf0
 8008ddc:	d904      	bls.n	8008de8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008de2:	3301      	adds	r3, #1
 8008de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d02f      	beq.n	8008e50 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008df0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008df2:	f000 fb2b 	bl	800944c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d010      	beq.n	8008e1e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8008e7c <tcp_slowtmr+0x678>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d106      	bne.n	8008e14 <tcp_slowtmr+0x610>
 8008e06:	4b19      	ldr	r3, [pc, #100]	@ (8008e6c <tcp_slowtmr+0x668>)
 8008e08:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008e0c:	491c      	ldr	r1, [pc, #112]	@ (8008e80 <tcp_slowtmr+0x67c>)
 8008e0e:	4819      	ldr	r0, [pc, #100]	@ (8008e74 <tcp_slowtmr+0x670>)
 8008e10:	f008 f85c 	bl	8010ecc <iprintf>
        prev->next = pcb->next;
 8008e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1a:	60da      	str	r2, [r3, #12]
 8008e1c:	e00f      	b.n	8008e3e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e1e:	4b17      	ldr	r3, [pc, #92]	@ (8008e7c <tcp_slowtmr+0x678>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d006      	beq.n	8008e36 <tcp_slowtmr+0x632>
 8008e28:	4b10      	ldr	r3, [pc, #64]	@ (8008e6c <tcp_slowtmr+0x668>)
 8008e2a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008e2e:	4915      	ldr	r1, [pc, #84]	@ (8008e84 <tcp_slowtmr+0x680>)
 8008e30:	4810      	ldr	r0, [pc, #64]	@ (8008e74 <tcp_slowtmr+0x670>)
 8008e32:	f008 f84b 	bl	8010ecc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	4a10      	ldr	r2, [pc, #64]	@ (8008e7c <tcp_slowtmr+0x678>)
 8008e3c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e40:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008e48:	69f8      	ldr	r0, [r7, #28]
 8008e4a:	f7ff f93d 	bl	80080c8 <tcp_free>
 8008e4e:	e004      	b.n	8008e5a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e52:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1a9      	bne.n	8008db4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	3730      	adds	r7, #48	@ 0x30
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bdb0      	pop	{r4, r5, r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	08012c34 	.word	0x08012c34
 8008e70:	080130c4 	.word	0x080130c4
 8008e74:	08012c78 	.word	0x08012c78
 8008e78:	20007eec 	.word	0x20007eec
 8008e7c:	20007efc 	.word	0x20007efc
 8008e80:	080130f4 	.word	0x080130f4
 8008e84:	0801311c 	.word	0x0801311c

08008e88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8008f44 <tcp_fasttmr+0xbc>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	3301      	adds	r3, #1
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	4b2b      	ldr	r3, [pc, #172]	@ (8008f44 <tcp_fasttmr+0xbc>)
 8008e98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8008f48 <tcp_fasttmr+0xc0>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008ea0:	e048      	b.n	8008f34 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7f9a      	ldrb	r2, [r3, #30]
 8008ea6:	4b27      	ldr	r3, [pc, #156]	@ (8008f44 <tcp_fasttmr+0xbc>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d03f      	beq.n	8008f2e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008eae:	4b25      	ldr	r3, [pc, #148]	@ (8008f44 <tcp_fasttmr+0xbc>)
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	8b5b      	ldrh	r3, [r3, #26]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d010      	beq.n	8008ee4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	8b5b      	ldrh	r3, [r3, #26]
 8008ec6:	f043 0302 	orr.w	r3, r3, #2
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f003 fad7 	bl	800c484 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	8b5b      	ldrh	r3, [r3, #26]
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	8b5b      	ldrh	r3, [r3, #26]
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d009      	beq.n	8008f04 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	8b5b      	ldrh	r3, [r3, #26]
 8008ef4:	f023 0308 	bic.w	r3, r3, #8
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff fa76 	bl	80083f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00a      	beq.n	8008f28 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f12:	4b0e      	ldr	r3, [pc, #56]	@ (8008f4c <tcp_fasttmr+0xc4>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f819 	bl	8008f50 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f4c <tcp_fasttmr+0xc4>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d000      	beq.n	8008f28 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f26:	e7b8      	b.n	8008e9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	607b      	str	r3, [r7, #4]
 8008f2c:	e002      	b.n	8008f34 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1b3      	bne.n	8008ea2 <tcp_fasttmr+0x1a>
    }
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20007f02 	.word	0x20007f02
 8008f48:	20007ef8 	.word	0x20007ef8
 8008f4c:	20007f00 	.word	0x20007f00

08008f50 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <tcp_process_refused_data+0x22>
 8008f5e:	4b37      	ldr	r3, [pc, #220]	@ (800903c <tcp_process_refused_data+0xec>)
 8008f60:	f240 6209 	movw	r2, #1545	@ 0x609
 8008f64:	4936      	ldr	r1, [pc, #216]	@ (8009040 <tcp_process_refused_data+0xf0>)
 8008f66:	4837      	ldr	r0, [pc, #220]	@ (8009044 <tcp_process_refused_data+0xf4>)
 8008f68:	f007 ffb0 	bl	8010ecc <iprintf>
 8008f6c:	f06f 030f 	mvn.w	r3, #15
 8008f70:	e060      	b.n	8009034 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f76:	7b5b      	ldrb	r3, [r3, #13]
 8008f78:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f7e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <tcp_process_refused_data+0x58>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6918      	ldr	r0, [r3, #16]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	47a0      	blx	r4
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
 8008fa6:	e007      	b.n	8008fb8 <tcp_process_refused_data+0x68>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	2000      	movs	r0, #0
 8008fb0:	f000 f8a4 	bl	80090fc <tcp_recv_null>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d12a      	bne.n	8009016 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d033      	beq.n	8009032 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008fd2:	d005      	beq.n	8008fe0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fd8:	3301      	adds	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00b      	beq.n	8009002 <tcp_process_refused_data+0xb2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6918      	ldr	r0, [r3, #16]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	47a0      	blx	r4
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]
 8009000:	e001      	b.n	8009006 <tcp_process_refused_data+0xb6>
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800900a:	f113 0f0d 	cmn.w	r3, #13
 800900e:	d110      	bne.n	8009032 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009010:	f06f 030c 	mvn.w	r3, #12
 8009014:	e00e      	b.n	8009034 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800901a:	f113 0f0d 	cmn.w	r3, #13
 800901e:	d102      	bne.n	8009026 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009020:	f06f 030c 	mvn.w	r3, #12
 8009024:	e006      	b.n	8009034 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800902c:	f06f 0304 	mvn.w	r3, #4
 8009030:	e000      	b.n	8009034 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	bd90      	pop	{r4, r7, pc}
 800903c:	08012c34 	.word	0x08012c34
 8009040:	08013144 	.word	0x08013144
 8009044:	08012c78 	.word	0x08012c78

08009048 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009050:	e007      	b.n	8009062 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f80a 	bl	8009072 <tcp_seg_free>
    seg = next;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1f4      	bne.n	8009052 <tcp_segs_free+0xa>
  }
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00c      	beq.n	800909a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe fd6b 	bl	8007b68 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	2003      	movs	r0, #3
 8009096:	f7fd fdfb 	bl	8006c90 <memp_free>
  }
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <tcp_seg_copy+0x1c>
 80090b2:	4b0f      	ldr	r3, [pc, #60]	@ (80090f0 <tcp_seg_copy+0x4c>)
 80090b4:	f240 6282 	movw	r2, #1666	@ 0x682
 80090b8:	490e      	ldr	r1, [pc, #56]	@ (80090f4 <tcp_seg_copy+0x50>)
 80090ba:	480f      	ldr	r0, [pc, #60]	@ (80090f8 <tcp_seg_copy+0x54>)
 80090bc:	f007 ff06 	bl	8010ecc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090c0:	2003      	movs	r0, #3
 80090c2:	f7fd fd75 	bl	8006bb0 <memp_malloc>
 80090c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <tcp_seg_copy+0x2e>
    return NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e00a      	b.n	80090e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090d2:	2214      	movs	r2, #20
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f008 f8cd 	bl	8011276 <memcpy>
  pbuf_ref(cseg->p);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fde1 	bl	8007ca8 <pbuf_ref>
  return cseg;
 80090e6:	68fb      	ldr	r3, [r7, #12]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	08012c34 	.word	0x08012c34
 80090f4:	08013188 	.word	0x08013188
 80090f8:	08012c78 	.word	0x08012c78

080090fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d109      	bne.n	8009124 <tcp_recv_null+0x28>
 8009110:	4b12      	ldr	r3, [pc, #72]	@ (800915c <tcp_recv_null+0x60>)
 8009112:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009116:	4912      	ldr	r1, [pc, #72]	@ (8009160 <tcp_recv_null+0x64>)
 8009118:	4812      	ldr	r0, [pc, #72]	@ (8009164 <tcp_recv_null+0x68>)
 800911a:	f007 fed7 	bl	8010ecc <iprintf>
 800911e:	f06f 030f 	mvn.w	r3, #15
 8009122:	e016      	b.n	8009152 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d009      	beq.n	800913e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	891b      	ldrh	r3, [r3, #8]
 800912e:	4619      	mov	r1, r3
 8009130:	68b8      	ldr	r0, [r7, #8]
 8009132:	f7ff fb17 	bl	8008764 <tcp_recved>
    pbuf_free(p);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fe fd16 	bl	8007b68 <pbuf_free>
 800913c:	e008      	b.n	8009150 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800913e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d104      	bne.n	8009150 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009146:	68b8      	ldr	r0, [r7, #8]
 8009148:	f7ff f9bc 	bl	80084c4 <tcp_close>
 800914c:	4603      	mov	r3, r0
 800914e:	e000      	b.n	8009152 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	08012c34 	.word	0x08012c34
 8009160:	080131a4 	.word	0x080131a4
 8009164:	08012c78 	.word	0x08012c78

08009168 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	db01      	blt.n	800917e <tcp_kill_prio+0x16>
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	e000      	b.n	8009180 <tcp_kill_prio+0x18>
 800917e:	237f      	movs	r3, #127	@ 0x7f
 8009180:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d034      	beq.n	80091f2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009188:	7afb      	ldrb	r3, [r7, #11]
 800918a:	3b01      	subs	r3, #1
 800918c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009196:	4b19      	ldr	r3, [pc, #100]	@ (80091fc <tcp_kill_prio+0x94>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	e01f      	b.n	80091de <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	7d5b      	ldrb	r3, [r3, #21]
 80091a2:	7afa      	ldrb	r2, [r7, #11]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d80c      	bhi.n	80091c2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091ac:	7afa      	ldrb	r2, [r7, #11]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d112      	bne.n	80091d8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091b2:	4b13      	ldr	r3, [pc, #76]	@ (8009200 <tcp_kill_prio+0x98>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d80a      	bhi.n	80091d8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80091c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009200 <tcp_kill_prio+0x98>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	7d5b      	ldrb	r3, [r3, #21]
 80091d6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1dc      	bne.n	800919e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d004      	beq.n	80091f4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80091ea:	6938      	ldr	r0, [r7, #16]
 80091ec:	f7ff fa54 	bl	8008698 <tcp_abort>
 80091f0:	e000      	b.n	80091f4 <tcp_kill_prio+0x8c>
    return;
 80091f2:	bf00      	nop
  }
}
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	20007ef8 	.word	0x20007ef8
 8009200:	20007eec 	.word	0x20007eec

08009204 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	2b08      	cmp	r3, #8
 8009212:	d009      	beq.n	8009228 <tcp_kill_state+0x24>
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	2b09      	cmp	r3, #9
 8009218:	d006      	beq.n	8009228 <tcp_kill_state+0x24>
 800921a:	4b1a      	ldr	r3, [pc, #104]	@ (8009284 <tcp_kill_state+0x80>)
 800921c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009220:	4919      	ldr	r1, [pc, #100]	@ (8009288 <tcp_kill_state+0x84>)
 8009222:	481a      	ldr	r0, [pc, #104]	@ (800928c <tcp_kill_state+0x88>)
 8009224:	f007 fe52 	bl	8010ecc <iprintf>

  inactivity = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800922c:	2300      	movs	r3, #0
 800922e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009230:	4b17      	ldr	r3, [pc, #92]	@ (8009290 <tcp_kill_state+0x8c>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	e017      	b.n	8009268 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	7d1b      	ldrb	r3, [r3, #20]
 800923c:	79fa      	ldrb	r2, [r7, #7]
 800923e:	429a      	cmp	r2, r3
 8009240:	d10f      	bne.n	8009262 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009242:	4b14      	ldr	r3, [pc, #80]	@ (8009294 <tcp_kill_state+0x90>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	429a      	cmp	r2, r3
 8009250:	d807      	bhi.n	8009262 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009252:	4b10      	ldr	r3, [pc, #64]	@ (8009294 <tcp_kill_state+0x90>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e4      	bne.n	8009238 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009274:	2100      	movs	r1, #0
 8009276:	6938      	ldr	r0, [r7, #16]
 8009278:	f7ff f950 	bl	800851c <tcp_abandon>
  }
}
 800927c:	bf00      	nop
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	08012c34 	.word	0x08012c34
 8009288:	080131c0 	.word	0x080131c0
 800928c:	08012c78 	.word	0x08012c78
 8009290:	20007ef8 	.word	0x20007ef8
 8009294:	20007eec 	.word	0x20007eec

08009298 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092a6:	4b12      	ldr	r3, [pc, #72]	@ (80092f0 <tcp_kill_timewait+0x58>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	e012      	b.n	80092d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092ae:	4b11      	ldr	r3, [pc, #68]	@ (80092f4 <tcp_kill_timewait+0x5c>)
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d807      	bhi.n	80092ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80092be:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <tcp_kill_timewait+0x5c>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e9      	bne.n	80092ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80092e0:	68b8      	ldr	r0, [r7, #8]
 80092e2:	f7ff f9d9 	bl	8008698 <tcp_abort>
  }
}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20007efc 	.word	0x20007efc
 80092f4:	20007eec 	.word	0x20007eec

080092f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80092fe:	4b10      	ldr	r3, [pc, #64]	@ (8009340 <tcp_handle_closepend+0x48>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009304:	e014      	b.n	8009330 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8b5b      	ldrh	r3, [r3, #26]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b00      	cmp	r3, #0
 8009316:	d009      	beq.n	800932c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	8b5b      	ldrh	r3, [r3, #26]
 800931c:	f023 0308 	bic.w	r3, r3, #8
 8009320:	b29a      	uxth	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff f862 	bl	80083f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e7      	bne.n	8009306 <tcp_handle_closepend+0xe>
  }
}
 8009336:	bf00      	nop
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20007ef8 	.word	0x20007ef8

08009344 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800934e:	2001      	movs	r0, #1
 8009350:	f7fd fc2e 	bl	8006bb0 <memp_malloc>
 8009354:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d126      	bne.n	80093aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800935c:	f7ff ffcc 	bl	80092f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009360:	f7ff ff9a 	bl	8009298 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009364:	2001      	movs	r0, #1
 8009366:	f7fd fc23 	bl	8006bb0 <memp_malloc>
 800936a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d11b      	bne.n	80093aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009372:	2009      	movs	r0, #9
 8009374:	f7ff ff46 	bl	8009204 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009378:	2001      	movs	r0, #1
 800937a:	f7fd fc19 	bl	8006bb0 <memp_malloc>
 800937e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d111      	bne.n	80093aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009386:	2008      	movs	r0, #8
 8009388:	f7ff ff3c 	bl	8009204 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800938c:	2001      	movs	r0, #1
 800938e:	f7fd fc0f 	bl	8006bb0 <memp_malloc>
 8009392:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d107      	bne.n	80093aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800939a:	79fb      	ldrb	r3, [r7, #7]
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff fee3 	bl	8009168 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093a2:	2001      	movs	r0, #1
 80093a4:	f7fd fc04 	bl	8006bb0 <memp_malloc>
 80093a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d03f      	beq.n	8009430 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093b0:	229c      	movs	r2, #156	@ 0x9c
 80093b2:	2100      	movs	r1, #0
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f007 fee9 	bl	801118c <memset>
    pcb->prio = prio;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	79fa      	ldrb	r2, [r7, #7]
 80093be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80093c6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80093d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	22ff      	movs	r2, #255	@ 0xff
 80093de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80093e6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2206      	movs	r2, #6
 80093ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2206      	movs	r2, #6
 80093f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093fc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009406:	4b0d      	ldr	r3, [pc, #52]	@ (800943c <tcp_alloc+0xf8>)
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800940e:	4b0c      	ldr	r3, [pc, #48]	@ (8009440 <tcp_alloc+0xfc>)
 8009410:	781a      	ldrb	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800941c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4a08      	ldr	r2, [pc, #32]	@ (8009444 <tcp_alloc+0x100>)
 8009424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4a07      	ldr	r2, [pc, #28]	@ (8009448 <tcp_alloc+0x104>)
 800942c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009430:	68fb      	ldr	r3, [r7, #12]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20007eec 	.word	0x20007eec
 8009440:	20007f02 	.word	0x20007f02
 8009444:	080090fd 	.word	0x080090fd
 8009448:	006ddd00 	.word	0x006ddd00

0800944c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d107      	bne.n	800946a <tcp_pcb_purge+0x1e>
 800945a:	4b21      	ldr	r3, [pc, #132]	@ (80094e0 <tcp_pcb_purge+0x94>)
 800945c:	f640 0251 	movw	r2, #2129	@ 0x851
 8009460:	4920      	ldr	r1, [pc, #128]	@ (80094e4 <tcp_pcb_purge+0x98>)
 8009462:	4821      	ldr	r0, [pc, #132]	@ (80094e8 <tcp_pcb_purge+0x9c>)
 8009464:	f007 fd32 	bl	8010ecc <iprintf>
 8009468:	e037      	b.n	80094da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	7d1b      	ldrb	r3, [r3, #20]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d033      	beq.n	80094da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009476:	2b0a      	cmp	r3, #10
 8009478:	d02f      	beq.n	80094da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800947e:	2b01      	cmp	r3, #1
 8009480:	d02b      	beq.n	80094da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fb6a 	bl	8007b68 <pbuf_free>
      pcb->refused_data = NULL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f98c 	bl	80097c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80094ae:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff fdc7 	bl	8009048 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff fdc2 	bl	8009048 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	08012c34 	.word	0x08012c34
 80094e4:	08013280 	.word	0x08013280
 80094e8:	08012c78 	.word	0x08012c78

080094ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d106      	bne.n	800950a <tcp_pcb_remove+0x1e>
 80094fc:	4b3e      	ldr	r3, [pc, #248]	@ (80095f8 <tcp_pcb_remove+0x10c>)
 80094fe:	f640 0283 	movw	r2, #2179	@ 0x883
 8009502:	493e      	ldr	r1, [pc, #248]	@ (80095fc <tcp_pcb_remove+0x110>)
 8009504:	483e      	ldr	r0, [pc, #248]	@ (8009600 <tcp_pcb_remove+0x114>)
 8009506:	f007 fce1 	bl	8010ecc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <tcp_pcb_remove+0x32>
 8009510:	4b39      	ldr	r3, [pc, #228]	@ (80095f8 <tcp_pcb_remove+0x10c>)
 8009512:	f640 0284 	movw	r2, #2180	@ 0x884
 8009516:	493b      	ldr	r1, [pc, #236]	@ (8009604 <tcp_pcb_remove+0x118>)
 8009518:	4839      	ldr	r0, [pc, #228]	@ (8009600 <tcp_pcb_remove+0x114>)
 800951a:	f007 fcd7 	bl	8010ecc <iprintf>

  TCP_RMV(pcblist, pcb);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d105      	bne.n	8009534 <tcp_pcb_remove+0x48>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e013      	b.n	800955c <tcp_pcb_remove+0x70>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	e00c      	b.n	8009556 <tcp_pcb_remove+0x6a>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	d104      	bne.n	8009550 <tcp_pcb_remove+0x64>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	60da      	str	r2, [r3, #12]
 800954e:	e005      	b.n	800955c <tcp_pcb_remove+0x70>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1ef      	bne.n	800953c <tcp_pcb_remove+0x50>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2200      	movs	r2, #0
 8009560:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009562:	6838      	ldr	r0, [r7, #0]
 8009564:	f7ff ff72 	bl	800944c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	7d1b      	ldrb	r3, [r3, #20]
 800956c:	2b0a      	cmp	r3, #10
 800956e:	d013      	beq.n	8009598 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009574:	2b01      	cmp	r3, #1
 8009576:	d00f      	beq.n	8009598 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	8b5b      	ldrh	r3, [r3, #26]
 800957c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009580:	2b00      	cmp	r3, #0
 8009582:	d009      	beq.n	8009598 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	8b5b      	ldrh	r3, [r3, #26]
 8009588:	f043 0302 	orr.w	r3, r3, #2
 800958c:	b29a      	uxth	r2, r3
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009592:	6838      	ldr	r0, [r7, #0]
 8009594:	f002 ff76 	bl	800c484 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	7d1b      	ldrb	r3, [r3, #20]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d020      	beq.n	80095e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d006      	beq.n	80095b6 <tcp_pcb_remove+0xca>
 80095a8:	4b13      	ldr	r3, [pc, #76]	@ (80095f8 <tcp_pcb_remove+0x10c>)
 80095aa:	f640 0293 	movw	r2, #2195	@ 0x893
 80095ae:	4916      	ldr	r1, [pc, #88]	@ (8009608 <tcp_pcb_remove+0x11c>)
 80095b0:	4813      	ldr	r0, [pc, #76]	@ (8009600 <tcp_pcb_remove+0x114>)
 80095b2:	f007 fc8b 	bl	8010ecc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d006      	beq.n	80095cc <tcp_pcb_remove+0xe0>
 80095be:	4b0e      	ldr	r3, [pc, #56]	@ (80095f8 <tcp_pcb_remove+0x10c>)
 80095c0:	f640 0294 	movw	r2, #2196	@ 0x894
 80095c4:	4911      	ldr	r1, [pc, #68]	@ (800960c <tcp_pcb_remove+0x120>)
 80095c6:	480e      	ldr	r0, [pc, #56]	@ (8009600 <tcp_pcb_remove+0x114>)
 80095c8:	f007 fc80 	bl	8010ecc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d006      	beq.n	80095e2 <tcp_pcb_remove+0xf6>
 80095d4:	4b08      	ldr	r3, [pc, #32]	@ (80095f8 <tcp_pcb_remove+0x10c>)
 80095d6:	f640 0296 	movw	r2, #2198	@ 0x896
 80095da:	490d      	ldr	r1, [pc, #52]	@ (8009610 <tcp_pcb_remove+0x124>)
 80095dc:	4808      	ldr	r0, [pc, #32]	@ (8009600 <tcp_pcb_remove+0x114>)
 80095de:	f007 fc75 	bl	8010ecc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2200      	movs	r2, #0
 80095e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	08012c34 	.word	0x08012c34
 80095fc:	0801329c 	.word	0x0801329c
 8009600:	08012c78 	.word	0x08012c78
 8009604:	080132b8 	.word	0x080132b8
 8009608:	080132d8 	.word	0x080132d8
 800960c:	080132f0 	.word	0x080132f0
 8009610:	0801330c 	.word	0x0801330c

08009614 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <tcp_next_iss+0x1c>
 8009622:	4b0a      	ldr	r3, [pc, #40]	@ (800964c <tcp_next_iss+0x38>)
 8009624:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009628:	4909      	ldr	r1, [pc, #36]	@ (8009650 <tcp_next_iss+0x3c>)
 800962a:	480a      	ldr	r0, [pc, #40]	@ (8009654 <tcp_next_iss+0x40>)
 800962c:	f007 fc4e 	bl	8010ecc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009630:	4b09      	ldr	r3, [pc, #36]	@ (8009658 <tcp_next_iss+0x44>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	4b09      	ldr	r3, [pc, #36]	@ (800965c <tcp_next_iss+0x48>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4413      	add	r3, r2
 800963a:	4a07      	ldr	r2, [pc, #28]	@ (8009658 <tcp_next_iss+0x44>)
 800963c:	6013      	str	r3, [r2, #0]
  return iss;
 800963e:	4b06      	ldr	r3, [pc, #24]	@ (8009658 <tcp_next_iss+0x44>)
 8009640:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	08012c34 	.word	0x08012c34
 8009650:	08013324 	.word	0x08013324
 8009654:	08012c78 	.word	0x08012c78
 8009658:	20000068 	.word	0x20000068
 800965c:	20007eec 	.word	0x20007eec

08009660 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
 800966c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <tcp_eff_send_mss_netif+0x22>
 8009674:	4b14      	ldr	r3, [pc, #80]	@ (80096c8 <tcp_eff_send_mss_netif+0x68>)
 8009676:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800967a:	4914      	ldr	r1, [pc, #80]	@ (80096cc <tcp_eff_send_mss_netif+0x6c>)
 800967c:	4814      	ldr	r0, [pc, #80]	@ (80096d0 <tcp_eff_send_mss_netif+0x70>)
 800967e:	f007 fc25 	bl	8010ecc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009688:	89fb      	ldrh	r3, [r7, #14]
 800968a:	e019      	b.n	80096c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009690:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009692:	8afb      	ldrh	r3, [r7, #22]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d012      	beq.n	80096be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009698:	2328      	movs	r3, #40	@ 0x28
 800969a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800969c:	8afa      	ldrh	r2, [r7, #22]
 800969e:	8abb      	ldrh	r3, [r7, #20]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d904      	bls.n	80096ae <tcp_eff_send_mss_netif+0x4e>
 80096a4:	8afa      	ldrh	r2, [r7, #22]
 80096a6:	8abb      	ldrh	r3, [r7, #20]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	e000      	b.n	80096b0 <tcp_eff_send_mss_netif+0x50>
 80096ae:	2300      	movs	r3, #0
 80096b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80096b2:	8a7a      	ldrh	r2, [r7, #18]
 80096b4:	89fb      	ldrh	r3, [r7, #14]
 80096b6:	4293      	cmp	r3, r2
 80096b8:	bf28      	it	cs
 80096ba:	4613      	movcs	r3, r2
 80096bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80096be:	89fb      	ldrh	r3, [r7, #14]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	08012c34 	.word	0x08012c34
 80096cc:	08013340 	.word	0x08013340
 80096d0:	08012c78 	.word	0x08012c78

080096d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d11d      	bne.n	8009724 <tcp_netif_ip_addr_changed_pcblist+0x50>
 80096e8:	4b12      	ldr	r3, [pc, #72]	@ (8009734 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80096ea:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80096ee:	4912      	ldr	r1, [pc, #72]	@ (8009738 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 80096f0:	4812      	ldr	r0, [pc, #72]	@ (800973c <tcp_netif_ip_addr_changed_pcblist+0x68>)
 80096f2:	f007 fbeb 	bl	8010ecc <iprintf>

  while (pcb != NULL) {
 80096f6:	e015      	b.n	8009724 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d10c      	bne.n	800971e <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800970a:	68f9      	ldr	r1, [r7, #12]
 800970c:	480c      	ldr	r0, [pc, #48]	@ (8009740 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800970e:	f007 fbdd 	bl	8010ecc <iprintf>
      tcp_abort(pcb);
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7fe ffc0 	bl	8008698 <tcp_abort>
      pcb = next;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	60fb      	str	r3, [r7, #12]
 800971c:	e002      	b.n	8009724 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e6      	bne.n	80096f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800972a:	bf00      	nop
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	08012c34 	.word	0x08012c34
 8009738:	08013368 	.word	0x08013368
 800973c:	08012c78 	.word	0x08012c78
 8009740:	0801339c 	.word	0x0801339c

08009744 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d02a      	beq.n	80097aa <tcp_netif_ip_addr_changed+0x66>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d026      	beq.n	80097aa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800975c:	4b15      	ldr	r3, [pc, #84]	@ (80097b4 <tcp_netif_ip_addr_changed+0x70>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff ffb6 	bl	80096d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009768:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <tcp_netif_ip_addr_changed+0x74>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff ffb0 	bl	80096d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d017      	beq.n	80097aa <tcp_netif_ip_addr_changed+0x66>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d013      	beq.n	80097aa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009782:	4b0e      	ldr	r3, [pc, #56]	@ (80097bc <tcp_netif_ip_addr_changed+0x78>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e00c      	b.n	80097a4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	429a      	cmp	r2, r3
 8009794:	d103      	bne.n	800979e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1ef      	bne.n	800978a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80097aa:	bf00      	nop
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20007ef8 	.word	0x20007ef8
 80097b8:	20007ef0 	.word	0x20007ef0
 80097bc:	20007ef4 	.word	0x20007ef4

080097c0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d007      	beq.n	80097e0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff fc37 	bl	8009048 <tcp_segs_free>
    pcb->ooseq = NULL;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80097e8:	b590      	push	{r4, r7, lr}
 80097ea:	b08d      	sub	sp, #52	@ 0x34
 80097ec:	af04      	add	r7, sp, #16
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d105      	bne.n	8009804 <tcp_input+0x1c>
 80097f8:	4b9b      	ldr	r3, [pc, #620]	@ (8009a68 <tcp_input+0x280>)
 80097fa:	2283      	movs	r2, #131	@ 0x83
 80097fc:	499b      	ldr	r1, [pc, #620]	@ (8009a6c <tcp_input+0x284>)
 80097fe:	489c      	ldr	r0, [pc, #624]	@ (8009a70 <tcp_input+0x288>)
 8009800:	f007 fb64 	bl	8010ecc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	4a9a      	ldr	r2, [pc, #616]	@ (8009a74 <tcp_input+0x28c>)
 800980a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	895b      	ldrh	r3, [r3, #10]
 8009810:	2b13      	cmp	r3, #19
 8009812:	f240 83d1 	bls.w	8009fb8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009816:	4b98      	ldr	r3, [pc, #608]	@ (8009a78 <tcp_input+0x290>)
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	4a97      	ldr	r2, [pc, #604]	@ (8009a78 <tcp_input+0x290>)
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f006 f9a5 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	f040 83c7 	bne.w	8009fbc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800982e:	4b92      	ldr	r3, [pc, #584]	@ (8009a78 <tcp_input+0x290>)
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009836:	2be0      	cmp	r3, #224	@ 0xe0
 8009838:	f000 83c0 	beq.w	8009fbc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800983c:	4b8d      	ldr	r3, [pc, #564]	@ (8009a74 <tcp_input+0x28c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	899b      	ldrh	r3, [r3, #12]
 8009842:	b29b      	uxth	r3, r3
 8009844:	4618      	mov	r0, r3
 8009846:	f7fc fd3f 	bl	80062c8 <lwip_htons>
 800984a:	4603      	mov	r3, r0
 800984c:	0b1b      	lsrs	r3, r3, #12
 800984e:	b29b      	uxth	r3, r3
 8009850:	b2db      	uxtb	r3, r3
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009856:	7cbb      	ldrb	r3, [r7, #18]
 8009858:	2b13      	cmp	r3, #19
 800985a:	f240 83b1 	bls.w	8009fc0 <tcp_input+0x7d8>
 800985e:	7cbb      	ldrb	r3, [r7, #18]
 8009860:	b29a      	uxth	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	891b      	ldrh	r3, [r3, #8]
 8009866:	429a      	cmp	r2, r3
 8009868:	f200 83aa 	bhi.w	8009fc0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800986c:	7cbb      	ldrb	r3, [r7, #18]
 800986e:	b29b      	uxth	r3, r3
 8009870:	3b14      	subs	r3, #20
 8009872:	b29a      	uxth	r2, r3
 8009874:	4b81      	ldr	r3, [pc, #516]	@ (8009a7c <tcp_input+0x294>)
 8009876:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009878:	4b81      	ldr	r3, [pc, #516]	@ (8009a80 <tcp_input+0x298>)
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	895a      	ldrh	r2, [r3, #10]
 8009882:	7cbb      	ldrb	r3, [r7, #18]
 8009884:	b29b      	uxth	r3, r3
 8009886:	429a      	cmp	r2, r3
 8009888:	d309      	bcc.n	800989e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800988a:	4b7c      	ldr	r3, [pc, #496]	@ (8009a7c <tcp_input+0x294>)
 800988c:	881a      	ldrh	r2, [r3, #0]
 800988e:	4b7d      	ldr	r3, [pc, #500]	@ (8009a84 <tcp_input+0x29c>)
 8009890:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009892:	7cbb      	ldrb	r3, [r7, #18]
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7fe f8e0 	bl	8007a5c <pbuf_remove_header>
 800989c:	e04e      	b.n	800993c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d105      	bne.n	80098b2 <tcp_input+0xca>
 80098a6:	4b70      	ldr	r3, [pc, #448]	@ (8009a68 <tcp_input+0x280>)
 80098a8:	22c2      	movs	r2, #194	@ 0xc2
 80098aa:	4977      	ldr	r1, [pc, #476]	@ (8009a88 <tcp_input+0x2a0>)
 80098ac:	4870      	ldr	r0, [pc, #448]	@ (8009a70 <tcp_input+0x288>)
 80098ae:	f007 fb0d 	bl	8010ecc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80098b2:	2114      	movs	r1, #20
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7fe f8d1 	bl	8007a5c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	895a      	ldrh	r2, [r3, #10]
 80098be:	4b71      	ldr	r3, [pc, #452]	@ (8009a84 <tcp_input+0x29c>)
 80098c0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80098c2:	4b6e      	ldr	r3, [pc, #440]	@ (8009a7c <tcp_input+0x294>)
 80098c4:	881a      	ldrh	r2, [r3, #0]
 80098c6:	4b6f      	ldr	r3, [pc, #444]	@ (8009a84 <tcp_input+0x29c>)
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80098ce:	4b6d      	ldr	r3, [pc, #436]	@ (8009a84 <tcp_input+0x29c>)
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe f8c1 	bl	8007a5c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	895b      	ldrh	r3, [r3, #10]
 80098e0:	8a3a      	ldrh	r2, [r7, #16]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	f200 836e 	bhi.w	8009fc4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	4a64      	ldr	r2, [pc, #400]	@ (8009a80 <tcp_input+0x298>)
 80098f0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	8a3a      	ldrh	r2, [r7, #16]
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe f8ae 	bl	8007a5c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	891a      	ldrh	r2, [r3, #8]
 8009904:	8a3b      	ldrh	r3, [r7, #16]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	895b      	ldrh	r3, [r3, #10]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <tcp_input+0x13a>
 8009916:	4b54      	ldr	r3, [pc, #336]	@ (8009a68 <tcp_input+0x280>)
 8009918:	22df      	movs	r2, #223	@ 0xdf
 800991a:	495c      	ldr	r1, [pc, #368]	@ (8009a8c <tcp_input+0x2a4>)
 800991c:	4854      	ldr	r0, [pc, #336]	@ (8009a70 <tcp_input+0x288>)
 800991e:	f007 fad5 	bl	8010ecc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	891a      	ldrh	r2, [r3, #8]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	891b      	ldrh	r3, [r3, #8]
 800992c:	429a      	cmp	r2, r3
 800992e:	d005      	beq.n	800993c <tcp_input+0x154>
 8009930:	4b4d      	ldr	r3, [pc, #308]	@ (8009a68 <tcp_input+0x280>)
 8009932:	22e0      	movs	r2, #224	@ 0xe0
 8009934:	4956      	ldr	r1, [pc, #344]	@ (8009a90 <tcp_input+0x2a8>)
 8009936:	484e      	ldr	r0, [pc, #312]	@ (8009a70 <tcp_input+0x288>)
 8009938:	f007 fac8 	bl	8010ecc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800993c:	4b4d      	ldr	r3, [pc, #308]	@ (8009a74 <tcp_input+0x28c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	b29b      	uxth	r3, r3
 8009944:	4a4b      	ldr	r2, [pc, #300]	@ (8009a74 <tcp_input+0x28c>)
 8009946:	6814      	ldr	r4, [r2, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f7fc fcbd 	bl	80062c8 <lwip_htons>
 800994e:	4603      	mov	r3, r0
 8009950:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009952:	4b48      	ldr	r3, [pc, #288]	@ (8009a74 <tcp_input+0x28c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	885b      	ldrh	r3, [r3, #2]
 8009958:	b29b      	uxth	r3, r3
 800995a:	4a46      	ldr	r2, [pc, #280]	@ (8009a74 <tcp_input+0x28c>)
 800995c:	6814      	ldr	r4, [r2, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f7fc fcb2 	bl	80062c8 <lwip_htons>
 8009964:	4603      	mov	r3, r0
 8009966:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009968:	4b42      	ldr	r3, [pc, #264]	@ (8009a74 <tcp_input+0x28c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	4a41      	ldr	r2, [pc, #260]	@ (8009a74 <tcp_input+0x28c>)
 8009970:	6814      	ldr	r4, [r2, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f7fc fcbe 	bl	80062f4 <lwip_htonl>
 8009978:	4603      	mov	r3, r0
 800997a:	6063      	str	r3, [r4, #4]
 800997c:	6863      	ldr	r3, [r4, #4]
 800997e:	4a45      	ldr	r2, [pc, #276]	@ (8009a94 <tcp_input+0x2ac>)
 8009980:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009982:	4b3c      	ldr	r3, [pc, #240]	@ (8009a74 <tcp_input+0x28c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	4a3a      	ldr	r2, [pc, #232]	@ (8009a74 <tcp_input+0x28c>)
 800998a:	6814      	ldr	r4, [r2, #0]
 800998c:	4618      	mov	r0, r3
 800998e:	f7fc fcb1 	bl	80062f4 <lwip_htonl>
 8009992:	4603      	mov	r3, r0
 8009994:	60a3      	str	r3, [r4, #8]
 8009996:	68a3      	ldr	r3, [r4, #8]
 8009998:	4a3f      	ldr	r2, [pc, #252]	@ (8009a98 <tcp_input+0x2b0>)
 800999a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800999c:	4b35      	ldr	r3, [pc, #212]	@ (8009a74 <tcp_input+0x28c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	89db      	ldrh	r3, [r3, #14]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	4a33      	ldr	r2, [pc, #204]	@ (8009a74 <tcp_input+0x28c>)
 80099a6:	6814      	ldr	r4, [r2, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fc fc8d 	bl	80062c8 <lwip_htons>
 80099ae:	4603      	mov	r3, r0
 80099b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80099b2:	4b30      	ldr	r3, [pc, #192]	@ (8009a74 <tcp_input+0x28c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	899b      	ldrh	r3, [r3, #12]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fc fc84 	bl	80062c8 <lwip_htons>
 80099c0:	4603      	mov	r3, r0
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	4b34      	ldr	r3, [pc, #208]	@ (8009a9c <tcp_input+0x2b4>)
 80099cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	891a      	ldrh	r2, [r3, #8]
 80099d2:	4b33      	ldr	r3, [pc, #204]	@ (8009aa0 <tcp_input+0x2b8>)
 80099d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80099d6:	4b31      	ldr	r3, [pc, #196]	@ (8009a9c <tcp_input+0x2b4>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00c      	beq.n	80099fc <tcp_input+0x214>
    tcplen++;
 80099e2:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa0 <tcp_input+0x2b8>)
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	3301      	adds	r3, #1
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	4b2d      	ldr	r3, [pc, #180]	@ (8009aa0 <tcp_input+0x2b8>)
 80099ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	891a      	ldrh	r2, [r3, #8]
 80099f2:	4b2b      	ldr	r3, [pc, #172]	@ (8009aa0 <tcp_input+0x2b8>)
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	f200 82e6 	bhi.w	8009fc8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80099fc:	2300      	movs	r3, #0
 80099fe:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a00:	4b28      	ldr	r3, [pc, #160]	@ (8009aa4 <tcp_input+0x2bc>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	e09d      	b.n	8009b44 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	7d1b      	ldrb	r3, [r3, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <tcp_input+0x234>
 8009a10:	4b15      	ldr	r3, [pc, #84]	@ (8009a68 <tcp_input+0x280>)
 8009a12:	22fb      	movs	r2, #251	@ 0xfb
 8009a14:	4924      	ldr	r1, [pc, #144]	@ (8009aa8 <tcp_input+0x2c0>)
 8009a16:	4816      	ldr	r0, [pc, #88]	@ (8009a70 <tcp_input+0x288>)
 8009a18:	f007 fa58 	bl	8010ecc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	7d1b      	ldrb	r3, [r3, #20]
 8009a20:	2b0a      	cmp	r3, #10
 8009a22:	d105      	bne.n	8009a30 <tcp_input+0x248>
 8009a24:	4b10      	ldr	r3, [pc, #64]	@ (8009a68 <tcp_input+0x280>)
 8009a26:	22fc      	movs	r2, #252	@ 0xfc
 8009a28:	4920      	ldr	r1, [pc, #128]	@ (8009aac <tcp_input+0x2c4>)
 8009a2a:	4811      	ldr	r0, [pc, #68]	@ (8009a70 <tcp_input+0x288>)
 8009a2c:	f007 fa4e 	bl	8010ecc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	7d1b      	ldrb	r3, [r3, #20]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d105      	bne.n	8009a44 <tcp_input+0x25c>
 8009a38:	4b0b      	ldr	r3, [pc, #44]	@ (8009a68 <tcp_input+0x280>)
 8009a3a:	22fd      	movs	r2, #253	@ 0xfd
 8009a3c:	491c      	ldr	r1, [pc, #112]	@ (8009ab0 <tcp_input+0x2c8>)
 8009a3e:	480c      	ldr	r0, [pc, #48]	@ (8009a70 <tcp_input+0x288>)
 8009a40:	f007 fa44 	bl	8010ecc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	7a1b      	ldrb	r3, [r3, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d033      	beq.n	8009ab4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	7a1a      	ldrb	r2, [r3, #8]
 8009a50:	4b09      	ldr	r3, [pc, #36]	@ (8009a78 <tcp_input+0x290>)
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a58:	3301      	adds	r3, #1
 8009a5a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d029      	beq.n	8009ab4 <tcp_input+0x2cc>
      prev = pcb;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	61fb      	str	r3, [r7, #28]
      continue;
 8009a64:	e06b      	b.n	8009b3e <tcp_input+0x356>
 8009a66:	bf00      	nop
 8009a68:	080133c4 	.word	0x080133c4
 8009a6c:	080133f8 	.word	0x080133f8
 8009a70:	08013410 	.word	0x08013410
 8009a74:	20007f18 	.word	0x20007f18
 8009a78:	20004f90 	.word	0x20004f90
 8009a7c:	20007f1c 	.word	0x20007f1c
 8009a80:	20007f20 	.word	0x20007f20
 8009a84:	20007f1e 	.word	0x20007f1e
 8009a88:	08013438 	.word	0x08013438
 8009a8c:	08013448 	.word	0x08013448
 8009a90:	08013454 	.word	0x08013454
 8009a94:	20007f28 	.word	0x20007f28
 8009a98:	20007f2c 	.word	0x20007f2c
 8009a9c:	20007f34 	.word	0x20007f34
 8009aa0:	20007f32 	.word	0x20007f32
 8009aa4:	20007ef8 	.word	0x20007ef8
 8009aa8:	08013474 	.word	0x08013474
 8009aac:	0801349c 	.word	0x0801349c
 8009ab0:	080134c8 	.word	0x080134c8
    }

    if (pcb->remote_port == tcphdr->src &&
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	8b1a      	ldrh	r2, [r3, #24]
 8009ab8:	4b72      	ldr	r3, [pc, #456]	@ (8009c84 <tcp_input+0x49c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d13a      	bne.n	8009b3a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	8ada      	ldrh	r2, [r3, #22]
 8009ac8:	4b6e      	ldr	r3, [pc, #440]	@ (8009c84 <tcp_input+0x49c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	885b      	ldrh	r3, [r3, #2]
 8009ace:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d132      	bne.n	8009b3a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8009c88 <tcp_input+0x4a0>)
 8009ada:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d12c      	bne.n	8009b3a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b68      	ldr	r3, [pc, #416]	@ (8009c88 <tcp_input+0x4a0>)
 8009ae6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d126      	bne.n	8009b3a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d106      	bne.n	8009b04 <tcp_input+0x31c>
 8009af6:	4b65      	ldr	r3, [pc, #404]	@ (8009c8c <tcp_input+0x4a4>)
 8009af8:	f240 120d 	movw	r2, #269	@ 0x10d
 8009afc:	4964      	ldr	r1, [pc, #400]	@ (8009c90 <tcp_input+0x4a8>)
 8009afe:	4865      	ldr	r0, [pc, #404]	@ (8009c94 <tcp_input+0x4ac>)
 8009b00:	f007 f9e4 	bl	8010ecc <iprintf>
      if (prev != NULL) {
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <tcp_input+0x338>
        prev->next = pcb->next;
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009b12:	4b61      	ldr	r3, [pc, #388]	@ (8009c98 <tcp_input+0x4b0>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009b1a:	4a5f      	ldr	r2, [pc, #380]	@ (8009c98 <tcp_input+0x4b0>)
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	69ba      	ldr	r2, [r7, #24]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d111      	bne.n	8009b4e <tcp_input+0x366>
 8009b2a:	4b58      	ldr	r3, [pc, #352]	@ (8009c8c <tcp_input+0x4a4>)
 8009b2c:	f240 1215 	movw	r2, #277	@ 0x115
 8009b30:	495a      	ldr	r1, [pc, #360]	@ (8009c9c <tcp_input+0x4b4>)
 8009b32:	4858      	ldr	r0, [pc, #352]	@ (8009c94 <tcp_input+0x4ac>)
 8009b34:	f007 f9ca 	bl	8010ecc <iprintf>
      break;
 8009b38:	e009      	b.n	8009b4e <tcp_input+0x366>
    }
    prev = pcb;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f47f af5e 	bne.w	8009a08 <tcp_input+0x220>
 8009b4c:	e000      	b.n	8009b50 <tcp_input+0x368>
      break;
 8009b4e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f040 80aa 	bne.w	8009cac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b58:	4b51      	ldr	r3, [pc, #324]	@ (8009ca0 <tcp_input+0x4b8>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	61bb      	str	r3, [r7, #24]
 8009b5e:	e03f      	b.n	8009be0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	7d1b      	ldrb	r3, [r3, #20]
 8009b64:	2b0a      	cmp	r3, #10
 8009b66:	d006      	beq.n	8009b76 <tcp_input+0x38e>
 8009b68:	4b48      	ldr	r3, [pc, #288]	@ (8009c8c <tcp_input+0x4a4>)
 8009b6a:	f240 121f 	movw	r2, #287	@ 0x11f
 8009b6e:	494d      	ldr	r1, [pc, #308]	@ (8009ca4 <tcp_input+0x4bc>)
 8009b70:	4848      	ldr	r0, [pc, #288]	@ (8009c94 <tcp_input+0x4ac>)
 8009b72:	f007 f9ab 	bl	8010ecc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	7a1b      	ldrb	r3, [r3, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	7a1a      	ldrb	r2, [r3, #8]
 8009b82:	4b41      	ldr	r3, [pc, #260]	@ (8009c88 <tcp_input+0x4a0>)
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d122      	bne.n	8009bd8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	8b1a      	ldrh	r2, [r3, #24]
 8009b96:	4b3b      	ldr	r3, [pc, #236]	@ (8009c84 <tcp_input+0x49c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d11b      	bne.n	8009bda <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	8ada      	ldrh	r2, [r3, #22]
 8009ba6:	4b37      	ldr	r3, [pc, #220]	@ (8009c84 <tcp_input+0x49c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	885b      	ldrh	r3, [r3, #2]
 8009bac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d113      	bne.n	8009bda <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	4b34      	ldr	r3, [pc, #208]	@ (8009c88 <tcp_input+0x4a0>)
 8009bb8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d10d      	bne.n	8009bda <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b31      	ldr	r3, [pc, #196]	@ (8009c88 <tcp_input+0x4a0>)
 8009bc4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d107      	bne.n	8009bda <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009bca:	69b8      	ldr	r0, [r7, #24]
 8009bcc:	f000 fb56 	bl	800a27c <tcp_timewait_input>
        }
        pbuf_free(p);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7fd ffc9 	bl	8007b68 <pbuf_free>
        return;
 8009bd6:	e1fd      	b.n	8009fd4 <tcp_input+0x7ec>
        continue;
 8009bd8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1bc      	bne.n	8009b60 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009bea:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca8 <tcp_input+0x4c0>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	e02a      	b.n	8009c48 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	7a1b      	ldrb	r3, [r3, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00c      	beq.n	8009c14 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	7a1a      	ldrb	r2, [r3, #8]
 8009bfe:	4b22      	ldr	r3, [pc, #136]	@ (8009c88 <tcp_input+0x4a0>)
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c06:	3301      	adds	r3, #1
 8009c08:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d002      	beq.n	8009c14 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	61fb      	str	r3, [r7, #28]
        continue;
 8009c12:	e016      	b.n	8009c42 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	8ada      	ldrh	r2, [r3, #22]
 8009c18:	4b1a      	ldr	r3, [pc, #104]	@ (8009c84 <tcp_input+0x49c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	885b      	ldrh	r3, [r3, #2]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d10c      	bne.n	8009c3e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	4b17      	ldr	r3, [pc, #92]	@ (8009c88 <tcp_input+0x4a0>)
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d00f      	beq.n	8009c50 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00d      	beq.n	8009c52 <tcp_input+0x46a>
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d009      	beq.n	8009c52 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1d1      	bne.n	8009bf2 <tcp_input+0x40a>
 8009c4e:	e000      	b.n	8009c52 <tcp_input+0x46a>
            break;
 8009c50:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d029      	beq.n	8009cac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009c66:	4b10      	ldr	r3, [pc, #64]	@ (8009ca8 <tcp_input+0x4c0>)
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ca8 <tcp_input+0x4c0>)
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009c74:	6978      	ldr	r0, [r7, #20]
 8009c76:	f000 fa03 	bl	800a080 <tcp_listen_input>
      }
      pbuf_free(p);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fd ff74 	bl	8007b68 <pbuf_free>
      return;
 8009c80:	e1a8      	b.n	8009fd4 <tcp_input+0x7ec>
 8009c82:	bf00      	nop
 8009c84:	20007f18 	.word	0x20007f18
 8009c88:	20004f90 	.word	0x20004f90
 8009c8c:	080133c4 	.word	0x080133c4
 8009c90:	080134f0 	.word	0x080134f0
 8009c94:	08013410 	.word	0x08013410
 8009c98:	20007ef8 	.word	0x20007ef8
 8009c9c:	0801351c 	.word	0x0801351c
 8009ca0:	20007efc 	.word	0x20007efc
 8009ca4:	08013548 	.word	0x08013548
 8009ca8:	20007ef4 	.word	0x20007ef4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 8158 	beq.w	8009f64 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009cb4:	4b95      	ldr	r3, [pc, #596]	@ (8009f0c <tcp_input+0x724>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	891a      	ldrh	r2, [r3, #8]
 8009cbe:	4b93      	ldr	r3, [pc, #588]	@ (8009f0c <tcp_input+0x724>)
 8009cc0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009cc2:	4a92      	ldr	r2, [pc, #584]	@ (8009f0c <tcp_input+0x724>)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009cc8:	4b91      	ldr	r3, [pc, #580]	@ (8009f10 <tcp_input+0x728>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a8f      	ldr	r2, [pc, #572]	@ (8009f0c <tcp_input+0x724>)
 8009cce:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8009cd0:	4b90      	ldr	r3, [pc, #576]	@ (8009f14 <tcp_input+0x72c>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009cd6:	4b90      	ldr	r3, [pc, #576]	@ (8009f18 <tcp_input+0x730>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8009f1c <tcp_input+0x734>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009ce2:	4b8f      	ldr	r3, [pc, #572]	@ (8009f20 <tcp_input+0x738>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f003 0308 	and.w	r3, r3, #8
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d006      	beq.n	8009cfc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	7b5b      	ldrb	r3, [r3, #13]
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d017      	beq.n	8009d34 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d04:	69b8      	ldr	r0, [r7, #24]
 8009d06:	f7ff f923 	bl	8008f50 <tcp_process_refused_data>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f113 0f0d 	cmn.w	r3, #13
 8009d10:	d007      	beq.n	8009d22 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00c      	beq.n	8009d34 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d1a:	4b82      	ldr	r3, [pc, #520]	@ (8009f24 <tcp_input+0x73c>)
 8009d1c:	881b      	ldrh	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d008      	beq.n	8009d34 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f040 80e3 	bne.w	8009ef2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009d2c:	69b8      	ldr	r0, [r7, #24]
 8009d2e:	f003 f9bb 	bl	800d0a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009d32:	e0de      	b.n	8009ef2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009d34:	4a7c      	ldr	r2, [pc, #496]	@ (8009f28 <tcp_input+0x740>)
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009d3a:	69b8      	ldr	r0, [r7, #24]
 8009d3c:	f000 fb18 	bl	800a370 <tcp_process>
 8009d40:	4603      	mov	r3, r0
 8009d42:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009d44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d48:	f113 0f0d 	cmn.w	r3, #13
 8009d4c:	f000 80d3 	beq.w	8009ef6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009d50:	4b71      	ldr	r3, [pc, #452]	@ (8009f18 <tcp_input+0x730>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	f003 0308 	and.w	r3, r3, #8
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d015      	beq.n	8009d88 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d008      	beq.n	8009d78 <tcp_input+0x590>
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	6912      	ldr	r2, [r2, #16]
 8009d70:	f06f 010d 	mvn.w	r1, #13
 8009d74:	4610      	mov	r0, r2
 8009d76:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009d78:	69b9      	ldr	r1, [r7, #24]
 8009d7a:	486c      	ldr	r0, [pc, #432]	@ (8009f2c <tcp_input+0x744>)
 8009d7c:	f7ff fbb6 	bl	80094ec <tcp_pcb_remove>
        tcp_free(pcb);
 8009d80:	69b8      	ldr	r0, [r7, #24]
 8009d82:	f7fe f9a1 	bl	80080c8 <tcp_free>
 8009d86:	e0da      	b.n	8009f3e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009d8c:	4b63      	ldr	r3, [pc, #396]	@ (8009f1c <tcp_input+0x734>)
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d01d      	beq.n	8009dd0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009d94:	4b61      	ldr	r3, [pc, #388]	@ (8009f1c <tcp_input+0x734>)
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00a      	beq.n	8009dba <tcp_input+0x5d2>
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009daa:	69ba      	ldr	r2, [r7, #24]
 8009dac:	6910      	ldr	r0, [r2, #16]
 8009dae:	89fa      	ldrh	r2, [r7, #14]
 8009db0:	69b9      	ldr	r1, [r7, #24]
 8009db2:	4798      	blx	r3
 8009db4:	4603      	mov	r3, r0
 8009db6:	74fb      	strb	r3, [r7, #19]
 8009db8:	e001      	b.n	8009dbe <tcp_input+0x5d6>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009dbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009dc2:	f113 0f0d 	cmn.w	r3, #13
 8009dc6:	f000 8098 	beq.w	8009efa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009dca:	4b54      	ldr	r3, [pc, #336]	@ (8009f1c <tcp_input+0x734>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009dd0:	69b8      	ldr	r0, [r7, #24]
 8009dd2:	f000 f915 	bl	800a000 <tcp_input_delayed_close>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f040 8090 	bne.w	8009efe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009dde:	4b4d      	ldr	r3, [pc, #308]	@ (8009f14 <tcp_input+0x72c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d041      	beq.n	8009e6a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d006      	beq.n	8009dfc <tcp_input+0x614>
 8009dee:	4b50      	ldr	r3, [pc, #320]	@ (8009f30 <tcp_input+0x748>)
 8009df0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009df4:	494f      	ldr	r1, [pc, #316]	@ (8009f34 <tcp_input+0x74c>)
 8009df6:	4850      	ldr	r0, [pc, #320]	@ (8009f38 <tcp_input+0x750>)
 8009df8:	f007 f868 	bl	8010ecc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	8b5b      	ldrh	r3, [r3, #26]
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d008      	beq.n	8009e1a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009e08:	4b42      	ldr	r3, [pc, #264]	@ (8009f14 <tcp_input+0x72c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fd feab 	bl	8007b68 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009e12:	69b8      	ldr	r0, [r7, #24]
 8009e14:	f7fe fc40 	bl	8008698 <tcp_abort>
            goto aborted;
 8009e18:	e091      	b.n	8009f3e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00c      	beq.n	8009e3e <tcp_input+0x656>
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	6918      	ldr	r0, [r3, #16]
 8009e2e:	4b39      	ldr	r3, [pc, #228]	@ (8009f14 <tcp_input+0x72c>)
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	69b9      	ldr	r1, [r7, #24]
 8009e36:	47a0      	blx	r4
 8009e38:	4603      	mov	r3, r0
 8009e3a:	74fb      	strb	r3, [r7, #19]
 8009e3c:	e008      	b.n	8009e50 <tcp_input+0x668>
 8009e3e:	4b35      	ldr	r3, [pc, #212]	@ (8009f14 <tcp_input+0x72c>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	2300      	movs	r3, #0
 8009e44:	69b9      	ldr	r1, [r7, #24]
 8009e46:	2000      	movs	r0, #0
 8009e48:	f7ff f958 	bl	80090fc <tcp_recv_null>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e54:	f113 0f0d 	cmn.w	r3, #13
 8009e58:	d053      	beq.n	8009f02 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009e5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009e62:	4b2c      	ldr	r3, [pc, #176]	@ (8009f14 <tcp_input+0x72c>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8009f18 <tcp_input+0x730>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d030      	beq.n	8009ed8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e82:	7b5a      	ldrb	r2, [r3, #13]
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e88:	f042 0220 	orr.w	r2, r2, #32
 8009e8c:	b2d2      	uxtb	r2, r2
 8009e8e:	735a      	strb	r2, [r3, #13]
 8009e90:	e022      	b.n	8009ed8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e96:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009e9a:	d005      	beq.n	8009ea8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00b      	beq.n	8009eca <tcp_input+0x6e2>
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	6918      	ldr	r0, [r3, #16]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	69b9      	ldr	r1, [r7, #24]
 8009ec2:	47a0      	blx	r4
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	74fb      	strb	r3, [r7, #19]
 8009ec8:	e001      	b.n	8009ece <tcp_input+0x6e6>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009ece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ed2:	f113 0f0d 	cmn.w	r3, #13
 8009ed6:	d016      	beq.n	8009f06 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009ed8:	4b13      	ldr	r3, [pc, #76]	@ (8009f28 <tcp_input+0x740>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009ede:	69b8      	ldr	r0, [r7, #24]
 8009ee0:	f000 f88e 	bl	800a000 <tcp_input_delayed_close>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d128      	bne.n	8009f3c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009eea:	69b8      	ldr	r0, [r7, #24]
 8009eec:	f002 faca 	bl	800c484 <tcp_output>
 8009ef0:	e025      	b.n	8009f3e <tcp_input+0x756>
        goto aborted;
 8009ef2:	bf00      	nop
 8009ef4:	e023      	b.n	8009f3e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009ef6:	bf00      	nop
 8009ef8:	e021      	b.n	8009f3e <tcp_input+0x756>
              goto aborted;
 8009efa:	bf00      	nop
 8009efc:	e01f      	b.n	8009f3e <tcp_input+0x756>
          goto aborted;
 8009efe:	bf00      	nop
 8009f00:	e01d      	b.n	8009f3e <tcp_input+0x756>
            goto aborted;
 8009f02:	bf00      	nop
 8009f04:	e01b      	b.n	8009f3e <tcp_input+0x756>
              goto aborted;
 8009f06:	bf00      	nop
 8009f08:	e019      	b.n	8009f3e <tcp_input+0x756>
 8009f0a:	bf00      	nop
 8009f0c:	20007f04 	.word	0x20007f04
 8009f10:	20007f18 	.word	0x20007f18
 8009f14:	20007f38 	.word	0x20007f38
 8009f18:	20007f35 	.word	0x20007f35
 8009f1c:	20007f30 	.word	0x20007f30
 8009f20:	20007f34 	.word	0x20007f34
 8009f24:	20007f32 	.word	0x20007f32
 8009f28:	20007f3c 	.word	0x20007f3c
 8009f2c:	20007ef8 	.word	0x20007ef8
 8009f30:	080133c4 	.word	0x080133c4
 8009f34:	08013578 	.word	0x08013578
 8009f38:	08013410 	.word	0x08013410
          goto aborted;
 8009f3c:	bf00      	nop
    tcp_input_pcb = NULL;
 8009f3e:	4b27      	ldr	r3, [pc, #156]	@ (8009fdc <tcp_input+0x7f4>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009f44:	4b26      	ldr	r3, [pc, #152]	@ (8009fe0 <tcp_input+0x7f8>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009f4a:	4b26      	ldr	r3, [pc, #152]	@ (8009fe4 <tcp_input+0x7fc>)
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d03f      	beq.n	8009fd2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009f52:	4b24      	ldr	r3, [pc, #144]	@ (8009fe4 <tcp_input+0x7fc>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fd fe06 	bl	8007b68 <pbuf_free>
      inseg.p = NULL;
 8009f5c:	4b21      	ldr	r3, [pc, #132]	@ (8009fe4 <tcp_input+0x7fc>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009f62:	e036      	b.n	8009fd2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009f64:	4b20      	ldr	r3, [pc, #128]	@ (8009fe8 <tcp_input+0x800>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	899b      	ldrh	r3, [r3, #12]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fc f9ab 	bl	80062c8 <lwip_htons>
 8009f72:	4603      	mov	r3, r0
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d118      	bne.n	8009fb0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009fec <tcp_input+0x804>)
 8009f80:	6819      	ldr	r1, [r3, #0]
 8009f82:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff0 <tcp_input+0x808>)
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff4 <tcp_input+0x80c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f8e:	4b16      	ldr	r3, [pc, #88]	@ (8009fe8 <tcp_input+0x800>)
 8009f90:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f92:	885b      	ldrh	r3, [r3, #2]
 8009f94:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f96:	4a14      	ldr	r2, [pc, #80]	@ (8009fe8 <tcp_input+0x800>)
 8009f98:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f9a:	8812      	ldrh	r2, [r2, #0]
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	9202      	str	r2, [sp, #8]
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	4b15      	ldr	r3, [pc, #84]	@ (8009ff8 <tcp_input+0x810>)
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	4b15      	ldr	r3, [pc, #84]	@ (8009ffc <tcp_input+0x814>)
 8009fa8:	4602      	mov	r2, r0
 8009faa:	2000      	movs	r0, #0
 8009fac:	f003 f82a 	bl	800d004 <tcp_rst>
    pbuf_free(p);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7fd fdd9 	bl	8007b68 <pbuf_free>
  return;
 8009fb6:	e00c      	b.n	8009fd2 <tcp_input+0x7ea>
    goto dropped;
 8009fb8:	bf00      	nop
 8009fba:	e006      	b.n	8009fca <tcp_input+0x7e2>
    goto dropped;
 8009fbc:	bf00      	nop
 8009fbe:	e004      	b.n	8009fca <tcp_input+0x7e2>
    goto dropped;
 8009fc0:	bf00      	nop
 8009fc2:	e002      	b.n	8009fca <tcp_input+0x7e2>
      goto dropped;
 8009fc4:	bf00      	nop
 8009fc6:	e000      	b.n	8009fca <tcp_input+0x7e2>
      goto dropped;
 8009fc8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7fd fdcc 	bl	8007b68 <pbuf_free>
 8009fd0:	e000      	b.n	8009fd4 <tcp_input+0x7ec>
  return;
 8009fd2:	bf00      	nop
}
 8009fd4:	3724      	adds	r7, #36	@ 0x24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd90      	pop	{r4, r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20007f3c 	.word	0x20007f3c
 8009fe0:	20007f38 	.word	0x20007f38
 8009fe4:	20007f04 	.word	0x20007f04
 8009fe8:	20007f18 	.word	0x20007f18
 8009fec:	20007f2c 	.word	0x20007f2c
 8009ff0:	20007f32 	.word	0x20007f32
 8009ff4:	20007f28 	.word	0x20007f28
 8009ff8:	20004fa0 	.word	0x20004fa0
 8009ffc:	20004fa4 	.word	0x20004fa4

0800a000 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d106      	bne.n	800a01c <tcp_input_delayed_close+0x1c>
 800a00e:	4b17      	ldr	r3, [pc, #92]	@ (800a06c <tcp_input_delayed_close+0x6c>)
 800a010:	f240 225a 	movw	r2, #602	@ 0x25a
 800a014:	4916      	ldr	r1, [pc, #88]	@ (800a070 <tcp_input_delayed_close+0x70>)
 800a016:	4817      	ldr	r0, [pc, #92]	@ (800a074 <tcp_input_delayed_close+0x74>)
 800a018:	f006 ff58 	bl	8010ecc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a01c:	4b16      	ldr	r3, [pc, #88]	@ (800a078 <tcp_input_delayed_close+0x78>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 0310 	and.w	r3, r3, #16
 800a024:	2b00      	cmp	r3, #0
 800a026:	d01c      	beq.n	800a062 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	8b5b      	ldrh	r3, [r3, #26]
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10d      	bne.n	800a050 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d008      	beq.n	800a050 <tcp_input_delayed_close+0x50>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	6912      	ldr	r2, [r2, #16]
 800a048:	f06f 010e 	mvn.w	r1, #14
 800a04c:	4610      	mov	r0, r2
 800a04e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	480a      	ldr	r0, [pc, #40]	@ (800a07c <tcp_input_delayed_close+0x7c>)
 800a054:	f7ff fa4a 	bl	80094ec <tcp_pcb_remove>
    tcp_free(pcb);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7fe f835 	bl	80080c8 <tcp_free>
    return 1;
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	080133c4 	.word	0x080133c4
 800a070:	08013594 	.word	0x08013594
 800a074:	08013410 	.word	0x08013410
 800a078:	20007f35 	.word	0x20007f35
 800a07c:	20007ef8 	.word	0x20007ef8

0800a080 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a080:	b590      	push	{r4, r7, lr}
 800a082:	b08b      	sub	sp, #44	@ 0x2c
 800a084:	af04      	add	r7, sp, #16
 800a086:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a088:	4b6f      	ldr	r3, [pc, #444]	@ (800a248 <tcp_listen_input+0x1c8>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	f040 80d2 	bne.w	800a23a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d106      	bne.n	800a0aa <tcp_listen_input+0x2a>
 800a09c:	4b6b      	ldr	r3, [pc, #428]	@ (800a24c <tcp_listen_input+0x1cc>)
 800a09e:	f240 2281 	movw	r2, #641	@ 0x281
 800a0a2:	496b      	ldr	r1, [pc, #428]	@ (800a250 <tcp_listen_input+0x1d0>)
 800a0a4:	486b      	ldr	r0, [pc, #428]	@ (800a254 <tcp_listen_input+0x1d4>)
 800a0a6:	f006 ff11 	bl	8010ecc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a0aa:	4b67      	ldr	r3, [pc, #412]	@ (800a248 <tcp_listen_input+0x1c8>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f003 0310 	and.w	r3, r3, #16
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d019      	beq.n	800a0ea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0b6:	4b68      	ldr	r3, [pc, #416]	@ (800a258 <tcp_listen_input+0x1d8>)
 800a0b8:	6819      	ldr	r1, [r3, #0]
 800a0ba:	4b68      	ldr	r3, [pc, #416]	@ (800a25c <tcp_listen_input+0x1dc>)
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	4b67      	ldr	r3, [pc, #412]	@ (800a260 <tcp_listen_input+0x1e0>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0c6:	4b67      	ldr	r3, [pc, #412]	@ (800a264 <tcp_listen_input+0x1e4>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0ca:	885b      	ldrh	r3, [r3, #2]
 800a0cc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0ce:	4a65      	ldr	r2, [pc, #404]	@ (800a264 <tcp_listen_input+0x1e4>)
 800a0d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0d2:	8812      	ldrh	r2, [r2, #0]
 800a0d4:	b292      	uxth	r2, r2
 800a0d6:	9202      	str	r2, [sp, #8]
 800a0d8:	9301      	str	r3, [sp, #4]
 800a0da:	4b63      	ldr	r3, [pc, #396]	@ (800a268 <tcp_listen_input+0x1e8>)
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	4b63      	ldr	r3, [pc, #396]	@ (800a26c <tcp_listen_input+0x1ec>)
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f002 ff8e 	bl	800d004 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a0e8:	e0a9      	b.n	800a23e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a0ea:	4b57      	ldr	r3, [pc, #348]	@ (800a248 <tcp_listen_input+0x1c8>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 80a3 	beq.w	800a23e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7d5b      	ldrb	r3, [r3, #21]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff f921 	bl	8009344 <tcp_alloc>
 800a102:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d111      	bne.n	800a12e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00a      	beq.n	800a128 <tcp_listen_input+0xa8>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	6910      	ldr	r0, [r2, #16]
 800a11a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a11e:	2100      	movs	r1, #0
 800a120:	4798      	blx	r3
 800a122:	4603      	mov	r3, r0
 800a124:	73bb      	strb	r3, [r7, #14]
      return;
 800a126:	e08b      	b.n	800a240 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a128:	23f0      	movs	r3, #240	@ 0xf0
 800a12a:	73bb      	strb	r3, [r7, #14]
      return;
 800a12c:	e088      	b.n	800a240 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a12e:	4b50      	ldr	r3, [pc, #320]	@ (800a270 <tcp_listen_input+0x1f0>)
 800a130:	695a      	ldr	r2, [r3, #20]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a136:	4b4e      	ldr	r3, [pc, #312]	@ (800a270 <tcp_listen_input+0x1f0>)
 800a138:	691a      	ldr	r2, [r3, #16]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	8ada      	ldrh	r2, [r3, #22]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a146:	4b47      	ldr	r3, [pc, #284]	@ (800a264 <tcp_listen_input+0x1e4>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2203      	movs	r2, #3
 800a156:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a158:	4b41      	ldr	r3, [pc, #260]	@ (800a260 <tcp_listen_input+0x1e0>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a16a:	6978      	ldr	r0, [r7, #20]
 800a16c:	f7ff fa52 	bl	8009614 <tcp_next_iss>
 800a170:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a18a:	4b35      	ldr	r3, [pc, #212]	@ (800a260 <tcp_listen_input+0x1e0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	1e5a      	subs	r2, r3, #1
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691a      	ldr	r2, [r3, #16]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	7a5b      	ldrb	r3, [r3, #9]
 800a1a6:	f003 030c 	and.w	r3, r3, #12
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	7a1a      	ldrb	r2, [r3, #8]
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a1b8:	4b2e      	ldr	r3, [pc, #184]	@ (800a274 <tcp_listen_input+0x1f4>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	60da      	str	r2, [r3, #12]
 800a1c0:	4a2c      	ldr	r2, [pc, #176]	@ (800a274 <tcp_listen_input+0x1f4>)
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	f003 f8df 	bl	800d388 <tcp_timer_needed>
 800a1ca:	4b2b      	ldr	r3, [pc, #172]	@ (800a278 <tcp_listen_input+0x1f8>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a1d0:	6978      	ldr	r0, [r7, #20]
 800a1d2:	f001 fd8b 	bl	800bcec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a1d6:	4b23      	ldr	r3, [pc, #140]	@ (800a264 <tcp_listen_input+0x1e4>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	89db      	ldrh	r3, [r3, #14]
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f005 fa23 	bl	800f644 <ip4_route>
 800a1fe:	4601      	mov	r1, r0
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	3304      	adds	r3, #4
 800a204:	461a      	mov	r2, r3
 800a206:	4620      	mov	r0, r4
 800a208:	f7ff fa2a 	bl	8009660 <tcp_eff_send_mss_netif>
 800a20c:	4603      	mov	r3, r0
 800a20e:	461a      	mov	r2, r3
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a214:	2112      	movs	r1, #18
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	f002 f846 	bl	800c2a8 <tcp_enqueue_flags>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a228:	2100      	movs	r1, #0
 800a22a:	6978      	ldr	r0, [r7, #20]
 800a22c:	f7fe f976 	bl	800851c <tcp_abandon>
      return;
 800a230:	e006      	b.n	800a240 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a232:	6978      	ldr	r0, [r7, #20]
 800a234:	f002 f926 	bl	800c484 <tcp_output>
  return;
 800a238:	e001      	b.n	800a23e <tcp_listen_input+0x1be>
    return;
 800a23a:	bf00      	nop
 800a23c:	e000      	b.n	800a240 <tcp_listen_input+0x1c0>
  return;
 800a23e:	bf00      	nop
}
 800a240:	371c      	adds	r7, #28
 800a242:	46bd      	mov	sp, r7
 800a244:	bd90      	pop	{r4, r7, pc}
 800a246:	bf00      	nop
 800a248:	20007f34 	.word	0x20007f34
 800a24c:	080133c4 	.word	0x080133c4
 800a250:	080135bc 	.word	0x080135bc
 800a254:	08013410 	.word	0x08013410
 800a258:	20007f2c 	.word	0x20007f2c
 800a25c:	20007f32 	.word	0x20007f32
 800a260:	20007f28 	.word	0x20007f28
 800a264:	20007f18 	.word	0x20007f18
 800a268:	20004fa0 	.word	0x20004fa0
 800a26c:	20004fa4 	.word	0x20004fa4
 800a270:	20004f90 	.word	0x20004f90
 800a274:	20007ef8 	.word	0x20007ef8
 800a278:	20007f00 	.word	0x20007f00

0800a27c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af04      	add	r7, sp, #16
 800a282:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a284:	4b2f      	ldr	r3, [pc, #188]	@ (800a344 <tcp_timewait_input+0xc8>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d153      	bne.n	800a338 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d106      	bne.n	800a2a4 <tcp_timewait_input+0x28>
 800a296:	4b2c      	ldr	r3, [pc, #176]	@ (800a348 <tcp_timewait_input+0xcc>)
 800a298:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a29c:	492b      	ldr	r1, [pc, #172]	@ (800a34c <tcp_timewait_input+0xd0>)
 800a29e:	482c      	ldr	r0, [pc, #176]	@ (800a350 <tcp_timewait_input+0xd4>)
 800a2a0:	f006 fe14 	bl	8010ecc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a2a4:	4b27      	ldr	r3, [pc, #156]	@ (800a344 <tcp_timewait_input+0xc8>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d02a      	beq.n	800a306 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a2b0:	4b28      	ldr	r3, [pc, #160]	@ (800a354 <tcp_timewait_input+0xd8>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	db2d      	blt.n	800a31a <tcp_timewait_input+0x9e>
 800a2be:	4b25      	ldr	r3, [pc, #148]	@ (800a354 <tcp_timewait_input+0xd8>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a2ca:	440b      	add	r3, r1
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	dc23      	bgt.n	800a31a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2d2:	4b21      	ldr	r3, [pc, #132]	@ (800a358 <tcp_timewait_input+0xdc>)
 800a2d4:	6819      	ldr	r1, [r3, #0]
 800a2d6:	4b21      	ldr	r3, [pc, #132]	@ (800a35c <tcp_timewait_input+0xe0>)
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a354 <tcp_timewait_input+0xd8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2e2:	4b1f      	ldr	r3, [pc, #124]	@ (800a360 <tcp_timewait_input+0xe4>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2e6:	885b      	ldrh	r3, [r3, #2]
 800a2e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a360 <tcp_timewait_input+0xe4>)
 800a2ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2ee:	8812      	ldrh	r2, [r2, #0]
 800a2f0:	b292      	uxth	r2, r2
 800a2f2:	9202      	str	r2, [sp, #8]
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a364 <tcp_timewait_input+0xe8>)
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a368 <tcp_timewait_input+0xec>)
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f002 fe80 	bl	800d004 <tcp_rst>
      return;
 800a304:	e01b      	b.n	800a33e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a306:	4b0f      	ldr	r3, [pc, #60]	@ (800a344 <tcp_timewait_input+0xc8>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a312:	4b16      	ldr	r3, [pc, #88]	@ (800a36c <tcp_timewait_input+0xf0>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a31a:	4b10      	ldr	r3, [pc, #64]	@ (800a35c <tcp_timewait_input+0xe0>)
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00c      	beq.n	800a33c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	8b5b      	ldrh	r3, [r3, #26]
 800a326:	f043 0302 	orr.w	r3, r3, #2
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f002 f8a7 	bl	800c484 <tcp_output>
  }
  return;
 800a336:	e001      	b.n	800a33c <tcp_timewait_input+0xc0>
    return;
 800a338:	bf00      	nop
 800a33a:	e000      	b.n	800a33e <tcp_timewait_input+0xc2>
  return;
 800a33c:	bf00      	nop
}
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20007f34 	.word	0x20007f34
 800a348:	080133c4 	.word	0x080133c4
 800a34c:	080135dc 	.word	0x080135dc
 800a350:	08013410 	.word	0x08013410
 800a354:	20007f28 	.word	0x20007f28
 800a358:	20007f2c 	.word	0x20007f2c
 800a35c:	20007f32 	.word	0x20007f32
 800a360:	20007f18 	.word	0x20007f18
 800a364:	20004fa0 	.word	0x20004fa0
 800a368:	20004fa4 	.word	0x20004fa4
 800a36c:	20007eec 	.word	0x20007eec

0800a370 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b08d      	sub	sp, #52	@ 0x34
 800a374:	af04      	add	r7, sp, #16
 800a376:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <tcp_process+0x24>
 800a386:	4b9d      	ldr	r3, [pc, #628]	@ (800a5fc <tcp_process+0x28c>)
 800a388:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a38c:	499c      	ldr	r1, [pc, #624]	@ (800a600 <tcp_process+0x290>)
 800a38e:	489d      	ldr	r0, [pc, #628]	@ (800a604 <tcp_process+0x294>)
 800a390:	f006 fd9c 	bl	8010ecc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a394:	4b9c      	ldr	r3, [pc, #624]	@ (800a608 <tcp_process+0x298>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d04e      	beq.n	800a43e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	7d1b      	ldrb	r3, [r3, #20]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d108      	bne.n	800a3ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3ac:	4b97      	ldr	r3, [pc, #604]	@ (800a60c <tcp_process+0x29c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d123      	bne.n	800a3fc <tcp_process+0x8c>
        acceptable = 1;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	77fb      	strb	r3, [r7, #31]
 800a3b8:	e020      	b.n	800a3fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3be:	4b94      	ldr	r3, [pc, #592]	@ (800a610 <tcp_process+0x2a0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d102      	bne.n	800a3cc <tcp_process+0x5c>
        acceptable = 1;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	77fb      	strb	r3, [r7, #31]
 800a3ca:	e017      	b.n	800a3fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3cc:	4b90      	ldr	r3, [pc, #576]	@ (800a610 <tcp_process+0x2a0>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	db10      	blt.n	800a3fc <tcp_process+0x8c>
 800a3da:	4b8d      	ldr	r3, [pc, #564]	@ (800a610 <tcp_process+0x2a0>)
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a3e6:	440b      	add	r3, r1
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	dc06      	bgt.n	800a3fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	8b5b      	ldrh	r3, [r3, #26]
 800a3f2:	f043 0302 	orr.w	r3, r3, #2
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a3fc:	7ffb      	ldrb	r3, [r7, #31]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d01b      	beq.n	800a43a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	7d1b      	ldrb	r3, [r3, #20]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <tcp_process+0xa8>
 800a40a:	4b7c      	ldr	r3, [pc, #496]	@ (800a5fc <tcp_process+0x28c>)
 800a40c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a410:	4980      	ldr	r1, [pc, #512]	@ (800a614 <tcp_process+0x2a4>)
 800a412:	487c      	ldr	r0, [pc, #496]	@ (800a604 <tcp_process+0x294>)
 800a414:	f006 fd5a 	bl	8010ecc <iprintf>
      recv_flags |= TF_RESET;
 800a418:	4b7f      	ldr	r3, [pc, #508]	@ (800a618 <tcp_process+0x2a8>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	f043 0308 	orr.w	r3, r3, #8
 800a420:	b2da      	uxtb	r2, r3
 800a422:	4b7d      	ldr	r3, [pc, #500]	@ (800a618 <tcp_process+0x2a8>)
 800a424:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	8b5b      	ldrh	r3, [r3, #26]
 800a42a:	f023 0301 	bic.w	r3, r3, #1
 800a42e:	b29a      	uxth	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a434:	f06f 030d 	mvn.w	r3, #13
 800a438:	e37a      	b.n	800ab30 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	e378      	b.n	800ab30 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a43e:	4b72      	ldr	r3, [pc, #456]	@ (800a608 <tcp_process+0x298>)
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b00      	cmp	r3, #0
 800a448:	d010      	beq.n	800a46c <tcp_process+0xfc>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	7d1b      	ldrb	r3, [r3, #20]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d00c      	beq.n	800a46c <tcp_process+0xfc>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	7d1b      	ldrb	r3, [r3, #20]
 800a456:	2b03      	cmp	r3, #3
 800a458:	d008      	beq.n	800a46c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	8b5b      	ldrh	r3, [r3, #26]
 800a45e:	f043 0302 	orr.w	r3, r3, #2
 800a462:	b29a      	uxth	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	e361      	b.n	800ab30 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	8b5b      	ldrh	r3, [r3, #26]
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a478:	4b68      	ldr	r3, [pc, #416]	@ (800a61c <tcp_process+0x2ac>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f001 fc2b 	bl	800bcec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	7d1b      	ldrb	r3, [r3, #20]
 800a49a:	3b02      	subs	r3, #2
 800a49c:	2b07      	cmp	r3, #7
 800a49e:	f200 8337 	bhi.w	800ab10 <tcp_process+0x7a0>
 800a4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a8 <tcp_process+0x138>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4c9 	.word	0x0800a4c9
 800a4ac:	0800a6f9 	.word	0x0800a6f9
 800a4b0:	0800a871 	.word	0x0800a871
 800a4b4:	0800a89b 	.word	0x0800a89b
 800a4b8:	0800a9bf 	.word	0x0800a9bf
 800a4bc:	0800a871 	.word	0x0800a871
 800a4c0:	0800aa4b 	.word	0x0800aa4b
 800a4c4:	0800aadb 	.word	0x0800aadb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a4c8:	4b4f      	ldr	r3, [pc, #316]	@ (800a608 <tcp_process+0x298>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	f003 0310 	and.w	r3, r3, #16
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 80e4 	beq.w	800a69e <tcp_process+0x32e>
 800a4d6:	4b4c      	ldr	r3, [pc, #304]	@ (800a608 <tcp_process+0x298>)
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 80dd 	beq.w	800a69e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	4b48      	ldr	r3, [pc, #288]	@ (800a60c <tcp_process+0x29c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	f040 80d5 	bne.w	800a69e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a4f4:	4b46      	ldr	r3, [pc, #280]	@ (800a610 <tcp_process+0x2a0>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a506:	4b41      	ldr	r3, [pc, #260]	@ (800a60c <tcp_process+0x29c>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a50e:	4b44      	ldr	r3, [pc, #272]	@ (800a620 <tcp_process+0x2b0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	89db      	ldrh	r3, [r3, #14]
 800a514:	b29a      	uxth	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a528:	4b39      	ldr	r3, [pc, #228]	@ (800a610 <tcp_process+0x2a0>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	1e5a      	subs	r2, r3, #1
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2204      	movs	r2, #4
 800a536:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3304      	adds	r3, #4
 800a540:	4618      	mov	r0, r3
 800a542:	f005 f87f 	bl	800f644 <ip4_route>
 800a546:	4601      	mov	r1, r0
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3304      	adds	r3, #4
 800a54c:	461a      	mov	r2, r3
 800a54e:	4620      	mov	r0, r4
 800a550:	f7ff f886 	bl	8009660 <tcp_eff_send_mss_netif>
 800a554:	4603      	mov	r3, r0
 800a556:	461a      	mov	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a560:	009a      	lsls	r2, r3, #2
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf38      	it	cc
 800a570:	460b      	movcc	r3, r1
 800a572:	429a      	cmp	r2, r3
 800a574:	d204      	bcs.n	800a580 <tcp_process+0x210>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	e00d      	b.n	800a59c <tcp_process+0x22c>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d904      	bls.n	800a598 <tcp_process+0x228>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	b29b      	uxth	r3, r3
 800a596:	e001      	b.n	800a59c <tcp_process+0x22c>
 800a598:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d106      	bne.n	800a5ba <tcp_process+0x24a>
 800a5ac:	4b13      	ldr	r3, [pc, #76]	@ (800a5fc <tcp_process+0x28c>)
 800a5ae:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a5b2:	491c      	ldr	r1, [pc, #112]	@ (800a624 <tcp_process+0x2b4>)
 800a5b4:	4813      	ldr	r0, [pc, #76]	@ (800a604 <tcp_process+0x294>)
 800a5b6:	f006 fc89 	bl	8010ecc <iprintf>
        --pcb->snd_queuelen;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ce:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d12a      	bne.n	800a62c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5da:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <tcp_process+0x280>
 800a5e2:	4b06      	ldr	r3, [pc, #24]	@ (800a5fc <tcp_process+0x28c>)
 800a5e4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a5e8:	490f      	ldr	r1, [pc, #60]	@ (800a628 <tcp_process+0x2b8>)
 800a5ea:	4806      	ldr	r0, [pc, #24]	@ (800a604 <tcp_process+0x294>)
 800a5ec:	f006 fc6e 	bl	8010ecc <iprintf>
          pcb->unsent = rseg->next;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a5f8:	e01c      	b.n	800a634 <tcp_process+0x2c4>
 800a5fa:	bf00      	nop
 800a5fc:	080133c4 	.word	0x080133c4
 800a600:	080135fc 	.word	0x080135fc
 800a604:	08013410 	.word	0x08013410
 800a608:	20007f34 	.word	0x20007f34
 800a60c:	20007f2c 	.word	0x20007f2c
 800a610:	20007f28 	.word	0x20007f28
 800a614:	08013618 	.word	0x08013618
 800a618:	20007f35 	.word	0x20007f35
 800a61c:	20007eec 	.word	0x20007eec
 800a620:	20007f18 	.word	0x20007f18
 800a624:	08013638 	.word	0x08013638
 800a628:	08013650 	.word	0x08013650
        } else {
          pcb->unacked = rseg->next;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a634:	6978      	ldr	r0, [r7, #20]
 800a636:	f7fe fd1c 	bl	8009072 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a648:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a64a:	e006      	b.n	800a65a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <tcp_process+0x30a>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	6910      	ldr	r0, [r2, #16]
 800a66e:	2200      	movs	r2, #0
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	4798      	blx	r3
 800a674:	4603      	mov	r3, r0
 800a676:	77bb      	strb	r3, [r7, #30]
 800a678:	e001      	b.n	800a67e <tcp_process+0x30e>
 800a67a:	2300      	movs	r3, #0
 800a67c:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800a67e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a682:	f113 0f0d 	cmn.w	r3, #13
 800a686:	d102      	bne.n	800a68e <tcp_process+0x31e>
          return ERR_ABRT;
 800a688:	f06f 030c 	mvn.w	r3, #12
 800a68c:	e250      	b.n	800ab30 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	8b5b      	ldrh	r3, [r3, #26]
 800a692:	f043 0302 	orr.w	r3, r3, #2
 800a696:	b29a      	uxth	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a69c:	e23a      	b.n	800ab14 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a69e:	4b98      	ldr	r3, [pc, #608]	@ (800a900 <tcp_process+0x590>)
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	f003 0310 	and.w	r3, r3, #16
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 8234 	beq.w	800ab14 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6ac:	4b95      	ldr	r3, [pc, #596]	@ (800a904 <tcp_process+0x594>)
 800a6ae:	6819      	ldr	r1, [r3, #0]
 800a6b0:	4b95      	ldr	r3, [pc, #596]	@ (800a908 <tcp_process+0x598>)
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	4b95      	ldr	r3, [pc, #596]	@ (800a90c <tcp_process+0x59c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6bc:	4b94      	ldr	r3, [pc, #592]	@ (800a910 <tcp_process+0x5a0>)
 800a6be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6c0:	885b      	ldrh	r3, [r3, #2]
 800a6c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6c4:	4a92      	ldr	r2, [pc, #584]	@ (800a910 <tcp_process+0x5a0>)
 800a6c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6c8:	8812      	ldrh	r2, [r2, #0]
 800a6ca:	b292      	uxth	r2, r2
 800a6cc:	9202      	str	r2, [sp, #8]
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	4b90      	ldr	r3, [pc, #576]	@ (800a914 <tcp_process+0x5a4>)
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	4b90      	ldr	r3, [pc, #576]	@ (800a918 <tcp_process+0x5a8>)
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f002 fc93 	bl	800d004 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6e4:	2b05      	cmp	r3, #5
 800a6e6:	f200 8215 	bhi.w	800ab14 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f002 fa5f 	bl	800cbb4 <tcp_rexmit_rto>
      break;
 800a6f6:	e20d      	b.n	800ab14 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a6f8:	4b81      	ldr	r3, [pc, #516]	@ (800a900 <tcp_process+0x590>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 80a1 	beq.w	800a848 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a706:	4b7f      	ldr	r3, [pc, #508]	@ (800a904 <tcp_process+0x594>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	3b01      	subs	r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	db7e      	blt.n	800a814 <tcp_process+0x4a4>
 800a716:	4b7b      	ldr	r3, [pc, #492]	@ (800a904 <tcp_process+0x594>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc77      	bgt.n	800a814 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2204      	movs	r2, #4
 800a728:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d102      	bne.n	800a738 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a732:	23fa      	movs	r3, #250	@ 0xfa
 800a734:	77bb      	strb	r3, [r7, #30]
 800a736:	e01d      	b.n	800a774 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d106      	bne.n	800a750 <tcp_process+0x3e0>
 800a742:	4b76      	ldr	r3, [pc, #472]	@ (800a91c <tcp_process+0x5ac>)
 800a744:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a748:	4975      	ldr	r1, [pc, #468]	@ (800a920 <tcp_process+0x5b0>)
 800a74a:	4876      	ldr	r0, [pc, #472]	@ (800a924 <tcp_process+0x5b4>)
 800a74c:	f006 fbbe 	bl	8010ecc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <tcp_process+0x400>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6910      	ldr	r0, [r2, #16]
 800a764:	2200      	movs	r2, #0
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	4798      	blx	r3
 800a76a:	4603      	mov	r3, r0
 800a76c:	77bb      	strb	r3, [r7, #30]
 800a76e:	e001      	b.n	800a774 <tcp_process+0x404>
 800a770:	23f0      	movs	r3, #240	@ 0xf0
 800a772:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800a774:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a77c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a780:	f113 0f0d 	cmn.w	r3, #13
 800a784:	d002      	beq.n	800a78c <tcp_process+0x41c>
              tcp_abort(pcb);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7fd ff86 	bl	8008698 <tcp_abort>
            }
            return ERR_ABRT;
 800a78c:	f06f 030c 	mvn.w	r3, #12
 800a790:	e1ce      	b.n	800ab30 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fae0 	bl	800ad58 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a798:	4b63      	ldr	r3, [pc, #396]	@ (800a928 <tcp_process+0x5b8>)
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <tcp_process+0x43c>
            recv_acked--;
 800a7a0:	4b61      	ldr	r3, [pc, #388]	@ (800a928 <tcp_process+0x5b8>)
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	4b5f      	ldr	r3, [pc, #380]	@ (800a928 <tcp_process+0x5b8>)
 800a7aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7b0:	009a      	lsls	r2, r3, #2
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a7bc:	428b      	cmp	r3, r1
 800a7be:	bf38      	it	cc
 800a7c0:	460b      	movcc	r3, r1
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d204      	bcs.n	800a7d0 <tcp_process+0x460>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	e00d      	b.n	800a7ec <tcp_process+0x47c>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d904      	bls.n	800a7e8 <tcp_process+0x478>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	e001      	b.n	800a7ec <tcp_process+0x47c>
 800a7e8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a7f2:	4b4e      	ldr	r3, [pc, #312]	@ (800a92c <tcp_process+0x5bc>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	f003 0320 	and.w	r3, r3, #32
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d037      	beq.n	800a86e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	8b5b      	ldrh	r3, [r3, #26]
 800a802:	f043 0302 	orr.w	r3, r3, #2
 800a806:	b29a      	uxth	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2207      	movs	r2, #7
 800a810:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a812:	e02c      	b.n	800a86e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a814:	4b3b      	ldr	r3, [pc, #236]	@ (800a904 <tcp_process+0x594>)
 800a816:	6819      	ldr	r1, [r3, #0]
 800a818:	4b3b      	ldr	r3, [pc, #236]	@ (800a908 <tcp_process+0x598>)
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	4b3b      	ldr	r3, [pc, #236]	@ (800a90c <tcp_process+0x59c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a824:	4b3a      	ldr	r3, [pc, #232]	@ (800a910 <tcp_process+0x5a0>)
 800a826:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a828:	885b      	ldrh	r3, [r3, #2]
 800a82a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a82c:	4a38      	ldr	r2, [pc, #224]	@ (800a910 <tcp_process+0x5a0>)
 800a82e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a830:	8812      	ldrh	r2, [r2, #0]
 800a832:	b292      	uxth	r2, r2
 800a834:	9202      	str	r2, [sp, #8]
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	4b36      	ldr	r3, [pc, #216]	@ (800a914 <tcp_process+0x5a4>)
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	4b36      	ldr	r3, [pc, #216]	@ (800a918 <tcp_process+0x5a8>)
 800a83e:	4602      	mov	r2, r0
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f002 fbdf 	bl	800d004 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a846:	e167      	b.n	800ab18 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a848:	4b2d      	ldr	r3, [pc, #180]	@ (800a900 <tcp_process+0x590>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 8161 	beq.w	800ab18 <tcp_process+0x7a8>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85a:	1e5a      	subs	r2, r3, #1
 800a85c:	4b2b      	ldr	r3, [pc, #172]	@ (800a90c <tcp_process+0x59c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	429a      	cmp	r2, r3
 800a862:	f040 8159 	bne.w	800ab18 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f002 f9c6 	bl	800cbf8 <tcp_rexmit>
      break;
 800a86c:	e154      	b.n	800ab18 <tcp_process+0x7a8>
 800a86e:	e153      	b.n	800ab18 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fa71 	bl	800ad58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a876:	4b2d      	ldr	r3, [pc, #180]	@ (800a92c <tcp_process+0x5bc>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 814c 	beq.w	800ab1c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8b5b      	ldrh	r3, [r3, #26]
 800a888:	f043 0302 	orr.w	r3, r3, #2
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2207      	movs	r2, #7
 800a896:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a898:	e140      	b.n	800ab1c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fa5c 	bl	800ad58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a8a0:	4b22      	ldr	r3, [pc, #136]	@ (800a92c <tcp_process+0x5bc>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 0320 	and.w	r3, r3, #32
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d071      	beq.n	800a990 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8ac:	4b14      	ldr	r3, [pc, #80]	@ (800a900 <tcp_process+0x590>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 0310 	and.w	r3, r3, #16
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d060      	beq.n	800a97a <tcp_process+0x60a>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8bc:	4b11      	ldr	r3, [pc, #68]	@ (800a904 <tcp_process+0x594>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d15a      	bne.n	800a97a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d156      	bne.n	800a97a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	8b5b      	ldrh	r3, [r3, #26]
 800a8d0:	f043 0302 	orr.w	r3, r3, #2
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7fe fdb6 	bl	800944c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a8e0:	4b13      	ldr	r3, [pc, #76]	@ (800a930 <tcp_process+0x5c0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d105      	bne.n	800a8f6 <tcp_process+0x586>
 800a8ea:	4b11      	ldr	r3, [pc, #68]	@ (800a930 <tcp_process+0x5c0>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	4a0f      	ldr	r2, [pc, #60]	@ (800a930 <tcp_process+0x5c0>)
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	e02e      	b.n	800a954 <tcp_process+0x5e4>
 800a8f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a930 <tcp_process+0x5c0>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	613b      	str	r3, [r7, #16]
 800a8fc:	e027      	b.n	800a94e <tcp_process+0x5de>
 800a8fe:	bf00      	nop
 800a900:	20007f34 	.word	0x20007f34
 800a904:	20007f2c 	.word	0x20007f2c
 800a908:	20007f32 	.word	0x20007f32
 800a90c:	20007f28 	.word	0x20007f28
 800a910:	20007f18 	.word	0x20007f18
 800a914:	20004fa0 	.word	0x20004fa0
 800a918:	20004fa4 	.word	0x20004fa4
 800a91c:	080133c4 	.word	0x080133c4
 800a920:	08013664 	.word	0x08013664
 800a924:	08013410 	.word	0x08013410
 800a928:	20007f30 	.word	0x20007f30
 800a92c:	20007f35 	.word	0x20007f35
 800a930:	20007ef8 	.word	0x20007ef8
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d104      	bne.n	800a948 <tcp_process+0x5d8>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	60da      	str	r2, [r3, #12]
 800a946:	e005      	b.n	800a954 <tcp_process+0x5e4>
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	613b      	str	r3, [r7, #16]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1ef      	bne.n	800a934 <tcp_process+0x5c4>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	60da      	str	r2, [r3, #12]
 800a95a:	4b77      	ldr	r3, [pc, #476]	@ (800ab38 <tcp_process+0x7c8>)
 800a95c:	2201      	movs	r2, #1
 800a95e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	220a      	movs	r2, #10
 800a964:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a966:	4b75      	ldr	r3, [pc, #468]	@ (800ab3c <tcp_process+0x7cc>)
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60da      	str	r2, [r3, #12]
 800a96e:	4a73      	ldr	r2, [pc, #460]	@ (800ab3c <tcp_process+0x7cc>)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	f002 fd08 	bl	800d388 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a978:	e0d2      	b.n	800ab20 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	8b5b      	ldrh	r3, [r3, #26]
 800a97e:	f043 0302 	orr.w	r3, r3, #2
 800a982:	b29a      	uxth	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2208      	movs	r2, #8
 800a98c:	751a      	strb	r2, [r3, #20]
      break;
 800a98e:	e0c7      	b.n	800ab20 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a990:	4b6b      	ldr	r3, [pc, #428]	@ (800ab40 <tcp_process+0x7d0>)
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	f003 0310 	and.w	r3, r3, #16
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 80c1 	beq.w	800ab20 <tcp_process+0x7b0>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9a2:	4b68      	ldr	r3, [pc, #416]	@ (800ab44 <tcp_process+0x7d4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	f040 80ba 	bne.w	800ab20 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 80b5 	bne.w	800ab20 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2206      	movs	r2, #6
 800a9ba:	751a      	strb	r2, [r3, #20]
      break;
 800a9bc:	e0b0      	b.n	800ab20 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9ca 	bl	800ad58 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a9c4:	4b60      	ldr	r3, [pc, #384]	@ (800ab48 <tcp_process+0x7d8>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 80a9 	beq.w	800ab24 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	8b5b      	ldrh	r3, [r3, #26]
 800a9d6:	f043 0302 	orr.w	r3, r3, #2
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7fe fd33 	bl	800944c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a9e6:	4b59      	ldr	r3, [pc, #356]	@ (800ab4c <tcp_process+0x7dc>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d105      	bne.n	800a9fc <tcp_process+0x68c>
 800a9f0:	4b56      	ldr	r3, [pc, #344]	@ (800ab4c <tcp_process+0x7dc>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	4a55      	ldr	r2, [pc, #340]	@ (800ab4c <tcp_process+0x7dc>)
 800a9f8:	6013      	str	r3, [r2, #0]
 800a9fa:	e013      	b.n	800aa24 <tcp_process+0x6b4>
 800a9fc:	4b53      	ldr	r3, [pc, #332]	@ (800ab4c <tcp_process+0x7dc>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	60fb      	str	r3, [r7, #12]
 800aa02:	e00c      	b.n	800aa1e <tcp_process+0x6ae>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d104      	bne.n	800aa18 <tcp_process+0x6a8>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	60da      	str	r2, [r3, #12]
 800aa16:	e005      	b.n	800aa24 <tcp_process+0x6b4>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	60fb      	str	r3, [r7, #12]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1ef      	bne.n	800aa04 <tcp_process+0x694>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	60da      	str	r2, [r3, #12]
 800aa2a:	4b43      	ldr	r3, [pc, #268]	@ (800ab38 <tcp_process+0x7c8>)
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	220a      	movs	r2, #10
 800aa34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aa36:	4b41      	ldr	r3, [pc, #260]	@ (800ab3c <tcp_process+0x7cc>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60da      	str	r2, [r3, #12]
 800aa3e:	4a3f      	ldr	r2, [pc, #252]	@ (800ab3c <tcp_process+0x7cc>)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	f002 fca0 	bl	800d388 <tcp_timer_needed>
      }
      break;
 800aa48:	e06c      	b.n	800ab24 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f984 	bl	800ad58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aa50:	4b3b      	ldr	r3, [pc, #236]	@ (800ab40 <tcp_process+0x7d0>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	f003 0310 	and.w	r3, r3, #16
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d065      	beq.n	800ab28 <tcp_process+0x7b8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa60:	4b38      	ldr	r3, [pc, #224]	@ (800ab44 <tcp_process+0x7d4>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d15f      	bne.n	800ab28 <tcp_process+0x7b8>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d15b      	bne.n	800ab28 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7fe fceb 	bl	800944c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa76:	4b35      	ldr	r3, [pc, #212]	@ (800ab4c <tcp_process+0x7dc>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d105      	bne.n	800aa8c <tcp_process+0x71c>
 800aa80:	4b32      	ldr	r3, [pc, #200]	@ (800ab4c <tcp_process+0x7dc>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	4a31      	ldr	r2, [pc, #196]	@ (800ab4c <tcp_process+0x7dc>)
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	e013      	b.n	800aab4 <tcp_process+0x744>
 800aa8c:	4b2f      	ldr	r3, [pc, #188]	@ (800ab4c <tcp_process+0x7dc>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	61bb      	str	r3, [r7, #24]
 800aa92:	e00c      	b.n	800aaae <tcp_process+0x73e>
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d104      	bne.n	800aaa8 <tcp_process+0x738>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68da      	ldr	r2, [r3, #12]
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	60da      	str	r2, [r3, #12]
 800aaa6:	e005      	b.n	800aab4 <tcp_process+0x744>
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	61bb      	str	r3, [r7, #24]
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1ef      	bne.n	800aa94 <tcp_process+0x724>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	60da      	str	r2, [r3, #12]
 800aaba:	4b1f      	ldr	r3, [pc, #124]	@ (800ab38 <tcp_process+0x7c8>)
 800aabc:	2201      	movs	r2, #1
 800aabe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	220a      	movs	r2, #10
 800aac4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aac6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab3c <tcp_process+0x7cc>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60da      	str	r2, [r3, #12]
 800aace:	4a1b      	ldr	r2, [pc, #108]	@ (800ab3c <tcp_process+0x7cc>)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	f002 fc58 	bl	800d388 <tcp_timer_needed>
      }
      break;
 800aad8:	e026      	b.n	800ab28 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f93c 	bl	800ad58 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aae0:	4b17      	ldr	r3, [pc, #92]	@ (800ab40 <tcp_process+0x7d0>)
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	f003 0310 	and.w	r3, r3, #16
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d01f      	beq.n	800ab2c <tcp_process+0x7bc>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aaf0:	4b14      	ldr	r3, [pc, #80]	@ (800ab44 <tcp_process+0x7d4>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d119      	bne.n	800ab2c <tcp_process+0x7bc>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d115      	bne.n	800ab2c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ab00:	4b11      	ldr	r3, [pc, #68]	@ (800ab48 <tcp_process+0x7d8>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	f043 0310 	orr.w	r3, r3, #16
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab48 <tcp_process+0x7d8>)
 800ab0c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ab0e:	e00d      	b.n	800ab2c <tcp_process+0x7bc>
    default:
      break;
 800ab10:	bf00      	nop
 800ab12:	e00c      	b.n	800ab2e <tcp_process+0x7be>
      break;
 800ab14:	bf00      	nop
 800ab16:	e00a      	b.n	800ab2e <tcp_process+0x7be>
      break;
 800ab18:	bf00      	nop
 800ab1a:	e008      	b.n	800ab2e <tcp_process+0x7be>
      break;
 800ab1c:	bf00      	nop
 800ab1e:	e006      	b.n	800ab2e <tcp_process+0x7be>
      break;
 800ab20:	bf00      	nop
 800ab22:	e004      	b.n	800ab2e <tcp_process+0x7be>
      break;
 800ab24:	bf00      	nop
 800ab26:	e002      	b.n	800ab2e <tcp_process+0x7be>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e000      	b.n	800ab2e <tcp_process+0x7be>
      break;
 800ab2c:	bf00      	nop
  }
  return ERR_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3724      	adds	r7, #36	@ 0x24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd90      	pop	{r4, r7, pc}
 800ab38:	20007f00 	.word	0x20007f00
 800ab3c:	20007efc 	.word	0x20007efc
 800ab40:	20007f34 	.word	0x20007f34
 800ab44:	20007f2c 	.word	0x20007f2c
 800ab48:	20007f35 	.word	0x20007f35
 800ab4c:	20007ef8 	.word	0x20007ef8

0800ab50 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ab50:	b590      	push	{r4, r7, lr}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <tcp_oos_insert_segment+0x1e>
 800ab60:	4b3b      	ldr	r3, [pc, #236]	@ (800ac50 <tcp_oos_insert_segment+0x100>)
 800ab62:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ab66:	493b      	ldr	r1, [pc, #236]	@ (800ac54 <tcp_oos_insert_segment+0x104>)
 800ab68:	483b      	ldr	r0, [pc, #236]	@ (800ac58 <tcp_oos_insert_segment+0x108>)
 800ab6a:	f006 f9af 	bl	8010ecc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	899b      	ldrh	r3, [r3, #12]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fb fba6 	bl	80062c8 <lwip_htons>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d028      	beq.n	800abda <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ab88:	6838      	ldr	r0, [r7, #0]
 800ab8a:	f7fe fa5d 	bl	8009048 <tcp_segs_free>
    next = NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	603b      	str	r3, [r7, #0]
 800ab92:	e056      	b.n	800ac42 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	899b      	ldrh	r3, [r3, #12]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fb fb93 	bl	80062c8 <lwip_htons>
 800aba2:	4603      	mov	r3, r0
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00d      	beq.n	800abca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	899b      	ldrh	r3, [r3, #12]
 800abb4:	b29c      	uxth	r4, r3
 800abb6:	2001      	movs	r0, #1
 800abb8:	f7fb fb86 	bl	80062c8 <lwip_htons>
 800abbc:	4603      	mov	r3, r0
 800abbe:	461a      	mov	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	4322      	orrs	r2, r4
 800abc6:	b292      	uxth	r2, r2
 800abc8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f7fe fa4c 	bl	8009072 <tcp_seg_free>
    while (next &&
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00e      	beq.n	800abfe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	891b      	ldrh	r3, [r3, #8]
 800abe4:	461a      	mov	r2, r3
 800abe6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac5c <tcp_oos_insert_segment+0x10c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	441a      	add	r2, r3
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	8909      	ldrh	r1, [r1, #8]
 800abf6:	440b      	add	r3, r1
 800abf8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	daca      	bge.n	800ab94 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d01e      	beq.n	800ac42 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	891b      	ldrh	r3, [r3, #8]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	4b14      	ldr	r3, [pc, #80]	@ (800ac5c <tcp_oos_insert_segment+0x10c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	441a      	add	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dd12      	ble.n	800ac42 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	4b0d      	ldr	r3, [pc, #52]	@ (800ac5c <tcp_oos_insert_segment+0x10c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	891b      	ldrh	r3, [r3, #8]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7fc fe0d 	bl	800785c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	601a      	str	r2, [r3, #0]
}
 800ac48:	bf00      	nop
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd90      	pop	{r4, r7, pc}
 800ac50:	080133c4 	.word	0x080133c4
 800ac54:	08013684 	.word	0x08013684
 800ac58:	08013410 	.word	0x08013410
 800ac5c:	20007f28 	.word	0x20007f28

0800ac60 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ac60:	b5b0      	push	{r4, r5, r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ac6e:	e03e      	b.n	800acee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fc fffa 	bl	8007c78 <pbuf_clen>
 800ac84:	4603      	mov	r3, r0
 800ac86:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ac8e:	8a7a      	ldrh	r2, [r7, #18]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d906      	bls.n	800aca2 <tcp_free_acked_segments+0x42>
 800ac94:	4b2a      	ldr	r3, [pc, #168]	@ (800ad40 <tcp_free_acked_segments+0xe0>)
 800ac96:	f240 4257 	movw	r2, #1111	@ 0x457
 800ac9a:	492a      	ldr	r1, [pc, #168]	@ (800ad44 <tcp_free_acked_segments+0xe4>)
 800ac9c:	482a      	ldr	r0, [pc, #168]	@ (800ad48 <tcp_free_acked_segments+0xe8>)
 800ac9e:	f006 f915 	bl	8010ecc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800aca8:	8a7b      	ldrh	r3, [r7, #18]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	b29a      	uxth	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	891a      	ldrh	r2, [r3, #8]
 800acb8:	4b24      	ldr	r3, [pc, #144]	@ (800ad4c <tcp_free_acked_segments+0xec>)
 800acba:	881b      	ldrh	r3, [r3, #0]
 800acbc:	4413      	add	r3, r2
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	4b22      	ldr	r3, [pc, #136]	@ (800ad4c <tcp_free_acked_segments+0xec>)
 800acc2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800acc4:	6978      	ldr	r0, [r7, #20]
 800acc6:	f7fe f9d4 	bl	8009072 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00c      	beq.n	800acee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <tcp_free_acked_segments+0x8e>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d106      	bne.n	800acee <tcp_free_acked_segments+0x8e>
 800ace0:	4b17      	ldr	r3, [pc, #92]	@ (800ad40 <tcp_free_acked_segments+0xe0>)
 800ace2:	f240 4261 	movw	r2, #1121	@ 0x461
 800ace6:	491a      	ldr	r1, [pc, #104]	@ (800ad50 <tcp_free_acked_segments+0xf0>)
 800ace8:	4817      	ldr	r0, [pc, #92]	@ (800ad48 <tcp_free_acked_segments+0xe8>)
 800acea:	f006 f8ef 	bl	8010ecc <iprintf>
  while (seg_list != NULL &&
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d020      	beq.n	800ad36 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fb fafa 	bl	80062f4 <lwip_htonl>
 800ad00:	4604      	mov	r4, r0
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	891b      	ldrh	r3, [r3, #8]
 800ad06:	461d      	mov	r5, r3
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	899b      	ldrh	r3, [r3, #12]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fb fad9 	bl	80062c8 <lwip_htons>
 800ad16:	4603      	mov	r3, r0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <tcp_free_acked_segments+0xc6>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e000      	b.n	800ad28 <tcp_free_acked_segments+0xc8>
 800ad26:	2300      	movs	r3, #0
 800ad28:	442b      	add	r3, r5
 800ad2a:	18e2      	adds	r2, r4, r3
 800ad2c:	4b09      	ldr	r3, [pc, #36]	@ (800ad54 <tcp_free_acked_segments+0xf4>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	dd9c      	ble.n	800ac70 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ad36:	68bb      	ldr	r3, [r7, #8]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad40:	080133c4 	.word	0x080133c4
 800ad44:	080136ac 	.word	0x080136ac
 800ad48:	08013410 	.word	0x08013410
 800ad4c:	20007f30 	.word	0x20007f30
 800ad50:	080136d4 	.word	0x080136d4
 800ad54:	20007f2c 	.word	0x20007f2c

0800ad58 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ad58:	b5b0      	push	{r4, r5, r7, lr}
 800ad5a:	b094      	sub	sp, #80	@ 0x50
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d106      	bne.n	800ad78 <tcp_receive+0x20>
 800ad6a:	4b91      	ldr	r3, [pc, #580]	@ (800afb0 <tcp_receive+0x258>)
 800ad6c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ad70:	4990      	ldr	r1, [pc, #576]	@ (800afb4 <tcp_receive+0x25c>)
 800ad72:	4891      	ldr	r0, [pc, #580]	@ (800afb8 <tcp_receive+0x260>)
 800ad74:	f006 f8aa 	bl	8010ecc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7d1b      	ldrb	r3, [r3, #20]
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	d806      	bhi.n	800ad8e <tcp_receive+0x36>
 800ad80:	4b8b      	ldr	r3, [pc, #556]	@ (800afb0 <tcp_receive+0x258>)
 800ad82:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ad86:	498d      	ldr	r1, [pc, #564]	@ (800afbc <tcp_receive+0x264>)
 800ad88:	488b      	ldr	r0, [pc, #556]	@ (800afb8 <tcp_receive+0x260>)
 800ad8a:	f006 f89f 	bl	8010ecc <iprintf>

  if (flags & TCP_ACK) {
 800ad8e:	4b8c      	ldr	r3, [pc, #560]	@ (800afc0 <tcp_receive+0x268>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f003 0310 	and.w	r3, r3, #16
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 8264 	beq.w	800b264 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ada2:	461a      	mov	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ada8:	4413      	add	r3, r2
 800adaa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adb0:	4b84      	ldr	r3, [pc, #528]	@ (800afc4 <tcp_receive+0x26c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	db1b      	blt.n	800adf2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adbe:	4b81      	ldr	r3, [pc, #516]	@ (800afc4 <tcp_receive+0x26c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d106      	bne.n	800add4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800adca:	4b7f      	ldr	r3, [pc, #508]	@ (800afc8 <tcp_receive+0x270>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	db0e      	blt.n	800adf2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800add8:	4b7b      	ldr	r3, [pc, #492]	@ (800afc8 <tcp_receive+0x270>)
 800adda:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800addc:	429a      	cmp	r2, r3
 800adde:	d125      	bne.n	800ae2c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ade0:	4b7a      	ldr	r3, [pc, #488]	@ (800afcc <tcp_receive+0x274>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	89db      	ldrh	r3, [r3, #14]
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800adee:	429a      	cmp	r2, r3
 800adf0:	d91c      	bls.n	800ae2c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800adf2:	4b76      	ldr	r3, [pc, #472]	@ (800afcc <tcp_receive+0x274>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	89db      	ldrh	r3, [r3, #14]
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d205      	bcs.n	800ae1c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ae1c:	4b69      	ldr	r3, [pc, #420]	@ (800afc4 <tcp_receive+0x26c>)
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ae24:	4b68      	ldr	r3, [pc, #416]	@ (800afc8 <tcp_receive+0x270>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ae2c:	4b66      	ldr	r3, [pc, #408]	@ (800afc8 <tcp_receive+0x270>)
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dc58      	bgt.n	800aeec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ae3a:	4b65      	ldr	r3, [pc, #404]	@ (800afd0 <tcp_receive+0x278>)
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d14b      	bne.n	800aeda <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ae4c:	4413      	add	r3, r2
 800ae4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d142      	bne.n	800aeda <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	db3d      	blt.n	800aeda <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae62:	4b59      	ldr	r3, [pc, #356]	@ (800afc8 <tcp_receive+0x270>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d137      	bne.n	800aeda <tcp_receive+0x182>
              found_dupack = 1;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ae74:	2bff      	cmp	r3, #255	@ 0xff
 800ae76:	d007      	beq.n	800ae88 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ae7e:	3301      	adds	r3, #1
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d91b      	bls.n	800aeca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae9c:	4413      	add	r3, r2
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d30a      	bcc.n	800aec0 <tcp_receive+0x168>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aeb4:	4413      	add	r3, r2
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800aebe:	e004      	b.n	800aeca <tcp_receive+0x172>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aec6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d902      	bls.n	800aeda <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 fefb 	bl	800ccd0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aeda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f040 8161 	bne.w	800b1a4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aeea:	e15b      	b.n	800b1a4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aeec:	4b36      	ldr	r3, [pc, #216]	@ (800afc8 <tcp_receive+0x270>)
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	3b01      	subs	r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f2c0 814e 	blt.w	800b19a <tcp_receive+0x442>
 800aefe:	4b32      	ldr	r3, [pc, #200]	@ (800afc8 <tcp_receive+0x270>)
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f300 8146 	bgt.w	800b19a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	8b5b      	ldrh	r3, [r3, #26]
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b00      	cmp	r3, #0
 800af18:	d010      	beq.n	800af3c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8b5b      	ldrh	r3, [r3, #26]
 800af1e:	f023 0304 	bic.w	r3, r3, #4
 800af22:	b29a      	uxth	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800af4a:	10db      	asrs	r3, r3, #3
 800af4c:	b21b      	sxth	r3, r3
 800af4e:	b29a      	uxth	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800af56:	b29b      	uxth	r3, r3
 800af58:	4413      	add	r3, r2
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	b21a      	sxth	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800af64:	4b18      	ldr	r3, [pc, #96]	@ (800afc8 <tcp_receive+0x270>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	b29a      	uxth	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af6e:	b29b      	uxth	r3, r3
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800af7c:	4b12      	ldr	r3, [pc, #72]	@ (800afc8 <tcp_receive+0x270>)
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	7d1b      	ldrb	r3, [r3, #20]
 800af88:	2b03      	cmp	r3, #3
 800af8a:	f240 8097 	bls.w	800b0bc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d245      	bcs.n	800b02a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	8b5b      	ldrh	r3, [r3, #26]
 800afa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d014      	beq.n	800afd4 <tcp_receive+0x27c>
 800afaa:	2301      	movs	r3, #1
 800afac:	e013      	b.n	800afd6 <tcp_receive+0x27e>
 800afae:	bf00      	nop
 800afb0:	080133c4 	.word	0x080133c4
 800afb4:	080136f4 	.word	0x080136f4
 800afb8:	08013410 	.word	0x08013410
 800afbc:	08013710 	.word	0x08013710
 800afc0:	20007f34 	.word	0x20007f34
 800afc4:	20007f28 	.word	0x20007f28
 800afc8:	20007f2c 	.word	0x20007f2c
 800afcc:	20007f18 	.word	0x20007f18
 800afd0:	20007f32 	.word	0x20007f32
 800afd4:	2302      	movs	r3, #2
 800afd6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800afda:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800afde:	b29a      	uxth	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afe4:	fb12 f303 	smulbb	r3, r2, r3
 800afe8:	b29b      	uxth	r3, r3
 800afea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800afec:	4293      	cmp	r3, r2
 800afee:	bf28      	it	cs
 800aff0:	4613      	movcs	r3, r2
 800aff2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800affa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800affc:	4413      	add	r3, r2
 800affe:	b29a      	uxth	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b006:	429a      	cmp	r2, r3
 800b008:	d309      	bcc.n	800b01e <tcp_receive+0x2c6>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b010:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b012:	4413      	add	r3, r2
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b01c:	e04e      	b.n	800b0bc <tcp_receive+0x364>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b024:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b028:	e048      	b.n	800b0bc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b030:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b032:	4413      	add	r3, r2
 800b034:	b29a      	uxth	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d309      	bcc.n	800b054 <tcp_receive+0x2fc>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b046:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b048:	4413      	add	r3, r2
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b052:	e004      	b.n	800b05e <tcp_receive+0x306>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b05a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d326      	bcc.n	800b0bc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b08e:	4413      	add	r3, r2
 800b090:	b29a      	uxth	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b098:	429a      	cmp	r2, r3
 800b09a:	d30a      	bcc.n	800b0b2 <tcp_receive+0x35a>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0a6:	4413      	add	r3, r2
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b0b0:	e004      	b.n	800b0bc <tcp_receive+0x364>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0c4:	4a98      	ldr	r2, [pc, #608]	@ (800b328 <tcp_receive+0x5d0>)
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff fdca 	bl	800ac60 <tcp_free_acked_segments>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0da:	4a94      	ldr	r2, [pc, #592]	@ (800b32c <tcp_receive+0x5d4>)
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff fdbf 	bl	800ac60 <tcp_free_acked_segments>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d104      	bne.n	800b0fa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0f6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b0f8:	e002      	b.n	800b100 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d103      	bne.n	800b116 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b11c:	4b84      	ldr	r3, [pc, #528]	@ (800b330 <tcp_receive+0x5d8>)
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	4413      	add	r3, r2
 800b122:	b29a      	uxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	8b5b      	ldrh	r3, [r3, #26]
 800b12e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b132:	2b00      	cmp	r3, #0
 800b134:	d035      	beq.n	800b1a2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d118      	bne.n	800b170 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00c      	beq.n	800b160 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	4618      	mov	r0, r3
 800b154:	f7fb f8ce 	bl	80062f4 <lwip_htonl>
 800b158:	4603      	mov	r3, r0
 800b15a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dc20      	bgt.n	800b1a2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	8b5b      	ldrh	r3, [r3, #26]
 800b164:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b168:	b29a      	uxth	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b16e:	e018      	b.n	800b1a2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fb f8b9 	bl	80062f4 <lwip_htonl>
 800b182:	4603      	mov	r3, r0
 800b184:	1ae3      	subs	r3, r4, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	dc0b      	bgt.n	800b1a2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	8b5b      	ldrh	r3, [r3, #26]
 800b18e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b192:	b29a      	uxth	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b198:	e003      	b.n	800b1a2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f001 ff84 	bl	800d0a8 <tcp_send_empty_ack>
 800b1a0:	e000      	b.n	800b1a4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1a2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d05b      	beq.n	800b264 <tcp_receive+0x50c>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1b0:	4b60      	ldr	r3, [pc, #384]	@ (800b334 <tcp_receive+0x5dc>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	da54      	bge.n	800b264 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b1ba:	4b5f      	ldr	r3, [pc, #380]	@ (800b338 <tcp_receive+0x5e0>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b1ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b1d8:	10db      	asrs	r3, r3, #3
 800b1da:	b21b      	sxth	r3, r3
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b1f2:	4413      	add	r3, r2
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	b21a      	sxth	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b1fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b200:	2b00      	cmp	r3, #0
 800b202:	da05      	bge.n	800b210 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b204:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b208:	425b      	negs	r3, r3
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b210:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b21a:	109b      	asrs	r3, r3, #2
 800b21c:	b21b      	sxth	r3, r3
 800b21e:	b29b      	uxth	r3, r3
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	b29b      	uxth	r3, r3
 800b224:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b22e:	b29a      	uxth	r2, r3
 800b230:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b234:	4413      	add	r3, r2
 800b236:	b29b      	uxth	r3, r3
 800b238:	b21a      	sxth	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b244:	10db      	asrs	r3, r3, #3
 800b246:	b21b      	sxth	r3, r3
 800b248:	b29a      	uxth	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b250:	b29b      	uxth	r3, r3
 800b252:	4413      	add	r3, r2
 800b254:	b29b      	uxth	r3, r3
 800b256:	b21a      	sxth	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b264:	4b35      	ldr	r3, [pc, #212]	@ (800b33c <tcp_receive+0x5e4>)
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 84df 	beq.w	800bc2c <tcp_receive+0xed4>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	7d1b      	ldrb	r3, [r3, #20]
 800b272:	2b06      	cmp	r3, #6
 800b274:	f200 84da 	bhi.w	800bc2c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b27c:	4b30      	ldr	r3, [pc, #192]	@ (800b340 <tcp_receive+0x5e8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	3b01      	subs	r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	f2c0 808f 	blt.w	800b3a8 <tcp_receive+0x650>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b28e:	4b2b      	ldr	r3, [pc, #172]	@ (800b33c <tcp_receive+0x5e4>)
 800b290:	881b      	ldrh	r3, [r3, #0]
 800b292:	4619      	mov	r1, r3
 800b294:	4b2a      	ldr	r3, [pc, #168]	@ (800b340 <tcp_receive+0x5e8>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	440b      	add	r3, r1
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	3301      	adds	r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f300 8082 	bgt.w	800b3a8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b2a4:	4b27      	ldr	r3, [pc, #156]	@ (800b344 <tcp_receive+0x5ec>)
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2ae:	4b24      	ldr	r3, [pc, #144]	@ (800b340 <tcp_receive+0x5e8>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b2b6:	4b23      	ldr	r3, [pc, #140]	@ (800b344 <tcp_receive+0x5ec>)
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d106      	bne.n	800b2cc <tcp_receive+0x574>
 800b2be:	4b22      	ldr	r3, [pc, #136]	@ (800b348 <tcp_receive+0x5f0>)
 800b2c0:	f240 5294 	movw	r2, #1428	@ 0x594
 800b2c4:	4921      	ldr	r1, [pc, #132]	@ (800b34c <tcp_receive+0x5f4>)
 800b2c6:	4822      	ldr	r0, [pc, #136]	@ (800b350 <tcp_receive+0x5f8>)
 800b2c8:	f005 fe00 	bl	8010ecc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d906      	bls.n	800b2e4 <tcp_receive+0x58c>
 800b2d6:	4b1c      	ldr	r3, [pc, #112]	@ (800b348 <tcp_receive+0x5f0>)
 800b2d8:	f240 5295 	movw	r2, #1429	@ 0x595
 800b2dc:	491d      	ldr	r1, [pc, #116]	@ (800b354 <tcp_receive+0x5fc>)
 800b2de:	481c      	ldr	r0, [pc, #112]	@ (800b350 <tcp_receive+0x5f8>)
 800b2e0:	f005 fdf4 	bl	8010ecc <iprintf>
      off = (u16_t)off32;
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b2ea:	4b16      	ldr	r3, [pc, #88]	@ (800b344 <tcp_receive+0x5ec>)
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	891b      	ldrh	r3, [r3, #8]
 800b2f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d906      	bls.n	800b306 <tcp_receive+0x5ae>
 800b2f8:	4b13      	ldr	r3, [pc, #76]	@ (800b348 <tcp_receive+0x5f0>)
 800b2fa:	f240 5297 	movw	r2, #1431	@ 0x597
 800b2fe:	4916      	ldr	r1, [pc, #88]	@ (800b358 <tcp_receive+0x600>)
 800b300:	4813      	ldr	r0, [pc, #76]	@ (800b350 <tcp_receive+0x5f8>)
 800b302:	f005 fde3 	bl	8010ecc <iprintf>
      inseg.len -= off;
 800b306:	4b0f      	ldr	r3, [pc, #60]	@ (800b344 <tcp_receive+0x5ec>)
 800b308:	891a      	ldrh	r2, [r3, #8]
 800b30a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	b29a      	uxth	r2, r3
 800b312:	4b0c      	ldr	r3, [pc, #48]	@ (800b344 <tcp_receive+0x5ec>)
 800b314:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b316:	4b0b      	ldr	r3, [pc, #44]	@ (800b344 <tcp_receive+0x5ec>)
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	891a      	ldrh	r2, [r3, #8]
 800b31c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b324:	e02a      	b.n	800b37c <tcp_receive+0x624>
 800b326:	bf00      	nop
 800b328:	0801372c 	.word	0x0801372c
 800b32c:	08013734 	.word	0x08013734
 800b330:	20007f30 	.word	0x20007f30
 800b334:	20007f2c 	.word	0x20007f2c
 800b338:	20007eec 	.word	0x20007eec
 800b33c:	20007f32 	.word	0x20007f32
 800b340:	20007f28 	.word	0x20007f28
 800b344:	20007f04 	.word	0x20007f04
 800b348:	080133c4 	.word	0x080133c4
 800b34c:	0801373c 	.word	0x0801373c
 800b350:	08013410 	.word	0x08013410
 800b354:	0801374c 	.word	0x0801374c
 800b358:	0801375c 	.word	0x0801375c
        off -= p->len;
 800b35c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b35e:	895b      	ldrh	r3, [r3, #10]
 800b360:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b36a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b36c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b36e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b372:	2200      	movs	r2, #0
 800b374:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b37c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b37e:	895b      	ldrh	r3, [r3, #10]
 800b380:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b384:	429a      	cmp	r2, r3
 800b386:	d8e9      	bhi.n	800b35c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b388:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b38c:	4619      	mov	r1, r3
 800b38e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b390:	f7fc fb64 	bl	8007a5c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b398:	4a90      	ldr	r2, [pc, #576]	@ (800b5dc <tcp_receive+0x884>)
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	4b90      	ldr	r3, [pc, #576]	@ (800b5e0 <tcp_receive+0x888>)
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	4a8e      	ldr	r2, [pc, #568]	@ (800b5dc <tcp_receive+0x884>)
 800b3a2:	6812      	ldr	r2, [r2, #0]
 800b3a4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b3a6:	e00d      	b.n	800b3c4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b3a8:	4b8c      	ldr	r3, [pc, #560]	@ (800b5dc <tcp_receive+0x884>)
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	da06      	bge.n	800b3c4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ba:	f043 0302 	orr.w	r3, r3, #2
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b3c4:	4b85      	ldr	r3, [pc, #532]	@ (800b5dc <tcp_receive+0x884>)
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f2c0 8427 	blt.w	800bc22 <tcp_receive+0xeca>
 800b3d4:	4b81      	ldr	r3, [pc, #516]	@ (800b5dc <tcp_receive+0x884>)
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3dc:	6879      	ldr	r1, [r7, #4]
 800b3de:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b3e0:	440b      	add	r3, r1
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f300 841b 	bgt.w	800bc22 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3f0:	4b7a      	ldr	r3, [pc, #488]	@ (800b5dc <tcp_receive+0x884>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	f040 8298 	bne.w	800b92a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b3fa:	4b79      	ldr	r3, [pc, #484]	@ (800b5e0 <tcp_receive+0x888>)
 800b3fc:	891c      	ldrh	r4, [r3, #8]
 800b3fe:	4b78      	ldr	r3, [pc, #480]	@ (800b5e0 <tcp_receive+0x888>)
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	899b      	ldrh	r3, [r3, #12]
 800b404:	b29b      	uxth	r3, r3
 800b406:	4618      	mov	r0, r3
 800b408:	f7fa ff5e 	bl	80062c8 <lwip_htons>
 800b40c:	4603      	mov	r3, r0
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	f003 0303 	and.w	r3, r3, #3
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <tcp_receive+0x6c4>
 800b418:	2301      	movs	r3, #1
 800b41a:	e000      	b.n	800b41e <tcp_receive+0x6c6>
 800b41c:	2300      	movs	r3, #0
 800b41e:	4423      	add	r3, r4
 800b420:	b29a      	uxth	r2, r3
 800b422:	4b70      	ldr	r3, [pc, #448]	@ (800b5e4 <tcp_receive+0x88c>)
 800b424:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b42a:	4b6e      	ldr	r3, [pc, #440]	@ (800b5e4 <tcp_receive+0x88c>)
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d274      	bcs.n	800b51c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b432:	4b6b      	ldr	r3, [pc, #428]	@ (800b5e0 <tcp_receive+0x888>)
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	899b      	ldrh	r3, [r3, #12]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fa ff44 	bl	80062c8 <lwip_htons>
 800b440:	4603      	mov	r3, r0
 800b442:	b2db      	uxtb	r3, r3
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01e      	beq.n	800b48a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b44c:	4b64      	ldr	r3, [pc, #400]	@ (800b5e0 <tcp_receive+0x888>)
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	899b      	ldrh	r3, [r3, #12]
 800b452:	b29b      	uxth	r3, r3
 800b454:	b21b      	sxth	r3, r3
 800b456:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b45a:	b21c      	sxth	r4, r3
 800b45c:	4b60      	ldr	r3, [pc, #384]	@ (800b5e0 <tcp_receive+0x888>)
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	899b      	ldrh	r3, [r3, #12]
 800b462:	b29b      	uxth	r3, r3
 800b464:	4618      	mov	r0, r3
 800b466:	f7fa ff2f 	bl	80062c8 <lwip_htons>
 800b46a:	4603      	mov	r3, r0
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b472:	b29b      	uxth	r3, r3
 800b474:	4618      	mov	r0, r3
 800b476:	f7fa ff27 	bl	80062c8 <lwip_htons>
 800b47a:	4603      	mov	r3, r0
 800b47c:	b21b      	sxth	r3, r3
 800b47e:	4323      	orrs	r3, r4
 800b480:	b21a      	sxth	r2, r3
 800b482:	4b57      	ldr	r3, [pc, #348]	@ (800b5e0 <tcp_receive+0x888>)
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	b292      	uxth	r2, r2
 800b488:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b48e:	4b54      	ldr	r3, [pc, #336]	@ (800b5e0 <tcp_receive+0x888>)
 800b490:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b492:	4b53      	ldr	r3, [pc, #332]	@ (800b5e0 <tcp_receive+0x888>)
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	899b      	ldrh	r3, [r3, #12]
 800b498:	b29b      	uxth	r3, r3
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fa ff14 	bl	80062c8 <lwip_htons>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <tcp_receive+0x760>
            inseg.len -= 1;
 800b4ac:	4b4c      	ldr	r3, [pc, #304]	@ (800b5e0 <tcp_receive+0x888>)
 800b4ae:	891b      	ldrh	r3, [r3, #8]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	4b4a      	ldr	r3, [pc, #296]	@ (800b5e0 <tcp_receive+0x888>)
 800b4b6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b4b8:	4b49      	ldr	r3, [pc, #292]	@ (800b5e0 <tcp_receive+0x888>)
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	4a48      	ldr	r2, [pc, #288]	@ (800b5e0 <tcp_receive+0x888>)
 800b4be:	8912      	ldrh	r2, [r2, #8]
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fc f9ca 	bl	800785c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b4c8:	4b45      	ldr	r3, [pc, #276]	@ (800b5e0 <tcp_receive+0x888>)
 800b4ca:	891c      	ldrh	r4, [r3, #8]
 800b4cc:	4b44      	ldr	r3, [pc, #272]	@ (800b5e0 <tcp_receive+0x888>)
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	899b      	ldrh	r3, [r3, #12]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fa fef7 	bl	80062c8 <lwip_htons>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	f003 0303 	and.w	r3, r3, #3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <tcp_receive+0x792>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e000      	b.n	800b4ec <tcp_receive+0x794>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4423      	add	r3, r4
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	4b3c      	ldr	r3, [pc, #240]	@ (800b5e4 <tcp_receive+0x88c>)
 800b4f2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4f4:	4b3b      	ldr	r3, [pc, #236]	@ (800b5e4 <tcp_receive+0x88c>)
 800b4f6:	881b      	ldrh	r3, [r3, #0]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	4b38      	ldr	r3, [pc, #224]	@ (800b5dc <tcp_receive+0x884>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	441a      	add	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b504:	6879      	ldr	r1, [r7, #4]
 800b506:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b508:	440b      	add	r3, r1
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d006      	beq.n	800b51c <tcp_receive+0x7c4>
 800b50e:	4b36      	ldr	r3, [pc, #216]	@ (800b5e8 <tcp_receive+0x890>)
 800b510:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b514:	4935      	ldr	r1, [pc, #212]	@ (800b5ec <tcp_receive+0x894>)
 800b516:	4836      	ldr	r0, [pc, #216]	@ (800b5f0 <tcp_receive+0x898>)
 800b518:	f005 fcd8 	bl	8010ecc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 80e6 	beq.w	800b6f2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b526:	4b2e      	ldr	r3, [pc, #184]	@ (800b5e0 <tcp_receive+0x888>)
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	899b      	ldrh	r3, [r3, #12]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fa feca 	bl	80062c8 <lwip_htons>
 800b534:	4603      	mov	r3, r0
 800b536:	b2db      	uxtb	r3, r3
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d010      	beq.n	800b562 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b540:	e00a      	b.n	800b558 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b546:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7fd fd8d 	bl	8009072 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1f0      	bne.n	800b542 <tcp_receive+0x7ea>
 800b560:	e0c7      	b.n	800b6f2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b566:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b568:	e051      	b.n	800b60e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	899b      	ldrh	r3, [r3, #12]
 800b570:	b29b      	uxth	r3, r3
 800b572:	4618      	mov	r0, r3
 800b574:	f7fa fea8 	bl	80062c8 <lwip_htons>
 800b578:	4603      	mov	r3, r0
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	f003 0301 	and.w	r3, r3, #1
 800b580:	2b00      	cmp	r3, #0
 800b582:	d03c      	beq.n	800b5fe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b584:	4b16      	ldr	r3, [pc, #88]	@ (800b5e0 <tcp_receive+0x888>)
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	899b      	ldrh	r3, [r3, #12]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fa fe9b 	bl	80062c8 <lwip_htons>
 800b592:	4603      	mov	r3, r0
 800b594:	b2db      	uxtb	r3, r3
 800b596:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d12f      	bne.n	800b5fe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b59e:	4b10      	ldr	r3, [pc, #64]	@ (800b5e0 <tcp_receive+0x888>)
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	899b      	ldrh	r3, [r3, #12]
 800b5a4:	b29c      	uxth	r4, r3
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	f7fa fe8e 	bl	80062c8 <lwip_htons>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e0 <tcp_receive+0x888>)
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	4322      	orrs	r2, r4
 800b5b6:	b292      	uxth	r2, r2
 800b5b8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b5ba:	4b09      	ldr	r3, [pc, #36]	@ (800b5e0 <tcp_receive+0x888>)
 800b5bc:	891c      	ldrh	r4, [r3, #8]
 800b5be:	4b08      	ldr	r3, [pc, #32]	@ (800b5e0 <tcp_receive+0x888>)
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	899b      	ldrh	r3, [r3, #12]
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fa fe7e 	bl	80062c8 <lwip_htons>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00d      	beq.n	800b5f4 <tcp_receive+0x89c>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e00c      	b.n	800b5f6 <tcp_receive+0x89e>
 800b5dc:	20007f28 	.word	0x20007f28
 800b5e0:	20007f04 	.word	0x20007f04
 800b5e4:	20007f32 	.word	0x20007f32
 800b5e8:	080133c4 	.word	0x080133c4
 800b5ec:	0801376c 	.word	0x0801376c
 800b5f0:	08013410 	.word	0x08013410
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	4423      	add	r3, r4
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	4b98      	ldr	r3, [pc, #608]	@ (800b85c <tcp_receive+0xb04>)
 800b5fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b600:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b608:	6938      	ldr	r0, [r7, #16]
 800b60a:	f7fd fd32 	bl	8009072 <tcp_seg_free>
            while (next &&
 800b60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00e      	beq.n	800b632 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b614:	4b91      	ldr	r3, [pc, #580]	@ (800b85c <tcp_receive+0xb04>)
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	461a      	mov	r2, r3
 800b61a:	4b91      	ldr	r3, [pc, #580]	@ (800b860 <tcp_receive+0xb08>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	441a      	add	r2, r3
 800b620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b628:	8909      	ldrh	r1, [r1, #8]
 800b62a:	440b      	add	r3, r1
 800b62c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b62e:	2b00      	cmp	r3, #0
 800b630:	da9b      	bge.n	800b56a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d059      	beq.n	800b6ec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b638:	4b88      	ldr	r3, [pc, #544]	@ (800b85c <tcp_receive+0xb04>)
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	461a      	mov	r2, r3
 800b63e:	4b88      	ldr	r3, [pc, #544]	@ (800b860 <tcp_receive+0xb08>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	441a      	add	r2, r3
 800b644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	dd4d      	ble.n	800b6ec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	b29a      	uxth	r2, r3
 800b658:	4b81      	ldr	r3, [pc, #516]	@ (800b860 <tcp_receive+0xb08>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	b29a      	uxth	r2, r3
 800b662:	4b80      	ldr	r3, [pc, #512]	@ (800b864 <tcp_receive+0xb0c>)
 800b664:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b666:	4b7f      	ldr	r3, [pc, #508]	@ (800b864 <tcp_receive+0xb0c>)
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	899b      	ldrh	r3, [r3, #12]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fa fe2a 	bl	80062c8 <lwip_htons>
 800b674:	4603      	mov	r3, r0
 800b676:	b2db      	uxtb	r3, r3
 800b678:	f003 0302 	and.w	r3, r3, #2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d005      	beq.n	800b68c <tcp_receive+0x934>
                inseg.len -= 1;
 800b680:	4b78      	ldr	r3, [pc, #480]	@ (800b864 <tcp_receive+0xb0c>)
 800b682:	891b      	ldrh	r3, [r3, #8]
 800b684:	3b01      	subs	r3, #1
 800b686:	b29a      	uxth	r2, r3
 800b688:	4b76      	ldr	r3, [pc, #472]	@ (800b864 <tcp_receive+0xb0c>)
 800b68a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b68c:	4b75      	ldr	r3, [pc, #468]	@ (800b864 <tcp_receive+0xb0c>)
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	4a74      	ldr	r2, [pc, #464]	@ (800b864 <tcp_receive+0xb0c>)
 800b692:	8912      	ldrh	r2, [r2, #8]
 800b694:	4611      	mov	r1, r2
 800b696:	4618      	mov	r0, r3
 800b698:	f7fc f8e0 	bl	800785c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b69c:	4b71      	ldr	r3, [pc, #452]	@ (800b864 <tcp_receive+0xb0c>)
 800b69e:	891c      	ldrh	r4, [r3, #8]
 800b6a0:	4b70      	ldr	r3, [pc, #448]	@ (800b864 <tcp_receive+0xb0c>)
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	899b      	ldrh	r3, [r3, #12]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fa fe0d 	bl	80062c8 <lwip_htons>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	f003 0303 	and.w	r3, r3, #3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <tcp_receive+0x966>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e000      	b.n	800b6c0 <tcp_receive+0x968>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4423      	add	r3, r4
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	4b65      	ldr	r3, [pc, #404]	@ (800b85c <tcp_receive+0xb04>)
 800b6c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b6c8:	4b64      	ldr	r3, [pc, #400]	@ (800b85c <tcp_receive+0xb04>)
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4b64      	ldr	r3, [pc, #400]	@ (800b860 <tcp_receive+0xb08>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	441a      	add	r2, r3
 800b6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d006      	beq.n	800b6ec <tcp_receive+0x994>
 800b6de:	4b62      	ldr	r3, [pc, #392]	@ (800b868 <tcp_receive+0xb10>)
 800b6e0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b6e4:	4961      	ldr	r1, [pc, #388]	@ (800b86c <tcp_receive+0xb14>)
 800b6e6:	4862      	ldr	r0, [pc, #392]	@ (800b870 <tcp_receive+0xb18>)
 800b6e8:	f005 fbf0 	bl	8010ecc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b6f0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b6f2:	4b5a      	ldr	r3, [pc, #360]	@ (800b85c <tcp_receive+0xb04>)
 800b6f4:	881b      	ldrh	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	4b59      	ldr	r3, [pc, #356]	@ (800b860 <tcp_receive+0xb08>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	441a      	add	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b706:	4b55      	ldr	r3, [pc, #340]	@ (800b85c <tcp_receive+0xb04>)
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d206      	bcs.n	800b71c <tcp_receive+0x9c4>
 800b70e:	4b56      	ldr	r3, [pc, #344]	@ (800b868 <tcp_receive+0xb10>)
 800b710:	f240 6207 	movw	r2, #1543	@ 0x607
 800b714:	4957      	ldr	r1, [pc, #348]	@ (800b874 <tcp_receive+0xb1c>)
 800b716:	4856      	ldr	r0, [pc, #344]	@ (800b870 <tcp_receive+0xb18>)
 800b718:	f005 fbd8 	bl	8010ecc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b720:	4b4e      	ldr	r3, [pc, #312]	@ (800b85c <tcp_receive+0xb04>)
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	b29a      	uxth	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7fc ffbf 	bl	80086b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b732:	4b4c      	ldr	r3, [pc, #304]	@ (800b864 <tcp_receive+0xb0c>)
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	891b      	ldrh	r3, [r3, #8]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d006      	beq.n	800b74a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b73c:	4b49      	ldr	r3, [pc, #292]	@ (800b864 <tcp_receive+0xb0c>)
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	4a4d      	ldr	r2, [pc, #308]	@ (800b878 <tcp_receive+0xb20>)
 800b742:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b744:	4b47      	ldr	r3, [pc, #284]	@ (800b864 <tcp_receive+0xb0c>)
 800b746:	2200      	movs	r2, #0
 800b748:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b74a:	4b46      	ldr	r3, [pc, #280]	@ (800b864 <tcp_receive+0xb0c>)
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	899b      	ldrh	r3, [r3, #12]
 800b750:	b29b      	uxth	r3, r3
 800b752:	4618      	mov	r0, r3
 800b754:	f7fa fdb8 	bl	80062c8 <lwip_htons>
 800b758:	4603      	mov	r3, r0
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 80b8 	beq.w	800b8d6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b766:	4b45      	ldr	r3, [pc, #276]	@ (800b87c <tcp_receive+0xb24>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	f043 0320 	orr.w	r3, r3, #32
 800b76e:	b2da      	uxtb	r2, r3
 800b770:	4b42      	ldr	r3, [pc, #264]	@ (800b87c <tcp_receive+0xb24>)
 800b772:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b774:	e0af      	b.n	800b8d6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b77a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4a36      	ldr	r2, [pc, #216]	@ (800b860 <tcp_receive+0xb08>)
 800b786:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	891b      	ldrh	r3, [r3, #8]
 800b78c:	461c      	mov	r4, r3
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	899b      	ldrh	r3, [r3, #12]
 800b794:	b29b      	uxth	r3, r3
 800b796:	4618      	mov	r0, r3
 800b798:	f7fa fd96 	bl	80062c8 <lwip_htons>
 800b79c:	4603      	mov	r3, r0
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	f003 0303 	and.w	r3, r3, #3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <tcp_receive+0xa54>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e000      	b.n	800b7ae <tcp_receive+0xa56>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	191a      	adds	r2, r3, r4
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7b4:	441a      	add	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7be:	461c      	mov	r4, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	891b      	ldrh	r3, [r3, #8]
 800b7c4:	461d      	mov	r5, r3
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	899b      	ldrh	r3, [r3, #12]
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fa fd7a 	bl	80062c8 <lwip_htons>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	f003 0303 	and.w	r3, r3, #3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <tcp_receive+0xa8c>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e000      	b.n	800b7e6 <tcp_receive+0xa8e>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	442b      	add	r3, r5
 800b7e8:	429c      	cmp	r4, r3
 800b7ea:	d206      	bcs.n	800b7fa <tcp_receive+0xaa2>
 800b7ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b868 <tcp_receive+0xb10>)
 800b7ee:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b7f2:	4923      	ldr	r1, [pc, #140]	@ (800b880 <tcp_receive+0xb28>)
 800b7f4:	481e      	ldr	r0, [pc, #120]	@ (800b870 <tcp_receive+0xb18>)
 800b7f6:	f005 fb69 	bl	8010ecc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	891b      	ldrh	r3, [r3, #8]
 800b7fe:	461c      	mov	r4, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	899b      	ldrh	r3, [r3, #12]
 800b806:	b29b      	uxth	r3, r3
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fa fd5d 	bl	80062c8 <lwip_htons>
 800b80e:	4603      	mov	r3, r0
 800b810:	b2db      	uxtb	r3, r3
 800b812:	f003 0303 	and.w	r3, r3, #3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <tcp_receive+0xac6>
 800b81a:	2301      	movs	r3, #1
 800b81c:	e000      	b.n	800b820 <tcp_receive+0xac8>
 800b81e:	2300      	movs	r3, #0
 800b820:	1919      	adds	r1, r3, r4
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b826:	b28b      	uxth	r3, r1
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7fc ff3d 	bl	80086b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	891b      	ldrh	r3, [r3, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d028      	beq.n	800b892 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b840:	4b0d      	ldr	r3, [pc, #52]	@ (800b878 <tcp_receive+0xb20>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d01d      	beq.n	800b884 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b848:	4b0b      	ldr	r3, [pc, #44]	@ (800b878 <tcp_receive+0xb20>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f7fc fa4a 	bl	8007cec <pbuf_cat>
 800b858:	e018      	b.n	800b88c <tcp_receive+0xb34>
 800b85a:	bf00      	nop
 800b85c:	20007f32 	.word	0x20007f32
 800b860:	20007f28 	.word	0x20007f28
 800b864:	20007f04 	.word	0x20007f04
 800b868:	080133c4 	.word	0x080133c4
 800b86c:	080137a4 	.word	0x080137a4
 800b870:	08013410 	.word	0x08013410
 800b874:	080137e0 	.word	0x080137e0
 800b878:	20007f38 	.word	0x20007f38
 800b87c:	20007f35 	.word	0x20007f35
 800b880:	08013800 	.word	0x08013800
            } else {
              recv_data = cseg->p;
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	4a70      	ldr	r2, [pc, #448]	@ (800ba4c <tcp_receive+0xcf4>)
 800b88a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2200      	movs	r2, #0
 800b890:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	899b      	ldrh	r3, [r3, #12]
 800b898:	b29b      	uxth	r3, r3
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fa fd14 	bl	80062c8 <lwip_htons>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00d      	beq.n	800b8c8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b8ac:	4b68      	ldr	r3, [pc, #416]	@ (800ba50 <tcp_receive+0xcf8>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	f043 0320 	orr.w	r3, r3, #32
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	4b66      	ldr	r3, [pc, #408]	@ (800ba50 <tcp_receive+0xcf8>)
 800b8b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	7d1b      	ldrb	r3, [r3, #20]
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d102      	bne.n	800b8c8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2207      	movs	r2, #7
 800b8c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b8d0:	68b8      	ldr	r0, [r7, #8]
 800b8d2:	f7fd fbce 	bl	8009072 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d008      	beq.n	800b8f0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	685a      	ldr	r2, [r3, #4]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	f43f af43 	beq.w	800b776 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	8b5b      	ldrh	r3, [r3, #26]
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00e      	beq.n	800b91a <tcp_receive+0xbc2>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	8b5b      	ldrh	r3, [r3, #26]
 800b900:	f023 0301 	bic.w	r3, r3, #1
 800b904:	b29a      	uxth	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	835a      	strh	r2, [r3, #26]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	8b5b      	ldrh	r3, [r3, #26]
 800b90e:	f043 0302 	orr.w	r3, r3, #2
 800b912:	b29a      	uxth	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b918:	e187      	b.n	800bc2a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	8b5b      	ldrh	r3, [r3, #26]
 800b91e:	f043 0301 	orr.w	r3, r3, #1
 800b922:	b29a      	uxth	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b928:	e17f      	b.n	800bc2a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d106      	bne.n	800b940 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b932:	4848      	ldr	r0, [pc, #288]	@ (800ba54 <tcp_receive+0xcfc>)
 800b934:	f7fd fbb6 	bl	80090a4 <tcp_seg_copy>
 800b938:	4602      	mov	r2, r0
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b93e:	e16c      	b.n	800bc1a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b940:	2300      	movs	r3, #0
 800b942:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b948:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b94a:	e156      	b.n	800bbfa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	4b41      	ldr	r3, [pc, #260]	@ (800ba58 <tcp_receive+0xd00>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d11d      	bne.n	800b996 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b95a:	4b3e      	ldr	r3, [pc, #248]	@ (800ba54 <tcp_receive+0xcfc>)
 800b95c:	891a      	ldrh	r2, [r3, #8]
 800b95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b960:	891b      	ldrh	r3, [r3, #8]
 800b962:	429a      	cmp	r2, r3
 800b964:	f240 814e 	bls.w	800bc04 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b968:	483a      	ldr	r0, [pc, #232]	@ (800ba54 <tcp_receive+0xcfc>)
 800b96a:	f7fd fb9b 	bl	80090a4 <tcp_seg_copy>
 800b96e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 8148 	beq.w	800bc08 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800b978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d003      	beq.n	800b986 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	e002      	b.n	800b98c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b98c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b98e:	6978      	ldr	r0, [r7, #20]
 800b990:	f7ff f8de 	bl	800ab50 <tcp_oos_insert_segment>
                }
                break;
 800b994:	e138      	b.n	800bc08 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d117      	bne.n	800b9cc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b99c:	4b2e      	ldr	r3, [pc, #184]	@ (800ba58 <tcp_receive+0xd00>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	da57      	bge.n	800ba5c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9ac:	4829      	ldr	r0, [pc, #164]	@ (800ba54 <tcp_receive+0xcfc>)
 800b9ae:	f7fd fb79 	bl	80090a4 <tcp_seg_copy>
 800b9b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 8128 	beq.w	800bc0c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	69ba      	ldr	r2, [r7, #24]
 800b9c0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b9c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b9c4:	69b8      	ldr	r0, [r7, #24]
 800b9c6:	f7ff f8c3 	bl	800ab50 <tcp_oos_insert_segment>
                  }
                  break;
 800b9ca:	e11f      	b.n	800bc0c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b9cc:	4b22      	ldr	r3, [pc, #136]	@ (800ba58 <tcp_receive+0xd00>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	db3e      	blt.n	800ba5c <tcp_receive+0xd04>
 800b9de:	4b1e      	ldr	r3, [pc, #120]	@ (800ba58 <tcp_receive+0xd00>)
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	dc35      	bgt.n	800ba5c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9f0:	4818      	ldr	r0, [pc, #96]	@ (800ba54 <tcp_receive+0xcfc>)
 800b9f2:	f7fd fb57 	bl	80090a4 <tcp_seg_copy>
 800b9f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 8108 	beq.w	800bc10 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ba00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba08:	8912      	ldrh	r2, [r2, #8]
 800ba0a:	441a      	add	r2, r3
 800ba0c:	4b12      	ldr	r3, [pc, #72]	@ (800ba58 <tcp_receive+0xd00>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	dd12      	ble.n	800ba3c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ba16:	4b10      	ldr	r3, [pc, #64]	@ (800ba58 <tcp_receive+0xd00>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ba2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2e:	685a      	ldr	r2, [r3, #4]
 800ba30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba32:	891b      	ldrh	r3, [r3, #8]
 800ba34:	4619      	mov	r1, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	f7fb ff10 	bl	800785c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3e:	69fa      	ldr	r2, [r7, #28]
 800ba40:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ba42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba44:	69f8      	ldr	r0, [r7, #28]
 800ba46:	f7ff f883 	bl	800ab50 <tcp_oos_insert_segment>
                  }
                  break;
 800ba4a:	e0e1      	b.n	800bc10 <tcp_receive+0xeb8>
 800ba4c:	20007f38 	.word	0x20007f38
 800ba50:	20007f35 	.word	0x20007f35
 800ba54:	20007f04 	.word	0x20007f04
 800ba58:	20007f28 	.word	0x20007f28
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ba60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f040 80c5 	bne.w	800bbf4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ba6a:	4b7f      	ldr	r3, [pc, #508]	@ (800bc68 <tcp_receive+0xf10>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f340 80bc 	ble.w	800bbf4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	899b      	ldrh	r3, [r3, #12]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fa fc1f 	bl	80062c8 <lwip_htons>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f040 80be 	bne.w	800bc14 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ba98:	4874      	ldr	r0, [pc, #464]	@ (800bc6c <tcp_receive+0xf14>)
 800ba9a:	f7fd fb03 	bl	80090a4 <tcp_seg_copy>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800baa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 80b5 	beq.w	800bc18 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800baae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bab6:	8912      	ldrh	r2, [r2, #8]
 800bab8:	441a      	add	r2, r3
 800baba:	4b6b      	ldr	r3, [pc, #428]	@ (800bc68 <tcp_receive+0xf10>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	dd12      	ble.n	800baea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bac4:	4b68      	ldr	r3, [pc, #416]	@ (800bc68 <tcp_receive+0xf10>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	b29a      	uxth	r2, r3
 800baca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae0:	891b      	ldrh	r3, [r3, #8]
 800bae2:	4619      	mov	r1, r3
 800bae4:	4610      	mov	r0, r2
 800bae6:	f7fb feb9 	bl	800785c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800baea:	4b61      	ldr	r3, [pc, #388]	@ (800bc70 <tcp_receive+0xf18>)
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	4b5d      	ldr	r3, [pc, #372]	@ (800bc68 <tcp_receive+0xf10>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	441a      	add	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafa:	6879      	ldr	r1, [r7, #4]
 800bafc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bafe:	440b      	add	r3, r1
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f340 8088 	ble.w	800bc18 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	899b      	ldrh	r3, [r3, #12]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fa fbd8 	bl	80062c8 <lwip_htons>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d021      	beq.n	800bb68 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	899b      	ldrh	r3, [r3, #12]
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	b21b      	sxth	r3, r3
 800bb30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bb34:	b21c      	sxth	r4, r3
 800bb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	899b      	ldrh	r3, [r3, #12]
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fa fbc1 	bl	80062c8 <lwip_htons>
 800bb46:	4603      	mov	r3, r0
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fa fbb9 	bl	80062c8 <lwip_htons>
 800bb56:	4603      	mov	r3, r0
 800bb58:	b21b      	sxth	r3, r3
 800bb5a:	4323      	orrs	r3, r4
 800bb5c:	b21a      	sxth	r2, r3
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	b292      	uxth	r2, r2
 800bb66:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb72:	4413      	add	r3, r2
 800bb74:	b299      	uxth	r1, r3
 800bb76:	4b3c      	ldr	r3, [pc, #240]	@ (800bc68 <tcp_receive+0xf10>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	1a8a      	subs	r2, r1, r2
 800bb82:	b292      	uxth	r2, r2
 800bb84:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	891b      	ldrh	r3, [r3, #8]
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7fb fe61 	bl	800785c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	891c      	ldrh	r4, [r3, #8]
 800bba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	899b      	ldrh	r3, [r3, #12]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fa fb8c 	bl	80062c8 <lwip_htons>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 0303 	and.w	r3, r3, #3
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <tcp_receive+0xe68>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e000      	b.n	800bbc2 <tcp_receive+0xe6a>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	4423      	add	r3, r4
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	4b2a      	ldr	r3, [pc, #168]	@ (800bc70 <tcp_receive+0xf18>)
 800bbc8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbca:	4b29      	ldr	r3, [pc, #164]	@ (800bc70 <tcp_receive+0xf18>)
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	4b25      	ldr	r3, [pc, #148]	@ (800bc68 <tcp_receive+0xf10>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	441a      	add	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbda:	6879      	ldr	r1, [r7, #4]
 800bbdc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bbde:	440b      	add	r3, r1
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d019      	beq.n	800bc18 <tcp_receive+0xec0>
 800bbe4:	4b23      	ldr	r3, [pc, #140]	@ (800bc74 <tcp_receive+0xf1c>)
 800bbe6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bbea:	4923      	ldr	r1, [pc, #140]	@ (800bc78 <tcp_receive+0xf20>)
 800bbec:	4823      	ldr	r0, [pc, #140]	@ (800bc7c <tcp_receive+0xf24>)
 800bbee:	f005 f96d 	bl	8010ecc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bbf2:	e011      	b.n	800bc18 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f47f aea5 	bne.w	800b94c <tcp_receive+0xbf4>
 800bc02:	e00a      	b.n	800bc1a <tcp_receive+0xec2>
                break;
 800bc04:	bf00      	nop
 800bc06:	e008      	b.n	800bc1a <tcp_receive+0xec2>
                break;
 800bc08:	bf00      	nop
 800bc0a:	e006      	b.n	800bc1a <tcp_receive+0xec2>
                  break;
 800bc0c:	bf00      	nop
 800bc0e:	e004      	b.n	800bc1a <tcp_receive+0xec2>
                  break;
 800bc10:	bf00      	nop
 800bc12:	e002      	b.n	800bc1a <tcp_receive+0xec2>
                  break;
 800bc14:	bf00      	nop
 800bc16:	e000      	b.n	800bc1a <tcp_receive+0xec2>
                break;
 800bc18:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f001 fa44 	bl	800d0a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bc20:	e003      	b.n	800bc2a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 fa40 	bl	800d0a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc28:	e01a      	b.n	800bc60 <tcp_receive+0xf08>
 800bc2a:	e019      	b.n	800bc60 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bc2c:	4b0e      	ldr	r3, [pc, #56]	@ (800bc68 <tcp_receive+0xf10>)
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	db0a      	blt.n	800bc50 <tcp_receive+0xef8>
 800bc3a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc68 <tcp_receive+0xf10>)
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc46:	440b      	add	r3, r1
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dd07      	ble.n	800bc60 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	8b5b      	ldrh	r3, [r3, #26]
 800bc54:	f043 0302 	orr.w	r3, r3, #2
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bc5e:	e7ff      	b.n	800bc60 <tcp_receive+0xf08>
 800bc60:	bf00      	nop
 800bc62:	3750      	adds	r7, #80	@ 0x50
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bdb0      	pop	{r4, r5, r7, pc}
 800bc68:	20007f28 	.word	0x20007f28
 800bc6c:	20007f04 	.word	0x20007f04
 800bc70:	20007f32 	.word	0x20007f32
 800bc74:	080133c4 	.word	0x080133c4
 800bc78:	0801376c 	.word	0x0801376c
 800bc7c:	08013410 	.word	0x08013410

0800bc80 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bc86:	4b15      	ldr	r3, [pc, #84]	@ (800bcdc <tcp_get_next_optbyte+0x5c>)
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	1c5a      	adds	r2, r3, #1
 800bc8c:	b291      	uxth	r1, r2
 800bc8e:	4a13      	ldr	r2, [pc, #76]	@ (800bcdc <tcp_get_next_optbyte+0x5c>)
 800bc90:	8011      	strh	r1, [r2, #0]
 800bc92:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bc94:	4b12      	ldr	r3, [pc, #72]	@ (800bce0 <tcp_get_next_optbyte+0x60>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d004      	beq.n	800bca6 <tcp_get_next_optbyte+0x26>
 800bc9c:	4b11      	ldr	r3, [pc, #68]	@ (800bce4 <tcp_get_next_optbyte+0x64>)
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	88fa      	ldrh	r2, [r7, #6]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d208      	bcs.n	800bcb8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bca6:	4b10      	ldr	r3, [pc, #64]	@ (800bce8 <tcp_get_next_optbyte+0x68>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3314      	adds	r3, #20
 800bcac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bcae:	88fb      	ldrh	r3, [r7, #6]
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	e00b      	b.n	800bcd0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bcb8:	88fb      	ldrh	r3, [r7, #6]
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	4b09      	ldr	r3, [pc, #36]	@ (800bce4 <tcp_get_next_optbyte+0x64>)
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	1ad3      	subs	r3, r2, r3
 800bcc4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bcc6:	4b06      	ldr	r3, [pc, #24]	@ (800bce0 <tcp_get_next_optbyte+0x60>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	797b      	ldrb	r3, [r7, #5]
 800bccc:	4413      	add	r3, r2
 800bcce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	20007f24 	.word	0x20007f24
 800bce0:	20007f20 	.word	0x20007f20
 800bce4:	20007f1e 	.word	0x20007f1e
 800bce8:	20007f18 	.word	0x20007f18

0800bcec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d106      	bne.n	800bd08 <tcp_parseopt+0x1c>
 800bcfa:	4b32      	ldr	r3, [pc, #200]	@ (800bdc4 <tcp_parseopt+0xd8>)
 800bcfc:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bd00:	4931      	ldr	r1, [pc, #196]	@ (800bdc8 <tcp_parseopt+0xdc>)
 800bd02:	4832      	ldr	r0, [pc, #200]	@ (800bdcc <tcp_parseopt+0xe0>)
 800bd04:	f005 f8e2 	bl	8010ecc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bd08:	4b31      	ldr	r3, [pc, #196]	@ (800bdd0 <tcp_parseopt+0xe4>)
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d056      	beq.n	800bdbe <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bd10:	4b30      	ldr	r3, [pc, #192]	@ (800bdd4 <tcp_parseopt+0xe8>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	801a      	strh	r2, [r3, #0]
 800bd16:	e046      	b.n	800bda6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800bd18:	f7ff ffb2 	bl	800bc80 <tcp_get_next_optbyte>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d006      	beq.n	800bd34 <tcp_parseopt+0x48>
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	dc2a      	bgt.n	800bd80 <tcp_parseopt+0x94>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d042      	beq.n	800bdb4 <tcp_parseopt+0xc8>
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d038      	beq.n	800bda4 <tcp_parseopt+0xb8>
 800bd32:	e025      	b.n	800bd80 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bd34:	f7ff ffa4 	bl	800bc80 <tcp_get_next_optbyte>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d13c      	bne.n	800bdb8 <tcp_parseopt+0xcc>
 800bd3e:	4b25      	ldr	r3, [pc, #148]	@ (800bdd4 <tcp_parseopt+0xe8>)
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	4a22      	ldr	r2, [pc, #136]	@ (800bdd0 <tcp_parseopt+0xe4>)
 800bd46:	8812      	ldrh	r2, [r2, #0]
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	da35      	bge.n	800bdb8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bd4c:	f7ff ff98 	bl	800bc80 <tcp_get_next_optbyte>
 800bd50:	4603      	mov	r3, r0
 800bd52:	021b      	lsls	r3, r3, #8
 800bd54:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bd56:	f7ff ff93 	bl	800bc80 <tcp_get_next_optbyte>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	89bb      	ldrh	r3, [r7, #12]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bd64:	89bb      	ldrh	r3, [r7, #12]
 800bd66:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800bd6a:	d804      	bhi.n	800bd76 <tcp_parseopt+0x8a>
 800bd6c:	89bb      	ldrh	r3, [r7, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <tcp_parseopt+0x8a>
 800bd72:	89ba      	ldrh	r2, [r7, #12]
 800bd74:	e001      	b.n	800bd7a <tcp_parseopt+0x8e>
 800bd76:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800bd7e:	e012      	b.n	800bda6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bd80:	f7ff ff7e 	bl	800bc80 <tcp_get_next_optbyte>
 800bd84:	4603      	mov	r3, r0
 800bd86:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bd88:	7afb      	ldrb	r3, [r7, #11]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d916      	bls.n	800bdbc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bd8e:	7afb      	ldrb	r3, [r7, #11]
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	4b10      	ldr	r3, [pc, #64]	@ (800bdd4 <tcp_parseopt+0xe8>)
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	4413      	add	r3, r2
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	3b02      	subs	r3, #2
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd4 <tcp_parseopt+0xe8>)
 800bda0:	801a      	strh	r2, [r3, #0]
 800bda2:	e000      	b.n	800bda6 <tcp_parseopt+0xba>
          break;
 800bda4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bda6:	4b0b      	ldr	r3, [pc, #44]	@ (800bdd4 <tcp_parseopt+0xe8>)
 800bda8:	881a      	ldrh	r2, [r3, #0]
 800bdaa:	4b09      	ldr	r3, [pc, #36]	@ (800bdd0 <tcp_parseopt+0xe4>)
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d3b2      	bcc.n	800bd18 <tcp_parseopt+0x2c>
 800bdb2:	e004      	b.n	800bdbe <tcp_parseopt+0xd2>
          return;
 800bdb4:	bf00      	nop
 800bdb6:	e002      	b.n	800bdbe <tcp_parseopt+0xd2>
            return;
 800bdb8:	bf00      	nop
 800bdba:	e000      	b.n	800bdbe <tcp_parseopt+0xd2>
            return;
 800bdbc:	bf00      	nop
      }
    }
  }
}
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	080133c4 	.word	0x080133c4
 800bdc8:	08013828 	.word	0x08013828
 800bdcc:	08013410 	.word	0x08013410
 800bdd0:	20007f1c 	.word	0x20007f1c
 800bdd4:	20007f24 	.word	0x20007f24

0800bdd8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bddc:	4b05      	ldr	r3, [pc, #20]	@ (800bdf4 <tcp_trigger_input_pcb_close+0x1c>)
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	f043 0310 	orr.w	r3, r3, #16
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	4b03      	ldr	r3, [pc, #12]	@ (800bdf4 <tcp_trigger_input_pcb_close+0x1c>)
 800bde8:	701a      	strb	r2, [r3, #0]
}
 800bdea:	bf00      	nop
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	20007f35 	.word	0x20007f35

0800bdf8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <tcp_route+0x28>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	7a1b      	ldrb	r3, [r3, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d006      	beq.n	800be20 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	7a1b      	ldrb	r3, [r3, #8]
 800be16:	4618      	mov	r0, r3
 800be18:	f7fb fb46 	bl	80074a8 <netif_get_by_index>
 800be1c:	4603      	mov	r3, r0
 800be1e:	e003      	b.n	800be28 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f003 fc0f 	bl	800f644 <ip4_route>
 800be26:	4603      	mov	r3, r0
  }
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800be30:	b590      	push	{r4, r7, lr}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	4613      	mov	r3, r2
 800be3e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d105      	bne.n	800be52 <tcp_create_segment+0x22>
 800be46:	4b45      	ldr	r3, [pc, #276]	@ (800bf5c <tcp_create_segment+0x12c>)
 800be48:	22a3      	movs	r2, #163	@ 0xa3
 800be4a:	4945      	ldr	r1, [pc, #276]	@ (800bf60 <tcp_create_segment+0x130>)
 800be4c:	4845      	ldr	r0, [pc, #276]	@ (800bf64 <tcp_create_segment+0x134>)
 800be4e:	f005 f83d 	bl	8010ecc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d105      	bne.n	800be64 <tcp_create_segment+0x34>
 800be58:	4b40      	ldr	r3, [pc, #256]	@ (800bf5c <tcp_create_segment+0x12c>)
 800be5a:	22a4      	movs	r2, #164	@ 0xa4
 800be5c:	4942      	ldr	r1, [pc, #264]	@ (800bf68 <tcp_create_segment+0x138>)
 800be5e:	4841      	ldr	r0, [pc, #260]	@ (800bf64 <tcp_create_segment+0x134>)
 800be60:	f005 f834 	bl	8010ecc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800be72:	2003      	movs	r0, #3
 800be74:	f7fa fe9c 	bl	8006bb0 <memp_malloc>
 800be78:	6138      	str	r0, [r7, #16]
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d104      	bne.n	800be8a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800be80:	68b8      	ldr	r0, [r7, #8]
 800be82:	f7fb fe71 	bl	8007b68 <pbuf_free>
    return NULL;
 800be86:	2300      	movs	r3, #0
 800be88:	e063      	b.n	800bf52 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800be90:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	891a      	ldrh	r2, [r3, #8]
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d205      	bcs.n	800beb6 <tcp_create_segment+0x86>
 800beaa:	4b2c      	ldr	r3, [pc, #176]	@ (800bf5c <tcp_create_segment+0x12c>)
 800beac:	22b0      	movs	r2, #176	@ 0xb0
 800beae:	492f      	ldr	r1, [pc, #188]	@ (800bf6c <tcp_create_segment+0x13c>)
 800beb0:	482c      	ldr	r0, [pc, #176]	@ (800bf64 <tcp_create_segment+0x134>)
 800beb2:	f005 f80b 	bl	8010ecc <iprintf>
  seg->len = p->tot_len - optlen;
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	891a      	ldrh	r2, [r3, #8]
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	2200      	movs	r2, #0
 800beca:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800becc:	2114      	movs	r1, #20
 800bece:	68b8      	ldr	r0, [r7, #8]
 800bed0:	f7fb fdb4 	bl	8007a3c <pbuf_add_header>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d004      	beq.n	800bee4 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800beda:	6938      	ldr	r0, [r7, #16]
 800bedc:	f7fd f8c9 	bl	8009072 <tcp_seg_free>
    return NULL;
 800bee0:	2300      	movs	r3, #0
 800bee2:	e036      	b.n	800bf52 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	8ada      	ldrh	r2, [r3, #22]
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	691c      	ldr	r4, [r3, #16]
 800bef6:	4610      	mov	r0, r2
 800bef8:	f7fa f9e6 	bl	80062c8 <lwip_htons>
 800befc:	4603      	mov	r3, r0
 800befe:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	8b1a      	ldrh	r2, [r3, #24]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	691c      	ldr	r4, [r3, #16]
 800bf08:	4610      	mov	r0, r2
 800bf0a:	f7fa f9dd 	bl	80062c8 <lwip_htons>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	691c      	ldr	r4, [r3, #16]
 800bf16:	6838      	ldr	r0, [r7, #0]
 800bf18:	f7fa f9ec 	bl	80062f4 <lwip_htonl>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bf20:	7dfb      	ldrb	r3, [r7, #23]
 800bf22:	089b      	lsrs	r3, r3, #2
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	3305      	adds	r3, #5
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	031b      	lsls	r3, r3, #12
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	79fb      	ldrb	r3, [r7, #7]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	4313      	orrs	r3, r2
 800bf34:	b29a      	uxth	r2, r3
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	691c      	ldr	r4, [r3, #16]
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	f7fa f9c4 	bl	80062c8 <lwip_htons>
 800bf40:	4603      	mov	r3, r0
 800bf42:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	691b      	ldr	r3, [r3, #16]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	749a      	strb	r2, [r3, #18]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	74da      	strb	r2, [r3, #19]
  return seg;
 800bf50:	693b      	ldr	r3, [r7, #16]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	371c      	adds	r7, #28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd90      	pop	{r4, r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	08013844 	.word	0x08013844
 800bf60:	08013878 	.word	0x08013878
 800bf64:	08013898 	.word	0x08013898
 800bf68:	080138c0 	.word	0x080138c0
 800bf6c:	080138e4 	.word	0x080138e4

0800bf70 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bf70:	b590      	push	{r4, r7, lr}
 800bf72:	b08b      	sub	sp, #44	@ 0x2c
 800bf74:	af02      	add	r7, sp, #8
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	61bb      	str	r3, [r7, #24]
 800bf80:	2300      	movs	r3, #0
 800bf82:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bf84:	2300      	movs	r3, #0
 800bf86:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <tcp_split_unsent_seg+0x2c>
 800bf8e:	4b97      	ldr	r3, [pc, #604]	@ (800c1ec <tcp_split_unsent_seg+0x27c>)
 800bf90:	f240 324b 	movw	r2, #843	@ 0x34b
 800bf94:	4996      	ldr	r1, [pc, #600]	@ (800c1f0 <tcp_split_unsent_seg+0x280>)
 800bf96:	4897      	ldr	r0, [pc, #604]	@ (800c1f4 <tcp_split_unsent_seg+0x284>)
 800bf98:	f004 ff98 	bl	8010ecc <iprintf>

  useg = pcb->unsent;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfa0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bfa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfac:	e119      	b.n	800c1e2 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800bfae:	887b      	ldrh	r3, [r7, #2]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d109      	bne.n	800bfc8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bfb4:	4b8d      	ldr	r3, [pc, #564]	@ (800c1ec <tcp_split_unsent_seg+0x27c>)
 800bfb6:	f240 3253 	movw	r2, #851	@ 0x353
 800bfba:	498f      	ldr	r1, [pc, #572]	@ (800c1f8 <tcp_split_unsent_seg+0x288>)
 800bfbc:	488d      	ldr	r0, [pc, #564]	@ (800c1f4 <tcp_split_unsent_seg+0x284>)
 800bfbe:	f004 ff85 	bl	8010ecc <iprintf>
    return ERR_VAL;
 800bfc2:	f06f 0305 	mvn.w	r3, #5
 800bfc6:	e10c      	b.n	800c1e2 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	891b      	ldrh	r3, [r3, #8]
 800bfcc:	887a      	ldrh	r2, [r7, #2]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d301      	bcc.n	800bfd6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e105      	b.n	800c1e2 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bfda:	887a      	ldrh	r2, [r7, #2]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d906      	bls.n	800bfee <tcp_split_unsent_seg+0x7e>
 800bfe0:	4b82      	ldr	r3, [pc, #520]	@ (800c1ec <tcp_split_unsent_seg+0x27c>)
 800bfe2:	f240 325b 	movw	r2, #859	@ 0x35b
 800bfe6:	4985      	ldr	r1, [pc, #532]	@ (800c1fc <tcp_split_unsent_seg+0x28c>)
 800bfe8:	4882      	ldr	r0, [pc, #520]	@ (800c1f4 <tcp_split_unsent_seg+0x284>)
 800bfea:	f004 ff6f 	bl	8010ecc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	891b      	ldrh	r3, [r3, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <tcp_split_unsent_seg+0x94>
 800bff6:	4b7d      	ldr	r3, [pc, #500]	@ (800c1ec <tcp_split_unsent_seg+0x27c>)
 800bff8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800bffc:	4980      	ldr	r1, [pc, #512]	@ (800c200 <tcp_split_unsent_seg+0x290>)
 800bffe:	487d      	ldr	r0, [pc, #500]	@ (800c1f4 <tcp_split_unsent_seg+0x284>)
 800c000:	f004 ff64 	bl	8010ecc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	7b1b      	ldrb	r3, [r3, #12]
 800c008:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c00a:	7bfb      	ldrb	r3, [r7, #15]
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	f003 0304 	and.w	r3, r3, #4
 800c014:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	891a      	ldrh	r2, [r3, #8]
 800c01a:	887b      	ldrh	r3, [r7, #2]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	b29a      	uxth	r2, r3
 800c024:	89bb      	ldrh	r3, [r7, #12]
 800c026:	4413      	add	r3, r2
 800c028:	b29b      	uxth	r3, r3
 800c02a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c02e:	4619      	mov	r1, r3
 800c030:	2036      	movs	r0, #54	@ 0x36
 800c032:	f7fb fab5 	bl	80075a0 <pbuf_alloc>
 800c036:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 80ba 	beq.w	800c1b4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	891a      	ldrh	r2, [r3, #8]
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	891b      	ldrh	r3, [r3, #8]
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	4413      	add	r3, r2
 800c052:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	6858      	ldr	r0, [r3, #4]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	18d1      	adds	r1, r2, r3
 800c060:	897b      	ldrh	r3, [r7, #10]
 800c062:	89ba      	ldrh	r2, [r7, #12]
 800c064:	f7fb ff7a 	bl	8007f5c <pbuf_copy_partial>
 800c068:	4603      	mov	r3, r0
 800c06a:	461a      	mov	r2, r3
 800c06c:	89bb      	ldrh	r3, [r7, #12]
 800c06e:	4293      	cmp	r3, r2
 800c070:	f040 80a2 	bne.w	800c1b8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	899b      	ldrh	r3, [r3, #12]
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fa f923 	bl	80062c8 <lwip_htons>
 800c082:	4603      	mov	r3, r0
 800c084:	b2db      	uxtb	r3, r3
 800c086:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c08a:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c08c:	2300      	movs	r3, #0
 800c08e:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800c090:	7ffb      	ldrb	r3, [r7, #31]
 800c092:	f003 0308 	and.w	r3, r3, #8
 800c096:	2b00      	cmp	r3, #0
 800c098:	d007      	beq.n	800c0aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c09a:	7ffb      	ldrb	r3, [r7, #31]
 800c09c:	f023 0308 	bic.w	r3, r3, #8
 800c0a0:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800c0a2:	7fbb      	ldrb	r3, [r7, #30]
 800c0a4:	f043 0308 	orr.w	r3, r3, #8
 800c0a8:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800c0aa:	7ffb      	ldrb	r3, [r7, #31]
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d007      	beq.n	800c0c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c0b4:	7ffb      	ldrb	r3, [r7, #31]
 800c0b6:	f023 0301 	bic.w	r3, r3, #1
 800c0ba:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800c0bc:	7fbb      	ldrb	r3, [r7, #30]
 800c0be:	f043 0301 	orr.w	r3, r3, #1
 800c0c2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fa f912 	bl	80062f4 <lwip_htonl>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	887b      	ldrh	r3, [r7, #2]
 800c0d4:	18d1      	adds	r1, r2, r3
 800c0d6:	7fba      	ldrb	r2, [r7, #30]
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	6939      	ldr	r1, [r7, #16]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f7ff fea5 	bl	800be30 <tcp_create_segment>
 800c0e6:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d066      	beq.n	800c1bc <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fb fdc0 	bl	8007c78 <pbuf_clen>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c102:	1a9b      	subs	r3, r3, r2
 800c104:	b29a      	uxth	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	6858      	ldr	r0, [r3, #4]
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	891a      	ldrh	r2, [r3, #8]
 800c116:	89bb      	ldrh	r3, [r7, #12]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	4619      	mov	r1, r3
 800c11e:	f7fb fb9d 	bl	800785c <pbuf_realloc>
  useg->len -= remainder;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	891a      	ldrh	r2, [r3, #8]
 800c126:	89bb      	ldrh	r3, [r7, #12]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	899b      	ldrh	r3, [r3, #12]
 800c136:	b29c      	uxth	r4, r3
 800c138:	7ffb      	ldrb	r3, [r7, #31]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fa f8c3 	bl	80062c8 <lwip_htons>
 800c142:	4603      	mov	r3, r0
 800c144:	461a      	mov	r2, r3
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	4322      	orrs	r2, r4
 800c14c:	b292      	uxth	r2, r2
 800c14e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2200      	movs	r2, #0
 800c154:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fb fd8c 	bl	8007c78 <pbuf_clen>
 800c160:	4603      	mov	r3, r0
 800c162:	461a      	mov	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c16a:	4413      	add	r3, r2
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fb fd7d 	bl	8007c78 <pbuf_clen>
 800c17e:	4603      	mov	r3, r0
 800c180:	461a      	mov	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c188:	4413      	add	r3, r2
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d103      	bne.n	800c1b0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	e016      	b.n	800c1e2 <tcp_split_unsent_seg+0x272>
    goto memerr;
 800c1b4:	bf00      	nop
 800c1b6:	e002      	b.n	800c1be <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800c1b8:	bf00      	nop
 800c1ba:	e000      	b.n	800c1be <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800c1bc:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d006      	beq.n	800c1d2 <tcp_split_unsent_seg+0x262>
 800c1c4:	4b09      	ldr	r3, [pc, #36]	@ (800c1ec <tcp_split_unsent_seg+0x27c>)
 800c1c6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c1ca:	490e      	ldr	r1, [pc, #56]	@ (800c204 <tcp_split_unsent_seg+0x294>)
 800c1cc:	4809      	ldr	r0, [pc, #36]	@ (800c1f4 <tcp_split_unsent_seg+0x284>)
 800c1ce:	f004 fe7d 	bl	8010ecc <iprintf>
  if (p != NULL) {
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800c1d8:	6938      	ldr	r0, [r7, #16]
 800c1da:	f7fb fcc5 	bl	8007b68 <pbuf_free>
  }

  return ERR_MEM;
 800c1de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3724      	adds	r7, #36	@ 0x24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd90      	pop	{r4, r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	08013844 	.word	0x08013844
 800c1f0:	08013c34 	.word	0x08013c34
 800c1f4:	08013898 	.word	0x08013898
 800c1f8:	08013c58 	.word	0x08013c58
 800c1fc:	08013c7c 	.word	0x08013c7c
 800c200:	08013c8c 	.word	0x08013c8c
 800c204:	08013c9c 	.word	0x08013c9c

0800c208 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c208:	b590      	push	{r4, r7, lr}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <tcp_send_fin+0x1c>
 800c216:	4b21      	ldr	r3, [pc, #132]	@ (800c29c <tcp_send_fin+0x94>)
 800c218:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c21c:	4920      	ldr	r1, [pc, #128]	@ (800c2a0 <tcp_send_fin+0x98>)
 800c21e:	4821      	ldr	r0, [pc, #132]	@ (800c2a4 <tcp_send_fin+0x9c>)
 800c220:	f004 fe54 	bl	8010ecc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d02e      	beq.n	800c28a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	e002      	b.n	800c23a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1f8      	bne.n	800c234 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	899b      	ldrh	r3, [r3, #12]
 800c248:	b29b      	uxth	r3, r3
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fa f83c 	bl	80062c8 <lwip_htons>
 800c250:	4603      	mov	r3, r0
 800c252:	b2db      	uxtb	r3, r3
 800c254:	f003 0307 	and.w	r3, r3, #7
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d116      	bne.n	800c28a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	899b      	ldrh	r3, [r3, #12]
 800c262:	b29c      	uxth	r4, r3
 800c264:	2001      	movs	r0, #1
 800c266:	f7fa f82f 	bl	80062c8 <lwip_htons>
 800c26a:	4603      	mov	r3, r0
 800c26c:	461a      	mov	r2, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	4322      	orrs	r2, r4
 800c274:	b292      	uxth	r2, r2
 800c276:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	8b5b      	ldrh	r3, [r3, #26]
 800c27c:	f043 0320 	orr.w	r3, r3, #32
 800c280:	b29a      	uxth	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	e004      	b.n	800c294 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c28a:	2101      	movs	r1, #1
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f80b 	bl	800c2a8 <tcp_enqueue_flags>
 800c292:	4603      	mov	r3, r0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd90      	pop	{r4, r7, pc}
 800c29c:	08013844 	.word	0x08013844
 800c2a0:	08013ca8 	.word	0x08013ca8
 800c2a4:	08013898 	.word	0x08013898

0800c2a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af02      	add	r7, sp, #8
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	f003 0303 	and.w	r3, r3, #3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d106      	bne.n	800c2d4 <tcp_enqueue_flags+0x2c>
 800c2c6:	4b67      	ldr	r3, [pc, #412]	@ (800c464 <tcp_enqueue_flags+0x1bc>)
 800c2c8:	f240 4211 	movw	r2, #1041	@ 0x411
 800c2cc:	4966      	ldr	r1, [pc, #408]	@ (800c468 <tcp_enqueue_flags+0x1c0>)
 800c2ce:	4867      	ldr	r0, [pc, #412]	@ (800c46c <tcp_enqueue_flags+0x1c4>)
 800c2d0:	f004 fdfc 	bl	8010ecc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d106      	bne.n	800c2e8 <tcp_enqueue_flags+0x40>
 800c2da:	4b62      	ldr	r3, [pc, #392]	@ (800c464 <tcp_enqueue_flags+0x1bc>)
 800c2dc:	f240 4213 	movw	r2, #1043	@ 0x413
 800c2e0:	4963      	ldr	r1, [pc, #396]	@ (800c470 <tcp_enqueue_flags+0x1c8>)
 800c2e2:	4862      	ldr	r0, [pc, #392]	@ (800c46c <tcp_enqueue_flags+0x1c4>)
 800c2e4:	f004 fdf2 	bl	8010ecc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	f003 0302 	and.w	r3, r3, #2
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	f003 0304 	and.w	r3, r3, #4
 800c300:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c302:	7dbb      	ldrb	r3, [r7, #22]
 800c304:	b29b      	uxth	r3, r3
 800c306:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c30a:	4619      	mov	r1, r3
 800c30c:	2036      	movs	r0, #54	@ 0x36
 800c30e:	f7fb f947 	bl	80075a0 <pbuf_alloc>
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d109      	bne.n	800c32e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	8b5b      	ldrh	r3, [r3, #26]
 800c31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c322:	b29a      	uxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c32c:	e095      	b.n	800c45a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	895a      	ldrh	r2, [r3, #10]
 800c332:	7dbb      	ldrb	r3, [r7, #22]
 800c334:	b29b      	uxth	r3, r3
 800c336:	429a      	cmp	r2, r3
 800c338:	d206      	bcs.n	800c348 <tcp_enqueue_flags+0xa0>
 800c33a:	4b4a      	ldr	r3, [pc, #296]	@ (800c464 <tcp_enqueue_flags+0x1bc>)
 800c33c:	f240 4239 	movw	r2, #1081	@ 0x439
 800c340:	494c      	ldr	r1, [pc, #304]	@ (800c474 <tcp_enqueue_flags+0x1cc>)
 800c342:	484a      	ldr	r0, [pc, #296]	@ (800c46c <tcp_enqueue_flags+0x1c4>)
 800c344:	f004 fdc2 	bl	8010ecc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c34c:	78fa      	ldrb	r2, [r7, #3]
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	460b      	mov	r3, r1
 800c354:	68f9      	ldr	r1, [r7, #12]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff fd6a 	bl	800be30 <tcp_create_segment>
 800c35c:	60b8      	str	r0, [r7, #8]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d109      	bne.n	800c378 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	8b5b      	ldrh	r3, [r3, #26]
 800c368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c372:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c376:	e070      	b.n	800c45a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	f003 0303 	and.w	r3, r3, #3
 800c380:	2b00      	cmp	r3, #0
 800c382:	d006      	beq.n	800c392 <tcp_enqueue_flags+0xea>
 800c384:	4b37      	ldr	r3, [pc, #220]	@ (800c464 <tcp_enqueue_flags+0x1bc>)
 800c386:	f240 4242 	movw	r2, #1090	@ 0x442
 800c38a:	493b      	ldr	r1, [pc, #236]	@ (800c478 <tcp_enqueue_flags+0x1d0>)
 800c38c:	4837      	ldr	r0, [pc, #220]	@ (800c46c <tcp_enqueue_flags+0x1c4>)
 800c38e:	f004 fd9d 	bl	8010ecc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	891b      	ldrh	r3, [r3, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d006      	beq.n	800c3a8 <tcp_enqueue_flags+0x100>
 800c39a:	4b32      	ldr	r3, [pc, #200]	@ (800c464 <tcp_enqueue_flags+0x1bc>)
 800c39c:	f240 4243 	movw	r2, #1091	@ 0x443
 800c3a0:	4936      	ldr	r1, [pc, #216]	@ (800c47c <tcp_enqueue_flags+0x1d4>)
 800c3a2:	4832      	ldr	r0, [pc, #200]	@ (800c46c <tcp_enqueue_flags+0x1c4>)
 800c3a4:	f004 fd92 	bl	8010ecc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d103      	bne.n	800c3b8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c3b6:	e00d      	b.n	800c3d4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3bc:	613b      	str	r3, [r7, #16]
 800c3be:	e002      	b.n	800c3c6 <tcp_enqueue_flags+0x11e>
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	613b      	str	r3, [r7, #16]
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f8      	bne.n	800c3c0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c3dc:	78fb      	ldrb	r3, [r7, #3]
 800c3de:	f003 0302 	and.w	r3, r3, #2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d104      	bne.n	800c3f0 <tcp_enqueue_flags+0x148>
 800c3e6:	78fb      	ldrb	r3, [r7, #3]
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3f4:	1c5a      	adds	r2, r3, #1
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b00      	cmp	r3, #0
 800c402:	d006      	beq.n	800c412 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	8b5b      	ldrh	r3, [r3, #26]
 800c408:	f043 0320 	orr.w	r3, r3, #32
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	f7fb fc2e 	bl	8007c78 <pbuf_clen>
 800c41c:	4603      	mov	r3, r0
 800c41e:	461a      	mov	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c426:	4413      	add	r3, r2
 800c428:	b29a      	uxth	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00e      	beq.n	800c458 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <tcp_enqueue_flags+0x1b0>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <tcp_enqueue_flags+0x1b0>
 800c44a:	4b06      	ldr	r3, [pc, #24]	@ (800c464 <tcp_enqueue_flags+0x1bc>)
 800c44c:	f240 4265 	movw	r2, #1125	@ 0x465
 800c450:	490b      	ldr	r1, [pc, #44]	@ (800c480 <tcp_enqueue_flags+0x1d8>)
 800c452:	4806      	ldr	r0, [pc, #24]	@ (800c46c <tcp_enqueue_flags+0x1c4>)
 800c454:	f004 fd3a 	bl	8010ecc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	08013844 	.word	0x08013844
 800c468:	08013cc4 	.word	0x08013cc4
 800c46c:	08013898 	.word	0x08013898
 800c470:	08013d1c 	.word	0x08013d1c
 800c474:	08013d3c 	.word	0x08013d3c
 800c478:	08013d78 	.word	0x08013d78
 800c47c:	08013d90 	.word	0x08013d90
 800c480:	08013dbc 	.word	0x08013dbc

0800c484 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c484:	b5b0      	push	{r4, r5, r7, lr}
 800c486:	b08a      	sub	sp, #40	@ 0x28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d106      	bne.n	800c4a0 <tcp_output+0x1c>
 800c492:	4b8a      	ldr	r3, [pc, #552]	@ (800c6bc <tcp_output+0x238>)
 800c494:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800c498:	4989      	ldr	r1, [pc, #548]	@ (800c6c0 <tcp_output+0x23c>)
 800c49a:	488a      	ldr	r0, [pc, #552]	@ (800c6c4 <tcp_output+0x240>)
 800c49c:	f004 fd16 	bl	8010ecc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	7d1b      	ldrb	r3, [r3, #20]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d106      	bne.n	800c4b6 <tcp_output+0x32>
 800c4a8:	4b84      	ldr	r3, [pc, #528]	@ (800c6bc <tcp_output+0x238>)
 800c4aa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c4ae:	4986      	ldr	r1, [pc, #536]	@ (800c6c8 <tcp_output+0x244>)
 800c4b0:	4884      	ldr	r0, [pc, #528]	@ (800c6c4 <tcp_output+0x240>)
 800c4b2:	f004 fd0b 	bl	8010ecc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c4b6:	4b85      	ldr	r3, [pc, #532]	@ (800c6cc <tcp_output+0x248>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d101      	bne.n	800c4c4 <tcp_output+0x40>
    return ERR_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e1d1      	b.n	800c868 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	bf28      	it	cs
 800c4d4:	4613      	movcs	r3, r2
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10b      	bne.n	800c4fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	8b5b      	ldrh	r3, [r3, #26]
 800c4ea:	f003 0302 	and.w	r3, r3, #2
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 81ad 	beq.w	800c84e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fdd7 	bl	800d0a8 <tcp_send_empty_ack>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	e1b4      	b.n	800c868 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c4fe:	6879      	ldr	r1, [r7, #4]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	3304      	adds	r3, #4
 800c504:	461a      	mov	r2, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff fc76 	bl	800bdf8 <tcp_route>
 800c50c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <tcp_output+0x96>
    return ERR_RTE;
 800c514:	f06f 0303 	mvn.w	r3, #3
 800c518:	e1a6      	b.n	800c868 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d003      	beq.n	800c528 <tcp_output+0xa4>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d111      	bne.n	800c54c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <tcp_output+0xb0>
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	3304      	adds	r3, #4
 800c532:	e000      	b.n	800c536 <tcp_output+0xb2>
 800c534:	2300      	movs	r3, #0
 800c536:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <tcp_output+0xc0>
      return ERR_RTE;
 800c53e:	f06f 0303 	mvn.w	r3, #3
 800c542:	e191      	b.n	800c868 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	4618      	mov	r0, r3
 800c554:	f7f9 fece 	bl	80062f4 <lwip_htonl>
 800c558:	4602      	mov	r2, r0
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c562:	8912      	ldrh	r2, [r2, #8]
 800c564:	4413      	add	r3, r2
 800c566:	69ba      	ldr	r2, [r7, #24]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d227      	bcs.n	800c5bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c572:	461a      	mov	r2, r3
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	4293      	cmp	r3, r2
 800c578:	d114      	bne.n	800c5a4 <tcp_output+0x120>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d110      	bne.n	800c5a4 <tcp_output+0x120>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10b      	bne.n	800c5a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	8b5b      	ldrh	r3, [r3, #26]
 800c5a8:	f003 0302 	and.w	r3, r3, #2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f000 8150 	beq.w	800c852 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 fd78 	bl	800d0a8 <tcp_send_empty_ack>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	e155      	b.n	800c868 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 811f 	beq.w	800c810 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800c5d2:	e002      	b.n	800c5da <tcp_output+0x156>
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	623b      	str	r3, [r7, #32]
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1f8      	bne.n	800c5d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c5e2:	e115      	b.n	800c810 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	899b      	ldrh	r3, [r3, #12]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7f9 fe6b 	bl	80062c8 <lwip_htons>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	f003 0304 	and.w	r3, r3, #4
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d006      	beq.n	800c60c <tcp_output+0x188>
 800c5fe:	4b2f      	ldr	r3, [pc, #188]	@ (800c6bc <tcp_output+0x238>)
 800c600:	f240 5236 	movw	r2, #1334	@ 0x536
 800c604:	4932      	ldr	r1, [pc, #200]	@ (800c6d0 <tcp_output+0x24c>)
 800c606:	482f      	ldr	r0, [pc, #188]	@ (800c6c4 <tcp_output+0x240>)
 800c608:	f004 fc60 	bl	8010ecc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01f      	beq.n	800c654 <tcp_output+0x1d0>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	8b5b      	ldrh	r3, [r3, #26]
 800c618:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d119      	bne.n	800c654 <tcp_output+0x1d0>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00b      	beq.n	800c640 <tcp_output+0x1bc>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d110      	bne.n	800c654 <tcp_output+0x1d0>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c636:	891a      	ldrh	r2, [r3, #8]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d209      	bcs.n	800c654 <tcp_output+0x1d0>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <tcp_output+0x1d0>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c650:	2b08      	cmp	r3, #8
 800c652:	d901      	bls.n	800c658 <tcp_output+0x1d4>
 800c654:	2301      	movs	r3, #1
 800c656:	e000      	b.n	800c65a <tcp_output+0x1d6>
 800c658:	2300      	movs	r3, #0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	8b5b      	ldrh	r3, [r3, #26]
 800c662:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 80e7 	beq.w	800c83a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	7d1b      	ldrb	r3, [r3, #20]
 800c670:	2b02      	cmp	r3, #2
 800c672:	d00d      	beq.n	800c690 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	899b      	ldrh	r3, [r3, #12]
 800c67a:	b29c      	uxth	r4, r3
 800c67c:	2010      	movs	r0, #16
 800c67e:	f7f9 fe23 	bl	80062c8 <lwip_htons>
 800c682:	4603      	mov	r3, r0
 800c684:	461a      	mov	r2, r3
 800c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	4322      	orrs	r2, r4
 800c68c:	b292      	uxth	r2, r2
 800c68e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	6879      	ldr	r1, [r7, #4]
 800c694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c696:	f000 f90b 	bl	800c8b0 <tcp_output_segment>
 800c69a:	4603      	mov	r3, r0
 800c69c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d016      	beq.n	800c6d4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	8b5b      	ldrh	r3, [r3, #26]
 800c6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	835a      	strh	r2, [r3, #26]
      return err;
 800c6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6b8:	e0d6      	b.n	800c868 <tcp_output+0x3e4>
 800c6ba:	bf00      	nop
 800c6bc:	08013844 	.word	0x08013844
 800c6c0:	08013de4 	.word	0x08013de4
 800c6c4:	08013898 	.word	0x08013898
 800c6c8:	08013dfc 	.word	0x08013dfc
 800c6cc:	20007f3c 	.word	0x20007f3c
 800c6d0:	08013e24 	.word	0x08013e24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	7d1b      	ldrb	r3, [r3, #20]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d006      	beq.n	800c6f8 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	8b5b      	ldrh	r3, [r3, #26]
 800c6ee:	f023 0303 	bic.w	r3, r3, #3
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7f9 fdf8 	bl	80062f4 <lwip_htonl>
 800c704:	4604      	mov	r4, r0
 800c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c708:	891b      	ldrh	r3, [r3, #8]
 800c70a:	461d      	mov	r5, r3
 800c70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	899b      	ldrh	r3, [r3, #12]
 800c712:	b29b      	uxth	r3, r3
 800c714:	4618      	mov	r0, r3
 800c716:	f7f9 fdd7 	bl	80062c8 <lwip_htons>
 800c71a:	4603      	mov	r3, r0
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	f003 0303 	and.w	r3, r3, #3
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <tcp_output+0x2a6>
 800c726:	2301      	movs	r3, #1
 800c728:	e000      	b.n	800c72c <tcp_output+0x2a8>
 800c72a:	2300      	movs	r3, #0
 800c72c:	442b      	add	r3, r5
 800c72e:	4423      	add	r3, r4
 800c730:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	da02      	bge.n	800c744 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	891b      	ldrh	r3, [r3, #8]
 800c748:	461c      	mov	r4, r3
 800c74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	899b      	ldrh	r3, [r3, #12]
 800c750:	b29b      	uxth	r3, r3
 800c752:	4618      	mov	r0, r3
 800c754:	f7f9 fdb8 	bl	80062c8 <lwip_htons>
 800c758:	4603      	mov	r3, r0
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	f003 0303 	and.w	r3, r3, #3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d001      	beq.n	800c768 <tcp_output+0x2e4>
 800c764:	2301      	movs	r3, #1
 800c766:	e000      	b.n	800c76a <tcp_output+0x2e6>
 800c768:	2300      	movs	r3, #0
 800c76a:	4423      	add	r3, r4
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d049      	beq.n	800c804 <tcp_output+0x380>
      seg->next = NULL;
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d105      	bne.n	800c78a <tcp_output+0x306>
        pcb->unacked = seg;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c782:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	623b      	str	r3, [r7, #32]
 800c788:	e03f      	b.n	800c80a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	f7f9 fdaf 	bl	80062f4 <lwip_htonl>
 800c796:	4604      	mov	r4, r0
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7f9 fda8 	bl	80062f4 <lwip_htonl>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	1ae3      	subs	r3, r4, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	da24      	bge.n	800c7f6 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3370      	adds	r3, #112	@ 0x70
 800c7b0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7b2:	e002      	b.n	800c7ba <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d011      	beq.n	800c7e6 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7f9 fd92 	bl	80062f4 <lwip_htonl>
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7f9 fd8b 	bl	80062f4 <lwip_htonl>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	dbe6      	blt.n	800c7b4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	e009      	b.n	800c80a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c7f6:	6a3b      	ldr	r3, [r7, #32]
 800c7f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7fa:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c7fc:	6a3b      	ldr	r3, [r7, #32]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	623b      	str	r3, [r7, #32]
 800c802:	e002      	b.n	800c80a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c804:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c806:	f7fc fc34 	bl	8009072 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c80e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c812:	2b00      	cmp	r3, #0
 800c814:	d012      	beq.n	800c83c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7f9 fd69 	bl	80062f4 <lwip_htonl>
 800c822:	4602      	mov	r2, r0
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c82c:	8912      	ldrh	r2, [r2, #8]
 800c82e:	4413      	add	r3, r2
  while (seg != NULL &&
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	429a      	cmp	r2, r3
 800c834:	f4bf aed6 	bcs.w	800c5e4 <tcp_output+0x160>
 800c838:	e000      	b.n	800c83c <tcp_output+0x3b8>
      break;
 800c83a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d108      	bne.n	800c856 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800c84c:	e004      	b.n	800c858 <tcp_output+0x3d4>
    goto output_done;
 800c84e:	bf00      	nop
 800c850:	e002      	b.n	800c858 <tcp_output+0x3d4>
    goto output_done;
 800c852:	bf00      	nop
 800c854:	e000      	b.n	800c858 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c856:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	8b5b      	ldrh	r3, [r3, #26]
 800c85c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c860:	b29a      	uxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3728      	adds	r7, #40	@ 0x28
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bdb0      	pop	{r4, r5, r7, pc}

0800c870 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d106      	bne.n	800c88c <tcp_output_segment_busy+0x1c>
 800c87e:	4b09      	ldr	r3, [pc, #36]	@ (800c8a4 <tcp_output_segment_busy+0x34>)
 800c880:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c884:	4908      	ldr	r1, [pc, #32]	@ (800c8a8 <tcp_output_segment_busy+0x38>)
 800c886:	4809      	ldr	r0, [pc, #36]	@ (800c8ac <tcp_output_segment_busy+0x3c>)
 800c888:	f004 fb20 	bl	8010ecc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	7b9b      	ldrb	r3, [r3, #14]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d001      	beq.n	800c89a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c896:	2301      	movs	r3, #1
 800c898:	e000      	b.n	800c89c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	08013844 	.word	0x08013844
 800c8a8:	08013e3c 	.word	0x08013e3c
 800c8ac:	08013898 	.word	0x08013898

0800c8b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c8b0:	b5b0      	push	{r4, r5, r7, lr}
 800c8b2:	b08c      	sub	sp, #48	@ 0x30
 800c8b4:	af04      	add	r7, sp, #16
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d106      	bne.n	800c8d0 <tcp_output_segment+0x20>
 800c8c2:	4b64      	ldr	r3, [pc, #400]	@ (800ca54 <tcp_output_segment+0x1a4>)
 800c8c4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800c8c8:	4963      	ldr	r1, [pc, #396]	@ (800ca58 <tcp_output_segment+0x1a8>)
 800c8ca:	4864      	ldr	r0, [pc, #400]	@ (800ca5c <tcp_output_segment+0x1ac>)
 800c8cc:	f004 fafe 	bl	8010ecc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <tcp_output_segment+0x34>
 800c8d6:	4b5f      	ldr	r3, [pc, #380]	@ (800ca54 <tcp_output_segment+0x1a4>)
 800c8d8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800c8dc:	4960      	ldr	r1, [pc, #384]	@ (800ca60 <tcp_output_segment+0x1b0>)
 800c8de:	485f      	ldr	r0, [pc, #380]	@ (800ca5c <tcp_output_segment+0x1ac>)
 800c8e0:	f004 faf4 	bl	8010ecc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d106      	bne.n	800c8f8 <tcp_output_segment+0x48>
 800c8ea:	4b5a      	ldr	r3, [pc, #360]	@ (800ca54 <tcp_output_segment+0x1a4>)
 800c8ec:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800c8f0:	495c      	ldr	r1, [pc, #368]	@ (800ca64 <tcp_output_segment+0x1b4>)
 800c8f2:	485a      	ldr	r0, [pc, #360]	@ (800ca5c <tcp_output_segment+0x1ac>)
 800c8f4:	f004 faea 	bl	8010ecc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f7ff ffb9 	bl	800c870 <tcp_output_segment_busy>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	e0a1      	b.n	800ca4c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	691c      	ldr	r4, [r3, #16]
 800c910:	4610      	mov	r0, r2
 800c912:	f7f9 fcef 	bl	80062f4 <lwip_htonl>
 800c916:	4603      	mov	r3, r0
 800c918:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	691c      	ldr	r4, [r3, #16]
 800c922:	4610      	mov	r0, r2
 800c924:	f7f9 fcd0 	bl	80062c8 <lwip_htons>
 800c928:	4603      	mov	r3, r0
 800c92a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c934:	441a      	add	r2, r3
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	3314      	adds	r3, #20
 800c940:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	7b1b      	ldrb	r3, [r3, #12]
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d015      	beq.n	800c97a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	3304      	adds	r3, #4
 800c952:	461a      	mov	r2, r3
 800c954:	6879      	ldr	r1, [r7, #4]
 800c956:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800c95a:	f7fc fe81 	bl	8009660 <tcp_eff_send_mss_netif>
 800c95e:	4603      	mov	r3, r0
 800c960:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c962:	8b7b      	ldrh	r3, [r7, #26]
 800c964:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800c968:	4618      	mov	r0, r3
 800c96a:	f7f9 fcc3 	bl	80062f4 <lwip_htonl>
 800c96e:	4602      	mov	r2, r0
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	3304      	adds	r3, #4
 800c978:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c980:	2b00      	cmp	r3, #0
 800c982:	da02      	bge.n	800c98a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2200      	movs	r2, #0
 800c988:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10c      	bne.n	800c9ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c992:	4b35      	ldr	r3, [pc, #212]	@ (800ca68 <tcp_output_segment+0x1b8>)
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7f9 fca7 	bl	80062f4 <lwip_htonl>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	691a      	ldr	r2, [r3, #16]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	8959      	ldrh	r1, [r3, #10]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	8b3a      	ldrh	r2, [r7, #24]
 800c9c6:	1a8a      	subs	r2, r1, r2
 800c9c8:	b292      	uxth	r2, r2
 800c9ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	8919      	ldrh	r1, [r3, #8]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	8b3a      	ldrh	r2, [r7, #24]
 800c9d8:	1a8a      	subs	r2, r1, r2
 800c9da:	b292      	uxth	r2, r2
 800c9dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	6912      	ldr	r2, [r2, #16]
 800c9e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	741a      	strb	r2, [r3, #16]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	691a      	ldr	r2, [r3, #16]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	7b1b      	ldrb	r3, [r3, #12]
 800c9fc:	f003 0301 	and.w	r3, r3, #1
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <tcp_output_segment+0x158>
 800ca04:	2318      	movs	r3, #24
 800ca06:	e000      	b.n	800ca0a <tcp_output_segment+0x15a>
 800ca08:	2314      	movs	r3, #20
 800ca0a:	4413      	add	r3, r2
 800ca0c:	69fa      	ldr	r2, [r7, #28]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d006      	beq.n	800ca20 <tcp_output_segment+0x170>
 800ca12:	4b10      	ldr	r3, [pc, #64]	@ (800ca54 <tcp_output_segment+0x1a4>)
 800ca14:	f240 621c 	movw	r2, #1564	@ 0x61c
 800ca18:	4914      	ldr	r1, [pc, #80]	@ (800ca6c <tcp_output_segment+0x1bc>)
 800ca1a:	4810      	ldr	r0, [pc, #64]	@ (800ca5c <tcp_output_segment+0x1ac>)
 800ca1c:	f004 fa56 	bl	8010ecc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6858      	ldr	r0, [r3, #4]
 800ca24:	68b9      	ldr	r1, [r7, #8]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	1d1c      	adds	r4, r3, #4
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	7add      	ldrb	r5, [r3, #11]
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	7a9b      	ldrb	r3, [r3, #10]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	9202      	str	r2, [sp, #8]
 800ca36:	2206      	movs	r2, #6
 800ca38:	9201      	str	r2, [sp, #4]
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	462b      	mov	r3, r5
 800ca3e:	4622      	mov	r2, r4
 800ca40:	f002 ffbe 	bl	800f9c0 <ip4_output_if>
 800ca44:	4603      	mov	r3, r0
 800ca46:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ca48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3720      	adds	r7, #32
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bdb0      	pop	{r4, r5, r7, pc}
 800ca54:	08013844 	.word	0x08013844
 800ca58:	08013e64 	.word	0x08013e64
 800ca5c:	08013898 	.word	0x08013898
 800ca60:	08013e84 	.word	0x08013e84
 800ca64:	08013ea4 	.word	0x08013ea4
 800ca68:	20007eec 	.word	0x20007eec
 800ca6c:	08013ec8 	.word	0x08013ec8

0800ca70 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ca70:	b5b0      	push	{r4, r5, r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d106      	bne.n	800ca8c <tcp_rexmit_rto_prepare+0x1c>
 800ca7e:	4b36      	ldr	r3, [pc, #216]	@ (800cb58 <tcp_rexmit_rto_prepare+0xe8>)
 800ca80:	f240 6263 	movw	r2, #1635	@ 0x663
 800ca84:	4935      	ldr	r1, [pc, #212]	@ (800cb5c <tcp_rexmit_rto_prepare+0xec>)
 800ca86:	4836      	ldr	r0, [pc, #216]	@ (800cb60 <tcp_rexmit_rto_prepare+0xf0>)
 800ca88:	f004 fa20 	bl	8010ecc <iprintf>

  if (pcb->unacked == NULL) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d102      	bne.n	800ca9a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ca94:	f06f 0305 	mvn.w	r3, #5
 800ca98:	e059      	b.n	800cb4e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e00b      	b.n	800caba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f7ff fee4 	bl	800c870 <tcp_output_segment_busy>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800caae:	f06f 0305 	mvn.w	r3, #5
 800cab2:	e04c      	b.n	800cb4e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1ef      	bne.n	800caa2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f7ff fed4 	bl	800c870 <tcp_output_segment_busy>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d002      	beq.n	800cad4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cace:	f06f 0305 	mvn.w	r3, #5
 800cad2:	e03c      	b.n	800cb4e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d104      	bne.n	800caee <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	895a      	ldrh	r2, [r3, #10]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	8b5b      	ldrh	r3, [r3, #26]
 800cb00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7f9 fbef 	bl	80062f4 <lwip_htonl>
 800cb16:	4604      	mov	r4, r0
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	891b      	ldrh	r3, [r3, #8]
 800cb1c:	461d      	mov	r5, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	899b      	ldrh	r3, [r3, #12]
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7f9 fbce 	bl	80062c8 <lwip_htons>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	f003 0303 	and.w	r3, r3, #3
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d001      	beq.n	800cb3c <tcp_rexmit_rto_prepare+0xcc>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e000      	b.n	800cb3e <tcp_rexmit_rto_prepare+0xce>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	442b      	add	r3, r5
 800cb40:	18e2      	adds	r2, r4, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bdb0      	pop	{r4, r5, r7, pc}
 800cb56:	bf00      	nop
 800cb58:	08013844 	.word	0x08013844
 800cb5c:	08013edc 	.word	0x08013edc
 800cb60:	08013898 	.word	0x08013898

0800cb64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <tcp_rexmit_rto_commit+0x1c>
 800cb72:	4b0d      	ldr	r3, [pc, #52]	@ (800cba8 <tcp_rexmit_rto_commit+0x44>)
 800cb74:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800cb78:	490c      	ldr	r1, [pc, #48]	@ (800cbac <tcp_rexmit_rto_commit+0x48>)
 800cb7a:	480d      	ldr	r0, [pc, #52]	@ (800cbb0 <tcp_rexmit_rto_commit+0x4c>)
 800cb7c:	f004 f9a6 	bl	8010ecc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb86:	2bff      	cmp	r3, #255	@ 0xff
 800cb88:	d007      	beq.n	800cb9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb90:	3301      	adds	r3, #1
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff fc72 	bl	800c484 <tcp_output>
}
 800cba0:	bf00      	nop
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	08013844 	.word	0x08013844
 800cbac:	08013f00 	.word	0x08013f00
 800cbb0:	08013898 	.word	0x08013898

0800cbb4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d106      	bne.n	800cbd0 <tcp_rexmit_rto+0x1c>
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	@ (800cbec <tcp_rexmit_rto+0x38>)
 800cbc4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800cbc8:	4909      	ldr	r1, [pc, #36]	@ (800cbf0 <tcp_rexmit_rto+0x3c>)
 800cbca:	480a      	ldr	r0, [pc, #40]	@ (800cbf4 <tcp_rexmit_rto+0x40>)
 800cbcc:	f004 f97e 	bl	8010ecc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff ff4d 	bl	800ca70 <tcp_rexmit_rto_prepare>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7ff ffc1 	bl	800cb64 <tcp_rexmit_rto_commit>
  }
}
 800cbe2:	bf00      	nop
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	08013844 	.word	0x08013844
 800cbf0:	08013f24 	.word	0x08013f24
 800cbf4:	08013898 	.word	0x08013898

0800cbf8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cbf8:	b590      	push	{r4, r7, lr}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d106      	bne.n	800cc14 <tcp_rexmit+0x1c>
 800cc06:	4b2f      	ldr	r3, [pc, #188]	@ (800ccc4 <tcp_rexmit+0xcc>)
 800cc08:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800cc0c:	492e      	ldr	r1, [pc, #184]	@ (800ccc8 <tcp_rexmit+0xd0>)
 800cc0e:	482f      	ldr	r0, [pc, #188]	@ (800cccc <tcp_rexmit+0xd4>)
 800cc10:	f004 f95c 	bl	8010ecc <iprintf>

  if (pcb->unacked == NULL) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cc1c:	f06f 0305 	mvn.w	r3, #5
 800cc20:	e04c      	b.n	800ccbc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cc28:	68b8      	ldr	r0, [r7, #8]
 800cc2a:	f7ff fe21 	bl	800c870 <tcp_output_segment_busy>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cc34:	f06f 0305 	mvn.w	r3, #5
 800cc38:	e040      	b.n	800ccbc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	336c      	adds	r3, #108	@ 0x6c
 800cc46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc48:	e002      	b.n	800cc50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d011      	beq.n	800cc7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7f9 fb47 	bl	80062f4 <lwip_htonl>
 800cc66:	4604      	mov	r4, r0
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7f9 fb40 	bl	80062f4 <lwip_htonl>
 800cc74:	4603      	mov	r3, r0
 800cc76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	dbe6      	blt.n	800cc4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d103      	bne.n	800cc9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cca0:	2bff      	cmp	r3, #255	@ 0xff
 800cca2:	d007      	beq.n	800ccb4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccaa:	3301      	adds	r3, #1
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3714      	adds	r7, #20
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd90      	pop	{r4, r7, pc}
 800ccc4:	08013844 	.word	0x08013844
 800ccc8:	08013f40 	.word	0x08013f40
 800cccc:	08013898 	.word	0x08013898

0800ccd0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d106      	bne.n	800ccec <tcp_rexmit_fast+0x1c>
 800ccde:	4b2a      	ldr	r3, [pc, #168]	@ (800cd88 <tcp_rexmit_fast+0xb8>)
 800cce0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800cce4:	4929      	ldr	r1, [pc, #164]	@ (800cd8c <tcp_rexmit_fast+0xbc>)
 800cce6:	482a      	ldr	r0, [pc, #168]	@ (800cd90 <tcp_rexmit_fast+0xc0>)
 800cce8:	f004 f8f0 	bl	8010ecc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d045      	beq.n	800cd80 <tcp_rexmit_fast+0xb0>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	8b5b      	ldrh	r3, [r3, #26]
 800ccf8:	f003 0304 	and.w	r3, r3, #4
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d13f      	bne.n	800cd80 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7ff ff79 	bl	800cbf8 <tcp_rexmit>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d139      	bne.n	800cd80 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	bf28      	it	cs
 800cd1c:	4613      	movcs	r3, r2
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	da00      	bge.n	800cd26 <tcp_rexmit_fast+0x56>
 800cd24:	3301      	adds	r3, #1
 800cd26:	105b      	asrs	r3, r3, #1
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800cd36:	461a      	mov	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d206      	bcs.n	800cd50 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd46:	005b      	lsls	r3, r3, #1
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	0049      	lsls	r1, r1, #1
 800cd5e:	440b      	add	r3, r1
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	4413      	add	r3, r2
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	8b5b      	ldrh	r3, [r3, #26]
 800cd70:	f043 0304 	orr.w	r3, r3, #4
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800cd80:	bf00      	nop
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	08013844 	.word	0x08013844
 800cd8c:	08013f58 	.word	0x08013f58
 800cd90:	08013898 	.word	0x08013898

0800cd94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b086      	sub	sp, #24
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	607b      	str	r3, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	817b      	strh	r3, [r7, #10]
 800cda2:	4613      	mov	r3, r2
 800cda4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cda6:	897a      	ldrh	r2, [r7, #10]
 800cda8:	893b      	ldrh	r3, [r7, #8]
 800cdaa:	4413      	add	r3, r2
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	3314      	adds	r3, #20
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	2022      	movs	r0, #34	@ 0x22
 800cdba:	f7fa fbf1 	bl	80075a0 <pbuf_alloc>
 800cdbe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d04d      	beq.n	800ce62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cdc6:	897b      	ldrh	r3, [r7, #10]
 800cdc8:	3313      	adds	r3, #19
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	8952      	ldrh	r2, [r2, #10]
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	db06      	blt.n	800cde0 <tcp_output_alloc_header_common+0x4c>
 800cdd2:	4b26      	ldr	r3, [pc, #152]	@ (800ce6c <tcp_output_alloc_header_common+0xd8>)
 800cdd4:	f240 7223 	movw	r2, #1827	@ 0x723
 800cdd8:	4925      	ldr	r1, [pc, #148]	@ (800ce70 <tcp_output_alloc_header_common+0xdc>)
 800cdda:	4826      	ldr	r0, [pc, #152]	@ (800ce74 <tcp_output_alloc_header_common+0xe0>)
 800cddc:	f004 f876 	bl	8010ecc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cde6:	8c3b      	ldrh	r3, [r7, #32]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7f9 fa6d 	bl	80062c8 <lwip_htons>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cdf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7f9 fa65 	bl	80062c8 <lwip_htons>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	461a      	mov	r2, r3
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7f9 fa71 	bl	80062f4 <lwip_htonl>
 800ce12:	4602      	mov	r2, r0
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ce18:	897b      	ldrh	r3, [r7, #10]
 800ce1a:	089b      	lsrs	r3, r3, #2
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	3305      	adds	r3, #5
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	031b      	lsls	r3, r3, #12
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f9 fa49 	bl	80062c8 <lwip_htons>
 800ce36:	4603      	mov	r3, r0
 800ce38:	461a      	mov	r2, r3
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ce3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7f9 fa41 	bl	80062c8 <lwip_htons>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	2200      	movs	r2, #0
 800ce52:	741a      	strb	r2, [r3, #16]
 800ce54:	2200      	movs	r2, #0
 800ce56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	749a      	strb	r2, [r3, #18]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ce62:	697b      	ldr	r3, [r7, #20]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	08013844 	.word	0x08013844
 800ce70:	08013f78 	.word	0x08013f78
 800ce74:	08013898 	.word	0x08013898

0800ce78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ce78:	b5b0      	push	{r4, r5, r7, lr}
 800ce7a:	b08a      	sub	sp, #40	@ 0x28
 800ce7c:	af04      	add	r7, sp, #16
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	607b      	str	r3, [r7, #4]
 800ce82:	460b      	mov	r3, r1
 800ce84:	817b      	strh	r3, [r7, #10]
 800ce86:	4613      	mov	r3, r2
 800ce88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d106      	bne.n	800ce9e <tcp_output_alloc_header+0x26>
 800ce90:	4b15      	ldr	r3, [pc, #84]	@ (800cee8 <tcp_output_alloc_header+0x70>)
 800ce92:	f240 7242 	movw	r2, #1858	@ 0x742
 800ce96:	4915      	ldr	r1, [pc, #84]	@ (800ceec <tcp_output_alloc_header+0x74>)
 800ce98:	4815      	ldr	r0, [pc, #84]	@ (800cef0 <tcp_output_alloc_header+0x78>)
 800ce9a:	f004 f817 	bl	8010ecc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	8adb      	ldrh	r3, [r3, #22]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	8b12      	ldrh	r2, [r2, #24]
 800ceaa:	68f9      	ldr	r1, [r7, #12]
 800ceac:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ceae:	893d      	ldrh	r5, [r7, #8]
 800ceb0:	897c      	ldrh	r4, [r7, #10]
 800ceb2:	9103      	str	r1, [sp, #12]
 800ceb4:	2110      	movs	r1, #16
 800ceb6:	9102      	str	r1, [sp, #8]
 800ceb8:	9201      	str	r2, [sp, #4]
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	462a      	mov	r2, r5
 800cec0:	4621      	mov	r1, r4
 800cec2:	f7ff ff67 	bl	800cd94 <tcp_output_alloc_header_common>
 800cec6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d006      	beq.n	800cedc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ced6:	441a      	add	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800cedc:	697b      	ldr	r3, [r7, #20]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3718      	adds	r7, #24
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bdb0      	pop	{r4, r5, r7, pc}
 800cee6:	bf00      	nop
 800cee8:	08013844 	.word	0x08013844
 800ceec:	08013fa8 	.word	0x08013fa8
 800cef0:	08013898 	.word	0x08013898

0800cef4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b088      	sub	sp, #32
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	4611      	mov	r1, r2
 800cf00:	461a      	mov	r2, r3
 800cf02:	460b      	mov	r3, r1
 800cf04:	71fb      	strb	r3, [r7, #7]
 800cf06:	4613      	mov	r3, r2
 800cf08:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d106      	bne.n	800cf22 <tcp_output_fill_options+0x2e>
 800cf14:	4b12      	ldr	r3, [pc, #72]	@ (800cf60 <tcp_output_fill_options+0x6c>)
 800cf16:	f240 7256 	movw	r2, #1878	@ 0x756
 800cf1a:	4912      	ldr	r1, [pc, #72]	@ (800cf64 <tcp_output_fill_options+0x70>)
 800cf1c:	4812      	ldr	r0, [pc, #72]	@ (800cf68 <tcp_output_fill_options+0x74>)
 800cf1e:	f003 ffd5 	bl	8010ecc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	3314      	adds	r3, #20
 800cf2c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cf2e:	8bfb      	ldrh	r3, [r7, #30]
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	461a      	mov	r2, r3
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	f003 0304 	and.w	r3, r3, #4
 800cf3c:	4413      	add	r3, r2
 800cf3e:	3314      	adds	r3, #20
 800cf40:	69ba      	ldr	r2, [r7, #24]
 800cf42:	4413      	add	r3, r2
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d006      	beq.n	800cf58 <tcp_output_fill_options+0x64>
 800cf4a:	4b05      	ldr	r3, [pc, #20]	@ (800cf60 <tcp_output_fill_options+0x6c>)
 800cf4c:	f240 7275 	movw	r2, #1909	@ 0x775
 800cf50:	4906      	ldr	r1, [pc, #24]	@ (800cf6c <tcp_output_fill_options+0x78>)
 800cf52:	4805      	ldr	r0, [pc, #20]	@ (800cf68 <tcp_output_fill_options+0x74>)
 800cf54:	f003 ffba 	bl	8010ecc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cf58:	bf00      	nop
 800cf5a:	3720      	adds	r7, #32
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	08013844 	.word	0x08013844
 800cf64:	08013fd0 	.word	0x08013fd0
 800cf68:	08013898 	.word	0x08013898
 800cf6c:	08013ec8 	.word	0x08013ec8

0800cf70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08a      	sub	sp, #40	@ 0x28
 800cf74:	af04      	add	r7, sp, #16
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
 800cf7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d106      	bne.n	800cf92 <tcp_output_control_segment+0x22>
 800cf84:	4b1c      	ldr	r3, [pc, #112]	@ (800cff8 <tcp_output_control_segment+0x88>)
 800cf86:	f240 7287 	movw	r2, #1927	@ 0x787
 800cf8a:	491c      	ldr	r1, [pc, #112]	@ (800cffc <tcp_output_control_segment+0x8c>)
 800cf8c:	481c      	ldr	r0, [pc, #112]	@ (800d000 <tcp_output_control_segment+0x90>)
 800cf8e:	f003 ff9d 	bl	8010ecc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f7fe ff2e 	bl	800bdf8 <tcp_route>
 800cf9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d102      	bne.n	800cfaa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cfa4:	23fc      	movs	r3, #252	@ 0xfc
 800cfa6:	75fb      	strb	r3, [r7, #23]
 800cfa8:	e01c      	b.n	800cfe4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d006      	beq.n	800cfbe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	7adb      	ldrb	r3, [r3, #11]
 800cfb4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	7a9b      	ldrb	r3, [r3, #10]
 800cfba:	757b      	strb	r3, [r7, #21]
 800cfbc:	e003      	b.n	800cfc6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cfbe:	23ff      	movs	r3, #255	@ 0xff
 800cfc0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cfc6:	7dba      	ldrb	r2, [r7, #22]
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	9302      	str	r3, [sp, #8]
 800cfcc:	2306      	movs	r3, #6
 800cfce:	9301      	str	r3, [sp, #4]
 800cfd0:	7d7b      	ldrb	r3, [r7, #21]
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	6879      	ldr	r1, [r7, #4]
 800cfda:	68b8      	ldr	r0, [r7, #8]
 800cfdc:	f002 fcf0 	bl	800f9c0 <ip4_output_if>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cfe4:	68b8      	ldr	r0, [r7, #8]
 800cfe6:	f7fa fdbf 	bl	8007b68 <pbuf_free>
  return err;
 800cfea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	08013844 	.word	0x08013844
 800cffc:	08013ff8 	.word	0x08013ff8
 800d000:	08013898 	.word	0x08013898

0800d004 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d004:	b590      	push	{r4, r7, lr}
 800d006:	b08b      	sub	sp, #44	@ 0x2c
 800d008:	af04      	add	r7, sp, #16
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d106      	bne.n	800d026 <tcp_rst+0x22>
 800d018:	4b1f      	ldr	r3, [pc, #124]	@ (800d098 <tcp_rst+0x94>)
 800d01a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d01e:	491f      	ldr	r1, [pc, #124]	@ (800d09c <tcp_rst+0x98>)
 800d020:	481f      	ldr	r0, [pc, #124]	@ (800d0a0 <tcp_rst+0x9c>)
 800d022:	f003 ff53 	bl	8010ecc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d106      	bne.n	800d03a <tcp_rst+0x36>
 800d02c:	4b1a      	ldr	r3, [pc, #104]	@ (800d098 <tcp_rst+0x94>)
 800d02e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d032:	491c      	ldr	r1, [pc, #112]	@ (800d0a4 <tcp_rst+0xa0>)
 800d034:	481a      	ldr	r0, [pc, #104]	@ (800d0a0 <tcp_rst+0x9c>)
 800d036:	f003 ff49 	bl	8010ecc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d03a:	2300      	movs	r3, #0
 800d03c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d03e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d042:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d044:	7dfb      	ldrb	r3, [r7, #23]
 800d046:	b29c      	uxth	r4, r3
 800d048:	68b8      	ldr	r0, [r7, #8]
 800d04a:	f7f9 f953 	bl	80062f4 <lwip_htonl>
 800d04e:	4602      	mov	r2, r0
 800d050:	8abb      	ldrh	r3, [r7, #20]
 800d052:	9303      	str	r3, [sp, #12]
 800d054:	2314      	movs	r3, #20
 800d056:	9302      	str	r3, [sp, #8]
 800d058:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d05a:	9301      	str	r3, [sp, #4]
 800d05c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	4613      	mov	r3, r2
 800d062:	2200      	movs	r2, #0
 800d064:	4621      	mov	r1, r4
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff fe94 	bl	800cd94 <tcp_output_alloc_header_common>
 800d06c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00c      	beq.n	800d08e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d074:	7dfb      	ldrb	r3, [r7, #23]
 800d076:	2200      	movs	r2, #0
 800d078:	6939      	ldr	r1, [r7, #16]
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f7ff ff3a 	bl	800cef4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	6939      	ldr	r1, [r7, #16]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f7ff ff72 	bl	800cf70 <tcp_output_control_segment>
 800d08c:	e000      	b.n	800d090 <tcp_rst+0x8c>
    return;
 800d08e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d090:	371c      	adds	r7, #28
 800d092:	46bd      	mov	sp, r7
 800d094:	bd90      	pop	{r4, r7, pc}
 800d096:	bf00      	nop
 800d098:	08013844 	.word	0x08013844
 800d09c:	08014024 	.word	0x08014024
 800d0a0:	08013898 	.word	0x08013898
 800d0a4:	08014040 	.word	0x08014040

0800d0a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d0a8:	b590      	push	{r4, r7, lr}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d106      	bne.n	800d0cc <tcp_send_empty_ack+0x24>
 800d0be:	4b28      	ldr	r3, [pc, #160]	@ (800d160 <tcp_send_empty_ack+0xb8>)
 800d0c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d0c4:	4927      	ldr	r1, [pc, #156]	@ (800d164 <tcp_send_empty_ack+0xbc>)
 800d0c6:	4828      	ldr	r0, [pc, #160]	@ (800d168 <tcp_send_empty_ack+0xc0>)
 800d0c8:	f003 ff00 	bl	8010ecc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d0cc:	7dfb      	ldrb	r3, [r7, #23]
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	f003 0304 	and.w	r3, r3, #4
 800d0d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d0d8:	7d7b      	ldrb	r3, [r7, #21]
 800d0da:	b29c      	uxth	r4, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7f9 f907 	bl	80062f4 <lwip_htonl>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7ff fec3 	bl	800ce78 <tcp_output_alloc_header>
 800d0f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d109      	bne.n	800d10e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	8b5b      	ldrh	r3, [r3, #26]
 800d0fe:	f043 0303 	orr.w	r3, r3, #3
 800d102:	b29a      	uxth	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d108:	f06f 0301 	mvn.w	r3, #1
 800d10c:	e023      	b.n	800d156 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d10e:	7dbb      	ldrb	r3, [r7, #22]
 800d110:	7dfa      	ldrb	r2, [r7, #23]
 800d112:	6939      	ldr	r1, [r7, #16]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff feed 	bl	800cef4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	3304      	adds	r3, #4
 800d120:	6939      	ldr	r1, [r7, #16]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff ff24 	bl	800cf70 <tcp_output_control_segment>
 800d128:	4603      	mov	r3, r0
 800d12a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d12c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d007      	beq.n	800d144 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	8b5b      	ldrh	r3, [r3, #26]
 800d138:	f043 0303 	orr.w	r3, r3, #3
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	835a      	strh	r2, [r3, #26]
 800d142:	e006      	b.n	800d152 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	8b5b      	ldrh	r3, [r3, #26]
 800d148:	f023 0303 	bic.w	r3, r3, #3
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d152:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d156:	4618      	mov	r0, r3
 800d158:	371c      	adds	r7, #28
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd90      	pop	{r4, r7, pc}
 800d15e:	bf00      	nop
 800d160:	08013844 	.word	0x08013844
 800d164:	0801405c 	.word	0x0801405c
 800d168:	08013898 	.word	0x08013898

0800d16c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d16c:	b590      	push	{r4, r7, lr}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d174:	2300      	movs	r3, #0
 800d176:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d106      	bne.n	800d18c <tcp_keepalive+0x20>
 800d17e:	4b18      	ldr	r3, [pc, #96]	@ (800d1e0 <tcp_keepalive+0x74>)
 800d180:	f640 0224 	movw	r2, #2084	@ 0x824
 800d184:	4917      	ldr	r1, [pc, #92]	@ (800d1e4 <tcp_keepalive+0x78>)
 800d186:	4818      	ldr	r0, [pc, #96]	@ (800d1e8 <tcp_keepalive+0x7c>)
 800d188:	f003 fea0 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d18c:	7abb      	ldrb	r3, [r7, #10]
 800d18e:	b29c      	uxth	r4, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d194:	3b01      	subs	r3, #1
 800d196:	4618      	mov	r0, r3
 800d198:	f7f9 f8ac 	bl	80062f4 <lwip_htonl>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2200      	movs	r2, #0
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7ff fe68 	bl	800ce78 <tcp_output_alloc_header>
 800d1a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d102      	bne.n	800d1b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d1b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1b4:	e010      	b.n	800d1d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1b6:	7abb      	ldrb	r3, [r7, #10]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	68f9      	ldr	r1, [r7, #12]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff fe99 	bl	800cef4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	68f9      	ldr	r1, [r7, #12]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff fed0 	bl	800cf70 <tcp_output_control_segment>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d1d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd90      	pop	{r4, r7, pc}
 800d1e0:	08013844 	.word	0x08013844
 800d1e4:	0801407c 	.word	0x0801407c
 800d1e8:	08013898 	.word	0x08013898

0800d1ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d1ec:	b590      	push	{r4, r7, lr}
 800d1ee:	b08b      	sub	sp, #44	@ 0x2c
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d106      	bne.n	800d20c <tcp_zero_window_probe+0x20>
 800d1fe:	4b4d      	ldr	r3, [pc, #308]	@ (800d334 <tcp_zero_window_probe+0x148>)
 800d200:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d204:	494c      	ldr	r1, [pc, #304]	@ (800d338 <tcp_zero_window_probe+0x14c>)
 800d206:	484d      	ldr	r0, [pc, #308]	@ (800d33c <tcp_zero_window_probe+0x150>)
 800d208:	f003 fe60 	bl	8010ecc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d210:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 800d212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d214:	2b00      	cmp	r3, #0
 800d216:	d101      	bne.n	800d21c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d218:	2300      	movs	r3, #0
 800d21a:	e087      	b.n	800d32c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d222:	2bff      	cmp	r3, #255	@ 0xff
 800d224:	d007      	beq.n	800d236 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d22c:	3301      	adds	r3, #1
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	899b      	ldrh	r3, [r3, #12]
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	4618      	mov	r0, r3
 800d240:	f7f9 f842 	bl	80062c8 <lwip_htons>
 800d244:	4603      	mov	r3, r0
 800d246:	b2db      	uxtb	r3, r3
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <tcp_zero_window_probe+0x70>
 800d250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d252:	891b      	ldrh	r3, [r3, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <tcp_zero_window_probe+0x70>
 800d258:	2301      	movs	r3, #1
 800d25a:	e000      	b.n	800d25e <tcp_zero_window_probe+0x72>
 800d25c:	2300      	movs	r3, #0
 800d25e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d262:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d266:	2b00      	cmp	r3, #0
 800d268:	bf0c      	ite	eq
 800d26a:	2301      	moveq	r3, #1
 800d26c:	2300      	movne	r3, #0
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d272:	7cfb      	ldrb	r3, [r7, #19]
 800d274:	b299      	uxth	r1, r3
 800d276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	8c3a      	ldrh	r2, [r7, #32]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7ff fdfa 	bl	800ce78 <tcp_output_alloc_header>
 800d284:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d28c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d290:	e04c      	b.n	800d32c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800d298:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d011      	beq.n	800d2c4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	899b      	ldrh	r3, [r3, #12]
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	b21b      	sxth	r3, r3
 800d2a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d2ac:	b21c      	sxth	r4, r3
 800d2ae:	2011      	movs	r0, #17
 800d2b0:	f7f9 f80a 	bl	80062c8 <lwip_htons>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	b21b      	sxth	r3, r3
 800d2b8:	4323      	orrs	r3, r4
 800d2ba:	b21b      	sxth	r3, r3
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	819a      	strh	r2, [r3, #12]
 800d2c2:	e010      	b.n	800d2e6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d2c4:	69fb      	ldr	r3, [r7, #28]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	3314      	adds	r3, #20
 800d2ca:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ce:	6858      	ldr	r0, [r3, #4]
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	891a      	ldrh	r2, [r3, #8]
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d8:	891b      	ldrh	r3, [r3, #8]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	2201      	movs	r2, #1
 800d2e0:	6979      	ldr	r1, [r7, #20]
 800d2e2:	f7fa fe3b 	bl	8007f5c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7f9 f801 	bl	80062f4 <lwip_htonl>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	da02      	bge.n	800d30a <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d30a:	7cfb      	ldrb	r3, [r7, #19]
 800d30c:	2200      	movs	r2, #0
 800d30e:	69f9      	ldr	r1, [r7, #28]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f7ff fdef 	bl	800cef4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	3304      	adds	r3, #4
 800d31c:	69f9      	ldr	r1, [r7, #28]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff fe26 	bl	800cf70 <tcp_output_control_segment>
 800d324:	4603      	mov	r3, r0
 800d326:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d328:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	372c      	adds	r7, #44	@ 0x2c
 800d330:	46bd      	mov	sp, r7
 800d332:	bd90      	pop	{r4, r7, pc}
 800d334:	08013844 	.word	0x08013844
 800d338:	08014098 	.word	0x08014098
 800d33c:	08013898 	.word	0x08013898

0800d340 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d348:	f7fa fef6 	bl	8008138 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d34c:	4b0a      	ldr	r3, [pc, #40]	@ (800d378 <tcpip_tcp_timer+0x38>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d103      	bne.n	800d35c <tcpip_tcp_timer+0x1c>
 800d354:	4b09      	ldr	r3, [pc, #36]	@ (800d37c <tcpip_tcp_timer+0x3c>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d005      	beq.n	800d368 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d35c:	2200      	movs	r2, #0
 800d35e:	4908      	ldr	r1, [pc, #32]	@ (800d380 <tcpip_tcp_timer+0x40>)
 800d360:	20fa      	movs	r0, #250	@ 0xfa
 800d362:	f000 f8f3 	bl	800d54c <sys_timeout>
 800d366:	e003      	b.n	800d370 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d368:	4b06      	ldr	r3, [pc, #24]	@ (800d384 <tcpip_tcp_timer+0x44>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	601a      	str	r2, [r3, #0]
  }
}
 800d36e:	bf00      	nop
 800d370:	bf00      	nop
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	20007ef8 	.word	0x20007ef8
 800d37c:	20007efc 	.word	0x20007efc
 800d380:	0800d341 	.word	0x0800d341
 800d384:	20007f48 	.word	0x20007f48

0800d388 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d38c:	4b0a      	ldr	r3, [pc, #40]	@ (800d3b8 <tcp_timer_needed+0x30>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10f      	bne.n	800d3b4 <tcp_timer_needed+0x2c>
 800d394:	4b09      	ldr	r3, [pc, #36]	@ (800d3bc <tcp_timer_needed+0x34>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d103      	bne.n	800d3a4 <tcp_timer_needed+0x1c>
 800d39c:	4b08      	ldr	r3, [pc, #32]	@ (800d3c0 <tcp_timer_needed+0x38>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d007      	beq.n	800d3b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d3a4:	4b04      	ldr	r3, [pc, #16]	@ (800d3b8 <tcp_timer_needed+0x30>)
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	4905      	ldr	r1, [pc, #20]	@ (800d3c4 <tcp_timer_needed+0x3c>)
 800d3ae:	20fa      	movs	r0, #250	@ 0xfa
 800d3b0:	f000 f8cc 	bl	800d54c <sys_timeout>
  }
}
 800d3b4:	bf00      	nop
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	20007f48 	.word	0x20007f48
 800d3bc:	20007ef8 	.word	0x20007ef8
 800d3c0:	20007efc 	.word	0x20007efc
 800d3c4:	0800d341 	.word	0x0800d341

0800d3c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d3d4:	2006      	movs	r0, #6
 800d3d6:	f7f9 fbeb 	bl	8006bb0 <memp_malloc>
 800d3da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d109      	bne.n	800d3f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d151      	bne.n	800d48c <sys_timeout_abs+0xc4>
 800d3e8:	4b2a      	ldr	r3, [pc, #168]	@ (800d494 <sys_timeout_abs+0xcc>)
 800d3ea:	22be      	movs	r2, #190	@ 0xbe
 800d3ec:	492a      	ldr	r1, [pc, #168]	@ (800d498 <sys_timeout_abs+0xd0>)
 800d3ee:	482b      	ldr	r0, [pc, #172]	@ (800d49c <sys_timeout_abs+0xd4>)
 800d3f0:	f003 fd6c 	bl	8010ecc <iprintf>
    return;
 800d3f4:	e04a      	b.n	800d48c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	68fa      	ldr	r2, [r7, #12]
 800d40c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d40e:	4b24      	ldr	r3, [pc, #144]	@ (800d4a0 <sys_timeout_abs+0xd8>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d103      	bne.n	800d41e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d416:	4a22      	ldr	r2, [pc, #136]	@ (800d4a0 <sys_timeout_abs+0xd8>)
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	6013      	str	r3, [r2, #0]
    return;
 800d41c:	e037      	b.n	800d48e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	685a      	ldr	r2, [r3, #4]
 800d422:	4b1f      	ldr	r3, [pc, #124]	@ (800d4a0 <sys_timeout_abs+0xd8>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	0fdb      	lsrs	r3, r3, #31
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d007      	beq.n	800d446 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d436:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a0 <sys_timeout_abs+0xd8>)
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d43e:	4a18      	ldr	r2, [pc, #96]	@ (800d4a0 <sys_timeout_abs+0xd8>)
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	6013      	str	r3, [r2, #0]
 800d444:	e023      	b.n	800d48e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d446:	4b16      	ldr	r3, [pc, #88]	@ (800d4a0 <sys_timeout_abs+0xd8>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	617b      	str	r3, [r7, #20]
 800d44c:	e01a      	b.n	800d484 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00b      	beq.n	800d46e <sys_timeout_abs+0xa6>
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	685a      	ldr	r2, [r3, #4]
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	0fdb      	lsrs	r3, r3, #31
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	601a      	str	r2, [r3, #0]
        break;
 800d47c:	e007      	b.n	800d48e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1e1      	bne.n	800d44e <sys_timeout_abs+0x86>
 800d48a:	e000      	b.n	800d48e <sys_timeout_abs+0xc6>
    return;
 800d48c:	bf00      	nop
      }
    }
  }
}
 800d48e:	3718      	adds	r7, #24
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	080140bc 	.word	0x080140bc
 800d498:	080140f0 	.word	0x080140f0
 800d49c:	08014130 	.word	0x08014130
 800d4a0:	20007f40 	.word	0x20007f40

0800d4a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	4798      	blx	r3

  now = sys_now();
 800d4b6:	f7f8 fccb 	bl	8005e50 <sys_now>
 800d4ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d500 <lwip_cyclic_timer+0x5c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	0fdb      	lsrs	r3, r3, #31
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d009      	beq.n	800d4ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	4907      	ldr	r1, [pc, #28]	@ (800d504 <lwip_cyclic_timer+0x60>)
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7ff ff6e 	bl	800d3c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d4ec:	e004      	b.n	800d4f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	4904      	ldr	r1, [pc, #16]	@ (800d504 <lwip_cyclic_timer+0x60>)
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	f7ff ff68 	bl	800d3c8 <sys_timeout_abs>
}
 800d4f8:	bf00      	nop
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20007f44 	.word	0x20007f44
 800d504:	0800d4a5 	.word	0x0800d4a5

0800d508 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d50e:	2301      	movs	r3, #1
 800d510:	607b      	str	r3, [r7, #4]
 800d512:	e00e      	b.n	800d532 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d514:	4a0b      	ldr	r2, [pc, #44]	@ (800d544 <sys_timeouts_init+0x3c>)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	4a08      	ldr	r2, [pc, #32]	@ (800d544 <sys_timeouts_init+0x3c>)
 800d522:	4413      	add	r3, r2
 800d524:	461a      	mov	r2, r3
 800d526:	4908      	ldr	r1, [pc, #32]	@ (800d548 <sys_timeouts_init+0x40>)
 800d528:	f000 f810 	bl	800d54c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	3301      	adds	r3, #1
 800d530:	607b      	str	r3, [r7, #4]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b02      	cmp	r3, #2
 800d536:	d9ed      	bls.n	800d514 <sys_timeouts_init+0xc>
  }
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	080153c8 	.word	0x080153c8
 800d548:	0800d4a5 	.word	0x0800d4a5

0800d54c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d55e:	d306      	bcc.n	800d56e <sys_timeout+0x22>
 800d560:	4b0a      	ldr	r3, [pc, #40]	@ (800d58c <sys_timeout+0x40>)
 800d562:	f240 1229 	movw	r2, #297	@ 0x129
 800d566:	490a      	ldr	r1, [pc, #40]	@ (800d590 <sys_timeout+0x44>)
 800d568:	480a      	ldr	r0, [pc, #40]	@ (800d594 <sys_timeout+0x48>)
 800d56a:	f003 fcaf 	bl	8010ecc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d56e:	f7f8 fc6f 	bl	8005e50 <sys_now>
 800d572:	4602      	mov	r2, r0
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	4413      	add	r3, r2
 800d578:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	68b9      	ldr	r1, [r7, #8]
 800d57e:	6978      	ldr	r0, [r7, #20]
 800d580:	f7ff ff22 	bl	800d3c8 <sys_timeout_abs>
#endif
}
 800d584:	bf00      	nop
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	080140bc 	.word	0x080140bc
 800d590:	08014158 	.word	0x08014158
 800d594:	08014130 	.word	0x08014130

0800d598 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d59e:	f7f8 fc57 	bl	8005e50 <sys_now>
 800d5a2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d5a4:	4b1a      	ldr	r3, [pc, #104]	@ (800d610 <sys_check_timeouts+0x78>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <sys_check_timeouts+0x1a>
 800d5ae:	f7f9 ffa1 	bl	80074f4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d5b2:	4b18      	ldr	r3, [pc, #96]	@ (800d614 <sys_check_timeouts+0x7c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d022      	beq.n	800d604 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	68fa      	ldr	r2, [r7, #12]
 800d5c4:	1ad3      	subs	r3, r2, r3
 800d5c6:	0fdb      	lsrs	r3, r3, #31
 800d5c8:	f003 0301 	and.w	r3, r3, #1
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d11a      	bne.n	800d608 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800d614 <sys_check_timeouts+0x7c>)
 800d5d8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	4a0b      	ldr	r2, [pc, #44]	@ (800d618 <sys_check_timeouts+0x80>)
 800d5ec:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d5ee:	68b9      	ldr	r1, [r7, #8]
 800d5f0:	2006      	movs	r0, #6
 800d5f2:	f7f9 fb4d 	bl	8006c90 <memp_free>
    if (handler != NULL) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0d3      	beq.n	800d5a4 <sys_check_timeouts+0xc>
      handler(arg);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6838      	ldr	r0, [r7, #0]
 800d600:	4798      	blx	r3
  do {
 800d602:	e7cf      	b.n	800d5a4 <sys_check_timeouts+0xc>
      return;
 800d604:	bf00      	nop
 800d606:	e000      	b.n	800d60a <sys_check_timeouts+0x72>
      return;
 800d608:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	20007ee9 	.word	0x20007ee9
 800d614:	20007f40 	.word	0x20007f40
 800d618:	20007f44 	.word	0x20007f44

0800d61c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d620:	f003 fb54 	bl	8010ccc <rand>
 800d624:	4603      	mov	r3, r0
 800d626:	b29b      	uxth	r3, r3
 800d628:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d632:	b29a      	uxth	r2, r3
 800d634:	4b01      	ldr	r3, [pc, #4]	@ (800d63c <udp_init+0x20>)
 800d636:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d638:	bf00      	nop
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	2000006c 	.word	0x2000006c

0800d640 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d64a:	4b17      	ldr	r3, [pc, #92]	@ (800d6a8 <udp_new_port+0x68>)
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	1c5a      	adds	r2, r3, #1
 800d650:	b291      	uxth	r1, r2
 800d652:	4a15      	ldr	r2, [pc, #84]	@ (800d6a8 <udp_new_port+0x68>)
 800d654:	8011      	strh	r1, [r2, #0]
 800d656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d103      	bne.n	800d666 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d65e:	4b12      	ldr	r3, [pc, #72]	@ (800d6a8 <udp_new_port+0x68>)
 800d660:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800d664:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d666:	4b11      	ldr	r3, [pc, #68]	@ (800d6ac <udp_new_port+0x6c>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	603b      	str	r3, [r7, #0]
 800d66c:	e011      	b.n	800d692 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	8a5a      	ldrh	r2, [r3, #18]
 800d672:	4b0d      	ldr	r3, [pc, #52]	@ (800d6a8 <udp_new_port+0x68>)
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d108      	bne.n	800d68c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d67a:	88fb      	ldrh	r3, [r7, #6]
 800d67c:	3301      	adds	r3, #1
 800d67e:	80fb      	strh	r3, [r7, #6]
 800d680:	88fb      	ldrh	r3, [r7, #6]
 800d682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d686:	d3e0      	bcc.n	800d64a <udp_new_port+0xa>
        return 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	e007      	b.n	800d69c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	603b      	str	r3, [r7, #0]
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1ea      	bne.n	800d66e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d698:	4b03      	ldr	r3, [pc, #12]	@ (800d6a8 <udp_new_port+0x68>)
 800d69a:	881b      	ldrh	r3, [r3, #0]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr
 800d6a8:	2000006c 	.word	0x2000006c
 800d6ac:	20007f4c 	.word	0x20007f4c

0800d6b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d105      	bne.n	800d6d0 <udp_input_local_match+0x20>
 800d6c4:	4b27      	ldr	r3, [pc, #156]	@ (800d764 <udp_input_local_match+0xb4>)
 800d6c6:	2287      	movs	r2, #135	@ 0x87
 800d6c8:	4927      	ldr	r1, [pc, #156]	@ (800d768 <udp_input_local_match+0xb8>)
 800d6ca:	4828      	ldr	r0, [pc, #160]	@ (800d76c <udp_input_local_match+0xbc>)
 800d6cc:	f003 fbfe 	bl	8010ecc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d105      	bne.n	800d6e2 <udp_input_local_match+0x32>
 800d6d6:	4b23      	ldr	r3, [pc, #140]	@ (800d764 <udp_input_local_match+0xb4>)
 800d6d8:	2288      	movs	r2, #136	@ 0x88
 800d6da:	4925      	ldr	r1, [pc, #148]	@ (800d770 <udp_input_local_match+0xc0>)
 800d6dc:	4823      	ldr	r0, [pc, #140]	@ (800d76c <udp_input_local_match+0xbc>)
 800d6de:	f003 fbf5 	bl	8010ecc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	7a1b      	ldrb	r3, [r3, #8]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00b      	beq.n	800d702 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	7a1a      	ldrb	r2, [r3, #8]
 800d6ee:	4b21      	ldr	r3, [pc, #132]	@ (800d774 <udp_input_local_match+0xc4>)
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d001      	beq.n	800d702 <udp_input_local_match+0x52>
    return 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	e02b      	b.n	800d75a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d018      	beq.n	800d73a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d013      	beq.n	800d736 <udp_input_local_match+0x86>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00f      	beq.n	800d736 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d716:	4b17      	ldr	r3, [pc, #92]	@ (800d774 <udp_input_local_match+0xc4>)
 800d718:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d71a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d71e:	d00a      	beq.n	800d736 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	4b13      	ldr	r3, [pc, #76]	@ (800d774 <udp_input_local_match+0xc4>)
 800d726:	695b      	ldr	r3, [r3, #20]
 800d728:	405a      	eors	r2, r3
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	3308      	adds	r3, #8
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d732:	2b00      	cmp	r3, #0
 800d734:	d110      	bne.n	800d758 <udp_input_local_match+0xa8>
          return 1;
 800d736:	2301      	movs	r3, #1
 800d738:	e00f      	b.n	800d75a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d009      	beq.n	800d754 <udp_input_local_match+0xa4>
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d005      	beq.n	800d754 <udp_input_local_match+0xa4>
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	4b09      	ldr	r3, [pc, #36]	@ (800d774 <udp_input_local_match+0xc4>)
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	429a      	cmp	r2, r3
 800d752:	d101      	bne.n	800d758 <udp_input_local_match+0xa8>
        return 1;
 800d754:	2301      	movs	r3, #1
 800d756:	e000      	b.n	800d75a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d758:	2300      	movs	r3, #0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	080141a4 	.word	0x080141a4
 800d768:	080141d4 	.word	0x080141d4
 800d76c:	080141f8 	.word	0x080141f8
 800d770:	08014220 	.word	0x08014220
 800d774:	20004f90 	.word	0x20004f90

0800d778 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d778:	b590      	push	{r4, r7, lr}
 800d77a:	b08d      	sub	sp, #52	@ 0x34
 800d77c:	af02      	add	r7, sp, #8
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d782:	2300      	movs	r3, #0
 800d784:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d105      	bne.n	800d798 <udp_input+0x20>
 800d78c:	4b95      	ldr	r3, [pc, #596]	@ (800d9e4 <udp_input+0x26c>)
 800d78e:	22cf      	movs	r2, #207	@ 0xcf
 800d790:	4995      	ldr	r1, [pc, #596]	@ (800d9e8 <udp_input+0x270>)
 800d792:	4896      	ldr	r0, [pc, #600]	@ (800d9ec <udp_input+0x274>)
 800d794:	f003 fb9a 	bl	8010ecc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d105      	bne.n	800d7aa <udp_input+0x32>
 800d79e:	4b91      	ldr	r3, [pc, #580]	@ (800d9e4 <udp_input+0x26c>)
 800d7a0:	22d0      	movs	r2, #208	@ 0xd0
 800d7a2:	4993      	ldr	r1, [pc, #588]	@ (800d9f0 <udp_input+0x278>)
 800d7a4:	4891      	ldr	r0, [pc, #580]	@ (800d9ec <udp_input+0x274>)
 800d7a6:	f003 fb91 	bl	8010ecc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	895b      	ldrh	r3, [r3, #10]
 800d7ae:	2b07      	cmp	r3, #7
 800d7b0:	d809      	bhi.n	800d7c6 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	891b      	ldrh	r3, [r3, #8]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	488e      	ldr	r0, [pc, #568]	@ (800d9f4 <udp_input+0x27c>)
 800d7ba:	f003 fb87 	bl	8010ecc <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7fa f9d2 	bl	8007b68 <pbuf_free>
    goto end;
 800d7c4:	e18d      	b.n	800dae2 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d7cc:	4b8a      	ldr	r3, [pc, #552]	@ (800d9f8 <udp_input+0x280>)
 800d7ce:	695b      	ldr	r3, [r3, #20]
 800d7d0:	4a89      	ldr	r2, [pc, #548]	@ (800d9f8 <udp_input+0x280>)
 800d7d2:	6812      	ldr	r2, [r2, #0]
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f002 f9ca 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	891b      	ldrh	r3, [r3, #8]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4885      	ldr	r0, [pc, #532]	@ (800d9fc <udp_input+0x284>)
 800d7e8:	f003 fb70 	bl	8010ecc <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7f8 fd68 	bl	80062c8 <lwip_htons>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	885b      	ldrh	r3, [r3, #2]
 800d800:	b29b      	uxth	r3, r3
 800d802:	4618      	mov	r0, r3
 800d804:	f7f8 fd60 	bl	80062c8 <lwip_htons>
 800d808:	4603      	mov	r3, r0
 800d80a:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 800d80c:	6978      	ldr	r0, [r7, #20]
 800d80e:	f000 fd3b 	bl	800e288 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 800d812:	487b      	ldr	r0, [pc, #492]	@ (800da00 <udp_input+0x288>)
 800d814:	f003 fb5a 	bl	8010ecc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 800d818:	4b77      	ldr	r3, [pc, #476]	@ (800d9f8 <udp_input+0x280>)
 800d81a:	695b      	ldr	r3, [r3, #20]
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	4619      	mov	r1, r3
 800d820:	4b75      	ldr	r3, [pc, #468]	@ (800d9f8 <udp_input+0x280>)
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	0a1b      	lsrs	r3, r3, #8
 800d826:	b2db      	uxtb	r3, r3
 800d828:	461a      	mov	r2, r3
 800d82a:	4b73      	ldr	r3, [pc, #460]	@ (800d9f8 <udp_input+0x280>)
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	0c1b      	lsrs	r3, r3, #16
 800d830:	b2db      	uxtb	r3, r3
 800d832:	4618      	mov	r0, r3
 800d834:	4b70      	ldr	r3, [pc, #448]	@ (800d9f8 <udp_input+0x280>)
 800d836:	695b      	ldr	r3, [r3, #20]
 800d838:	0e1b      	lsrs	r3, r3, #24
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	4603      	mov	r3, r0
 800d840:	4870      	ldr	r0, [pc, #448]	@ (800da04 <udp_input+0x28c>)
 800d842:	f003 fb43 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7f8 fd3b 	bl	80062c8 <lwip_htons>
 800d852:	4603      	mov	r3, r0
 800d854:	4619      	mov	r1, r3
 800d856:	486c      	ldr	r0, [pc, #432]	@ (800da08 <udp_input+0x290>)
 800d858:	f003 fb38 	bl	8010ecc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 800d85c:	4b66      	ldr	r3, [pc, #408]	@ (800d9f8 <udp_input+0x280>)
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	b2db      	uxtb	r3, r3
 800d862:	4619      	mov	r1, r3
 800d864:	4b64      	ldr	r3, [pc, #400]	@ (800d9f8 <udp_input+0x280>)
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	0a1b      	lsrs	r3, r3, #8
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	461a      	mov	r2, r3
 800d86e:	4b62      	ldr	r3, [pc, #392]	@ (800d9f8 <udp_input+0x280>)
 800d870:	691b      	ldr	r3, [r3, #16]
 800d872:	0c1b      	lsrs	r3, r3, #16
 800d874:	b2db      	uxtb	r3, r3
 800d876:	4618      	mov	r0, r3
 800d878:	4b5f      	ldr	r3, [pc, #380]	@ (800d9f8 <udp_input+0x280>)
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	0e1b      	lsrs	r3, r3, #24
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	4603      	mov	r3, r0
 800d884:	485f      	ldr	r0, [pc, #380]	@ (800da04 <udp_input+0x28c>)
 800d886:	f003 fb21 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	881b      	ldrh	r3, [r3, #0]
 800d88e:	b29b      	uxth	r3, r3
 800d890:	4618      	mov	r0, r3
 800d892:	f7f8 fd19 	bl	80062c8 <lwip_htons>
 800d896:	4603      	mov	r3, r0
 800d898:	4619      	mov	r1, r3
 800d89a:	485c      	ldr	r0, [pc, #368]	@ (800da0c <udp_input+0x294>)
 800d89c:	f003 fb16 	bl	8010ecc <iprintf>

  pcb = NULL;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8ac:	4b58      	ldr	r3, [pc, #352]	@ (800da10 <udp_input+0x298>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8b2:	e091      	b.n	800d9d8 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 800d8b4:	4857      	ldr	r0, [pc, #348]	@ (800da14 <udp_input+0x29c>)
 800d8b6:	f003 fb09 	bl	8010ecc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	0a1b      	lsrs	r3, r3, #8
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	0c1b      	lsrs	r3, r3, #16
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	0e1b      	lsrs	r3, r3, #24
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	4848      	ldr	r0, [pc, #288]	@ (800da04 <udp_input+0x28c>)
 800d8e4:	f003 faf2 	bl	8010ecc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ea:	8a5b      	ldrh	r3, [r3, #18]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4846      	ldr	r0, [pc, #280]	@ (800da08 <udp_input+0x290>)
 800d8f0:	f003 faec 	bl	8010ecc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	0a1b      	lsrs	r3, r3, #8
 800d902:	b2db      	uxtb	r3, r3
 800d904:	461a      	mov	r2, r3
 800d906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	0c1b      	lsrs	r3, r3, #16
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	4618      	mov	r0, r3
 800d910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	0e1b      	lsrs	r3, r3, #24
 800d916:	b2db      	uxtb	r3, r3
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	4603      	mov	r3, r0
 800d91c:	4839      	ldr	r0, [pc, #228]	@ (800da04 <udp_input+0x28c>)
 800d91e:	f003 fad5 	bl	8010ecc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 800d922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d924:	8a9b      	ldrh	r3, [r3, #20]
 800d926:	4619      	mov	r1, r3
 800d928:	4838      	ldr	r0, [pc, #224]	@ (800da0c <udp_input+0x294>)
 800d92a:	f003 facf 	bl	8010ecc <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d930:	8a5b      	ldrh	r3, [r3, #18]
 800d932:	89fa      	ldrh	r2, [r7, #14]
 800d934:	429a      	cmp	r2, r3
 800d936:	d14a      	bne.n	800d9ce <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d938:	7cfb      	ldrb	r3, [r7, #19]
 800d93a:	461a      	mov	r2, r3
 800d93c:	6839      	ldr	r1, [r7, #0]
 800d93e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d940:	f7ff feb6 	bl	800d6b0 <udp_input_local_match>
 800d944:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d946:	2b00      	cmp	r3, #0
 800d948:	d041      	beq.n	800d9ce <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94c:	7c1b      	ldrb	r3, [r3, #16]
 800d94e:	f003 0304 	and.w	r3, r3, #4
 800d952:	2b00      	cmp	r3, #0
 800d954:	d11d      	bne.n	800d992 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d102      	bne.n	800d962 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d95e:	61fb      	str	r3, [r7, #28]
 800d960:	e017      	b.n	800d992 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d962:	7cfb      	ldrb	r3, [r7, #19]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d014      	beq.n	800d992 <udp_input+0x21a>
 800d968:	4b23      	ldr	r3, [pc, #140]	@ (800d9f8 <udp_input+0x280>)
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d970:	d10f      	bne.n	800d992 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	3304      	adds	r3, #4
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d008      	beq.n	800d992 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	3304      	adds	r3, #4
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d101      	bne.n	800d992 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 800d98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d990:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d994:	8a9b      	ldrh	r3, [r3, #20]
 800d996:	8a3a      	ldrh	r2, [r7, #16]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d118      	bne.n	800d9ce <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a6:	685a      	ldr	r2, [r3, #4]
 800d9a8:	4b13      	ldr	r3, [pc, #76]	@ (800d9f8 <udp_input+0x280>)
 800d9aa:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d10e      	bne.n	800d9ce <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d030      	beq.n	800da18 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d9be:	4b14      	ldr	r3, [pc, #80]	@ (800da10 <udp_input+0x298>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d9c6:	4a12      	ldr	r2, [pc, #72]	@ (800da10 <udp_input+0x298>)
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ca:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d9cc:	e024      	b.n	800da18 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f47f af6a 	bne.w	800d8b4 <udp_input+0x13c>
 800d9e0:	e01b      	b.n	800da1a <udp_input+0x2a2>
 800d9e2:	bf00      	nop
 800d9e4:	080141a4 	.word	0x080141a4
 800d9e8:	08014248 	.word	0x08014248
 800d9ec:	080141f8 	.word	0x080141f8
 800d9f0:	08014260 	.word	0x08014260
 800d9f4:	0801427c 	.word	0x0801427c
 800d9f8:	20004f90 	.word	0x20004f90
 800d9fc:	080142b4 	.word	0x080142b4
 800da00:	080142e0 	.word	0x080142e0
 800da04:	080142e8 	.word	0x080142e8
 800da08:	080142f8 	.word	0x080142f8
 800da0c:	08014308 	.word	0x08014308
 800da10:	20007f4c 	.word	0x20007f4c
 800da14:	08014310 	.word	0x08014310
        break;
 800da18:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800da1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d101      	bne.n	800da24 <udp_input+0x2ac>
    pcb = uncon_pcb;
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800da24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da26:	2b00      	cmp	r3, #0
 800da28:	d002      	beq.n	800da30 <udp_input+0x2b8>
    for_us = 1;
 800da2a:	2301      	movs	r3, #1
 800da2c:	76fb      	strb	r3, [r7, #27]
 800da2e:	e00a      	b.n	800da46 <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	3304      	adds	r3, #4
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	4b2d      	ldr	r3, [pc, #180]	@ (800daec <udp_input+0x374>)
 800da38:	695b      	ldr	r3, [r3, #20]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	bf0c      	ite	eq
 800da3e:	2301      	moveq	r3, #1
 800da40:	2300      	movne	r3, #0
 800da42:	b2db      	uxtb	r3, r3
 800da44:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800da46:	7efb      	ldrb	r3, [r7, #27]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d047      	beq.n	800dadc <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 800da4c:	4828      	ldr	r0, [pc, #160]	@ (800daf0 <udp_input+0x378>)
 800da4e:	f003 faad 	bl	8010fac <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800da52:	2108      	movs	r1, #8
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f7fa f801 	bl	8007a5c <pbuf_remove_header>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d00a      	beq.n	800da76 <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800da60:	4b24      	ldr	r3, [pc, #144]	@ (800daf4 <udp_input+0x37c>)
 800da62:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800da66:	4924      	ldr	r1, [pc, #144]	@ (800daf8 <udp_input+0x380>)
 800da68:	4824      	ldr	r0, [pc, #144]	@ (800dafc <udp_input+0x384>)
 800da6a:	f003 fa2f 	bl	8010ecc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7fa f87a 	bl	8007b68 <pbuf_free>
      goto end;
 800da74:	e035      	b.n	800dae2 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 800da76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d012      	beq.n	800daa2 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800da7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00a      	beq.n	800da9a <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800da84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da86:	699c      	ldr	r4, [r3, #24]
 800da88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da8a:	69d8      	ldr	r0, [r3, #28]
 800da8c:	8a3b      	ldrh	r3, [r7, #16]
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	4b1b      	ldr	r3, [pc, #108]	@ (800db00 <udp_input+0x388>)
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800da98:	e024      	b.n	800dae4 <udp_input+0x36c>
        pbuf_free(p);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7fa f864 	bl	8007b68 <pbuf_free>
        goto end;
 800daa0:	e01f      	b.n	800dae2 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 800daa2:	4818      	ldr	r0, [pc, #96]	@ (800db04 <udp_input+0x38c>)
 800daa4:	f003 fa82 	bl	8010fac <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800daa8:	7cfb      	ldrb	r3, [r7, #19]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d112      	bne.n	800dad4 <udp_input+0x35c>
 800daae:	4b0f      	ldr	r3, [pc, #60]	@ (800daec <udp_input+0x374>)
 800dab0:	695b      	ldr	r3, [r3, #20]
 800dab2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dab6:	2be0      	cmp	r3, #224	@ 0xe0
 800dab8:	d00c      	beq.n	800dad4 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800daba:	4b0c      	ldr	r3, [pc, #48]	@ (800daec <udp_input+0x374>)
 800dabc:	899b      	ldrh	r3, [r3, #12]
 800dabe:	3308      	adds	r3, #8
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	b21b      	sxth	r3, r3
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7fa f83b 	bl	8007b42 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dacc:	2103      	movs	r1, #3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f001 fcee 	bl	800f4b0 <icmp_dest_unreach>
      pbuf_free(p);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7fa f847 	bl	8007b68 <pbuf_free>
  return;
 800dada:	e003      	b.n	800dae4 <udp_input+0x36c>
    pbuf_free(p);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7fa f843 	bl	8007b68 <pbuf_free>
  return;
 800dae2:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dae4:	372c      	adds	r7, #44	@ 0x2c
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd90      	pop	{r4, r7, pc}
 800daea:	bf00      	nop
 800daec:	20004f90 	.word	0x20004f90
 800daf0:	08014318 	.word	0x08014318
 800daf4:	080141a4 	.word	0x080141a4
 800daf8:	08014338 	.word	0x08014338
 800dafc:	080141f8 	.word	0x080141f8
 800db00:	20004fa0 	.word	0x20004fa0
 800db04:	08014354 	.word	0x08014354

0800db08 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af02      	add	r7, sp, #8
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d109      	bne.n	800db30 <udp_sendto+0x28>
 800db1c:	4b3b      	ldr	r3, [pc, #236]	@ (800dc0c <udp_sendto+0x104>)
 800db1e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800db22:	493b      	ldr	r1, [pc, #236]	@ (800dc10 <udp_sendto+0x108>)
 800db24:	483b      	ldr	r0, [pc, #236]	@ (800dc14 <udp_sendto+0x10c>)
 800db26:	f003 f9d1 	bl	8010ecc <iprintf>
 800db2a:	f06f 030f 	mvn.w	r3, #15
 800db2e:	e068      	b.n	800dc02 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d109      	bne.n	800db4a <udp_sendto+0x42>
 800db36:	4b35      	ldr	r3, [pc, #212]	@ (800dc0c <udp_sendto+0x104>)
 800db38:	f240 2219 	movw	r2, #537	@ 0x219
 800db3c:	4936      	ldr	r1, [pc, #216]	@ (800dc18 <udp_sendto+0x110>)
 800db3e:	4835      	ldr	r0, [pc, #212]	@ (800dc14 <udp_sendto+0x10c>)
 800db40:	f003 f9c4 	bl	8010ecc <iprintf>
 800db44:	f06f 030f 	mvn.w	r3, #15
 800db48:	e05b      	b.n	800dc02 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d109      	bne.n	800db64 <udp_sendto+0x5c>
 800db50:	4b2e      	ldr	r3, [pc, #184]	@ (800dc0c <udp_sendto+0x104>)
 800db52:	f240 221a 	movw	r2, #538	@ 0x21a
 800db56:	4931      	ldr	r1, [pc, #196]	@ (800dc1c <udp_sendto+0x114>)
 800db58:	482e      	ldr	r0, [pc, #184]	@ (800dc14 <udp_sendto+0x10c>)
 800db5a:	f003 f9b7 	bl	8010ecc <iprintf>
 800db5e:	f06f 030f 	mvn.w	r3, #15
 800db62:	e04e      	b.n	800dc02 <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 800db64:	482e      	ldr	r0, [pc, #184]	@ (800dc20 <udp_sendto+0x118>)
 800db66:	f003 fa21 	bl	8010fac <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	7a1b      	ldrb	r3, [r3, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d006      	beq.n	800db80 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	7a1b      	ldrb	r3, [r3, #8]
 800db76:	4618      	mov	r0, r3
 800db78:	f7f9 fc96 	bl	80074a8 <netif_get_by_index>
 800db7c:	6178      	str	r0, [r7, #20]
 800db7e:	e003      	b.n	800db88 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f001 fd5f 	bl	800f644 <ip4_route>
 800db86:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d12f      	bne.n	800dbee <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 800db8e:	4825      	ldr	r0, [pc, #148]	@ (800dc24 <udp_sendto+0x11c>)
 800db90:	f003 f99c 	bl	8010ecc <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d003      	beq.n	800dba2 <udp_sendto+0x9a>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	4619      	mov	r1, r3
 800dba0:	e000      	b.n	800dba4 <udp_sendto+0x9c>
 800dba2:	2100      	movs	r1, #0
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d004      	beq.n	800dbb4 <udp_sendto+0xac>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	3301      	adds	r3, #1
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	e000      	b.n	800dbb6 <udp_sendto+0xae>
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d004      	beq.n	800dbc6 <udp_sendto+0xbe>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3302      	adds	r3, #2
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	e000      	b.n	800dbc8 <udp_sendto+0xc0>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d003      	beq.n	800dbd6 <udp_sendto+0xce>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	3303      	adds	r3, #3
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	e000      	b.n	800dbd8 <udp_sendto+0xd0>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	4603      	mov	r3, r0
 800dbdc:	4812      	ldr	r0, [pc, #72]	@ (800dc28 <udp_sendto+0x120>)
 800dbde:	f003 f975 	bl	8010ecc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 800dbe2:	200a      	movs	r0, #10
 800dbe4:	f003 f984 	bl	8010ef0 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800dbe8:	f06f 0303 	mvn.w	r3, #3
 800dbec:	e009      	b.n	800dc02 <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800dbee:	887a      	ldrh	r2, [r7, #2]
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	9300      	str	r3, [sp, #0]
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	68b9      	ldr	r1, [r7, #8]
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f000 f816 	bl	800dc2c <udp_sendto_if>
 800dc00:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3718      	adds	r7, #24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	080141a4 	.word	0x080141a4
 800dc10:	0801439c 	.word	0x0801439c
 800dc14:	080141f8 	.word	0x080141f8
 800dc18:	080143b4 	.word	0x080143b4
 800dc1c:	080143d0 	.word	0x080143d0
 800dc20:	080143ec 	.word	0x080143ec
 800dc24:	080143f8 	.word	0x080143f8
 800dc28:	080142e8 	.word	0x080142e8

0800dc2c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d109      	bne.n	800dc54 <udp_sendto_if+0x28>
 800dc40:	4b2e      	ldr	r3, [pc, #184]	@ (800dcfc <udp_sendto_if+0xd0>)
 800dc42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dc46:	492e      	ldr	r1, [pc, #184]	@ (800dd00 <udp_sendto_if+0xd4>)
 800dc48:	482e      	ldr	r0, [pc, #184]	@ (800dd04 <udp_sendto_if+0xd8>)
 800dc4a:	f003 f93f 	bl	8010ecc <iprintf>
 800dc4e:	f06f 030f 	mvn.w	r3, #15
 800dc52:	e04f      	b.n	800dcf4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d109      	bne.n	800dc6e <udp_sendto_if+0x42>
 800dc5a:	4b28      	ldr	r3, [pc, #160]	@ (800dcfc <udp_sendto_if+0xd0>)
 800dc5c:	f240 2281 	movw	r2, #641	@ 0x281
 800dc60:	4929      	ldr	r1, [pc, #164]	@ (800dd08 <udp_sendto_if+0xdc>)
 800dc62:	4828      	ldr	r0, [pc, #160]	@ (800dd04 <udp_sendto_if+0xd8>)
 800dc64:	f003 f932 	bl	8010ecc <iprintf>
 800dc68:	f06f 030f 	mvn.w	r3, #15
 800dc6c:	e042      	b.n	800dcf4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d109      	bne.n	800dc88 <udp_sendto_if+0x5c>
 800dc74:	4b21      	ldr	r3, [pc, #132]	@ (800dcfc <udp_sendto_if+0xd0>)
 800dc76:	f240 2282 	movw	r2, #642	@ 0x282
 800dc7a:	4924      	ldr	r1, [pc, #144]	@ (800dd0c <udp_sendto_if+0xe0>)
 800dc7c:	4821      	ldr	r0, [pc, #132]	@ (800dd04 <udp_sendto_if+0xd8>)
 800dc7e:	f003 f925 	bl	8010ecc <iprintf>
 800dc82:	f06f 030f 	mvn.w	r3, #15
 800dc86:	e035      	b.n	800dcf4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d109      	bne.n	800dca2 <udp_sendto_if+0x76>
 800dc8e:	4b1b      	ldr	r3, [pc, #108]	@ (800dcfc <udp_sendto_if+0xd0>)
 800dc90:	f240 2283 	movw	r2, #643	@ 0x283
 800dc94:	491e      	ldr	r1, [pc, #120]	@ (800dd10 <udp_sendto_if+0xe4>)
 800dc96:	481b      	ldr	r0, [pc, #108]	@ (800dd04 <udp_sendto_if+0xd8>)
 800dc98:	f003 f918 	bl	8010ecc <iprintf>
 800dc9c:	f06f 030f 	mvn.w	r3, #15
 800dca0:	e028      	b.n	800dcf4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d009      	beq.n	800dcbc <udp_sendto_if+0x90>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d005      	beq.n	800dcbc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dcb8:	2be0      	cmp	r3, #224	@ 0xe0
 800dcba:	d103      	bne.n	800dcc4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	e00b      	b.n	800dcdc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	3304      	adds	r3, #4
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d002      	beq.n	800dcd8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800dcd2:	f06f 0303 	mvn.w	r3, #3
 800dcd6:	e00d      	b.n	800dcf4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800dcdc:	887a      	ldrh	r2, [r7, #2]
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	4613      	mov	r3, r2
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	68b9      	ldr	r1, [r7, #8]
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f000 f811 	bl	800dd14 <udp_sendto_if_src>
 800dcf2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3718      	adds	r7, #24
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	080141a4 	.word	0x080141a4
 800dd00:	08014410 	.word	0x08014410
 800dd04:	080141f8 	.word	0x080141f8
 800dd08:	0801442c 	.word	0x0801442c
 800dd0c:	08014448 	.word	0x08014448
 800dd10:	08014468 	.word	0x08014468

0800dd14 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08c      	sub	sp, #48	@ 0x30
 800dd18:	af04      	add	r7, sp, #16
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
 800dd20:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d109      	bne.n	800dd3c <udp_sendto_if_src+0x28>
 800dd28:	4b7a      	ldr	r3, [pc, #488]	@ (800df14 <udp_sendto_if_src+0x200>)
 800dd2a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800dd2e:	497a      	ldr	r1, [pc, #488]	@ (800df18 <udp_sendto_if_src+0x204>)
 800dd30:	487a      	ldr	r0, [pc, #488]	@ (800df1c <udp_sendto_if_src+0x208>)
 800dd32:	f003 f8cb 	bl	8010ecc <iprintf>
 800dd36:	f06f 030f 	mvn.w	r3, #15
 800dd3a:	e0e6      	b.n	800df0a <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d109      	bne.n	800dd56 <udp_sendto_if_src+0x42>
 800dd42:	4b74      	ldr	r3, [pc, #464]	@ (800df14 <udp_sendto_if_src+0x200>)
 800dd44:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800dd48:	4975      	ldr	r1, [pc, #468]	@ (800df20 <udp_sendto_if_src+0x20c>)
 800dd4a:	4874      	ldr	r0, [pc, #464]	@ (800df1c <udp_sendto_if_src+0x208>)
 800dd4c:	f003 f8be 	bl	8010ecc <iprintf>
 800dd50:	f06f 030f 	mvn.w	r3, #15
 800dd54:	e0d9      	b.n	800df0a <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d109      	bne.n	800dd70 <udp_sendto_if_src+0x5c>
 800dd5c:	4b6d      	ldr	r3, [pc, #436]	@ (800df14 <udp_sendto_if_src+0x200>)
 800dd5e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800dd62:	4970      	ldr	r1, [pc, #448]	@ (800df24 <udp_sendto_if_src+0x210>)
 800dd64:	486d      	ldr	r0, [pc, #436]	@ (800df1c <udp_sendto_if_src+0x208>)
 800dd66:	f003 f8b1 	bl	8010ecc <iprintf>
 800dd6a:	f06f 030f 	mvn.w	r3, #15
 800dd6e:	e0cc      	b.n	800df0a <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800dd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d109      	bne.n	800dd8a <udp_sendto_if_src+0x76>
 800dd76:	4b67      	ldr	r3, [pc, #412]	@ (800df14 <udp_sendto_if_src+0x200>)
 800dd78:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800dd7c:	496a      	ldr	r1, [pc, #424]	@ (800df28 <udp_sendto_if_src+0x214>)
 800dd7e:	4867      	ldr	r0, [pc, #412]	@ (800df1c <udp_sendto_if_src+0x208>)
 800dd80:	f003 f8a4 	bl	8010ecc <iprintf>
 800dd84:	f06f 030f 	mvn.w	r3, #15
 800dd88:	e0bf      	b.n	800df0a <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800dd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d109      	bne.n	800dda4 <udp_sendto_if_src+0x90>
 800dd90:	4b60      	ldr	r3, [pc, #384]	@ (800df14 <udp_sendto_if_src+0x200>)
 800dd92:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800dd96:	4965      	ldr	r1, [pc, #404]	@ (800df2c <udp_sendto_if_src+0x218>)
 800dd98:	4860      	ldr	r0, [pc, #384]	@ (800df1c <udp_sendto_if_src+0x208>)
 800dd9a:	f003 f897 	bl	8010ecc <iprintf>
 800dd9e:	f06f 030f 	mvn.w	r3, #15
 800dda2:	e0b2      	b.n	800df0a <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	8a5b      	ldrh	r3, [r3, #18]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d115      	bne.n	800ddd8 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 800ddac:	4860      	ldr	r0, [pc, #384]	@ (800df30 <udp_sendto_if_src+0x21c>)
 800ddae:	f003 f8fd 	bl	8010fac <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ddb2:	68f9      	ldr	r1, [r7, #12]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	8a5b      	ldrh	r3, [r3, #18]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f000 f8cc 	bl	800df58 <udp_bind>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ddc4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d005      	beq.n	800ddd8 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 800ddcc:	4859      	ldr	r0, [pc, #356]	@ (800df34 <udp_sendto_if_src+0x220>)
 800ddce:	f003 f8ed 	bl	8010fac <puts>
      return err;
 800ddd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ddd6:	e098      	b.n	800df0a <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	891b      	ldrh	r3, [r3, #8]
 800dddc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d902      	bls.n	800ddea <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 800dde4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dde8:	e08f      	b.n	800df0a <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ddea:	2108      	movs	r1, #8
 800ddec:	68b8      	ldr	r0, [r7, #8]
 800ddee:	f7f9 fe25 	bl	8007a3c <pbuf_add_header>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d01d      	beq.n	800de34 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ddf8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ddfc:	2108      	movs	r1, #8
 800ddfe:	2022      	movs	r0, #34	@ 0x22
 800de00:	f7f9 fbce 	bl	80075a0 <pbuf_alloc>
 800de04:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d105      	bne.n	800de18 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 800de0c:	484a      	ldr	r0, [pc, #296]	@ (800df38 <udp_sendto_if_src+0x224>)
 800de0e:	f003 f8cd 	bl	8010fac <puts>
      return ERR_MEM;
 800de12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de16:	e078      	b.n	800df0a <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	891b      	ldrh	r3, [r3, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d003      	beq.n	800de28 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800de20:	68b9      	ldr	r1, [r7, #8]
 800de22:	69f8      	ldr	r0, [r7, #28]
 800de24:	f7f9 ffb8 	bl	8007d98 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 800de28:	68ba      	ldr	r2, [r7, #8]
 800de2a:	69f9      	ldr	r1, [r7, #28]
 800de2c:	4843      	ldr	r0, [pc, #268]	@ (800df3c <udp_sendto_if_src+0x228>)
 800de2e:	f003 f84d 	bl	8010ecc <iprintf>
 800de32:	e005      	b.n	800de40 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 800de38:	68b9      	ldr	r1, [r7, #8]
 800de3a:	4841      	ldr	r0, [pc, #260]	@ (800df40 <udp_sendto_if_src+0x22c>)
 800de3c:	f003 f846 	bl	8010ecc <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	895b      	ldrh	r3, [r3, #10]
 800de44:	2b07      	cmp	r3, #7
 800de46:	d806      	bhi.n	800de56 <udp_sendto_if_src+0x142>
 800de48:	4b32      	ldr	r3, [pc, #200]	@ (800df14 <udp_sendto_if_src+0x200>)
 800de4a:	f240 320d 	movw	r2, #781	@ 0x30d
 800de4e:	493d      	ldr	r1, [pc, #244]	@ (800df44 <udp_sendto_if_src+0x230>)
 800de50:	4832      	ldr	r0, [pc, #200]	@ (800df1c <udp_sendto_if_src+0x208>)
 800de52:	f003 f83b 	bl	8010ecc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	8a5b      	ldrh	r3, [r3, #18]
 800de60:	4618      	mov	r0, r3
 800de62:	f7f8 fa31 	bl	80062c8 <lwip_htons>
 800de66:	4603      	mov	r3, r0
 800de68:	461a      	mov	r2, r3
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800de6e:	887b      	ldrh	r3, [r7, #2]
 800de70:	4618      	mov	r0, r3
 800de72:	f7f8 fa29 	bl	80062c8 <lwip_htons>
 800de76:	4603      	mov	r3, r0
 800de78:	461a      	mov	r2, r3
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	2200      	movs	r2, #0
 800de82:	719a      	strb	r2, [r3, #6]
 800de84:	2200      	movs	r2, #0
 800de86:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	891b      	ldrh	r3, [r3, #8]
 800de8c:	4619      	mov	r1, r3
 800de8e:	482e      	ldr	r0, [pc, #184]	@ (800df48 <udp_sendto_if_src+0x234>)
 800de90:	f003 f81c 	bl	8010ecc <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	891b      	ldrh	r3, [r3, #8]
 800de98:	4619      	mov	r1, r3
 800de9a:	482c      	ldr	r0, [pc, #176]	@ (800df4c <udp_sendto_if_src+0x238>)
 800de9c:	f003 f816 	bl	8010ecc <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	891b      	ldrh	r3, [r3, #8]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7f8 fa0f 	bl	80062c8 <lwip_htons>
 800deaa:	4603      	mov	r3, r0
 800deac:	461a      	mov	r2, r3
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800deb2:	2311      	movs	r3, #17
 800deb4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	7adb      	ldrb	r3, [r3, #11]
 800deba:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	88db      	ldrh	r3, [r3, #6]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	4619      	mov	r1, r3
 800dec4:	4822      	ldr	r0, [pc, #136]	@ (800df50 <udp_sendto_if_src+0x23c>)
 800dec6:	f003 f801 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 800deca:	7cfb      	ldrb	r3, [r7, #19]
 800decc:	4619      	mov	r1, r3
 800dece:	4821      	ldr	r0, [pc, #132]	@ (800df54 <udp_sendto_if_src+0x240>)
 800ded0:	f002 fffc 	bl	8010ecc <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	7a9b      	ldrb	r3, [r3, #10]
 800ded8:	7cb9      	ldrb	r1, [r7, #18]
 800deda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dedc:	9202      	str	r2, [sp, #8]
 800dede:	7cfa      	ldrb	r2, [r7, #19]
 800dee0:	9201      	str	r2, [sp, #4]
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	460b      	mov	r3, r1
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800deea:	69f8      	ldr	r0, [r7, #28]
 800deec:	f001 fd92 	bl	800fa14 <ip4_output_if_src>
 800def0:	4603      	mov	r3, r0
 800def2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800def4:	69fa      	ldr	r2, [r7, #28]
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	429a      	cmp	r2, r3
 800defa:	d004      	beq.n	800df06 <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 800defc:	69f8      	ldr	r0, [r7, #28]
 800defe:	f7f9 fe33 	bl	8007b68 <pbuf_free>
    q = NULL;
 800df02:	2300      	movs	r3, #0
 800df04:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800df06:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3720      	adds	r7, #32
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	080141a4 	.word	0x080141a4
 800df18:	08014488 	.word	0x08014488
 800df1c:	080141f8 	.word	0x080141f8
 800df20:	080144a8 	.word	0x080144a8
 800df24:	080144c8 	.word	0x080144c8
 800df28:	080144ec 	.word	0x080144ec
 800df2c:	08014510 	.word	0x08014510
 800df30:	08014534 	.word	0x08014534
 800df34:	08014564 	.word	0x08014564
 800df38:	08014588 	.word	0x08014588
 800df3c:	080145ac 	.word	0x080145ac
 800df40:	080145e4 	.word	0x080145e4
 800df44:	08014610 	.word	0x08014610
 800df48:	08014640 	.word	0x08014640
 800df4c:	0801466c 	.word	0x0801466c
 800df50:	08014690 	.word	0x08014690
 800df54:	080146b0 	.word	0x080146b0

0800df58 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b088      	sub	sp, #32
 800df5c:	af02      	add	r7, sp, #8
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	4613      	mov	r3, r2
 800df64:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d101      	bne.n	800df70 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800df6c:	4b65      	ldr	r3, [pc, #404]	@ (800e104 <udp_bind+0x1ac>)
 800df6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d109      	bne.n	800df8a <udp_bind+0x32>
 800df76:	4b64      	ldr	r3, [pc, #400]	@ (800e108 <udp_bind+0x1b0>)
 800df78:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800df7c:	4963      	ldr	r1, [pc, #396]	@ (800e10c <udp_bind+0x1b4>)
 800df7e:	4864      	ldr	r0, [pc, #400]	@ (800e110 <udp_bind+0x1b8>)
 800df80:	f002 ffa4 	bl	8010ecc <iprintf>
 800df84:	f06f 030f 	mvn.w	r3, #15
 800df88:	e0b7      	b.n	800e0fa <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 800df8a:	4862      	ldr	r0, [pc, #392]	@ (800e114 <udp_bind+0x1bc>)
 800df8c:	f002 ff9e 	bl	8010ecc <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d003      	beq.n	800df9e <udp_bind+0x46>
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	4619      	mov	r1, r3
 800df9c:	e000      	b.n	800dfa0 <udp_bind+0x48>
 800df9e:	2100      	movs	r1, #0
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d004      	beq.n	800dfb0 <udp_bind+0x58>
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	461a      	mov	r2, r3
 800dfae:	e000      	b.n	800dfb2 <udp_bind+0x5a>
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d004      	beq.n	800dfc2 <udp_bind+0x6a>
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	3302      	adds	r3, #2
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	e000      	b.n	800dfc4 <udp_bind+0x6c>
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <udp_bind+0x7a>
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	3303      	adds	r3, #3
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	e000      	b.n	800dfd4 <udp_bind+0x7c>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	9300      	str	r3, [sp, #0]
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	484f      	ldr	r0, [pc, #316]	@ (800e118 <udp_bind+0x1c0>)
 800dfda:	f002 ff77 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 800dfde:	88fb      	ldrh	r3, [r7, #6]
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	484e      	ldr	r0, [pc, #312]	@ (800e11c <udp_bind+0x1c4>)
 800dfe4:	f002 ff72 	bl	8010ecc <iprintf>

  rebind = 0;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dfec:	4b4c      	ldr	r3, [pc, #304]	@ (800e120 <udp_bind+0x1c8>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	617b      	str	r3, [r7, #20]
 800dff2:	e009      	b.n	800e008 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d102      	bne.n	800e002 <udp_bind+0xaa>
      rebind = 1;
 800dffc:	2301      	movs	r3, #1
 800dffe:	74fb      	strb	r3, [r7, #19]
      break;
 800e000:	e005      	b.n	800e00e <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	617b      	str	r3, [r7, #20]
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1f2      	bne.n	800dff4 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e00e:	88fb      	ldrh	r3, [r7, #6]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10c      	bne.n	800e02e <udp_bind+0xd6>
    port = udp_new_port();
 800e014:	f7ff fb14 	bl	800d640 <udp_new_port>
 800e018:	4603      	mov	r3, r0
 800e01a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e01c:	88fb      	ldrh	r3, [r7, #6]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d134      	bne.n	800e08c <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 800e022:	4840      	ldr	r0, [pc, #256]	@ (800e124 <udp_bind+0x1cc>)
 800e024:	f002 ffc2 	bl	8010fac <puts>
      return ERR_USE;
 800e028:	f06f 0307 	mvn.w	r3, #7
 800e02c:	e065      	b.n	800e0fa <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e02e:	4b3c      	ldr	r3, [pc, #240]	@ (800e120 <udp_bind+0x1c8>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	e027      	b.n	800e086 <udp_bind+0x12e>
      if (pcb != ipcb) {
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d020      	beq.n	800e080 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	8a5b      	ldrh	r3, [r3, #18]
 800e042:	88fa      	ldrh	r2, [r7, #6]
 800e044:	429a      	cmp	r2, r3
 800e046:	d11b      	bne.n	800e080 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e050:	429a      	cmp	r2, r3
 800e052:	d00d      	beq.n	800e070 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00a      	beq.n	800e070 <udp_bind+0x118>
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 800e062:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e064:	2b00      	cmp	r3, #0
 800e066:	d003      	beq.n	800e070 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d107      	bne.n	800e080 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 800e070:	88fb      	ldrh	r3, [r7, #6]
 800e072:	4619      	mov	r1, r3
 800e074:	482c      	ldr	r0, [pc, #176]	@ (800e128 <udp_bind+0x1d0>)
 800e076:	f002 ff29 	bl	8010ecc <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e07a:	f06f 0307 	mvn.w	r3, #7
 800e07e:	e03c      	b.n	800e0fa <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	617b      	str	r3, [r7, #20]
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1d4      	bne.n	800e036 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d002      	beq.n	800e098 <udp_bind+0x140>
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	e000      	b.n	800e09a <udp_bind+0x142>
 800e098:	2300      	movs	r3, #0
 800e09a:	68fa      	ldr	r2, [r7, #12]
 800e09c:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	88fa      	ldrh	r2, [r7, #6]
 800e0a2:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e0a4:	7cfb      	ldrb	r3, [r7, #19]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d106      	bne.n	800e0b8 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800e120 <udp_bind+0x1c8>)
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e0b2:	4a1b      	ldr	r2, [pc, #108]	@ (800e120 <udp_bind+0x1c8>)
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 800e0b8:	481c      	ldr	r0, [pc, #112]	@ (800e12c <udp_bind+0x1d4>)
 800e0ba:	f002 ff07 	bl	8010ecc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	0a1b      	lsrs	r3, r3, #8
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	0c1b      	lsrs	r3, r3, #16
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	4618      	mov	r0, r3
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	0e1b      	lsrs	r3, r3, #24
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	9300      	str	r3, [sp, #0]
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	480c      	ldr	r0, [pc, #48]	@ (800e118 <udp_bind+0x1c0>)
 800e0e8:	f002 fef0 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	8a5b      	ldrh	r3, [r3, #18]
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	480f      	ldr	r0, [pc, #60]	@ (800e130 <udp_bind+0x1d8>)
 800e0f4:	f002 feea 	bl	8010ecc <iprintf>
  return ERR_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3718      	adds	r7, #24
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	080153e0 	.word	0x080153e0
 800e108:	080141a4 	.word	0x080141a4
 800e10c:	080146d8 	.word	0x080146d8
 800e110:	080141f8 	.word	0x080141f8
 800e114:	080146f0 	.word	0x080146f0
 800e118:	080142e8 	.word	0x080142e8
 800e11c:	08014704 	.word	0x08014704
 800e120:	20007f4c 	.word	0x20007f4c
 800e124:	08014714 	.word	0x08014714
 800e128:	08014734 	.word	0x08014734
 800e12c:	0801476c 	.word	0x0801476c
 800e130:	08014780 	.word	0x08014780

0800e134 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d107      	bne.n	800e156 <udp_recv+0x22>
 800e146:	4b08      	ldr	r3, [pc, #32]	@ (800e168 <udp_recv+0x34>)
 800e148:	f240 428a 	movw	r2, #1162	@ 0x48a
 800e14c:	4907      	ldr	r1, [pc, #28]	@ (800e16c <udp_recv+0x38>)
 800e14e:	4808      	ldr	r0, [pc, #32]	@ (800e170 <udp_recv+0x3c>)
 800e150:	f002 febc 	bl	8010ecc <iprintf>
 800e154:	e005      	b.n	800e162 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	68ba      	ldr	r2, [r7, #8]
 800e15a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	61da      	str	r2, [r3, #28]
}
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	080141a4 	.word	0x080141a4
 800e16c:	08014800 	.word	0x08014800
 800e170:	080141f8 	.word	0x080141f8

0800e174 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d107      	bne.n	800e192 <udp_remove+0x1e>
 800e182:	4b19      	ldr	r3, [pc, #100]	@ (800e1e8 <udp_remove+0x74>)
 800e184:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800e188:	4918      	ldr	r1, [pc, #96]	@ (800e1ec <udp_remove+0x78>)
 800e18a:	4819      	ldr	r0, [pc, #100]	@ (800e1f0 <udp_remove+0x7c>)
 800e18c:	f002 fe9e 	bl	8010ecc <iprintf>
 800e190:	e026      	b.n	800e1e0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e192:	4b18      	ldr	r3, [pc, #96]	@ (800e1f4 <udp_remove+0x80>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d105      	bne.n	800e1a8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e19c:	4b15      	ldr	r3, [pc, #84]	@ (800e1f4 <udp_remove+0x80>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	4a14      	ldr	r2, [pc, #80]	@ (800e1f4 <udp_remove+0x80>)
 800e1a4:	6013      	str	r3, [r2, #0]
 800e1a6:	e017      	b.n	800e1d8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e1a8:	4b12      	ldr	r3, [pc, #72]	@ (800e1f4 <udp_remove+0x80>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	60fb      	str	r3, [r7, #12]
 800e1ae:	e010      	b.n	800e1d2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d009      	beq.n	800e1cc <udp_remove+0x58>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d104      	bne.n	800e1cc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68da      	ldr	r2, [r3, #12]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	60da      	str	r2, [r3, #12]
        break;
 800e1ca:	e005      	b.n	800e1d8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	60fb      	str	r3, [r7, #12]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d1eb      	bne.n	800e1b0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e1d8:	6879      	ldr	r1, [r7, #4]
 800e1da:	2000      	movs	r0, #0
 800e1dc:	f7f8 fd58 	bl	8006c90 <memp_free>
}
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	080141a4 	.word	0x080141a4
 800e1ec:	08014818 	.word	0x08014818
 800e1f0:	080141f8 	.word	0x080141f8
 800e1f4:	20007f4c 	.word	0x20007f4c

0800e1f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e1fe:	2000      	movs	r0, #0
 800e200:	f7f8 fcd6 	bl	8006bb0 <memp_malloc>
 800e204:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d007      	beq.n	800e21c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e20c:	2220      	movs	r2, #32
 800e20e:	2100      	movs	r1, #0
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f002 ffbb 	bl	801118c <memset>
    pcb->ttl = UDP_TTL;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	22ff      	movs	r2, #255	@ 0xff
 800e21a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e21c:	687b      	ldr	r3, [r7, #4]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
	...

0800e228 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d01e      	beq.n	800e276 <udp_netif_ip_addr_changed+0x4e>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d01a      	beq.n	800e276 <udp_netif_ip_addr_changed+0x4e>
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d017      	beq.n	800e276 <udp_netif_ip_addr_changed+0x4e>
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d013      	beq.n	800e276 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e24e:	4b0d      	ldr	r3, [pc, #52]	@ (800e284 <udp_netif_ip_addr_changed+0x5c>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	e00c      	b.n	800e270 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d103      	bne.n	800e26a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	60fb      	str	r3, [r7, #12]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1ef      	bne.n	800e256 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e276:	bf00      	nop
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	20007f4c 	.word	0x20007f4c

0800e288 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 800e288:	b590      	push	{r4, r7, lr}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 800e290:	481b      	ldr	r0, [pc, #108]	@ (800e300 <udp_debug_print+0x78>)
 800e292:	f002 fe8b 	bl	8010fac <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800e296:	481b      	ldr	r0, [pc, #108]	@ (800e304 <udp_debug_print+0x7c>)
 800e298:	f002 fe88 	bl	8010fac <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7f8 f810 	bl	80062c8 <lwip_htons>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	461c      	mov	r4, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	885b      	ldrh	r3, [r3, #2]
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f8 f808 	bl	80062c8 <lwip_htons>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4812      	ldr	r0, [pc, #72]	@ (800e308 <udp_debug_print+0x80>)
 800e2c0:	f002 fe04 	bl	8010ecc <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800e2c4:	480f      	ldr	r0, [pc, #60]	@ (800e304 <udp_debug_print+0x7c>)
 800e2c6:	f002 fe71 	bl	8010fac <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	889b      	ldrh	r3, [r3, #4]
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f7 fff9 	bl	80062c8 <lwip_htons>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	461c      	mov	r4, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	88db      	ldrh	r3, [r3, #6]
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f7 fff1 	bl	80062c8 <lwip_htons>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	4621      	mov	r1, r4
 800e2ec:	4807      	ldr	r0, [pc, #28]	@ (800e30c <udp_debug_print+0x84>)
 800e2ee:	f002 fded 	bl	8010ecc <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800e2f2:	4804      	ldr	r0, [pc, #16]	@ (800e304 <udp_debug_print+0x7c>)
 800e2f4:	f002 fe5a 	bl	8010fac <puts>
}
 800e2f8:	bf00      	nop
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd90      	pop	{r4, r7, pc}
 800e300:	08014830 	.word	0x08014830
 800e304:	0801483c 	.word	0x0801483c
 800e308:	08014860 	.word	0x08014860
 800e30c:	08014898 	.word	0x08014898

0800e310 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e318:	492b      	ldr	r1, [pc, #172]	@ (800e3c8 <etharp_free_entry+0xb8>)
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	4613      	mov	r3, r2
 800e31e:	005b      	lsls	r3, r3, #1
 800e320:	4413      	add	r3, r2
 800e322:	00db      	lsls	r3, r3, #3
 800e324:	440b      	add	r3, r1
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d013      	beq.n	800e354 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e32c:	4926      	ldr	r1, [pc, #152]	@ (800e3c8 <etharp_free_entry+0xb8>)
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	4613      	mov	r3, r2
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	4413      	add	r3, r2
 800e336:	00db      	lsls	r3, r3, #3
 800e338:	440b      	add	r3, r1
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7f9 fc13 	bl	8007b68 <pbuf_free>
    arp_table[i].q = NULL;
 800e342:	4921      	ldr	r1, [pc, #132]	@ (800e3c8 <etharp_free_entry+0xb8>)
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	4613      	mov	r3, r2
 800e348:	005b      	lsls	r3, r3, #1
 800e34a:	4413      	add	r3, r2
 800e34c:	00db      	lsls	r3, r3, #3
 800e34e:	440b      	add	r3, r1
 800e350:	2200      	movs	r2, #0
 800e352:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e354:	491c      	ldr	r1, [pc, #112]	@ (800e3c8 <etharp_free_entry+0xb8>)
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	4613      	mov	r3, r2
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	4413      	add	r3, r2
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	440b      	add	r3, r1
 800e362:	3314      	adds	r3, #20
 800e364:	2200      	movs	r2, #0
 800e366:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800e368:	4917      	ldr	r1, [pc, #92]	@ (800e3c8 <etharp_free_entry+0xb8>)
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	4613      	mov	r3, r2
 800e36e:	005b      	lsls	r3, r3, #1
 800e370:	4413      	add	r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	440b      	add	r3, r1
 800e376:	3312      	adds	r3, #18
 800e378:	2200      	movs	r2, #0
 800e37a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800e37c:	4912      	ldr	r1, [pc, #72]	@ (800e3c8 <etharp_free_entry+0xb8>)
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	4613      	mov	r3, r2
 800e382:	005b      	lsls	r3, r3, #1
 800e384:	4413      	add	r3, r2
 800e386:	00db      	lsls	r3, r3, #3
 800e388:	440b      	add	r3, r1
 800e38a:	3308      	adds	r3, #8
 800e38c:	2200      	movs	r2, #0
 800e38e:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800e390:	490d      	ldr	r1, [pc, #52]	@ (800e3c8 <etharp_free_entry+0xb8>)
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	4613      	mov	r3, r2
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	4413      	add	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	440b      	add	r3, r1
 800e39e:	3304      	adds	r3, #4
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800e3a4:	4908      	ldr	r1, [pc, #32]	@ (800e3c8 <etharp_free_entry+0xb8>)
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	4413      	add	r3, r2
 800e3ae:	00db      	lsls	r3, r3, #3
 800e3b0:	440b      	add	r3, r1
 800e3b2:	3308      	adds	r3, #8
 800e3b4:	4a05      	ldr	r2, [pc, #20]	@ (800e3cc <etharp_free_entry+0xbc>)
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	6810      	ldr	r0, [r2, #0]
 800e3ba:	6018      	str	r0, [r3, #0]
 800e3bc:	8892      	ldrh	r2, [r2, #4]
 800e3be:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800e3c0:	bf00      	nop
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	20007f50 	.word	0x20007f50
 800e3cc:	080153ec 	.word	0x080153ec

0800e3d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	607b      	str	r3, [r7, #4]
 800e3da:	e096      	b.n	800e50a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e3dc:	494f      	ldr	r1, [pc, #316]	@ (800e51c <etharp_tmr+0x14c>)
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	005b      	lsls	r3, r3, #1
 800e3e4:	4413      	add	r3, r2
 800e3e6:	00db      	lsls	r3, r3, #3
 800e3e8:	440b      	add	r3, r1
 800e3ea:	3314      	adds	r3, #20
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e3f0:	78fb      	ldrb	r3, [r7, #3]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f000 8086 	beq.w	800e504 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e3f8:	4948      	ldr	r1, [pc, #288]	@ (800e51c <etharp_tmr+0x14c>)
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	005b      	lsls	r3, r3, #1
 800e400:	4413      	add	r3, r2
 800e402:	00db      	lsls	r3, r3, #3
 800e404:	440b      	add	r3, r1
 800e406:	3312      	adds	r3, #18
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	3301      	adds	r3, #1
 800e40c:	b298      	uxth	r0, r3
 800e40e:	4943      	ldr	r1, [pc, #268]	@ (800e51c <etharp_tmr+0x14c>)
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	4613      	mov	r3, r2
 800e414:	005b      	lsls	r3, r3, #1
 800e416:	4413      	add	r3, r2
 800e418:	00db      	lsls	r3, r3, #3
 800e41a:	440b      	add	r3, r1
 800e41c:	3312      	adds	r3, #18
 800e41e:	4602      	mov	r2, r0
 800e420:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e422:	493e      	ldr	r1, [pc, #248]	@ (800e51c <etharp_tmr+0x14c>)
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	4613      	mov	r3, r2
 800e428:	005b      	lsls	r3, r3, #1
 800e42a:	4413      	add	r3, r2
 800e42c:	00db      	lsls	r3, r3, #3
 800e42e:	440b      	add	r3, r1
 800e430:	3312      	adds	r3, #18
 800e432:	881b      	ldrh	r3, [r3, #0]
 800e434:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e438:	d215      	bcs.n	800e466 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e43a:	4938      	ldr	r1, [pc, #224]	@ (800e51c <etharp_tmr+0x14c>)
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	4613      	mov	r3, r2
 800e440:	005b      	lsls	r3, r3, #1
 800e442:	4413      	add	r3, r2
 800e444:	00db      	lsls	r3, r3, #3
 800e446:	440b      	add	r3, r1
 800e448:	3314      	adds	r3, #20
 800e44a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d10e      	bne.n	800e46e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e450:	4932      	ldr	r1, [pc, #200]	@ (800e51c <etharp_tmr+0x14c>)
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	4613      	mov	r3, r2
 800e456:	005b      	lsls	r3, r3, #1
 800e458:	4413      	add	r3, r2
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	440b      	add	r3, r1
 800e45e:	3312      	adds	r3, #18
 800e460:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e462:	2b04      	cmp	r3, #4
 800e464:	d903      	bls.n	800e46e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7ff ff52 	bl	800e310 <etharp_free_entry>
 800e46c:	e04a      	b.n	800e504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e46e:	492b      	ldr	r1, [pc, #172]	@ (800e51c <etharp_tmr+0x14c>)
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	4613      	mov	r3, r2
 800e474:	005b      	lsls	r3, r3, #1
 800e476:	4413      	add	r3, r2
 800e478:	00db      	lsls	r3, r3, #3
 800e47a:	440b      	add	r3, r1
 800e47c:	3314      	adds	r3, #20
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	2b03      	cmp	r3, #3
 800e482:	d10a      	bne.n	800e49a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e484:	4925      	ldr	r1, [pc, #148]	@ (800e51c <etharp_tmr+0x14c>)
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	4613      	mov	r3, r2
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	4413      	add	r3, r2
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	440b      	add	r3, r1
 800e492:	3314      	adds	r3, #20
 800e494:	2204      	movs	r2, #4
 800e496:	701a      	strb	r2, [r3, #0]
 800e498:	e034      	b.n	800e504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e49a:	4920      	ldr	r1, [pc, #128]	@ (800e51c <etharp_tmr+0x14c>)
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	005b      	lsls	r3, r3, #1
 800e4a2:	4413      	add	r3, r2
 800e4a4:	00db      	lsls	r3, r3, #3
 800e4a6:	440b      	add	r3, r1
 800e4a8:	3314      	adds	r3, #20
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	2b04      	cmp	r3, #4
 800e4ae:	d10a      	bne.n	800e4c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e4b0:	491a      	ldr	r1, [pc, #104]	@ (800e51c <etharp_tmr+0x14c>)
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	005b      	lsls	r3, r3, #1
 800e4b8:	4413      	add	r3, r2
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	440b      	add	r3, r1
 800e4be:	3314      	adds	r3, #20
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	701a      	strb	r2, [r3, #0]
 800e4c4:	e01e      	b.n	800e504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e4c6:	4915      	ldr	r1, [pc, #84]	@ (800e51c <etharp_tmr+0x14c>)
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	4613      	mov	r3, r2
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	4413      	add	r3, r2
 800e4d0:	00db      	lsls	r3, r3, #3
 800e4d2:	440b      	add	r3, r1
 800e4d4:	3314      	adds	r3, #20
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d113      	bne.n	800e504 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e4dc:	490f      	ldr	r1, [pc, #60]	@ (800e51c <etharp_tmr+0x14c>)
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	005b      	lsls	r3, r3, #1
 800e4e4:	4413      	add	r3, r2
 800e4e6:	00db      	lsls	r3, r3, #3
 800e4e8:	440b      	add	r3, r1
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	6818      	ldr	r0, [r3, #0]
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	4413      	add	r3, r2
 800e4f6:	00db      	lsls	r3, r3, #3
 800e4f8:	4a08      	ldr	r2, [pc, #32]	@ (800e51c <etharp_tmr+0x14c>)
 800e4fa:	4413      	add	r3, r2
 800e4fc:	3304      	adds	r3, #4
 800e4fe:	4619      	mov	r1, r3
 800e500:	f000 fe6e 	bl	800f1e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3301      	adds	r3, #1
 800e508:	607b      	str	r3, [r7, #4]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2b09      	cmp	r3, #9
 800e50e:	f77f af65 	ble.w	800e3dc <etharp_tmr+0xc>
      }
    }
  }
}
 800e512:	bf00      	nop
 800e514:	bf00      	nop
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20007f50 	.word	0x20007f50

0800e520 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b08a      	sub	sp, #40	@ 0x28
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	460b      	mov	r3, r1
 800e52a:	607a      	str	r2, [r7, #4]
 800e52c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e52e:	230a      	movs	r3, #10
 800e530:	843b      	strh	r3, [r7, #32]
 800e532:	230a      	movs	r3, #10
 800e534:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800e536:	230a      	movs	r3, #10
 800e538:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e53e:	230a      	movs	r3, #10
 800e540:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e542:	2300      	movs	r3, #0
 800e544:	83bb      	strh	r3, [r7, #28]
 800e546:	2300      	movs	r3, #0
 800e548:	837b      	strh	r3, [r7, #26]
 800e54a:	2300      	movs	r3, #0
 800e54c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e54e:	2300      	movs	r3, #0
 800e550:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e552:	e0ae      	b.n	800e6b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e554:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e558:	49a6      	ldr	r1, [pc, #664]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e55a:	4613      	mov	r3, r2
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	4413      	add	r3, r2
 800e560:	00db      	lsls	r3, r3, #3
 800e562:	440b      	add	r3, r1
 800e564:	3314      	adds	r3, #20
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e56a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e56e:	2b0a      	cmp	r3, #10
 800e570:	d105      	bne.n	800e57e <etharp_find_entry+0x5e>
 800e572:	7dfb      	ldrb	r3, [r7, #23]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d102      	bne.n	800e57e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e578:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e57a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e57c:	e095      	b.n	800e6aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
 800e580:	2b00      	cmp	r3, #0
 800e582:	f000 8092 	beq.w	800e6aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e586:	7dfb      	ldrb	r3, [r7, #23]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d009      	beq.n	800e5a0 <etharp_find_entry+0x80>
 800e58c:	7dfb      	ldrb	r3, [r7, #23]
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d806      	bhi.n	800e5a0 <etharp_find_entry+0x80>
 800e592:	4b99      	ldr	r3, [pc, #612]	@ (800e7f8 <etharp_find_entry+0x2d8>)
 800e594:	f240 1223 	movw	r2, #291	@ 0x123
 800e598:	4998      	ldr	r1, [pc, #608]	@ (800e7fc <etharp_find_entry+0x2dc>)
 800e59a:	4899      	ldr	r0, [pc, #612]	@ (800e800 <etharp_find_entry+0x2e0>)
 800e59c:	f002 fc96 	bl	8010ecc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d020      	beq.n	800e5e8 <etharp_find_entry+0xc8>
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6819      	ldr	r1, [r3, #0]
 800e5aa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e5ae:	4891      	ldr	r0, [pc, #580]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	005b      	lsls	r3, r3, #1
 800e5b4:	4413      	add	r3, r2
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	4403      	add	r3, r0
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4299      	cmp	r1, r3
 800e5c0:	d112      	bne.n	800e5e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00c      	beq.n	800e5e2 <etharp_find_entry+0xc2>
 800e5c8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e5cc:	4989      	ldr	r1, [pc, #548]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	4413      	add	r3, r2
 800e5d4:	00db      	lsls	r3, r3, #3
 800e5d6:	440b      	add	r3, r1
 800e5d8:	3308      	adds	r3, #8
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d102      	bne.n	800e5e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e5e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e5e6:	e100      	b.n	800e7ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	d140      	bne.n	800e670 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e5ee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e5f2:	4980      	ldr	r1, [pc, #512]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	005b      	lsls	r3, r3, #1
 800e5f8:	4413      	add	r3, r2
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	440b      	add	r3, r1
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d01a      	beq.n	800e63a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e604:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e608:	497a      	ldr	r1, [pc, #488]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e60a:	4613      	mov	r3, r2
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	4413      	add	r3, r2
 800e610:	00db      	lsls	r3, r3, #3
 800e612:	440b      	add	r3, r1
 800e614:	3312      	adds	r3, #18
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	8bba      	ldrh	r2, [r7, #28]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d845      	bhi.n	800e6aa <etharp_find_entry+0x18a>
            old_queue = i;
 800e61e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e620:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e622:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e626:	4973      	ldr	r1, [pc, #460]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e628:	4613      	mov	r3, r2
 800e62a:	005b      	lsls	r3, r3, #1
 800e62c:	4413      	add	r3, r2
 800e62e:	00db      	lsls	r3, r3, #3
 800e630:	440b      	add	r3, r1
 800e632:	3312      	adds	r3, #18
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	83bb      	strh	r3, [r7, #28]
 800e638:	e037      	b.n	800e6aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e63a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e63e:	496d      	ldr	r1, [pc, #436]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e640:	4613      	mov	r3, r2
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	4413      	add	r3, r2
 800e646:	00db      	lsls	r3, r3, #3
 800e648:	440b      	add	r3, r1
 800e64a:	3312      	adds	r3, #18
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	8b7a      	ldrh	r2, [r7, #26]
 800e650:	429a      	cmp	r2, r3
 800e652:	d82a      	bhi.n	800e6aa <etharp_find_entry+0x18a>
            old_pending = i;
 800e654:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e656:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800e658:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e65c:	4965      	ldr	r1, [pc, #404]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e65e:	4613      	mov	r3, r2
 800e660:	005b      	lsls	r3, r3, #1
 800e662:	4413      	add	r3, r2
 800e664:	00db      	lsls	r3, r3, #3
 800e666:	440b      	add	r3, r1
 800e668:	3312      	adds	r3, #18
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	837b      	strh	r3, [r7, #26]
 800e66e:	e01c      	b.n	800e6aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e670:	7dfb      	ldrb	r3, [r7, #23]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d919      	bls.n	800e6aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e676:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e67a:	495e      	ldr	r1, [pc, #376]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e67c:	4613      	mov	r3, r2
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	4413      	add	r3, r2
 800e682:	00db      	lsls	r3, r3, #3
 800e684:	440b      	add	r3, r1
 800e686:	3312      	adds	r3, #18
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	8b3a      	ldrh	r2, [r7, #24]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d80c      	bhi.n	800e6aa <etharp_find_entry+0x18a>
            old_stable = i;
 800e690:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e692:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 800e694:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e698:	4956      	ldr	r1, [pc, #344]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e69a:	4613      	mov	r3, r2
 800e69c:	005b      	lsls	r3, r3, #1
 800e69e:	4413      	add	r3, r2
 800e6a0:	00db      	lsls	r3, r3, #3
 800e6a2:	440b      	add	r3, r1
 800e6a4:	3312      	adds	r3, #18
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e6aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e6b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e6b6:	2b09      	cmp	r3, #9
 800e6b8:	f77f af4c 	ble.w	800e554 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e6bc:	7afb      	ldrb	r3, [r7, #11]
 800e6be:	f003 0302 	and.w	r3, r3, #2
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d108      	bne.n	800e6d8 <etharp_find_entry+0x1b8>
 800e6c6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e6ca:	2b0a      	cmp	r3, #10
 800e6cc:	d107      	bne.n	800e6de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e6ce:	7afb      	ldrb	r3, [r7, #11]
 800e6d0:	f003 0301 	and.w	r3, r3, #1
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d102      	bne.n	800e6de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e6d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6dc:	e085      	b.n	800e7ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e6de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e6e2:	2b09      	cmp	r3, #9
 800e6e4:	dc02      	bgt.n	800e6ec <etharp_find_entry+0x1cc>
    i = empty;
 800e6e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e6ea:	e039      	b.n	800e760 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e6ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e6f0:	2b09      	cmp	r3, #9
 800e6f2:	dc14      	bgt.n	800e71e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e6f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e6f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e6f8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e6fc:	493d      	ldr	r1, [pc, #244]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e6fe:	4613      	mov	r3, r2
 800e700:	005b      	lsls	r3, r3, #1
 800e702:	4413      	add	r3, r2
 800e704:	00db      	lsls	r3, r3, #3
 800e706:	440b      	add	r3, r1
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d018      	beq.n	800e740 <etharp_find_entry+0x220>
 800e70e:	4b3a      	ldr	r3, [pc, #232]	@ (800e7f8 <etharp_find_entry+0x2d8>)
 800e710:	f240 126d 	movw	r2, #365	@ 0x16d
 800e714:	493b      	ldr	r1, [pc, #236]	@ (800e804 <etharp_find_entry+0x2e4>)
 800e716:	483a      	ldr	r0, [pc, #232]	@ (800e800 <etharp_find_entry+0x2e0>)
 800e718:	f002 fbd8 	bl	8010ecc <iprintf>
 800e71c:	e010      	b.n	800e740 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e71e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e722:	2b09      	cmp	r3, #9
 800e724:	dc02      	bgt.n	800e72c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e726:	8c3b      	ldrh	r3, [r7, #32]
 800e728:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e72a:	e009      	b.n	800e740 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e72c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e730:	2b09      	cmp	r3, #9
 800e732:	dc02      	bgt.n	800e73a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e734:	8bfb      	ldrh	r3, [r7, #30]
 800e736:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e738:	e002      	b.n	800e740 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e73a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e73e:	e054      	b.n	800e7ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e740:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e744:	2b09      	cmp	r3, #9
 800e746:	dd06      	ble.n	800e756 <etharp_find_entry+0x236>
 800e748:	4b2b      	ldr	r3, [pc, #172]	@ (800e7f8 <etharp_find_entry+0x2d8>)
 800e74a:	f240 127f 	movw	r2, #383	@ 0x17f
 800e74e:	492e      	ldr	r1, [pc, #184]	@ (800e808 <etharp_find_entry+0x2e8>)
 800e750:	482b      	ldr	r0, [pc, #172]	@ (800e800 <etharp_find_entry+0x2e0>)
 800e752:	f002 fbbb 	bl	8010ecc <iprintf>
    etharp_free_entry(i);
 800e756:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7ff fdd8 	bl	800e310 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e760:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e764:	2b09      	cmp	r3, #9
 800e766:	dd06      	ble.n	800e776 <etharp_find_entry+0x256>
 800e768:	4b23      	ldr	r3, [pc, #140]	@ (800e7f8 <etharp_find_entry+0x2d8>)
 800e76a:	f240 1283 	movw	r2, #387	@ 0x183
 800e76e:	4926      	ldr	r1, [pc, #152]	@ (800e808 <etharp_find_entry+0x2e8>)
 800e770:	4823      	ldr	r0, [pc, #140]	@ (800e800 <etharp_find_entry+0x2e0>)
 800e772:	f002 fbab 	bl	8010ecc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e776:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e77a:	491e      	ldr	r1, [pc, #120]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e77c:	4613      	mov	r3, r2
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	4413      	add	r3, r2
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	440b      	add	r3, r1
 800e786:	3314      	adds	r3, #20
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d006      	beq.n	800e79c <etharp_find_entry+0x27c>
 800e78e:	4b1a      	ldr	r3, [pc, #104]	@ (800e7f8 <etharp_find_entry+0x2d8>)
 800e790:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e794:	491d      	ldr	r1, [pc, #116]	@ (800e80c <etharp_find_entry+0x2ec>)
 800e796:	481a      	ldr	r0, [pc, #104]	@ (800e800 <etharp_find_entry+0x2e0>)
 800e798:	f002 fb98 	bl	8010ecc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00b      	beq.n	800e7ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e7a2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6819      	ldr	r1, [r3, #0]
 800e7aa:	4812      	ldr	r0, [pc, #72]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	005b      	lsls	r3, r3, #1
 800e7b0:	4413      	add	r3, r2
 800e7b2:	00db      	lsls	r3, r3, #3
 800e7b4:	4403      	add	r3, r0
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e7ba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e7be:	490d      	ldr	r1, [pc, #52]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	005b      	lsls	r3, r3, #1
 800e7c4:	4413      	add	r3, r2
 800e7c6:	00db      	lsls	r3, r3, #3
 800e7c8:	440b      	add	r3, r1
 800e7ca:	3312      	adds	r3, #18
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e7d0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800e7d4:	4907      	ldr	r1, [pc, #28]	@ (800e7f4 <etharp_find_entry+0x2d4>)
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	4413      	add	r3, r2
 800e7dc:	00db      	lsls	r3, r3, #3
 800e7de:	440b      	add	r3, r1
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e7e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3728      	adds	r7, #40	@ 0x28
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	20007f50 	.word	0x20007f50
 800e7f8:	080148cc 	.word	0x080148cc
 800e7fc:	08014904 	.word	0x08014904
 800e800:	08014944 	.word	0x08014944
 800e804:	0801496c 	.word	0x0801496c
 800e808:	08014984 	.word	0x08014984
 800e80c:	08014998 	.word	0x08014998

0800e810 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b088      	sub	sp, #32
 800e814:	af02      	add	r7, sp, #8
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
 800e81c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e824:	2b06      	cmp	r3, #6
 800e826:	d006      	beq.n	800e836 <etharp_update_arp_entry+0x26>
 800e828:	4b48      	ldr	r3, [pc, #288]	@ (800e94c <etharp_update_arp_entry+0x13c>)
 800e82a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e82e:	4948      	ldr	r1, [pc, #288]	@ (800e950 <etharp_update_arp_entry+0x140>)
 800e830:	4848      	ldr	r0, [pc, #288]	@ (800e954 <etharp_update_arp_entry+0x144>)
 800e832:	f002 fb4b 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d012      	beq.n	800e862 <etharp_update_arp_entry+0x52>
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00e      	beq.n	800e862 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	68f9      	ldr	r1, [r7, #12]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f001 f990 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 800e850:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e852:	2b00      	cmp	r3, #0
 800e854:	d105      	bne.n	800e862 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e85e:	2be0      	cmp	r3, #224	@ 0xe0
 800e860:	d102      	bne.n	800e868 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e862:	f06f 030f 	mvn.w	r3, #15
 800e866:	e06c      	b.n	800e942 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e868:	78fb      	ldrb	r3, [r7, #3]
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	4619      	mov	r1, r3
 800e86e:	68b8      	ldr	r0, [r7, #8]
 800e870:	f7ff fe56 	bl	800e520 <etharp_find_entry>
 800e874:	4603      	mov	r3, r0
 800e876:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e878:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	da02      	bge.n	800e886 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e880:	8afb      	ldrh	r3, [r7, #22]
 800e882:	b25b      	sxtb	r3, r3
 800e884:	e05d      	b.n	800e942 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e886:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e88a:	4933      	ldr	r1, [pc, #204]	@ (800e958 <etharp_update_arp_entry+0x148>)
 800e88c:	4613      	mov	r3, r2
 800e88e:	005b      	lsls	r3, r3, #1
 800e890:	4413      	add	r3, r2
 800e892:	00db      	lsls	r3, r3, #3
 800e894:	440b      	add	r3, r1
 800e896:	3314      	adds	r3, #20
 800e898:	2202      	movs	r2, #2
 800e89a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e89c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8a0:	492d      	ldr	r1, [pc, #180]	@ (800e958 <etharp_update_arp_entry+0x148>)
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	4413      	add	r3, r2
 800e8a8:	00db      	lsls	r3, r3, #3
 800e8aa:	440b      	add	r3, r1
 800e8ac:	3308      	adds	r3, #8
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e8b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	005b      	lsls	r3, r3, #1
 800e8ba:	4413      	add	r3, r2
 800e8bc:	00db      	lsls	r3, r3, #3
 800e8be:	3308      	adds	r3, #8
 800e8c0:	4a25      	ldr	r2, [pc, #148]	@ (800e958 <etharp_update_arp_entry+0x148>)
 800e8c2:	4413      	add	r3, r2
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	2206      	movs	r2, #6
 800e8c8:	6879      	ldr	r1, [r7, #4]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f002 fcd3 	bl	8011276 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e8d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8d4:	4920      	ldr	r1, [pc, #128]	@ (800e958 <etharp_update_arp_entry+0x148>)
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	005b      	lsls	r3, r3, #1
 800e8da:	4413      	add	r3, r2
 800e8dc:	00db      	lsls	r3, r3, #3
 800e8de:	440b      	add	r3, r1
 800e8e0:	3312      	adds	r3, #18
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e8e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8ea:	491b      	ldr	r1, [pc, #108]	@ (800e958 <etharp_update_arp_entry+0x148>)
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	005b      	lsls	r3, r3, #1
 800e8f0:	4413      	add	r3, r2
 800e8f2:	00db      	lsls	r3, r3, #3
 800e8f4:	440b      	add	r3, r1
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d021      	beq.n	800e940 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e8fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e900:	4915      	ldr	r1, [pc, #84]	@ (800e958 <etharp_update_arp_entry+0x148>)
 800e902:	4613      	mov	r3, r2
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	4413      	add	r3, r2
 800e908:	00db      	lsls	r3, r3, #3
 800e90a:	440b      	add	r3, r1
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e910:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e914:	4910      	ldr	r1, [pc, #64]	@ (800e958 <etharp_update_arp_entry+0x148>)
 800e916:	4613      	mov	r3, r2
 800e918:	005b      	lsls	r3, r3, #1
 800e91a:	4413      	add	r3, r2
 800e91c:	00db      	lsls	r3, r3, #3
 800e91e:	440b      	add	r3, r1
 800e920:	2200      	movs	r2, #0
 800e922:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e92a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6939      	ldr	r1, [r7, #16]
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f002 f829 	bl	801098c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e93a:	6938      	ldr	r0, [r7, #16]
 800e93c:	f7f9 f914 	bl	8007b68 <pbuf_free>
  }
  return ERR_OK;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	080148cc 	.word	0x080148cc
 800e950:	080149c4 	.word	0x080149c4
 800e954:	08014944 	.word	0x08014944
 800e958:	20007f50 	.word	0x20007f50

0800e95c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e964:	2300      	movs	r3, #0
 800e966:	60fb      	str	r3, [r7, #12]
 800e968:	e01e      	b.n	800e9a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e96a:	4913      	ldr	r1, [pc, #76]	@ (800e9b8 <etharp_cleanup_netif+0x5c>)
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	4613      	mov	r3, r2
 800e970:	005b      	lsls	r3, r3, #1
 800e972:	4413      	add	r3, r2
 800e974:	00db      	lsls	r3, r3, #3
 800e976:	440b      	add	r3, r1
 800e978:	3314      	adds	r3, #20
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e97e:	7afb      	ldrb	r3, [r7, #11]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00e      	beq.n	800e9a2 <etharp_cleanup_netif+0x46>
 800e984:	490c      	ldr	r1, [pc, #48]	@ (800e9b8 <etharp_cleanup_netif+0x5c>)
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	4613      	mov	r3, r2
 800e98a:	005b      	lsls	r3, r3, #1
 800e98c:	4413      	add	r3, r2
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	440b      	add	r3, r1
 800e992:	3308      	adds	r3, #8
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d102      	bne.n	800e9a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e99c:	68f8      	ldr	r0, [r7, #12]
 800e99e:	f7ff fcb7 	bl	800e310 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	60fb      	str	r3, [r7, #12]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2b09      	cmp	r3, #9
 800e9ac:	dddd      	ble.n	800e96a <etharp_cleanup_netif+0xe>
    }
  }
}
 800e9ae:	bf00      	nop
 800e9b0:	bf00      	nop
 800e9b2:	3710      	adds	r7, #16
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	20007f50 	.word	0x20007f50

0800e9bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e9bc:	b5b0      	push	{r4, r5, r7, lr}
 800e9be:	b08a      	sub	sp, #40	@ 0x28
 800e9c0:	af04      	add	r7, sp, #16
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d107      	bne.n	800e9dc <etharp_input+0x20>
 800e9cc:	4b3d      	ldr	r3, [pc, #244]	@ (800eac4 <etharp_input+0x108>)
 800e9ce:	f240 228a 	movw	r2, #650	@ 0x28a
 800e9d2:	493d      	ldr	r1, [pc, #244]	@ (800eac8 <etharp_input+0x10c>)
 800e9d4:	483d      	ldr	r0, [pc, #244]	@ (800eacc <etharp_input+0x110>)
 800e9d6:	f002 fa79 	bl	8010ecc <iprintf>
 800e9da:	e06f      	b.n	800eabc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	881b      	ldrh	r3, [r3, #0]
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9ec:	d10c      	bne.n	800ea08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e9f2:	2b06      	cmp	r3, #6
 800e9f4:	d108      	bne.n	800ea08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e9fa:	2b04      	cmp	r3, #4
 800e9fc:	d104      	bne.n	800ea08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	885b      	ldrh	r3, [r3, #2]
 800ea02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ea04:	2b08      	cmp	r3, #8
 800ea06:	d003      	beq.n	800ea10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7f9 f8ad 	bl	8007b68 <pbuf_free>
    return;
 800ea0e:	e055      	b.n	800eabc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	330e      	adds	r3, #14
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	3318      	adds	r3, #24
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	3304      	adds	r3, #4
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d102      	bne.n	800ea30 <etharp_input+0x74>
    for_us = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	74fb      	strb	r3, [r7, #19]
 800ea2e:	e009      	b.n	800ea44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	3304      	adds	r3, #4
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	bf0c      	ite	eq
 800ea3c:	2301      	moveq	r3, #1
 800ea3e:	2300      	movne	r3, #0
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f103 0208 	add.w	r2, r3, #8
 800ea4a:	7cfb      	ldrb	r3, [r7, #19]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d001      	beq.n	800ea54 <etharp_input+0x98>
 800ea50:	2301      	movs	r3, #1
 800ea52:	e000      	b.n	800ea56 <etharp_input+0x9a>
 800ea54:	2302      	movs	r3, #2
 800ea56:	f107 010c 	add.w	r1, r7, #12
 800ea5a:	6838      	ldr	r0, [r7, #0]
 800ea5c:	f7ff fed8 	bl	800e810 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	88db      	ldrh	r3, [r3, #6]
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea6a:	d003      	beq.n	800ea74 <etharp_input+0xb8>
 800ea6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea70:	d01e      	beq.n	800eab0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ea72:	e020      	b.n	800eab6 <etharp_input+0xfa>
      if (for_us) {
 800ea74:	7cfb      	ldrb	r3, [r7, #19]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d01c      	beq.n	800eab4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ea94:	2102      	movs	r1, #2
 800ea96:	9103      	str	r1, [sp, #12]
 800ea98:	f107 010c 	add.w	r1, r7, #12
 800ea9c:	9102      	str	r1, [sp, #8]
 800ea9e:	9201      	str	r2, [sp, #4]
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	462b      	mov	r3, r5
 800eaa4:	4622      	mov	r2, r4
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	6838      	ldr	r0, [r7, #0]
 800eaaa:	f000 faeb 	bl	800f084 <etharp_raw>
      break;
 800eaae:	e001      	b.n	800eab4 <etharp_input+0xf8>
      break;
 800eab0:	bf00      	nop
 800eab2:	e000      	b.n	800eab6 <etharp_input+0xfa>
      break;
 800eab4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7f9 f856 	bl	8007b68 <pbuf_free>
}
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bdb0      	pop	{r4, r5, r7, pc}
 800eac2:	bf00      	nop
 800eac4:	080148cc 	.word	0x080148cc
 800eac8:	08014a1c 	.word	0x08014a1c
 800eacc:	08014944 	.word	0x08014944

0800ead0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af02      	add	r7, sp, #8
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	4613      	mov	r3, r2
 800eadc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800eade:	79fa      	ldrb	r2, [r7, #7]
 800eae0:	4944      	ldr	r1, [pc, #272]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800eae2:	4613      	mov	r3, r2
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	4413      	add	r3, r2
 800eae8:	00db      	lsls	r3, r3, #3
 800eaea:	440b      	add	r3, r1
 800eaec:	3314      	adds	r3, #20
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d806      	bhi.n	800eb02 <etharp_output_to_arp_index+0x32>
 800eaf4:	4b40      	ldr	r3, [pc, #256]	@ (800ebf8 <etharp_output_to_arp_index+0x128>)
 800eaf6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800eafa:	4940      	ldr	r1, [pc, #256]	@ (800ebfc <etharp_output_to_arp_index+0x12c>)
 800eafc:	4840      	ldr	r0, [pc, #256]	@ (800ec00 <etharp_output_to_arp_index+0x130>)
 800eafe:	f002 f9e5 	bl	8010ecc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800eb02:	79fa      	ldrb	r2, [r7, #7]
 800eb04:	493b      	ldr	r1, [pc, #236]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800eb06:	4613      	mov	r3, r2
 800eb08:	005b      	lsls	r3, r3, #1
 800eb0a:	4413      	add	r3, r2
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	440b      	add	r3, r1
 800eb10:	3314      	adds	r3, #20
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d153      	bne.n	800ebc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800eb18:	79fa      	ldrb	r2, [r7, #7]
 800eb1a:	4936      	ldr	r1, [pc, #216]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	005b      	lsls	r3, r3, #1
 800eb20:	4413      	add	r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	440b      	add	r3, r1
 800eb26:	3312      	adds	r3, #18
 800eb28:	881b      	ldrh	r3, [r3, #0]
 800eb2a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800eb2e:	d919      	bls.n	800eb64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800eb30:	79fa      	ldrb	r2, [r7, #7]
 800eb32:	4613      	mov	r3, r2
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	4413      	add	r3, r2
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	4a2e      	ldr	r2, [pc, #184]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800eb3c:	4413      	add	r3, r2
 800eb3e:	3304      	adds	r3, #4
 800eb40:	4619      	mov	r1, r3
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f000 fb4c 	bl	800f1e0 <etharp_request>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d138      	bne.n	800ebc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eb4e:	79fa      	ldrb	r2, [r7, #7]
 800eb50:	4928      	ldr	r1, [pc, #160]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800eb52:	4613      	mov	r3, r2
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	4413      	add	r3, r2
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	440b      	add	r3, r1
 800eb5c:	3314      	adds	r3, #20
 800eb5e:	2203      	movs	r2, #3
 800eb60:	701a      	strb	r2, [r3, #0]
 800eb62:	e02d      	b.n	800ebc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800eb64:	79fa      	ldrb	r2, [r7, #7]
 800eb66:	4923      	ldr	r1, [pc, #140]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800eb68:	4613      	mov	r3, r2
 800eb6a:	005b      	lsls	r3, r3, #1
 800eb6c:	4413      	add	r3, r2
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	440b      	add	r3, r1
 800eb72:	3312      	adds	r3, #18
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800eb7a:	d321      	bcc.n	800ebc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800eb7c:	79fa      	ldrb	r2, [r7, #7]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	4413      	add	r3, r2
 800eb84:	00db      	lsls	r3, r3, #3
 800eb86:	4a1b      	ldr	r2, [pc, #108]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800eb88:	4413      	add	r3, r2
 800eb8a:	1d19      	adds	r1, r3, #4
 800eb8c:	79fa      	ldrb	r2, [r7, #7]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	005b      	lsls	r3, r3, #1
 800eb92:	4413      	add	r3, r2
 800eb94:	00db      	lsls	r3, r3, #3
 800eb96:	3308      	adds	r3, #8
 800eb98:	4a16      	ldr	r2, [pc, #88]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800eb9a:	4413      	add	r3, r2
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	461a      	mov	r2, r3
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f000 fafb 	bl	800f19c <etharp_request_dst>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d109      	bne.n	800ebc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ebac:	79fa      	ldrb	r2, [r7, #7]
 800ebae:	4911      	ldr	r1, [pc, #68]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	005b      	lsls	r3, r3, #1
 800ebb4:	4413      	add	r3, r2
 800ebb6:	00db      	lsls	r3, r3, #3
 800ebb8:	440b      	add	r3, r1
 800ebba:	3314      	adds	r3, #20
 800ebbc:	2203      	movs	r2, #3
 800ebbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800ebc6:	79fa      	ldrb	r2, [r7, #7]
 800ebc8:	4613      	mov	r3, r2
 800ebca:	005b      	lsls	r3, r3, #1
 800ebcc:	4413      	add	r3, r2
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	3308      	adds	r3, #8
 800ebd2:	4a08      	ldr	r2, [pc, #32]	@ (800ebf4 <etharp_output_to_arp_index+0x124>)
 800ebd4:	4413      	add	r3, r2
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ebdc:	9200      	str	r2, [sp, #0]
 800ebde:	460a      	mov	r2, r1
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f001 fed2 	bl	801098c <ethernet_output>
 800ebe8:	4603      	mov	r3, r0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20007f50 	.word	0x20007f50
 800ebf8:	080148cc 	.word	0x080148cc
 800ebfc:	08014a3c 	.word	0x08014a3c
 800ec00:	08014944 	.word	0x08014944

0800ec04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b08a      	sub	sp, #40	@ 0x28
 800ec08:	af02      	add	r7, sp, #8
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d106      	bne.n	800ec28 <etharp_output+0x24>
 800ec1a:	4b73      	ldr	r3, [pc, #460]	@ (800ede8 <etharp_output+0x1e4>)
 800ec1c:	f240 321e 	movw	r2, #798	@ 0x31e
 800ec20:	4972      	ldr	r1, [pc, #456]	@ (800edec <etharp_output+0x1e8>)
 800ec22:	4873      	ldr	r0, [pc, #460]	@ (800edf0 <etharp_output+0x1ec>)
 800ec24:	f002 f952 	bl	8010ecc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d106      	bne.n	800ec3c <etharp_output+0x38>
 800ec2e:	4b6e      	ldr	r3, [pc, #440]	@ (800ede8 <etharp_output+0x1e4>)
 800ec30:	f240 321f 	movw	r2, #799	@ 0x31f
 800ec34:	496f      	ldr	r1, [pc, #444]	@ (800edf4 <etharp_output+0x1f0>)
 800ec36:	486e      	ldr	r0, [pc, #440]	@ (800edf0 <etharp_output+0x1ec>)
 800ec38:	f002 f948 	bl	8010ecc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d106      	bne.n	800ec50 <etharp_output+0x4c>
 800ec42:	4b69      	ldr	r3, [pc, #420]	@ (800ede8 <etharp_output+0x1e4>)
 800ec44:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ec48:	496b      	ldr	r1, [pc, #428]	@ (800edf8 <etharp_output+0x1f4>)
 800ec4a:	4869      	ldr	r0, [pc, #420]	@ (800edf0 <etharp_output+0x1ec>)
 800ec4c:	f002 f93e 	bl	8010ecc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68f9      	ldr	r1, [r7, #12]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f000 ff8a 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ec62:	4b66      	ldr	r3, [pc, #408]	@ (800edfc <etharp_output+0x1f8>)
 800ec64:	61fb      	str	r3, [r7, #28]
 800ec66:	e0af      	b.n	800edc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ec70:	2be0      	cmp	r3, #224	@ 0xe0
 800ec72:	d118      	bne.n	800eca6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ec74:	2301      	movs	r3, #1
 800ec76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ec7c:	235e      	movs	r3, #94	@ 0x5e
 800ec7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	3301      	adds	r3, #1
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	3302      	adds	r3, #2
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	3303      	adds	r3, #3
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ec9e:	f107 0310 	add.w	r3, r7, #16
 800eca2:	61fb      	str	r3, [r7, #28]
 800eca4:	e090      	b.n	800edc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	3304      	adds	r3, #4
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	405a      	eors	r2, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4013      	ands	r3, r2
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d012      	beq.n	800ece4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ecc4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d00b      	beq.n	800ece4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	330c      	adds	r3, #12
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d003      	beq.n	800ecde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	330c      	adds	r3, #12
 800ecda:	61bb      	str	r3, [r7, #24]
 800ecdc:	e002      	b.n	800ece4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ecde:	f06f 0303 	mvn.w	r3, #3
 800ece2:	e07d      	b.n	800ede0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ece4:	4b46      	ldr	r3, [pc, #280]	@ (800ee00 <etharp_output+0x1fc>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	4619      	mov	r1, r3
 800ecea:	4a46      	ldr	r2, [pc, #280]	@ (800ee04 <etharp_output+0x200>)
 800ecec:	460b      	mov	r3, r1
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	440b      	add	r3, r1
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	4413      	add	r3, r2
 800ecf6:	3314      	adds	r3, #20
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d925      	bls.n	800ed4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ecfe:	4b40      	ldr	r3, [pc, #256]	@ (800ee00 <etharp_output+0x1fc>)
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	4619      	mov	r1, r3
 800ed04:	4a3f      	ldr	r2, [pc, #252]	@ (800ee04 <etharp_output+0x200>)
 800ed06:	460b      	mov	r3, r1
 800ed08:	005b      	lsls	r3, r3, #1
 800ed0a:	440b      	add	r3, r1
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	4413      	add	r3, r2
 800ed10:	3308      	adds	r3, #8
 800ed12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d117      	bne.n	800ed4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	4b38      	ldr	r3, [pc, #224]	@ (800ee00 <etharp_output+0x1fc>)
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	4618      	mov	r0, r3
 800ed24:	4937      	ldr	r1, [pc, #220]	@ (800ee04 <etharp_output+0x200>)
 800ed26:	4603      	mov	r3, r0
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	4403      	add	r3, r0
 800ed2c:	00db      	lsls	r3, r3, #3
 800ed2e:	440b      	add	r3, r1
 800ed30:	3304      	adds	r3, #4
 800ed32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d108      	bne.n	800ed4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ed38:	4b31      	ldr	r3, [pc, #196]	@ (800ee00 <etharp_output+0x1fc>)
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	68b9      	ldr	r1, [r7, #8]
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f7ff fec5 	bl	800ead0 <etharp_output_to_arp_index>
 800ed46:	4603      	mov	r3, r0
 800ed48:	e04a      	b.n	800ede0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	75fb      	strb	r3, [r7, #23]
 800ed4e:	e031      	b.n	800edb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ed50:	7dfa      	ldrb	r2, [r7, #23]
 800ed52:	492c      	ldr	r1, [pc, #176]	@ (800ee04 <etharp_output+0x200>)
 800ed54:	4613      	mov	r3, r2
 800ed56:	005b      	lsls	r3, r3, #1
 800ed58:	4413      	add	r3, r2
 800ed5a:	00db      	lsls	r3, r3, #3
 800ed5c:	440b      	add	r3, r1
 800ed5e:	3314      	adds	r3, #20
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d923      	bls.n	800edae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ed66:	7dfa      	ldrb	r2, [r7, #23]
 800ed68:	4926      	ldr	r1, [pc, #152]	@ (800ee04 <etharp_output+0x200>)
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	005b      	lsls	r3, r3, #1
 800ed6e:	4413      	add	r3, r2
 800ed70:	00db      	lsls	r3, r3, #3
 800ed72:	440b      	add	r3, r1
 800ed74:	3308      	adds	r3, #8
 800ed76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d117      	bne.n	800edae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	6819      	ldr	r1, [r3, #0]
 800ed82:	7dfa      	ldrb	r2, [r7, #23]
 800ed84:	481f      	ldr	r0, [pc, #124]	@ (800ee04 <etharp_output+0x200>)
 800ed86:	4613      	mov	r3, r2
 800ed88:	005b      	lsls	r3, r3, #1
 800ed8a:	4413      	add	r3, r2
 800ed8c:	00db      	lsls	r3, r3, #3
 800ed8e:	4403      	add	r3, r0
 800ed90:	3304      	adds	r3, #4
 800ed92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ed94:	4299      	cmp	r1, r3
 800ed96:	d10a      	bne.n	800edae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ed98:	4a19      	ldr	r2, [pc, #100]	@ (800ee00 <etharp_output+0x1fc>)
 800ed9a:	7dfb      	ldrb	r3, [r7, #23]
 800ed9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
 800eda0:	461a      	mov	r2, r3
 800eda2:	68b9      	ldr	r1, [r7, #8]
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f7ff fe93 	bl	800ead0 <etharp_output_to_arp_index>
 800edaa:	4603      	mov	r3, r0
 800edac:	e018      	b.n	800ede0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800edae:	7dfb      	ldrb	r3, [r7, #23]
 800edb0:	3301      	adds	r3, #1
 800edb2:	75fb      	strb	r3, [r7, #23]
 800edb4:	7dfb      	ldrb	r3, [r7, #23]
 800edb6:	2b09      	cmp	r3, #9
 800edb8:	d9ca      	bls.n	800ed50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800edba:	68ba      	ldr	r2, [r7, #8]
 800edbc:	69b9      	ldr	r1, [r7, #24]
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f000 f822 	bl	800ee08 <etharp_query>
 800edc4:	4603      	mov	r3, r0
 800edc6:	e00b      	b.n	800ede0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800edce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	68b9      	ldr	r1, [r7, #8]
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f001 fdd7 	bl	801098c <ethernet_output>
 800edde:	4603      	mov	r3, r0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3720      	adds	r7, #32
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	080148cc 	.word	0x080148cc
 800edec:	08014a1c 	.word	0x08014a1c
 800edf0:	08014944 	.word	0x08014944
 800edf4:	08014a6c 	.word	0x08014a6c
 800edf8:	08014a0c 	.word	0x08014a0c
 800edfc:	080153e4 	.word	0x080153e4
 800ee00:	20008040 	.word	0x20008040
 800ee04:	20007f50 	.word	0x20007f50

0800ee08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b08c      	sub	sp, #48	@ 0x30
 800ee0c:	af02      	add	r7, sp, #8
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3326      	adds	r3, #38	@ 0x26
 800ee18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ee1a:	23ff      	movs	r3, #255	@ 0xff
 800ee1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ee20:	2300      	movs	r3, #0
 800ee22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68f9      	ldr	r1, [r7, #12]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 fea0 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d10c      	bne.n	800ee50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ee3e:	2be0      	cmp	r3, #224	@ 0xe0
 800ee40:	d006      	beq.n	800ee50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d003      	beq.n	800ee50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ee50:	f06f 030f 	mvn.w	r3, #15
 800ee54:	e101      	b.n	800f05a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	2101      	movs	r1, #1
 800ee5a:	68b8      	ldr	r0, [r7, #8]
 800ee5c:	f7ff fb60 	bl	800e520 <etharp_find_entry>
 800ee60:	4603      	mov	r3, r0
 800ee62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ee64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	da02      	bge.n	800ee72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ee6c:	8a7b      	ldrh	r3, [r7, #18]
 800ee6e:	b25b      	sxtb	r3, r3
 800ee70:	e0f3      	b.n	800f05a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ee72:	8a7b      	ldrh	r3, [r7, #18]
 800ee74:	2b7e      	cmp	r3, #126	@ 0x7e
 800ee76:	d906      	bls.n	800ee86 <etharp_query+0x7e>
 800ee78:	4b7a      	ldr	r3, [pc, #488]	@ (800f064 <etharp_query+0x25c>)
 800ee7a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800ee7e:	497a      	ldr	r1, [pc, #488]	@ (800f068 <etharp_query+0x260>)
 800ee80:	487a      	ldr	r0, [pc, #488]	@ (800f06c <etharp_query+0x264>)
 800ee82:	f002 f823 	bl	8010ecc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ee86:	8a7b      	ldrh	r3, [r7, #18]
 800ee88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ee8a:	7c7a      	ldrb	r2, [r7, #17]
 800ee8c:	4978      	ldr	r1, [pc, #480]	@ (800f070 <etharp_query+0x268>)
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	00db      	lsls	r3, r3, #3
 800ee96:	440b      	add	r3, r1
 800ee98:	3314      	adds	r3, #20
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d115      	bne.n	800eecc <etharp_query+0xc4>
    is_new_entry = 1;
 800eea0:	2301      	movs	r3, #1
 800eea2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800eea4:	7c7a      	ldrb	r2, [r7, #17]
 800eea6:	4972      	ldr	r1, [pc, #456]	@ (800f070 <etharp_query+0x268>)
 800eea8:	4613      	mov	r3, r2
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	4413      	add	r3, r2
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	440b      	add	r3, r1
 800eeb2:	3314      	adds	r3, #20
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800eeb8:	7c7a      	ldrb	r2, [r7, #17]
 800eeba:	496d      	ldr	r1, [pc, #436]	@ (800f070 <etharp_query+0x268>)
 800eebc:	4613      	mov	r3, r2
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	4413      	add	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	440b      	add	r3, r1
 800eec6:	3308      	adds	r3, #8
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800eecc:	7c7a      	ldrb	r2, [r7, #17]
 800eece:	4968      	ldr	r1, [pc, #416]	@ (800f070 <etharp_query+0x268>)
 800eed0:	4613      	mov	r3, r2
 800eed2:	005b      	lsls	r3, r3, #1
 800eed4:	4413      	add	r3, r2
 800eed6:	00db      	lsls	r3, r3, #3
 800eed8:	440b      	add	r3, r1
 800eeda:	3314      	adds	r3, #20
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d011      	beq.n	800ef06 <etharp_query+0xfe>
 800eee2:	7c7a      	ldrb	r2, [r7, #17]
 800eee4:	4962      	ldr	r1, [pc, #392]	@ (800f070 <etharp_query+0x268>)
 800eee6:	4613      	mov	r3, r2
 800eee8:	005b      	lsls	r3, r3, #1
 800eeea:	4413      	add	r3, r2
 800eeec:	00db      	lsls	r3, r3, #3
 800eeee:	440b      	add	r3, r1
 800eef0:	3314      	adds	r3, #20
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d806      	bhi.n	800ef06 <etharp_query+0xfe>
 800eef8:	4b5a      	ldr	r3, [pc, #360]	@ (800f064 <etharp_query+0x25c>)
 800eefa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800eefe:	495d      	ldr	r1, [pc, #372]	@ (800f074 <etharp_query+0x26c>)
 800ef00:	485a      	ldr	r0, [pc, #360]	@ (800f06c <etharp_query+0x264>)
 800ef02:	f001 ffe3 	bl	8010ecc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ef06:	6a3b      	ldr	r3, [r7, #32]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d102      	bne.n	800ef12 <etharp_query+0x10a>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d10c      	bne.n	800ef2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ef12:	68b9      	ldr	r1, [r7, #8]
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f000 f963 	bl	800f1e0 <etharp_request>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d102      	bne.n	800ef2c <etharp_query+0x124>
      return result;
 800ef26:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ef2a:	e096      	b.n	800f05a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d106      	bne.n	800ef40 <etharp_query+0x138>
 800ef32:	4b4c      	ldr	r3, [pc, #304]	@ (800f064 <etharp_query+0x25c>)
 800ef34:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ef38:	494f      	ldr	r1, [pc, #316]	@ (800f078 <etharp_query+0x270>)
 800ef3a:	484c      	ldr	r0, [pc, #304]	@ (800f06c <etharp_query+0x264>)
 800ef3c:	f001 ffc6 	bl	8010ecc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ef40:	7c7a      	ldrb	r2, [r7, #17]
 800ef42:	494b      	ldr	r1, [pc, #300]	@ (800f070 <etharp_query+0x268>)
 800ef44:	4613      	mov	r3, r2
 800ef46:	005b      	lsls	r3, r3, #1
 800ef48:	4413      	add	r3, r2
 800ef4a:	00db      	lsls	r3, r3, #3
 800ef4c:	440b      	add	r3, r1
 800ef4e:	3314      	adds	r3, #20
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d917      	bls.n	800ef86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ef56:	4a49      	ldr	r2, [pc, #292]	@ (800f07c <etharp_query+0x274>)
 800ef58:	7c7b      	ldrb	r3, [r7, #17]
 800ef5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ef5c:	7c7a      	ldrb	r2, [r7, #17]
 800ef5e:	4613      	mov	r3, r2
 800ef60:	005b      	lsls	r3, r3, #1
 800ef62:	4413      	add	r3, r2
 800ef64:	00db      	lsls	r3, r3, #3
 800ef66:	3308      	adds	r3, #8
 800ef68:	4a41      	ldr	r2, [pc, #260]	@ (800f070 <etharp_query+0x268>)
 800ef6a:	4413      	add	r3, r2
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ef72:	9200      	str	r2, [sp, #0]
 800ef74:	697a      	ldr	r2, [r7, #20]
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f001 fd07 	bl	801098c <ethernet_output>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ef84:	e067      	b.n	800f056 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ef86:	7c7a      	ldrb	r2, [r7, #17]
 800ef88:	4939      	ldr	r1, [pc, #228]	@ (800f070 <etharp_query+0x268>)
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	4413      	add	r3, r2
 800ef90:	00db      	lsls	r3, r3, #3
 800ef92:	440b      	add	r3, r1
 800ef94:	3314      	adds	r3, #20
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d15c      	bne.n	800f056 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800efa4:	e01c      	b.n	800efe0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	895a      	ldrh	r2, [r3, #10]
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	891b      	ldrh	r3, [r3, #8]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d10a      	bne.n	800efc8 <etharp_query+0x1c0>
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d006      	beq.n	800efc8 <etharp_query+0x1c0>
 800efba:	4b2a      	ldr	r3, [pc, #168]	@ (800f064 <etharp_query+0x25c>)
 800efbc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800efc0:	492f      	ldr	r1, [pc, #188]	@ (800f080 <etharp_query+0x278>)
 800efc2:	482a      	ldr	r0, [pc, #168]	@ (800f06c <etharp_query+0x264>)
 800efc4:	f001 ff82 	bl	8010ecc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	7b1b      	ldrb	r3, [r3, #12]
 800efcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d002      	beq.n	800efda <etharp_query+0x1d2>
        copy_needed = 1;
 800efd4:	2301      	movs	r3, #1
 800efd6:	61bb      	str	r3, [r7, #24]
        break;
 800efd8:	e005      	b.n	800efe6 <etharp_query+0x1de>
      }
      p = p->next;
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	61fb      	str	r3, [r7, #28]
    while (p) {
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1df      	bne.n	800efa6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d007      	beq.n	800effc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800eff2:	200e      	movs	r0, #14
 800eff4:	f7f9 f824 	bl	8008040 <pbuf_clone>
 800eff8:	61f8      	str	r0, [r7, #28]
 800effa:	e004      	b.n	800f006 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f000:	69f8      	ldr	r0, [r7, #28]
 800f002:	f7f8 fe51 	bl	8007ca8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f006:	69fb      	ldr	r3, [r7, #28]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d021      	beq.n	800f050 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f00c:	7c7a      	ldrb	r2, [r7, #17]
 800f00e:	4918      	ldr	r1, [pc, #96]	@ (800f070 <etharp_query+0x268>)
 800f010:	4613      	mov	r3, r2
 800f012:	005b      	lsls	r3, r3, #1
 800f014:	4413      	add	r3, r2
 800f016:	00db      	lsls	r3, r3, #3
 800f018:	440b      	add	r3, r1
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00a      	beq.n	800f036 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f020:	7c7a      	ldrb	r2, [r7, #17]
 800f022:	4913      	ldr	r1, [pc, #76]	@ (800f070 <etharp_query+0x268>)
 800f024:	4613      	mov	r3, r2
 800f026:	005b      	lsls	r3, r3, #1
 800f028:	4413      	add	r3, r2
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	440b      	add	r3, r1
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4618      	mov	r0, r3
 800f032:	f7f8 fd99 	bl	8007b68 <pbuf_free>
      }
      arp_table[i].q = p;
 800f036:	7c7a      	ldrb	r2, [r7, #17]
 800f038:	490d      	ldr	r1, [pc, #52]	@ (800f070 <etharp_query+0x268>)
 800f03a:	4613      	mov	r3, r2
 800f03c:	005b      	lsls	r3, r3, #1
 800f03e:	4413      	add	r3, r2
 800f040:	00db      	lsls	r3, r3, #3
 800f042:	440b      	add	r3, r1
 800f044:	69fa      	ldr	r2, [r7, #28]
 800f046:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f04e:	e002      	b.n	800f056 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f050:	23ff      	movs	r3, #255	@ 0xff
 800f052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800f056:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3728      	adds	r7, #40	@ 0x28
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	080148cc 	.word	0x080148cc
 800f068:	08014a78 	.word	0x08014a78
 800f06c:	08014944 	.word	0x08014944
 800f070:	20007f50 	.word	0x20007f50
 800f074:	08014a88 	.word	0x08014a88
 800f078:	08014a6c 	.word	0x08014a6c
 800f07c:	20008040 	.word	0x20008040
 800f080:	08014ab0 	.word	0x08014ab0

0800f084 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08a      	sub	sp, #40	@ 0x28
 800f088:	af02      	add	r7, sp, #8
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
 800f090:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f092:	2300      	movs	r3, #0
 800f094:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d106      	bne.n	800f0aa <etharp_raw+0x26>
 800f09c:	4b3a      	ldr	r3, [pc, #232]	@ (800f188 <etharp_raw+0x104>)
 800f09e:	f240 4257 	movw	r2, #1111	@ 0x457
 800f0a2:	493a      	ldr	r1, [pc, #232]	@ (800f18c <etharp_raw+0x108>)
 800f0a4:	483a      	ldr	r0, [pc, #232]	@ (800f190 <etharp_raw+0x10c>)
 800f0a6:	f001 ff11 	bl	8010ecc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f0aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f0ae:	211c      	movs	r1, #28
 800f0b0:	200e      	movs	r0, #14
 800f0b2:	f7f8 fa75 	bl	80075a0 <pbuf_alloc>
 800f0b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d102      	bne.n	800f0c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f0be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f0c2:	e05d      	b.n	800f180 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	895b      	ldrh	r3, [r3, #10]
 800f0c8:	2b1b      	cmp	r3, #27
 800f0ca:	d806      	bhi.n	800f0da <etharp_raw+0x56>
 800f0cc:	4b2e      	ldr	r3, [pc, #184]	@ (800f188 <etharp_raw+0x104>)
 800f0ce:	f240 4262 	movw	r2, #1122	@ 0x462
 800f0d2:	4930      	ldr	r1, [pc, #192]	@ (800f194 <etharp_raw+0x110>)
 800f0d4:	482e      	ldr	r0, [pc, #184]	@ (800f190 <etharp_raw+0x10c>)
 800f0d6:	f001 fef9 	bl	8010ecc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f0e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7f7 f8f0 	bl	80062c8 <lwip_htons>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f0f6:	2b06      	cmp	r3, #6
 800f0f8:	d006      	beq.n	800f108 <etharp_raw+0x84>
 800f0fa:	4b23      	ldr	r3, [pc, #140]	@ (800f188 <etharp_raw+0x104>)
 800f0fc:	f240 4269 	movw	r2, #1129	@ 0x469
 800f100:	4925      	ldr	r1, [pc, #148]	@ (800f198 <etharp_raw+0x114>)
 800f102:	4823      	ldr	r0, [pc, #140]	@ (800f190 <etharp_raw+0x10c>)
 800f104:	f001 fee2 	bl	8010ecc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	3308      	adds	r3, #8
 800f10c:	2206      	movs	r2, #6
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f002 f8b0 	bl	8011276 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	3312      	adds	r3, #18
 800f11a:	2206      	movs	r2, #6
 800f11c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f11e:	4618      	mov	r0, r3
 800f120:	f002 f8a9 	bl	8011276 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	330e      	adds	r3, #14
 800f128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f12a:	6812      	ldr	r2, [r2, #0]
 800f12c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	3318      	adds	r3, #24
 800f132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f134:	6812      	ldr	r2, [r2, #0]
 800f136:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	2200      	movs	r2, #0
 800f13c:	701a      	strb	r2, [r3, #0]
 800f13e:	2200      	movs	r2, #0
 800f140:	f042 0201 	orr.w	r2, r2, #1
 800f144:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	2200      	movs	r2, #0
 800f14a:	f042 0208 	orr.w	r2, r2, #8
 800f14e:	709a      	strb	r2, [r3, #2]
 800f150:	2200      	movs	r2, #0
 800f152:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	2206      	movs	r2, #6
 800f158:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2204      	movs	r2, #4
 800f15e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f160:	f640 0306 	movw	r3, #2054	@ 0x806
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	69b9      	ldr	r1, [r7, #24]
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f001 fc0d 	bl	801098c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f172:	69b8      	ldr	r0, [r7, #24]
 800f174:	f7f8 fcf8 	bl	8007b68 <pbuf_free>
  p = NULL;
 800f178:	2300      	movs	r3, #0
 800f17a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f17c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3720      	adds	r7, #32
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	080148cc 	.word	0x080148cc
 800f18c:	08014a1c 	.word	0x08014a1c
 800f190:	08014944 	.word	0x08014944
 800f194:	08014acc 	.word	0x08014acc
 800f198:	08014b00 	.word	0x08014b00

0800f19c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b088      	sub	sp, #32
 800f1a0:	af04      	add	r7, sp, #16
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	9203      	str	r2, [sp, #12]
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	9202      	str	r2, [sp, #8]
 800f1c0:	4a06      	ldr	r2, [pc, #24]	@ (800f1dc <etharp_request_dst+0x40>)
 800f1c2:	9201      	str	r2, [sp, #4]
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	68f8      	ldr	r0, [r7, #12]
 800f1cc:	f7ff ff5a 	bl	800f084 <etharp_raw>
 800f1d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	080153ec 	.word	0x080153ec

0800f1e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f1ea:	4a05      	ldr	r2, [pc, #20]	@ (800f200 <etharp_request+0x20>)
 800f1ec:	6839      	ldr	r1, [r7, #0]
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f7ff ffd4 	bl	800f19c <etharp_request_dst>
 800f1f4:	4603      	mov	r3, r0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	080153e4 	.word	0x080153e4

0800f204 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b08e      	sub	sp, #56	@ 0x38
 800f208:	af04      	add	r7, sp, #16
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f20e:	4b95      	ldr	r3, [pc, #596]	@ (800f464 <icmp_input+0x260>)
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 030f 	and.w	r3, r3, #15
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	b2db      	uxtb	r3, r3
 800f222:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800f224:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f226:	2b13      	cmp	r3, #19
 800f228:	d805      	bhi.n	800f236 <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 800f22a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f22c:	4619      	mov	r1, r3
 800f22e:	488e      	ldr	r0, [pc, #568]	@ (800f468 <icmp_input+0x264>)
 800f230:	f001 fe4c 	bl	8010ecc <iprintf>
    goto lenerr;
 800f234:	e10a      	b.n	800f44c <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	895b      	ldrh	r3, [r3, #10]
 800f23a:	2b03      	cmp	r3, #3
 800f23c:	d806      	bhi.n	800f24c <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	891b      	ldrh	r3, [r3, #8]
 800f242:	4619      	mov	r1, r3
 800f244:	4889      	ldr	r0, [pc, #548]	@ (800f46c <icmp_input+0x268>)
 800f246:	f001 fe41 	bl	8010ecc <iprintf>
    goto lenerr;
 800f24a:	e0ff      	b.n	800f44c <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	785b      	ldrb	r3, [r3, #1]
 800f25c:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f260:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f264:	2b00      	cmp	r3, #0
 800f266:	f000 80ea 	beq.w	800f43e <icmp_input+0x23a>
 800f26a:	2b08      	cmp	r3, #8
 800f26c:	f040 80de 	bne.w	800f42c <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f270:	4b7f      	ldr	r3, [pc, #508]	@ (800f470 <icmp_input+0x26c>)
 800f272:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f274:	4b7b      	ldr	r3, [pc, #492]	@ (800f464 <icmp_input+0x260>)
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f27c:	2be0      	cmp	r3, #224	@ 0xe0
 800f27e:	d103      	bne.n	800f288 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 800f280:	487c      	ldr	r0, [pc, #496]	@ (800f474 <icmp_input+0x270>)
 800f282:	f001 fe93 	bl	8010fac <puts>
        goto icmperr;
 800f286:	e0e5      	b.n	800f454 <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f288:	4b76      	ldr	r3, [pc, #472]	@ (800f464 <icmp_input+0x260>)
 800f28a:	695b      	ldr	r3, [r3, #20]
 800f28c:	4a75      	ldr	r2, [pc, #468]	@ (800f464 <icmp_input+0x260>)
 800f28e:	6812      	ldr	r2, [r2, #0]
 800f290:	4611      	mov	r1, r2
 800f292:	4618      	mov	r0, r3
 800f294:	f000 fc6c 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d003      	beq.n	800f2a6 <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 800f29e:	4876      	ldr	r0, [pc, #472]	@ (800f478 <icmp_input+0x274>)
 800f2a0:	f001 fe84 	bl	8010fac <puts>
        goto icmperr;
 800f2a4:	e0d6      	b.n	800f454 <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 800f2a6:	4875      	ldr	r0, [pc, #468]	@ (800f47c <icmp_input+0x278>)
 800f2a8:	f001 fe80 	bl	8010fac <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	891b      	ldrh	r3, [r3, #8]
 800f2b0:	2b07      	cmp	r3, #7
 800f2b2:	d803      	bhi.n	800f2bc <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 800f2b4:	4872      	ldr	r0, [pc, #456]	@ (800f480 <icmp_input+0x27c>)
 800f2b6:	f001 fe79 	bl	8010fac <puts>
        goto lenerr;
 800f2ba:	e0c7      	b.n	800f44c <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f2bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f2be:	330e      	adds	r3, #14
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f7f8 fbba 	bl	8007a3c <pbuf_add_header>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d057      	beq.n	800f37e <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	891a      	ldrh	r2, [r3, #8]
 800f2d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f2d4:	4413      	add	r3, r2
 800f2d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	891b      	ldrh	r3, [r3, #8]
 800f2dc:	8b7a      	ldrh	r2, [r7, #26]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d203      	bcs.n	800f2ea <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 800f2e2:	4868      	ldr	r0, [pc, #416]	@ (800f484 <icmp_input+0x280>)
 800f2e4:	f001 fe62 	bl	8010fac <puts>
          goto icmperr;
 800f2e8:	e0b4      	b.n	800f454 <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f2ea:	8b7b      	ldrh	r3, [r7, #26]
 800f2ec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	200e      	movs	r0, #14
 800f2f4:	f7f8 f954 	bl	80075a0 <pbuf_alloc>
 800f2f8:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d103      	bne.n	800f308 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 800f300:	4861      	ldr	r0, [pc, #388]	@ (800f488 <icmp_input+0x284>)
 800f302:	f001 fe53 	bl	8010fac <puts>
          goto icmperr;
 800f306:	e0a5      	b.n	800f454 <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	895b      	ldrh	r3, [r3, #10]
 800f30c:	461a      	mov	r2, r3
 800f30e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f310:	3308      	adds	r3, #8
 800f312:	429a      	cmp	r2, r3
 800f314:	d206      	bcs.n	800f324 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 800f316:	485d      	ldr	r0, [pc, #372]	@ (800f48c <icmp_input+0x288>)
 800f318:	f001 fdd8 	bl	8010ecc <iprintf>
          pbuf_free(r);
 800f31c:	6978      	ldr	r0, [r7, #20]
 800f31e:	f7f8 fc23 	bl	8007b68 <pbuf_free>
          goto icmperr;
 800f322:	e097      	b.n	800f454 <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f32a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f32c:	4618      	mov	r0, r3
 800f32e:	f001 ffa2 	bl	8011276 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f332:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f334:	4619      	mov	r1, r3
 800f336:	6978      	ldr	r0, [r7, #20]
 800f338:	f7f8 fb90 	bl	8007a5c <pbuf_remove_header>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d009      	beq.n	800f356 <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f342:	4b53      	ldr	r3, [pc, #332]	@ (800f490 <icmp_input+0x28c>)
 800f344:	22b6      	movs	r2, #182	@ 0xb6
 800f346:	4953      	ldr	r1, [pc, #332]	@ (800f494 <icmp_input+0x290>)
 800f348:	4853      	ldr	r0, [pc, #332]	@ (800f498 <icmp_input+0x294>)
 800f34a:	f001 fdbf 	bl	8010ecc <iprintf>
          pbuf_free(r);
 800f34e:	6978      	ldr	r0, [r7, #20]
 800f350:	f7f8 fc0a 	bl	8007b68 <pbuf_free>
          goto icmperr;
 800f354:	e07e      	b.n	800f454 <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f356:	6879      	ldr	r1, [r7, #4]
 800f358:	6978      	ldr	r0, [r7, #20]
 800f35a:	f7f8 fd2d 	bl	8007db8 <pbuf_copy>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d006      	beq.n	800f372 <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 800f364:	484d      	ldr	r0, [pc, #308]	@ (800f49c <icmp_input+0x298>)
 800f366:	f001 fdb1 	bl	8010ecc <iprintf>
          pbuf_free(r);
 800f36a:	6978      	ldr	r0, [r7, #20]
 800f36c:	f7f8 fbfc 	bl	8007b68 <pbuf_free>
          goto icmperr;
 800f370:	e070      	b.n	800f454 <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7f8 fbf8 	bl	8007b68 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	607b      	str	r3, [r7, #4]
 800f37c:	e00f      	b.n	800f39e <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f37e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f380:	330e      	adds	r3, #14
 800f382:	4619      	mov	r1, r3
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7f8 fb69 	bl	8007a5c <pbuf_remove_header>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d006      	beq.n	800f39e <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f390:	4b3f      	ldr	r3, [pc, #252]	@ (800f490 <icmp_input+0x28c>)
 800f392:	22c7      	movs	r2, #199	@ 0xc7
 800f394:	4942      	ldr	r1, [pc, #264]	@ (800f4a0 <icmp_input+0x29c>)
 800f396:	4840      	ldr	r0, [pc, #256]	@ (800f498 <icmp_input+0x294>)
 800f398:	f001 fd98 	bl	8010ecc <iprintf>
          goto icmperr;
 800f39c:	e05a      	b.n	800f454 <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f3a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7f8 fb47 	bl	8007a3c <pbuf_add_header>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d003      	beq.n	800f3bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 800f3b4:	483b      	ldr	r0, [pc, #236]	@ (800f4a4 <icmp_input+0x2a0>)
 800f3b6:	f001 fd89 	bl	8010ecc <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f3ba:	e042      	b.n	800f442 <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f3ca:	4b26      	ldr	r3, [pc, #152]	@ (800f464 <icmp_input+0x260>)
 800f3cc:	691a      	ldr	r2, [r3, #16]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	709a      	strb	r2, [r3, #2]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	22ff      	movs	r2, #255	@ 0xff
 800f3e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	729a      	strb	r2, [r3, #10]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	9302      	str	r3, [sp, #8]
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	9301      	str	r3, [sp, #4]
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	23ff      	movs	r3, #255	@ 0xff
 800f400:	2200      	movs	r2, #0
 800f402:	69f9      	ldr	r1, [r7, #28]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 fadb 	bl	800f9c0 <ip4_output_if>
 800f40a:	4603      	mov	r3, r0
 800f40c:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 800f40e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d015      	beq.n	800f442 <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 800f416:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7f6 ff34 	bl	8006288 <lwip_strerr>
 800f420:	4603      	mov	r3, r0
 800f422:	4619      	mov	r1, r3
 800f424:	4820      	ldr	r0, [pc, #128]	@ (800f4a8 <icmp_input+0x2a4>)
 800f426:	f001 fd51 	bl	8010ecc <iprintf>
      break;
 800f42a:	e00a      	b.n	800f442 <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 800f42c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f430:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f434:	4619      	mov	r1, r3
 800f436:	481d      	ldr	r0, [pc, #116]	@ (800f4ac <icmp_input+0x2a8>)
 800f438:	f001 fd48 	bl	8010ecc <iprintf>
 800f43c:	e002      	b.n	800f444 <icmp_input+0x240>
      break;
 800f43e:	bf00      	nop
 800f440:	e000      	b.n	800f444 <icmp_input+0x240>
      break;
 800f442:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f7f8 fb8f 	bl	8007b68 <pbuf_free>
  return;
 800f44a:	e007      	b.n	800f45c <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7f8 fb8b 	bl	8007b68 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f452:	e003      	b.n	800f45c <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7f8 fb87 	bl	8007b68 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f45a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f45c:	3728      	adds	r7, #40	@ 0x28
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	20004f90 	.word	0x20004f90
 800f468:	08014b44 	.word	0x08014b44
 800f46c:	08014b78 	.word	0x08014b78
 800f470:	20004fa4 	.word	0x20004fa4
 800f474:	08014ba8 	.word	0x08014ba8
 800f478:	08014bd4 	.word	0x08014bd4
 800f47c:	08014c00 	.word	0x08014c00
 800f480:	08014c14 	.word	0x08014c14
 800f484:	08014c38 	.word	0x08014c38
 800f488:	08014c74 	.word	0x08014c74
 800f48c:	08014c9c 	.word	0x08014c9c
 800f490:	08014cc4 	.word	0x08014cc4
 800f494:	08014cfc 	.word	0x08014cfc
 800f498:	08014d34 	.word	0x08014d34
 800f49c:	08014d5c 	.word	0x08014d5c
 800f4a0:	08014d84 	.word	0x08014d84
 800f4a4:	08014db8 	.word	0x08014db8
 800f4a8:	08014ddc 	.word	0x08014ddc
 800f4ac:	08014e0c 	.word	0x08014e0c

0800f4b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f4bc:	78fb      	ldrb	r3, [r7, #3]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	2103      	movs	r1, #3
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 f814 	bl	800f4f0 <icmp_send_response>
}
 800f4c8:	bf00      	nop
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f4dc:	78fb      	ldrb	r3, [r7, #3]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	210b      	movs	r1, #11
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 f804 	bl	800f4f0 <icmp_send_response>
}
 800f4e8:	bf00      	nop
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b08c      	sub	sp, #48	@ 0x30
 800f4f4:	af04      	add	r7, sp, #16
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	70fb      	strb	r3, [r7, #3]
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f500:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f504:	2124      	movs	r1, #36	@ 0x24
 800f506:	2022      	movs	r0, #34	@ 0x22
 800f508:	f7f8 f84a 	bl	80075a0 <pbuf_alloc>
 800f50c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d103      	bne.n	800f51c <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 800f514:	4844      	ldr	r0, [pc, #272]	@ (800f628 <icmp_send_response+0x138>)
 800f516:	f001 fd49 	bl	8010fac <puts>
 800f51a:	e082      	b.n	800f622 <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	895b      	ldrh	r3, [r3, #10]
 800f520:	2b23      	cmp	r3, #35	@ 0x23
 800f522:	d806      	bhi.n	800f532 <icmp_send_response+0x42>
 800f524:	4b41      	ldr	r3, [pc, #260]	@ (800f62c <icmp_send_response+0x13c>)
 800f526:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800f52a:	4941      	ldr	r1, [pc, #260]	@ (800f630 <icmp_send_response+0x140>)
 800f52c:	4841      	ldr	r0, [pc, #260]	@ (800f634 <icmp_send_response+0x144>)
 800f52e:	f001 fccd 	bl	8010ecc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 800f538:	483f      	ldr	r0, [pc, #252]	@ (800f638 <icmp_send_response+0x148>)
 800f53a:	f001 fcc7 	bl	8010ecc <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	b2db      	uxtb	r3, r3
 800f544:	4619      	mov	r1, r3
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	0a1b      	lsrs	r3, r3, #8
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	461a      	mov	r2, r3
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	0c1b      	lsrs	r3, r3, #16
 800f556:	b2db      	uxtb	r3, r3
 800f558:	4618      	mov	r0, r3
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	0e1b      	lsrs	r3, r3, #24
 800f560:	b2db      	uxtb	r3, r3
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	4603      	mov	r3, r0
 800f566:	4835      	ldr	r0, [pc, #212]	@ (800f63c <icmp_send_response+0x14c>)
 800f568:	f001 fcb0 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 800f56c:	4834      	ldr	r0, [pc, #208]	@ (800f640 <icmp_send_response+0x150>)
 800f56e:	f001 fcad 	bl	8010ecc <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	691b      	ldr	r3, [r3, #16]
 800f576:	b2db      	uxtb	r3, r3
 800f578:	4619      	mov	r1, r3
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	0a1b      	lsrs	r3, r3, #8
 800f580:	b2db      	uxtb	r3, r3
 800f582:	461a      	mov	r2, r3
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	0c1b      	lsrs	r3, r3, #16
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	4618      	mov	r0, r3
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	0e1b      	lsrs	r3, r3, #24
 800f594:	b2db      	uxtb	r3, r3
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	4603      	mov	r3, r0
 800f59a:	4828      	ldr	r0, [pc, #160]	@ (800f63c <icmp_send_response+0x14c>)
 800f59c:	f001 fc96 	bl	8010ecc <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 800f5a0:	200a      	movs	r0, #10
 800f5a2:	f001 fca5 	bl	8010ef0 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	78fa      	ldrb	r2, [r7, #3]
 800f5b0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	78ba      	ldrb	r2, [r7, #2]
 800f5b6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	711a      	strb	r2, [r3, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	719a      	strb	r2, [r3, #6]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	f103 0008 	add.w	r0, r3, #8
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	221c      	movs	r2, #28
 800f5da:	4619      	mov	r1, r3
 800f5dc:	f001 fe4b 	bl	8011276 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f5e6:	f107 030c 	add.w	r3, r7, #12
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 f82a 	bl	800f644 <ip4_route>
 800f5f0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d011      	beq.n	800f61c <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	709a      	strb	r2, [r3, #2]
 800f5fe:	2200      	movs	r2, #0
 800f600:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f602:	f107 020c 	add.w	r2, r7, #12
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	9302      	str	r3, [sp, #8]
 800f60a:	2301      	movs	r3, #1
 800f60c:	9301      	str	r3, [sp, #4]
 800f60e:	2300      	movs	r3, #0
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	23ff      	movs	r3, #255	@ 0xff
 800f614:	2100      	movs	r1, #0
 800f616:	69f8      	ldr	r0, [r7, #28]
 800f618:	f000 f9d2 	bl	800f9c0 <ip4_output_if>
  }
  pbuf_free(q);
 800f61c:	69f8      	ldr	r0, [r7, #28]
 800f61e:	f7f8 faa3 	bl	8007b68 <pbuf_free>
}
 800f622:	3720      	adds	r7, #32
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	08014e40 	.word	0x08014e40
 800f62c:	08014cc4 	.word	0x08014cc4
 800f630:	08014e80 	.word	0x08014e80
 800f634:	08014d34 	.word	0x08014d34
 800f638:	08014eac 	.word	0x08014eac
 800f63c:	08014ec8 	.word	0x08014ec8
 800f640:	08014ed8 	.word	0x08014ed8

0800f644 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f64c:	4b33      	ldr	r3, [pc, #204]	@ (800f71c <ip4_route+0xd8>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	60fb      	str	r3, [r7, #12]
 800f652:	e036      	b.n	800f6c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f65a:	f003 0301 	and.w	r3, r3, #1
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	2b00      	cmp	r3, #0
 800f662:	d02b      	beq.n	800f6bc <ip4_route+0x78>
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f66a:	089b      	lsrs	r3, r3, #2
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	b2db      	uxtb	r3, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	d022      	beq.n	800f6bc <ip4_route+0x78>
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	3304      	adds	r3, #4
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d01d      	beq.n	800f6bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	3304      	adds	r3, #4
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	405a      	eors	r2, r3
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	3308      	adds	r3, #8
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4013      	ands	r3, r2
 800f694:	2b00      	cmp	r3, #0
 800f696:	d101      	bne.n	800f69c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	e038      	b.n	800f70e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f6a2:	f003 0302 	and.w	r3, r3, #2
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d108      	bne.n	800f6bc <ip4_route+0x78>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	330c      	adds	r3, #12
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d101      	bne.n	800f6bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	e028      	b.n	800f70e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	60fb      	str	r3, [r7, #12]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1c5      	bne.n	800f654 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f6c8:	4b15      	ldr	r3, [pc, #84]	@ (800f720 <ip4_route+0xdc>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d01a      	beq.n	800f706 <ip4_route+0xc2>
 800f6d0:	4b13      	ldr	r3, [pc, #76]	@ (800f720 <ip4_route+0xdc>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d012      	beq.n	800f706 <ip4_route+0xc2>
 800f6e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f720 <ip4_route+0xdc>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f6e8:	f003 0304 	and.w	r3, r3, #4
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00a      	beq.n	800f706 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f6f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f720 <ip4_route+0xdc>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	3304      	adds	r3, #4
 800f6f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d004      	beq.n	800f706 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b7f      	cmp	r3, #127	@ 0x7f
 800f704:	d101      	bne.n	800f70a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	e001      	b.n	800f70e <ip4_route+0xca>
  }

  return netif_default;
 800f70a:	4b05      	ldr	r3, [pc, #20]	@ (800f720 <ip4_route+0xdc>)
 800f70c:	681b      	ldr	r3, [r3, #0]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	20007ee0 	.word	0x20007ee0
 800f720:	20007ee4 	.word	0x20007ee4

0800f724 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	b2db      	uxtb	r3, r3
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d016      	beq.n	800f76a <ip4_input_accept+0x46>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	3304      	adds	r3, #4
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d011      	beq.n	800f76a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f746:	4b0b      	ldr	r3, [pc, #44]	@ (800f774 <ip4_input_accept+0x50>)
 800f748:	695a      	ldr	r2, [r3, #20]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	3304      	adds	r3, #4
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	429a      	cmp	r2, r3
 800f752:	d008      	beq.n	800f766 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f754:	4b07      	ldr	r3, [pc, #28]	@ (800f774 <ip4_input_accept+0x50>)
 800f756:	695b      	ldr	r3, [r3, #20]
 800f758:	6879      	ldr	r1, [r7, #4]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f000 fa08 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 800f760:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f762:	2b00      	cmp	r3, #0
 800f764:	d001      	beq.n	800f76a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f766:	2301      	movs	r3, #1
 800f768:	e000      	b.n	800f76c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f76a:	2300      	movs	r3, #0
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	20004f90 	.word	0x20004f90

0800f778 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	091b      	lsrs	r3, r3, #4
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	2b04      	cmp	r3, #4
 800f792:	d004      	beq.n	800f79e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f7f8 f9e7 	bl	8007b68 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f79a:	2300      	movs	r3, #0
 800f79c:	e107      	b.n	800f9ae <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	f003 030f 	and.w	r3, r3, #15
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	885b      	ldrh	r3, [r3, #2]
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7f6 fd87 	bl	80062c8 <lwip_htons>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	891b      	ldrh	r3, [r3, #8]
 800f7c2:	89ba      	ldrh	r2, [r7, #12]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d204      	bcs.n	800f7d2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f7c8:	89bb      	ldrh	r3, [r7, #12]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f7f8 f845 	bl	800785c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	895b      	ldrh	r3, [r3, #10]
 800f7d6:	89fa      	ldrh	r2, [r7, #14]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d807      	bhi.n	800f7ec <ip4_input+0x74>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	891b      	ldrh	r3, [r3, #8]
 800f7e0:	89ba      	ldrh	r2, [r7, #12]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d802      	bhi.n	800f7ec <ip4_input+0x74>
 800f7e6:	89fb      	ldrh	r3, [r7, #14]
 800f7e8:	2b13      	cmp	r3, #19
 800f7ea:	d804      	bhi.n	800f7f6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7f8 f9bb 	bl	8007b68 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	e0db      	b.n	800f9ae <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	691b      	ldr	r3, [r3, #16]
 800f7fa:	4a6f      	ldr	r2, [pc, #444]	@ (800f9b8 <ip4_input+0x240>)
 800f7fc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	4a6d      	ldr	r2, [pc, #436]	@ (800f9b8 <ip4_input+0x240>)
 800f804:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f806:	4b6c      	ldr	r3, [pc, #432]	@ (800f9b8 <ip4_input+0x240>)
 800f808:	695b      	ldr	r3, [r3, #20]
 800f80a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f80e:	2be0      	cmp	r3, #224	@ 0xe0
 800f810:	d112      	bne.n	800f838 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d007      	beq.n	800f832 <ip4_input+0xba>
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	3304      	adds	r3, #4
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <ip4_input+0xba>
      netif = inp;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	617b      	str	r3, [r7, #20]
 800f830:	e02a      	b.n	800f888 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f832:	2300      	movs	r3, #0
 800f834:	617b      	str	r3, [r7, #20]
 800f836:	e027      	b.n	800f888 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f838:	6838      	ldr	r0, [r7, #0]
 800f83a:	f7ff ff73 	bl	800f724 <ip4_input_accept>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <ip4_input+0xd2>
      netif = inp;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	617b      	str	r3, [r7, #20]
 800f848:	e01e      	b.n	800f888 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f84a:	2300      	movs	r3, #0
 800f84c:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f84e:	4b5a      	ldr	r3, [pc, #360]	@ (800f9b8 <ip4_input+0x240>)
 800f850:	695b      	ldr	r3, [r3, #20]
 800f852:	b2db      	uxtb	r3, r3
 800f854:	2b7f      	cmp	r3, #127	@ 0x7f
 800f856:	d017      	beq.n	800f888 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f858:	4b58      	ldr	r3, [pc, #352]	@ (800f9bc <ip4_input+0x244>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	617b      	str	r3, [r7, #20]
 800f85e:	e00e      	b.n	800f87e <ip4_input+0x106>
          if (netif == inp) {
 800f860:	697a      	ldr	r2, [r7, #20]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	429a      	cmp	r2, r3
 800f866:	d006      	beq.n	800f876 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f868:	6978      	ldr	r0, [r7, #20]
 800f86a:	f7ff ff5b 	bl	800f724 <ip4_input_accept>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d108      	bne.n	800f886 <ip4_input+0x10e>
 800f874:	e000      	b.n	800f878 <ip4_input+0x100>
            continue;
 800f876:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	617b      	str	r3, [r7, #20]
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d1ed      	bne.n	800f860 <ip4_input+0xe8>
 800f884:	e000      	b.n	800f888 <ip4_input+0x110>
            break;
 800f886:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f888:	4b4b      	ldr	r3, [pc, #300]	@ (800f9b8 <ip4_input+0x240>)
 800f88a:	691b      	ldr	r3, [r3, #16]
 800f88c:	6839      	ldr	r1, [r7, #0]
 800f88e:	4618      	mov	r0, r3
 800f890:	f000 f96e 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d105      	bne.n	800f8a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f89a:	4b47      	ldr	r3, [pc, #284]	@ (800f9b8 <ip4_input+0x240>)
 800f89c:	691b      	ldr	r3, [r3, #16]
 800f89e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f8a2:	2be0      	cmp	r3, #224	@ 0xe0
 800f8a4:	d104      	bne.n	800f8b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f7f8 f95e 	bl	8007b68 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	e07e      	b.n	800f9ae <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d104      	bne.n	800f8c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f7f8 f956 	bl	8007b68 <pbuf_free>
    return ERR_OK;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	e076      	b.n	800f9ae <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	88db      	ldrh	r3, [r3, #6]
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00b      	beq.n	800f8ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 fc92 	bl	80101fc <ip4_reass>
 800f8d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d101      	bne.n	800f8e4 <ip4_input+0x16c>
      return ERR_OK;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	e064      	b.n	800f9ae <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f8ea:	4a33      	ldr	r2, [pc, #204]	@ (800f9b8 <ip4_input+0x240>)
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f8f0:	4a31      	ldr	r2, [pc, #196]	@ (800f9b8 <ip4_input+0x240>)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f8f6:	4a30      	ldr	r2, [pc, #192]	@ (800f9b8 <ip4_input+0x240>)
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f003 030f 	and.w	r3, r3, #15
 800f904:	b2db      	uxtb	r3, r3
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	461a      	mov	r2, r3
 800f90c:	4b2a      	ldr	r3, [pc, #168]	@ (800f9b8 <ip4_input+0x240>)
 800f90e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f910:	89fb      	ldrh	r3, [r7, #14]
 800f912:	4619      	mov	r1, r3
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f7f8 f8a1 	bl	8007a5c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	7a5b      	ldrb	r3, [r3, #9]
 800f91e:	2b11      	cmp	r3, #17
 800f920:	d006      	beq.n	800f930 <ip4_input+0x1b8>
 800f922:	2b11      	cmp	r3, #17
 800f924:	dc13      	bgt.n	800f94e <ip4_input+0x1d6>
 800f926:	2b01      	cmp	r3, #1
 800f928:	d00c      	beq.n	800f944 <ip4_input+0x1cc>
 800f92a:	2b06      	cmp	r3, #6
 800f92c:	d005      	beq.n	800f93a <ip4_input+0x1c2>
 800f92e:	e00e      	b.n	800f94e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f930:	6839      	ldr	r1, [r7, #0]
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7fd ff20 	bl	800d778 <udp_input>
        break;
 800f938:	e026      	b.n	800f988 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f93a:	6839      	ldr	r1, [r7, #0]
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f7f9 ff53 	bl	80097e8 <tcp_input>
        break;
 800f942:	e021      	b.n	800f988 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f944:	6839      	ldr	r1, [r7, #0]
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7ff fc5c 	bl	800f204 <icmp_input>
        break;
 800f94c:	e01c      	b.n	800f988 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f94e:	4b1a      	ldr	r3, [pc, #104]	@ (800f9b8 <ip4_input+0x240>)
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	6979      	ldr	r1, [r7, #20]
 800f954:	4618      	mov	r0, r3
 800f956:	f000 f90b 	bl	800fb70 <ip4_addr_isbroadcast_u32>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10f      	bne.n	800f980 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f960:	4b15      	ldr	r3, [pc, #84]	@ (800f9b8 <ip4_input+0x240>)
 800f962:	695b      	ldr	r3, [r3, #20]
 800f964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f968:	2be0      	cmp	r3, #224	@ 0xe0
 800f96a:	d009      	beq.n	800f980 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f96c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f970:	4619      	mov	r1, r3
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f7f8 f8e5 	bl	8007b42 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f978:	2102      	movs	r1, #2
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7ff fd98 	bl	800f4b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7f8 f8f1 	bl	8007b68 <pbuf_free>
        break;
 800f986:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f988:	4b0b      	ldr	r3, [pc, #44]	@ (800f9b8 <ip4_input+0x240>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f98e:	4b0a      	ldr	r3, [pc, #40]	@ (800f9b8 <ip4_input+0x240>)
 800f990:	2200      	movs	r2, #0
 800f992:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f994:	4b08      	ldr	r3, [pc, #32]	@ (800f9b8 <ip4_input+0x240>)
 800f996:	2200      	movs	r2, #0
 800f998:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f99a:	4b07      	ldr	r3, [pc, #28]	@ (800f9b8 <ip4_input+0x240>)
 800f99c:	2200      	movs	r2, #0
 800f99e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f9a0:	4b05      	ldr	r3, [pc, #20]	@ (800f9b8 <ip4_input+0x240>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f9a6:	4b04      	ldr	r3, [pc, #16]	@ (800f9b8 <ip4_input+0x240>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	20004f90 	.word	0x20004f90
 800f9bc:	20007ee0 	.word	0x20007ee0

0800f9c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b08a      	sub	sp, #40	@ 0x28
 800f9c4:	af04      	add	r7, sp, #16
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	607a      	str	r2, [r7, #4]
 800f9cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d009      	beq.n	800f9ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d003      	beq.n	800f9e6 <ip4_output_if+0x26>
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d102      	bne.n	800f9ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f9ec:	78fa      	ldrb	r2, [r7, #3]
 800f9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f0:	9302      	str	r3, [sp, #8]
 800f9f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f9f6:	9301      	str	r3, [sp, #4]
 800f9f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f9fc:	9300      	str	r3, [sp, #0]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	6979      	ldr	r1, [r7, #20]
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f000 f805 	bl	800fa14 <ip4_output_if_src>
 800fa0a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3718      	adds	r7, #24
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b088      	sub	sp, #32
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
 800fa20:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	7b9b      	ldrb	r3, [r3, #14]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d006      	beq.n	800fa38 <ip4_output_if_src+0x24>
 800fa2a:	4b4b      	ldr	r3, [pc, #300]	@ (800fb58 <ip4_output_if_src+0x144>)
 800fa2c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800fa30:	494a      	ldr	r1, [pc, #296]	@ (800fb5c <ip4_output_if_src+0x148>)
 800fa32:	484b      	ldr	r0, [pc, #300]	@ (800fb60 <ip4_output_if_src+0x14c>)
 800fa34:	f001 fa4a 	bl	8010ecc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d060      	beq.n	800fb00 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fa3e:	2314      	movs	r3, #20
 800fa40:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fa42:	2114      	movs	r1, #20
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7f7 fff9 	bl	8007a3c <pbuf_add_header>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fa50:	f06f 0301 	mvn.w	r3, #1
 800fa54:	e07c      	b.n	800fb50 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	895b      	ldrh	r3, [r3, #10]
 800fa60:	2b13      	cmp	r3, #19
 800fa62:	d806      	bhi.n	800fa72 <ip4_output_if_src+0x5e>
 800fa64:	4b3c      	ldr	r3, [pc, #240]	@ (800fb58 <ip4_output_if_src+0x144>)
 800fa66:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800fa6a:	493e      	ldr	r1, [pc, #248]	@ (800fb64 <ip4_output_if_src+0x150>)
 800fa6c:	483c      	ldr	r0, [pc, #240]	@ (800fb60 <ip4_output_if_src+0x14c>)
 800fa6e:	f001 fa2d 	bl	8010ecc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	78fa      	ldrb	r2, [r7, #3]
 800fa76:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800fa7e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fa88:	8b7b      	ldrh	r3, [r7, #26]
 800fa8a:	089b      	lsrs	r3, r3, #2
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800faa0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	891b      	ldrh	r3, [r3, #8]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7f6 fc0e 	bl	80062c8 <lwip_htons>
 800faac:	4603      	mov	r3, r0
 800faae:	461a      	mov	r2, r3
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	2200      	movs	r2, #0
 800fab8:	719a      	strb	r2, [r3, #6]
 800faba:	2200      	movs	r2, #0
 800fabc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fabe:	4b2a      	ldr	r3, [pc, #168]	@ (800fb68 <ip4_output_if_src+0x154>)
 800fac0:	881b      	ldrh	r3, [r3, #0]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f6 fc00 	bl	80062c8 <lwip_htons>
 800fac8:	4603      	mov	r3, r0
 800faca:	461a      	mov	r2, r3
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fad0:	4b25      	ldr	r3, [pc, #148]	@ (800fb68 <ip4_output_if_src+0x154>)
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	3301      	adds	r3, #1
 800fad6:	b29a      	uxth	r2, r3
 800fad8:	4b23      	ldr	r3, [pc, #140]	@ (800fb68 <ip4_output_if_src+0x154>)
 800fada:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d104      	bne.n	800faec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fae2:	4b22      	ldr	r3, [pc, #136]	@ (800fb6c <ip4_output_if_src+0x158>)
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	60da      	str	r2, [r3, #12]
 800faea:	e003      	b.n	800faf4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	2200      	movs	r2, #0
 800faf8:	729a      	strb	r2, [r3, #10]
 800fafa:	2200      	movs	r2, #0
 800fafc:	72da      	strb	r2, [r3, #11]
 800fafe:	e00f      	b.n	800fb20 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	895b      	ldrh	r3, [r3, #10]
 800fb04:	2b13      	cmp	r3, #19
 800fb06:	d802      	bhi.n	800fb0e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fb08:	f06f 0301 	mvn.w	r3, #1
 800fb0c:	e020      	b.n	800fb50 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	691b      	ldr	r3, [r3, #16]
 800fb18:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fb1a:	f107 0314 	add.w	r3, r7, #20
 800fb1e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00c      	beq.n	800fb42 <ip4_output_if_src+0x12e>
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	891a      	ldrh	r2, [r3, #8]
 800fb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d906      	bls.n	800fb42 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f000 fd53 	bl	80105e4 <ip4_frag>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	e006      	b.n	800fb50 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb44:	695b      	ldr	r3, [r3, #20]
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	68f9      	ldr	r1, [r7, #12]
 800fb4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb4c:	4798      	blx	r3
 800fb4e:	4603      	mov	r3, r0
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3720      	adds	r7, #32
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	08014ee0 	.word	0x08014ee0
 800fb5c:	08014f14 	.word	0x08014f14
 800fb60:	08014f20 	.word	0x08014f20
 800fb64:	08014f48 	.word	0x08014f48
 800fb68:	20008042 	.word	0x20008042
 800fb6c:	080153e0 	.word	0x080153e0

0800fb70 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb84:	d002      	beq.n	800fb8c <ip4_addr_isbroadcast_u32+0x1c>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	e02a      	b.n	800fbe6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d101      	bne.n	800fba2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	e021      	b.n	800fbe6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	3304      	adds	r3, #4
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d101      	bne.n	800fbb2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	e019      	b.n	800fbe6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	405a      	eors	r2, r3
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	3308      	adds	r3, #8
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	4013      	ands	r3, r2
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d10d      	bne.n	800fbe4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	3308      	adds	r3, #8
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	43da      	mvns	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	3308      	adds	r3, #8
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d101      	bne.n	800fbe4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	e000      	b.n	800fbe6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fbe4:	2300      	movs	r3, #0
  }
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
	...

0800fbf4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fbfe:	4b12      	ldr	r3, [pc, #72]	@ (800fc48 <ip_reass_tmr+0x54>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fc04:	e018      	b.n	800fc38 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	7fdb      	ldrb	r3, [r3, #31]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00b      	beq.n	800fc26 <ip_reass_tmr+0x32>
      r->timer--;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	7fdb      	ldrb	r3, [r3, #31]
 800fc12:	3b01      	subs	r3, #1
 800fc14:	b2da      	uxtb	r2, r3
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e008      	b.n	800fc38 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f80a 	bl	800fc4c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1e3      	bne.n	800fc06 <ip_reass_tmr+0x12>
    }
  }
}
 800fc3e:	bf00      	nop
 800fc40:	bf00      	nop
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	20008044 	.word	0x20008044

0800fc4c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b088      	sub	sp, #32
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fc56:	2300      	movs	r3, #0
 800fc58:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fc5a:	683a      	ldr	r2, [r7, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d105      	bne.n	800fc6e <ip_reass_free_complete_datagram+0x22>
 800fc62:	4b45      	ldr	r3, [pc, #276]	@ (800fd78 <ip_reass_free_complete_datagram+0x12c>)
 800fc64:	22ab      	movs	r2, #171	@ 0xab
 800fc66:	4945      	ldr	r1, [pc, #276]	@ (800fd7c <ip_reass_free_complete_datagram+0x130>)
 800fc68:	4845      	ldr	r0, [pc, #276]	@ (800fd80 <ip_reass_free_complete_datagram+0x134>)
 800fc6a:	f001 f92f 	bl	8010ecc <iprintf>
  if (prev != NULL) {
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00a      	beq.n	800fc8a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d005      	beq.n	800fc8a <ip_reass_free_complete_datagram+0x3e>
 800fc7e:	4b3e      	ldr	r3, [pc, #248]	@ (800fd78 <ip_reass_free_complete_datagram+0x12c>)
 800fc80:	22ad      	movs	r2, #173	@ 0xad
 800fc82:	4940      	ldr	r1, [pc, #256]	@ (800fd84 <ip_reass_free_complete_datagram+0x138>)
 800fc84:	483e      	ldr	r0, [pc, #248]	@ (800fd80 <ip_reass_free_complete_datagram+0x134>)
 800fc86:	f001 f921 	bl	8010ecc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	889b      	ldrh	r3, [r3, #4]
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d12a      	bne.n	800fcf2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	6858      	ldr	r0, [r3, #4]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	3308      	adds	r3, #8
 800fcb2:	2214      	movs	r2, #20
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	f001 fade 	bl	8011276 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fcba:	2101      	movs	r1, #1
 800fcbc:	69b8      	ldr	r0, [r7, #24]
 800fcbe:	f7ff fc07 	bl	800f4d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fcc2:	69b8      	ldr	r0, [r7, #24]
 800fcc4:	f7f7 ffd8 	bl	8007c78 <pbuf_clen>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fccc:	8bfa      	ldrh	r2, [r7, #30]
 800fcce:	8a7b      	ldrh	r3, [r7, #18]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fcd6:	db05      	blt.n	800fce4 <ip_reass_free_complete_datagram+0x98>
 800fcd8:	4b27      	ldr	r3, [pc, #156]	@ (800fd78 <ip_reass_free_complete_datagram+0x12c>)
 800fcda:	22bc      	movs	r2, #188	@ 0xbc
 800fcdc:	492a      	ldr	r1, [pc, #168]	@ (800fd88 <ip_reass_free_complete_datagram+0x13c>)
 800fcde:	4828      	ldr	r0, [pc, #160]	@ (800fd80 <ip_reass_free_complete_datagram+0x134>)
 800fce0:	f001 f8f4 	bl	8010ecc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fce4:	8bfa      	ldrh	r2, [r7, #30]
 800fce6:	8a7b      	ldrh	r3, [r7, #18]
 800fce8:	4413      	add	r3, r2
 800fcea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fcec:	69b8      	ldr	r0, [r7, #24]
 800fcee:	f7f7 ff3b 	bl	8007b68 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fcf8:	e01f      	b.n	800fd3a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fd00:	69bb      	ldr	r3, [r7, #24]
 800fd02:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f7f7 ffb4 	bl	8007c78 <pbuf_clen>
 800fd10:	4603      	mov	r3, r0
 800fd12:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fd14:	8bfa      	ldrh	r2, [r7, #30]
 800fd16:	8a7b      	ldrh	r3, [r7, #18]
 800fd18:	4413      	add	r3, r2
 800fd1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd1e:	db05      	blt.n	800fd2c <ip_reass_free_complete_datagram+0xe0>
 800fd20:	4b15      	ldr	r3, [pc, #84]	@ (800fd78 <ip_reass_free_complete_datagram+0x12c>)
 800fd22:	22cc      	movs	r2, #204	@ 0xcc
 800fd24:	4918      	ldr	r1, [pc, #96]	@ (800fd88 <ip_reass_free_complete_datagram+0x13c>)
 800fd26:	4816      	ldr	r0, [pc, #88]	@ (800fd80 <ip_reass_free_complete_datagram+0x134>)
 800fd28:	f001 f8d0 	bl	8010ecc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fd2c:	8bfa      	ldrh	r2, [r7, #30]
 800fd2e:	8a7b      	ldrh	r3, [r7, #18]
 800fd30:	4413      	add	r3, r2
 800fd32:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f7f7 ff17 	bl	8007b68 <pbuf_free>
  while (p != NULL) {
 800fd3a:	69bb      	ldr	r3, [r7, #24]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1dc      	bne.n	800fcfa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 f8c2 	bl	800fecc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fd48:	4b10      	ldr	r3, [pc, #64]	@ (800fd8c <ip_reass_free_complete_datagram+0x140>)
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	8bfa      	ldrh	r2, [r7, #30]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d905      	bls.n	800fd5e <ip_reass_free_complete_datagram+0x112>
 800fd52:	4b09      	ldr	r3, [pc, #36]	@ (800fd78 <ip_reass_free_complete_datagram+0x12c>)
 800fd54:	22d2      	movs	r2, #210	@ 0xd2
 800fd56:	490e      	ldr	r1, [pc, #56]	@ (800fd90 <ip_reass_free_complete_datagram+0x144>)
 800fd58:	4809      	ldr	r0, [pc, #36]	@ (800fd80 <ip_reass_free_complete_datagram+0x134>)
 800fd5a:	f001 f8b7 	bl	8010ecc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fd5e:	4b0b      	ldr	r3, [pc, #44]	@ (800fd8c <ip_reass_free_complete_datagram+0x140>)
 800fd60:	881a      	ldrh	r2, [r3, #0]
 800fd62:	8bfb      	ldrh	r3, [r7, #30]
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	4b08      	ldr	r3, [pc, #32]	@ (800fd8c <ip_reass_free_complete_datagram+0x140>)
 800fd6a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800fd6c:	8bfb      	ldrh	r3, [r7, #30]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3720      	adds	r7, #32
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	08014f78 	.word	0x08014f78
 800fd7c:	08014fb4 	.word	0x08014fb4
 800fd80:	08014fc0 	.word	0x08014fc0
 800fd84:	08014fe8 	.word	0x08014fe8
 800fd88:	08014ffc 	.word	0x08014ffc
 800fd8c:	20008048 	.word	0x20008048
 800fd90:	0801501c 	.word	0x0801501c

0800fd94 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b08a      	sub	sp, #40	@ 0x28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fda6:	2300      	movs	r3, #0
 800fda8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fdb2:	4b28      	ldr	r3, [pc, #160]	@ (800fe54 <ip_reass_remove_oldest_datagram+0xc0>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fdb8:	e030      	b.n	800fe1c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdbc:	695a      	ldr	r2, [r3, #20]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d10c      	bne.n	800fde0 <ip_reass_remove_oldest_datagram+0x4c>
 800fdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc8:	699a      	ldr	r2, [r3, #24]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	691b      	ldr	r3, [r3, #16]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d106      	bne.n	800fde0 <ip_reass_remove_oldest_datagram+0x4c>
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd4:	899a      	ldrh	r2, [r3, #12]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	889b      	ldrh	r3, [r3, #4]
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d014      	beq.n	800fe0a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	3301      	adds	r3, #1
 800fde4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fde6:	6a3b      	ldr	r3, [r7, #32]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d104      	bne.n	800fdf6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	61bb      	str	r3, [r7, #24]
 800fdf4:	e009      	b.n	800fe0a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf8:	7fda      	ldrb	r2, [r3, #31]
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	7fdb      	ldrb	r3, [r3, #31]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d803      	bhi.n	800fe0a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fe02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe04:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fe0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fe12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe14:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fe16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1cb      	bne.n	800fdba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fe22:	6a3b      	ldr	r3, [r7, #32]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d008      	beq.n	800fe3a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fe28:	69b9      	ldr	r1, [r7, #24]
 800fe2a:	6a38      	ldr	r0, [r7, #32]
 800fe2c:	f7ff ff0e 	bl	800fc4c <ip_reass_free_complete_datagram>
 800fe30:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fe32:	697a      	ldr	r2, [r7, #20]
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	4413      	add	r3, r2
 800fe38:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fe3a:	697a      	ldr	r2, [r7, #20]
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	da02      	bge.n	800fe48 <ip_reass_remove_oldest_datagram+0xb4>
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	dcac      	bgt.n	800fda2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fe48:	697b      	ldr	r3, [r7, #20]
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3728      	adds	r7, #40	@ 0x28
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop
 800fe54:	20008044 	.word	0x20008044

0800fe58 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fe62:	2004      	movs	r0, #4
 800fe64:	f7f6 fea4 	bl	8006bb0 <memp_malloc>
 800fe68:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d110      	bne.n	800fe92 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fe70:	6839      	ldr	r1, [r7, #0]
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f7ff ff8e 	bl	800fd94 <ip_reass_remove_oldest_datagram>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	dc03      	bgt.n	800fe88 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fe80:	2004      	movs	r0, #4
 800fe82:	f7f6 fe95 	bl	8006bb0 <memp_malloc>
 800fe86:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d101      	bne.n	800fe92 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	e016      	b.n	800fec0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fe92:	2220      	movs	r2, #32
 800fe94:	2100      	movs	r1, #0
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f001 f978 	bl	801118c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	220f      	movs	r2, #15
 800fea0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fea2:	4b09      	ldr	r3, [pc, #36]	@ (800fec8 <ip_reass_enqueue_new_datagram+0x70>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800feaa:	4a07      	ldr	r2, [pc, #28]	@ (800fec8 <ip_reass_enqueue_new_datagram+0x70>)
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	3308      	adds	r3, #8
 800feb4:	2214      	movs	r2, #20
 800feb6:	6879      	ldr	r1, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	f001 f9dc 	bl	8011276 <memcpy>
  return ipr;
 800febe:	68fb      	ldr	r3, [r7, #12]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	20008044 	.word	0x20008044

0800fecc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fed6:	4b10      	ldr	r3, [pc, #64]	@ (800ff18 <ip_reass_dequeue_datagram+0x4c>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d104      	bne.n	800feea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a0c      	ldr	r2, [pc, #48]	@ (800ff18 <ip_reass_dequeue_datagram+0x4c>)
 800fee6:	6013      	str	r3, [r2, #0]
 800fee8:	e00d      	b.n	800ff06 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d106      	bne.n	800fefe <ip_reass_dequeue_datagram+0x32>
 800fef0:	4b0a      	ldr	r3, [pc, #40]	@ (800ff1c <ip_reass_dequeue_datagram+0x50>)
 800fef2:	f240 1245 	movw	r2, #325	@ 0x145
 800fef6:	490a      	ldr	r1, [pc, #40]	@ (800ff20 <ip_reass_dequeue_datagram+0x54>)
 800fef8:	480a      	ldr	r0, [pc, #40]	@ (800ff24 <ip_reass_dequeue_datagram+0x58>)
 800fefa:	f000 ffe7 	bl	8010ecc <iprintf>
    prev->next = ipr->next;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ff06:	6879      	ldr	r1, [r7, #4]
 800ff08:	2004      	movs	r0, #4
 800ff0a:	f7f6 fec1 	bl	8006c90 <memp_free>
}
 800ff0e:	bf00      	nop
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	20008044 	.word	0x20008044
 800ff1c:	08014f78 	.word	0x08014f78
 800ff20:	08015040 	.word	0x08015040
 800ff24:	08014fc0 	.word	0x08014fc0

0800ff28 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08c      	sub	sp, #48	@ 0x30
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ff34:	2300      	movs	r3, #0
 800ff36:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	885b      	ldrh	r3, [r3, #2]
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7f6 f9bd 	bl	80062c8 <lwip_htons>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	f003 030f 	and.w	r3, r3, #15
 800ff5a:	b2db      	uxtb	r3, r3
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ff60:	7e7b      	ldrb	r3, [r7, #25]
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	8b7a      	ldrh	r2, [r7, #26]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d202      	bcs.n	800ff70 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff6e:	e135      	b.n	80101dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ff70:	7e7b      	ldrb	r3, [r7, #25]
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	8b7a      	ldrh	r2, [r7, #26]
 800ff76:	1ad3      	subs	r3, r2, r3
 800ff78:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	88db      	ldrh	r3, [r3, #6]
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7f6 f9a1 	bl	80062c8 <lwip_htons>
 800ff86:	4603      	mov	r3, r0
 800ff88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	00db      	lsls	r3, r3, #3
 800ff90:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800ff98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	701a      	strb	r2, [r3, #0]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	705a      	strb	r2, [r3, #1]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	709a      	strb	r2, [r3, #2]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ffaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffac:	8afa      	ldrh	r2, [r7, #22]
 800ffae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ffb0:	8afa      	ldrh	r2, [r7, #22]
 800ffb2:	8b7b      	ldrh	r3, [r7, #26]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ffbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffbe:	88db      	ldrh	r3, [r3, #6]
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	8afa      	ldrh	r2, [r7, #22]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d902      	bls.n	800ffce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ffc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ffcc:	e106      	b.n	80101dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffd4:	e068      	b.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ffd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ffdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffde:	889b      	ldrh	r3, [r3, #4]
 800ffe0:	b29a      	uxth	r2, r3
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	889b      	ldrh	r3, [r3, #4]
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d235      	bcs.n	8010058 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ffec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fff0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d020      	beq.n	801003a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffa:	889b      	ldrh	r3, [r3, #4]
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010000:	88db      	ldrh	r3, [r3, #6]
 8010002:	b29b      	uxth	r3, r3
 8010004:	429a      	cmp	r2, r3
 8010006:	d307      	bcc.n	8010018 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801000a:	88db      	ldrh	r3, [r3, #6]
 801000c:	b29a      	uxth	r2, r3
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	889b      	ldrh	r3, [r3, #4]
 8010012:	b29b      	uxth	r3, r3
 8010014:	429a      	cmp	r2, r3
 8010016:	d902      	bls.n	801001e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801001c:	e0de      	b.n	80101dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801001e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010020:	68ba      	ldr	r2, [r7, #8]
 8010022:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010026:	88db      	ldrh	r3, [r3, #6]
 8010028:	b29a      	uxth	r2, r3
 801002a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801002c:	889b      	ldrh	r3, [r3, #4]
 801002e:	b29b      	uxth	r3, r3
 8010030:	429a      	cmp	r2, r3
 8010032:	d03d      	beq.n	80100b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010034:	2300      	movs	r3, #0
 8010036:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010038:	e03a      	b.n	80100b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801003a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801003c:	88db      	ldrh	r3, [r3, #6]
 801003e:	b29a      	uxth	r2, r3
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	889b      	ldrh	r3, [r3, #4]
 8010044:	b29b      	uxth	r3, r3
 8010046:	429a      	cmp	r2, r3
 8010048:	d902      	bls.n	8010050 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801004a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801004e:	e0c5      	b.n	80101dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	68ba      	ldr	r2, [r7, #8]
 8010054:	605a      	str	r2, [r3, #4]
      break;
 8010056:	e02b      	b.n	80100b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801005a:	889b      	ldrh	r3, [r3, #4]
 801005c:	b29a      	uxth	r2, r3
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	889b      	ldrh	r3, [r3, #4]
 8010062:	b29b      	uxth	r3, r3
 8010064:	429a      	cmp	r2, r3
 8010066:	d102      	bne.n	801006e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801006c:	e0b6      	b.n	80101dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801006e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010070:	889b      	ldrh	r3, [r3, #4]
 8010072:	b29a      	uxth	r2, r3
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	88db      	ldrh	r3, [r3, #6]
 8010078:	b29b      	uxth	r3, r3
 801007a:	429a      	cmp	r2, r3
 801007c:	d202      	bcs.n	8010084 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801007e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010082:	e0ab      	b.n	80101dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010086:	2b00      	cmp	r3, #0
 8010088:	d009      	beq.n	801009e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801008a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008c:	88db      	ldrh	r3, [r3, #6]
 801008e:	b29a      	uxth	r2, r3
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	889b      	ldrh	r3, [r3, #4]
 8010094:	b29b      	uxth	r3, r3
 8010096:	429a      	cmp	r2, r3
 8010098:	d001      	beq.n	801009e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801009a:	2300      	movs	r3, #0
 801009c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80100a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d193      	bne.n	800ffd6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80100ae:	e000      	b.n	80100b2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80100b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80100b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d12d      	bne.n	8010114 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80100b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d01c      	beq.n	80100f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80100be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c0:	88db      	ldrh	r3, [r3, #6]
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c6:	889b      	ldrh	r3, [r3, #4]
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d906      	bls.n	80100dc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80100ce:	4b45      	ldr	r3, [pc, #276]	@ (80101e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80100d0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80100d4:	4944      	ldr	r1, [pc, #272]	@ (80101e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80100d6:	4845      	ldr	r0, [pc, #276]	@ (80101ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80100d8:	f000 fef8 	bl	8010ecc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80100dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100de:	68ba      	ldr	r2, [r7, #8]
 80100e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80100e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e4:	88db      	ldrh	r3, [r3, #6]
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ea:	889b      	ldrh	r3, [r3, #4]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d010      	beq.n	8010114 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	623b      	str	r3, [r7, #32]
 80100f6:	e00d      	b.n	8010114 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d006      	beq.n	801010e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010100:	4b38      	ldr	r3, [pc, #224]	@ (80101e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010102:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8010106:	493a      	ldr	r1, [pc, #232]	@ (80101f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010108:	4838      	ldr	r0, [pc, #224]	@ (80101ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801010a:	f000 fedf 	bl	8010ecc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	68ba      	ldr	r2, [r7, #8]
 8010112:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d105      	bne.n	8010126 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	7f9b      	ldrb	r3, [r3, #30]
 801011e:	f003 0301 	and.w	r3, r3, #1
 8010122:	2b00      	cmp	r3, #0
 8010124:	d059      	beq.n	80101da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d04f      	beq.n	80101cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d006      	beq.n	8010142 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	889b      	ldrh	r3, [r3, #4]
 801013c:	b29b      	uxth	r3, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	d002      	beq.n	8010148 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010142:	2300      	movs	r3, #0
 8010144:	623b      	str	r3, [r7, #32]
 8010146:	e041      	b.n	80101cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801014a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801014c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010152:	e012      	b.n	801017a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801015a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801015c:	88db      	ldrh	r3, [r3, #6]
 801015e:	b29a      	uxth	r2, r3
 8010160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010162:	889b      	ldrh	r3, [r3, #4]
 8010164:	b29b      	uxth	r3, r3
 8010166:	429a      	cmp	r2, r3
 8010168:	d002      	beq.n	8010170 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801016a:	2300      	movs	r3, #0
 801016c:	623b      	str	r3, [r7, #32]
            break;
 801016e:	e007      	b.n	8010180 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010172:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8010174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801017a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1e9      	bne.n	8010154 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010180:	6a3b      	ldr	r3, [r7, #32]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d022      	beq.n	80101cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d106      	bne.n	801019c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801018e:	4b15      	ldr	r3, [pc, #84]	@ (80101e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010190:	f240 12df 	movw	r2, #479	@ 0x1df
 8010194:	4917      	ldr	r1, [pc, #92]	@ (80101f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010196:	4815      	ldr	r0, [pc, #84]	@ (80101ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010198:	f000 fe98 	bl	8010ecc <iprintf>
          LWIP_ASSERT("sanity check",
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d106      	bne.n	80101b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80101a8:	4b0e      	ldr	r3, [pc, #56]	@ (80101e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80101aa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80101ae:	4911      	ldr	r1, [pc, #68]	@ (80101f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80101b0:	480e      	ldr	r0, [pc, #56]	@ (80101ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80101b2:	f000 fe8b 	bl	8010ecc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80101b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d006      	beq.n	80101cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80101be:	4b09      	ldr	r3, [pc, #36]	@ (80101e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80101c0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80101c4:	490c      	ldr	r1, [pc, #48]	@ (80101f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80101c6:	4809      	ldr	r0, [pc, #36]	@ (80101ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80101c8:	f000 fe80 	bl	8010ecc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80101cc:	6a3b      	ldr	r3, [r7, #32]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	bf14      	ite	ne
 80101d2:	2301      	movne	r3, #1
 80101d4:	2300      	moveq	r3, #0
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	e000      	b.n	80101dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80101da:	2300      	movs	r3, #0
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3730      	adds	r7, #48	@ 0x30
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	08014f78 	.word	0x08014f78
 80101e8:	0801505c 	.word	0x0801505c
 80101ec:	08014fc0 	.word	0x08014fc0
 80101f0:	0801507c 	.word	0x0801507c
 80101f4:	080150b4 	.word	0x080150b4
 80101f8:	080150c4 	.word	0x080150c4

080101fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b08e      	sub	sp, #56	@ 0x38
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801020a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	f003 030f 	and.w	r3, r3, #15
 8010212:	b2db      	uxtb	r3, r3
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	b2db      	uxtb	r3, r3
 8010218:	2b14      	cmp	r3, #20
 801021a:	f040 8171 	bne.w	8010500 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801021e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010220:	88db      	ldrh	r3, [r3, #6]
 8010222:	b29b      	uxth	r3, r3
 8010224:	4618      	mov	r0, r3
 8010226:	f7f6 f84f 	bl	80062c8 <lwip_htons>
 801022a:	4603      	mov	r3, r0
 801022c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010230:	b29b      	uxth	r3, r3
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010238:	885b      	ldrh	r3, [r3, #2]
 801023a:	b29b      	uxth	r3, r3
 801023c:	4618      	mov	r0, r3
 801023e:	f7f6 f843 	bl	80062c8 <lwip_htons>
 8010242:	4603      	mov	r3, r0
 8010244:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	f003 030f 	and.w	r3, r3, #15
 801024e:	b2db      	uxtb	r3, r3
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8010256:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801025a:	b29b      	uxth	r3, r3
 801025c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801025e:	429a      	cmp	r2, r3
 8010260:	f0c0 8150 	bcc.w	8010504 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010264:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010268:	b29b      	uxth	r3, r3
 801026a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801026c:	1ad3      	subs	r3, r2, r3
 801026e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f7f7 fd01 	bl	8007c78 <pbuf_clen>
 8010276:	4603      	mov	r3, r0
 8010278:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801027a:	4b8c      	ldr	r3, [pc, #560]	@ (80104ac <ip4_reass+0x2b0>)
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	461a      	mov	r2, r3
 8010280:	8c3b      	ldrh	r3, [r7, #32]
 8010282:	4413      	add	r3, r2
 8010284:	2b0a      	cmp	r3, #10
 8010286:	dd10      	ble.n	80102aa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010288:	8c3b      	ldrh	r3, [r7, #32]
 801028a:	4619      	mov	r1, r3
 801028c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801028e:	f7ff fd81 	bl	800fd94 <ip_reass_remove_oldest_datagram>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	f000 8137 	beq.w	8010508 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801029a:	4b84      	ldr	r3, [pc, #528]	@ (80104ac <ip4_reass+0x2b0>)
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	461a      	mov	r2, r3
 80102a0:	8c3b      	ldrh	r3, [r7, #32]
 80102a2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80102a4:	2b0a      	cmp	r3, #10
 80102a6:	f300 812f 	bgt.w	8010508 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80102aa:	4b81      	ldr	r3, [pc, #516]	@ (80104b0 <ip4_reass+0x2b4>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80102b0:	e015      	b.n	80102de <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80102b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b4:	695a      	ldr	r2, [r3, #20]
 80102b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d10c      	bne.n	80102d8 <ip4_reass+0xdc>
 80102be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c0:	699a      	ldr	r2, [r3, #24]
 80102c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c4:	691b      	ldr	r3, [r3, #16]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d106      	bne.n	80102d8 <ip4_reass+0xdc>
 80102ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102cc:	899a      	ldrh	r2, [r3, #12]
 80102ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102d0:	889b      	ldrh	r3, [r3, #4]
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d006      	beq.n	80102e6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80102d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80102de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1e6      	bne.n	80102b2 <ip4_reass+0xb6>
 80102e4:	e000      	b.n	80102e8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80102e6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80102e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d109      	bne.n	8010302 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80102ee:	8c3b      	ldrh	r3, [r7, #32]
 80102f0:	4619      	mov	r1, r3
 80102f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102f4:	f7ff fdb0 	bl	800fe58 <ip_reass_enqueue_new_datagram>
 80102f8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80102fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d11c      	bne.n	801033a <ip4_reass+0x13e>
      goto nullreturn;
 8010300:	e105      	b.n	801050e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010304:	88db      	ldrh	r3, [r3, #6]
 8010306:	b29b      	uxth	r3, r3
 8010308:	4618      	mov	r0, r3
 801030a:	f7f5 ffdd 	bl	80062c8 <lwip_htons>
 801030e:	4603      	mov	r3, r0
 8010310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010314:	2b00      	cmp	r3, #0
 8010316:	d110      	bne.n	801033a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801031a:	89db      	ldrh	r3, [r3, #14]
 801031c:	4618      	mov	r0, r3
 801031e:	f7f5 ffd3 	bl	80062c8 <lwip_htons>
 8010322:	4603      	mov	r3, r0
 8010324:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010328:	2b00      	cmp	r3, #0
 801032a:	d006      	beq.n	801033a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801032c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801032e:	3308      	adds	r3, #8
 8010330:	2214      	movs	r2, #20
 8010332:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010334:	4618      	mov	r0, r3
 8010336:	f000 ff9e 	bl	8011276 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801033a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033c:	88db      	ldrh	r3, [r3, #6]
 801033e:	b29b      	uxth	r3, r3
 8010340:	f003 0320 	and.w	r3, r3, #32
 8010344:	2b00      	cmp	r3, #0
 8010346:	bf0c      	ite	eq
 8010348:	2301      	moveq	r3, #1
 801034a:	2300      	movne	r3, #0
 801034c:	b2db      	uxtb	r3, r3
 801034e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010350:	69fb      	ldr	r3, [r7, #28]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00e      	beq.n	8010374 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010356:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801035a:	4413      	add	r3, r2
 801035c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801035e:	8b7a      	ldrh	r2, [r7, #26]
 8010360:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010362:	429a      	cmp	r2, r3
 8010364:	f0c0 80a0 	bcc.w	80104a8 <ip4_reass+0x2ac>
 8010368:	8b7b      	ldrh	r3, [r7, #26]
 801036a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801036e:	4293      	cmp	r3, r2
 8010370:	f200 809a 	bhi.w	80104a8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010374:	69fa      	ldr	r2, [r7, #28]
 8010376:	6879      	ldr	r1, [r7, #4]
 8010378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801037a:	f7ff fdd5 	bl	800ff28 <ip_reass_chain_frag_into_datagram_and_validate>
 801037e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010386:	f000 809b 	beq.w	80104c0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801038a:	4b48      	ldr	r3, [pc, #288]	@ (80104ac <ip4_reass+0x2b0>)
 801038c:	881a      	ldrh	r2, [r3, #0]
 801038e:	8c3b      	ldrh	r3, [r7, #32]
 8010390:	4413      	add	r3, r2
 8010392:	b29a      	uxth	r2, r3
 8010394:	4b45      	ldr	r3, [pc, #276]	@ (80104ac <ip4_reass+0x2b0>)
 8010396:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00d      	beq.n	80103ba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801039e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80103a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103a2:	4413      	add	r3, r2
 80103a4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80103a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103a8:	8a7a      	ldrh	r2, [r7, #18]
 80103aa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80103ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ae:	7f9b      	ldrb	r3, [r3, #30]
 80103b0:	f043 0301 	orr.w	r3, r3, #1
 80103b4:	b2da      	uxtb	r2, r3
 80103b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d171      	bne.n	80104a4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80103c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c2:	8b9b      	ldrh	r3, [r3, #28]
 80103c4:	3314      	adds	r3, #20
 80103c6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80103c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80103d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80103da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103dc:	3308      	adds	r3, #8
 80103de:	2214      	movs	r2, #20
 80103e0:	4619      	mov	r1, r3
 80103e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103e4:	f000 ff47 	bl	8011276 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80103e8:	8a3b      	ldrh	r3, [r7, #16]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7f5 ff6c 	bl	80062c8 <lwip_htons>
 80103f0:	4603      	mov	r3, r0
 80103f2:	461a      	mov	r2, r3
 80103f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80103f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103fa:	2200      	movs	r2, #0
 80103fc:	719a      	strb	r2, [r3, #6]
 80103fe:	2200      	movs	r2, #0
 8010400:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010404:	2200      	movs	r2, #0
 8010406:	729a      	strb	r2, [r3, #10]
 8010408:	2200      	movs	r2, #0
 801040a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801040c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010412:	e00d      	b.n	8010430 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801041a:	2114      	movs	r1, #20
 801041c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801041e:	f7f7 fb1d 	bl	8007a5c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7f7 fc61 	bl	8007cec <pbuf_cat>
      r = iprh->next_pbuf;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8010430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010432:	2b00      	cmp	r3, #0
 8010434:	d1ee      	bne.n	8010414 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010436:	4b1e      	ldr	r3, [pc, #120]	@ (80104b0 <ip4_reass+0x2b4>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801043c:	429a      	cmp	r2, r3
 801043e:	d102      	bne.n	8010446 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010440:	2300      	movs	r3, #0
 8010442:	637b      	str	r3, [r7, #52]	@ 0x34
 8010444:	e010      	b.n	8010468 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010446:	4b1a      	ldr	r3, [pc, #104]	@ (80104b0 <ip4_reass+0x2b4>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	637b      	str	r3, [r7, #52]	@ 0x34
 801044c:	e007      	b.n	801045e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801044e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010454:	429a      	cmp	r2, r3
 8010456:	d006      	beq.n	8010466 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	637b      	str	r3, [r7, #52]	@ 0x34
 801045e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1f4      	bne.n	801044e <ip4_reass+0x252>
 8010464:	e000      	b.n	8010468 <ip4_reass+0x26c>
          break;
 8010466:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010468:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801046a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801046c:	f7ff fd2e 	bl	800fecc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7f7 fc01 	bl	8007c78 <pbuf_clen>
 8010476:	4603      	mov	r3, r0
 8010478:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801047a:	4b0c      	ldr	r3, [pc, #48]	@ (80104ac <ip4_reass+0x2b0>)
 801047c:	881b      	ldrh	r3, [r3, #0]
 801047e:	8c3a      	ldrh	r2, [r7, #32]
 8010480:	429a      	cmp	r2, r3
 8010482:	d906      	bls.n	8010492 <ip4_reass+0x296>
 8010484:	4b0b      	ldr	r3, [pc, #44]	@ (80104b4 <ip4_reass+0x2b8>)
 8010486:	f240 229b 	movw	r2, #667	@ 0x29b
 801048a:	490b      	ldr	r1, [pc, #44]	@ (80104b8 <ip4_reass+0x2bc>)
 801048c:	480b      	ldr	r0, [pc, #44]	@ (80104bc <ip4_reass+0x2c0>)
 801048e:	f000 fd1d 	bl	8010ecc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010492:	4b06      	ldr	r3, [pc, #24]	@ (80104ac <ip4_reass+0x2b0>)
 8010494:	881a      	ldrh	r2, [r3, #0]
 8010496:	8c3b      	ldrh	r3, [r7, #32]
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	b29a      	uxth	r2, r3
 801049c:	4b03      	ldr	r3, [pc, #12]	@ (80104ac <ip4_reass+0x2b0>)
 801049e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	e038      	b.n	8010516 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80104a4:	2300      	movs	r3, #0
 80104a6:	e036      	b.n	8010516 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80104a8:	bf00      	nop
 80104aa:	e00a      	b.n	80104c2 <ip4_reass+0x2c6>
 80104ac:	20008048 	.word	0x20008048
 80104b0:	20008044 	.word	0x20008044
 80104b4:	08014f78 	.word	0x08014f78
 80104b8:	080150e8 	.word	0x080150e8
 80104bc:	08014fc0 	.word	0x08014fc0
    goto nullreturn_ipr;
 80104c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80104c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d106      	bne.n	80104d6 <ip4_reass+0x2da>
 80104c8:	4b15      	ldr	r3, [pc, #84]	@ (8010520 <ip4_reass+0x324>)
 80104ca:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80104ce:	4915      	ldr	r1, [pc, #84]	@ (8010524 <ip4_reass+0x328>)
 80104d0:	4815      	ldr	r0, [pc, #84]	@ (8010528 <ip4_reass+0x32c>)
 80104d2:	f000 fcfb 	bl	8010ecc <iprintf>
  if (ipr->p == NULL) {
 80104d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d116      	bne.n	801050c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80104de:	4b13      	ldr	r3, [pc, #76]	@ (801052c <ip4_reass+0x330>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d006      	beq.n	80104f6 <ip4_reass+0x2fa>
 80104e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010520 <ip4_reass+0x324>)
 80104ea:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80104ee:	4910      	ldr	r1, [pc, #64]	@ (8010530 <ip4_reass+0x334>)
 80104f0:	480d      	ldr	r0, [pc, #52]	@ (8010528 <ip4_reass+0x32c>)
 80104f2:	f000 fceb 	bl	8010ecc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80104f6:	2100      	movs	r1, #0
 80104f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80104fa:	f7ff fce7 	bl	800fecc <ip_reass_dequeue_datagram>
 80104fe:	e006      	b.n	801050e <ip4_reass+0x312>
    goto nullreturn;
 8010500:	bf00      	nop
 8010502:	e004      	b.n	801050e <ip4_reass+0x312>
    goto nullreturn;
 8010504:	bf00      	nop
 8010506:	e002      	b.n	801050e <ip4_reass+0x312>
      goto nullreturn;
 8010508:	bf00      	nop
 801050a:	e000      	b.n	801050e <ip4_reass+0x312>
  }

nullreturn:
 801050c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7f7 fb2a 	bl	8007b68 <pbuf_free>
  return NULL;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3738      	adds	r7, #56	@ 0x38
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	08014f78 	.word	0x08014f78
 8010524:	08015104 	.word	0x08015104
 8010528:	08014fc0 	.word	0x08014fc0
 801052c:	20008044 	.word	0x20008044
 8010530:	08015110 	.word	0x08015110

08010534 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010538:	2005      	movs	r0, #5
 801053a:	f7f6 fb39 	bl	8006bb0 <memp_malloc>
 801053e:	4603      	mov	r3, r0
}
 8010540:	4618      	mov	r0, r3
 8010542:	bd80      	pop	{r7, pc}

08010544 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010552:	4b07      	ldr	r3, [pc, #28]	@ (8010570 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010554:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010558:	4906      	ldr	r1, [pc, #24]	@ (8010574 <ip_frag_free_pbuf_custom_ref+0x30>)
 801055a:	4807      	ldr	r0, [pc, #28]	@ (8010578 <ip_frag_free_pbuf_custom_ref+0x34>)
 801055c:	f000 fcb6 	bl	8010ecc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010560:	6879      	ldr	r1, [r7, #4]
 8010562:	2005      	movs	r0, #5
 8010564:	f7f6 fb94 	bl	8006c90 <memp_free>
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	08014f78 	.word	0x08014f78
 8010574:	08015130 	.word	0x08015130
 8010578:	08014fc0 	.word	0x08014fc0

0801057c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d106      	bne.n	801059c <ipfrag_free_pbuf_custom+0x20>
 801058e:	4b11      	ldr	r3, [pc, #68]	@ (80105d4 <ipfrag_free_pbuf_custom+0x58>)
 8010590:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8010594:	4910      	ldr	r1, [pc, #64]	@ (80105d8 <ipfrag_free_pbuf_custom+0x5c>)
 8010596:	4811      	ldr	r0, [pc, #68]	@ (80105dc <ipfrag_free_pbuf_custom+0x60>)
 8010598:	f000 fc98 	bl	8010ecc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801059c:	68fa      	ldr	r2, [r7, #12]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d006      	beq.n	80105b2 <ipfrag_free_pbuf_custom+0x36>
 80105a4:	4b0b      	ldr	r3, [pc, #44]	@ (80105d4 <ipfrag_free_pbuf_custom+0x58>)
 80105a6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80105aa:	490d      	ldr	r1, [pc, #52]	@ (80105e0 <ipfrag_free_pbuf_custom+0x64>)
 80105ac:	480b      	ldr	r0, [pc, #44]	@ (80105dc <ipfrag_free_pbuf_custom+0x60>)
 80105ae:	f000 fc8d 	bl	8010ecc <iprintf>
  if (pcr->original != NULL) {
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	695b      	ldr	r3, [r3, #20]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d004      	beq.n	80105c4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	695b      	ldr	r3, [r3, #20]
 80105be:	4618      	mov	r0, r3
 80105c0:	f7f7 fad2 	bl	8007b68 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	f7ff ffbd 	bl	8010544 <ip_frag_free_pbuf_custom_ref>
}
 80105ca:	bf00      	nop
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	08014f78 	.word	0x08014f78
 80105d8:	0801513c 	.word	0x0801513c
 80105dc:	08014fc0 	.word	0x08014fc0
 80105e0:	08015148 	.word	0x08015148

080105e4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b094      	sub	sp, #80	@ 0x50
 80105e8:	af02      	add	r7, sp, #8
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80105f0:	2300      	movs	r3, #0
 80105f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80105fa:	3b14      	subs	r3, #20
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	da00      	bge.n	8010602 <ip4_frag+0x1e>
 8010600:	3307      	adds	r3, #7
 8010602:	10db      	asrs	r3, r3, #3
 8010604:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010606:	2314      	movs	r3, #20
 8010608:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8010610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010612:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	f003 030f 	and.w	r3, r3, #15
 801061c:	b2db      	uxtb	r3, r3
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	b2db      	uxtb	r3, r3
 8010622:	2b14      	cmp	r3, #20
 8010624:	d002      	beq.n	801062c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010626:	f06f 0305 	mvn.w	r3, #5
 801062a:	e110      	b.n	801084e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	895b      	ldrh	r3, [r3, #10]
 8010630:	2b13      	cmp	r3, #19
 8010632:	d809      	bhi.n	8010648 <ip4_frag+0x64>
 8010634:	4b88      	ldr	r3, [pc, #544]	@ (8010858 <ip4_frag+0x274>)
 8010636:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801063a:	4988      	ldr	r1, [pc, #544]	@ (801085c <ip4_frag+0x278>)
 801063c:	4888      	ldr	r0, [pc, #544]	@ (8010860 <ip4_frag+0x27c>)
 801063e:	f000 fc45 	bl	8010ecc <iprintf>
 8010642:	f06f 0305 	mvn.w	r3, #5
 8010646:	e102      	b.n	801084e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801064a:	88db      	ldrh	r3, [r3, #6]
 801064c:	b29b      	uxth	r3, r3
 801064e:	4618      	mov	r0, r3
 8010650:	f7f5 fe3a 	bl	80062c8 <lwip_htons>
 8010654:	4603      	mov	r3, r0
 8010656:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010658:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801065a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801065e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010662:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010668:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	891b      	ldrh	r3, [r3, #8]
 801066e:	3b14      	subs	r3, #20
 8010670:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8010674:	e0e1      	b.n	801083a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010676:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010678:	00db      	lsls	r3, r3, #3
 801067a:	b29b      	uxth	r3, r3
 801067c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010680:	4293      	cmp	r3, r2
 8010682:	bf28      	it	cs
 8010684:	4613      	movcs	r3, r2
 8010686:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010688:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801068c:	2114      	movs	r1, #20
 801068e:	200e      	movs	r0, #14
 8010690:	f7f6 ff86 	bl	80075a0 <pbuf_alloc>
 8010694:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8010696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010698:	2b00      	cmp	r3, #0
 801069a:	f000 80d5 	beq.w	8010848 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801069e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a0:	895b      	ldrh	r3, [r3, #10]
 80106a2:	2b13      	cmp	r3, #19
 80106a4:	d806      	bhi.n	80106b4 <ip4_frag+0xd0>
 80106a6:	4b6c      	ldr	r3, [pc, #432]	@ (8010858 <ip4_frag+0x274>)
 80106a8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80106ac:	496d      	ldr	r1, [pc, #436]	@ (8010864 <ip4_frag+0x280>)
 80106ae:	486c      	ldr	r0, [pc, #432]	@ (8010860 <ip4_frag+0x27c>)
 80106b0:	f000 fc0c 	bl	8010ecc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80106b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	2214      	movs	r2, #20
 80106ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80106bc:	4618      	mov	r0, r3
 80106be:	f000 fdda 	bl	8011276 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80106c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80106c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80106ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80106ce:	e064      	b.n	801079a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	895a      	ldrh	r2, [r3, #10]
 80106d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80106d6:	1ad3      	subs	r3, r2, r3
 80106d8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	895b      	ldrh	r3, [r3, #10]
 80106de:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d906      	bls.n	80106f2 <ip4_frag+0x10e>
 80106e4:	4b5c      	ldr	r3, [pc, #368]	@ (8010858 <ip4_frag+0x274>)
 80106e6:	f240 322d 	movw	r2, #813	@ 0x32d
 80106ea:	495f      	ldr	r1, [pc, #380]	@ (8010868 <ip4_frag+0x284>)
 80106ec:	485c      	ldr	r0, [pc, #368]	@ (8010860 <ip4_frag+0x27c>)
 80106ee:	f000 fbed 	bl	8010ecc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80106f2:	8bfa      	ldrh	r2, [r7, #30]
 80106f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80106f8:	4293      	cmp	r3, r2
 80106fa:	bf28      	it	cs
 80106fc:	4613      	movcs	r3, r2
 80106fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010702:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010706:	2b00      	cmp	r3, #0
 8010708:	d105      	bne.n	8010716 <ip4_frag+0x132>
        poff = 0;
 801070a:	2300      	movs	r3, #0
 801070c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	60fb      	str	r3, [r7, #12]
        continue;
 8010714:	e041      	b.n	801079a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010716:	f7ff ff0d 	bl	8010534 <ip_frag_alloc_pbuf_custom_ref>
 801071a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d103      	bne.n	801072a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010724:	f7f7 fa20 	bl	8007b68 <pbuf_free>
        goto memerr;
 8010728:	e08f      	b.n	801084a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801072a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010730:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010732:	4413      	add	r3, r2
 8010734:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010738:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801073c:	9201      	str	r2, [sp, #4]
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	4603      	mov	r3, r0
 8010742:	2241      	movs	r2, #65	@ 0x41
 8010744:	2000      	movs	r0, #0
 8010746:	f7f7 f855 	bl	80077f4 <pbuf_alloced_custom>
 801074a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d106      	bne.n	8010760 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010752:	69b8      	ldr	r0, [r7, #24]
 8010754:	f7ff fef6 	bl	8010544 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010758:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801075a:	f7f7 fa05 	bl	8007b68 <pbuf_free>
        goto memerr;
 801075e:	e074      	b.n	801084a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f7f7 faa1 	bl	8007ca8 <pbuf_ref>
      pcr->original = p;
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	68fa      	ldr	r2, [r7, #12]
 801076a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	4a3f      	ldr	r2, [pc, #252]	@ (801086c <ip4_frag+0x288>)
 8010770:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010772:	6979      	ldr	r1, [r7, #20]
 8010774:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010776:	f7f7 fab9 	bl	8007cec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801077a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801077e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010788:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801078c:	2b00      	cmp	r3, #0
 801078e:	d004      	beq.n	801079a <ip4_frag+0x1b6>
        poff = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801079a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d196      	bne.n	80106d0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80107a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80107a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80107a8:	4413      	add	r3, r2
 80107aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80107b0:	f1a3 0213 	sub.w	r2, r3, #19
 80107b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80107b8:	429a      	cmp	r2, r3
 80107ba:	bfcc      	ite	gt
 80107bc:	2301      	movgt	r3, #1
 80107be:	2300      	movle	r3, #0
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80107c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80107c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80107ce:	6a3b      	ldr	r3, [r7, #32]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d002      	beq.n	80107da <ip4_frag+0x1f6>
 80107d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d003      	beq.n	80107e2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80107da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80107dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80107e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80107e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7f5 fd6f 	bl	80062c8 <lwip_htons>
 80107ea:	4603      	mov	r3, r0
 80107ec:	461a      	mov	r2, r3
 80107ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80107f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80107f4:	3314      	adds	r3, #20
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7f5 fd65 	bl	80062c8 <lwip_htons>
 80107fe:	4603      	mov	r3, r0
 8010800:	461a      	mov	r2, r3
 8010802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010804:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010808:	2200      	movs	r2, #0
 801080a:	729a      	strb	r2, [r3, #10]
 801080c:	2200      	movs	r2, #0
 801080e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	695b      	ldr	r3, [r3, #20]
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010818:	68b8      	ldr	r0, [r7, #8]
 801081a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801081c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801081e:	f7f7 f9a3 	bl	8007b68 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010822:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010826:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801082e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010832:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010834:	4413      	add	r3, r2
 8010836:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801083a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801083e:	2b00      	cmp	r3, #0
 8010840:	f47f af19 	bne.w	8010676 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010844:	2300      	movs	r3, #0
 8010846:	e002      	b.n	801084e <ip4_frag+0x26a>
      goto memerr;
 8010848:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801084a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801084e:	4618      	mov	r0, r3
 8010850:	3748      	adds	r7, #72	@ 0x48
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	08014f78 	.word	0x08014f78
 801085c:	08015154 	.word	0x08015154
 8010860:	08014fc0 	.word	0x08014fc0
 8010864:	08015170 	.word	0x08015170
 8010868:	08015190 	.word	0x08015190
 801086c:	0801057d 	.word	0x0801057d

08010870 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b086      	sub	sp, #24
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801087a:	230e      	movs	r3, #14
 801087c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	895b      	ldrh	r3, [r3, #10]
 8010882:	2b0e      	cmp	r3, #14
 8010884:	d96e      	bls.n	8010964 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	7bdb      	ldrb	r3, [r3, #15]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d106      	bne.n	801089c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010894:	3301      	adds	r3, #1
 8010896:	b2da      	uxtb	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	685b      	ldr	r3, [r3, #4]
 80108a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	7b1a      	ldrb	r2, [r3, #12]
 80108a6:	7b5b      	ldrb	r3, [r3, #13]
 80108a8:	021b      	lsls	r3, r3, #8
 80108aa:	4313      	orrs	r3, r2
 80108ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	f003 0301 	and.w	r3, r3, #1
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d023      	beq.n	8010902 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d10f      	bne.n	80108e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	785b      	ldrb	r3, [r3, #1]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d11b      	bne.n	8010902 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80108ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80108d0:	d117      	bne.n	8010902 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	7b5b      	ldrb	r3, [r3, #13]
 80108d6:	f043 0310 	orr.w	r3, r3, #16
 80108da:	b2da      	uxtb	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	735a      	strb	r2, [r3, #13]
 80108e0:	e00f      	b.n	8010902 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	2206      	movs	r2, #6
 80108e6:	4928      	ldr	r1, [pc, #160]	@ (8010988 <ethernet_input+0x118>)
 80108e8:	4618      	mov	r0, r3
 80108ea:	f000 fc3f 	bl	801116c <memcmp>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d106      	bne.n	8010902 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	7b5b      	ldrb	r3, [r3, #13]
 80108f8:	f043 0308 	orr.w	r3, r3, #8
 80108fc:	b2da      	uxtb	r2, r3
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010902:	89fb      	ldrh	r3, [r7, #14]
 8010904:	2b08      	cmp	r3, #8
 8010906:	d003      	beq.n	8010910 <ethernet_input+0xa0>
 8010908:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801090c:	d014      	beq.n	8010938 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801090e:	e032      	b.n	8010976 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010916:	f003 0308 	and.w	r3, r3, #8
 801091a:	2b00      	cmp	r3, #0
 801091c:	d024      	beq.n	8010968 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801091e:	8afb      	ldrh	r3, [r7, #22]
 8010920:	4619      	mov	r1, r3
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7f7 f89a 	bl	8007a5c <pbuf_remove_header>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d11e      	bne.n	801096c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801092e:	6839      	ldr	r1, [r7, #0]
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7fe ff21 	bl	800f778 <ip4_input>
      break;
 8010936:	e013      	b.n	8010960 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801093e:	f003 0308 	and.w	r3, r3, #8
 8010942:	2b00      	cmp	r3, #0
 8010944:	d014      	beq.n	8010970 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010946:	8afb      	ldrh	r3, [r7, #22]
 8010948:	4619      	mov	r1, r3
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7f7 f886 	bl	8007a5c <pbuf_remove_header>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d10e      	bne.n	8010974 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7fe f82f 	bl	800e9bc <etharp_input>
      break;
 801095e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010960:	2300      	movs	r3, #0
 8010962:	e00c      	b.n	801097e <ethernet_input+0x10e>
    goto free_and_return;
 8010964:	bf00      	nop
 8010966:	e006      	b.n	8010976 <ethernet_input+0x106>
        goto free_and_return;
 8010968:	bf00      	nop
 801096a:	e004      	b.n	8010976 <ethernet_input+0x106>
        goto free_and_return;
 801096c:	bf00      	nop
 801096e:	e002      	b.n	8010976 <ethernet_input+0x106>
        goto free_and_return;
 8010970:	bf00      	nop
 8010972:	e000      	b.n	8010976 <ethernet_input+0x106>
        goto free_and_return;
 8010974:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f7f7 f8f6 	bl	8007b68 <pbuf_free>
  return ERR_OK;
 801097c:	2300      	movs	r3, #0
}
 801097e:	4618      	mov	r0, r3
 8010980:	3718      	adds	r7, #24
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	080153e4 	.word	0x080153e4

0801098c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801098c:	b580      	push	{r7, lr}
 801098e:	b086      	sub	sp, #24
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	607a      	str	r2, [r7, #4]
 8010998:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801099a:	8c3b      	ldrh	r3, [r7, #32]
 801099c:	4618      	mov	r0, r3
 801099e:	f7f5 fc93 	bl	80062c8 <lwip_htons>
 80109a2:	4603      	mov	r3, r0
 80109a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80109a6:	210e      	movs	r1, #14
 80109a8:	68b8      	ldr	r0, [r7, #8]
 80109aa:	f7f7 f847 	bl	8007a3c <pbuf_add_header>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d125      	bne.n	8010a00 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	8afa      	ldrh	r2, [r7, #22]
 80109be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	2206      	movs	r2, #6
 80109c4:	6839      	ldr	r1, [r7, #0]
 80109c6:	4618      	mov	r0, r3
 80109c8:	f000 fc55 	bl	8011276 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	3306      	adds	r3, #6
 80109d0:	2206      	movs	r2, #6
 80109d2:	6879      	ldr	r1, [r7, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f000 fc4e 	bl	8011276 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80109e0:	2b06      	cmp	r3, #6
 80109e2:	d006      	beq.n	80109f2 <ethernet_output+0x66>
 80109e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010a10 <ethernet_output+0x84>)
 80109e6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80109ea:	490a      	ldr	r1, [pc, #40]	@ (8010a14 <ethernet_output+0x88>)
 80109ec:	480a      	ldr	r0, [pc, #40]	@ (8010a18 <ethernet_output+0x8c>)
 80109ee:	f000 fa6d 	bl	8010ecc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	699b      	ldr	r3, [r3, #24]
 80109f6:	68b9      	ldr	r1, [r7, #8]
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	4798      	blx	r3
 80109fc:	4603      	mov	r3, r0
 80109fe:	e002      	b.n	8010a06 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010a00:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010a02:	f06f 0301 	mvn.w	r3, #1
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3718      	adds	r7, #24
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	080151a0 	.word	0x080151a0
 8010a14:	080151d8 	.word	0x080151d8
 8010a18:	0801520c 	.word	0x0801520c

08010a1c <HW_Verification_Proccess>:
 *      Author: leah
 */
#include "hw_verif.h"

void HW_Verification_Proccess(void)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	af00      	add	r7, sp, #0
	UDP_Server_Init();
 8010a20:	f000 f804 	bl	8010a2c <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 8010a24:	f7f5 f82c 	bl	8005a80 <MX_LWIP_Process>
 8010a28:	e7fc      	b.n	8010a24 <HW_Verification_Proccess+0x8>
	...

08010a2c <UDP_Server_Init>:

uint8_t perform_test();
void send_result(uint8_t result);

void UDP_Server_Init(void)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 8010a32:	f7fd fbe1 	bl	800e1f8 <udp_new>
 8010a36:	4603      	mov	r3, r0
 8010a38:	4a12      	ldr	r2, [pc, #72]	@ (8010a84 <UDP_Server_Init+0x58>)
 8010a3a:	6013      	str	r3, [r2, #0]

	if (upcb)
 8010a3c:	4b11      	ldr	r3, [pc, #68]	@ (8010a84 <UDP_Server_Init+0x58>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d01a      	beq.n	8010a7a <UDP_Server_Init+0x4e>
	{
		// Bind the upcb to the UDP_PORT port
		// Using IP_ADDR_ANY allow the upcb to be used by any local interface
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 8010a44:	4b0f      	ldr	r3, [pc, #60]	@ (8010a84 <UDP_Server_Init+0x58>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f24d 4231 	movw	r2, #54321	@ 0xd431
 8010a4c:	490e      	ldr	r1, [pc, #56]	@ (8010a88 <UDP_Server_Init+0x5c>)
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fd fa82 	bl	800df58 <udp_bind>
 8010a54:	4603      	mov	r3, r0
 8010a56:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 8010a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d107      	bne.n	8010a70 <UDP_Server_Init+0x44>
		{
			// Set a receive callback for the upcb
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 8010a60:	4b08      	ldr	r3, [pc, #32]	@ (8010a84 <UDP_Server_Init+0x58>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2200      	movs	r2, #0
 8010a66:	4909      	ldr	r1, [pc, #36]	@ (8010a8c <UDP_Server_Init+0x60>)
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fd fb63 	bl	800e134 <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 8010a6e:	e004      	b.n	8010a7a <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 8010a70:	4b04      	ldr	r3, [pc, #16]	@ (8010a84 <UDP_Server_Init+0x58>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fd fb7d 	bl	800e174 <udp_remove>
}
 8010a7a:	bf00      	nop
 8010a7c:	3708      	adds	r7, #8
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	2000804c 	.word	0x2000804c
 8010a88:	080153e0 	.word	0x080153e0
 8010a8c:	08010a91 	.word	0x08010a91

08010a90 <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b086      	sub	sp, #24
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
 8010a9c:	603b      	str	r3, [r7, #0]
	// Load data to in_msg
	in_msg.upcb = upcb;
 8010a9e:	4a24      	ldr	r2, [pc, #144]	@ (8010b30 <UDP_Recv_Callback+0xa0>)
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	6013      	str	r3, [r2, #0]
	in_msg.addr = addr;
 8010aa4:	4a22      	ldr	r2, [pc, #136]	@ (8010b30 <UDP_Recv_Callback+0xa0>)
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	6053      	str	r3, [r2, #4]
	in_msg.port = port;
 8010aaa:	4a21      	ldr	r2, [pc, #132]	@ (8010b30 <UDP_Recv_Callback+0xa0>)
 8010aac:	8c3b      	ldrh	r3, [r7, #32]
 8010aae:	8113      	strh	r3, [r2, #8]

	int n_read = 0;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	617b      	str	r3, [r7, #20]
	memcpy(&in_msg.test_id, p->payload, sizeof(in_msg.test_id));
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	461a      	mov	r2, r3
 8010abc:	4b1c      	ldr	r3, [pc, #112]	@ (8010b30 <UDP_Recv_Callback+0xa0>)
 8010abe:	60da      	str	r2, [r3, #12]
	n_read += sizeof(in_msg.test_id);
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	3304      	adds	r3, #4
 8010ac4:	617b      	str	r3, [r7, #20]

	memcpy(&in_msg.peripheral, &((uint8_t *)p->payload)[n_read++], 1);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	685a      	ldr	r2, [r3, #4]
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	1c59      	adds	r1, r3, #1
 8010ace:	6179      	str	r1, [r7, #20]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	781a      	ldrb	r2, [r3, #0]
 8010ad4:	4b16      	ldr	r3, [pc, #88]	@ (8010b30 <UDP_Recv_Callback+0xa0>)
 8010ad6:	741a      	strb	r2, [r3, #16]
	memcpy(&in_msg.n_iter, &((uint8_t *)p->payload)[n_read++], 1);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	685a      	ldr	r2, [r3, #4]
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	1c59      	adds	r1, r3, #1
 8010ae0:	6179      	str	r1, [r7, #20]
 8010ae2:	4413      	add	r3, r2
 8010ae4:	781a      	ldrb	r2, [r3, #0]
 8010ae6:	4b12      	ldr	r3, [pc, #72]	@ (8010b30 <UDP_Recv_Callback+0xa0>)
 8010ae8:	745a      	strb	r2, [r3, #17]
	memcpy(&in_msg.p_len, &((uint8_t *)p->payload)[n_read++], 1);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	685a      	ldr	r2, [r3, #4]
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	1c59      	adds	r1, r3, #1
 8010af2:	6179      	str	r1, [r7, #20]
 8010af4:	4413      	add	r3, r2
 8010af6:	781a      	ldrb	r2, [r3, #0]
 8010af8:	4b0d      	ldr	r3, [pc, #52]	@ (8010b30 <UDP_Recv_Callback+0xa0>)
 8010afa:	749a      	strb	r2, [r3, #18]
	memcpy(&in_msg.payload, &((char *)p->payload)[n_read], in_msg.p_len);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	685a      	ldr	r2, [r3, #4]
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	4413      	add	r3, r2
 8010b04:	4a0a      	ldr	r2, [pc, #40]	@ (8010b30 <UDP_Recv_Callback+0xa0>)
 8010b06:	7c92      	ldrb	r2, [r2, #18]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	480a      	ldr	r0, [pc, #40]	@ (8010b34 <UDP_Recv_Callback+0xa4>)
 8010b0c:	f000 fbb3 	bl	8011276 <memcpy>

	uint8_t result = perform_test();
 8010b10:	f000 f812 	bl	8010b38 <perform_test>
 8010b14:	4603      	mov	r3, r0
 8010b16:	74fb      	strb	r3, [r7, #19]
	send_result(result);
 8010b18:	7cfb      	ldrb	r3, [r7, #19]
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f000 f85c 	bl	8010bd8 <send_result>

	// Free the p buffer
	pbuf_free(p);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7f7 f821 	bl	8007b68 <pbuf_free>
}
 8010b26:	bf00      	nop
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	20008050 	.word	0x20008050
 8010b34:	20008063 	.word	0x20008063

08010b38 <perform_test>:

uint8_t perform_test()
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	af00      	add	r7, sp, #0
	printf("choosing test. in_msg.periferal = %u\n", in_msg.peripheral);
 8010b3c:	4b22      	ldr	r3, [pc, #136]	@ (8010bc8 <perform_test+0x90>)
 8010b3e:	7c1b      	ldrb	r3, [r3, #16]
 8010b40:	4619      	mov	r1, r3
 8010b42:	4822      	ldr	r0, [pc, #136]	@ (8010bcc <perform_test+0x94>)
 8010b44:	f000 f9c2 	bl	8010ecc <iprintf>
	switch (in_msg.peripheral) {
 8010b48:	4b1f      	ldr	r3, [pc, #124]	@ (8010bc8 <perform_test+0x90>)
 8010b4a:	7c1b      	ldrb	r3, [r3, #16]
 8010b4c:	3b01      	subs	r3, #1
 8010b4e:	2b0f      	cmp	r3, #15
 8010b50:	d837      	bhi.n	8010bc2 <perform_test+0x8a>
 8010b52:	a201      	add	r2, pc, #4	@ (adr r2, 8010b58 <perform_test+0x20>)
 8010b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b58:	08010b99 	.word	0x08010b99
 8010b5c:	08010b9d 	.word	0x08010b9d
 8010b60:	08010bc3 	.word	0x08010bc3
 8010b64:	08010bb7 	.word	0x08010bb7
 8010b68:	08010bc3 	.word	0x08010bc3
 8010b6c:	08010bc3 	.word	0x08010bc3
 8010b70:	08010bc3 	.word	0x08010bc3
 8010b74:	08010bbb 	.word	0x08010bbb
 8010b78:	08010bc3 	.word	0x08010bc3
 8010b7c:	08010bc3 	.word	0x08010bc3
 8010b80:	08010bc3 	.word	0x08010bc3
 8010b84:	08010bc3 	.word	0x08010bc3
 8010b88:	08010bc3 	.word	0x08010bc3
 8010b8c:	08010bc3 	.word	0x08010bc3
 8010b90:	08010bc3 	.word	0x08010bc3
 8010b94:	08010bbf 	.word	0x08010bbf
		case TEST_TIM:
			return TEST_SUCCESS;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e013      	b.n	8010bc4 <perform_test+0x8c>
			break;
		case TEST_UART:
			printf("got UART test\n");
 8010b9c:	480c      	ldr	r0, [pc, #48]	@ (8010bd0 <perform_test+0x98>)
 8010b9e:	f000 fa05 	bl	8010fac <puts>
			return UART_Test_N_Perform(in_msg.payload, in_msg.p_len, in_msg.n_iter);
 8010ba2:	4b09      	ldr	r3, [pc, #36]	@ (8010bc8 <perform_test+0x90>)
 8010ba4:	7c9b      	ldrb	r3, [r3, #18]
 8010ba6:	4a08      	ldr	r2, [pc, #32]	@ (8010bc8 <perform_test+0x90>)
 8010ba8:	7c52      	ldrb	r2, [r2, #17]
 8010baa:	4619      	mov	r1, r3
 8010bac:	4809      	ldr	r0, [pc, #36]	@ (8010bd4 <perform_test+0x9c>)
 8010bae:	f000 f853 	bl	8010c58 <UART_Test_N_Perform>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	e006      	b.n	8010bc4 <perform_test+0x8c>
			break;
		case TEST_SPI:
			return TEST_SUCCESS;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e004      	b.n	8010bc4 <perform_test+0x8c>
			break;
		case TEST_I2C:
			return TEST_SUCCESS;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	e002      	b.n	8010bc4 <perform_test+0x8c>
			break;
		case TEST_ADC:
			return TEST_SUCCESS;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e000      	b.n	8010bc4 <perform_test+0x8c>
			break;
		default:
			return TEST_FAILED;
 8010bc2:	23ff      	movs	r3, #255	@ 0xff
			break;
	}

	return TEST_FAILED;
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	20008050 	.word	0x20008050
 8010bcc:	08015234 	.word	0x08015234
 8010bd0:	0801525c 	.word	0x0801525c
 8010bd4:	20008063 	.word	0x20008063

08010bd8 <send_result>:

void send_result(uint8_t result)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	4603      	mov	r3, r0
 8010be0:	71fb      	strb	r3, [r7, #7]
	uint8_t response[RESPONSE_SIZE];
	memcpy(response, &in_msg.test_id, sizeof(in_msg.test_id));
 8010be2:	4b14      	ldr	r3, [pc, #80]	@ (8010c34 <send_result+0x5c>)
 8010be4:	68db      	ldr	r3, [r3, #12]
 8010be6:	60fb      	str	r3, [r7, #12]
	response[sizeof(in_msg.test_id)] = result;
 8010be8:	79fb      	ldrb	r3, [r7, #7]
 8010bea:	743b      	strb	r3, [r7, #16]

	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 8010bec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010bf0:	2105      	movs	r1, #5
 8010bf2:	2036      	movs	r0, #54	@ 0x36
 8010bf4:	f7f6 fcd4 	bl	80075a0 <pbuf_alloc>
 8010bf8:	6178      	str	r0, [r7, #20]
	if (resp_buf != NULL)
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d014      	beq.n	8010c2a <send_result+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	461a      	mov	r2, r3
 8010c06:	f107 030c 	add.w	r3, r7, #12
 8010c0a:	6818      	ldr	r0, [r3, #0]
 8010c0c:	6010      	str	r0, [r2, #0]
 8010c0e:	791b      	ldrb	r3, [r3, #4]
 8010c10:	7113      	strb	r3, [r2, #4]
		udp_sendto(in_msg.upcb, resp_buf, in_msg.addr, in_msg.port);
 8010c12:	4b08      	ldr	r3, [pc, #32]	@ (8010c34 <send_result+0x5c>)
 8010c14:	6818      	ldr	r0, [r3, #0]
 8010c16:	4b07      	ldr	r3, [pc, #28]	@ (8010c34 <send_result+0x5c>)
 8010c18:	685a      	ldr	r2, [r3, #4]
 8010c1a:	4b06      	ldr	r3, [pc, #24]	@ (8010c34 <send_result+0x5c>)
 8010c1c:	891b      	ldrh	r3, [r3, #8]
 8010c1e:	6979      	ldr	r1, [r7, #20]
 8010c20:	f7fc ff72 	bl	800db08 <udp_sendto>
	    pbuf_free(resp_buf);
 8010c24:	6978      	ldr	r0, [r7, #20]
 8010c26:	f7f6 ff9f 	bl	8007b68 <pbuf_free>
	}
}
 8010c2a:	bf00      	nop
 8010c2c:	3718      	adds	r7, #24
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	20008050 	.word	0x20008050

08010c38 <UART_Test_Perform>:

#define TEST_SUCCESS 0x01
#define TEST_FAILED 0xff

uint8_t UART_Test_Perform(char *msg, uint8_t msg_len)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	460b      	mov	r3, r1
 8010c42:	70fb      	strb	r3, [r7, #3]
	printf("Performing uart test\n");
 8010c44:	4803      	ldr	r0, [pc, #12]	@ (8010c54 <UART_Test_Perform+0x1c>)
 8010c46:	f000 f9b1 	bl	8010fac <puts>
	return TEST_SUCCESS;
 8010c4a:	2301      	movs	r3, #1
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	0801526c 	.word	0x0801526c

08010c58 <UART_Test_N_Perform>:

uint8_t UART_Test_N_Perform(char *msg, uint8_t msg_len, uint8_t n)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
 8010c64:	4613      	mov	r3, r2
 8010c66:	70bb      	strb	r3, [r7, #2]
	int failed = 0;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < n; i++)
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	60bb      	str	r3, [r7, #8]
 8010c70:	e019      	b.n	8010ca6 <UART_Test_N_Perform+0x4e>
	{
		if (UART_Test_Perform(msg, msg_len) == TEST_FAILED)
 8010c72:	78fb      	ldrb	r3, [r7, #3]
 8010c74:	4619      	mov	r1, r3
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7ff ffde 	bl	8010c38 <UART_Test_Perform>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2bff      	cmp	r3, #255	@ 0xff
 8010c80:	d108      	bne.n	8010c94 <UART_Test_N_Perform+0x3c>
		{
			printf("TEST %d: uart test failed\n", i+1);
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	3301      	adds	r3, #1
 8010c86:	4619      	mov	r1, r3
 8010c88:	480e      	ldr	r0, [pc, #56]	@ (8010cc4 <UART_Test_N_Perform+0x6c>)
 8010c8a:	f000 f91f 	bl	8010ecc <iprintf>
			failed = 1;
 8010c8e:	2301      	movs	r3, #1
 8010c90:	60fb      	str	r3, [r7, #12]
 8010c92:	e005      	b.n	8010ca0 <UART_Test_N_Perform+0x48>
		}
		else printf("TEST %d: uart test success\n", i+1);
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	3301      	adds	r3, #1
 8010c98:	4619      	mov	r1, r3
 8010c9a:	480b      	ldr	r0, [pc, #44]	@ (8010cc8 <UART_Test_N_Perform+0x70>)
 8010c9c:	f000 f916 	bl	8010ecc <iprintf>
	for (int i = 0; i < n; i++)
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	60bb      	str	r3, [r7, #8]
 8010ca6:	78bb      	ldrb	r3, [r7, #2]
 8010ca8:	68ba      	ldr	r2, [r7, #8]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	dbe1      	blt.n	8010c72 <UART_Test_N_Perform+0x1a>
	}

	if (failed != 0) return TEST_FAILED;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <UART_Test_N_Perform+0x60>
 8010cb4:	23ff      	movs	r3, #255	@ 0xff
 8010cb6:	e000      	b.n	8010cba <UART_Test_N_Perform+0x62>

	return TEST_SUCCESS;
 8010cb8:	2301      	movs	r3, #1
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3710      	adds	r7, #16
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	08015284 	.word	0x08015284
 8010cc8:	080152a0 	.word	0x080152a0

08010ccc <rand>:
 8010ccc:	4b16      	ldr	r3, [pc, #88]	@ (8010d28 <rand+0x5c>)
 8010cce:	b510      	push	{r4, lr}
 8010cd0:	681c      	ldr	r4, [r3, #0]
 8010cd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cd4:	b9b3      	cbnz	r3, 8010d04 <rand+0x38>
 8010cd6:	2018      	movs	r0, #24
 8010cd8:	f000 fb44 	bl	8011364 <malloc>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	6320      	str	r0, [r4, #48]	@ 0x30
 8010ce0:	b920      	cbnz	r0, 8010cec <rand+0x20>
 8010ce2:	4b12      	ldr	r3, [pc, #72]	@ (8010d2c <rand+0x60>)
 8010ce4:	4812      	ldr	r0, [pc, #72]	@ (8010d30 <rand+0x64>)
 8010ce6:	2152      	movs	r1, #82	@ 0x52
 8010ce8:	f000 fad4 	bl	8011294 <__assert_func>
 8010cec:	4911      	ldr	r1, [pc, #68]	@ (8010d34 <rand+0x68>)
 8010cee:	4b12      	ldr	r3, [pc, #72]	@ (8010d38 <rand+0x6c>)
 8010cf0:	e9c0 1300 	strd	r1, r3, [r0]
 8010cf4:	4b11      	ldr	r3, [pc, #68]	@ (8010d3c <rand+0x70>)
 8010cf6:	6083      	str	r3, [r0, #8]
 8010cf8:	230b      	movs	r3, #11
 8010cfa:	8183      	strh	r3, [r0, #12]
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	2001      	movs	r0, #1
 8010d00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010d04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d06:	480e      	ldr	r0, [pc, #56]	@ (8010d40 <rand+0x74>)
 8010d08:	690b      	ldr	r3, [r1, #16]
 8010d0a:	694c      	ldr	r4, [r1, #20]
 8010d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8010d44 <rand+0x78>)
 8010d0e:	4358      	muls	r0, r3
 8010d10:	fb02 0004 	mla	r0, r2, r4, r0
 8010d14:	fba3 3202 	umull	r3, r2, r3, r2
 8010d18:	3301      	adds	r3, #1
 8010d1a:	eb40 0002 	adc.w	r0, r0, r2
 8010d1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010d22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010d26:	bd10      	pop	{r4, pc}
 8010d28:	2000007c 	.word	0x2000007c
 8010d2c:	080153f2 	.word	0x080153f2
 8010d30:	08015409 	.word	0x08015409
 8010d34:	abcd330e 	.word	0xabcd330e
 8010d38:	e66d1234 	.word	0xe66d1234
 8010d3c:	0005deec 	.word	0x0005deec
 8010d40:	5851f42d 	.word	0x5851f42d
 8010d44:	4c957f2d 	.word	0x4c957f2d

08010d48 <std>:
 8010d48:	2300      	movs	r3, #0
 8010d4a:	b510      	push	{r4, lr}
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d56:	6083      	str	r3, [r0, #8]
 8010d58:	8181      	strh	r1, [r0, #12]
 8010d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010d5c:	81c2      	strh	r2, [r0, #14]
 8010d5e:	6183      	str	r3, [r0, #24]
 8010d60:	4619      	mov	r1, r3
 8010d62:	2208      	movs	r2, #8
 8010d64:	305c      	adds	r0, #92	@ 0x5c
 8010d66:	f000 fa11 	bl	801118c <memset>
 8010d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010da0 <std+0x58>)
 8010d6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010da4 <std+0x5c>)
 8010d70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010d72:	4b0d      	ldr	r3, [pc, #52]	@ (8010da8 <std+0x60>)
 8010d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010d76:	4b0d      	ldr	r3, [pc, #52]	@ (8010dac <std+0x64>)
 8010d78:	6323      	str	r3, [r4, #48]	@ 0x30
 8010d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010db0 <std+0x68>)
 8010d7c:	6224      	str	r4, [r4, #32]
 8010d7e:	429c      	cmp	r4, r3
 8010d80:	d006      	beq.n	8010d90 <std+0x48>
 8010d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010d86:	4294      	cmp	r4, r2
 8010d88:	d002      	beq.n	8010d90 <std+0x48>
 8010d8a:	33d0      	adds	r3, #208	@ 0xd0
 8010d8c:	429c      	cmp	r4, r3
 8010d8e:	d105      	bne.n	8010d9c <std+0x54>
 8010d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d98:	f000 ba6a 	b.w	8011270 <__retarget_lock_init_recursive>
 8010d9c:	bd10      	pop	{r4, pc}
 8010d9e:	bf00      	nop
 8010da0:	08010fbd 	.word	0x08010fbd
 8010da4:	08010fdf 	.word	0x08010fdf
 8010da8:	08011017 	.word	0x08011017
 8010dac:	0801103b 	.word	0x0801103b
 8010db0:	20008164 	.word	0x20008164

08010db4 <stdio_exit_handler>:
 8010db4:	4a02      	ldr	r2, [pc, #8]	@ (8010dc0 <stdio_exit_handler+0xc>)
 8010db6:	4903      	ldr	r1, [pc, #12]	@ (8010dc4 <stdio_exit_handler+0x10>)
 8010db8:	4803      	ldr	r0, [pc, #12]	@ (8010dc8 <stdio_exit_handler+0x14>)
 8010dba:	f000 b869 	b.w	8010e90 <_fwalk_sglue>
 8010dbe:	bf00      	nop
 8010dc0:	20000070 	.word	0x20000070
 8010dc4:	08011b75 	.word	0x08011b75
 8010dc8:	20000080 	.word	0x20000080

08010dcc <cleanup_stdio>:
 8010dcc:	6841      	ldr	r1, [r0, #4]
 8010dce:	4b0c      	ldr	r3, [pc, #48]	@ (8010e00 <cleanup_stdio+0x34>)
 8010dd0:	4299      	cmp	r1, r3
 8010dd2:	b510      	push	{r4, lr}
 8010dd4:	4604      	mov	r4, r0
 8010dd6:	d001      	beq.n	8010ddc <cleanup_stdio+0x10>
 8010dd8:	f000 fecc 	bl	8011b74 <_fflush_r>
 8010ddc:	68a1      	ldr	r1, [r4, #8]
 8010dde:	4b09      	ldr	r3, [pc, #36]	@ (8010e04 <cleanup_stdio+0x38>)
 8010de0:	4299      	cmp	r1, r3
 8010de2:	d002      	beq.n	8010dea <cleanup_stdio+0x1e>
 8010de4:	4620      	mov	r0, r4
 8010de6:	f000 fec5 	bl	8011b74 <_fflush_r>
 8010dea:	68e1      	ldr	r1, [r4, #12]
 8010dec:	4b06      	ldr	r3, [pc, #24]	@ (8010e08 <cleanup_stdio+0x3c>)
 8010dee:	4299      	cmp	r1, r3
 8010df0:	d004      	beq.n	8010dfc <cleanup_stdio+0x30>
 8010df2:	4620      	mov	r0, r4
 8010df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010df8:	f000 bebc 	b.w	8011b74 <_fflush_r>
 8010dfc:	bd10      	pop	{r4, pc}
 8010dfe:	bf00      	nop
 8010e00:	20008164 	.word	0x20008164
 8010e04:	200081cc 	.word	0x200081cc
 8010e08:	20008234 	.word	0x20008234

08010e0c <global_stdio_init.part.0>:
 8010e0c:	b510      	push	{r4, lr}
 8010e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010e3c <global_stdio_init.part.0+0x30>)
 8010e10:	4c0b      	ldr	r4, [pc, #44]	@ (8010e40 <global_stdio_init.part.0+0x34>)
 8010e12:	4a0c      	ldr	r2, [pc, #48]	@ (8010e44 <global_stdio_init.part.0+0x38>)
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	4620      	mov	r0, r4
 8010e18:	2200      	movs	r2, #0
 8010e1a:	2104      	movs	r1, #4
 8010e1c:	f7ff ff94 	bl	8010d48 <std>
 8010e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010e24:	2201      	movs	r2, #1
 8010e26:	2109      	movs	r1, #9
 8010e28:	f7ff ff8e 	bl	8010d48 <std>
 8010e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010e30:	2202      	movs	r2, #2
 8010e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e36:	2112      	movs	r1, #18
 8010e38:	f7ff bf86 	b.w	8010d48 <std>
 8010e3c:	2000829c 	.word	0x2000829c
 8010e40:	20008164 	.word	0x20008164
 8010e44:	08010db5 	.word	0x08010db5

08010e48 <__sfp_lock_acquire>:
 8010e48:	4801      	ldr	r0, [pc, #4]	@ (8010e50 <__sfp_lock_acquire+0x8>)
 8010e4a:	f000 ba12 	b.w	8011272 <__retarget_lock_acquire_recursive>
 8010e4e:	bf00      	nop
 8010e50:	200082a5 	.word	0x200082a5

08010e54 <__sfp_lock_release>:
 8010e54:	4801      	ldr	r0, [pc, #4]	@ (8010e5c <__sfp_lock_release+0x8>)
 8010e56:	f000 ba0d 	b.w	8011274 <__retarget_lock_release_recursive>
 8010e5a:	bf00      	nop
 8010e5c:	200082a5 	.word	0x200082a5

08010e60 <__sinit>:
 8010e60:	b510      	push	{r4, lr}
 8010e62:	4604      	mov	r4, r0
 8010e64:	f7ff fff0 	bl	8010e48 <__sfp_lock_acquire>
 8010e68:	6a23      	ldr	r3, [r4, #32]
 8010e6a:	b11b      	cbz	r3, 8010e74 <__sinit+0x14>
 8010e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e70:	f7ff bff0 	b.w	8010e54 <__sfp_lock_release>
 8010e74:	4b04      	ldr	r3, [pc, #16]	@ (8010e88 <__sinit+0x28>)
 8010e76:	6223      	str	r3, [r4, #32]
 8010e78:	4b04      	ldr	r3, [pc, #16]	@ (8010e8c <__sinit+0x2c>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1f5      	bne.n	8010e6c <__sinit+0xc>
 8010e80:	f7ff ffc4 	bl	8010e0c <global_stdio_init.part.0>
 8010e84:	e7f2      	b.n	8010e6c <__sinit+0xc>
 8010e86:	bf00      	nop
 8010e88:	08010dcd 	.word	0x08010dcd
 8010e8c:	2000829c 	.word	0x2000829c

08010e90 <_fwalk_sglue>:
 8010e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e94:	4607      	mov	r7, r0
 8010e96:	4688      	mov	r8, r1
 8010e98:	4614      	mov	r4, r2
 8010e9a:	2600      	movs	r6, #0
 8010e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8010ea4:	d505      	bpl.n	8010eb2 <_fwalk_sglue+0x22>
 8010ea6:	6824      	ldr	r4, [r4, #0]
 8010ea8:	2c00      	cmp	r4, #0
 8010eaa:	d1f7      	bne.n	8010e9c <_fwalk_sglue+0xc>
 8010eac:	4630      	mov	r0, r6
 8010eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eb2:	89ab      	ldrh	r3, [r5, #12]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d907      	bls.n	8010ec8 <_fwalk_sglue+0x38>
 8010eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	d003      	beq.n	8010ec8 <_fwalk_sglue+0x38>
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	47c0      	blx	r8
 8010ec6:	4306      	orrs	r6, r0
 8010ec8:	3568      	adds	r5, #104	@ 0x68
 8010eca:	e7e9      	b.n	8010ea0 <_fwalk_sglue+0x10>

08010ecc <iprintf>:
 8010ecc:	b40f      	push	{r0, r1, r2, r3}
 8010ece:	b507      	push	{r0, r1, r2, lr}
 8010ed0:	4906      	ldr	r1, [pc, #24]	@ (8010eec <iprintf+0x20>)
 8010ed2:	ab04      	add	r3, sp, #16
 8010ed4:	6808      	ldr	r0, [r1, #0]
 8010ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eda:	6881      	ldr	r1, [r0, #8]
 8010edc:	9301      	str	r3, [sp, #4]
 8010ede:	f000 fb21 	bl	8011524 <_vfiprintf_r>
 8010ee2:	b003      	add	sp, #12
 8010ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ee8:	b004      	add	sp, #16
 8010eea:	4770      	bx	lr
 8010eec:	2000007c 	.word	0x2000007c

08010ef0 <putchar>:
 8010ef0:	4b02      	ldr	r3, [pc, #8]	@ (8010efc <putchar+0xc>)
 8010ef2:	4601      	mov	r1, r0
 8010ef4:	6818      	ldr	r0, [r3, #0]
 8010ef6:	6882      	ldr	r2, [r0, #8]
 8010ef8:	f000 bed8 	b.w	8011cac <_putc_r>
 8010efc:	2000007c 	.word	0x2000007c

08010f00 <_puts_r>:
 8010f00:	6a03      	ldr	r3, [r0, #32]
 8010f02:	b570      	push	{r4, r5, r6, lr}
 8010f04:	6884      	ldr	r4, [r0, #8]
 8010f06:	4605      	mov	r5, r0
 8010f08:	460e      	mov	r6, r1
 8010f0a:	b90b      	cbnz	r3, 8010f10 <_puts_r+0x10>
 8010f0c:	f7ff ffa8 	bl	8010e60 <__sinit>
 8010f10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f12:	07db      	lsls	r3, r3, #31
 8010f14:	d405      	bmi.n	8010f22 <_puts_r+0x22>
 8010f16:	89a3      	ldrh	r3, [r4, #12]
 8010f18:	0598      	lsls	r0, r3, #22
 8010f1a:	d402      	bmi.n	8010f22 <_puts_r+0x22>
 8010f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f1e:	f000 f9a8 	bl	8011272 <__retarget_lock_acquire_recursive>
 8010f22:	89a3      	ldrh	r3, [r4, #12]
 8010f24:	0719      	lsls	r1, r3, #28
 8010f26:	d502      	bpl.n	8010f2e <_puts_r+0x2e>
 8010f28:	6923      	ldr	r3, [r4, #16]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d135      	bne.n	8010f9a <_puts_r+0x9a>
 8010f2e:	4621      	mov	r1, r4
 8010f30:	4628      	mov	r0, r5
 8010f32:	f000 f8c5 	bl	80110c0 <__swsetup_r>
 8010f36:	b380      	cbz	r0, 8010f9a <_puts_r+0x9a>
 8010f38:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010f3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f3e:	07da      	lsls	r2, r3, #31
 8010f40:	d405      	bmi.n	8010f4e <_puts_r+0x4e>
 8010f42:	89a3      	ldrh	r3, [r4, #12]
 8010f44:	059b      	lsls	r3, r3, #22
 8010f46:	d402      	bmi.n	8010f4e <_puts_r+0x4e>
 8010f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f4a:	f000 f993 	bl	8011274 <__retarget_lock_release_recursive>
 8010f4e:	4628      	mov	r0, r5
 8010f50:	bd70      	pop	{r4, r5, r6, pc}
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	da04      	bge.n	8010f60 <_puts_r+0x60>
 8010f56:	69a2      	ldr	r2, [r4, #24]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	dc17      	bgt.n	8010f8c <_puts_r+0x8c>
 8010f5c:	290a      	cmp	r1, #10
 8010f5e:	d015      	beq.n	8010f8c <_puts_r+0x8c>
 8010f60:	6823      	ldr	r3, [r4, #0]
 8010f62:	1c5a      	adds	r2, r3, #1
 8010f64:	6022      	str	r2, [r4, #0]
 8010f66:	7019      	strb	r1, [r3, #0]
 8010f68:	68a3      	ldr	r3, [r4, #8]
 8010f6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	60a3      	str	r3, [r4, #8]
 8010f72:	2900      	cmp	r1, #0
 8010f74:	d1ed      	bne.n	8010f52 <_puts_r+0x52>
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	da11      	bge.n	8010f9e <_puts_r+0x9e>
 8010f7a:	4622      	mov	r2, r4
 8010f7c:	210a      	movs	r1, #10
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f000 f85f 	bl	8011042 <__swbuf_r>
 8010f84:	3001      	adds	r0, #1
 8010f86:	d0d7      	beq.n	8010f38 <_puts_r+0x38>
 8010f88:	250a      	movs	r5, #10
 8010f8a:	e7d7      	b.n	8010f3c <_puts_r+0x3c>
 8010f8c:	4622      	mov	r2, r4
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f000 f857 	bl	8011042 <__swbuf_r>
 8010f94:	3001      	adds	r0, #1
 8010f96:	d1e7      	bne.n	8010f68 <_puts_r+0x68>
 8010f98:	e7ce      	b.n	8010f38 <_puts_r+0x38>
 8010f9a:	3e01      	subs	r6, #1
 8010f9c:	e7e4      	b.n	8010f68 <_puts_r+0x68>
 8010f9e:	6823      	ldr	r3, [r4, #0]
 8010fa0:	1c5a      	adds	r2, r3, #1
 8010fa2:	6022      	str	r2, [r4, #0]
 8010fa4:	220a      	movs	r2, #10
 8010fa6:	701a      	strb	r2, [r3, #0]
 8010fa8:	e7ee      	b.n	8010f88 <_puts_r+0x88>
	...

08010fac <puts>:
 8010fac:	4b02      	ldr	r3, [pc, #8]	@ (8010fb8 <puts+0xc>)
 8010fae:	4601      	mov	r1, r0
 8010fb0:	6818      	ldr	r0, [r3, #0]
 8010fb2:	f7ff bfa5 	b.w	8010f00 <_puts_r>
 8010fb6:	bf00      	nop
 8010fb8:	2000007c 	.word	0x2000007c

08010fbc <__sread>:
 8010fbc:	b510      	push	{r4, lr}
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc4:	f000 f90c 	bl	80111e0 <_read_r>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	bfab      	itete	ge
 8010fcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010fce:	89a3      	ldrhlt	r3, [r4, #12]
 8010fd0:	181b      	addge	r3, r3, r0
 8010fd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010fd6:	bfac      	ite	ge
 8010fd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010fda:	81a3      	strhlt	r3, [r4, #12]
 8010fdc:	bd10      	pop	{r4, pc}

08010fde <__swrite>:
 8010fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe2:	461f      	mov	r7, r3
 8010fe4:	898b      	ldrh	r3, [r1, #12]
 8010fe6:	05db      	lsls	r3, r3, #23
 8010fe8:	4605      	mov	r5, r0
 8010fea:	460c      	mov	r4, r1
 8010fec:	4616      	mov	r6, r2
 8010fee:	d505      	bpl.n	8010ffc <__swrite+0x1e>
 8010ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ff4:	2302      	movs	r3, #2
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	f000 f8e0 	bl	80111bc <_lseek_r>
 8010ffc:	89a3      	ldrh	r3, [r4, #12]
 8010ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011002:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011006:	81a3      	strh	r3, [r4, #12]
 8011008:	4632      	mov	r2, r6
 801100a:	463b      	mov	r3, r7
 801100c:	4628      	mov	r0, r5
 801100e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011012:	f000 b8f7 	b.w	8011204 <_write_r>

08011016 <__sseek>:
 8011016:	b510      	push	{r4, lr}
 8011018:	460c      	mov	r4, r1
 801101a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801101e:	f000 f8cd 	bl	80111bc <_lseek_r>
 8011022:	1c43      	adds	r3, r0, #1
 8011024:	89a3      	ldrh	r3, [r4, #12]
 8011026:	bf15      	itete	ne
 8011028:	6560      	strne	r0, [r4, #84]	@ 0x54
 801102a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801102e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011032:	81a3      	strheq	r3, [r4, #12]
 8011034:	bf18      	it	ne
 8011036:	81a3      	strhne	r3, [r4, #12]
 8011038:	bd10      	pop	{r4, pc}

0801103a <__sclose>:
 801103a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801103e:	f000 b8ad 	b.w	801119c <_close_r>

08011042 <__swbuf_r>:
 8011042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011044:	460e      	mov	r6, r1
 8011046:	4614      	mov	r4, r2
 8011048:	4605      	mov	r5, r0
 801104a:	b118      	cbz	r0, 8011054 <__swbuf_r+0x12>
 801104c:	6a03      	ldr	r3, [r0, #32]
 801104e:	b90b      	cbnz	r3, 8011054 <__swbuf_r+0x12>
 8011050:	f7ff ff06 	bl	8010e60 <__sinit>
 8011054:	69a3      	ldr	r3, [r4, #24]
 8011056:	60a3      	str	r3, [r4, #8]
 8011058:	89a3      	ldrh	r3, [r4, #12]
 801105a:	071a      	lsls	r2, r3, #28
 801105c:	d501      	bpl.n	8011062 <__swbuf_r+0x20>
 801105e:	6923      	ldr	r3, [r4, #16]
 8011060:	b943      	cbnz	r3, 8011074 <__swbuf_r+0x32>
 8011062:	4621      	mov	r1, r4
 8011064:	4628      	mov	r0, r5
 8011066:	f000 f82b 	bl	80110c0 <__swsetup_r>
 801106a:	b118      	cbz	r0, 8011074 <__swbuf_r+0x32>
 801106c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011070:	4638      	mov	r0, r7
 8011072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011074:	6823      	ldr	r3, [r4, #0]
 8011076:	6922      	ldr	r2, [r4, #16]
 8011078:	1a98      	subs	r0, r3, r2
 801107a:	6963      	ldr	r3, [r4, #20]
 801107c:	b2f6      	uxtb	r6, r6
 801107e:	4283      	cmp	r3, r0
 8011080:	4637      	mov	r7, r6
 8011082:	dc05      	bgt.n	8011090 <__swbuf_r+0x4e>
 8011084:	4621      	mov	r1, r4
 8011086:	4628      	mov	r0, r5
 8011088:	f000 fd74 	bl	8011b74 <_fflush_r>
 801108c:	2800      	cmp	r0, #0
 801108e:	d1ed      	bne.n	801106c <__swbuf_r+0x2a>
 8011090:	68a3      	ldr	r3, [r4, #8]
 8011092:	3b01      	subs	r3, #1
 8011094:	60a3      	str	r3, [r4, #8]
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	1c5a      	adds	r2, r3, #1
 801109a:	6022      	str	r2, [r4, #0]
 801109c:	701e      	strb	r6, [r3, #0]
 801109e:	6962      	ldr	r2, [r4, #20]
 80110a0:	1c43      	adds	r3, r0, #1
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d004      	beq.n	80110b0 <__swbuf_r+0x6e>
 80110a6:	89a3      	ldrh	r3, [r4, #12]
 80110a8:	07db      	lsls	r3, r3, #31
 80110aa:	d5e1      	bpl.n	8011070 <__swbuf_r+0x2e>
 80110ac:	2e0a      	cmp	r6, #10
 80110ae:	d1df      	bne.n	8011070 <__swbuf_r+0x2e>
 80110b0:	4621      	mov	r1, r4
 80110b2:	4628      	mov	r0, r5
 80110b4:	f000 fd5e 	bl	8011b74 <_fflush_r>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	d0d9      	beq.n	8011070 <__swbuf_r+0x2e>
 80110bc:	e7d6      	b.n	801106c <__swbuf_r+0x2a>
	...

080110c0 <__swsetup_r>:
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	4b29      	ldr	r3, [pc, #164]	@ (8011168 <__swsetup_r+0xa8>)
 80110c4:	4605      	mov	r5, r0
 80110c6:	6818      	ldr	r0, [r3, #0]
 80110c8:	460c      	mov	r4, r1
 80110ca:	b118      	cbz	r0, 80110d4 <__swsetup_r+0x14>
 80110cc:	6a03      	ldr	r3, [r0, #32]
 80110ce:	b90b      	cbnz	r3, 80110d4 <__swsetup_r+0x14>
 80110d0:	f7ff fec6 	bl	8010e60 <__sinit>
 80110d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110d8:	0719      	lsls	r1, r3, #28
 80110da:	d422      	bmi.n	8011122 <__swsetup_r+0x62>
 80110dc:	06da      	lsls	r2, r3, #27
 80110de:	d407      	bmi.n	80110f0 <__swsetup_r+0x30>
 80110e0:	2209      	movs	r2, #9
 80110e2:	602a      	str	r2, [r5, #0]
 80110e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110e8:	81a3      	strh	r3, [r4, #12]
 80110ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110ee:	e033      	b.n	8011158 <__swsetup_r+0x98>
 80110f0:	0758      	lsls	r0, r3, #29
 80110f2:	d512      	bpl.n	801111a <__swsetup_r+0x5a>
 80110f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110f6:	b141      	cbz	r1, 801110a <__swsetup_r+0x4a>
 80110f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110fc:	4299      	cmp	r1, r3
 80110fe:	d002      	beq.n	8011106 <__swsetup_r+0x46>
 8011100:	4628      	mov	r0, r5
 8011102:	f000 f8e5 	bl	80112d0 <_free_r>
 8011106:	2300      	movs	r3, #0
 8011108:	6363      	str	r3, [r4, #52]	@ 0x34
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011110:	81a3      	strh	r3, [r4, #12]
 8011112:	2300      	movs	r3, #0
 8011114:	6063      	str	r3, [r4, #4]
 8011116:	6923      	ldr	r3, [r4, #16]
 8011118:	6023      	str	r3, [r4, #0]
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	f043 0308 	orr.w	r3, r3, #8
 8011120:	81a3      	strh	r3, [r4, #12]
 8011122:	6923      	ldr	r3, [r4, #16]
 8011124:	b94b      	cbnz	r3, 801113a <__swsetup_r+0x7a>
 8011126:	89a3      	ldrh	r3, [r4, #12]
 8011128:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801112c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011130:	d003      	beq.n	801113a <__swsetup_r+0x7a>
 8011132:	4621      	mov	r1, r4
 8011134:	4628      	mov	r0, r5
 8011136:	f000 fd7d 	bl	8011c34 <__smakebuf_r>
 801113a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801113e:	f013 0201 	ands.w	r2, r3, #1
 8011142:	d00a      	beq.n	801115a <__swsetup_r+0x9a>
 8011144:	2200      	movs	r2, #0
 8011146:	60a2      	str	r2, [r4, #8]
 8011148:	6962      	ldr	r2, [r4, #20]
 801114a:	4252      	negs	r2, r2
 801114c:	61a2      	str	r2, [r4, #24]
 801114e:	6922      	ldr	r2, [r4, #16]
 8011150:	b942      	cbnz	r2, 8011164 <__swsetup_r+0xa4>
 8011152:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011156:	d1c5      	bne.n	80110e4 <__swsetup_r+0x24>
 8011158:	bd38      	pop	{r3, r4, r5, pc}
 801115a:	0799      	lsls	r1, r3, #30
 801115c:	bf58      	it	pl
 801115e:	6962      	ldrpl	r2, [r4, #20]
 8011160:	60a2      	str	r2, [r4, #8]
 8011162:	e7f4      	b.n	801114e <__swsetup_r+0x8e>
 8011164:	2000      	movs	r0, #0
 8011166:	e7f7      	b.n	8011158 <__swsetup_r+0x98>
 8011168:	2000007c 	.word	0x2000007c

0801116c <memcmp>:
 801116c:	b510      	push	{r4, lr}
 801116e:	3901      	subs	r1, #1
 8011170:	4402      	add	r2, r0
 8011172:	4290      	cmp	r0, r2
 8011174:	d101      	bne.n	801117a <memcmp+0xe>
 8011176:	2000      	movs	r0, #0
 8011178:	e005      	b.n	8011186 <memcmp+0x1a>
 801117a:	7803      	ldrb	r3, [r0, #0]
 801117c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011180:	42a3      	cmp	r3, r4
 8011182:	d001      	beq.n	8011188 <memcmp+0x1c>
 8011184:	1b18      	subs	r0, r3, r4
 8011186:	bd10      	pop	{r4, pc}
 8011188:	3001      	adds	r0, #1
 801118a:	e7f2      	b.n	8011172 <memcmp+0x6>

0801118c <memset>:
 801118c:	4402      	add	r2, r0
 801118e:	4603      	mov	r3, r0
 8011190:	4293      	cmp	r3, r2
 8011192:	d100      	bne.n	8011196 <memset+0xa>
 8011194:	4770      	bx	lr
 8011196:	f803 1b01 	strb.w	r1, [r3], #1
 801119a:	e7f9      	b.n	8011190 <memset+0x4>

0801119c <_close_r>:
 801119c:	b538      	push	{r3, r4, r5, lr}
 801119e:	4d06      	ldr	r5, [pc, #24]	@ (80111b8 <_close_r+0x1c>)
 80111a0:	2300      	movs	r3, #0
 80111a2:	4604      	mov	r4, r0
 80111a4:	4608      	mov	r0, r1
 80111a6:	602b      	str	r3, [r5, #0]
 80111a8:	f7ef fc50 	bl	8000a4c <_close>
 80111ac:	1c43      	adds	r3, r0, #1
 80111ae:	d102      	bne.n	80111b6 <_close_r+0x1a>
 80111b0:	682b      	ldr	r3, [r5, #0]
 80111b2:	b103      	cbz	r3, 80111b6 <_close_r+0x1a>
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	bd38      	pop	{r3, r4, r5, pc}
 80111b8:	200082a0 	.word	0x200082a0

080111bc <_lseek_r>:
 80111bc:	b538      	push	{r3, r4, r5, lr}
 80111be:	4d07      	ldr	r5, [pc, #28]	@ (80111dc <_lseek_r+0x20>)
 80111c0:	4604      	mov	r4, r0
 80111c2:	4608      	mov	r0, r1
 80111c4:	4611      	mov	r1, r2
 80111c6:	2200      	movs	r2, #0
 80111c8:	602a      	str	r2, [r5, #0]
 80111ca:	461a      	mov	r2, r3
 80111cc:	f7ef fc65 	bl	8000a9a <_lseek>
 80111d0:	1c43      	adds	r3, r0, #1
 80111d2:	d102      	bne.n	80111da <_lseek_r+0x1e>
 80111d4:	682b      	ldr	r3, [r5, #0]
 80111d6:	b103      	cbz	r3, 80111da <_lseek_r+0x1e>
 80111d8:	6023      	str	r3, [r4, #0]
 80111da:	bd38      	pop	{r3, r4, r5, pc}
 80111dc:	200082a0 	.word	0x200082a0

080111e0 <_read_r>:
 80111e0:	b538      	push	{r3, r4, r5, lr}
 80111e2:	4d07      	ldr	r5, [pc, #28]	@ (8011200 <_read_r+0x20>)
 80111e4:	4604      	mov	r4, r0
 80111e6:	4608      	mov	r0, r1
 80111e8:	4611      	mov	r1, r2
 80111ea:	2200      	movs	r2, #0
 80111ec:	602a      	str	r2, [r5, #0]
 80111ee:	461a      	mov	r2, r3
 80111f0:	f7ef fc0f 	bl	8000a12 <_read>
 80111f4:	1c43      	adds	r3, r0, #1
 80111f6:	d102      	bne.n	80111fe <_read_r+0x1e>
 80111f8:	682b      	ldr	r3, [r5, #0]
 80111fa:	b103      	cbz	r3, 80111fe <_read_r+0x1e>
 80111fc:	6023      	str	r3, [r4, #0]
 80111fe:	bd38      	pop	{r3, r4, r5, pc}
 8011200:	200082a0 	.word	0x200082a0

08011204 <_write_r>:
 8011204:	b538      	push	{r3, r4, r5, lr}
 8011206:	4d07      	ldr	r5, [pc, #28]	@ (8011224 <_write_r+0x20>)
 8011208:	4604      	mov	r4, r0
 801120a:	4608      	mov	r0, r1
 801120c:	4611      	mov	r1, r2
 801120e:	2200      	movs	r2, #0
 8011210:	602a      	str	r2, [r5, #0]
 8011212:	461a      	mov	r2, r3
 8011214:	f7ef fa92 	bl	800073c <_write>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d102      	bne.n	8011222 <_write_r+0x1e>
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	b103      	cbz	r3, 8011222 <_write_r+0x1e>
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	bd38      	pop	{r3, r4, r5, pc}
 8011224:	200082a0 	.word	0x200082a0

08011228 <__libc_init_array>:
 8011228:	b570      	push	{r4, r5, r6, lr}
 801122a:	4d0d      	ldr	r5, [pc, #52]	@ (8011260 <__libc_init_array+0x38>)
 801122c:	4c0d      	ldr	r4, [pc, #52]	@ (8011264 <__libc_init_array+0x3c>)
 801122e:	1b64      	subs	r4, r4, r5
 8011230:	10a4      	asrs	r4, r4, #2
 8011232:	2600      	movs	r6, #0
 8011234:	42a6      	cmp	r6, r4
 8011236:	d109      	bne.n	801124c <__libc_init_array+0x24>
 8011238:	4d0b      	ldr	r5, [pc, #44]	@ (8011268 <__libc_init_array+0x40>)
 801123a:	4c0c      	ldr	r4, [pc, #48]	@ (801126c <__libc_init_array+0x44>)
 801123c:	f000 fde8 	bl	8011e10 <_init>
 8011240:	1b64      	subs	r4, r4, r5
 8011242:	10a4      	asrs	r4, r4, #2
 8011244:	2600      	movs	r6, #0
 8011246:	42a6      	cmp	r6, r4
 8011248:	d105      	bne.n	8011256 <__libc_init_array+0x2e>
 801124a:	bd70      	pop	{r4, r5, r6, pc}
 801124c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011250:	4798      	blx	r3
 8011252:	3601      	adds	r6, #1
 8011254:	e7ee      	b.n	8011234 <__libc_init_array+0xc>
 8011256:	f855 3b04 	ldr.w	r3, [r5], #4
 801125a:	4798      	blx	r3
 801125c:	3601      	adds	r6, #1
 801125e:	e7f2      	b.n	8011246 <__libc_init_array+0x1e>
 8011260:	080154d8 	.word	0x080154d8
 8011264:	080154d8 	.word	0x080154d8
 8011268:	080154d8 	.word	0x080154d8
 801126c:	080154dc 	.word	0x080154dc

08011270 <__retarget_lock_init_recursive>:
 8011270:	4770      	bx	lr

08011272 <__retarget_lock_acquire_recursive>:
 8011272:	4770      	bx	lr

08011274 <__retarget_lock_release_recursive>:
 8011274:	4770      	bx	lr

08011276 <memcpy>:
 8011276:	440a      	add	r2, r1
 8011278:	4291      	cmp	r1, r2
 801127a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801127e:	d100      	bne.n	8011282 <memcpy+0xc>
 8011280:	4770      	bx	lr
 8011282:	b510      	push	{r4, lr}
 8011284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011288:	f803 4f01 	strb.w	r4, [r3, #1]!
 801128c:	4291      	cmp	r1, r2
 801128e:	d1f9      	bne.n	8011284 <memcpy+0xe>
 8011290:	bd10      	pop	{r4, pc}
	...

08011294 <__assert_func>:
 8011294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011296:	4614      	mov	r4, r2
 8011298:	461a      	mov	r2, r3
 801129a:	4b09      	ldr	r3, [pc, #36]	@ (80112c0 <__assert_func+0x2c>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	4605      	mov	r5, r0
 80112a0:	68d8      	ldr	r0, [r3, #12]
 80112a2:	b14c      	cbz	r4, 80112b8 <__assert_func+0x24>
 80112a4:	4b07      	ldr	r3, [pc, #28]	@ (80112c4 <__assert_func+0x30>)
 80112a6:	9100      	str	r1, [sp, #0]
 80112a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112ac:	4906      	ldr	r1, [pc, #24]	@ (80112c8 <__assert_func+0x34>)
 80112ae:	462b      	mov	r3, r5
 80112b0:	f000 fc88 	bl	8011bc4 <fiprintf>
 80112b4:	f000 fd60 	bl	8011d78 <abort>
 80112b8:	4b04      	ldr	r3, [pc, #16]	@ (80112cc <__assert_func+0x38>)
 80112ba:	461c      	mov	r4, r3
 80112bc:	e7f3      	b.n	80112a6 <__assert_func+0x12>
 80112be:	bf00      	nop
 80112c0:	2000007c 	.word	0x2000007c
 80112c4:	08015461 	.word	0x08015461
 80112c8:	0801546e 	.word	0x0801546e
 80112cc:	0801549c 	.word	0x0801549c

080112d0 <_free_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4605      	mov	r5, r0
 80112d4:	2900      	cmp	r1, #0
 80112d6:	d041      	beq.n	801135c <_free_r+0x8c>
 80112d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112dc:	1f0c      	subs	r4, r1, #4
 80112de:	2b00      	cmp	r3, #0
 80112e0:	bfb8      	it	lt
 80112e2:	18e4      	addlt	r4, r4, r3
 80112e4:	f000 f8e8 	bl	80114b8 <__malloc_lock>
 80112e8:	4a1d      	ldr	r2, [pc, #116]	@ (8011360 <_free_r+0x90>)
 80112ea:	6813      	ldr	r3, [r2, #0]
 80112ec:	b933      	cbnz	r3, 80112fc <_free_r+0x2c>
 80112ee:	6063      	str	r3, [r4, #4]
 80112f0:	6014      	str	r4, [r2, #0]
 80112f2:	4628      	mov	r0, r5
 80112f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112f8:	f000 b8e4 	b.w	80114c4 <__malloc_unlock>
 80112fc:	42a3      	cmp	r3, r4
 80112fe:	d908      	bls.n	8011312 <_free_r+0x42>
 8011300:	6820      	ldr	r0, [r4, #0]
 8011302:	1821      	adds	r1, r4, r0
 8011304:	428b      	cmp	r3, r1
 8011306:	bf01      	itttt	eq
 8011308:	6819      	ldreq	r1, [r3, #0]
 801130a:	685b      	ldreq	r3, [r3, #4]
 801130c:	1809      	addeq	r1, r1, r0
 801130e:	6021      	streq	r1, [r4, #0]
 8011310:	e7ed      	b.n	80112ee <_free_r+0x1e>
 8011312:	461a      	mov	r2, r3
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	b10b      	cbz	r3, 801131c <_free_r+0x4c>
 8011318:	42a3      	cmp	r3, r4
 801131a:	d9fa      	bls.n	8011312 <_free_r+0x42>
 801131c:	6811      	ldr	r1, [r2, #0]
 801131e:	1850      	adds	r0, r2, r1
 8011320:	42a0      	cmp	r0, r4
 8011322:	d10b      	bne.n	801133c <_free_r+0x6c>
 8011324:	6820      	ldr	r0, [r4, #0]
 8011326:	4401      	add	r1, r0
 8011328:	1850      	adds	r0, r2, r1
 801132a:	4283      	cmp	r3, r0
 801132c:	6011      	str	r1, [r2, #0]
 801132e:	d1e0      	bne.n	80112f2 <_free_r+0x22>
 8011330:	6818      	ldr	r0, [r3, #0]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	6053      	str	r3, [r2, #4]
 8011336:	4408      	add	r0, r1
 8011338:	6010      	str	r0, [r2, #0]
 801133a:	e7da      	b.n	80112f2 <_free_r+0x22>
 801133c:	d902      	bls.n	8011344 <_free_r+0x74>
 801133e:	230c      	movs	r3, #12
 8011340:	602b      	str	r3, [r5, #0]
 8011342:	e7d6      	b.n	80112f2 <_free_r+0x22>
 8011344:	6820      	ldr	r0, [r4, #0]
 8011346:	1821      	adds	r1, r4, r0
 8011348:	428b      	cmp	r3, r1
 801134a:	bf04      	itt	eq
 801134c:	6819      	ldreq	r1, [r3, #0]
 801134e:	685b      	ldreq	r3, [r3, #4]
 8011350:	6063      	str	r3, [r4, #4]
 8011352:	bf04      	itt	eq
 8011354:	1809      	addeq	r1, r1, r0
 8011356:	6021      	streq	r1, [r4, #0]
 8011358:	6054      	str	r4, [r2, #4]
 801135a:	e7ca      	b.n	80112f2 <_free_r+0x22>
 801135c:	bd38      	pop	{r3, r4, r5, pc}
 801135e:	bf00      	nop
 8011360:	200082ac 	.word	0x200082ac

08011364 <malloc>:
 8011364:	4b02      	ldr	r3, [pc, #8]	@ (8011370 <malloc+0xc>)
 8011366:	4601      	mov	r1, r0
 8011368:	6818      	ldr	r0, [r3, #0]
 801136a:	f000 b825 	b.w	80113b8 <_malloc_r>
 801136e:	bf00      	nop
 8011370:	2000007c 	.word	0x2000007c

08011374 <sbrk_aligned>:
 8011374:	b570      	push	{r4, r5, r6, lr}
 8011376:	4e0f      	ldr	r6, [pc, #60]	@ (80113b4 <sbrk_aligned+0x40>)
 8011378:	460c      	mov	r4, r1
 801137a:	6831      	ldr	r1, [r6, #0]
 801137c:	4605      	mov	r5, r0
 801137e:	b911      	cbnz	r1, 8011386 <sbrk_aligned+0x12>
 8011380:	f000 fcea 	bl	8011d58 <_sbrk_r>
 8011384:	6030      	str	r0, [r6, #0]
 8011386:	4621      	mov	r1, r4
 8011388:	4628      	mov	r0, r5
 801138a:	f000 fce5 	bl	8011d58 <_sbrk_r>
 801138e:	1c43      	adds	r3, r0, #1
 8011390:	d103      	bne.n	801139a <sbrk_aligned+0x26>
 8011392:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011396:	4620      	mov	r0, r4
 8011398:	bd70      	pop	{r4, r5, r6, pc}
 801139a:	1cc4      	adds	r4, r0, #3
 801139c:	f024 0403 	bic.w	r4, r4, #3
 80113a0:	42a0      	cmp	r0, r4
 80113a2:	d0f8      	beq.n	8011396 <sbrk_aligned+0x22>
 80113a4:	1a21      	subs	r1, r4, r0
 80113a6:	4628      	mov	r0, r5
 80113a8:	f000 fcd6 	bl	8011d58 <_sbrk_r>
 80113ac:	3001      	adds	r0, #1
 80113ae:	d1f2      	bne.n	8011396 <sbrk_aligned+0x22>
 80113b0:	e7ef      	b.n	8011392 <sbrk_aligned+0x1e>
 80113b2:	bf00      	nop
 80113b4:	200082a8 	.word	0x200082a8

080113b8 <_malloc_r>:
 80113b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113bc:	1ccd      	adds	r5, r1, #3
 80113be:	f025 0503 	bic.w	r5, r5, #3
 80113c2:	3508      	adds	r5, #8
 80113c4:	2d0c      	cmp	r5, #12
 80113c6:	bf38      	it	cc
 80113c8:	250c      	movcc	r5, #12
 80113ca:	2d00      	cmp	r5, #0
 80113cc:	4606      	mov	r6, r0
 80113ce:	db01      	blt.n	80113d4 <_malloc_r+0x1c>
 80113d0:	42a9      	cmp	r1, r5
 80113d2:	d904      	bls.n	80113de <_malloc_r+0x26>
 80113d4:	230c      	movs	r3, #12
 80113d6:	6033      	str	r3, [r6, #0]
 80113d8:	2000      	movs	r0, #0
 80113da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80114b4 <_malloc_r+0xfc>
 80113e2:	f000 f869 	bl	80114b8 <__malloc_lock>
 80113e6:	f8d8 3000 	ldr.w	r3, [r8]
 80113ea:	461c      	mov	r4, r3
 80113ec:	bb44      	cbnz	r4, 8011440 <_malloc_r+0x88>
 80113ee:	4629      	mov	r1, r5
 80113f0:	4630      	mov	r0, r6
 80113f2:	f7ff ffbf 	bl	8011374 <sbrk_aligned>
 80113f6:	1c43      	adds	r3, r0, #1
 80113f8:	4604      	mov	r4, r0
 80113fa:	d158      	bne.n	80114ae <_malloc_r+0xf6>
 80113fc:	f8d8 4000 	ldr.w	r4, [r8]
 8011400:	4627      	mov	r7, r4
 8011402:	2f00      	cmp	r7, #0
 8011404:	d143      	bne.n	801148e <_malloc_r+0xd6>
 8011406:	2c00      	cmp	r4, #0
 8011408:	d04b      	beq.n	80114a2 <_malloc_r+0xea>
 801140a:	6823      	ldr	r3, [r4, #0]
 801140c:	4639      	mov	r1, r7
 801140e:	4630      	mov	r0, r6
 8011410:	eb04 0903 	add.w	r9, r4, r3
 8011414:	f000 fca0 	bl	8011d58 <_sbrk_r>
 8011418:	4581      	cmp	r9, r0
 801141a:	d142      	bne.n	80114a2 <_malloc_r+0xea>
 801141c:	6821      	ldr	r1, [r4, #0]
 801141e:	1a6d      	subs	r5, r5, r1
 8011420:	4629      	mov	r1, r5
 8011422:	4630      	mov	r0, r6
 8011424:	f7ff ffa6 	bl	8011374 <sbrk_aligned>
 8011428:	3001      	adds	r0, #1
 801142a:	d03a      	beq.n	80114a2 <_malloc_r+0xea>
 801142c:	6823      	ldr	r3, [r4, #0]
 801142e:	442b      	add	r3, r5
 8011430:	6023      	str	r3, [r4, #0]
 8011432:	f8d8 3000 	ldr.w	r3, [r8]
 8011436:	685a      	ldr	r2, [r3, #4]
 8011438:	bb62      	cbnz	r2, 8011494 <_malloc_r+0xdc>
 801143a:	f8c8 7000 	str.w	r7, [r8]
 801143e:	e00f      	b.n	8011460 <_malloc_r+0xa8>
 8011440:	6822      	ldr	r2, [r4, #0]
 8011442:	1b52      	subs	r2, r2, r5
 8011444:	d420      	bmi.n	8011488 <_malloc_r+0xd0>
 8011446:	2a0b      	cmp	r2, #11
 8011448:	d917      	bls.n	801147a <_malloc_r+0xc2>
 801144a:	1961      	adds	r1, r4, r5
 801144c:	42a3      	cmp	r3, r4
 801144e:	6025      	str	r5, [r4, #0]
 8011450:	bf18      	it	ne
 8011452:	6059      	strne	r1, [r3, #4]
 8011454:	6863      	ldr	r3, [r4, #4]
 8011456:	bf08      	it	eq
 8011458:	f8c8 1000 	streq.w	r1, [r8]
 801145c:	5162      	str	r2, [r4, r5]
 801145e:	604b      	str	r3, [r1, #4]
 8011460:	4630      	mov	r0, r6
 8011462:	f000 f82f 	bl	80114c4 <__malloc_unlock>
 8011466:	f104 000b 	add.w	r0, r4, #11
 801146a:	1d23      	adds	r3, r4, #4
 801146c:	f020 0007 	bic.w	r0, r0, #7
 8011470:	1ac2      	subs	r2, r0, r3
 8011472:	bf1c      	itt	ne
 8011474:	1a1b      	subne	r3, r3, r0
 8011476:	50a3      	strne	r3, [r4, r2]
 8011478:	e7af      	b.n	80113da <_malloc_r+0x22>
 801147a:	6862      	ldr	r2, [r4, #4]
 801147c:	42a3      	cmp	r3, r4
 801147e:	bf0c      	ite	eq
 8011480:	f8c8 2000 	streq.w	r2, [r8]
 8011484:	605a      	strne	r2, [r3, #4]
 8011486:	e7eb      	b.n	8011460 <_malloc_r+0xa8>
 8011488:	4623      	mov	r3, r4
 801148a:	6864      	ldr	r4, [r4, #4]
 801148c:	e7ae      	b.n	80113ec <_malloc_r+0x34>
 801148e:	463c      	mov	r4, r7
 8011490:	687f      	ldr	r7, [r7, #4]
 8011492:	e7b6      	b.n	8011402 <_malloc_r+0x4a>
 8011494:	461a      	mov	r2, r3
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	42a3      	cmp	r3, r4
 801149a:	d1fb      	bne.n	8011494 <_malloc_r+0xdc>
 801149c:	2300      	movs	r3, #0
 801149e:	6053      	str	r3, [r2, #4]
 80114a0:	e7de      	b.n	8011460 <_malloc_r+0xa8>
 80114a2:	230c      	movs	r3, #12
 80114a4:	6033      	str	r3, [r6, #0]
 80114a6:	4630      	mov	r0, r6
 80114a8:	f000 f80c 	bl	80114c4 <__malloc_unlock>
 80114ac:	e794      	b.n	80113d8 <_malloc_r+0x20>
 80114ae:	6005      	str	r5, [r0, #0]
 80114b0:	e7d6      	b.n	8011460 <_malloc_r+0xa8>
 80114b2:	bf00      	nop
 80114b4:	200082ac 	.word	0x200082ac

080114b8 <__malloc_lock>:
 80114b8:	4801      	ldr	r0, [pc, #4]	@ (80114c0 <__malloc_lock+0x8>)
 80114ba:	f7ff beda 	b.w	8011272 <__retarget_lock_acquire_recursive>
 80114be:	bf00      	nop
 80114c0:	200082a4 	.word	0x200082a4

080114c4 <__malloc_unlock>:
 80114c4:	4801      	ldr	r0, [pc, #4]	@ (80114cc <__malloc_unlock+0x8>)
 80114c6:	f7ff bed5 	b.w	8011274 <__retarget_lock_release_recursive>
 80114ca:	bf00      	nop
 80114cc:	200082a4 	.word	0x200082a4

080114d0 <__sfputc_r>:
 80114d0:	6893      	ldr	r3, [r2, #8]
 80114d2:	3b01      	subs	r3, #1
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	b410      	push	{r4}
 80114d8:	6093      	str	r3, [r2, #8]
 80114da:	da08      	bge.n	80114ee <__sfputc_r+0x1e>
 80114dc:	6994      	ldr	r4, [r2, #24]
 80114de:	42a3      	cmp	r3, r4
 80114e0:	db01      	blt.n	80114e6 <__sfputc_r+0x16>
 80114e2:	290a      	cmp	r1, #10
 80114e4:	d103      	bne.n	80114ee <__sfputc_r+0x1e>
 80114e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114ea:	f7ff bdaa 	b.w	8011042 <__swbuf_r>
 80114ee:	6813      	ldr	r3, [r2, #0]
 80114f0:	1c58      	adds	r0, r3, #1
 80114f2:	6010      	str	r0, [r2, #0]
 80114f4:	7019      	strb	r1, [r3, #0]
 80114f6:	4608      	mov	r0, r1
 80114f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114fc:	4770      	bx	lr

080114fe <__sfputs_r>:
 80114fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011500:	4606      	mov	r6, r0
 8011502:	460f      	mov	r7, r1
 8011504:	4614      	mov	r4, r2
 8011506:	18d5      	adds	r5, r2, r3
 8011508:	42ac      	cmp	r4, r5
 801150a:	d101      	bne.n	8011510 <__sfputs_r+0x12>
 801150c:	2000      	movs	r0, #0
 801150e:	e007      	b.n	8011520 <__sfputs_r+0x22>
 8011510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011514:	463a      	mov	r2, r7
 8011516:	4630      	mov	r0, r6
 8011518:	f7ff ffda 	bl	80114d0 <__sfputc_r>
 801151c:	1c43      	adds	r3, r0, #1
 801151e:	d1f3      	bne.n	8011508 <__sfputs_r+0xa>
 8011520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011524 <_vfiprintf_r>:
 8011524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011528:	460d      	mov	r5, r1
 801152a:	b09d      	sub	sp, #116	@ 0x74
 801152c:	4614      	mov	r4, r2
 801152e:	4698      	mov	r8, r3
 8011530:	4606      	mov	r6, r0
 8011532:	b118      	cbz	r0, 801153c <_vfiprintf_r+0x18>
 8011534:	6a03      	ldr	r3, [r0, #32]
 8011536:	b90b      	cbnz	r3, 801153c <_vfiprintf_r+0x18>
 8011538:	f7ff fc92 	bl	8010e60 <__sinit>
 801153c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801153e:	07d9      	lsls	r1, r3, #31
 8011540:	d405      	bmi.n	801154e <_vfiprintf_r+0x2a>
 8011542:	89ab      	ldrh	r3, [r5, #12]
 8011544:	059a      	lsls	r2, r3, #22
 8011546:	d402      	bmi.n	801154e <_vfiprintf_r+0x2a>
 8011548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801154a:	f7ff fe92 	bl	8011272 <__retarget_lock_acquire_recursive>
 801154e:	89ab      	ldrh	r3, [r5, #12]
 8011550:	071b      	lsls	r3, r3, #28
 8011552:	d501      	bpl.n	8011558 <_vfiprintf_r+0x34>
 8011554:	692b      	ldr	r3, [r5, #16]
 8011556:	b99b      	cbnz	r3, 8011580 <_vfiprintf_r+0x5c>
 8011558:	4629      	mov	r1, r5
 801155a:	4630      	mov	r0, r6
 801155c:	f7ff fdb0 	bl	80110c0 <__swsetup_r>
 8011560:	b170      	cbz	r0, 8011580 <_vfiprintf_r+0x5c>
 8011562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011564:	07dc      	lsls	r4, r3, #31
 8011566:	d504      	bpl.n	8011572 <_vfiprintf_r+0x4e>
 8011568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801156c:	b01d      	add	sp, #116	@ 0x74
 801156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011572:	89ab      	ldrh	r3, [r5, #12]
 8011574:	0598      	lsls	r0, r3, #22
 8011576:	d4f7      	bmi.n	8011568 <_vfiprintf_r+0x44>
 8011578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801157a:	f7ff fe7b 	bl	8011274 <__retarget_lock_release_recursive>
 801157e:	e7f3      	b.n	8011568 <_vfiprintf_r+0x44>
 8011580:	2300      	movs	r3, #0
 8011582:	9309      	str	r3, [sp, #36]	@ 0x24
 8011584:	2320      	movs	r3, #32
 8011586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801158a:	f8cd 800c 	str.w	r8, [sp, #12]
 801158e:	2330      	movs	r3, #48	@ 0x30
 8011590:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011740 <_vfiprintf_r+0x21c>
 8011594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011598:	f04f 0901 	mov.w	r9, #1
 801159c:	4623      	mov	r3, r4
 801159e:	469a      	mov	sl, r3
 80115a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115a4:	b10a      	cbz	r2, 80115aa <_vfiprintf_r+0x86>
 80115a6:	2a25      	cmp	r2, #37	@ 0x25
 80115a8:	d1f9      	bne.n	801159e <_vfiprintf_r+0x7a>
 80115aa:	ebba 0b04 	subs.w	fp, sl, r4
 80115ae:	d00b      	beq.n	80115c8 <_vfiprintf_r+0xa4>
 80115b0:	465b      	mov	r3, fp
 80115b2:	4622      	mov	r2, r4
 80115b4:	4629      	mov	r1, r5
 80115b6:	4630      	mov	r0, r6
 80115b8:	f7ff ffa1 	bl	80114fe <__sfputs_r>
 80115bc:	3001      	adds	r0, #1
 80115be:	f000 80a7 	beq.w	8011710 <_vfiprintf_r+0x1ec>
 80115c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115c4:	445a      	add	r2, fp
 80115c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80115c8:	f89a 3000 	ldrb.w	r3, [sl]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f000 809f 	beq.w	8011710 <_vfiprintf_r+0x1ec>
 80115d2:	2300      	movs	r3, #0
 80115d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80115d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115dc:	f10a 0a01 	add.w	sl, sl, #1
 80115e0:	9304      	str	r3, [sp, #16]
 80115e2:	9307      	str	r3, [sp, #28]
 80115e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80115ea:	4654      	mov	r4, sl
 80115ec:	2205      	movs	r2, #5
 80115ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115f2:	4853      	ldr	r0, [pc, #332]	@ (8011740 <_vfiprintf_r+0x21c>)
 80115f4:	f7ee fe0c 	bl	8000210 <memchr>
 80115f8:	9a04      	ldr	r2, [sp, #16]
 80115fa:	b9d8      	cbnz	r0, 8011634 <_vfiprintf_r+0x110>
 80115fc:	06d1      	lsls	r1, r2, #27
 80115fe:	bf44      	itt	mi
 8011600:	2320      	movmi	r3, #32
 8011602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011606:	0713      	lsls	r3, r2, #28
 8011608:	bf44      	itt	mi
 801160a:	232b      	movmi	r3, #43	@ 0x2b
 801160c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011610:	f89a 3000 	ldrb.w	r3, [sl]
 8011614:	2b2a      	cmp	r3, #42	@ 0x2a
 8011616:	d015      	beq.n	8011644 <_vfiprintf_r+0x120>
 8011618:	9a07      	ldr	r2, [sp, #28]
 801161a:	4654      	mov	r4, sl
 801161c:	2000      	movs	r0, #0
 801161e:	f04f 0c0a 	mov.w	ip, #10
 8011622:	4621      	mov	r1, r4
 8011624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011628:	3b30      	subs	r3, #48	@ 0x30
 801162a:	2b09      	cmp	r3, #9
 801162c:	d94b      	bls.n	80116c6 <_vfiprintf_r+0x1a2>
 801162e:	b1b0      	cbz	r0, 801165e <_vfiprintf_r+0x13a>
 8011630:	9207      	str	r2, [sp, #28]
 8011632:	e014      	b.n	801165e <_vfiprintf_r+0x13a>
 8011634:	eba0 0308 	sub.w	r3, r0, r8
 8011638:	fa09 f303 	lsl.w	r3, r9, r3
 801163c:	4313      	orrs	r3, r2
 801163e:	9304      	str	r3, [sp, #16]
 8011640:	46a2      	mov	sl, r4
 8011642:	e7d2      	b.n	80115ea <_vfiprintf_r+0xc6>
 8011644:	9b03      	ldr	r3, [sp, #12]
 8011646:	1d19      	adds	r1, r3, #4
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	9103      	str	r1, [sp, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	bfbb      	ittet	lt
 8011650:	425b      	neglt	r3, r3
 8011652:	f042 0202 	orrlt.w	r2, r2, #2
 8011656:	9307      	strge	r3, [sp, #28]
 8011658:	9307      	strlt	r3, [sp, #28]
 801165a:	bfb8      	it	lt
 801165c:	9204      	strlt	r2, [sp, #16]
 801165e:	7823      	ldrb	r3, [r4, #0]
 8011660:	2b2e      	cmp	r3, #46	@ 0x2e
 8011662:	d10a      	bne.n	801167a <_vfiprintf_r+0x156>
 8011664:	7863      	ldrb	r3, [r4, #1]
 8011666:	2b2a      	cmp	r3, #42	@ 0x2a
 8011668:	d132      	bne.n	80116d0 <_vfiprintf_r+0x1ac>
 801166a:	9b03      	ldr	r3, [sp, #12]
 801166c:	1d1a      	adds	r2, r3, #4
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	9203      	str	r2, [sp, #12]
 8011672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011676:	3402      	adds	r4, #2
 8011678:	9305      	str	r3, [sp, #20]
 801167a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011750 <_vfiprintf_r+0x22c>
 801167e:	7821      	ldrb	r1, [r4, #0]
 8011680:	2203      	movs	r2, #3
 8011682:	4650      	mov	r0, sl
 8011684:	f7ee fdc4 	bl	8000210 <memchr>
 8011688:	b138      	cbz	r0, 801169a <_vfiprintf_r+0x176>
 801168a:	9b04      	ldr	r3, [sp, #16]
 801168c:	eba0 000a 	sub.w	r0, r0, sl
 8011690:	2240      	movs	r2, #64	@ 0x40
 8011692:	4082      	lsls	r2, r0
 8011694:	4313      	orrs	r3, r2
 8011696:	3401      	adds	r4, #1
 8011698:	9304      	str	r3, [sp, #16]
 801169a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801169e:	4829      	ldr	r0, [pc, #164]	@ (8011744 <_vfiprintf_r+0x220>)
 80116a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116a4:	2206      	movs	r2, #6
 80116a6:	f7ee fdb3 	bl	8000210 <memchr>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d03f      	beq.n	801172e <_vfiprintf_r+0x20a>
 80116ae:	4b26      	ldr	r3, [pc, #152]	@ (8011748 <_vfiprintf_r+0x224>)
 80116b0:	bb1b      	cbnz	r3, 80116fa <_vfiprintf_r+0x1d6>
 80116b2:	9b03      	ldr	r3, [sp, #12]
 80116b4:	3307      	adds	r3, #7
 80116b6:	f023 0307 	bic.w	r3, r3, #7
 80116ba:	3308      	adds	r3, #8
 80116bc:	9303      	str	r3, [sp, #12]
 80116be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116c0:	443b      	add	r3, r7
 80116c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80116c4:	e76a      	b.n	801159c <_vfiprintf_r+0x78>
 80116c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80116ca:	460c      	mov	r4, r1
 80116cc:	2001      	movs	r0, #1
 80116ce:	e7a8      	b.n	8011622 <_vfiprintf_r+0xfe>
 80116d0:	2300      	movs	r3, #0
 80116d2:	3401      	adds	r4, #1
 80116d4:	9305      	str	r3, [sp, #20]
 80116d6:	4619      	mov	r1, r3
 80116d8:	f04f 0c0a 	mov.w	ip, #10
 80116dc:	4620      	mov	r0, r4
 80116de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116e2:	3a30      	subs	r2, #48	@ 0x30
 80116e4:	2a09      	cmp	r2, #9
 80116e6:	d903      	bls.n	80116f0 <_vfiprintf_r+0x1cc>
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d0c6      	beq.n	801167a <_vfiprintf_r+0x156>
 80116ec:	9105      	str	r1, [sp, #20]
 80116ee:	e7c4      	b.n	801167a <_vfiprintf_r+0x156>
 80116f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80116f4:	4604      	mov	r4, r0
 80116f6:	2301      	movs	r3, #1
 80116f8:	e7f0      	b.n	80116dc <_vfiprintf_r+0x1b8>
 80116fa:	ab03      	add	r3, sp, #12
 80116fc:	9300      	str	r3, [sp, #0]
 80116fe:	462a      	mov	r2, r5
 8011700:	4b12      	ldr	r3, [pc, #72]	@ (801174c <_vfiprintf_r+0x228>)
 8011702:	a904      	add	r1, sp, #16
 8011704:	4630      	mov	r0, r6
 8011706:	f3af 8000 	nop.w
 801170a:	4607      	mov	r7, r0
 801170c:	1c78      	adds	r0, r7, #1
 801170e:	d1d6      	bne.n	80116be <_vfiprintf_r+0x19a>
 8011710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011712:	07d9      	lsls	r1, r3, #31
 8011714:	d405      	bmi.n	8011722 <_vfiprintf_r+0x1fe>
 8011716:	89ab      	ldrh	r3, [r5, #12]
 8011718:	059a      	lsls	r2, r3, #22
 801171a:	d402      	bmi.n	8011722 <_vfiprintf_r+0x1fe>
 801171c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801171e:	f7ff fda9 	bl	8011274 <__retarget_lock_release_recursive>
 8011722:	89ab      	ldrh	r3, [r5, #12]
 8011724:	065b      	lsls	r3, r3, #25
 8011726:	f53f af1f 	bmi.w	8011568 <_vfiprintf_r+0x44>
 801172a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801172c:	e71e      	b.n	801156c <_vfiprintf_r+0x48>
 801172e:	ab03      	add	r3, sp, #12
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	462a      	mov	r2, r5
 8011734:	4b05      	ldr	r3, [pc, #20]	@ (801174c <_vfiprintf_r+0x228>)
 8011736:	a904      	add	r1, sp, #16
 8011738:	4630      	mov	r0, r6
 801173a:	f000 f879 	bl	8011830 <_printf_i>
 801173e:	e7e4      	b.n	801170a <_vfiprintf_r+0x1e6>
 8011740:	0801549d 	.word	0x0801549d
 8011744:	080154a7 	.word	0x080154a7
 8011748:	00000000 	.word	0x00000000
 801174c:	080114ff 	.word	0x080114ff
 8011750:	080154a3 	.word	0x080154a3

08011754 <_printf_common>:
 8011754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011758:	4616      	mov	r6, r2
 801175a:	4698      	mov	r8, r3
 801175c:	688a      	ldr	r2, [r1, #8]
 801175e:	690b      	ldr	r3, [r1, #16]
 8011760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011764:	4293      	cmp	r3, r2
 8011766:	bfb8      	it	lt
 8011768:	4613      	movlt	r3, r2
 801176a:	6033      	str	r3, [r6, #0]
 801176c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011770:	4607      	mov	r7, r0
 8011772:	460c      	mov	r4, r1
 8011774:	b10a      	cbz	r2, 801177a <_printf_common+0x26>
 8011776:	3301      	adds	r3, #1
 8011778:	6033      	str	r3, [r6, #0]
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	0699      	lsls	r1, r3, #26
 801177e:	bf42      	ittt	mi
 8011780:	6833      	ldrmi	r3, [r6, #0]
 8011782:	3302      	addmi	r3, #2
 8011784:	6033      	strmi	r3, [r6, #0]
 8011786:	6825      	ldr	r5, [r4, #0]
 8011788:	f015 0506 	ands.w	r5, r5, #6
 801178c:	d106      	bne.n	801179c <_printf_common+0x48>
 801178e:	f104 0a19 	add.w	sl, r4, #25
 8011792:	68e3      	ldr	r3, [r4, #12]
 8011794:	6832      	ldr	r2, [r6, #0]
 8011796:	1a9b      	subs	r3, r3, r2
 8011798:	42ab      	cmp	r3, r5
 801179a:	dc26      	bgt.n	80117ea <_printf_common+0x96>
 801179c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80117a0:	6822      	ldr	r2, [r4, #0]
 80117a2:	3b00      	subs	r3, #0
 80117a4:	bf18      	it	ne
 80117a6:	2301      	movne	r3, #1
 80117a8:	0692      	lsls	r2, r2, #26
 80117aa:	d42b      	bmi.n	8011804 <_printf_common+0xb0>
 80117ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80117b0:	4641      	mov	r1, r8
 80117b2:	4638      	mov	r0, r7
 80117b4:	47c8      	blx	r9
 80117b6:	3001      	adds	r0, #1
 80117b8:	d01e      	beq.n	80117f8 <_printf_common+0xa4>
 80117ba:	6823      	ldr	r3, [r4, #0]
 80117bc:	6922      	ldr	r2, [r4, #16]
 80117be:	f003 0306 	and.w	r3, r3, #6
 80117c2:	2b04      	cmp	r3, #4
 80117c4:	bf02      	ittt	eq
 80117c6:	68e5      	ldreq	r5, [r4, #12]
 80117c8:	6833      	ldreq	r3, [r6, #0]
 80117ca:	1aed      	subeq	r5, r5, r3
 80117cc:	68a3      	ldr	r3, [r4, #8]
 80117ce:	bf0c      	ite	eq
 80117d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80117d4:	2500      	movne	r5, #0
 80117d6:	4293      	cmp	r3, r2
 80117d8:	bfc4      	itt	gt
 80117da:	1a9b      	subgt	r3, r3, r2
 80117dc:	18ed      	addgt	r5, r5, r3
 80117de:	2600      	movs	r6, #0
 80117e0:	341a      	adds	r4, #26
 80117e2:	42b5      	cmp	r5, r6
 80117e4:	d11a      	bne.n	801181c <_printf_common+0xc8>
 80117e6:	2000      	movs	r0, #0
 80117e8:	e008      	b.n	80117fc <_printf_common+0xa8>
 80117ea:	2301      	movs	r3, #1
 80117ec:	4652      	mov	r2, sl
 80117ee:	4641      	mov	r1, r8
 80117f0:	4638      	mov	r0, r7
 80117f2:	47c8      	blx	r9
 80117f4:	3001      	adds	r0, #1
 80117f6:	d103      	bne.n	8011800 <_printf_common+0xac>
 80117f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011800:	3501      	adds	r5, #1
 8011802:	e7c6      	b.n	8011792 <_printf_common+0x3e>
 8011804:	18e1      	adds	r1, r4, r3
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	2030      	movs	r0, #48	@ 0x30
 801180a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801180e:	4422      	add	r2, r4
 8011810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011818:	3302      	adds	r3, #2
 801181a:	e7c7      	b.n	80117ac <_printf_common+0x58>
 801181c:	2301      	movs	r3, #1
 801181e:	4622      	mov	r2, r4
 8011820:	4641      	mov	r1, r8
 8011822:	4638      	mov	r0, r7
 8011824:	47c8      	blx	r9
 8011826:	3001      	adds	r0, #1
 8011828:	d0e6      	beq.n	80117f8 <_printf_common+0xa4>
 801182a:	3601      	adds	r6, #1
 801182c:	e7d9      	b.n	80117e2 <_printf_common+0x8e>
	...

08011830 <_printf_i>:
 8011830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011834:	7e0f      	ldrb	r7, [r1, #24]
 8011836:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011838:	2f78      	cmp	r7, #120	@ 0x78
 801183a:	4691      	mov	r9, r2
 801183c:	4680      	mov	r8, r0
 801183e:	460c      	mov	r4, r1
 8011840:	469a      	mov	sl, r3
 8011842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011846:	d807      	bhi.n	8011858 <_printf_i+0x28>
 8011848:	2f62      	cmp	r7, #98	@ 0x62
 801184a:	d80a      	bhi.n	8011862 <_printf_i+0x32>
 801184c:	2f00      	cmp	r7, #0
 801184e:	f000 80d1 	beq.w	80119f4 <_printf_i+0x1c4>
 8011852:	2f58      	cmp	r7, #88	@ 0x58
 8011854:	f000 80b8 	beq.w	80119c8 <_printf_i+0x198>
 8011858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801185c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011860:	e03a      	b.n	80118d8 <_printf_i+0xa8>
 8011862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011866:	2b15      	cmp	r3, #21
 8011868:	d8f6      	bhi.n	8011858 <_printf_i+0x28>
 801186a:	a101      	add	r1, pc, #4	@ (adr r1, 8011870 <_printf_i+0x40>)
 801186c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011870:	080118c9 	.word	0x080118c9
 8011874:	080118dd 	.word	0x080118dd
 8011878:	08011859 	.word	0x08011859
 801187c:	08011859 	.word	0x08011859
 8011880:	08011859 	.word	0x08011859
 8011884:	08011859 	.word	0x08011859
 8011888:	080118dd 	.word	0x080118dd
 801188c:	08011859 	.word	0x08011859
 8011890:	08011859 	.word	0x08011859
 8011894:	08011859 	.word	0x08011859
 8011898:	08011859 	.word	0x08011859
 801189c:	080119db 	.word	0x080119db
 80118a0:	08011907 	.word	0x08011907
 80118a4:	08011995 	.word	0x08011995
 80118a8:	08011859 	.word	0x08011859
 80118ac:	08011859 	.word	0x08011859
 80118b0:	080119fd 	.word	0x080119fd
 80118b4:	08011859 	.word	0x08011859
 80118b8:	08011907 	.word	0x08011907
 80118bc:	08011859 	.word	0x08011859
 80118c0:	08011859 	.word	0x08011859
 80118c4:	0801199d 	.word	0x0801199d
 80118c8:	6833      	ldr	r3, [r6, #0]
 80118ca:	1d1a      	adds	r2, r3, #4
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	6032      	str	r2, [r6, #0]
 80118d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80118d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80118d8:	2301      	movs	r3, #1
 80118da:	e09c      	b.n	8011a16 <_printf_i+0x1e6>
 80118dc:	6833      	ldr	r3, [r6, #0]
 80118de:	6820      	ldr	r0, [r4, #0]
 80118e0:	1d19      	adds	r1, r3, #4
 80118e2:	6031      	str	r1, [r6, #0]
 80118e4:	0606      	lsls	r6, r0, #24
 80118e6:	d501      	bpl.n	80118ec <_printf_i+0xbc>
 80118e8:	681d      	ldr	r5, [r3, #0]
 80118ea:	e003      	b.n	80118f4 <_printf_i+0xc4>
 80118ec:	0645      	lsls	r5, r0, #25
 80118ee:	d5fb      	bpl.n	80118e8 <_printf_i+0xb8>
 80118f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80118f4:	2d00      	cmp	r5, #0
 80118f6:	da03      	bge.n	8011900 <_printf_i+0xd0>
 80118f8:	232d      	movs	r3, #45	@ 0x2d
 80118fa:	426d      	negs	r5, r5
 80118fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011900:	4858      	ldr	r0, [pc, #352]	@ (8011a64 <_printf_i+0x234>)
 8011902:	230a      	movs	r3, #10
 8011904:	e011      	b.n	801192a <_printf_i+0xfa>
 8011906:	6821      	ldr	r1, [r4, #0]
 8011908:	6833      	ldr	r3, [r6, #0]
 801190a:	0608      	lsls	r0, r1, #24
 801190c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011910:	d402      	bmi.n	8011918 <_printf_i+0xe8>
 8011912:	0649      	lsls	r1, r1, #25
 8011914:	bf48      	it	mi
 8011916:	b2ad      	uxthmi	r5, r5
 8011918:	2f6f      	cmp	r7, #111	@ 0x6f
 801191a:	4852      	ldr	r0, [pc, #328]	@ (8011a64 <_printf_i+0x234>)
 801191c:	6033      	str	r3, [r6, #0]
 801191e:	bf14      	ite	ne
 8011920:	230a      	movne	r3, #10
 8011922:	2308      	moveq	r3, #8
 8011924:	2100      	movs	r1, #0
 8011926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801192a:	6866      	ldr	r6, [r4, #4]
 801192c:	60a6      	str	r6, [r4, #8]
 801192e:	2e00      	cmp	r6, #0
 8011930:	db05      	blt.n	801193e <_printf_i+0x10e>
 8011932:	6821      	ldr	r1, [r4, #0]
 8011934:	432e      	orrs	r6, r5
 8011936:	f021 0104 	bic.w	r1, r1, #4
 801193a:	6021      	str	r1, [r4, #0]
 801193c:	d04b      	beq.n	80119d6 <_printf_i+0x1a6>
 801193e:	4616      	mov	r6, r2
 8011940:	fbb5 f1f3 	udiv	r1, r5, r3
 8011944:	fb03 5711 	mls	r7, r3, r1, r5
 8011948:	5dc7      	ldrb	r7, [r0, r7]
 801194a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801194e:	462f      	mov	r7, r5
 8011950:	42bb      	cmp	r3, r7
 8011952:	460d      	mov	r5, r1
 8011954:	d9f4      	bls.n	8011940 <_printf_i+0x110>
 8011956:	2b08      	cmp	r3, #8
 8011958:	d10b      	bne.n	8011972 <_printf_i+0x142>
 801195a:	6823      	ldr	r3, [r4, #0]
 801195c:	07df      	lsls	r7, r3, #31
 801195e:	d508      	bpl.n	8011972 <_printf_i+0x142>
 8011960:	6923      	ldr	r3, [r4, #16]
 8011962:	6861      	ldr	r1, [r4, #4]
 8011964:	4299      	cmp	r1, r3
 8011966:	bfde      	ittt	le
 8011968:	2330      	movle	r3, #48	@ 0x30
 801196a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801196e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011972:	1b92      	subs	r2, r2, r6
 8011974:	6122      	str	r2, [r4, #16]
 8011976:	f8cd a000 	str.w	sl, [sp]
 801197a:	464b      	mov	r3, r9
 801197c:	aa03      	add	r2, sp, #12
 801197e:	4621      	mov	r1, r4
 8011980:	4640      	mov	r0, r8
 8011982:	f7ff fee7 	bl	8011754 <_printf_common>
 8011986:	3001      	adds	r0, #1
 8011988:	d14a      	bne.n	8011a20 <_printf_i+0x1f0>
 801198a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801198e:	b004      	add	sp, #16
 8011990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011994:	6823      	ldr	r3, [r4, #0]
 8011996:	f043 0320 	orr.w	r3, r3, #32
 801199a:	6023      	str	r3, [r4, #0]
 801199c:	4832      	ldr	r0, [pc, #200]	@ (8011a68 <_printf_i+0x238>)
 801199e:	2778      	movs	r7, #120	@ 0x78
 80119a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80119a4:	6823      	ldr	r3, [r4, #0]
 80119a6:	6831      	ldr	r1, [r6, #0]
 80119a8:	061f      	lsls	r7, r3, #24
 80119aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80119ae:	d402      	bmi.n	80119b6 <_printf_i+0x186>
 80119b0:	065f      	lsls	r7, r3, #25
 80119b2:	bf48      	it	mi
 80119b4:	b2ad      	uxthmi	r5, r5
 80119b6:	6031      	str	r1, [r6, #0]
 80119b8:	07d9      	lsls	r1, r3, #31
 80119ba:	bf44      	itt	mi
 80119bc:	f043 0320 	orrmi.w	r3, r3, #32
 80119c0:	6023      	strmi	r3, [r4, #0]
 80119c2:	b11d      	cbz	r5, 80119cc <_printf_i+0x19c>
 80119c4:	2310      	movs	r3, #16
 80119c6:	e7ad      	b.n	8011924 <_printf_i+0xf4>
 80119c8:	4826      	ldr	r0, [pc, #152]	@ (8011a64 <_printf_i+0x234>)
 80119ca:	e7e9      	b.n	80119a0 <_printf_i+0x170>
 80119cc:	6823      	ldr	r3, [r4, #0]
 80119ce:	f023 0320 	bic.w	r3, r3, #32
 80119d2:	6023      	str	r3, [r4, #0]
 80119d4:	e7f6      	b.n	80119c4 <_printf_i+0x194>
 80119d6:	4616      	mov	r6, r2
 80119d8:	e7bd      	b.n	8011956 <_printf_i+0x126>
 80119da:	6833      	ldr	r3, [r6, #0]
 80119dc:	6825      	ldr	r5, [r4, #0]
 80119de:	6961      	ldr	r1, [r4, #20]
 80119e0:	1d18      	adds	r0, r3, #4
 80119e2:	6030      	str	r0, [r6, #0]
 80119e4:	062e      	lsls	r6, r5, #24
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	d501      	bpl.n	80119ee <_printf_i+0x1be>
 80119ea:	6019      	str	r1, [r3, #0]
 80119ec:	e002      	b.n	80119f4 <_printf_i+0x1c4>
 80119ee:	0668      	lsls	r0, r5, #25
 80119f0:	d5fb      	bpl.n	80119ea <_printf_i+0x1ba>
 80119f2:	8019      	strh	r1, [r3, #0]
 80119f4:	2300      	movs	r3, #0
 80119f6:	6123      	str	r3, [r4, #16]
 80119f8:	4616      	mov	r6, r2
 80119fa:	e7bc      	b.n	8011976 <_printf_i+0x146>
 80119fc:	6833      	ldr	r3, [r6, #0]
 80119fe:	1d1a      	adds	r2, r3, #4
 8011a00:	6032      	str	r2, [r6, #0]
 8011a02:	681e      	ldr	r6, [r3, #0]
 8011a04:	6862      	ldr	r2, [r4, #4]
 8011a06:	2100      	movs	r1, #0
 8011a08:	4630      	mov	r0, r6
 8011a0a:	f7ee fc01 	bl	8000210 <memchr>
 8011a0e:	b108      	cbz	r0, 8011a14 <_printf_i+0x1e4>
 8011a10:	1b80      	subs	r0, r0, r6
 8011a12:	6060      	str	r0, [r4, #4]
 8011a14:	6863      	ldr	r3, [r4, #4]
 8011a16:	6123      	str	r3, [r4, #16]
 8011a18:	2300      	movs	r3, #0
 8011a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a1e:	e7aa      	b.n	8011976 <_printf_i+0x146>
 8011a20:	6923      	ldr	r3, [r4, #16]
 8011a22:	4632      	mov	r2, r6
 8011a24:	4649      	mov	r1, r9
 8011a26:	4640      	mov	r0, r8
 8011a28:	47d0      	blx	sl
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	d0ad      	beq.n	801198a <_printf_i+0x15a>
 8011a2e:	6823      	ldr	r3, [r4, #0]
 8011a30:	079b      	lsls	r3, r3, #30
 8011a32:	d413      	bmi.n	8011a5c <_printf_i+0x22c>
 8011a34:	68e0      	ldr	r0, [r4, #12]
 8011a36:	9b03      	ldr	r3, [sp, #12]
 8011a38:	4298      	cmp	r0, r3
 8011a3a:	bfb8      	it	lt
 8011a3c:	4618      	movlt	r0, r3
 8011a3e:	e7a6      	b.n	801198e <_printf_i+0x15e>
 8011a40:	2301      	movs	r3, #1
 8011a42:	4632      	mov	r2, r6
 8011a44:	4649      	mov	r1, r9
 8011a46:	4640      	mov	r0, r8
 8011a48:	47d0      	blx	sl
 8011a4a:	3001      	adds	r0, #1
 8011a4c:	d09d      	beq.n	801198a <_printf_i+0x15a>
 8011a4e:	3501      	adds	r5, #1
 8011a50:	68e3      	ldr	r3, [r4, #12]
 8011a52:	9903      	ldr	r1, [sp, #12]
 8011a54:	1a5b      	subs	r3, r3, r1
 8011a56:	42ab      	cmp	r3, r5
 8011a58:	dcf2      	bgt.n	8011a40 <_printf_i+0x210>
 8011a5a:	e7eb      	b.n	8011a34 <_printf_i+0x204>
 8011a5c:	2500      	movs	r5, #0
 8011a5e:	f104 0619 	add.w	r6, r4, #25
 8011a62:	e7f5      	b.n	8011a50 <_printf_i+0x220>
 8011a64:	080154ae 	.word	0x080154ae
 8011a68:	080154bf 	.word	0x080154bf

08011a6c <__sflush_r>:
 8011a6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a74:	0716      	lsls	r6, r2, #28
 8011a76:	4605      	mov	r5, r0
 8011a78:	460c      	mov	r4, r1
 8011a7a:	d454      	bmi.n	8011b26 <__sflush_r+0xba>
 8011a7c:	684b      	ldr	r3, [r1, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	dc02      	bgt.n	8011a88 <__sflush_r+0x1c>
 8011a82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	dd48      	ble.n	8011b1a <__sflush_r+0xae>
 8011a88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a8a:	2e00      	cmp	r6, #0
 8011a8c:	d045      	beq.n	8011b1a <__sflush_r+0xae>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a94:	682f      	ldr	r7, [r5, #0]
 8011a96:	6a21      	ldr	r1, [r4, #32]
 8011a98:	602b      	str	r3, [r5, #0]
 8011a9a:	d030      	beq.n	8011afe <__sflush_r+0x92>
 8011a9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a9e:	89a3      	ldrh	r3, [r4, #12]
 8011aa0:	0759      	lsls	r1, r3, #29
 8011aa2:	d505      	bpl.n	8011ab0 <__sflush_r+0x44>
 8011aa4:	6863      	ldr	r3, [r4, #4]
 8011aa6:	1ad2      	subs	r2, r2, r3
 8011aa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011aaa:	b10b      	cbz	r3, 8011ab0 <__sflush_r+0x44>
 8011aac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011aae:	1ad2      	subs	r2, r2, r3
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ab4:	6a21      	ldr	r1, [r4, #32]
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	47b0      	blx	r6
 8011aba:	1c43      	adds	r3, r0, #1
 8011abc:	89a3      	ldrh	r3, [r4, #12]
 8011abe:	d106      	bne.n	8011ace <__sflush_r+0x62>
 8011ac0:	6829      	ldr	r1, [r5, #0]
 8011ac2:	291d      	cmp	r1, #29
 8011ac4:	d82b      	bhi.n	8011b1e <__sflush_r+0xb2>
 8011ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8011b70 <__sflush_r+0x104>)
 8011ac8:	40ca      	lsrs	r2, r1
 8011aca:	07d6      	lsls	r6, r2, #31
 8011acc:	d527      	bpl.n	8011b1e <__sflush_r+0xb2>
 8011ace:	2200      	movs	r2, #0
 8011ad0:	6062      	str	r2, [r4, #4]
 8011ad2:	04d9      	lsls	r1, r3, #19
 8011ad4:	6922      	ldr	r2, [r4, #16]
 8011ad6:	6022      	str	r2, [r4, #0]
 8011ad8:	d504      	bpl.n	8011ae4 <__sflush_r+0x78>
 8011ada:	1c42      	adds	r2, r0, #1
 8011adc:	d101      	bne.n	8011ae2 <__sflush_r+0x76>
 8011ade:	682b      	ldr	r3, [r5, #0]
 8011ae0:	b903      	cbnz	r3, 8011ae4 <__sflush_r+0x78>
 8011ae2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ae6:	602f      	str	r7, [r5, #0]
 8011ae8:	b1b9      	cbz	r1, 8011b1a <__sflush_r+0xae>
 8011aea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011aee:	4299      	cmp	r1, r3
 8011af0:	d002      	beq.n	8011af8 <__sflush_r+0x8c>
 8011af2:	4628      	mov	r0, r5
 8011af4:	f7ff fbec 	bl	80112d0 <_free_r>
 8011af8:	2300      	movs	r3, #0
 8011afa:	6363      	str	r3, [r4, #52]	@ 0x34
 8011afc:	e00d      	b.n	8011b1a <__sflush_r+0xae>
 8011afe:	2301      	movs	r3, #1
 8011b00:	4628      	mov	r0, r5
 8011b02:	47b0      	blx	r6
 8011b04:	4602      	mov	r2, r0
 8011b06:	1c50      	adds	r0, r2, #1
 8011b08:	d1c9      	bne.n	8011a9e <__sflush_r+0x32>
 8011b0a:	682b      	ldr	r3, [r5, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d0c6      	beq.n	8011a9e <__sflush_r+0x32>
 8011b10:	2b1d      	cmp	r3, #29
 8011b12:	d001      	beq.n	8011b18 <__sflush_r+0xac>
 8011b14:	2b16      	cmp	r3, #22
 8011b16:	d11e      	bne.n	8011b56 <__sflush_r+0xea>
 8011b18:	602f      	str	r7, [r5, #0]
 8011b1a:	2000      	movs	r0, #0
 8011b1c:	e022      	b.n	8011b64 <__sflush_r+0xf8>
 8011b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b22:	b21b      	sxth	r3, r3
 8011b24:	e01b      	b.n	8011b5e <__sflush_r+0xf2>
 8011b26:	690f      	ldr	r7, [r1, #16]
 8011b28:	2f00      	cmp	r7, #0
 8011b2a:	d0f6      	beq.n	8011b1a <__sflush_r+0xae>
 8011b2c:	0793      	lsls	r3, r2, #30
 8011b2e:	680e      	ldr	r6, [r1, #0]
 8011b30:	bf08      	it	eq
 8011b32:	694b      	ldreq	r3, [r1, #20]
 8011b34:	600f      	str	r7, [r1, #0]
 8011b36:	bf18      	it	ne
 8011b38:	2300      	movne	r3, #0
 8011b3a:	eba6 0807 	sub.w	r8, r6, r7
 8011b3e:	608b      	str	r3, [r1, #8]
 8011b40:	f1b8 0f00 	cmp.w	r8, #0
 8011b44:	dde9      	ble.n	8011b1a <__sflush_r+0xae>
 8011b46:	6a21      	ldr	r1, [r4, #32]
 8011b48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b4a:	4643      	mov	r3, r8
 8011b4c:	463a      	mov	r2, r7
 8011b4e:	4628      	mov	r0, r5
 8011b50:	47b0      	blx	r6
 8011b52:	2800      	cmp	r0, #0
 8011b54:	dc08      	bgt.n	8011b68 <__sflush_r+0xfc>
 8011b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b5e:	81a3      	strh	r3, [r4, #12]
 8011b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b68:	4407      	add	r7, r0
 8011b6a:	eba8 0800 	sub.w	r8, r8, r0
 8011b6e:	e7e7      	b.n	8011b40 <__sflush_r+0xd4>
 8011b70:	20400001 	.word	0x20400001

08011b74 <_fflush_r>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	690b      	ldr	r3, [r1, #16]
 8011b78:	4605      	mov	r5, r0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	b913      	cbnz	r3, 8011b84 <_fflush_r+0x10>
 8011b7e:	2500      	movs	r5, #0
 8011b80:	4628      	mov	r0, r5
 8011b82:	bd38      	pop	{r3, r4, r5, pc}
 8011b84:	b118      	cbz	r0, 8011b8e <_fflush_r+0x1a>
 8011b86:	6a03      	ldr	r3, [r0, #32]
 8011b88:	b90b      	cbnz	r3, 8011b8e <_fflush_r+0x1a>
 8011b8a:	f7ff f969 	bl	8010e60 <__sinit>
 8011b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d0f3      	beq.n	8011b7e <_fflush_r+0xa>
 8011b96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b98:	07d0      	lsls	r0, r2, #31
 8011b9a:	d404      	bmi.n	8011ba6 <_fflush_r+0x32>
 8011b9c:	0599      	lsls	r1, r3, #22
 8011b9e:	d402      	bmi.n	8011ba6 <_fflush_r+0x32>
 8011ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ba2:	f7ff fb66 	bl	8011272 <__retarget_lock_acquire_recursive>
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	4621      	mov	r1, r4
 8011baa:	f7ff ff5f 	bl	8011a6c <__sflush_r>
 8011bae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011bb0:	07da      	lsls	r2, r3, #31
 8011bb2:	4605      	mov	r5, r0
 8011bb4:	d4e4      	bmi.n	8011b80 <_fflush_r+0xc>
 8011bb6:	89a3      	ldrh	r3, [r4, #12]
 8011bb8:	059b      	lsls	r3, r3, #22
 8011bba:	d4e1      	bmi.n	8011b80 <_fflush_r+0xc>
 8011bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bbe:	f7ff fb59 	bl	8011274 <__retarget_lock_release_recursive>
 8011bc2:	e7dd      	b.n	8011b80 <_fflush_r+0xc>

08011bc4 <fiprintf>:
 8011bc4:	b40e      	push	{r1, r2, r3}
 8011bc6:	b503      	push	{r0, r1, lr}
 8011bc8:	4601      	mov	r1, r0
 8011bca:	ab03      	add	r3, sp, #12
 8011bcc:	4805      	ldr	r0, [pc, #20]	@ (8011be4 <fiprintf+0x20>)
 8011bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bd2:	6800      	ldr	r0, [r0, #0]
 8011bd4:	9301      	str	r3, [sp, #4]
 8011bd6:	f7ff fca5 	bl	8011524 <_vfiprintf_r>
 8011bda:	b002      	add	sp, #8
 8011bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011be0:	b003      	add	sp, #12
 8011be2:	4770      	bx	lr
 8011be4:	2000007c 	.word	0x2000007c

08011be8 <__swhatbuf_r>:
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	460c      	mov	r4, r1
 8011bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bf0:	2900      	cmp	r1, #0
 8011bf2:	b096      	sub	sp, #88	@ 0x58
 8011bf4:	4615      	mov	r5, r2
 8011bf6:	461e      	mov	r6, r3
 8011bf8:	da0d      	bge.n	8011c16 <__swhatbuf_r+0x2e>
 8011bfa:	89a3      	ldrh	r3, [r4, #12]
 8011bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011c00:	f04f 0100 	mov.w	r1, #0
 8011c04:	bf14      	ite	ne
 8011c06:	2340      	movne	r3, #64	@ 0x40
 8011c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	6031      	str	r1, [r6, #0]
 8011c10:	602b      	str	r3, [r5, #0]
 8011c12:	b016      	add	sp, #88	@ 0x58
 8011c14:	bd70      	pop	{r4, r5, r6, pc}
 8011c16:	466a      	mov	r2, sp
 8011c18:	f000 f87c 	bl	8011d14 <_fstat_r>
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	dbec      	blt.n	8011bfa <__swhatbuf_r+0x12>
 8011c20:	9901      	ldr	r1, [sp, #4]
 8011c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011c2a:	4259      	negs	r1, r3
 8011c2c:	4159      	adcs	r1, r3
 8011c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c32:	e7eb      	b.n	8011c0c <__swhatbuf_r+0x24>

08011c34 <__smakebuf_r>:
 8011c34:	898b      	ldrh	r3, [r1, #12]
 8011c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c38:	079d      	lsls	r5, r3, #30
 8011c3a:	4606      	mov	r6, r0
 8011c3c:	460c      	mov	r4, r1
 8011c3e:	d507      	bpl.n	8011c50 <__smakebuf_r+0x1c>
 8011c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c44:	6023      	str	r3, [r4, #0]
 8011c46:	6123      	str	r3, [r4, #16]
 8011c48:	2301      	movs	r3, #1
 8011c4a:	6163      	str	r3, [r4, #20]
 8011c4c:	b003      	add	sp, #12
 8011c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c50:	ab01      	add	r3, sp, #4
 8011c52:	466a      	mov	r2, sp
 8011c54:	f7ff ffc8 	bl	8011be8 <__swhatbuf_r>
 8011c58:	9f00      	ldr	r7, [sp, #0]
 8011c5a:	4605      	mov	r5, r0
 8011c5c:	4639      	mov	r1, r7
 8011c5e:	4630      	mov	r0, r6
 8011c60:	f7ff fbaa 	bl	80113b8 <_malloc_r>
 8011c64:	b948      	cbnz	r0, 8011c7a <__smakebuf_r+0x46>
 8011c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c6a:	059a      	lsls	r2, r3, #22
 8011c6c:	d4ee      	bmi.n	8011c4c <__smakebuf_r+0x18>
 8011c6e:	f023 0303 	bic.w	r3, r3, #3
 8011c72:	f043 0302 	orr.w	r3, r3, #2
 8011c76:	81a3      	strh	r3, [r4, #12]
 8011c78:	e7e2      	b.n	8011c40 <__smakebuf_r+0xc>
 8011c7a:	89a3      	ldrh	r3, [r4, #12]
 8011c7c:	6020      	str	r0, [r4, #0]
 8011c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c82:	81a3      	strh	r3, [r4, #12]
 8011c84:	9b01      	ldr	r3, [sp, #4]
 8011c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c8a:	b15b      	cbz	r3, 8011ca4 <__smakebuf_r+0x70>
 8011c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c90:	4630      	mov	r0, r6
 8011c92:	f000 f851 	bl	8011d38 <_isatty_r>
 8011c96:	b128      	cbz	r0, 8011ca4 <__smakebuf_r+0x70>
 8011c98:	89a3      	ldrh	r3, [r4, #12]
 8011c9a:	f023 0303 	bic.w	r3, r3, #3
 8011c9e:	f043 0301 	orr.w	r3, r3, #1
 8011ca2:	81a3      	strh	r3, [r4, #12]
 8011ca4:	89a3      	ldrh	r3, [r4, #12]
 8011ca6:	431d      	orrs	r5, r3
 8011ca8:	81a5      	strh	r5, [r4, #12]
 8011caa:	e7cf      	b.n	8011c4c <__smakebuf_r+0x18>

08011cac <_putc_r>:
 8011cac:	b570      	push	{r4, r5, r6, lr}
 8011cae:	460d      	mov	r5, r1
 8011cb0:	4614      	mov	r4, r2
 8011cb2:	4606      	mov	r6, r0
 8011cb4:	b118      	cbz	r0, 8011cbe <_putc_r+0x12>
 8011cb6:	6a03      	ldr	r3, [r0, #32]
 8011cb8:	b90b      	cbnz	r3, 8011cbe <_putc_r+0x12>
 8011cba:	f7ff f8d1 	bl	8010e60 <__sinit>
 8011cbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cc0:	07d8      	lsls	r0, r3, #31
 8011cc2:	d405      	bmi.n	8011cd0 <_putc_r+0x24>
 8011cc4:	89a3      	ldrh	r3, [r4, #12]
 8011cc6:	0599      	lsls	r1, r3, #22
 8011cc8:	d402      	bmi.n	8011cd0 <_putc_r+0x24>
 8011cca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ccc:	f7ff fad1 	bl	8011272 <__retarget_lock_acquire_recursive>
 8011cd0:	68a3      	ldr	r3, [r4, #8]
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	60a3      	str	r3, [r4, #8]
 8011cd8:	da05      	bge.n	8011ce6 <_putc_r+0x3a>
 8011cda:	69a2      	ldr	r2, [r4, #24]
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	db12      	blt.n	8011d06 <_putc_r+0x5a>
 8011ce0:	b2eb      	uxtb	r3, r5
 8011ce2:	2b0a      	cmp	r3, #10
 8011ce4:	d00f      	beq.n	8011d06 <_putc_r+0x5a>
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	1c5a      	adds	r2, r3, #1
 8011cea:	6022      	str	r2, [r4, #0]
 8011cec:	701d      	strb	r5, [r3, #0]
 8011cee:	b2ed      	uxtb	r5, r5
 8011cf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cf2:	07da      	lsls	r2, r3, #31
 8011cf4:	d405      	bmi.n	8011d02 <_putc_r+0x56>
 8011cf6:	89a3      	ldrh	r3, [r4, #12]
 8011cf8:	059b      	lsls	r3, r3, #22
 8011cfa:	d402      	bmi.n	8011d02 <_putc_r+0x56>
 8011cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cfe:	f7ff fab9 	bl	8011274 <__retarget_lock_release_recursive>
 8011d02:	4628      	mov	r0, r5
 8011d04:	bd70      	pop	{r4, r5, r6, pc}
 8011d06:	4629      	mov	r1, r5
 8011d08:	4622      	mov	r2, r4
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	f7ff f999 	bl	8011042 <__swbuf_r>
 8011d10:	4605      	mov	r5, r0
 8011d12:	e7ed      	b.n	8011cf0 <_putc_r+0x44>

08011d14 <_fstat_r>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4d07      	ldr	r5, [pc, #28]	@ (8011d34 <_fstat_r+0x20>)
 8011d18:	2300      	movs	r3, #0
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	4608      	mov	r0, r1
 8011d1e:	4611      	mov	r1, r2
 8011d20:	602b      	str	r3, [r5, #0]
 8011d22:	f7ee fe9f 	bl	8000a64 <_fstat>
 8011d26:	1c43      	adds	r3, r0, #1
 8011d28:	d102      	bne.n	8011d30 <_fstat_r+0x1c>
 8011d2a:	682b      	ldr	r3, [r5, #0]
 8011d2c:	b103      	cbz	r3, 8011d30 <_fstat_r+0x1c>
 8011d2e:	6023      	str	r3, [r4, #0]
 8011d30:	bd38      	pop	{r3, r4, r5, pc}
 8011d32:	bf00      	nop
 8011d34:	200082a0 	.word	0x200082a0

08011d38 <_isatty_r>:
 8011d38:	b538      	push	{r3, r4, r5, lr}
 8011d3a:	4d06      	ldr	r5, [pc, #24]	@ (8011d54 <_isatty_r+0x1c>)
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	4604      	mov	r4, r0
 8011d40:	4608      	mov	r0, r1
 8011d42:	602b      	str	r3, [r5, #0]
 8011d44:	f7ee fe9e 	bl	8000a84 <_isatty>
 8011d48:	1c43      	adds	r3, r0, #1
 8011d4a:	d102      	bne.n	8011d52 <_isatty_r+0x1a>
 8011d4c:	682b      	ldr	r3, [r5, #0]
 8011d4e:	b103      	cbz	r3, 8011d52 <_isatty_r+0x1a>
 8011d50:	6023      	str	r3, [r4, #0]
 8011d52:	bd38      	pop	{r3, r4, r5, pc}
 8011d54:	200082a0 	.word	0x200082a0

08011d58 <_sbrk_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4d06      	ldr	r5, [pc, #24]	@ (8011d74 <_sbrk_r+0x1c>)
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	4604      	mov	r4, r0
 8011d60:	4608      	mov	r0, r1
 8011d62:	602b      	str	r3, [r5, #0]
 8011d64:	f7ee fea6 	bl	8000ab4 <_sbrk>
 8011d68:	1c43      	adds	r3, r0, #1
 8011d6a:	d102      	bne.n	8011d72 <_sbrk_r+0x1a>
 8011d6c:	682b      	ldr	r3, [r5, #0]
 8011d6e:	b103      	cbz	r3, 8011d72 <_sbrk_r+0x1a>
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	bd38      	pop	{r3, r4, r5, pc}
 8011d74:	200082a0 	.word	0x200082a0

08011d78 <abort>:
 8011d78:	b508      	push	{r3, lr}
 8011d7a:	2006      	movs	r0, #6
 8011d7c:	f000 f82c 	bl	8011dd8 <raise>
 8011d80:	2001      	movs	r0, #1
 8011d82:	f7ee fe3b 	bl	80009fc <_exit>

08011d86 <_raise_r>:
 8011d86:	291f      	cmp	r1, #31
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	4605      	mov	r5, r0
 8011d8c:	460c      	mov	r4, r1
 8011d8e:	d904      	bls.n	8011d9a <_raise_r+0x14>
 8011d90:	2316      	movs	r3, #22
 8011d92:	6003      	str	r3, [r0, #0]
 8011d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d98:	bd38      	pop	{r3, r4, r5, pc}
 8011d9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011d9c:	b112      	cbz	r2, 8011da4 <_raise_r+0x1e>
 8011d9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011da2:	b94b      	cbnz	r3, 8011db8 <_raise_r+0x32>
 8011da4:	4628      	mov	r0, r5
 8011da6:	f000 f831 	bl	8011e0c <_getpid_r>
 8011daa:	4622      	mov	r2, r4
 8011dac:	4601      	mov	r1, r0
 8011dae:	4628      	mov	r0, r5
 8011db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011db4:	f000 b818 	b.w	8011de8 <_kill_r>
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d00a      	beq.n	8011dd2 <_raise_r+0x4c>
 8011dbc:	1c59      	adds	r1, r3, #1
 8011dbe:	d103      	bne.n	8011dc8 <_raise_r+0x42>
 8011dc0:	2316      	movs	r3, #22
 8011dc2:	6003      	str	r3, [r0, #0]
 8011dc4:	2001      	movs	r0, #1
 8011dc6:	e7e7      	b.n	8011d98 <_raise_r+0x12>
 8011dc8:	2100      	movs	r1, #0
 8011dca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011dce:	4620      	mov	r0, r4
 8011dd0:	4798      	blx	r3
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	e7e0      	b.n	8011d98 <_raise_r+0x12>
	...

08011dd8 <raise>:
 8011dd8:	4b02      	ldr	r3, [pc, #8]	@ (8011de4 <raise+0xc>)
 8011dda:	4601      	mov	r1, r0
 8011ddc:	6818      	ldr	r0, [r3, #0]
 8011dde:	f7ff bfd2 	b.w	8011d86 <_raise_r>
 8011de2:	bf00      	nop
 8011de4:	2000007c 	.word	0x2000007c

08011de8 <_kill_r>:
 8011de8:	b538      	push	{r3, r4, r5, lr}
 8011dea:	4d07      	ldr	r5, [pc, #28]	@ (8011e08 <_kill_r+0x20>)
 8011dec:	2300      	movs	r3, #0
 8011dee:	4604      	mov	r4, r0
 8011df0:	4608      	mov	r0, r1
 8011df2:	4611      	mov	r1, r2
 8011df4:	602b      	str	r3, [r5, #0]
 8011df6:	f7ee fdef 	bl	80009d8 <_kill>
 8011dfa:	1c43      	adds	r3, r0, #1
 8011dfc:	d102      	bne.n	8011e04 <_kill_r+0x1c>
 8011dfe:	682b      	ldr	r3, [r5, #0]
 8011e00:	b103      	cbz	r3, 8011e04 <_kill_r+0x1c>
 8011e02:	6023      	str	r3, [r4, #0]
 8011e04:	bd38      	pop	{r3, r4, r5, pc}
 8011e06:	bf00      	nop
 8011e08:	200082a0 	.word	0x200082a0

08011e0c <_getpid_r>:
 8011e0c:	f7ee bddc 	b.w	80009c8 <_getpid>

08011e10 <_init>:
 8011e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e12:	bf00      	nop
 8011e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e16:	bc08      	pop	{r3}
 8011e18:	469e      	mov	lr, r3
 8011e1a:	4770      	bx	lr

08011e1c <_fini>:
 8011e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e1e:	bf00      	nop
 8011e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e22:	bc08      	pop	{r3}
 8011e24:	469e      	mov	lr, r3
 8011e26:	4770      	bx	lr
