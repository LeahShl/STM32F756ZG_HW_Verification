
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001550c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003824  080156dc  080156dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018f00  08018f00  0001a20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018f00  08018f00  00019f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018f08  08018f08  0001a20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018f08  08018f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018f0c  08018f0c  00019f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08018f10  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  08018fdc  0001a0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  0801907c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000082d4  2000020c  0801911c  0001a20c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200084e0  0801911c  0001a4e0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001a20c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025ba4  00000000  00000000  0001a23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006b1b  00000000  00000000  0003fde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ae8  00000000  00000000  00046900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001538  00000000  00000000  000483e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00035679  00000000  00000000  00049920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f73b  00000000  00000000  0007ef99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103a5f  00000000  00000000  000ae6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001b2133  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000736c  00000000  00000000  001b2178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001b94e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080156c4 	.word	0x080156c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	080156c4 	.word	0x080156c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <MX_CRC_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000606:	f001 fa03 	bl	8001a10 <HAL_CRC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 fb72 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000228 	.word	0x20000228
 800061c:	40023000 	.word	0x40023000

08000620 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <HAL_CRC_MspInit+0x38>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023000 	.word	0x40023000
 800065c:	40023800 	.word	0x40023800

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <MX_DMA_Init+0x88>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a1f      	ldr	r2, [pc, #124]	@ (80006e8 <MX_DMA_Init+0x88>)
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <MX_DMA_Init+0x88>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200b      	movs	r0, #11
 8000684:	f001 f98d 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000688:	200b      	movs	r0, #11
 800068a:	f001 f9a6 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	200d      	movs	r0, #13
 8000694:	f001 f985 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000698:	200d      	movs	r0, #13
 800069a:	f001 f99e 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	200e      	movs	r0, #14
 80006a4:	f001 f97d 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006a8:	200e      	movs	r0, #14
 80006aa:	f001 f996 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2010      	movs	r0, #16
 80006b4:	f001 f975 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006b8:	2010      	movs	r0, #16
 80006ba:	f001 f98e 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2011      	movs	r0, #17
 80006c4:	f001 f96d 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006c8:	2011      	movs	r0, #17
 80006ca:	f001 f986 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	202f      	movs	r0, #47	@ 0x2f
 80006d4:	f001 f965 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006d8:	202f      	movs	r0, #47	@ 0x2f
 80006da:	f001 f97e 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_GPIO_Init+0x8c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <MX_GPIO_Init+0x8c>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_GPIO_Init+0x8c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_GPIO_Init+0x8c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a08      	ldr	r2, [pc, #32]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_GPIO_Init+0x8c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

}
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <MX_I2C1_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	@ (80007f8 <MX_I2C1_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b6:	480e      	ldr	r0, [pc, #56]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007b8:	f003 fb52 	bl	8003e60 <HAL_I2C_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c2:	f000 fa99 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007ca:	f005 fceb 	bl	80061a4 <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d4:	f000 fa90 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007dc:	f005 fd2d 	bl	800623a <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 fa87 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000024c 	.word	0x2000024c
 80007f4:	40005400 	.word	0x40005400
 80007f8:	20404768 	.word	0x20404768

080007fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_I2C2_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_I2C2_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_I2C2_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <MX_I2C2_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_I2C2_Init+0x74>)
 800080e:	2214      	movs	r2, #20
 8000810:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_I2C2_Init+0x74>)
 8000814:	2201      	movs	r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_I2C2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C2_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_I2C2_Init+0x74>)
 8000838:	f003 fb12 	bl	8003e60 <HAL_I2C_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000842:	f000 fa59 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_I2C2_Init+0x74>)
 800084a:	f005 fcab 	bl	80061a4 <HAL_I2CEx_ConfigAnalogFilter>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000854:	f000 fa50 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_I2C2_Init+0x74>)
 800085c:	f005 fced 	bl	800623a <HAL_I2CEx_ConfigDigitalFilter>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 fa47 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200002a0 	.word	0x200002a0
 8000874:	40005800 	.word	0x40005800
 8000878:	20404768 	.word	0x20404768

0800087c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0ac      	sub	sp, #176	@ 0xb0
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	2284      	movs	r2, #132	@ 0x84
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f014 f8cf 	bl	8014a40 <memset>
  if(i2cHandle->Instance==I2C1)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a57      	ldr	r2, [pc, #348]	@ (8000a04 <HAL_I2C_MspInit+0x188>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	f040 80b9 	bne.w	8000a20 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f006 f9e3 	bl	8006c88 <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80008c8:	f000 fa16 	bl	8000cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b4e      	ldr	r3, [pc, #312]	@ (8000a08 <HAL_I2C_MspInit+0x18c>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d0:	4a4d      	ldr	r2, [pc, #308]	@ (8000a08 <HAL_I2C_MspInit+0x18c>)
 80008d2:	f043 0302 	orr.w	r3, r3, #2
 80008d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a08 <HAL_I2C_MspInit+0x18c>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ec:	2312      	movs	r3, #18
 80008ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fe:	2304      	movs	r3, #4
 8000900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000908:	4619      	mov	r1, r3
 800090a:	4840      	ldr	r0, [pc, #256]	@ (8000a0c <HAL_I2C_MspInit+0x190>)
 800090c:	f003 f8fc 	bl	8003b08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000910:	4b3d      	ldr	r3, [pc, #244]	@ (8000a08 <HAL_I2C_MspInit+0x18c>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	4a3c      	ldr	r2, [pc, #240]	@ (8000a08 <HAL_I2C_MspInit+0x18c>)
 8000916:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800091a:	6413      	str	r3, [r2, #64]	@ 0x40
 800091c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a08 <HAL_I2C_MspInit+0x18c>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000928:	4b39      	ldr	r3, [pc, #228]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 800092a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a14 <HAL_I2C_MspInit+0x198>)
 800092c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800092e:	4b38      	ldr	r3, [pc, #224]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 8000930:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000934:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b36      	ldr	r3, [pc, #216]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b34      	ldr	r3, [pc, #208]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b33      	ldr	r3, [pc, #204]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094a:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000950:	4b2f      	ldr	r3, [pc, #188]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000956:	4b2e      	ldr	r3, [pc, #184]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800095c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000962:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000968:	4829      	ldr	r0, [pc, #164]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 800096a:	f001 fa5b 	bl	8001e24 <HAL_DMA_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000974:	f000 f9c0 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a25      	ldr	r2, [pc, #148]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 800097c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800097e:	4a24      	ldr	r2, [pc, #144]	@ (8000a10 <HAL_I2C_MspInit+0x194>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000984:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 8000986:	4a25      	ldr	r2, [pc, #148]	@ (8000a1c <HAL_I2C_MspInit+0x1a0>)
 8000988:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 800098c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000990:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 8000994:	2240      	movs	r2, #64	@ 0x40
 8000996:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800099e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80009c4:	4814      	ldr	r0, [pc, #80]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009c6:	f001 fa2d 	bl	8001e24 <HAL_DMA_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 80009d0:	f000 f992 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80009da:	4a0f      	ldr	r2, [pc, #60]	@ (8000a18 <HAL_I2C_MspInit+0x19c>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	201f      	movs	r0, #31
 80009e6:	f000 ffdc 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009ea:	201f      	movs	r0, #31
 80009ec:	f000 fff5 	bl	80019da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2020      	movs	r0, #32
 80009f6:	f000 ffd4 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009fa:	2020      	movs	r0, #32
 80009fc:	f000 ffed 	bl	80019da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a00:	e0be      	b.n	8000b80 <HAL_I2C_MspInit+0x304>
 8000a02:	bf00      	nop
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	200002f4 	.word	0x200002f4
 8000a14:	40026088 	.word	0x40026088
 8000a18:	20000354 	.word	0x20000354
 8000a1c:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a58      	ldr	r2, [pc, #352]	@ (8000b88 <HAL_I2C_MspInit+0x30c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	f040 80aa 	bne.w	8000b80 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f006 f923 	bl	8006c88 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000a48:	f000 f956 	bl	8000cf8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000b8c <HAL_I2C_MspInit+0x310>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	4a4e      	ldr	r2, [pc, #312]	@ (8000b8c <HAL_I2C_MspInit+0x310>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a58:	4b4c      	ldr	r3, [pc, #304]	@ (8000b8c <HAL_I2C_MspInit+0x310>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a64:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4841      	ldr	r0, [pc, #260]	@ (8000b90 <HAL_I2C_MspInit+0x314>)
 8000a8c:	f003 f83c 	bl	8003b08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a90:	4b3e      	ldr	r3, [pc, #248]	@ (8000b8c <HAL_I2C_MspInit+0x310>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	4a3d      	ldr	r2, [pc, #244]	@ (8000b8c <HAL_I2C_MspInit+0x310>)
 8000a96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <HAL_I2C_MspInit+0x310>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8000b98 <HAL_I2C_MspInit+0x31c>)
 8000aac:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000aae:	4b39      	ldr	r3, [pc, #228]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000ab0:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000ab4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab6:	4b37      	ldr	r3, [pc, #220]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abc:	4b35      	ldr	r3, [pc, #212]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac2:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000ac4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aca:	4b32      	ldr	r3, [pc, #200]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000adc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000ae8:	482a      	ldr	r0, [pc, #168]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000aea:	f001 f99b 	bl	8001e24 <HAL_DMA_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000af4:	f000 f900 	bl	8000cf8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a26      	ldr	r2, [pc, #152]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000afc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000afe:	4a25      	ldr	r2, [pc, #148]	@ (8000b94 <HAL_I2C_MspInit+0x318>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000b04:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b06:	4a26      	ldr	r2, [pc, #152]	@ (8000ba0 <HAL_I2C_MspInit+0x324>)
 8000b08:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b0c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b10:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b12:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b14:	2240      	movs	r2, #64	@ 0x40
 8000b16:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b24:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000b44:	4815      	ldr	r0, [pc, #84]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b46:	f001 f96d 	bl	8001e24 <HAL_DMA_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8000b50:	f000 f8d2 	bl	8000cf8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a11      	ldr	r2, [pc, #68]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b58:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <HAL_I2C_MspInit+0x320>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2021      	movs	r0, #33	@ 0x21
 8000b66:	f000 ff1c 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b6a:	2021      	movs	r0, #33	@ 0x21
 8000b6c:	f000 ff35 	bl	80019da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2022      	movs	r0, #34	@ 0x22
 8000b76:	f000 ff14 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b7a:	2022      	movs	r0, #34	@ 0x22
 8000b7c:	f000 ff2d 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 8000b80:	bf00      	nop
 8000b82:	37b0      	adds	r7, #176	@ 0xb0
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40005800 	.word	0x40005800
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	200003b4 	.word	0x200003b4
 8000b98:	40026058 	.word	0x40026058
 8000b9c:	20000414 	.word	0x20000414
 8000ba0:	400260b8 	.word	0x400260b8

08000ba4 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <_write+0x3c>)
 8000bb2:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <_write+0x40>)
 8000bc0:	f006 fca0 	bl	8007504 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8000bc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bc8:	2201      	movs	r2, #1
 8000bca:	6979      	ldr	r1, [r7, #20]
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <_write+0x40>)
 8000bce:	f006 fc99 	bl	8007504 <HAL_UART_Transmit>
	return len + 1;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3301      	adds	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	080156dc 	.word	0x080156dc
 8000be4:	20000588 	.word	0x20000588

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 fd7d 	bl	80016ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f816 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff fd7a 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf8:	f7ff fd32 	bl	8000660 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bfc:	f000 fa8c 	bl	8001118 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000c00:	f007 ffd4 	bl	8008bac <MX_LWIP_Init>
  MX_CRC_Init();
 8000c04:	f7ff fcea 	bl	80005dc <MX_CRC_Init>
  MX_UART4_Init();
 8000c08:	f000 fa26 	bl	8001058 <MX_UART4_Init>
  MX_UART5_Init();
 8000c0c:	f000 fa54 	bl	80010b8 <MX_UART5_Init>
  MX_I2C1_Init();
 8000c10:	f7ff fdb4 	bl	800077c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c14:	f7ff fdf2 	bl	80007fc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 8000c18:	f013 f8d6 	bl	8013dc8 <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <main+0x34>

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	@ 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2230      	movs	r2, #48	@ 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f013 ff06 	bl	8014a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf0 <SystemClock_Config+0xd0>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	4a29      	ldr	r2, [pc, #164]	@ (8000cf0 <SystemClock_Config+0xd0>)
 8000c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c50:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <SystemClock_Config+0xd0>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5c:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <SystemClock_Config+0xd4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a24      	ldr	r2, [pc, #144]	@ (8000cf4 <SystemClock_Config+0xd4>)
 8000c62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <SystemClock_Config+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c8c:	23d8      	movs	r3, #216	@ 0xd8
 8000c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f005 fb69 	bl	8006374 <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 f826 	bl	8000cf8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cac:	f005 fb12 	bl	80062d4 <HAL_PWREx_EnableOverDrive>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cb6:	f000 f81f 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2107      	movs	r1, #7
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 fdef 	bl	80068bc <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ce4:	f000 f808 	bl	8000cf8 <Error_Handler>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3750      	adds	r7, #80	@ 0x50
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 fcdf 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <DMA1_Stream0_IRQHandler+0x10>)
 8000db2:	f001 f9d7 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000670 	.word	0x20000670

08000dc0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <DMA1_Stream2_IRQHandler+0x10>)
 8000dc6:	f001 f9cd 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000610 	.word	0x20000610

08000dd4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <DMA1_Stream3_IRQHandler+0x10>)
 8000dda:	f001 f9c3 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200003b4 	.word	0x200003b4

08000de8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <DMA1_Stream5_IRQHandler+0x10>)
 8000dee:	f001 f9b9 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200002f4 	.word	0x200002f4

08000dfc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000e00:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <DMA1_Stream6_IRQHandler+0x10>)
 8000e02:	f001 f9af 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000354 	.word	0x20000354

08000e10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <I2C1_EV_IRQHandler+0x10>)
 8000e16:	f003 fc65 	bl	80046e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000024c 	.word	0x2000024c

08000e24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <I2C1_ER_IRQHandler+0x10>)
 8000e2a:	f003 fc75 	bl	8004718 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000024c 	.word	0x2000024c

08000e38 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <I2C2_EV_IRQHandler+0x10>)
 8000e3e:	f003 fc51 	bl	80046e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200002a0 	.word	0x200002a0

08000e4c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <I2C2_ER_IRQHandler+0x10>)
 8000e52:	f003 fc61 	bl	8004718 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200002a0 	.word	0x200002a0

08000e60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <USART3_IRQHandler+0x10>)
 8000e66:	f006 fc79 	bl	800775c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000588 	.word	0x20000588

08000e74 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <DMA1_Stream7_IRQHandler+0x10>)
 8000e7a:	f001 f973 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000414 	.word	0x20000414

08000e88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <UART4_IRQHandler+0x10>)
 8000e8e:	f006 fc65 	bl	800775c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000478 	.word	0x20000478

08000e9c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <UART5_IRQHandler+0x10>)
 8000ea2:	f006 fc5b 	bl	800775c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000500 	.word	0x20000500

08000eb0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <ETH_IRQHandler+0x10>)
 8000eb6:	f001 ff3b 	bl	8002d30 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200050b0 	.word	0x200050b0

08000ec4 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <ETH_WKUP_IRQHandler+0x10>)
 8000eca:	f001 ff31 	bl	8002d30 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200050b0 	.word	0x200050b0

08000ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return 1;
 8000edc:	2301      	movs	r3, #1
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_kill>:

int _kill(int pid, int sig)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ef2:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <_kill+0x20>)
 8000ef4:	2216      	movs	r2, #22
 8000ef6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	200084d0 	.word	0x200084d0

08000f0c <_exit>:

void _exit (int status)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ffe5 	bl	8000ee8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f1e:	bf00      	nop
 8000f20:	e7fd      	b.n	8000f1e <_exit+0x12>

08000f22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	e00a      	b.n	8000f4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f34:	f3af 8000 	nop.w
 8000f38:	4601      	mov	r1, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	60ba      	str	r2, [r7, #8]
 8000f40:	b2ca      	uxtb	r2, r1
 8000f42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dbf0      	blt.n	8000f34 <_read+0x12>
  }

  return len;
 8000f52:	687b      	ldr	r3, [r7, #4]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f84:	605a      	str	r2, [r3, #4]
  return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_isatty>:

int _isatty(int file)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9c:	2301      	movs	r3, #1
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	@ (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d205      	bcs.n	8001000 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <_sbrk+0x6c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20050000 	.word	0x20050000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000474 	.word	0x20000474
 800102c:	200084e0 	.word	0x200084e0
 8001030:	200084d0 	.word	0x200084d0

08001034 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_UART4_Init+0x58>)
 800105e:	4a15      	ldr	r2, [pc, #84]	@ (80010b4 <MX_UART4_Init+0x5c>)
 8001060:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <MX_UART4_Init+0x58>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_UART4_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_UART4_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_UART4_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_UART4_Init+0x58>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <MX_UART4_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_UART4_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <MX_UART4_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_UART4_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_UART4_Init+0x58>)
 800109c:	f006 f9e4 	bl	8007468 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80010a6:	f7ff fe27 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000478 	.word	0x20000478
 80010b4:	40004c00 	.word	0x40004c00

080010b8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_UART5_Init+0x58>)
 80010be:	4a15      	ldr	r2, [pc, #84]	@ (8001114 <MX_UART5_Init+0x5c>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010c2:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <MX_UART5_Init+0x58>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_UART5_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_UART5_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_UART5_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_UART5_Init+0x58>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <MX_UART5_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_UART5_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <MX_UART5_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_UART5_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_UART5_Init+0x58>)
 80010fc:	f006 f9b4 	bl	8007468 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001106:	f7ff fdf7 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000500 	.word	0x20000500
 8001114:	40005000 	.word	0x40005000

08001118 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 800111e:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <MX_USART3_UART_Init+0x5c>)
 8001120:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001122:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_USART3_UART_Init+0x58>)
 800115c:	f006 f984 	bl	8007468 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001166:	f7ff fdc7 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000588 	.word	0x20000588
 8001174:	40004800 	.word	0x40004800

08001178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0b0      	sub	sp, #192	@ 0xc0
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001194:	2284      	movs	r2, #132	@ 0x84
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f013 fc51 	bl	8014a40 <memset>
  if(uartHandle->Instance==UART4)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4ab0      	ldr	r2, [pc, #704]	@ (8001464 <HAL_UART_MspInit+0x2ec>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d173      	bne.n	8001290 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80011a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 fd66 	bl	8006c88 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011c2:	f7ff fd99 	bl	8000cf8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011c6:	4ba8      	ldr	r3, [pc, #672]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	4aa7      	ldr	r2, [pc, #668]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80011cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d2:	4ba5      	ldr	r3, [pc, #660]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
 80011dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4ba2      	ldr	r3, [pc, #648]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4aa1      	ldr	r2, [pc, #644]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b9f      	ldr	r3, [pc, #636]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	623b      	str	r3, [r7, #32]
 80011f4:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001210:	2308      	movs	r3, #8
 8001212:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800121a:	4619      	mov	r1, r3
 800121c:	4893      	ldr	r0, [pc, #588]	@ (800146c <HAL_UART_MspInit+0x2f4>)
 800121e:	f002 fc73 	bl	8003b08 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001222:	4b93      	ldr	r3, [pc, #588]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 8001224:	4a93      	ldr	r2, [pc, #588]	@ (8001474 <HAL_UART_MspInit+0x2fc>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001228:	4b91      	ldr	r3, [pc, #580]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 800122a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800122e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001230:	4b8f      	ldr	r3, [pc, #572]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001236:	4b8e      	ldr	r3, [pc, #568]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800123c:	4b8c      	ldr	r3, [pc, #560]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 800123e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001242:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001244:	4b8a      	ldr	r3, [pc, #552]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124a:	4b89      	ldr	r3, [pc, #548]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001250:	4b87      	ldr	r3, [pc, #540]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001256:	4b86      	ldr	r3, [pc, #536]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800125c:	4b84      	ldr	r3, [pc, #528]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001262:	4883      	ldr	r0, [pc, #524]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 8001264:	f000 fdde 	bl	8001e24 <HAL_DMA_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800126e:	f7ff fd43 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a7e      	ldr	r2, [pc, #504]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 8001276:	675a      	str	r2, [r3, #116]	@ 0x74
 8001278:	4a7d      	ldr	r2, [pc, #500]	@ (8001470 <HAL_UART_MspInit+0x2f8>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2034      	movs	r0, #52	@ 0x34
 8001284:	f000 fb8d 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001288:	2034      	movs	r0, #52	@ 0x34
 800128a:	f000 fba6 	bl	80019da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800128e:	e0e4      	b.n	800145a <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a78      	ldr	r2, [pc, #480]	@ (8001478 <HAL_UART_MspInit+0x300>)
 8001296:	4293      	cmp	r3, r2
 8001298:	f040 8095 	bne.w	80013c6 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800129c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 fcec 	bl	8006c88 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_UART_MspInit+0x142>
      Error_Handler();
 80012b6:	f7ff fd1f 	bl	8000cf8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80012ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	4a6a      	ldr	r2, [pc, #424]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c6:	4b68      	ldr	r3, [pc, #416]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a64      	ldr	r2, [pc, #400]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b62      	ldr	r3, [pc, #392]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800131c:	2308      	movs	r3, #8
 800131e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001326:	4619      	mov	r1, r3
 8001328:	4850      	ldr	r0, [pc, #320]	@ (800146c <HAL_UART_MspInit+0x2f4>)
 800132a:	f002 fbed 	bl	8003b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800132e:	2304      	movs	r3, #4
 8001330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001346:	2308      	movs	r3, #8
 8001348:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001350:	4619      	mov	r1, r3
 8001352:	484a      	ldr	r0, [pc, #296]	@ (800147c <HAL_UART_MspInit+0x304>)
 8001354:	f002 fbd8 	bl	8003b08 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001358:	4b49      	ldr	r3, [pc, #292]	@ (8001480 <HAL_UART_MspInit+0x308>)
 800135a:	4a4a      	ldr	r2, [pc, #296]	@ (8001484 <HAL_UART_MspInit+0x30c>)
 800135c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800135e:	4b48      	ldr	r3, [pc, #288]	@ (8001480 <HAL_UART_MspInit+0x308>)
 8001360:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001364:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001366:	4b46      	ldr	r3, [pc, #280]	@ (8001480 <HAL_UART_MspInit+0x308>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800136c:	4b44      	ldr	r3, [pc, #272]	@ (8001480 <HAL_UART_MspInit+0x308>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001372:	4b43      	ldr	r3, [pc, #268]	@ (8001480 <HAL_UART_MspInit+0x308>)
 8001374:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001378:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <HAL_UART_MspInit+0x308>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001380:	4b3f      	ldr	r3, [pc, #252]	@ (8001480 <HAL_UART_MspInit+0x308>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001386:	4b3e      	ldr	r3, [pc, #248]	@ (8001480 <HAL_UART_MspInit+0x308>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800138c:	4b3c      	ldr	r3, [pc, #240]	@ (8001480 <HAL_UART_MspInit+0x308>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001392:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <HAL_UART_MspInit+0x308>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001398:	4839      	ldr	r0, [pc, #228]	@ (8001480 <HAL_UART_MspInit+0x308>)
 800139a:	f000 fd43 	bl	8001e24 <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_UART_MspInit+0x230>
      Error_Handler();
 80013a4:	f7ff fca8 	bl	8000cf8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a35      	ldr	r2, [pc, #212]	@ (8001480 <HAL_UART_MspInit+0x308>)
 80013ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80013ae:	4a34      	ldr	r2, [pc, #208]	@ (8001480 <HAL_UART_MspInit+0x308>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2035      	movs	r0, #53	@ 0x35
 80013ba:	f000 faf2 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80013be:	2035      	movs	r0, #53	@ 0x35
 80013c0:	f000 fb0b 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 80013c4:	e049      	b.n	800145a <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001488 <HAL_UART_MspInit+0x310>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d144      	bne.n	800145a <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fc52 	bl	8006c88 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0x276>
      Error_Handler();
 80013ea:	f7ff fc85 	bl	8000cf8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80013f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_UART_MspInit+0x2f0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800141e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001438:	2307      	movs	r3, #7
 800143a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001442:	4619      	mov	r1, r3
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <HAL_UART_MspInit+0x304>)
 8001446:	f002 fb5f 	bl	8003b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2027      	movs	r0, #39	@ 0x27
 8001450:	f000 faa7 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001454:	2027      	movs	r0, #39	@ 0x27
 8001456:	f000 fac0 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	37c0      	adds	r7, #192	@ 0xc0
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004c00 	.word	0x40004c00
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800
 8001470:	20000610 	.word	0x20000610
 8001474:	40026040 	.word	0x40026040
 8001478:	40005000 	.word	0x40005000
 800147c:	40020c00 	.word	0x40020c00
 8001480:	20000670 	.word	0x20000670
 8001484:	40026010 	.word	0x40026010
 8001488:	40004800 	.word	0x40004800

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001490:	f7ff fdd0 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001496:	490d      	ldr	r1, [pc, #52]	@ (80014cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001498:	4a0d      	ldr	r2, [pc, #52]	@ (80014d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ac:	4c0a      	ldr	r4, [pc, #40]	@ (80014d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80014ba:	f013 fb0f 	bl	8014adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fb93 	bl	8000be8 <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80014d0:	08018f10 	.word	0x08018f10
  ldr r2, =_sbss
 80014d4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80014d8:	200084e0 	.word	0x200084e0

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>

080014de <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <LAN8742_RegisterBusIO+0x28>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <LAN8742_RegisterBusIO+0x28>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <LAN8742_RegisterBusIO+0x28>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800150a:	e014      	b.n	8001536 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d139      	bne.n	80015d2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e01c      	b.n	80015b2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f107 020c 	add.w	r2, r7, #12
 8001580:	2112      	movs	r1, #18
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	4798      	blx	r3
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	da03      	bge.n	8001594 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800158c:	f06f 0304 	mvn.w	r3, #4
 8001590:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001592:	e00b      	b.n	80015ac <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	d105      	bne.n	80015ac <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
         break;
 80015aa:	e005      	b.n	80015b8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b1f      	cmp	r3, #31
 80015b6:	d9df      	bls.n	8001578 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b1f      	cmp	r3, #31
 80015be:	d902      	bls.n	80015c6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015c0:	f06f 0302 	mvn.w	r3, #2
 80015c4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80015d2:	693b      	ldr	r3, [r7, #16]
 }
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6810      	ldr	r0, [r2, #0]
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	2101      	movs	r1, #1
 80015f6:	4798      	blx	r3
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da02      	bge.n	8001604 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015fe:	f06f 0304 	mvn.w	r3, #4
 8001602:	e06e      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6810      	ldr	r0, [r2, #0]
 800160c:	f107 020c 	add.w	r2, r7, #12
 8001610:	2101      	movs	r1, #1
 8001612:	4798      	blx	r3
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	da02      	bge.n	8001620 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800161a:	f06f 0304 	mvn.w	r3, #4
 800161e:	e060      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800162a:	2301      	movs	r3, #1
 800162c:	e059      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6810      	ldr	r0, [r2, #0]
 8001636:	f107 020c 	add.w	r2, r7, #12
 800163a:	2100      	movs	r1, #0
 800163c:	4798      	blx	r3
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	da02      	bge.n	800164a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001644:	f06f 0304 	mvn.w	r3, #4
 8001648:	e04b      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d11b      	bne.n	800168c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <LAN8742_GetLinkState+0x90>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001668:	2302      	movs	r3, #2
 800166a:	e03a      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001676:	2303      	movs	r3, #3
 8001678:	e033      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001684:	2304      	movs	r3, #4
 8001686:	e02c      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001688:	2305      	movs	r3, #5
 800168a:	e02a      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6810      	ldr	r0, [r2, #0]
 8001694:	f107 020c 	add.w	r2, r7, #12
 8001698:	211f      	movs	r1, #31
 800169a:	4798      	blx	r3
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da02      	bge.n	80016a8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016a2:	f06f 0304 	mvn.w	r3, #4
 80016a6:	e01c      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80016b2:	2306      	movs	r3, #6
 80016b4:	e015      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 031c 	and.w	r3, r3, #28
 80016bc:	2b18      	cmp	r3, #24
 80016be:	d101      	bne.n	80016c4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016c0:	2302      	movs	r3, #2
 80016c2:	e00e      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 031c 	and.w	r3, r3, #28
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d101      	bne.n	80016d2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e007      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 031c 	and.w	r3, r3, #28
 80016d8:	2b14      	cmp	r3, #20
 80016da:	d101      	bne.n	80016e0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016dc:	2304      	movs	r3, #4
 80016de:	e000      	b.n	80016e2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016e0:	2305      	movs	r3, #5
    }
  }
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ee:	2003      	movs	r0, #3
 80016f0:	f000 f94c 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f4:	200f      	movs	r0, #15
 80016f6:	f000 f805 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fa:	f7ff fb03 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f967 	bl	80019f6 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001740:	f000 f92f 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	20000008 	.word	0x20000008
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	200006d0 	.word	0x200006d0

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200006d0 	.word	0x200006d0

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <__NVIC_SetPriorityGrouping+0x40>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	4313      	orrs	r3, r2
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <__NVIC_SetPriorityGrouping+0x40>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	05fa0000 	.word	0x05fa0000

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	@ (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	@ (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	@ (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	@ 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e054      	b.n	8001acc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7f5b      	ldrb	r3, [r3, #29]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe fdf4 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a22      	ldr	r2, [pc, #136]	@ (8001ad4 <HAL_CRC_Init+0xc4>)
 8001a4c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0218 	bic.w	r2, r2, #24
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	e00c      	b.n	8001a7a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6899      	ldr	r1, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f94c 	bl	8001d08 <HAL_CRCEx_Polynomial_Set>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e028      	b.n	8001acc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	e004      	b.n	8001a98 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6912      	ldr	r2, [r2, #16]
 8001a96:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699a      	ldr	r2, [r3, #24]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	04c11db7 	.word	0x04c11db7

08001ad8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2202      	movs	r2, #2
 8001aec:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d006      	beq.n	8001b14 <HAL_CRC_Calculate+0x3c>
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d829      	bhi.n	8001b5e <HAL_CRC_Calculate+0x86>
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d019      	beq.n	8001b42 <HAL_CRC_Calculate+0x6a>
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d01e      	beq.n	8001b50 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001b12:	e024      	b.n	8001b5e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	441a      	add	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3f0      	bcc.n	8001b1a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
      break;
 8001b40:	e00e      	b.n	8001b60 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f812 	bl	8001b70 <CRC_Handle_8>
 8001b4c:	6138      	str	r0, [r7, #16]
      break;
 8001b4e:	e007      	b.n	8001b60 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f89d 	bl	8001c94 <CRC_Handle_16>
 8001b5a:	6138      	str	r0, [r7, #16]
      break;
 8001b5c:	e000      	b.n	8001b60 <HAL_CRC_Calculate+0x88>
      break;
 8001b5e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001b66:	693b      	ldr	r3, [r7, #16]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	@ 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	e023      	b.n	8001bca <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	3301      	adds	r3, #1
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	440b      	add	r3, r1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b9c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	440b      	add	r3, r1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001bac:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bc0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3d6      	bcc.n	8001b82 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d051      	beq.n	8001c82 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	4413      	add	r3, r2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	7013      	strb	r3, [r2, #0]
 8001bf8:	e043      	b.n	8001c82 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d118      	bne.n	8001c36 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3301      	adds	r3, #1
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	440b      	add	r3, r1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	8b7a      	ldrh	r2, [r7, #26]
 8001c32:	801a      	strh	r2, [r3, #0]
 8001c34:	e025      	b.n	8001c82 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d120      	bne.n	8001c82 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	3301      	adds	r3, #1
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	440b      	add	r3, r1
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	8b7a      	ldrh	r2, [r7, #26]
 8001c6e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3724      	adds	r7, #36	@ 0x24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e013      	b.n	8001cce <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4413      	add	r3, r2
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	440b      	add	r3, r1
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d3e6      	bcc.n	8001ca6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	4413      	add	r3, r2
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d18:	231f      	movs	r3, #31
 8001d1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
 8001d2a:	e063      	b.n	8001df4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d2c:	bf00      	nop
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	613a      	str	r2, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_CRCEx_Polynomial_Set+0x44>
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b18      	cmp	r3, #24
 8001d50:	d846      	bhi.n	8001de0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001d52:	a201      	add	r2, pc, #4	@ (adr r2, 8001d58 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001de7 	.word	0x08001de7
 8001d5c:	08001de1 	.word	0x08001de1
 8001d60:	08001de1 	.word	0x08001de1
 8001d64:	08001de1 	.word	0x08001de1
 8001d68:	08001de1 	.word	0x08001de1
 8001d6c:	08001de1 	.word	0x08001de1
 8001d70:	08001de1 	.word	0x08001de1
 8001d74:	08001de1 	.word	0x08001de1
 8001d78:	08001dd5 	.word	0x08001dd5
 8001d7c:	08001de1 	.word	0x08001de1
 8001d80:	08001de1 	.word	0x08001de1
 8001d84:	08001de1 	.word	0x08001de1
 8001d88:	08001de1 	.word	0x08001de1
 8001d8c:	08001de1 	.word	0x08001de1
 8001d90:	08001de1 	.word	0x08001de1
 8001d94:	08001de1 	.word	0x08001de1
 8001d98:	08001dc9 	.word	0x08001dc9
 8001d9c:	08001de1 	.word	0x08001de1
 8001da0:	08001de1 	.word	0x08001de1
 8001da4:	08001de1 	.word	0x08001de1
 8001da8:	08001de1 	.word	0x08001de1
 8001dac:	08001de1 	.word	0x08001de1
 8001db0:	08001de1 	.word	0x08001de1
 8001db4:	08001de1 	.word	0x08001de1
 8001db8:	08001dbd 	.word	0x08001dbd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d913      	bls.n	8001dea <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dc6:	e010      	b.n	8001dea <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b07      	cmp	r3, #7
 8001dcc:	d90f      	bls.n	8001dee <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dd2:	e00c      	b.n	8001dee <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d90b      	bls.n	8001df2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dde:	e008      	b.n	8001df2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	75fb      	strb	r3, [r7, #23]
        break;
 8001de4:	e006      	b.n	8001df4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001de6:	bf00      	nop
 8001de8:	e004      	b.n	8001df4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dea:	bf00      	nop
 8001dec:	e002      	b.n	8001df4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001df2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10d      	bne.n	8001e16 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 0118 	bic.w	r1, r3, #24
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff fcac 	bl	800178c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e099      	b.n	8001f74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e60:	e00f      	b.n	8001e82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e62:	f7ff fc93 	bl	800178c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d908      	bls.n	8001e82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e078      	b.n	8001f74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1e8      	bne.n	8001e62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <HAL_DMA_Init+0x158>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d107      	bne.n	8001eec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f023 0307 	bic.w	r3, r3, #7
 8001f02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d117      	bne.n	8001f46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00e      	beq.n	8001f46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fb23 	bl	8002574 <DMA_CheckFifoParam>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2240      	movs	r2, #64	@ 0x40
 8001f38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f42:	2301      	movs	r3, #1
 8001f44:	e016      	b.n	8001f74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fada 	bl	8002508 <DMA_CalcBaseAndBitshift>
 8001f54:	4603      	mov	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5c:	223f      	movs	r2, #63	@ 0x3f
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	f010803f 	.word	0xf010803f

08001f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_DMA_Start_IT+0x26>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e048      	b.n	8002038 <HAL_DMA_Start_IT+0xb8>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d137      	bne.n	800202a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fa6c 	bl	80024ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	223f      	movs	r2, #63	@ 0x3f
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0216 	orr.w	r2, r2, #22
 8001fee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ffe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0208 	orr.w	r2, r2, #8
 8002016:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e005      	b.n	8002036 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002036:	7dfb      	ldrb	r3, [r7, #23]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800204e:	f7ff fb9d 	bl	800178c <HAL_GetTick>
 8002052:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2280      	movs	r2, #128	@ 0x80
 8002064:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e052      	b.n	8002118 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0216 	bic.w	r2, r2, #22
 8002080:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002090:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_DMA_Abort+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0208 	bic.w	r2, r2, #8
 80020b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c2:	e013      	b.n	80020ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c4:	f7ff fb62 	bl	800178c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d90c      	bls.n	80020ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2203      	movs	r2, #3
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e015      	b.n	8002118 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e4      	bne.n	80020c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	223f      	movs	r2, #63	@ 0x3f
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d004      	beq.n	800213e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	@ 0x80
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00c      	b.n	8002158 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002170:	4b8e      	ldr	r3, [pc, #568]	@ (80023ac <HAL_DMA_IRQHandler+0x248>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a8e      	ldr	r2, [pc, #568]	@ (80023b0 <HAL_DMA_IRQHandler+0x24c>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218e:	2208      	movs	r2, #8
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	2208      	movs	r2, #8
 80021be:	409a      	lsls	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	2201      	movs	r2, #1
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	2204      	movs	r2, #4
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	2210      	movs	r2, #16
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d043      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03c      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	2210      	movs	r2, #16
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d024      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
 8002292:	e01f      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0208 	bic.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d8:	2220      	movs	r2, #32
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 808f 	beq.w	8002404 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8087 	beq.w	8002404 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	2220      	movs	r2, #32
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d136      	bne.n	800237c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0216 	bic.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800232c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_DMA_IRQHandler+0x1da>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002352:	223f      	movs	r2, #63	@ 0x3f
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d07e      	beq.n	8002470 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
        }
        return;
 800237a:	e079      	b.n	8002470 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01d      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	2b00      	cmp	r3, #0
 800239e:	d031      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e02c      	b.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000
 80023b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d023      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e01e      	b.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10f      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0210 	bic.w	r2, r2, #16
 80023e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	2b00      	cmp	r3, #0
 800240a:	d032      	beq.n	8002472 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d022      	beq.n	800245e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2205      	movs	r2, #5
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3301      	adds	r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	d307      	bcc.n	800244c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f2      	bne.n	8002430 <HAL_DMA_IRQHandler+0x2cc>
 800244a:	e000      	b.n	800244e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800244c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
 800246e:	e000      	b.n	8002472 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002470:	bf00      	nop
    }
  }
}
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002486:	b2db      	uxtb	r3, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b40      	cmp	r3, #64	@ 0x40
 80024d8:	d108      	bne.n	80024ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ea:	e007      	b.n	80024fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3b10      	subs	r3, #16
 8002518:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <DMA_CalcBaseAndBitshift+0x60>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002522:	4a12      	ldr	r2, [pc, #72]	@ (800256c <DMA_CalcBaseAndBitshift+0x64>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d908      	bls.n	8002548 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <DMA_CalcBaseAndBitshift+0x68>)
 800253e:	4013      	ands	r3, r2
 8002540:	1d1a      	adds	r2, r3, #4
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	@ 0x58
 8002546:	e006      	b.n	8002556 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <DMA_CalcBaseAndBitshift+0x68>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	aaaaaaab 	.word	0xaaaaaaab
 800256c:	08018d04 	.word	0x08018d04
 8002570:	fffffc00 	.word	0xfffffc00

08002574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d11f      	bne.n	80025ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d856      	bhi.n	8002642 <DMA_CheckFifoParam+0xce>
 8002594:	a201      	add	r2, pc, #4	@ (adr r2, 800259c <DMA_CheckFifoParam+0x28>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025bf 	.word	0x080025bf
 80025a4:	080025ad 	.word	0x080025ad
 80025a8:	08002643 	.word	0x08002643
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d046      	beq.n	8002646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025bc:	e043      	b.n	8002646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025c6:	d140      	bne.n	800264a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e03d      	b.n	800264a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025d6:	d121      	bne.n	800261c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d837      	bhi.n	800264e <DMA_CheckFifoParam+0xda>
 80025de:	a201      	add	r2, pc, #4	@ (adr r2, 80025e4 <DMA_CheckFifoParam+0x70>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	080025fb 	.word	0x080025fb
 80025ec:	080025f5 	.word	0x080025f5
 80025f0:	0800260d 	.word	0x0800260d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e030      	b.n	800265c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d025      	beq.n	8002652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260a:	e022      	b.n	8002652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002614:	d11f      	bne.n	8002656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800261a:	e01c      	b.n	8002656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d903      	bls.n	800262a <DMA_CheckFifoParam+0xb6>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d003      	beq.n	8002630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002628:	e018      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      break;
 800262e:	e015      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      break;
 8002640:	e00b      	b.n	800265a <DMA_CheckFifoParam+0xe6>
      break;
 8002642:	bf00      	nop
 8002644:	e00a      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e008      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e006      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
 8002650:	e004      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e002      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;   
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
    }
  } 
  
  return status; 
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop

0800266c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e086      	b.n	800278c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f006 fdbb 	bl	800920c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	4b3f      	ldr	r3, [pc, #252]	@ (8002794 <HAL_ETH_Init+0x128>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	4a3e      	ldr	r2, [pc, #248]	@ (8002794 <HAL_ETH_Init+0x128>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002794 <HAL_ETH_Init+0x128>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002798 <HAL_ETH_Init+0x12c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a39      	ldr	r2, [pc, #228]	@ (8002798 <HAL_ETH_Init+0x12c>)
 80026b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026ba:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <HAL_ETH_Init+0x12c>)
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4935      	ldr	r1, [pc, #212]	@ (8002798 <HAL_ETH_Init+0x12c>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026c8:	4b33      	ldr	r3, [pc, #204]	@ (8002798 <HAL_ETH_Init+0x12c>)
 80026ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e4:	f7ff f852 	bl	800178c <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026ea:	e011      	b.n	8002710 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026ec:	f7ff f84e 	bl	800178c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026fa:	d909      	bls.n	8002710 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2204      	movs	r2, #4
 8002700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	22e0      	movs	r2, #224	@ 0xe0
 8002708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e03d      	b.n	800278c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e4      	bne.n	80026ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 ff34 	bl	8003590 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 ffdf 	bl	80036ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f001 f835 	bl	800379e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	461a      	mov	r2, r3
 800273a:	2100      	movs	r1, #0
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 ff9d 	bl	800367c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_ETH_Init+0x130>)
 8002760:	430b      	orrs	r3, r1
 8002762:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002776:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2210      	movs	r2, #16
 8002786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	40013800 	.word	0x40013800
 800279c:	00020060 	.word	0x00020060

080027a0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d15f      	bne.n	8002872 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2204      	movs	r2, #4
 80027c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa2e 	bl	8002c28 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7fe ffe5 	bl	80017a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027f8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002810:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fd58 	bl	80032c8 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0208 	orr.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002830:	2001      	movs	r0, #1
 8002832:	f7fe ffb7 	bl	80017a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0204 	orr.w	r2, r2, #4
 800284c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <HAL_ETH_Start_IT+0xdc>)
 800285e:	430b      	orrs	r3, r1
 8002860:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002864:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2240      	movs	r2, #64	@ 0x40
 800286a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	0001a0c1 	.word	0x0001a0c1

08002880 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	d16e      	bne.n	8002970 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a2:	69d9      	ldr	r1, [r3, #28]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b34      	ldr	r3, [pc, #208]	@ (800297c <HAL_ETH_Stop_IT+0xfc>)
 80028aa:	400b      	ands	r3, r1
 80028ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028b0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028c8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	f023 0302 	bic.w	r3, r3, #2
 80028dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028e0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0204 	bic.w	r2, r2, #4
 80028f0:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028fa:	2001      	movs	r0, #1
 80028fc:	f7fe ff52 	bl	80017a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fcdd 	bl	80032c8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0208 	bic.w	r2, r2, #8
 800291c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002926:	2001      	movs	r0, #1
 8002928:	f7fe ff3c 	bl	80017a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e00e      	b.n	8002958 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	3212      	adds	r2, #18
 8002940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002944:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d9ed      	bls.n	800293a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2210      	movs	r2, #16
 8002968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	fffe5f3e 	.word	0xfffe5f3e

08002980 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07c      	b.n	8002aa0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ac:	2b40      	cmp	r3, #64	@ 0x40
 80029ae:	d176      	bne.n	8002a9e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80029b0:	2200      	movs	r2, #0
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 ff61 	bl	800387c <ETH_Prepare_Tx_Descriptors>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d009      	beq.n	80029d4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f043 0202 	orr.w	r2, r3, #2
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e065      	b.n	8002aa0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029d4:	f3bf 8f4f 	dsb	sy
}
 80029d8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3206      	adds	r2, #6
 80029e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d904      	bls.n	8002a04 <HAL_ETH_Transmit+0x84>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	1f1a      	subs	r2, r3, #4
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3106      	adds	r1, #6
 8002a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a18:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002a1a:	f7fe feb7 	bl	800178c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a20:	e037      	b.n	8002a92 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d011      	beq.n	8002a58 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	f043 0208 	orr.w	r2, r3, #8
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e023      	b.n	8002aa0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a5e:	d018      	beq.n	8002a92 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a60:	f7fe fe94 	bl	800178c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d302      	bcc.n	8002a76 <HAL_ETH_Transmit+0xf6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7c:	f043 0204 	orr.w	r2, r3, #4
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002a8c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e006      	b.n	8002aa0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	dbc3      	blt.n	8002a22 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0a4      	b.n	8002c1e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ada:	2b40      	cmp	r3, #64	@ 0x40
 8002adc:	d001      	beq.n	8002ae2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e09d      	b.n	8002c1e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	3212      	adds	r2, #18
 8002aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002af8:	f1c3 0304 	rsb	r3, r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002afe:	e066      	b.n	8002bce <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <HAL_ETH_ReadData+0x88>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d03c      	beq.n	8002baa <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002b52:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f006 fd11 	bl	80095b0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	441a      	add	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3301      	adds	r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d902      	bls.n	8002bbc <HAL_ETH_ReadData+0x114>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b04      	subs	r3, #4
 8002bba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	3212      	adds	r2, #18
 8002bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db06      	blt.n	8002be4 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d202      	bcs.n	8002be4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d08d      	beq.n	8002b00 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	441a      	add	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f815 	bl	8002c28 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e000      	b.n	8002c1e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002c34:	2301      	movs	r3, #1
 8002c36:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c3c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	3212      	adds	r2, #18
 8002c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c48:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002c50:	e042      	b.n	8002cd8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d112      	bne.n	8002c80 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f006 fc76 	bl	8009550 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	74fb      	strb	r3, [r7, #19]
 8002c6e:	e007      	b.n	8002c80 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	461a      	mov	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d028      	beq.n	8002cd8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <ETH_UpdateDescriptor+0x104>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	6053      	str	r3, [r2, #4]
 8002c9a:	e005      	b.n	8002ca8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d902      	bls.n	8002cc6 <ETH_UpdateDescriptor+0x9e>
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	3212      	adds	r2, #18
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	617b      	str	r3, [r7, #20]
      desccount--;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <ETH_UpdateDescriptor+0xbc>
 8002cde:	7cfb      	ldrb	r3, [r7, #19]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1b6      	bne.n	8002c52 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d01a      	beq.n	8002d24 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3303      	adds	r3, #3
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002cf8:	f3bf 8f5f 	dmb	sy
}
 8002cfc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6919      	ldr	r1, [r3, #16]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	18ca      	adds	r2, r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d16:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	80004000 	.word	0x80004000

08002d30 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002d58:	4b4b      	ldr	r3, [pc, #300]	@ (8002e88 <HAL_ETH_IRQHandler+0x158>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <HAL_ETH_IRQHandler+0x56>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b43      	ldr	r3, [pc, #268]	@ (8002e8c <HAL_ETH_IRQHandler+0x15c>)
 8002d7e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f891 	bl	8002ea8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00f      	beq.n	8002db0 <HAL_ETH_IRQHandler+0x80>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da2:	461a      	mov	r2, r3
 8002da4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002da8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f872 	bl	8002e94 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d042      	beq.n	8002e40 <HAL_ETH_IRQHandler+0x110>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03d      	beq.n	8002e40 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dca:	f043 0208 	orr.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01a      	beq.n	8002e14 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	4b29      	ldr	r3, [pc, #164]	@ (8002e90 <HAL_ETH_IRQHandler+0x160>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002e04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e08:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	22e0      	movs	r2, #224	@ 0xe0
 8002e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e12:	e012      	b.n	8002e3a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e32:	461a      	mov	r2, r3
 8002e34:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002e38:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f83e 	bl	8002ebc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f838 	bl	8002ed0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_ETH_IRQHandler+0x158>)
 8002e74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e78:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f832 	bl	8002ee4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40013c00 	.word	0x40013c00
 8002e8c:	00010040 	.word	0x00010040
 8002e90:	007e2000 	.word	0x007e2000

08002e94 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 031c 	and.w	r3, r3, #28
 8002f14:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	02db      	lsls	r3, r3, #11
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f023 0302 	bic.w	r3, r3, #2
 8002f36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002f48:	f7fe fc20 	bl	800178c <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f4e:	e00d      	b.n	8002f6c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002f50:	f7fe fc1c 	bl	800178c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f5e:	d301      	bcc.n	8002f64 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e010      	b.n	8002f86 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ec      	bne.n	8002f50 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 031c 	and.w	r3, r3, #28
 8002faa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	02db      	lsls	r3, r3, #11
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	019b      	lsls	r3, r3, #6
 8002fbc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe8:	f7fe fbd0 	bl	800178c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fee:	e00d      	b.n	800300c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002ff0:	f7fe fbcc 	bl	800178c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ffe:	d301      	bcc.n	8003004 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e009      	b.n	8003018 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ec      	bne.n	8002ff0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0e6      	b.n	8003202 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf14      	ite	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	2300      	moveq	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e00b      	b.n	800323a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003228:	2b10      	cmp	r3, #16
 800322a:	d105      	bne.n	8003238 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f870 	bl	8003314 <ETH_SetMACConfig>

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 031c 	bic.w	r3, r3, #28
 800325a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800325c:	f003 fce0 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8003260:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a14      	ldr	r2, [pc, #80]	@ (80032b8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d804      	bhi.n	8003274 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e019      	b.n	80032a8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4a11      	ldr	r2, [pc, #68]	@ (80032bc <HAL_ETH_SetMDIOClockRange+0x78>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d204      	bcs.n	8003286 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f043 030c 	orr.w	r3, r3, #12
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e010      	b.n	80032a8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d90c      	bls.n	80032a8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4a0c      	ldr	r2, [pc, #48]	@ (80032c4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d804      	bhi.n	80032a0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e003      	b.n	80032a8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f043 0310 	orr.w	r3, r3, #16
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	611a      	str	r2, [r3, #16]
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	02160ebf 	.word	0x02160ebf
 80032bc:	03938700 	.word	0x03938700
 80032c0:	05f5e0ff 	.word	0x05f5e0ff
 80032c4:	08f0d17f 	.word	0x08f0d17f

080032c8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032ea:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032f8:	2001      	movs	r0, #1
 80032fa:	f7fe fa53 	bl	80017a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003308:	6193      	str	r3, [r2, #24]
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4b53      	ldr	r3, [pc, #332]	@ (8003478 <ETH_SetMACConfig+0x164>)
 800332a:	4013      	ands	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	7b9b      	ldrb	r3, [r3, #14]
 8003332:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	7c12      	ldrb	r2, [r2, #16]
 8003338:	2a00      	cmp	r2, #0
 800333a:	d102      	bne.n	8003342 <ETH_SetMACConfig+0x2e>
 800333c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003340:	e000      	b.n	8003344 <ETH_SetMACConfig+0x30>
 8003342:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003344:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	7c52      	ldrb	r2, [r2, #17]
 800334a:	2a00      	cmp	r2, #0
 800334c:	d102      	bne.n	8003354 <ETH_SetMACConfig+0x40>
 800334e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003352:	e000      	b.n	8003356 <ETH_SetMACConfig+0x42>
 8003354:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003356:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800335c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	7fdb      	ldrb	r3, [r3, #31]
 8003362:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003364:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800336a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	7f92      	ldrb	r2, [r2, #30]
 8003370:	2a00      	cmp	r2, #0
 8003372:	d102      	bne.n	800337a <ETH_SetMACConfig+0x66>
 8003374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003378:	e000      	b.n	800337c <ETH_SetMACConfig+0x68>
 800337a:	2200      	movs	r2, #0
                        macconf->Speed |
 800337c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	7f1b      	ldrb	r3, [r3, #28]
 8003382:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003384:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800338a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	791b      	ldrb	r3, [r3, #4]
 8003390:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003392:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	f892 2020 	ldrb.w	r2, [r2, #32]
 800339a:	2a00      	cmp	r2, #0
 800339c:	d102      	bne.n	80033a4 <ETH_SetMACConfig+0x90>
 800339e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a2:	e000      	b.n	80033a6 <ETH_SetMACConfig+0x92>
 80033a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	7bdb      	ldrb	r3, [r3, #15]
 80033ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80033b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80033be:	4313      	orrs	r3, r2
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f7fe f9e4 	bl	80017a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80033f2:	4013      	ands	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003402:	2a00      	cmp	r2, #0
 8003404:	d101      	bne.n	800340a <ETH_SetMACConfig+0xf6>
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	e000      	b.n	800340c <ETH_SetMACConfig+0xf8>
 800340a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800340c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800341a:	2a01      	cmp	r2, #1
 800341c:	d101      	bne.n	8003422 <ETH_SetMACConfig+0x10e>
 800341e:	2208      	movs	r2, #8
 8003420:	e000      	b.n	8003424 <ETH_SetMACConfig+0x110>
 8003422:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003424:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800342c:	2a01      	cmp	r2, #1
 800342e:	d101      	bne.n	8003434 <ETH_SetMACConfig+0x120>
 8003430:	2204      	movs	r2, #4
 8003432:	e000      	b.n	8003436 <ETH_SetMACConfig+0x122>
 8003434:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003436:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800343e:	2a01      	cmp	r2, #1
 8003440:	d101      	bne.n	8003446 <ETH_SetMACConfig+0x132>
 8003442:	2202      	movs	r2, #2
 8003444:	e000      	b.n	8003448 <ETH_SetMACConfig+0x134>
 8003446:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003448:	4313      	orrs	r3, r2
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003460:	2001      	movs	r0, #1
 8003462:	f7fe f99f 	bl	80017a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]
}
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	fd20810f 	.word	0xfd20810f

0800347c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4b3d      	ldr	r3, [pc, #244]	@ (800358c <ETH_SetDMAConfig+0x110>)
 8003496:	4013      	ands	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	7b1b      	ldrb	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <ETH_SetDMAConfig+0x2c>
 80034a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80034a6:	e000      	b.n	80034aa <ETH_SetDMAConfig+0x2e>
 80034a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	7b5b      	ldrb	r3, [r3, #13]
 80034ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	7f52      	ldrb	r2, [r2, #29]
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	d102      	bne.n	80034c0 <ETH_SetDMAConfig+0x44>
 80034ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80034be:	e000      	b.n	80034c2 <ETH_SetDMAConfig+0x46>
 80034c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80034c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	7b9b      	ldrb	r3, [r3, #14]
 80034c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80034ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80034d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	7f1b      	ldrb	r3, [r3, #28]
 80034d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80034d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	7f9b      	ldrb	r3, [r3, #30]
 80034de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80034e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80034e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034f0:	4313      	orrs	r3, r2
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003500:	461a      	mov	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003512:	2001      	movs	r0, #1
 8003514:	f7fe f946 	bl	80017a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003520:	461a      	mov	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003530:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003536:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800353c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003544:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003546:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800354e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003554:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800355e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003562:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003570:	2001      	movs	r0, #1
 8003572:	f7fe f917 	bl	80017a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	f8de3f23 	.word	0xf8de3f23

08003590 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0a6      	sub	sp, #152	@ 0x98
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80035a4:	2300      	movs	r3, #0
 80035a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80035d2:	2300      	movs	r3, #0
 80035d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80035fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800360a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fe7f 	bl	8003314 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003616:	2301      	movs	r3, #1
 8003618:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800361a:	2301      	movs	r3, #1
 800361c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003624:	2301      	movs	r3, #1
 8003626:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800362c:	2300      	movs	r3, #0
 800362e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003638:	2300      	movs	r3, #0
 800363a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003642:	2301      	movs	r3, #1
 8003644:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003646:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800364a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800364c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003650:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003656:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800365e:	2300      	movs	r3, #0
 8003660:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003666:	f107 0308 	add.w	r3, r7, #8
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ff05 	bl	800347c <ETH_SetDMAConfig>
}
 8003672:	bf00      	nop
 8003674:	3798      	adds	r7, #152	@ 0x98
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3305      	adds	r3, #5
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	3204      	adds	r2, #4
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <ETH_MACAddressConfig+0x68>)
 800369e:	4413      	add	r3, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3303      	adds	r3, #3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	061a      	lsls	r2, r3, #24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3302      	adds	r3, #2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3301      	adds	r3, #1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	4313      	orrs	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <ETH_MACAddressConfig+0x6c>)
 80036ce:	4413      	add	r3, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	6013      	str	r3, [r2, #0]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40028040 	.word	0x40028040
 80036e8:	40028044 	.word	0x40028044

080036ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e03e      	b.n	8003778 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68d9      	ldr	r1, [r3, #12]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	440b      	add	r3, r1
 800370a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	3206      	adds	r2, #6
 800372c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d80c      	bhi.n	800375c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68d9      	ldr	r1, [r3, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	440b      	add	r3, r1
 8003754:	461a      	mov	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e004      	b.n	8003766 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	461a      	mov	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3301      	adds	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d9bd      	bls.n	80036fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003790:	611a      	str	r2, [r3, #16]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e048      	b.n	800383e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6919      	ldr	r1, [r3, #16]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2200      	movs	r2, #0
 80037d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2200      	movs	r2, #0
 80037da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2200      	movs	r2, #0
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80037e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	3212      	adds	r2, #18
 800380a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d80c      	bhi.n	800382e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6919      	ldr	r1, [r3, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	440b      	add	r3, r1
 8003826:	461a      	mov	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60da      	str	r2, [r3, #12]
 800382c:	e004      	b.n	8003838 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3301      	adds	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d9b3      	bls.n	80037ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800386e:	60da      	str	r2, [r3, #12]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800387c:	b480      	push	{r7}
 800387e:	b091      	sub	sp, #68	@ 0x44
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3318      	adds	r3, #24
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038be:	d007      	beq.n	80038d0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80038c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038c4:	3304      	adds	r3, #4
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80038d0:	2302      	movs	r3, #2
 80038d2:	e111      	b.n	8003af8 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80038d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d6:	3301      	adds	r3, #1
 80038d8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80038da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	4b86      	ldr	r3, [pc, #536]	@ (8003b04 <ETH_Prepare_Tx_Descriptors+0x288>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ee:	6852      	ldr	r2, [r2, #4]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	431a      	orrs	r2, r3
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003956:	e082      	b.n	8003a5e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e005      	b.n	8003984 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003986:	3301      	adds	r3, #1
 8003988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800398a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398c:	2b03      	cmp	r3, #3
 800398e:	d902      	bls.n	8003996 <ETH_Prepare_Tx_Descriptors+0x11a>
 8003990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003992:	3b04      	subs	r3, #4
 8003994:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800399a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800399e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80039a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039ac:	d007      	beq.n	80039be <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80039ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b2:	3304      	adds	r3, #4
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d029      	beq.n	8003a12 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039d0:	e019      	b.n	8003a06 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80039d2:	f3bf 8f5f 	dmb	sy
}
 80039d6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80039e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e6:	3301      	adds	r3, #1
 80039e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d902      	bls.n	80039f6 <ETH_Prepare_Tx_Descriptors+0x17a>
 80039f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f2:	3b04      	subs	r3, #4
 80039f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fe:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	3301      	adds	r3, #1
 8003a04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d3e1      	bcc.n	80039d2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e072      	b.n	8003af8 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	3301      	adds	r3, #1
 8003a22:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a32:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a48:	3301      	adds	r3, #1
 8003a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003a4c:	f3bf 8f5f 	dmb	sy
}
 8003a50:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f af78 	bne.w	8003958 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e005      	b.n	8003a88 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	6a3a      	ldr	r2, [r7, #32]
 8003a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003a9e:	f3bf 8f5f 	dmb	sy
}
 8003aa2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab8:	3304      	adds	r3, #4
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ac4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	613b      	str	r3, [r7, #16]
  return(result);
 8003acc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae2:	4413      	add	r3, r2
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3744      	adds	r7, #68	@ 0x44
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	ffffe000 	.word	0xffffe000

08003b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	@ 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	e175      	b.n	8003e14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b28:	2201      	movs	r2, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	f040 8164 	bne.w	8003e0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d005      	beq.n	8003b5e <HAL_GPIO_Init+0x56>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d130      	bne.n	8003bc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	2203      	movs	r2, #3
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b94:	2201      	movs	r2, #1
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f003 0201 	and.w	r2, r3, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d017      	beq.n	8003bfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d123      	bne.n	8003c50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	08da      	lsrs	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3208      	adds	r2, #8
 8003c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	220f      	movs	r2, #15
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	08da      	lsrs	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3208      	adds	r2, #8
 8003c4a:	69b9      	ldr	r1, [r7, #24]
 8003c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0203 	and.w	r2, r3, #3
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80be 	beq.w	8003e0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c92:	4b66      	ldr	r3, [pc, #408]	@ (8003e2c <HAL_GPIO_Init+0x324>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	4a65      	ldr	r2, [pc, #404]	@ (8003e2c <HAL_GPIO_Init+0x324>)
 8003c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c9e:	4b63      	ldr	r3, [pc, #396]	@ (8003e2c <HAL_GPIO_Init+0x324>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003caa:	4a61      	ldr	r2, [pc, #388]	@ (8003e30 <HAL_GPIO_Init+0x328>)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a58      	ldr	r2, [pc, #352]	@ (8003e34 <HAL_GPIO_Init+0x32c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d037      	beq.n	8003d46 <HAL_GPIO_Init+0x23e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a57      	ldr	r2, [pc, #348]	@ (8003e38 <HAL_GPIO_Init+0x330>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d031      	beq.n	8003d42 <HAL_GPIO_Init+0x23a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a56      	ldr	r2, [pc, #344]	@ (8003e3c <HAL_GPIO_Init+0x334>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d02b      	beq.n	8003d3e <HAL_GPIO_Init+0x236>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a55      	ldr	r2, [pc, #340]	@ (8003e40 <HAL_GPIO_Init+0x338>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d025      	beq.n	8003d3a <HAL_GPIO_Init+0x232>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a54      	ldr	r2, [pc, #336]	@ (8003e44 <HAL_GPIO_Init+0x33c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01f      	beq.n	8003d36 <HAL_GPIO_Init+0x22e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a53      	ldr	r2, [pc, #332]	@ (8003e48 <HAL_GPIO_Init+0x340>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d019      	beq.n	8003d32 <HAL_GPIO_Init+0x22a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a52      	ldr	r2, [pc, #328]	@ (8003e4c <HAL_GPIO_Init+0x344>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_GPIO_Init+0x226>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a51      	ldr	r2, [pc, #324]	@ (8003e50 <HAL_GPIO_Init+0x348>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00d      	beq.n	8003d2a <HAL_GPIO_Init+0x222>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a50      	ldr	r2, [pc, #320]	@ (8003e54 <HAL_GPIO_Init+0x34c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <HAL_GPIO_Init+0x21e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4f      	ldr	r2, [pc, #316]	@ (8003e58 <HAL_GPIO_Init+0x350>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <HAL_GPIO_Init+0x21a>
 8003d1e:	2309      	movs	r3, #9
 8003d20:	e012      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d22:	230a      	movs	r3, #10
 8003d24:	e010      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d26:	2308      	movs	r3, #8
 8003d28:	e00e      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d2a:	2307      	movs	r3, #7
 8003d2c:	e00c      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d2e:	2306      	movs	r3, #6
 8003d30:	e00a      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d32:	2305      	movs	r3, #5
 8003d34:	e008      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e006      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e004      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e002      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_GPIO_Init+0x240>
 8003d46:	2300      	movs	r3, #0
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	f002 0203 	and.w	r2, r2, #3
 8003d4e:	0092      	lsls	r2, r2, #2
 8003d50:	4093      	lsls	r3, r2
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d58:	4935      	ldr	r1, [pc, #212]	@ (8003e30 <HAL_GPIO_Init+0x328>)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d66:	4b3d      	ldr	r3, [pc, #244]	@ (8003e5c <HAL_GPIO_Init+0x354>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d8a:	4a34      	ldr	r2, [pc, #208]	@ (8003e5c <HAL_GPIO_Init+0x354>)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d90:	4b32      	ldr	r3, [pc, #200]	@ (8003e5c <HAL_GPIO_Init+0x354>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003db4:	4a29      	ldr	r2, [pc, #164]	@ (8003e5c <HAL_GPIO_Init+0x354>)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dba:	4b28      	ldr	r3, [pc, #160]	@ (8003e5c <HAL_GPIO_Init+0x354>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dde:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <HAL_GPIO_Init+0x354>)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <HAL_GPIO_Init+0x354>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e08:	4a14      	ldr	r2, [pc, #80]	@ (8003e5c <HAL_GPIO_Init+0x354>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	f67f ae86 	bls.w	8003b28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3724      	adds	r7, #36	@ 0x24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40013800 	.word	0x40013800
 8003e34:	40020000 	.word	0x40020000
 8003e38:	40020400 	.word	0x40020400
 8003e3c:	40020800 	.word	0x40020800
 8003e40:	40020c00 	.word	0x40020c00
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40021400 	.word	0x40021400
 8003e4c:	40021800 	.word	0x40021800
 8003e50:	40021c00 	.word	0x40021c00
 8003e54:	40022000 	.word	0x40022000
 8003e58:	40022400 	.word	0x40022400
 8003e5c:	40013c00 	.word	0x40013c00

08003e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e08b      	b.n	8003f8a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fc fcf8 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	@ 0x24
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003eb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	e006      	b.n	8003ee8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d108      	bne.n	8003f02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e007      	b.n	8003f12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f94 <HAL_I2C_Init+0x134>)
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69d9      	ldr	r1, [r3, #28]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	02008000 	.word	0x02008000

08003f98 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	817b      	strh	r3, [r7, #10]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	f040 80ef 	bne.w	800419c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fcc:	d101      	bne.n	8003fd2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e0e5      	b.n	800419e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_I2C_Master_Transmit_DMA+0x48>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0de      	b.n	800419e <HAL_I2C_Master_Transmit_DMA+0x206>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	@ 0x21
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	893a      	ldrh	r2, [r7, #8]
 8004008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a66      	ldr	r2, [pc, #408]	@ (80041a8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a66      	ldr	r2, [pc, #408]	@ (80041ac <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004014:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	2bff      	cmp	r3, #255	@ 0xff
 800401e:	d906      	bls.n	800402e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	22ff      	movs	r2, #255	@ 0xff
 8004024:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	e007      	b.n	800403e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800403c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01a      	beq.n	800407c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004060:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	d074      	beq.n	800416e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d022      	beq.n	80040d2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	4a47      	ldr	r2, [pc, #284]	@ (80041b0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8004092:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	4a46      	ldr	r2, [pc, #280]	@ (80041b4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800409a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	2200      	movs	r2, #0
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	2200      	movs	r2, #0
 80040aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80040bc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80040c2:	f7fd ff5d 	bl	8001f80 <HAL_DMA_Start_IT>
 80040c6:	4603      	mov	r3, r0
 80040c8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13a      	bne.n	8004146 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80040d0:	e013      	b.n	80040fa <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e051      	b.n	800419e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	b2da      	uxtb	r2, r3
 8004104:	8979      	ldrh	r1, [r7, #10]
 8004106:	4b2c      	ldr	r3, [pc, #176]	@ (80041b8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f001 ff35 	bl	8005f7c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800412c:	2110      	movs	r1, #16
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f001 ff56 	bl	8005fe0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e028      	b.n	8004198 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	f043 0210 	orr.w	r2, r3, #16
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e017      	b.n	800419e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <HAL_I2C_Master_Transmit_DMA+0x224>)
 8004172:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	8979      	ldrh	r1, [r7, #10]
 800417a:	4b0f      	ldr	r3, [pc, #60]	@ (80041b8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f001 fefa 	bl	8005f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004190:	2101      	movs	r1, #1
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f001 ff24 	bl	8005fe0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	ffff0000 	.word	0xffff0000
 80041ac:	08004cd3 	.word	0x08004cd3
 80041b0:	08005cff 	.word	0x08005cff
 80041b4:	08005ecd 	.word	0x08005ecd
 80041b8:	80002000 	.word	0x80002000
 80041bc:	08004847 	.word	0x08004847

080041c0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	461a      	mov	r2, r3
 80041cc:	460b      	mov	r3, r1
 80041ce:	817b      	strh	r3, [r7, #10]
 80041d0:	4613      	mov	r3, r2
 80041d2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b20      	cmp	r3, #32
 80041de:	f040 80cd 	bne.w	800437c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f0:	d101      	bne.n	80041f6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
 80041f4:	e0c3      	b.n	800437e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_I2C_Master_Receive_DMA+0x44>
 8004200:	2302      	movs	r3, #2
 8004202:	e0bc      	b.n	800437e <HAL_I2C_Master_Receive_DMA+0x1be>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2222      	movs	r2, #34	@ 0x22
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2210      	movs	r2, #16
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	893a      	ldrh	r2, [r7, #8]
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a55      	ldr	r2, [pc, #340]	@ (8004388 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8004232:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a55      	ldr	r2, [pc, #340]	@ (800438c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	2bff      	cmp	r3, #255	@ 0xff
 8004242:	d906      	bls.n	8004252 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800424a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e007      	b.n	8004262 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800425c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004260:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d070      	beq.n	800434c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d020      	beq.n	80042b4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004276:	4a46      	ldr	r2, [pc, #280]	@ (8004390 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004278:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427e:	4a45      	ldr	r2, [pc, #276]	@ (8004394 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8004280:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004286:	2200      	movs	r2, #0
 8004288:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	2200      	movs	r2, #0
 8004290:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3324      	adds	r3, #36	@ 0x24
 800429c:	4619      	mov	r1, r3
 800429e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80042a4:	f7fd fe6c 	bl	8001f80 <HAL_DMA_Start_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d138      	bne.n	8004324 <HAL_I2C_Master_Receive_DMA+0x164>
 80042b2:	e013      	b.n	80042dc <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e050      	b.n	800437e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	8979      	ldrh	r1, [r7, #10]
 80042e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004398 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f001 fe46 	bl	8005f7c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800430a:	2110      	movs	r1, #16
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f001 fe67 	bl	8005fe0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e029      	b.n	8004378 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004338:	f043 0210 	orr.w	r2, r3, #16
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e018      	b.n	800437e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a13      	ldr	r2, [pc, #76]	@ (800439c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004356:	b2da      	uxtb	r2, r3
 8004358:	8979      	ldrh	r1, [r7, #10]
 800435a:	4b0f      	ldr	r3, [pc, #60]	@ (8004398 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f001 fe0a 	bl	8005f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004370:	2102      	movs	r1, #2
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f001 fe34 	bl	8005fe0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	ffff0000 	.word	0xffff0000
 800438c:	08004cd3 	.word	0x08004cd3
 8004390:	08005dd5 	.word	0x08005dd5
 8004394:	08005ecd 	.word	0x08005ecd
 8004398:	80002400 	.word	0x80002400
 800439c:	08004847 	.word	0x08004847

080043a0 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	f040 80d1 	bne.w	800455e <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_I2C_Slave_Transmit_DMA+0x28>
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d105      	bne.n	80043d4 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0c5      	b.n	8004560 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Slave_Transmit_DMA+0x42>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0be      	b.n	8004560 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2221      	movs	r2, #33	@ 0x21
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a53      	ldr	r2, [pc, #332]	@ (8004568 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 800441a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a53      	ldr	r2, [pc, #332]	@ (800456c <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 8004420:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800442a:	d117      	bne.n	800445c <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d068      	beq.n	8004538 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446a:	2b00      	cmp	r3, #0
 800446c:	d022      	beq.n	80044b4 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	4a3f      	ldr	r2, [pc, #252]	@ (8004570 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8004474:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447a:	4a3e      	ldr	r2, [pc, #248]	@ (8004574 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 800447c:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004482:	2200      	movs	r2, #0
 8004484:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448a:	2200      	movs	r2, #0
 800448c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8004496:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800449e:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80044a4:	f7fd fd6c 	bl	8001f80 <HAL_DMA_Start_IT>
 80044a8:	4603      	mov	r3, r0
 80044aa:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d12e      	bne.n	8004510 <HAL_I2C_Slave_Transmit_DMA+0x170>
 80044b2:	e013      	b.n	80044dc <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2228      	movs	r2, #40	@ 0x28
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e041      	b.n	8004560 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ea:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f001 fd71 	bl	8005fe0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e024      	b.n	800455a <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2228      	movs	r2, #40	@ 0x28
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	f043 0210 	orr.w	r2, r3, #16
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e013      	b.n	8004560 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004546:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004550:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f001 fd43 	bl	8005fe0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e000      	b.n	8004560 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800455e:	2302      	movs	r3, #2
  }
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	ffff0000 	.word	0xffff0000
 800456c:	08005175 	.word	0x08005175
 8004570:	08005d95 	.word	0x08005d95
 8004574:	08005ecd 	.word	0x08005ecd

08004578 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b20      	cmp	r3, #32
 8004590:	f040 809b 	bne.w	80046ca <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_I2C_Slave_Receive_DMA+0x28>
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d105      	bne.n	80045ac <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e08f      	b.n	80046cc <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_I2C_Slave_Receive_DMA+0x42>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e088      	b.n	80046cc <HAL_I2C_Slave_Receive_DMA+0x154>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2222      	movs	r2, #34	@ 0x22
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a38      	ldr	r2, [pc, #224]	@ (80046d4 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 80045f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <HAL_I2C_Slave_Receive_DMA+0x160>)
 80045f8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d020      	beq.n	8004644 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004606:	4a35      	ldr	r2, [pc, #212]	@ (80046dc <HAL_I2C_Slave_Receive_DMA+0x164>)
 8004608:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460e:	4a34      	ldr	r2, [pc, #208]	@ (80046e0 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8004610:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	2200      	movs	r2, #0
 8004620:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3324      	adds	r3, #36	@ 0x24
 800462c:	4619      	mov	r1, r3
 800462e:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004634:	f7fd fca4 	bl	8001f80 <HAL_DMA_Start_IT>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d12f      	bne.n	80046a2 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8004642:	e013      	b.n	800466c <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2228      	movs	r2, #40	@ 0x28
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004658:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e02f      	b.n	80046cc <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800467a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004684:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f001 fca9 	bl	8005fe0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800469c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e014      	b.n	80046cc <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2228      	movs	r2, #40	@ 0x28
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	f043 0210 	orr.w	r2, r3, #16
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	ffff0000 	.word	0xffff0000
 80046d8:	08005175 	.word	0x08005175
 80046dc:	08005e87 	.word	0x08005e87
 80046e0:	08005ecd 	.word	0x08005ecd

080046e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
  }
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d010      	beq.n	800475e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	09db      	lsrs	r3, r3, #7
 8004740:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800475c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	0a9b      	lsrs	r3, r3, #10
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	09db      	lsrs	r3, r3, #7
 800476e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f043 0208 	orr.w	r2, r3, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800478a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	0a5b      	lsrs	r3, r3, #9
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d010      	beq.n	80047ba <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	09db      	lsrs	r3, r3, #7
 800479c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a8:	f043 0202 	orr.w	r2, r3, #2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 030b 	and.w	r3, r3, #11
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 f95b 	bl	8005a88 <I2C_ITError>
  }
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	70fb      	strb	r3, [r7, #3]
 80047e6:	4613      	mov	r3, r2
 80047e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b088      	sub	sp, #32
 800484a:	af02      	add	r7, sp, #8
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <I2C_Master_ISR_IT+0x1e>
 8004860:	2302      	movs	r3, #2
 8004862:	e12e      	b.n	8004ac2 <I2C_Master_ISR_IT+0x27c>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	091b      	lsrs	r3, r3, #4
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	091b      	lsrs	r3, r3, #4
 800487c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004890:	f043 0204 	orr.w	r2, r3, #4
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f001 fa0c 	bl	8005cb6 <I2C_Flush_TXDR>
 800489e:	e0fb      	b.n	8004a98 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d023      	beq.n	80048f4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01d      	beq.n	80048f4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0304 	bic.w	r3, r3, #4
 80048be:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048f2:	e0d1      	b.n	8004a98 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d12a      	bne.n	8004956 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004908:	2b00      	cmp	r3, #0
 800490a:	d024      	beq.n	8004956 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01e      	beq.n	8004956 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80ba 	beq.w	8004a98 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004954:	e0a0      	b.n	8004a98 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	09db      	lsrs	r3, r3, #7
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d06b      	beq.n	8004a3a <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800496a:	2b00      	cmp	r3, #0
 800496c:	d065      	beq.n	8004a3a <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d04e      	beq.n	8004a16 <I2C_Master_ISR_IT+0x1d0>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	d14a      	bne.n	8004a16 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800498c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2bff      	cmp	r3, #255	@ 0xff
 8004996:	d91c      	bls.n	80049d2 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d103      	bne.n	80049b4 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80049b2:	e002      	b.n	80049ba <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	22ff      	movs	r2, #255	@ 0xff
 80049b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	8a79      	ldrh	r1, [r7, #18]
 80049c2:	2300      	movs	r3, #0
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f001 fad6 	bl	8005f7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d0:	e032      	b.n	8004a38 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049e4:	d00b      	beq.n	80049fe <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ea:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80049f0:	8a79      	ldrh	r1, [r7, #18]
 80049f2:	2000      	movs	r0, #0
 80049f4:	9000      	str	r0, [sp, #0]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f001 fac0 	bl	8005f7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049fc:	e01c      	b.n	8004a38 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	8a79      	ldrh	r1, [r7, #18]
 8004a06:	2300      	movs	r3, #0
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 fab4 	bl	8005f7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a14:	e010      	b.n	8004a38 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a24:	d003      	beq.n	8004a2e <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fd09 	bl	800543e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a2c:	e034      	b.n	8004a98 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a2e:	2140      	movs	r1, #64	@ 0x40
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f001 f829 	bl	8005a88 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a36:	e02f      	b.n	8004a98 <I2C_Master_ISR_IT+0x252>
 8004a38:	e02e      	b.n	8004a98 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	099b      	lsrs	r3, r3, #6
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d028      	beq.n	8004a98 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	099b      	lsrs	r3, r3, #6
 8004a4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d022      	beq.n	8004a98 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d119      	bne.n	8004a90 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a6a:	d015      	beq.n	8004a98 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a74:	d108      	bne.n	8004a88 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	e007      	b.n	8004a98 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fcd8 	bl	800543e <I2C_ITMasterSeqCplt>
 8004a8e:	e003      	b.n	8004a98 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a90:	2140      	movs	r1, #64	@ 0x40
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fff8 	bl	8005a88 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004ab0:	6979      	ldr	r1, [r7, #20]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fd5e 	bl	8005574 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <I2C_Slave_ISR_IT+0x24>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0ed      	b.n	8004cca <I2C_Slave_ISR_IT+0x200>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004b0e:	6939      	ldr	r1, [r7, #16]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fdf9 	bl	8005708 <I2C_ITSlaveCplt>
 8004b16:	e0d3      	b.n	8004cc0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d04d      	beq.n	8004bc0 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d047      	beq.n	8004bc0 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d128      	bne.n	8004b8c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b28      	cmp	r3, #40	@ 0x28
 8004b44:	d108      	bne.n	8004b58 <I2C_Slave_ISR_IT+0x8e>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b4c:	d104      	bne.n	8004b58 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b4e:	6939      	ldr	r1, [r7, #16]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 ff43 	bl	80059dc <I2C_ITListenCplt>
 8004b56:	e032      	b.n	8004bbe <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b29      	cmp	r3, #41	@ 0x29
 8004b62:	d10e      	bne.n	8004b82 <I2C_Slave_ISR_IT+0xb8>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b6a:	d00a      	beq.n	8004b82 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2210      	movs	r2, #16
 8004b72:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f001 f89e 	bl	8005cb6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fc9c 	bl	80054b8 <I2C_ITSlaveSeqCplt>
 8004b80:	e01d      	b.n	8004bbe <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2210      	movs	r2, #16
 8004b88:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b8a:	e096      	b.n	8004cba <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2210      	movs	r2, #16
 8004b92:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <I2C_Slave_ISR_IT+0xe6>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bac:	f040 8085 	bne.w	8004cba <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 ff66 	bl	8005a88 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004bbc:	e07d      	b.n	8004cba <I2C_Slave_ISR_IT+0x1f0>
 8004bbe:	e07c      	b.n	8004cba <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d030      	beq.n	8004c2e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02a      	beq.n	8004c2e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d018      	beq.n	8004c14 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d14f      	bne.n	8004cbe <I2C_Slave_ISR_IT+0x1f4>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c24:	d04b      	beq.n	8004cbe <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fc46 	bl	80054b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004c2c:	e047      	b.n	8004cbe <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	08db      	lsrs	r3, r3, #3
 8004c3e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c46:	6939      	ldr	r1, [r7, #16]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fb74 	bl	8005336 <I2C_ITAddrCplt>
 8004c4e:	e037      	b.n	8004cc0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d031      	beq.n	8004cc0 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d02b      	beq.n	8004cc0 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004ca2:	e00d      	b.n	8004cc0 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004caa:	d002      	beq.n	8004cb2 <I2C_Slave_ISR_IT+0x1e8>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fc00 	bl	80054b8 <I2C_ITSlaveSeqCplt>
 8004cb8:	e002      	b.n	8004cc0 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004cbe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b088      	sub	sp, #32
 8004cd6:	af02      	add	r7, sp, #8
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <I2C_Master_ISR_DMA+0x1a>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0f0      	b.n	8004ece <I2C_Master_ISR_DMA+0x1fc>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d017      	beq.n	8004d30 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d011      	beq.n	8004d30 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2210      	movs	r2, #16
 8004d12:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d18:	f043 0204 	orr.w	r2, r3, #4
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004d20:	2120      	movs	r1, #32
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f001 f95c 	bl	8005fe0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 ffc4 	bl	8005cb6 <I2C_Flush_TXDR>
 8004d2e:	e0c9      	b.n	8004ec4 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	09db      	lsrs	r3, r3, #7
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8081 	beq.w	8004e40 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	099b      	lsrs	r3, r3, #6
 8004d42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d07a      	beq.n	8004e40 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d58:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05c      	beq.n	8004e1e <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d70:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2bff      	cmp	r3, #255	@ 0xff
 8004d7a:	d914      	bls.n	8004da6 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	0c1b      	lsrs	r3, r3, #16
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d103      	bne.n	8004d98 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004d96:	e002      	b.n	8004d9e <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	22ff      	movs	r2, #255	@ 0xff
 8004d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8004d9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e010      	b.n	8004dc8 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004db8:	d003      	beq.n	8004dc2 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e002      	b.n	8004dc8 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004dc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	8a79      	ldrh	r1, [r7, #18]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f001 f8d0 	bl	8005f7c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b22      	cmp	r3, #34	@ 0x22
 8004df8:	d108      	bne.n	8004e0c <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e0a:	e05b      	b.n	8004ec4 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e1a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e1c:	e052      	b.n	8004ec4 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e2c:	d003      	beq.n	8004e36 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fb05 	bl	800543e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004e34:	e046      	b.n	8004ec4 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e36:	2140      	movs	r1, #64	@ 0x40
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fe25 	bl	8005a88 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004e3e:	e041      	b.n	8004ec4 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d029      	beq.n	8004ea0 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	099b      	lsrs	r3, r3, #6
 8004e50:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d023      	beq.n	8004ea0 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d119      	bne.n	8004e96 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e70:	d027      	beq.n	8004ec2 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e7a:	d108      	bne.n	8004e8e <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e8a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004e8c:	e019      	b.n	8004ec2 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fad5 	bl	800543e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004e94:	e015      	b.n	8004ec2 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e96:	2140      	movs	r1, #64	@ 0x40
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fdf5 	bl	8005a88 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004e9e:	e010      	b.n	8004ec2 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fb5a 	bl	8005574 <I2C_ITMasterCplt>
 8004ec0:	e000      	b.n	8004ec4 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8004ec2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004ee4:	4b94      	ldr	r3, [pc, #592]	@ (8005138 <I2C_Mem_ISR_DMA+0x260>)
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <I2C_Mem_ISR_DMA+0x1e>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e139      	b.n	800516a <I2C_Mem_ISR_DMA+0x292>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d017      	beq.n	8004f3a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	f043 0204 	orr.w	r2, r3, #4
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004f2a:	2120      	movs	r1, #32
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f001 f857 	bl	8005fe0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 febf 	bl	8005cb6 <I2C_Flush_TXDR>
 8004f38:	e112      	b.n	8005160 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00f      	beq.n	8004f66 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f62:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f64:	e0fc      	b.n	8005160 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d06e      	beq.n	8005050 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	099b      	lsrs	r3, r3, #6
 8004f76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d068      	beq.n	8005050 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f7e:	2101      	movs	r1, #1
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f001 f8b1 	bl	80060e8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f86:	2110      	movs	r1, #16
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f001 f829 	bl	8005fe0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d056      	beq.n	8005046 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2bff      	cmp	r3, #255	@ 0xff
 8004fa0:	d91e      	bls.n	8004fe0 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d103      	bne.n	8004fbe <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004fbc:	e002      	b.n	8004fc4 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	22ff      	movs	r2, #255	@ 0xff
 8004fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc8:	b299      	uxth	r1, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 ffcf 	bl	8005f7c <I2C_TransferConfig>
 8004fde:	e011      	b.n	8005004 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	b299      	uxth	r1, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 ffbc 	bl	8005f7c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b22      	cmp	r3, #34	@ 0x22
 8005020:	d108      	bne.n	8005034 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005030:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005032:	e095      	b.n	8005160 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005042:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005044:	e08c      	b.n	8005160 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005046:	2140      	movs	r1, #64	@ 0x40
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fd1d 	bl	8005a88 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800504e:	e087      	b.n	8005160 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	099b      	lsrs	r3, r3, #6
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d071      	beq.n	8005140 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	099b      	lsrs	r3, r3, #6
 8005060:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005064:	2b00      	cmp	r3, #0
 8005066:	d06b      	beq.n	8005140 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005068:	2101      	movs	r1, #1
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f001 f83c 	bl	80060e8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005070:	2110      	movs	r1, #16
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 ffb4 	bl	8005fe0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b22      	cmp	r3, #34	@ 0x22
 8005082:	d101      	bne.n	8005088 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8005084:	4b2d      	ldr	r3, [pc, #180]	@ (800513c <I2C_Mem_ISR_DMA+0x264>)
 8005086:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	2bff      	cmp	r3, #255	@ 0xff
 8005090:	d91e      	bls.n	80050d0 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	b2db      	uxtb	r3, r3
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d103      	bne.n	80050ae <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80050ac:	e002      	b.n	80050b4 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	22ff      	movs	r2, #255	@ 0xff
 80050b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b8:	b299      	uxth	r1, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 ff57 	bl	8005f7c <I2C_TransferConfig>
 80050ce:	e011      	b.n	80050f4 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050de:	b299      	uxth	r1, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 ff44 	bl	8005f7c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b22      	cmp	r3, #34	@ 0x22
 8005110:	d108      	bne.n	8005124 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005120:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005122:	e01d      	b.n	8005160 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005132:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005134:	e014      	b.n	8005160 <I2C_Mem_ISR_DMA+0x288>
 8005136:	bf00      	nop
 8005138:	80002000 	.word	0x80002000
 800513c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 fa0a 	bl	8005574 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop

08005174 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <I2C_Slave_ISR_DMA+0x24>
 8005194:	2302      	movs	r3, #2
 8005196:	e0ca      	b.n	800532e <I2C_Slave_ISR_DMA+0x1ba>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 faa4 	bl	8005708 <I2C_ITSlaveCplt>
 80051c0:	e0b0      	b.n	8005324 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 809a 	beq.w	8005304 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8093 	beq.w	8005304 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	0b9b      	lsrs	r3, r3, #14
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0bdb      	lsrs	r3, r3, #15
 80051ee:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d07f      	beq.n	80052f6 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00d      	beq.n	800521a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0bdb      	lsrs	r3, r3, #15
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8005216:	2301      	movs	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00d      	beq.n	800523e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0b9b      	lsrs	r3, r3, #14
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800523a:	2301      	movs	r3, #1
 800523c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d128      	bne.n	8005296 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b28      	cmp	r3, #40	@ 0x28
 800524e:	d108      	bne.n	8005262 <I2C_Slave_ISR_DMA+0xee>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005256:	d104      	bne.n	8005262 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fbbe 	bl	80059dc <I2C_ITListenCplt>
 8005260:	e048      	b.n	80052f4 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b29      	cmp	r3, #41	@ 0x29
 800526c:	d10e      	bne.n	800528c <I2C_Slave_ISR_DMA+0x118>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005274:	d00a      	beq.n	800528c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2210      	movs	r2, #16
 800527c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fd19 	bl	8005cb6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f917 	bl	80054b8 <I2C_ITSlaveSeqCplt>
 800528a:	e033      	b.n	80052f4 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2210      	movs	r2, #16
 8005292:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005294:	e034      	b.n	8005300 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2210      	movs	r2, #16
 800529c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	f043 0204 	orr.w	r2, r3, #4
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <I2C_Slave_ISR_DMA+0x14c>
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052be:	d11f      	bne.n	8005300 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	2b21      	cmp	r3, #33	@ 0x21
 80052c4:	d002      	beq.n	80052cc <I2C_Slave_ISR_DMA+0x158>
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
 80052c8:	2b29      	cmp	r3, #41	@ 0x29
 80052ca:	d103      	bne.n	80052d4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2221      	movs	r2, #33	@ 0x21
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80052d2:	e008      	b.n	80052e6 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b22      	cmp	r3, #34	@ 0x22
 80052d8:	d002      	beq.n	80052e0 <I2C_Slave_ISR_DMA+0x16c>
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052de:	d102      	bne.n	80052e6 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2222      	movs	r2, #34	@ 0x22
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	4619      	mov	r1, r3
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fbcb 	bl	8005a88 <I2C_ITError>
      if (treatdmanack == 1U)
 80052f2:	e005      	b.n	8005300 <I2C_Slave_ISR_DMA+0x18c>
 80052f4:	e004      	b.n	8005300 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2210      	movs	r2, #16
 80052fc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052fe:	e011      	b.n	8005324 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8005300:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005302:	e00f      	b.n	8005324 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	08db      	lsrs	r3, r3, #3
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	08db      	lsrs	r3, r3, #3
 8005314:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f809 	bl	8005336 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800534c:	2b28      	cmp	r3, #40	@ 0x28
 800534e:	d16a      	bne.n	8005426 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	b2db      	uxtb	r3, r3
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	0c1b      	lsrs	r3, r3, #16
 8005368:	b29b      	uxth	r3, r3
 800536a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800536e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800537c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800538a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d138      	bne.n	8005406 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005394:	897b      	ldrh	r3, [r7, #10]
 8005396:	09db      	lsrs	r3, r3, #7
 8005398:	b29a      	uxth	r2, r3
 800539a:	89bb      	ldrh	r3, [r7, #12]
 800539c:	4053      	eors	r3, r2
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f003 0306 	and.w	r3, r3, #6
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11c      	bne.n	80053e2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80053a8:	897b      	ldrh	r3, [r7, #10]
 80053aa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d13b      	bne.n	8005436 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2208      	movs	r2, #8
 80053ca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80053d4:	89ba      	ldrh	r2, [r7, #12]
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff f9fd 	bl	80047da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80053e0:	e029      	b.n	8005436 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80053e2:	893b      	ldrh	r3, [r7, #8]
 80053e4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80053e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fe7c 	bl	80060e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80053f8:	89ba      	ldrh	r2, [r7, #12]
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff f9eb 	bl	80047da <HAL_I2C_AddrCallback>
}
 8005404:	e017      	b.n	8005436 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005406:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fe6c 	bl	80060e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005418:	89ba      	ldrh	r2, [r7, #12]
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff f9db 	bl	80047da <HAL_I2C_AddrCallback>
}
 8005424:	e007      	b.n	8005436 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2208      	movs	r2, #8
 800542c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b21      	cmp	r3, #33	@ 0x21
 8005458:	d115      	bne.n	8005486 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2211      	movs	r2, #17
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800546e:	2101      	movs	r1, #1
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fe39 	bl	80060e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f00e ff2a 	bl	80142d8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005484:	e014      	b.n	80054b0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2212      	movs	r2, #18
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800549a:	2102      	movs	r1, #2
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fe23 	bl	80060e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f00e ff2a 	bl	8014304 <HAL_I2C_MasterRxCpltCallback>
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	0b9b      	lsrs	r3, r3, #14
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e00d      	b.n	800550a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	0bdb      	lsrs	r3, r3, #15
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005508:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b29      	cmp	r3, #41	@ 0x29
 8005514:	d112      	bne.n	800553c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2228      	movs	r2, #40	@ 0x28
 800551a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2221      	movs	r2, #33	@ 0x21
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005524:	2101      	movs	r1, #1
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fdde 	bl	80060e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f00e fefb 	bl	8014330 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800553a:	e017      	b.n	800556c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b2a      	cmp	r3, #42	@ 0x2a
 8005546:	d111      	bne.n	800556c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2228      	movs	r2, #40	@ 0x28
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2222      	movs	r2, #34	@ 0x22
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005556:	2102      	movs	r1, #2
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fdc5 	bl	80060e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f00e fef8 	bl	801435c <HAL_I2C_SlaveRxCpltCallback>
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2220      	movs	r2, #32
 8005588:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b21      	cmp	r3, #33	@ 0x21
 8005594:	d107      	bne.n	80055a6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005596:	2101      	movs	r1, #1
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fda5 	bl	80060e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2211      	movs	r2, #17
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80055a4:	e00c      	b.n	80055c0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b22      	cmp	r3, #34	@ 0x22
 80055b0:	d106      	bne.n	80055c0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80055b2:	2102      	movs	r1, #2
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fd97 	bl	80060e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2212      	movs	r2, #18
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005700 <I2C_ITMasterCplt+0x18c>)
 80055cc:	400b      	ands	r3, r1
 80055ce:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005704 <I2C_ITMasterCplt+0x190>)
 80055da:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2210      	movs	r2, #16
 80055ee:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f4:	f043 0204 	orr.w	r2, r3, #4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b60      	cmp	r3, #96	@ 0x60
 8005606:	d10b      	bne.n	8005620 <I2C_ITMasterCplt+0xac>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	089b      	lsrs	r3, r3, #2
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561a:	b2db      	uxtb	r3, r3
 800561c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800561e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fb48 	bl	8005cb6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b60      	cmp	r3, #96	@ 0x60
 8005636:	d002      	beq.n	800563e <I2C_ITMasterCplt+0xca>
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fa1f 	bl	8005a88 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800564a:	e054      	b.n	80056f6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b21      	cmp	r3, #33	@ 0x21
 8005656:	d124      	bne.n	80056a2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	d10b      	bne.n	800568a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff f8c1 	bl	800480a <HAL_I2C_MemTxCpltCallback>
}
 8005688:	e035      	b.n	80056f6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f00e fe1c 	bl	80142d8 <HAL_I2C_MasterTxCpltCallback>
}
 80056a0:	e029      	b.n	80056f6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b22      	cmp	r3, #34	@ 0x22
 80056ac:	d123      	bne.n	80056f6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b40      	cmp	r3, #64	@ 0x40
 80056c6:	d10b      	bne.n	80056e0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff f8a0 	bl	800481e <HAL_I2C_MemRxCpltCallback>
}
 80056de:	e00a      	b.n	80056f6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f00e fe07 	bl	8014304 <HAL_I2C_MasterRxCpltCallback>
}
 80056f6:	bf00      	nop
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	fe00e800 	.word	0xfe00e800
 8005704:	ffff0000 	.word	0xffff0000

08005708 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005722:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800572a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2220      	movs	r2, #32
 8005732:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005734:	7afb      	ldrb	r3, [r7, #11]
 8005736:	2b21      	cmp	r3, #33	@ 0x21
 8005738:	d002      	beq.n	8005740 <I2C_ITSlaveCplt+0x38>
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	2b29      	cmp	r3, #41	@ 0x29
 800573e:	d108      	bne.n	8005752 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005740:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fccf 	bl	80060e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2221      	movs	r2, #33	@ 0x21
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005750:	e019      	b.n	8005786 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005752:	7afb      	ldrb	r3, [r7, #11]
 8005754:	2b22      	cmp	r3, #34	@ 0x22
 8005756:	d002      	beq.n	800575e <I2C_ITSlaveCplt+0x56>
 8005758:	7afb      	ldrb	r3, [r7, #11]
 800575a:	2b2a      	cmp	r3, #42	@ 0x2a
 800575c:	d108      	bne.n	8005770 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800575e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fcc0 	bl	80060e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2222      	movs	r2, #34	@ 0x22
 800576c:	631a      	str	r2, [r3, #48]	@ 0x30
 800576e:	e00a      	b.n	8005786 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	2b28      	cmp	r3, #40	@ 0x28
 8005774:	d107      	bne.n	8005786 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005776:	f248 0103 	movw	r1, #32771	@ 0x8003
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fcb4 	bl	80060e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005794:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b8c      	ldr	r3, [pc, #560]	@ (80059d4 <I2C_ITSlaveCplt+0x2cc>)
 80057a2:	400b      	ands	r3, r1
 80057a4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa85 	bl	8005cb6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	0b9b      	lsrs	r3, r3, #14
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d013      	beq.n	80057e0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057de:	e018      	b.n	8005812 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	0bdb      	lsrs	r3, r3, #15
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d012      	beq.n	8005812 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d006      	beq.n	8005812 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d020      	beq.n	8005860 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	f043 0204 	orr.w	r2, r3, #4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04a      	beq.n	8005918 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800588a:	2b00      	cmp	r3, #0
 800588c:	d044      	beq.n	8005918 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d128      	bne.n	80058ea <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b28      	cmp	r3, #40	@ 0x28
 80058a2:	d108      	bne.n	80058b6 <I2C_ITSlaveCplt+0x1ae>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058aa:	d104      	bne.n	80058b6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80058ac:	6979      	ldr	r1, [r7, #20]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f894 	bl	80059dc <I2C_ITListenCplt>
 80058b4:	e030      	b.n	8005918 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b29      	cmp	r3, #41	@ 0x29
 80058c0:	d10e      	bne.n	80058e0 <I2C_ITSlaveCplt+0x1d8>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058c8:	d00a      	beq.n	80058e0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2210      	movs	r2, #16
 80058d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9ef 	bl	8005cb6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fded 	bl	80054b8 <I2C_ITSlaveSeqCplt>
 80058de:	e01b      	b.n	8005918 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2210      	movs	r2, #16
 80058e6:	61da      	str	r2, [r3, #28]
 80058e8:	e016      	b.n	8005918 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	f043 0204 	orr.w	r2, r3, #4
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <I2C_ITSlaveCplt+0x204>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800590a:	d105      	bne.n	8005918 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f8b8 	bl	8005a88 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	2b00      	cmp	r3, #0
 800592c:	d010      	beq.n	8005950 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8a7 	bl	8005a88 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b28      	cmp	r3, #40	@ 0x28
 8005944:	d141      	bne.n	80059ca <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f847 	bl	80059dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800594e:	e03c      	b.n	80059ca <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005954:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005958:	d014      	beq.n	8005984 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fdac 	bl	80054b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a1d      	ldr	r2, [pc, #116]	@ (80059d8 <I2C_ITSlaveCplt+0x2d0>)
 8005964:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fe ff3a 	bl	80047f6 <HAL_I2C_ListenCpltCallback>
}
 8005982:	e022      	b.n	80059ca <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b22      	cmp	r3, #34	@ 0x22
 800598e:	d10e      	bne.n	80059ae <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f00e fcd8 	bl	801435c <HAL_I2C_SlaveRxCpltCallback>
}
 80059ac:	e00d      	b.n	80059ca <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f00e fcb3 	bl	8014330 <HAL_I2C_SlaveTxCpltCallback>
}
 80059ca:	bf00      	nop
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	fe00e800 	.word	0xfe00e800
 80059d8:	ffff0000 	.word	0xffff0000

080059dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a26      	ldr	r2, [pc, #152]	@ (8005a84 <I2C_ITListenCplt+0xa8>)
 80059ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	089b      	lsrs	r3, r3, #2
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d022      	beq.n	8005a5a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d012      	beq.n	8005a5a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	f043 0204 	orr.w	r2, r3, #4
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a5a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fb42 	bl	80060e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fe febe 	bl	80047f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	ffff0000 	.word	0xffff0000

08005a88 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a98:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a6d      	ldr	r2, [pc, #436]	@ (8005c5c <I2C_ITError+0x1d4>)
 8005aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b28      	cmp	r3, #40	@ 0x28
 8005abe:	d005      	beq.n	8005acc <I2C_ITError+0x44>
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b29      	cmp	r3, #41	@ 0x29
 8005ac4:	d002      	beq.n	8005acc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aca:	d10b      	bne.n	8005ae4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005acc:	2103      	movs	r1, #3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fb0a 	bl	80060e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2228      	movs	r2, #40	@ 0x28
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a60      	ldr	r2, [pc, #384]	@ (8005c60 <I2C_ITError+0x1d8>)
 8005ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ae2:	e030      	b.n	8005b46 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ae4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fafd 	bl	80060e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f8e1 	bl	8005cb6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b60      	cmp	r3, #96	@ 0x60
 8005afe:	d01f      	beq.n	8005b40 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d114      	bne.n	8005b40 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d109      	bne.n	8005b38 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2210      	movs	r2, #16
 8005b2a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b30:	f043 0204 	orr.w	r2, r3, #4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d039      	beq.n	8005bc8 <I2C_ITError+0x140>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b11      	cmp	r3, #17
 8005b58:	d002      	beq.n	8005b60 <I2C_ITError+0xd8>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b21      	cmp	r3, #33	@ 0x21
 8005b5e:	d133      	bne.n	8005bc8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b6e:	d107      	bne.n	8005b80 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fc fc77 	bl	8002478 <HAL_DMA_GetState>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d017      	beq.n	8005bc0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	4a33      	ldr	r2, [pc, #204]	@ (8005c64 <I2C_ITError+0x1dc>)
 8005b96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fc fabb 	bl	8002120 <HAL_DMA_Abort_IT>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d04d      	beq.n	8005c4c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bbe:	e045      	b.n	8005c4c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f851 	bl	8005c68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bc6:	e041      	b.n	8005c4c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d039      	beq.n	8005c44 <I2C_ITError+0x1bc>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b12      	cmp	r3, #18
 8005bd4:	d002      	beq.n	8005bdc <I2C_ITError+0x154>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b22      	cmp	r3, #34	@ 0x22
 8005bda:	d133      	bne.n	8005c44 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bea:	d107      	bne.n	8005bfc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bfa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fc fc39 	bl	8002478 <HAL_DMA_GetState>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d017      	beq.n	8005c3c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c10:	4a14      	ldr	r2, [pc, #80]	@ (8005c64 <I2C_ITError+0x1dc>)
 8005c12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fc fa7d 	bl	8002120 <HAL_DMA_Abort_IT>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d011      	beq.n	8005c50 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c36:	4610      	mov	r0, r2
 8005c38:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c3a:	e009      	b.n	8005c50 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f813 	bl	8005c68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c42:	e005      	b.n	8005c50 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f80f 	bl	8005c68 <I2C_TreatErrorCallback>
  }
}
 8005c4a:	e002      	b.n	8005c52 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c4c:	bf00      	nop
 8005c4e:	e000      	b.n	8005c52 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c50:	bf00      	nop
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	ffff0000 	.word	0xffff0000
 8005c60:	08004acb 	.word	0x08004acb
 8005c64:	08005f41 	.word	0x08005f41

08005c68 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b60      	cmp	r3, #96	@ 0x60
 8005c7a:	d10e      	bne.n	8005c9a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fe fdcd 	bl	8004832 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c98:	e009      	b.n	8005cae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f00e fabf 	bl	801422c <HAL_I2C_ErrorCallback>
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d103      	bne.n	8005cd4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d007      	beq.n	8005cf2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0201 	orr.w	r2, r2, #1
 8005cf0:	619a      	str	r2, [r3, #24]
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d1a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d26:	2120      	movs	r1, #32
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f959 	bl	8005fe0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005d2e:	e02d      	b.n	8005d8c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005d38:	441a      	add	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2bff      	cmp	r3, #255	@ 0xff
 8005d46:	d903      	bls.n	8005d50 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	22ff      	movs	r2, #255	@ 0xff
 8005d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d4e:	e004      	b.n	8005d5a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d62:	4619      	mov	r1, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3328      	adds	r3, #40	@ 0x28
 8005d6a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005d70:	f7fc f906 	bl	8001f80 <HAL_DMA_Start_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005d7a:	2110      	movs	r1, #16
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fe83 	bl	8005a88 <I2C_ITError>
}
 8005d82:	e003      	b.n	8005d8c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005d84:	2140      	movs	r1, #64	@ 0x40
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f92a 	bl	8005fe0 <I2C_Enable_IRQ>
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dae:	d002      	beq.n	8005db6 <I2C_DMASlaveTransmitCplt+0x22>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005dc4:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff fb76 	bl	80054b8 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005df0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005dfc:	2120      	movs	r1, #32
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f8ee 	bl	8005fe0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005e04:	e03b      	b.n	8005e7e <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005e0e:	441a      	add	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2bff      	cmp	r3, #255	@ 0xff
 8005e1c:	d911      	bls.n	8005e42 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	0c1b      	lsrs	r3, r3, #16
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d103      	bne.n	8005e3a <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e38:	e008      	b.n	8005e4c <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	22ff      	movs	r2, #255	@ 0xff
 8005e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e40:	e004      	b.n	8005e4c <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3324      	adds	r3, #36	@ 0x24
 8005e56:	4619      	mov	r1, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005e62:	f7fc f88d 	bl	8001f80 <HAL_DMA_Start_IT>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005e6c:	2110      	movs	r1, #16
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f7ff fe0a 	bl	8005a88 <I2C_ITError>
}
 8005e74:	e003      	b.n	8005e7e <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005e76:	2140      	movs	r1, #64	@ 0x40
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f8b1 	bl	8005fe0 <I2C_Enable_IRQ>
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e98:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10e      	bne.n	8005ec4 <I2C_DMASlaveReceiveCplt+0x3e>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005eac:	d00a      	beq.n	8005ec4 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ebc:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fafa 	bl	80054b8 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fc fac0 	bl	8002494 <HAL_DMA_GetError>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d00e      	beq.n	8005f38 <I2C_DMAError+0x6c>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f2e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005f30:	2110      	movs	r1, #16
 8005f32:	68b8      	ldr	r0, [r7, #8]
 8005f34:	f7ff fda8 	bl	8005a88 <I2C_ITError>
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff fe7a 	bl	8005c68 <I2C_TreatErrorCallback>
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	817b      	strh	r3, [r7, #10]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f8e:	897b      	ldrh	r3, [r7, #10]
 8005f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f94:	7a7b      	ldrb	r3, [r7, #9]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f9c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005faa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	0d5b      	lsrs	r3, r3, #21
 8005fb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005fba:	4b08      	ldr	r3, [pc, #32]	@ (8005fdc <I2C_TransferConfig+0x60>)
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	ea02 0103 	and.w	r1, r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	03ff63ff 	.word	0x03ff63ff

08005fe0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff4:	4a39      	ldr	r2, [pc, #228]	@ (80060dc <I2C_Enable_IRQ+0xfc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d032      	beq.n	8006060 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ffe:	4a38      	ldr	r2, [pc, #224]	@ (80060e0 <I2C_Enable_IRQ+0x100>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d02d      	beq.n	8006060 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006008:	4a36      	ldr	r2, [pc, #216]	@ (80060e4 <I2C_Enable_IRQ+0x104>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d028      	beq.n	8006060 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800600e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da03      	bge.n	800601e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800601c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800601e:	887b      	ldrh	r3, [r7, #2]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800602e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006030:	887b      	ldrh	r3, [r7, #2]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006040:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006042:	887b      	ldrh	r3, [r7, #2]
 8006044:	2b10      	cmp	r3, #16
 8006046:	d103      	bne.n	8006050 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800604e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006050:	887b      	ldrh	r3, [r7, #2]
 8006052:	2b20      	cmp	r3, #32
 8006054:	d133      	bne.n	80060be <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f043 0320 	orr.w	r3, r3, #32
 800605c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800605e:	e02e      	b.n	80060be <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006060:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006064:	2b00      	cmp	r3, #0
 8006066:	da03      	bge.n	8006070 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800606e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006070:	887b      	ldrh	r3, [r7, #2]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006080:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006082:	887b      	ldrh	r3, [r7, #2]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006092:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006094:	887b      	ldrh	r3, [r7, #2]
 8006096:	2b10      	cmp	r3, #16
 8006098:	d103      	bne.n	80060a2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80060a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d103      	bne.n	80060b0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80060ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80060b0:	887b      	ldrh	r3, [r7, #2]
 80060b2:	2b40      	cmp	r3, #64	@ 0x40
 80060b4:	d103      	bne.n	80060be <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060bc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	08004cd3 	.word	0x08004cd3
 80060e0:	08005175 	.word	0x08005175
 80060e4:	08004ed9 	.word	0x08004ed9

080060e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80060f8:	887b      	ldrh	r3, [r7, #2]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00f      	beq.n	8006122 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006108:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006116:	2b28      	cmp	r3, #40	@ 0x28
 8006118:	d003      	beq.n	8006122 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006120:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006122:	887b      	ldrh	r3, [r7, #2]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00f      	beq.n	800614c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006132:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800613a:	b2db      	uxtb	r3, r3
 800613c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006140:	2b28      	cmp	r3, #40	@ 0x28
 8006142:	d003      	beq.n	800614c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800614a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800614c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	da03      	bge.n	800615c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800615a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800615c:	887b      	ldrh	r3, [r7, #2]
 800615e:	2b10      	cmp	r3, #16
 8006160:	d103      	bne.n	800616a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006168:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800616a:	887b      	ldrh	r3, [r7, #2]
 800616c:	2b20      	cmp	r3, #32
 800616e:	d103      	bne.n	8006178 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f043 0320 	orr.w	r3, r3, #32
 8006176:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006178:	887b      	ldrh	r3, [r7, #2]
 800617a:	2b40      	cmp	r3, #64	@ 0x40
 800617c:	d103      	bne.n	8006186 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006184:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6819      	ldr	r1, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	43da      	mvns	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	400a      	ands	r2, r1
 8006196:	601a      	str	r2, [r3, #0]
}
 8006198:	bf00      	nop
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d138      	bne.n	800622c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e032      	b.n	800622e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2224      	movs	r2, #36	@ 0x24
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6819      	ldr	r1, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b20      	cmp	r3, #32
 800624e:	d139      	bne.n	80062c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800625a:	2302      	movs	r3, #2
 800625c:	e033      	b.n	80062c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2224      	movs	r2, #36	@ 0x24
 800626a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800628c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e000      	b.n	80062c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
  }
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062de:	4b23      	ldr	r3, [pc, #140]	@ (800636c <HAL_PWREx_EnableOverDrive+0x98>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e2:	4a22      	ldr	r2, [pc, #136]	@ (800636c <HAL_PWREx_EnableOverDrive+0x98>)
 80062e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80062ea:	4b20      	ldr	r3, [pc, #128]	@ (800636c <HAL_PWREx_EnableOverDrive+0x98>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006370 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006370 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006300:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006302:	f7fb fa43 	bl	800178c <HAL_GetTick>
 8006306:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006308:	e009      	b.n	800631e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800630a:	f7fb fa3f 	bl	800178c <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006318:	d901      	bls.n	800631e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e022      	b.n	8006364 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800631e:	4b14      	ldr	r3, [pc, #80]	@ (8006370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800632a:	d1ee      	bne.n	800630a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800632c:	4b10      	ldr	r3, [pc, #64]	@ (8006370 <HAL_PWREx_EnableOverDrive+0x9c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0f      	ldr	r2, [pc, #60]	@ (8006370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006336:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006338:	f7fb fa28 	bl	800178c <HAL_GetTick>
 800633c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800633e:	e009      	b.n	8006354 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006340:	f7fb fa24 	bl	800178c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800634e:	d901      	bls.n	8006354 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e007      	b.n	8006364 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006354:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006360:	d1ee      	bne.n	8006340 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40023800 	.word	0x40023800
 8006370:	40007000 	.word	0x40007000

08006374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800637c:	2300      	movs	r3, #0
 800637e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e291      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8087 	beq.w	80064a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006398:	4b96      	ldr	r3, [pc, #600]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 030c 	and.w	r3, r3, #12
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d00c      	beq.n	80063be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063a4:	4b93      	ldr	r3, [pc, #588]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 030c 	and.w	r3, r3, #12
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d112      	bne.n	80063d6 <HAL_RCC_OscConfig+0x62>
 80063b0:	4b90      	ldr	r3, [pc, #576]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063bc:	d10b      	bne.n	80063d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063be:	4b8d      	ldr	r3, [pc, #564]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d06c      	beq.n	80064a4 <HAL_RCC_OscConfig+0x130>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d168      	bne.n	80064a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e26b      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063de:	d106      	bne.n	80063ee <HAL_RCC_OscConfig+0x7a>
 80063e0:	4b84      	ldr	r3, [pc, #528]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a83      	ldr	r2, [pc, #524]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80063e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e02e      	b.n	800644c <HAL_RCC_OscConfig+0xd8>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <HAL_RCC_OscConfig+0x9c>
 80063f6:	4b7f      	ldr	r3, [pc, #508]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a7e      	ldr	r2, [pc, #504]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80063fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	4b7c      	ldr	r3, [pc, #496]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a7b      	ldr	r2, [pc, #492]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006408:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	e01d      	b.n	800644c <HAL_RCC_OscConfig+0xd8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006418:	d10c      	bne.n	8006434 <HAL_RCC_OscConfig+0xc0>
 800641a:	4b76      	ldr	r3, [pc, #472]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a75      	ldr	r2, [pc, #468]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	4b73      	ldr	r3, [pc, #460]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a72      	ldr	r2, [pc, #456]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800642c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e00b      	b.n	800644c <HAL_RCC_OscConfig+0xd8>
 8006434:	4b6f      	ldr	r3, [pc, #444]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a6e      	ldr	r2, [pc, #440]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800643a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	4b6c      	ldr	r3, [pc, #432]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a6b      	ldr	r2, [pc, #428]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800644a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006454:	f7fb f99a 	bl	800178c <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800645c:	f7fb f996 	bl	800178c <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	@ 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e21f      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800646e:	4b61      	ldr	r3, [pc, #388]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0xe8>
 800647a:	e014      	b.n	80064a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fb f986 	bl	800178c <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006484:	f7fb f982 	bl	800178c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b64      	cmp	r3, #100	@ 0x64
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e20b      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006496:	4b57      	ldr	r3, [pc, #348]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x110>
 80064a2:	e000      	b.n	80064a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d069      	beq.n	8006586 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064b2:	4b50      	ldr	r3, [pc, #320]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 030c 	and.w	r3, r3, #12
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064be:	4b4d      	ldr	r3, [pc, #308]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 030c 	and.w	r3, r3, #12
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d11c      	bne.n	8006504 <HAL_RCC_OscConfig+0x190>
 80064ca:	4b4a      	ldr	r3, [pc, #296]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d116      	bne.n	8006504 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d6:	4b47      	ldr	r3, [pc, #284]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_RCC_OscConfig+0x17a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d001      	beq.n	80064ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e1df      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ee:	4b41      	ldr	r3, [pc, #260]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	493d      	ldr	r1, [pc, #244]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006502:	e040      	b.n	8006586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d023      	beq.n	8006554 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800650c:	4b39      	ldr	r3, [pc, #228]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a38      	ldr	r2, [pc, #224]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006518:	f7fb f938 	bl	800178c <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006520:	f7fb f934 	bl	800178c <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e1bd      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006532:	4b30      	ldr	r3, [pc, #192]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0f0      	beq.n	8006520 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653e:	4b2d      	ldr	r3, [pc, #180]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4929      	ldr	r1, [pc, #164]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]
 8006552:	e018      	b.n	8006586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006554:	4b27      	ldr	r3, [pc, #156]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a26      	ldr	r2, [pc, #152]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fb f914 	bl	800178c <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006568:	f7fb f910 	bl	800178c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e199      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800657a:	4b1e      	ldr	r3, [pc, #120]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d038      	beq.n	8006604 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d019      	beq.n	80065ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800659a:	4b16      	ldr	r3, [pc, #88]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 800659c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659e:	4a15      	ldr	r2, [pc, #84]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a6:	f7fb f8f1 	bl	800178c <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065ae:	f7fb f8ed 	bl	800178c <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e176      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c0:	4b0c      	ldr	r3, [pc, #48]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80065c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <HAL_RCC_OscConfig+0x23a>
 80065cc:	e01a      	b.n	8006604 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ce:	4b09      	ldr	r3, [pc, #36]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80065d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d2:	4a08      	ldr	r2, [pc, #32]	@ (80065f4 <HAL_RCC_OscConfig+0x280>)
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065da:	f7fb f8d7 	bl	800178c <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e0:	e00a      	b.n	80065f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065e2:	f7fb f8d3 	bl	800178c <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d903      	bls.n	80065f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e15c      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
 80065f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f8:	4b91      	ldr	r3, [pc, #580]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80065fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1ee      	bne.n	80065e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80a4 	beq.w	800675a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006612:	4b8b      	ldr	r3, [pc, #556]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800661e:	4b88      	ldr	r3, [pc, #544]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	4a87      	ldr	r2, [pc, #540]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006628:	6413      	str	r3, [r2, #64]	@ 0x40
 800662a:	4b85      	ldr	r3, [pc, #532]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800663a:	4b82      	ldr	r3, [pc, #520]	@ (8006844 <HAL_RCC_OscConfig+0x4d0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d118      	bne.n	8006678 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006646:	4b7f      	ldr	r3, [pc, #508]	@ (8006844 <HAL_RCC_OscConfig+0x4d0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7e      	ldr	r2, [pc, #504]	@ (8006844 <HAL_RCC_OscConfig+0x4d0>)
 800664c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006652:	f7fb f89b 	bl	800178c <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665a:	f7fb f897 	bl	800178c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b64      	cmp	r3, #100	@ 0x64
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e120      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800666c:	4b75      	ldr	r3, [pc, #468]	@ (8006844 <HAL_RCC_OscConfig+0x4d0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d106      	bne.n	800668e <HAL_RCC_OscConfig+0x31a>
 8006680:	4b6f      	ldr	r3, [pc, #444]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006684:	4a6e      	ldr	r2, [pc, #440]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6713      	str	r3, [r2, #112]	@ 0x70
 800668c:	e02d      	b.n	80066ea <HAL_RCC_OscConfig+0x376>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x33c>
 8006696:	4b6a      	ldr	r3, [pc, #424]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669a:	4a69      	ldr	r2, [pc, #420]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a2:	4b67      	ldr	r3, [pc, #412]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a6:	4a66      	ldr	r2, [pc, #408]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066a8:	f023 0304 	bic.w	r3, r3, #4
 80066ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ae:	e01c      	b.n	80066ea <HAL_RCC_OscConfig+0x376>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d10c      	bne.n	80066d2 <HAL_RCC_OscConfig+0x35e>
 80066b8:	4b61      	ldr	r3, [pc, #388]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066bc:	4a60      	ldr	r2, [pc, #384]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066be:	f043 0304 	orr.w	r3, r3, #4
 80066c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c4:	4b5e      	ldr	r3, [pc, #376]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c8:	4a5d      	ldr	r2, [pc, #372]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80066d0:	e00b      	b.n	80066ea <HAL_RCC_OscConfig+0x376>
 80066d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d6:	4a5a      	ldr	r2, [pc, #360]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80066de:	4b58      	ldr	r3, [pc, #352]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	4a57      	ldr	r2, [pc, #348]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d015      	beq.n	800671e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f2:	f7fb f84b 	bl	800178c <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fb f847 	bl	800178c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0ce      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	4b4b      	ldr	r3, [pc, #300]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0ee      	beq.n	80066fa <HAL_RCC_OscConfig+0x386>
 800671c:	e014      	b.n	8006748 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800671e:	f7fb f835 	bl	800178c <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fb f831 	bl	800178c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e0b8      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	4b40      	ldr	r3, [pc, #256]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1ee      	bne.n	8006726 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674e:	4b3c      	ldr	r3, [pc, #240]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	4a3b      	ldr	r2, [pc, #236]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006758:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 80a4 	beq.w	80068ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006764:	4b36      	ldr	r3, [pc, #216]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d06b      	beq.n	8006848 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d149      	bne.n	800680c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006778:	4b31      	ldr	r3, [pc, #196]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a30      	ldr	r2, [pc, #192]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 800677e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006784:	f7fb f802 	bl	800178c <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800678c:	f7fa fffe 	bl	800178c <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e087      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679e:	4b28      	ldr	r3, [pc, #160]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f0      	bne.n	800678c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	019b      	lsls	r3, r3, #6
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	3b01      	subs	r3, #1
 80067c4:	041b      	lsls	r3, r3, #16
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	061b      	lsls	r3, r3, #24
 80067ce:	4313      	orrs	r3, r2
 80067d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80067d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80067d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d8:	4b19      	ldr	r3, [pc, #100]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a18      	ldr	r2, [pc, #96]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80067de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fa ffd2 	bl	800178c <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ec:	f7fa ffce 	bl	800178c <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e057      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x478>
 800680a:	e04f      	b.n	80068ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680c:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0b      	ldr	r2, [pc, #44]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fa ffb8 	bl	800178c <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fa ffb4 	bl	800178c <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e03d      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	4b03      	ldr	r3, [pc, #12]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x4ac>
 800683e:	e035      	b.n	80068ac <HAL_RCC_OscConfig+0x538>
 8006840:	40023800 	.word	0x40023800
 8006844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006848:	4b1b      	ldr	r3, [pc, #108]	@ (80068b8 <HAL_RCC_OscConfig+0x544>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d028      	beq.n	80068a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006860:	429a      	cmp	r2, r3
 8006862:	d121      	bne.n	80068a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686e:	429a      	cmp	r2, r3
 8006870:	d11a      	bne.n	80068a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006878:	4013      	ands	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800687e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006880:	4293      	cmp	r3, r2
 8006882:	d111      	bne.n	80068a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	3b01      	subs	r3, #1
 8006892:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d107      	bne.n	80068a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800

080068bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0d0      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d910      	bls.n	8006904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e2:	4b67      	ldr	r3, [pc, #412]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 020f 	bic.w	r2, r3, #15
 80068ea:	4965      	ldr	r1, [pc, #404]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b63      	ldr	r3, [pc, #396]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0b8      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800691c:	4b59      	ldr	r3, [pc, #356]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	4a58      	ldr	r2, [pc, #352]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006922:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006926:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006934:	4b53      	ldr	r3, [pc, #332]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4a52      	ldr	r2, [pc, #328]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 800693a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800693e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006940:	4b50      	ldr	r3, [pc, #320]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	494d      	ldr	r1, [pc, #308]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d040      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d107      	bne.n	8006976 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006966:	4b47      	ldr	r3, [pc, #284]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d115      	bne.n	800699e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e07f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d107      	bne.n	800698e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800697e:	4b41      	ldr	r3, [pc, #260]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d109      	bne.n	800699e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e073      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698e:	4b3d      	ldr	r3, [pc, #244]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e06b      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800699e:	4b39      	ldr	r3, [pc, #228]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f023 0203 	bic.w	r2, r3, #3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	4936      	ldr	r1, [pc, #216]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b0:	f7fa feec 	bl	800178c <HAL_GetTick>
 80069b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b6:	e00a      	b.n	80069ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b8:	f7fa fee8 	bl	800178c <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e053      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 020c 	and.w	r2, r3, #12
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	429a      	cmp	r2, r3
 80069de:	d1eb      	bne.n	80069b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069e0:	4b27      	ldr	r3, [pc, #156]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d210      	bcs.n	8006a10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ee:	4b24      	ldr	r3, [pc, #144]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f023 020f 	bic.w	r2, r3, #15
 80069f6:	4922      	ldr	r1, [pc, #136]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fe:	4b20      	ldr	r3, [pc, #128]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d001      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e032      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a1c:	4b19      	ldr	r3, [pc, #100]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4916      	ldr	r1, [pc, #88]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a3a:	4b12      	ldr	r3, [pc, #72]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	490e      	ldr	r1, [pc, #56]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a4e:	f000 f821 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	490a      	ldr	r1, [pc, #40]	@ (8006a88 <HAL_RCC_ClockConfig+0x1cc>)
 8006a60:	5ccb      	ldrb	r3, [r1, r3]
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	4a09      	ldr	r2, [pc, #36]	@ (8006a8c <HAL_RCC_ClockConfig+0x1d0>)
 8006a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a6a:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <HAL_RCC_ClockConfig+0x1d4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fa fe48 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023c00 	.word	0x40023c00
 8006a84:	40023800 	.word	0x40023800
 8006a88:	08018cec 	.word	0x08018cec
 8006a8c:	20000000 	.word	0x20000000
 8006a90:	20000004 	.word	0x20000004

08006a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a98:	b090      	sub	sp, #64	@ 0x40
 8006a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aac:	4b59      	ldr	r3, [pc, #356]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 030c 	and.w	r3, r3, #12
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d00d      	beq.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	f200 80a1 	bhi.w	8006c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d003      	beq.n	8006ace <HAL_RCC_GetSysClockFreq+0x3a>
 8006ac6:	e09b      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ac8:	4b53      	ldr	r3, [pc, #332]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8006aca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006acc:	e09b      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ace:	4b53      	ldr	r3, [pc, #332]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8006ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ad2:	e098      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006adc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006ade:	4b4d      	ldr	r3, [pc, #308]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d028      	beq.n	8006b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aea:	4b4a      	ldr	r3, [pc, #296]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	099b      	lsrs	r3, r3, #6
 8006af0:	2200      	movs	r2, #0
 8006af2:	623b      	str	r3, [r7, #32]
 8006af4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006afc:	2100      	movs	r1, #0
 8006afe:	4b47      	ldr	r3, [pc, #284]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8006b00:	fb03 f201 	mul.w	r2, r3, r1
 8006b04:	2300      	movs	r3, #0
 8006b06:	fb00 f303 	mul.w	r3, r0, r3
 8006b0a:	4413      	add	r3, r2
 8006b0c:	4a43      	ldr	r2, [pc, #268]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8006b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8006b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b14:	460a      	mov	r2, r1
 8006b16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b1a:	4413      	add	r3, r2
 8006b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b20:	2200      	movs	r2, #0
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	61fa      	str	r2, [r7, #28]
 8006b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006b2e:	f7f9 fbbf 	bl	80002b0 <__aeabi_uldivmod>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4613      	mov	r3, r2
 8006b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b3a:	e053      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b3c:	4b35      	ldr	r3, [pc, #212]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	099b      	lsrs	r3, r3, #6
 8006b42:	2200      	movs	r2, #0
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	617a      	str	r2, [r7, #20]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b4e:	f04f 0b00 	mov.w	fp, #0
 8006b52:	4652      	mov	r2, sl
 8006b54:	465b      	mov	r3, fp
 8006b56:	f04f 0000 	mov.w	r0, #0
 8006b5a:	f04f 0100 	mov.w	r1, #0
 8006b5e:	0159      	lsls	r1, r3, #5
 8006b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b64:	0150      	lsls	r0, r2, #5
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8006b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b86:	ebb2 0408 	subs.w	r4, r2, r8
 8006b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	00eb      	lsls	r3, r5, #3
 8006b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b9c:	00e2      	lsls	r2, r4, #3
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	eb14 030a 	adds.w	r3, r4, sl
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	eb45 030b 	adc.w	r3, r5, fp
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bba:	4629      	mov	r1, r5
 8006bbc:	028b      	lsls	r3, r1, #10
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	028a      	lsls	r2, r1, #10
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bce:	2200      	movs	r2, #0
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	60fa      	str	r2, [r7, #12]
 8006bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bd8:	f7f9 fb6a 	bl	80002b0 <__aeabi_uldivmod>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4613      	mov	r3, r2
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006be4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	0c1b      	lsrs	r3, r3, #16
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	3301      	adds	r3, #1
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006bfe:	e002      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c00:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3740      	adds	r7, #64	@ 0x40
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c12:	bf00      	nop
 8006c14:	40023800 	.word	0x40023800
 8006c18:	00f42400 	.word	0x00f42400
 8006c1c:	017d7840 	.word	0x017d7840

08006c20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c24:	4b03      	ldr	r3, [pc, #12]	@ (8006c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c26:	681b      	ldr	r3, [r3, #0]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20000000 	.word	0x20000000

08006c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c3c:	f7ff fff0 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8006c40:	4602      	mov	r2, r0
 8006c42:	4b05      	ldr	r3, [pc, #20]	@ (8006c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	0a9b      	lsrs	r3, r3, #10
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	4903      	ldr	r1, [pc, #12]	@ (8006c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c4e:	5ccb      	ldrb	r3, [r1, r3]
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	08018cfc 	.word	0x08018cfc

08006c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c64:	f7ff ffdc 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	0b5b      	lsrs	r3, r3, #13
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	4903      	ldr	r1, [pc, #12]	@ (8006c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c76:	5ccb      	ldrb	r3, [r1, r3]
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40023800 	.word	0x40023800
 8006c84:	08018cfc 	.word	0x08018cfc

08006c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d012      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cb0:	4b69      	ldr	r3, [pc, #420]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4a68      	ldr	r2, [pc, #416]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cb6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006cba:	6093      	str	r3, [r2, #8]
 8006cbc:	4b66      	ldr	r3, [pc, #408]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc4:	4964      	ldr	r1, [pc, #400]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d017      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ce8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf0:	4959      	ldr	r1, [pc, #356]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d00:	d101      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006d02:	2301      	movs	r3, #1
 8006d04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d017      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2c:	494a      	ldr	r1, [pc, #296]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d3c:	d101      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 808b 	beq.w	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	4a39      	ldr	r2, [pc, #228]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d78:	4b37      	ldr	r3, [pc, #220]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d80:	60bb      	str	r3, [r7, #8]
 8006d82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d84:	4b35      	ldr	r3, [pc, #212]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a34      	ldr	r2, [pc, #208]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d90:	f7fa fcfc 	bl	800178c <HAL_GetTick>
 8006d94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d98:	f7fa fcf8 	bl	800178c <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b64      	cmp	r3, #100	@ 0x64
 8006da4:	d901      	bls.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e357      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006daa:	4b2c      	ldr	r3, [pc, #176]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f0      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006db6:	4b28      	ldr	r3, [pc, #160]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d035      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d02e      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dd4:	4b20      	ldr	r3, [pc, #128]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ddc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dde:	4b1e      	ldr	r3, [pc, #120]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dea:	4b1b      	ldr	r3, [pc, #108]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	4a1a      	ldr	r2, [pc, #104]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006df4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006df6:	4a18      	ldr	r2, [pc, #96]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dfc:	4b16      	ldr	r3, [pc, #88]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d114      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e08:	f7fa fcc0 	bl	800178c <HAL_GetTick>
 8006e0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e10:	f7fa fcbc 	bl	800178c <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e319      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e26:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0ee      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e3e:	d111      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006e40:	4b05      	ldr	r3, [pc, #20]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006e4c:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e4e:	400b      	ands	r3, r1
 8006e50:	4901      	ldr	r1, [pc, #4]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
 8006e56:	e00b      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	40007000 	.word	0x40007000
 8006e60:	0ffffcff 	.word	0x0ffffcff
 8006e64:	4baa      	ldr	r3, [pc, #680]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	4aa9      	ldr	r2, [pc, #676]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e6a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006e6e:	6093      	str	r3, [r2, #8]
 8006e70:	4ba7      	ldr	r3, [pc, #668]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e7c:	49a4      	ldr	r1, [pc, #656]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d010      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e8e:	4ba0      	ldr	r3, [pc, #640]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e94:	4a9e      	ldr	r2, [pc, #632]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ea0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea8:	4999      	ldr	r1, [pc, #612]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ebc:	4b94      	ldr	r3, [pc, #592]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eca:	4991      	ldr	r1, [pc, #580]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ede:	4b8c      	ldr	r3, [pc, #560]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eec:	4988      	ldr	r1, [pc, #544]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f00:	4b83      	ldr	r3, [pc, #524]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f0e:	4980      	ldr	r1, [pc, #512]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f22:	4b7b      	ldr	r3, [pc, #492]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f28:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f30:	4977      	ldr	r1, [pc, #476]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00a      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f44:	4b72      	ldr	r3, [pc, #456]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f4a:	f023 0203 	bic.w	r2, r3, #3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	496f      	ldr	r1, [pc, #444]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f66:	4b6a      	ldr	r3, [pc, #424]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f6c:	f023 020c 	bic.w	r2, r3, #12
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f74:	4966      	ldr	r1, [pc, #408]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f88:	4b61      	ldr	r3, [pc, #388]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f96:	495e      	ldr	r1, [pc, #376]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006faa:	4b59      	ldr	r3, [pc, #356]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb8:	4955      	ldr	r1, [pc, #340]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fcc:	4b50      	ldr	r3, [pc, #320]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fda:	494d      	ldr	r1, [pc, #308]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006fee:	4b48      	ldr	r3, [pc, #288]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffc:	4944      	ldr	r1, [pc, #272]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007010:	4b3f      	ldr	r3, [pc, #252]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007016:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800701e:	493c      	ldr	r1, [pc, #240]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007032:	4b37      	ldr	r3, [pc, #220]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007038:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007040:	4933      	ldr	r1, [pc, #204]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007054:	4b2e      	ldr	r3, [pc, #184]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007062:	492b      	ldr	r1, [pc, #172]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d011      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007076:	4b26      	ldr	r3, [pc, #152]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007084:	4922      	ldr	r1, [pc, #136]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007094:	d101      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007096:	2301      	movs	r3, #1
 8007098:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070b6:	4b16      	ldr	r3, [pc, #88]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c4:	4912      	ldr	r1, [pc, #72]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80070d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e8:	4909      	ldr	r1, [pc, #36]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d006      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80d9 	beq.w	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007104:	4b02      	ldr	r3, [pc, #8]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a01      	ldr	r2, [pc, #4]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800710a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800710e:	e001      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007110:	40023800 	.word	0x40023800
 8007114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007116:	f7fa fb39 	bl	800178c <HAL_GetTick>
 800711a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800711c:	e008      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800711e:	f7fa fb35 	bl	800178c <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b64      	cmp	r3, #100	@ 0x64
 800712a:	d901      	bls.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e194      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007130:	4b6c      	ldr	r3, [pc, #432]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d021      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11d      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007150:	4b64      	ldr	r3, [pc, #400]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	f003 0303 	and.w	r3, r3, #3
 800715c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800715e:	4b61      	ldr	r3, [pc, #388]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007164:	0e1b      	lsrs	r3, r3, #24
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	019a      	lsls	r2, r3, #6
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	431a      	orrs	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	061b      	lsls	r3, r3, #24
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	071b      	lsls	r3, r3, #28
 8007184:	4957      	ldr	r1, [pc, #348]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071a0:	d00a      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d02e      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071b6:	d129      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071b8:	4b4a      	ldr	r3, [pc, #296]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071be:	0c1b      	lsrs	r3, r3, #16
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071c6:	4b47      	ldr	r3, [pc, #284]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071cc:	0f1b      	lsrs	r3, r3, #28
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	019a      	lsls	r2, r3, #6
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	061b      	lsls	r3, r3, #24
 80071e6:	431a      	orrs	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	071b      	lsls	r3, r3, #28
 80071ec:	493d      	ldr	r1, [pc, #244]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80071f4:	4b3b      	ldr	r3, [pc, #236]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071fa:	f023 021f 	bic.w	r2, r3, #31
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007202:	3b01      	subs	r3, #1
 8007204:	4937      	ldr	r1, [pc, #220]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01d      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007218:	4b32      	ldr	r3, [pc, #200]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800721a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800721e:	0e1b      	lsrs	r3, r3, #24
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007226:	4b2f      	ldr	r3, [pc, #188]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800722c:	0f1b      	lsrs	r3, r3, #28
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	019a      	lsls	r2, r3, #6
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	041b      	lsls	r3, r3, #16
 8007240:	431a      	orrs	r2, r3
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	061b      	lsls	r3, r3, #24
 8007246:	431a      	orrs	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	071b      	lsls	r3, r3, #28
 800724c:	4925      	ldr	r1, [pc, #148]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800724e:	4313      	orrs	r3, r2
 8007250:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d011      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	019a      	lsls	r2, r3, #6
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	041b      	lsls	r3, r3, #16
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	061b      	lsls	r3, r3, #24
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	071b      	lsls	r3, r3, #28
 800727c:	4919      	ldr	r1, [pc, #100]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007284:	4b17      	ldr	r3, [pc, #92]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a16      	ldr	r2, [pc, #88]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800728a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800728e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007290:	f7fa fa7c 	bl	800178c <HAL_GetTick>
 8007294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007298:	f7fa fa78 	bl	800178c <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	@ 0x64
 80072a4:	d901      	bls.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e0d7      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072aa:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	f040 80cd 	bne.w	8007458 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80072be:	4b09      	ldr	r3, [pc, #36]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a08      	ldr	r2, [pc, #32]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ca:	f7fa fa5f 	bl	800178c <HAL_GetTick>
 80072ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072d2:	f7fa fa5b 	bl	800178c <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b64      	cmp	r3, #100	@ 0x64
 80072de:	d903      	bls.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e0ba      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80072e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072e8:	4b5e      	ldr	r3, [pc, #376]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072f4:	d0ed      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d009      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007312:	2b00      	cmp	r3, #0
 8007314:	d02e      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d12a      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800731e:	4b51      	ldr	r3, [pc, #324]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800732c:	4b4d      	ldr	r3, [pc, #308]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800732e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007332:	0f1b      	lsrs	r3, r3, #28
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	019a      	lsls	r2, r3, #6
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	061b      	lsls	r3, r3, #24
 800734c:	431a      	orrs	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	071b      	lsls	r3, r3, #28
 8007352:	4944      	ldr	r1, [pc, #272]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800735a:	4b42      	ldr	r3, [pc, #264]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800735c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007360:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007368:	3b01      	subs	r3, #1
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	493d      	ldr	r1, [pc, #244]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d022      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007388:	d11d      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800738a:	4b36      	ldr	r3, [pc, #216]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007390:	0e1b      	lsrs	r3, r3, #24
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007398:	4b32      	ldr	r3, [pc, #200]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739e:	0f1b      	lsrs	r3, r3, #28
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	019a      	lsls	r2, r3, #6
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	431a      	orrs	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	061b      	lsls	r3, r3, #24
 80073b8:	431a      	orrs	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	071b      	lsls	r3, r3, #28
 80073be:	4929      	ldr	r1, [pc, #164]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d028      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073d2:	4b24      	ldr	r3, [pc, #144]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d8:	0e1b      	lsrs	r3, r3, #24
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073e0:	4b20      	ldr	r3, [pc, #128]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e6:	0c1b      	lsrs	r3, r3, #16
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	019a      	lsls	r2, r3, #6
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	041b      	lsls	r3, r3, #16
 80073f8:	431a      	orrs	r2, r3
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	061b      	lsls	r3, r3, #24
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	071b      	lsls	r3, r3, #28
 8007406:	4917      	ldr	r1, [pc, #92]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007408:	4313      	orrs	r3, r2
 800740a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800740e:	4b15      	ldr	r3, [pc, #84]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007414:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741c:	4911      	ldr	r1, [pc, #68]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007424:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800742a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800742e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007430:	f7fa f9ac 	bl	800178c <HAL_GetTick>
 8007434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007436:	e008      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007438:	f7fa f9a8 	bl	800178c <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b64      	cmp	r3, #100	@ 0x64
 8007444:	d901      	bls.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e007      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800744a:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007456:	d1ef      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3720      	adds	r7, #32
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40023800 	.word	0x40023800

08007468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e040      	b.n	80074fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7f9 fe74 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2224      	movs	r2, #36	@ 0x24
 8007494:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fece 	bl	8008250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fc67 	bl	8007d88 <UART_SetConfig>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e01b      	b.n	80074fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 ff4d 	bl	8008394 <UART_CheckIdleState>
 80074fa:	4603      	mov	r3, r0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	@ 0x28
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007518:	2b20      	cmp	r3, #32
 800751a:	d177      	bne.n	800760c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_UART_Transmit+0x24>
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e070      	b.n	800760e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2221      	movs	r2, #33	@ 0x21
 8007538:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753a:	f7fa f927 	bl	800178c <HAL_GetTick>
 800753e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	88fa      	ldrh	r2, [r7, #6]
 8007544:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007558:	d108      	bne.n	800756c <HAL_UART_Transmit+0x68>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e003      	b.n	8007574 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007574:	e02f      	b.n	80075d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2200      	movs	r2, #0
 800757e:	2180      	movs	r1, #128	@ 0x80
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 ff5e 	bl	8008442 <UART_WaitOnFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e03b      	b.n	800760e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	3302      	adds	r3, #2
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	e007      	b.n	80075c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	3301      	adds	r3, #1
 80075c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1c9      	bne.n	8007576 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2200      	movs	r2, #0
 80075ea:	2140      	movs	r1, #64	@ 0x40
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 ff28 	bl	8008442 <UART_WaitOnFlagUntilTimeout>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e005      	b.n	800760e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	e000      	b.n	800760e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800760c:	2302      	movs	r3, #2
  }
}
 800760e:	4618      	mov	r0, r3
 8007610:	3720      	adds	r7, #32
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007618:	b480      	push	{r7}
 800761a:	b08b      	sub	sp, #44	@ 0x2c
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800762a:	2b20      	cmp	r3, #32
 800762c:	d147      	bne.n	80076be <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_UART_Transmit_IT+0x22>
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e040      	b.n	80076c0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	88fa      	ldrh	r2, [r7, #6]
 8007650:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2221      	movs	r2, #33	@ 0x21
 8007666:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007670:	d107      	bne.n	8007682 <HAL_UART_Transmit_IT+0x6a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a13      	ldr	r2, [pc, #76]	@ (80076cc <HAL_UART_Transmit_IT+0xb4>)
 800767e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007680:	e002      	b.n	8007688 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4a12      	ldr	r2, [pc, #72]	@ (80076d0 <HAL_UART_Transmit_IT+0xb8>)
 8007686:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	613b      	str	r3, [r7, #16]
   return(result);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	623b      	str	r3, [r7, #32]
 80076a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	69f9      	ldr	r1, [r7, #28]
 80076ac:	6a3a      	ldr	r2, [r7, #32]
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e6      	bne.n	8007688 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e000      	b.n	80076c0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80076be:	2302      	movs	r3, #2
  }
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	372c      	adds	r7, #44	@ 0x2c
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	08008a99 	.word	0x08008a99
 80076d0:	080089e3 	.word	0x080089e3

080076d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	@ 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d132      	bne.n	8007752 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_UART_Receive_DMA+0x24>
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e02b      	b.n	8007754 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d018      	beq.n	8007742 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	613b      	str	r3, [r7, #16]
   return(result);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	623b      	str	r3, [r7, #32]
 8007730:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	69f9      	ldr	r1, [r7, #28]
 8007734:	6a3a      	ldr	r2, [r7, #32]
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	61bb      	str	r3, [r7, #24]
   return(result);
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	461a      	mov	r2, r3
 8007746:	68b9      	ldr	r1, [r7, #8]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fee7 	bl	800851c <UART_Start_Receive_DMA>
 800774e:	4603      	mov	r3, r0
 8007750:	e000      	b.n	8007754 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007752:	2302      	movs	r3, #2
  }
}
 8007754:	4618      	mov	r0, r3
 8007756:	3728      	adds	r7, #40	@ 0x28
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b0ba      	sub	sp, #232	@ 0xe8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007782:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007786:	f640 030f 	movw	r3, #2063	@ 0x80f
 800778a:	4013      	ands	r3, r2
 800778c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d115      	bne.n	80077c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d009      	beq.n	80077c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 82b1 	beq.w	8007d1c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
      }
      return;
 80077c2:	e2ab      	b.n	8007d1c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 8117 	beq.w	80079fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80077de:	4b85      	ldr	r3, [pc, #532]	@ (80079f4 <HAL_UART_IRQHandler+0x298>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 810a 	beq.w	80079fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d011      	beq.n	8007818 <HAL_UART_IRQHandler+0xbc>
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2201      	movs	r2, #1
 8007806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800780e:	f043 0201 	orr.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d011      	beq.n	8007848 <HAL_UART_IRQHandler+0xec>
 8007824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2202      	movs	r2, #2
 8007836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800783e:	f043 0204 	orr.w	r2, r3, #4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d011      	beq.n	8007878 <HAL_UART_IRQHandler+0x11c>
 8007854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2204      	movs	r2, #4
 8007866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800786e:	f043 0202 	orr.w	r2, r3, #2
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b00      	cmp	r3, #0
 8007882:	d017      	beq.n	80078b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007894:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2208      	movs	r2, #8
 80078a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078aa:	f043 0208 	orr.w	r2, r3, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d012      	beq.n	80078e6 <HAL_UART_IRQHandler+0x18a>
 80078c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00c      	beq.n	80078e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078dc:	f043 0220 	orr.w	r2, r3, #32
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 8217 	beq.w	8007d20 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00d      	beq.n	800791a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d007      	beq.n	800791a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800792e:	2b40      	cmp	r3, #64	@ 0x40
 8007930:	d005      	beq.n	800793e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007936:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800793a:	2b00      	cmp	r3, #0
 800793c:	d04f      	beq.n	80079de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 feb2 	bl	80086a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	d141      	bne.n	80079d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800796c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3308      	adds	r3, #8
 800797a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800797e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800798a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1d9      	bne.n	8007952 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d013      	beq.n	80079ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079aa:	4a13      	ldr	r2, [pc, #76]	@ (80079f8 <HAL_UART_IRQHandler+0x29c>)
 80079ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fa fbb4 	bl	8002120 <HAL_DMA_Abort_IT>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d017      	beq.n	80079ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079cc:	e00f      	b.n	80079ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f9c4 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	e00b      	b.n	80079ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f9c0 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079dc:	e007      	b.n	80079ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f9bc 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80079ec:	e198      	b.n	8007d20 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ee:	bf00      	nop
    return;
 80079f0:	e196      	b.n	8007d20 <HAL_UART_IRQHandler+0x5c4>
 80079f2:	bf00      	nop
 80079f4:	04000120 	.word	0x04000120
 80079f8:	080089bf 	.word	0x080089bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	f040 8166 	bne.w	8007cd2 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a0a:	f003 0310 	and.w	r3, r3, #16
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 815f 	beq.w	8007cd2 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8158 	beq.w	8007cd2 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2210      	movs	r2, #16
 8007a28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a34:	2b40      	cmp	r3, #64	@ 0x40
 8007a36:	f040 80d0 	bne.w	8007bda <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80ab 	beq.w	8007ba6 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	f080 80a3 	bcs.w	8007ba6 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a74:	f000 8086 	beq.w	8007b84 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007aa6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1da      	bne.n	8007a78 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ad4:	f023 0301 	bic.w	r3, r3, #1
 8007ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ae6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007aea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e1      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e3      	bne.n	8007afe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b54:	f023 0310 	bic.w	r3, r3, #16
 8007b58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e4      	bne.n	8007b44 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fa fa5e 	bl	8002040 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f8e6 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007ba4:	e0be      	b.n	8007d24 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	f040 80b7 	bne.w	8007d24 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bc0:	f040 80b0 	bne.w	8007d24 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f8cc 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
      return;
 8007bd8:	e0a4      	b.n	8007d24 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8096 	beq.w	8007d28 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8007bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 8091 	beq.w	8007d28 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e4      	bne.n	8007c06 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3308      	adds	r3, #8
 8007c42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	f023 0301 	bic.w	r3, r3, #1
 8007c52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c60:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e3      	bne.n	8007c3c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	69b9      	ldr	r1, [r7, #24]
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e4      	bne.n	8007c88 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f850 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cd0:	e02a      	b.n	8007d28 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00e      	beq.n	8007cfc <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01c      	beq.n	8007d2c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
    }
    return;
 8007cfa:	e017      	b.n	8007d2c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d012      	beq.n	8007d2e <HAL_UART_IRQHandler+0x5d2>
 8007d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00c      	beq.n	8007d2e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 ff1f 	bl	8008b58 <UART_EndTransmit_IT>
    return;
 8007d1a:	e008      	b.n	8007d2e <HAL_UART_IRQHandler+0x5d2>
      return;
 8007d1c:	bf00      	nop
 8007d1e:	e006      	b.n	8007d2e <HAL_UART_IRQHandler+0x5d2>
    return;
 8007d20:	bf00      	nop
 8007d22:	e004      	b.n	8007d2e <HAL_UART_IRQHandler+0x5d2>
      return;
 8007d24:	bf00      	nop
 8007d26:	e002      	b.n	8007d2e <HAL_UART_IRQHandler+0x5d2>
      return;
 8007d28:	bf00      	nop
 8007d2a:	e000      	b.n	8007d2e <HAL_UART_IRQHandler+0x5d2>
    return;
 8007d2c:	bf00      	nop
  }

}
 8007d2e:	37e8      	adds	r7, #232	@ 0xe8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4ba6      	ldr	r3, [pc, #664]	@ (800804c <UART_SetConfig+0x2c4>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	6979      	ldr	r1, [r7, #20]
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a94      	ldr	r2, [pc, #592]	@ (8008050 <UART_SetConfig+0x2c8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d120      	bne.n	8007e46 <UART_SetConfig+0xbe>
 8007e04:	4b93      	ldr	r3, [pc, #588]	@ (8008054 <UART_SetConfig+0x2cc>)
 8007e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d816      	bhi.n	8007e40 <UART_SetConfig+0xb8>
 8007e12:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <UART_SetConfig+0x90>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e35 	.word	0x08007e35
 8007e20:	08007e2f 	.word	0x08007e2f
 8007e24:	08007e3b 	.word	0x08007e3b
 8007e28:	2301      	movs	r3, #1
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e150      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e14d      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e34:	2304      	movs	r3, #4
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e14a      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	77fb      	strb	r3, [r7, #31]
 8007e3e:	e147      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e40:	2310      	movs	r3, #16
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e144      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a83      	ldr	r2, [pc, #524]	@ (8008058 <UART_SetConfig+0x2d0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d132      	bne.n	8007eb6 <UART_SetConfig+0x12e>
 8007e50:	4b80      	ldr	r3, [pc, #512]	@ (8008054 <UART_SetConfig+0x2cc>)
 8007e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e56:	f003 030c 	and.w	r3, r3, #12
 8007e5a:	2b0c      	cmp	r3, #12
 8007e5c:	d828      	bhi.n	8007eb0 <UART_SetConfig+0x128>
 8007e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <UART_SetConfig+0xdc>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e99 	.word	0x08007e99
 8007e68:	08007eb1 	.word	0x08007eb1
 8007e6c:	08007eb1 	.word	0x08007eb1
 8007e70:	08007eb1 	.word	0x08007eb1
 8007e74:	08007ea5 	.word	0x08007ea5
 8007e78:	08007eb1 	.word	0x08007eb1
 8007e7c:	08007eb1 	.word	0x08007eb1
 8007e80:	08007eb1 	.word	0x08007eb1
 8007e84:	08007e9f 	.word	0x08007e9f
 8007e88:	08007eb1 	.word	0x08007eb1
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb1 	.word	0x08007eb1
 8007e94:	08007eab 	.word	0x08007eab
 8007e98:	2300      	movs	r3, #0
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e118      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e115      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	77fb      	strb	r3, [r7, #31]
 8007ea8:	e112      	b.n	80080d0 <UART_SetConfig+0x348>
 8007eaa:	2308      	movs	r3, #8
 8007eac:	77fb      	strb	r3, [r7, #31]
 8007eae:	e10f      	b.n	80080d0 <UART_SetConfig+0x348>
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	77fb      	strb	r3, [r7, #31]
 8007eb4:	e10c      	b.n	80080d0 <UART_SetConfig+0x348>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a68      	ldr	r2, [pc, #416]	@ (800805c <UART_SetConfig+0x2d4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d120      	bne.n	8007f02 <UART_SetConfig+0x17a>
 8007ec0:	4b64      	ldr	r3, [pc, #400]	@ (8008054 <UART_SetConfig+0x2cc>)
 8007ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007eca:	2b30      	cmp	r3, #48	@ 0x30
 8007ecc:	d013      	beq.n	8007ef6 <UART_SetConfig+0x16e>
 8007ece:	2b30      	cmp	r3, #48	@ 0x30
 8007ed0:	d814      	bhi.n	8007efc <UART_SetConfig+0x174>
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d009      	beq.n	8007eea <UART_SetConfig+0x162>
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d810      	bhi.n	8007efc <UART_SetConfig+0x174>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <UART_SetConfig+0x15c>
 8007ede:	2b10      	cmp	r3, #16
 8007ee0:	d006      	beq.n	8007ef0 <UART_SetConfig+0x168>
 8007ee2:	e00b      	b.n	8007efc <UART_SetConfig+0x174>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	77fb      	strb	r3, [r7, #31]
 8007ee8:	e0f2      	b.n	80080d0 <UART_SetConfig+0x348>
 8007eea:	2302      	movs	r3, #2
 8007eec:	77fb      	strb	r3, [r7, #31]
 8007eee:	e0ef      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	77fb      	strb	r3, [r7, #31]
 8007ef4:	e0ec      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ef6:	2308      	movs	r3, #8
 8007ef8:	77fb      	strb	r3, [r7, #31]
 8007efa:	e0e9      	b.n	80080d0 <UART_SetConfig+0x348>
 8007efc:	2310      	movs	r3, #16
 8007efe:	77fb      	strb	r3, [r7, #31]
 8007f00:	e0e6      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a56      	ldr	r2, [pc, #344]	@ (8008060 <UART_SetConfig+0x2d8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d120      	bne.n	8007f4e <UART_SetConfig+0x1c6>
 8007f0c:	4b51      	ldr	r3, [pc, #324]	@ (8008054 <UART_SetConfig+0x2cc>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f18:	d013      	beq.n	8007f42 <UART_SetConfig+0x1ba>
 8007f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f1c:	d814      	bhi.n	8007f48 <UART_SetConfig+0x1c0>
 8007f1e:	2b80      	cmp	r3, #128	@ 0x80
 8007f20:	d009      	beq.n	8007f36 <UART_SetConfig+0x1ae>
 8007f22:	2b80      	cmp	r3, #128	@ 0x80
 8007f24:	d810      	bhi.n	8007f48 <UART_SetConfig+0x1c0>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <UART_SetConfig+0x1a8>
 8007f2a:	2b40      	cmp	r3, #64	@ 0x40
 8007f2c:	d006      	beq.n	8007f3c <UART_SetConfig+0x1b4>
 8007f2e:	e00b      	b.n	8007f48 <UART_SetConfig+0x1c0>
 8007f30:	2300      	movs	r3, #0
 8007f32:	77fb      	strb	r3, [r7, #31]
 8007f34:	e0cc      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f36:	2302      	movs	r3, #2
 8007f38:	77fb      	strb	r3, [r7, #31]
 8007f3a:	e0c9      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	77fb      	strb	r3, [r7, #31]
 8007f40:	e0c6      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f42:	2308      	movs	r3, #8
 8007f44:	77fb      	strb	r3, [r7, #31]
 8007f46:	e0c3      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	77fb      	strb	r3, [r7, #31]
 8007f4c:	e0c0      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a44      	ldr	r2, [pc, #272]	@ (8008064 <UART_SetConfig+0x2dc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d125      	bne.n	8007fa4 <UART_SetConfig+0x21c>
 8007f58:	4b3e      	ldr	r3, [pc, #248]	@ (8008054 <UART_SetConfig+0x2cc>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f66:	d017      	beq.n	8007f98 <UART_SetConfig+0x210>
 8007f68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f6c:	d817      	bhi.n	8007f9e <UART_SetConfig+0x216>
 8007f6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f72:	d00b      	beq.n	8007f8c <UART_SetConfig+0x204>
 8007f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f78:	d811      	bhi.n	8007f9e <UART_SetConfig+0x216>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <UART_SetConfig+0x1fe>
 8007f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f82:	d006      	beq.n	8007f92 <UART_SetConfig+0x20a>
 8007f84:	e00b      	b.n	8007f9e <UART_SetConfig+0x216>
 8007f86:	2300      	movs	r3, #0
 8007f88:	77fb      	strb	r3, [r7, #31]
 8007f8a:	e0a1      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e09e      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f92:	2304      	movs	r3, #4
 8007f94:	77fb      	strb	r3, [r7, #31]
 8007f96:	e09b      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e098      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e095      	b.n	80080d0 <UART_SetConfig+0x348>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8008068 <UART_SetConfig+0x2e0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d125      	bne.n	8007ffa <UART_SetConfig+0x272>
 8007fae:	4b29      	ldr	r3, [pc, #164]	@ (8008054 <UART_SetConfig+0x2cc>)
 8007fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fbc:	d017      	beq.n	8007fee <UART_SetConfig+0x266>
 8007fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fc2:	d817      	bhi.n	8007ff4 <UART_SetConfig+0x26c>
 8007fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fc8:	d00b      	beq.n	8007fe2 <UART_SetConfig+0x25a>
 8007fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fce:	d811      	bhi.n	8007ff4 <UART_SetConfig+0x26c>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <UART_SetConfig+0x254>
 8007fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd8:	d006      	beq.n	8007fe8 <UART_SetConfig+0x260>
 8007fda:	e00b      	b.n	8007ff4 <UART_SetConfig+0x26c>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	77fb      	strb	r3, [r7, #31]
 8007fe0:	e076      	b.n	80080d0 <UART_SetConfig+0x348>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e073      	b.n	80080d0 <UART_SetConfig+0x348>
 8007fe8:	2304      	movs	r3, #4
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e070      	b.n	80080d0 <UART_SetConfig+0x348>
 8007fee:	2308      	movs	r3, #8
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e06d      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e06a      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800806c <UART_SetConfig+0x2e4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d138      	bne.n	8008076 <UART_SetConfig+0x2ee>
 8008004:	4b13      	ldr	r3, [pc, #76]	@ (8008054 <UART_SetConfig+0x2cc>)
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800800a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800800e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008012:	d017      	beq.n	8008044 <UART_SetConfig+0x2bc>
 8008014:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008018:	d82a      	bhi.n	8008070 <UART_SetConfig+0x2e8>
 800801a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800801e:	d00b      	beq.n	8008038 <UART_SetConfig+0x2b0>
 8008020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008024:	d824      	bhi.n	8008070 <UART_SetConfig+0x2e8>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <UART_SetConfig+0x2aa>
 800802a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800802e:	d006      	beq.n	800803e <UART_SetConfig+0x2b6>
 8008030:	e01e      	b.n	8008070 <UART_SetConfig+0x2e8>
 8008032:	2300      	movs	r3, #0
 8008034:	77fb      	strb	r3, [r7, #31]
 8008036:	e04b      	b.n	80080d0 <UART_SetConfig+0x348>
 8008038:	2302      	movs	r3, #2
 800803a:	77fb      	strb	r3, [r7, #31]
 800803c:	e048      	b.n	80080d0 <UART_SetConfig+0x348>
 800803e:	2304      	movs	r3, #4
 8008040:	77fb      	strb	r3, [r7, #31]
 8008042:	e045      	b.n	80080d0 <UART_SetConfig+0x348>
 8008044:	2308      	movs	r3, #8
 8008046:	77fb      	strb	r3, [r7, #31]
 8008048:	e042      	b.n	80080d0 <UART_SetConfig+0x348>
 800804a:	bf00      	nop
 800804c:	efff69f3 	.word	0xefff69f3
 8008050:	40011000 	.word	0x40011000
 8008054:	40023800 	.word	0x40023800
 8008058:	40004400 	.word	0x40004400
 800805c:	40004800 	.word	0x40004800
 8008060:	40004c00 	.word	0x40004c00
 8008064:	40005000 	.word	0x40005000
 8008068:	40011400 	.word	0x40011400
 800806c:	40007800 	.word	0x40007800
 8008070:	2310      	movs	r3, #16
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e02c      	b.n	80080d0 <UART_SetConfig+0x348>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a72      	ldr	r2, [pc, #456]	@ (8008244 <UART_SetConfig+0x4bc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d125      	bne.n	80080cc <UART_SetConfig+0x344>
 8008080:	4b71      	ldr	r3, [pc, #452]	@ (8008248 <UART_SetConfig+0x4c0>)
 8008082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008086:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800808a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800808e:	d017      	beq.n	80080c0 <UART_SetConfig+0x338>
 8008090:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008094:	d817      	bhi.n	80080c6 <UART_SetConfig+0x33e>
 8008096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800809a:	d00b      	beq.n	80080b4 <UART_SetConfig+0x32c>
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a0:	d811      	bhi.n	80080c6 <UART_SetConfig+0x33e>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <UART_SetConfig+0x326>
 80080a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080aa:	d006      	beq.n	80080ba <UART_SetConfig+0x332>
 80080ac:	e00b      	b.n	80080c6 <UART_SetConfig+0x33e>
 80080ae:	2300      	movs	r3, #0
 80080b0:	77fb      	strb	r3, [r7, #31]
 80080b2:	e00d      	b.n	80080d0 <UART_SetConfig+0x348>
 80080b4:	2302      	movs	r3, #2
 80080b6:	77fb      	strb	r3, [r7, #31]
 80080b8:	e00a      	b.n	80080d0 <UART_SetConfig+0x348>
 80080ba:	2304      	movs	r3, #4
 80080bc:	77fb      	strb	r3, [r7, #31]
 80080be:	e007      	b.n	80080d0 <UART_SetConfig+0x348>
 80080c0:	2308      	movs	r3, #8
 80080c2:	77fb      	strb	r3, [r7, #31]
 80080c4:	e004      	b.n	80080d0 <UART_SetConfig+0x348>
 80080c6:	2310      	movs	r3, #16
 80080c8:	77fb      	strb	r3, [r7, #31]
 80080ca:	e001      	b.n	80080d0 <UART_SetConfig+0x348>
 80080cc:	2310      	movs	r3, #16
 80080ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080d8:	d15b      	bne.n	8008192 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80080da:	7ffb      	ldrb	r3, [r7, #31]
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d828      	bhi.n	8008132 <UART_SetConfig+0x3aa>
 80080e0:	a201      	add	r2, pc, #4	@ (adr r2, 80080e8 <UART_SetConfig+0x360>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	0800810d 	.word	0x0800810d
 80080ec:	08008115 	.word	0x08008115
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	08008133 	.word	0x08008133
 80080f8:	08008123 	.word	0x08008123
 80080fc:	08008133 	.word	0x08008133
 8008100:	08008133 	.word	0x08008133
 8008104:	08008133 	.word	0x08008133
 8008108:	0800812b 	.word	0x0800812b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800810c:	f7fe fd94 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 8008110:	61b8      	str	r0, [r7, #24]
        break;
 8008112:	e013      	b.n	800813c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008114:	f7fe fda4 	bl	8006c60 <HAL_RCC_GetPCLK2Freq>
 8008118:	61b8      	str	r0, [r7, #24]
        break;
 800811a:	e00f      	b.n	800813c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800811c:	4b4b      	ldr	r3, [pc, #300]	@ (800824c <UART_SetConfig+0x4c4>)
 800811e:	61bb      	str	r3, [r7, #24]
        break;
 8008120:	e00c      	b.n	800813c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008122:	f7fe fcb7 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8008126:	61b8      	str	r0, [r7, #24]
        break;
 8008128:	e008      	b.n	800813c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800812a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800812e:	61bb      	str	r3, [r7, #24]
        break;
 8008130:	e004      	b.n	800813c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	77bb      	strb	r3, [r7, #30]
        break;
 800813a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d074      	beq.n	800822c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	005a      	lsls	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	fbb2 f3f3 	udiv	r3, r2, r3
 8008156:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2b0f      	cmp	r3, #15
 800815c:	d916      	bls.n	800818c <UART_SetConfig+0x404>
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008164:	d212      	bcs.n	800818c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f023 030f 	bic.w	r3, r3, #15
 800816e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	b29b      	uxth	r3, r3
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	b29a      	uxth	r2, r3
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	4313      	orrs	r3, r2
 8008180:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	89fa      	ldrh	r2, [r7, #14]
 8008188:	60da      	str	r2, [r3, #12]
 800818a:	e04f      	b.n	800822c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	77bb      	strb	r3, [r7, #30]
 8008190:	e04c      	b.n	800822c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008192:	7ffb      	ldrb	r3, [r7, #31]
 8008194:	2b08      	cmp	r3, #8
 8008196:	d828      	bhi.n	80081ea <UART_SetConfig+0x462>
 8008198:	a201      	add	r2, pc, #4	@ (adr r2, 80081a0 <UART_SetConfig+0x418>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	080081eb 	.word	0x080081eb
 80081b0:	080081db 	.word	0x080081db
 80081b4:	080081eb 	.word	0x080081eb
 80081b8:	080081eb 	.word	0x080081eb
 80081bc:	080081eb 	.word	0x080081eb
 80081c0:	080081e3 	.word	0x080081e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c4:	f7fe fd38 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 80081c8:	61b8      	str	r0, [r7, #24]
        break;
 80081ca:	e013      	b.n	80081f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081cc:	f7fe fd48 	bl	8006c60 <HAL_RCC_GetPCLK2Freq>
 80081d0:	61b8      	str	r0, [r7, #24]
        break;
 80081d2:	e00f      	b.n	80081f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d4:	4b1d      	ldr	r3, [pc, #116]	@ (800824c <UART_SetConfig+0x4c4>)
 80081d6:	61bb      	str	r3, [r7, #24]
        break;
 80081d8:	e00c      	b.n	80081f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081da:	f7fe fc5b 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 80081de:	61b8      	str	r0, [r7, #24]
        break;
 80081e0:	e008      	b.n	80081f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e6:	61bb      	str	r3, [r7, #24]
        break;
 80081e8:	e004      	b.n	80081f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	77bb      	strb	r3, [r7, #30]
        break;
 80081f2:	bf00      	nop
    }

    if (pclk != 0U)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d018      	beq.n	800822c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	085a      	lsrs	r2, r3, #1
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	441a      	add	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b0f      	cmp	r3, #15
 8008212:	d909      	bls.n	8008228 <UART_SetConfig+0x4a0>
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800821a:	d205      	bcs.n	8008228 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	e001      	b.n	800822c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008238:	7fbb      	ldrb	r3, [r7, #30]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40007c00 	.word	0x40007c00
 8008248:	40023800 	.word	0x40023800
 800824c:	00f42400 	.word	0x00f42400

08008250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a0:	f003 0302 	and.w	r3, r3, #2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	430a      	orrs	r2, r1
 8008322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01a      	beq.n	8008366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800834e:	d10a      	bne.n	8008366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	605a      	str	r2, [r3, #4]
  }
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08c      	sub	sp, #48	@ 0x30
 8008398:	af02      	add	r7, sp, #8
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083a4:	f7f9 f9f2 	bl	800178c <HAL_GetTick>
 80083a8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d12e      	bne.n	8008416 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	2200      	movs	r2, #0
 80083c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f83b 	bl	8008442 <UART_WaitOnFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d021      	beq.n	8008416 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083e6:	623b      	str	r3, [r7, #32]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	69b9      	ldr	r1, [r7, #24]
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	617b      	str	r3, [r7, #20]
   return(result);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e6      	bne.n	80083d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e011      	b.n	800843a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3728      	adds	r7, #40	@ 0x28
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	603b      	str	r3, [r7, #0]
 800844e:	4613      	mov	r3, r2
 8008450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008452:	e04f      	b.n	80084f4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800845a:	d04b      	beq.n	80084f4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800845c:	f7f9 f996 	bl	800178c <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <UART_WaitOnFlagUntilTimeout+0x30>
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e04e      	b.n	8008514 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b00      	cmp	r3, #0
 8008482:	d037      	beq.n	80084f4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b80      	cmp	r3, #128	@ 0x80
 8008488:	d034      	beq.n	80084f4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b40      	cmp	r3, #64	@ 0x40
 800848e:	d031      	beq.n	80084f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	2b08      	cmp	r3, #8
 800849c:	d110      	bne.n	80084c0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2208      	movs	r2, #8
 80084a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 f8fe 	bl	80086a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2208      	movs	r2, #8
 80084b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e029      	b.n	8008514 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084ce:	d111      	bne.n	80084f4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f8e4 	bl	80086a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e00f      	b.n	8008514 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69da      	ldr	r2, [r3, #28]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4013      	ands	r3, r2
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	429a      	cmp	r2, r3
 8008502:	bf0c      	ite	eq
 8008504:	2301      	moveq	r3, #1
 8008506:	2300      	movne	r3, #0
 8008508:	b2db      	uxtb	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	429a      	cmp	r2, r3
 8008510:	d0a0      	beq.n	8008454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b096      	sub	sp, #88	@ 0x58
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4613      	mov	r3, r2
 8008528:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	88fa      	ldrh	r2, [r7, #6]
 8008534:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2222      	movs	r2, #34	@ 0x22
 8008544:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800854c:	2b00      	cmp	r3, #0
 800854e:	d028      	beq.n	80085a2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008554:	4a3e      	ldr	r2, [pc, #248]	@ (8008650 <UART_Start_Receive_DMA+0x134>)
 8008556:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800855c:	4a3d      	ldr	r2, [pc, #244]	@ (8008654 <UART_Start_Receive_DMA+0x138>)
 800855e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008564:	4a3c      	ldr	r2, [pc, #240]	@ (8008658 <UART_Start_Receive_DMA+0x13c>)
 8008566:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800856c:	2200      	movs	r2, #0
 800856e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3324      	adds	r3, #36	@ 0x24
 800857a:	4619      	mov	r1, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008580:	461a      	mov	r2, r3
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	f7f9 fcfc 	bl	8001f80 <HAL_DMA_Start_IT>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2210      	movs	r2, #16
 8008592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2220      	movs	r2, #32
 800859a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e051      	b.n	8008646 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d018      	beq.n	80085dc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085be:	657b      	str	r3, [r7, #84]	@ 0x54
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80085d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e6      	bne.n	80085aa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3308      	adds	r3, #8
 80085fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80085fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80085fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e5      	bne.n	80085dc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3308      	adds	r3, #8
 8008616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	613b      	str	r3, [r7, #16]
   return(result);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3308      	adds	r3, #8
 800862e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008630:	623a      	str	r2, [r7, #32]
 8008632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	69f9      	ldr	r1, [r7, #28]
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	61bb      	str	r3, [r7, #24]
   return(result);
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3758      	adds	r7, #88	@ 0x58
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	08008771 	.word	0x08008771
 8008654:	080088cf 	.word	0x080088cf
 8008658:	08008941 	.word	0x08008941

0800865c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b089      	sub	sp, #36	@ 0x24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	60bb      	str	r3, [r7, #8]
   return(result);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	61bb      	str	r3, [r7, #24]
 8008684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6979      	ldr	r1, [r7, #20]
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	613b      	str	r3, [r7, #16]
   return(result);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e6      	bne.n	8008664 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800869c:	bf00      	nop
 800869e:	3724      	adds	r7, #36	@ 0x24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b095      	sub	sp, #84	@ 0x54
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80086d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e6      	bne.n	80086b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3308      	adds	r3, #8
 80086e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	f023 0301 	bic.w	r3, r3, #1
 80086f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008704:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e5      	bne.n	80086e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800871a:	2b01      	cmp	r3, #1
 800871c:	d118      	bne.n	8008750 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	60bb      	str	r3, [r7, #8]
   return(result);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f023 0310 	bic.w	r3, r3, #16
 8008732:	647b      	str	r3, [r7, #68]	@ 0x44
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6979      	ldr	r1, [r7, #20]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	613b      	str	r3, [r7, #16]
   return(result);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e6      	bne.n	800871e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008764:	bf00      	nop
 8008766:	3754      	adds	r7, #84	@ 0x54
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b09c      	sub	sp, #112	@ 0x70
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008786:	d071      	beq.n	800886c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800878a:	2200      	movs	r2, #0
 800878c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800879e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80087b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80087b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e6      	bne.n	8008790 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f023 0301 	bic.w	r3, r3, #1
 80087d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80087da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80087e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e5      	bne.n	80087c2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	61fb      	str	r3, [r7, #28]
   return(result);
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800880c:	663b      	str	r3, [r7, #96]	@ 0x60
 800880e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800881c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e5      	bne.n	80087f6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800882a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008836:	2b01      	cmp	r3, #1
 8008838:	d118      	bne.n	800886c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	60bb      	str	r3, [r7, #8]
   return(result);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f023 0310 	bic.w	r3, r3, #16
 800884e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6979      	ldr	r1, [r7, #20]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	613b      	str	r3, [r7, #16]
   return(result);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e6      	bne.n	800883a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800886c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800886e:	2200      	movs	r2, #0
 8008870:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008876:	2b01      	cmp	r3, #1
 8008878:	d122      	bne.n	80088c0 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800887a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800887c:	2200      	movs	r2, #0
 800887e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800888c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800888e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008892:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8008896:	429a      	cmp	r2, r3
 8008898:	d204      	bcs.n	80088a4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800889a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800889c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80088a0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80088aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	4619      	mov	r1, r3
 80088b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088ba:	f7ff fa59 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088be:	e002      	b.n	80088c6 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 80088c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088c2:	f00b fe3d 	bl	8014540 <HAL_UART_RxCpltCallback>
}
 80088c6:	bf00      	nop
 80088c8:	3770      	adds	r7, #112	@ 0x70
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088da:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d123      	bne.n	8008932 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008908:	897a      	ldrh	r2, [r7, #10]
 800890a:	429a      	cmp	r2, r3
 800890c:	d803      	bhi.n	8008916 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	897a      	ldrh	r2, [r7, #10]
 8008912:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008922:	b29b      	uxth	r3, r3
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	4619      	mov	r1, r3
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff fa20 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008930:	e002      	b.n	8008938 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fa08 	bl	8007d48 <HAL_UART_RxHalfCpltCallback>
}
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008952:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008966:	2b80      	cmp	r3, #128	@ 0x80
 8008968:	d109      	bne.n	800897e <UART_DMAError+0x3e>
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b21      	cmp	r3, #33	@ 0x21
 800896e:	d106      	bne.n	800897e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2200      	movs	r2, #0
 8008974:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008978:	6978      	ldr	r0, [r7, #20]
 800897a:	f7ff fe6f 	bl	800865c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008988:	2b40      	cmp	r3, #64	@ 0x40
 800898a:	d109      	bne.n	80089a0 <UART_DMAError+0x60>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b22      	cmp	r3, #34	@ 0x22
 8008990:	d106      	bne.n	80089a0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800899a:	6978      	ldr	r0, [r7, #20]
 800899c:	f7ff fe84 	bl	80086a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089a6:	f043 0210 	orr.w	r2, r3, #16
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089b0:	6978      	ldr	r0, [r7, #20]
 80089b2:	f7ff f9d3 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b6:	bf00      	nop
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7ff f9c1 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b08f      	sub	sp, #60	@ 0x3c
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089ee:	2b21      	cmp	r3, #33	@ 0x21
 80089f0:	d14c      	bne.n	8008a8c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d132      	bne.n	8008a64 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6979      	ldr	r1, [r7, #20]
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e6      	bne.n	8008a30 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008a62:	e013      	b.n	8008a8c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8008a8c:	bf00      	nop
 8008a8e:	373c      	adds	r7, #60	@ 0x3c
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b091      	sub	sp, #68	@ 0x44
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aa4:	2b21      	cmp	r3, #33	@ 0x21
 8008aa6:	d151      	bne.n	8008b4c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d132      	bne.n	8008b1a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e6      	bne.n	8008ab4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	461a      	mov	r2, r3
 8008b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b04:	61fb      	str	r3, [r7, #28]
 8008b06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	69b9      	ldr	r1, [r7, #24]
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	e841 2300 	strex	r3, r2, [r1]
 8008b10:	617b      	str	r3, [r7, #20]
   return(result);
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e6      	bne.n	8008ae6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008b18:	e018      	b.n	8008b4c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b2e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b34:	1c9a      	adds	r2, r3, #2
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8008b4c:	bf00      	nop
 8008b4e:	3744      	adds	r7, #68	@ 0x44
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	61bb      	str	r3, [r7, #24]
 8008b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6979      	ldr	r1, [r7, #20]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e6      	bne.n	8008b60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff f8c8 	bl	8007d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba4:	bf00      	nop
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8008bb2:	4b87      	ldr	r3, [pc, #540]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008bb4:	220a      	movs	r2, #10
 8008bb6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8008bb8:	4b85      	ldr	r3, [pc, #532]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8008bbe:	4b84      	ldr	r3, [pc, #528]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8008bc4:	4b82      	ldr	r3, [pc, #520]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008bc6:	2264      	movs	r2, #100	@ 0x64
 8008bc8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008bca:	4b82      	ldr	r3, [pc, #520]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008bcc:	22ff      	movs	r2, #255	@ 0xff
 8008bce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008bd0:	4b80      	ldr	r3, [pc, #512]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008bd2:	22ff      	movs	r2, #255	@ 0xff
 8008bd4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008bd8:	22ff      	movs	r2, #255	@ 0xff
 8008bda:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008bdc:	4b7d      	ldr	r3, [pc, #500]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8008be2:	4b7d      	ldr	r3, [pc, #500]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008be4:	220a      	movs	r2, #10
 8008be6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8008be8:	4b7b      	ldr	r3, [pc, #492]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8008bee:	4b7a      	ldr	r3, [pc, #488]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 8008bf4:	4b78      	ldr	r3, [pc, #480]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008bf6:	2265      	movs	r2, #101	@ 0x65
 8008bf8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8008bfa:	f000 fd6a 	bl	80096d2 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008bfe:	4b74      	ldr	r3, [pc, #464]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	061a      	lsls	r2, r3, #24
 8008c04:	4b72      	ldr	r3, [pc, #456]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	4b70      	ldr	r3, [pc, #448]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c0e:	789b      	ldrb	r3, [r3, #2]
 8008c10:	021b      	lsls	r3, r3, #8
 8008c12:	4313      	orrs	r3, r2
 8008c14:	4a6e      	ldr	r2, [pc, #440]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c16:	78d2      	ldrb	r2, [r2, #3]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	061a      	lsls	r2, r3, #24
 8008c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	0619      	lsls	r1, r3, #24
 8008c22:	4b6b      	ldr	r3, [pc, #428]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	4319      	orrs	r1, r3
 8008c2a:	4b69      	ldr	r3, [pc, #420]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c2c:	789b      	ldrb	r3, [r3, #2]
 8008c2e:	021b      	lsls	r3, r3, #8
 8008c30:	430b      	orrs	r3, r1
 8008c32:	4967      	ldr	r1, [pc, #412]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c34:	78c9      	ldrb	r1, [r1, #3]
 8008c36:	430b      	orrs	r3, r1
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	4b63      	ldr	r3, [pc, #396]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	0619      	lsls	r1, r3, #24
 8008c46:	4b62      	ldr	r3, [pc, #392]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	041b      	lsls	r3, r3, #16
 8008c4c:	4319      	orrs	r1, r3
 8008c4e:	4b60      	ldr	r3, [pc, #384]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c50:	789b      	ldrb	r3, [r3, #2]
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	430b      	orrs	r3, r1
 8008c56:	495e      	ldr	r1, [pc, #376]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c58:	78c9      	ldrb	r1, [r1, #3]
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	0a1b      	lsrs	r3, r3, #8
 8008c5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c62:	431a      	orrs	r2, r3
 8008c64:	4b5a      	ldr	r3, [pc, #360]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	0619      	lsls	r1, r3, #24
 8008c6a:	4b59      	ldr	r3, [pc, #356]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	041b      	lsls	r3, r3, #16
 8008c70:	4319      	orrs	r1, r3
 8008c72:	4b57      	ldr	r3, [pc, #348]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c74:	789b      	ldrb	r3, [r3, #2]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	430b      	orrs	r3, r1
 8008c7a:	4955      	ldr	r1, [pc, #340]	@ (8008dd0 <MX_LWIP_Init+0x224>)
 8008c7c:	78c9      	ldrb	r1, [r1, #3]
 8008c7e:	430b      	orrs	r3, r1
 8008c80:	0e1b      	lsrs	r3, r3, #24
 8008c82:	4313      	orrs	r3, r2
 8008c84:	4a55      	ldr	r2, [pc, #340]	@ (8008ddc <MX_LWIP_Init+0x230>)
 8008c86:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008c88:	4b52      	ldr	r3, [pc, #328]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	061a      	lsls	r2, r3, #24
 8008c8e:	4b51      	ldr	r3, [pc, #324]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	431a      	orrs	r2, r3
 8008c96:	4b4f      	ldr	r3, [pc, #316]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008c98:	789b      	ldrb	r3, [r3, #2]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008ca0:	78d2      	ldrb	r2, [r2, #3]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	061a      	lsls	r2, r3, #24
 8008ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	0619      	lsls	r1, r3, #24
 8008cac:	4b49      	ldr	r3, [pc, #292]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008cae:	785b      	ldrb	r3, [r3, #1]
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	4319      	orrs	r1, r3
 8008cb4:	4b47      	ldr	r3, [pc, #284]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008cb6:	789b      	ldrb	r3, [r3, #2]
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	4945      	ldr	r1, [pc, #276]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008cbe:	78c9      	ldrb	r1, [r1, #3]
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	021b      	lsls	r3, r3, #8
 8008cc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	4b42      	ldr	r3, [pc, #264]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	0619      	lsls	r1, r3, #24
 8008cd0:	4b40      	ldr	r3, [pc, #256]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	041b      	lsls	r3, r3, #16
 8008cd6:	4319      	orrs	r1, r3
 8008cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008cda:	789b      	ldrb	r3, [r3, #2]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	430b      	orrs	r3, r1
 8008ce0:	493c      	ldr	r1, [pc, #240]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008ce2:	78c9      	ldrb	r1, [r1, #3]
 8008ce4:	430b      	orrs	r3, r1
 8008ce6:	0a1b      	lsrs	r3, r3, #8
 8008ce8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008cec:	431a      	orrs	r2, r3
 8008cee:	4b39      	ldr	r3, [pc, #228]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	0619      	lsls	r1, r3, #24
 8008cf4:	4b37      	ldr	r3, [pc, #220]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008cf6:	785b      	ldrb	r3, [r3, #1]
 8008cf8:	041b      	lsls	r3, r3, #16
 8008cfa:	4319      	orrs	r1, r3
 8008cfc:	4b35      	ldr	r3, [pc, #212]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008cfe:	789b      	ldrb	r3, [r3, #2]
 8008d00:	021b      	lsls	r3, r3, #8
 8008d02:	430b      	orrs	r3, r1
 8008d04:	4933      	ldr	r1, [pc, #204]	@ (8008dd4 <MX_LWIP_Init+0x228>)
 8008d06:	78c9      	ldrb	r1, [r1, #3]
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	0e1b      	lsrs	r3, r3, #24
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	4a34      	ldr	r2, [pc, #208]	@ (8008de0 <MX_LWIP_Init+0x234>)
 8008d10:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008d12:	4b31      	ldr	r3, [pc, #196]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	061a      	lsls	r2, r3, #24
 8008d18:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d1a:	785b      	ldrb	r3, [r3, #1]
 8008d1c:	041b      	lsls	r3, r3, #16
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	4b2d      	ldr	r3, [pc, #180]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d22:	789b      	ldrb	r3, [r3, #2]
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	4313      	orrs	r3, r2
 8008d28:	4a2b      	ldr	r2, [pc, #172]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d2a:	78d2      	ldrb	r2, [r2, #3]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	061a      	lsls	r2, r3, #24
 8008d30:	4b29      	ldr	r3, [pc, #164]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	0619      	lsls	r1, r3, #24
 8008d36:	4b28      	ldr	r3, [pc, #160]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	041b      	lsls	r3, r3, #16
 8008d3c:	4319      	orrs	r1, r3
 8008d3e:	4b26      	ldr	r3, [pc, #152]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d40:	789b      	ldrb	r3, [r3, #2]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	430b      	orrs	r3, r1
 8008d46:	4924      	ldr	r1, [pc, #144]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d48:	78c9      	ldrb	r1, [r1, #3]
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d52:	431a      	orrs	r2, r3
 8008d54:	4b20      	ldr	r3, [pc, #128]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	0619      	lsls	r1, r3, #24
 8008d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	041b      	lsls	r3, r3, #16
 8008d60:	4319      	orrs	r1, r3
 8008d62:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d64:	789b      	ldrb	r3, [r3, #2]
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	491b      	ldr	r1, [pc, #108]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d6c:	78c9      	ldrb	r1, [r1, #3]
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	0a1b      	lsrs	r3, r3, #8
 8008d72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008d76:	431a      	orrs	r2, r3
 8008d78:	4b17      	ldr	r3, [pc, #92]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	0619      	lsls	r1, r3, #24
 8008d7e:	4b16      	ldr	r3, [pc, #88]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	041b      	lsls	r3, r3, #16
 8008d84:	4319      	orrs	r1, r3
 8008d86:	4b14      	ldr	r3, [pc, #80]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d88:	789b      	ldrb	r3, [r3, #2]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	4912      	ldr	r1, [pc, #72]	@ (8008dd8 <MX_LWIP_Init+0x22c>)
 8008d90:	78c9      	ldrb	r1, [r1, #3]
 8008d92:	430b      	orrs	r3, r1
 8008d94:	0e1b      	lsrs	r3, r3, #24
 8008d96:	4313      	orrs	r3, r2
 8008d98:	4a12      	ldr	r2, [pc, #72]	@ (8008de4 <MX_LWIP_Init+0x238>)
 8008d9a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008d9c:	4b12      	ldr	r3, [pc, #72]	@ (8008de8 <MX_LWIP_Init+0x23c>)
 8008d9e:	9302      	str	r3, [sp, #8]
 8008da0:	4b12      	ldr	r3, [pc, #72]	@ (8008dec <MX_LWIP_Init+0x240>)
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	2300      	movs	r3, #0
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	4b0e      	ldr	r3, [pc, #56]	@ (8008de4 <MX_LWIP_Init+0x238>)
 8008daa:	4a0d      	ldr	r2, [pc, #52]	@ (8008de0 <MX_LWIP_Init+0x234>)
 8008dac:	490b      	ldr	r1, [pc, #44]	@ (8008ddc <MX_LWIP_Init+0x230>)
 8008dae:	4810      	ldr	r0, [pc, #64]	@ (8008df0 <MX_LWIP_Init+0x244>)
 8008db0:	f001 f976 	bl	800a0a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008db4:	480e      	ldr	r0, [pc, #56]	@ (8008df0 <MX_LWIP_Init+0x244>)
 8008db6:	f001 fc07 	bl	800a5c8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008dba:	480d      	ldr	r0, [pc, #52]	@ (8008df0 <MX_LWIP_Init+0x244>)
 8008dbc:	f001 fc28 	bl	800a610 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008dc0:	490c      	ldr	r1, [pc, #48]	@ (8008df4 <MX_LWIP_Init+0x248>)
 8008dc2:	480b      	ldr	r0, [pc, #44]	@ (8008df0 <MX_LWIP_Init+0x244>)
 8008dc4:	f001 fd26 	bl	800a814 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008dc8:	bf00      	nop
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000718 	.word	0x20000718
 8008dd4:	2000071c 	.word	0x2000071c
 8008dd8:	20000720 	.word	0x20000720
 8008ddc:	2000070c 	.word	0x2000070c
 8008de0:	20000710 	.word	0x20000710
 8008de4:	20000714 	.word	0x20000714
 8008de8:	08013c1d 	.word	0x08013c1d
 8008dec:	0800916d 	.word	0x0800916d
 8008df0:	200006d8 	.word	0x200006d8
 8008df4:	08008e49 	.word	0x08008e49

08008df8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8008e00:	f7f8 fcc4 	bl	800178c <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	4b08      	ldr	r3, [pc, #32]	@ (8008e28 <Ethernet_Link_Periodic_Handle+0x30>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b63      	cmp	r3, #99	@ 0x63
 8008e0e:	d907      	bls.n	8008e20 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8008e10:	f7f8 fcbc 	bl	800178c <HAL_GetTick>
 8008e14:	4603      	mov	r3, r0
 8008e16:	4a04      	ldr	r2, [pc, #16]	@ (8008e28 <Ethernet_Link_Periodic_Handle+0x30>)
 8008e18:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fb0c 	bl	8009438 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200006d4 	.word	0x200006d4

08008e2c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008e30:	4804      	ldr	r0, [pc, #16]	@ (8008e44 <MX_LWIP_Process+0x18>)
 8008e32:	f000 f97b 	bl	800912c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8008e36:	f007 fd85 	bl	8010944 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8008e3a:	4802      	ldr	r0, [pc, #8]	@ (8008e44 <MX_LWIP_Process+0x18>)
 8008e3c:	f7ff ffdc 	bl	8008df8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8008e40:	bf00      	nop
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	200006d8 	.word	0x200006d8

08008e48 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <SCB_InvalidateDCache_by_Addr>:
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008e6e:	2320      	movs	r3, #32
 8008e70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008e72:	f3bf 8f4f 	dsb	sy
}
 8008e76:	bf00      	nop
    while (op_size > 0) {
 8008e78:	e00b      	b.n	8008e92 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8008eb0 <SCB_InvalidateDCache_by_Addr+0x54>)
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	4413      	add	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dcf0      	bgt.n	8008e7a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008e98:	f3bf 8f4f 	dsb	sy
}
 8008e9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e9e:	f3bf 8f6f 	isb	sy
}
 8008ea2:	bf00      	nop
}
 8008ea4:	bf00      	nop
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	e000ed00 	.word	0xe000ed00

08008eb4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008ec0:	4b44      	ldr	r3, [pc, #272]	@ (8008fd4 <low_level_init+0x120>)
 8008ec2:	4a45      	ldr	r2, [pc, #276]	@ (8008fd8 <low_level_init+0x124>)
 8008ec4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008eca:	2380      	movs	r3, #128	@ 0x80
 8008ecc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008ece:	23e1      	movs	r3, #225	@ 0xe1
 8008ed0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008eda:	2300      	movs	r3, #0
 8008edc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008ede:	4a3d      	ldr	r2, [pc, #244]	@ (8008fd4 <low_level_init+0x120>)
 8008ee0:	f107 0308 	add.w	r3, r7, #8
 8008ee4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8008fd4 <low_level_init+0x120>)
 8008ee8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008eec:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008eee:	4b39      	ldr	r3, [pc, #228]	@ (8008fd4 <low_level_init+0x120>)
 8008ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8008fdc <low_level_init+0x128>)
 8008ef2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008ef4:	4b37      	ldr	r3, [pc, #220]	@ (8008fd4 <low_level_init+0x120>)
 8008ef6:	4a3a      	ldr	r2, [pc, #232]	@ (8008fe0 <low_level_init+0x12c>)
 8008ef8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008efa:	4b36      	ldr	r3, [pc, #216]	@ (8008fd4 <low_level_init+0x120>)
 8008efc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008f00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008f02:	4834      	ldr	r0, [pc, #208]	@ (8008fd4 <low_level_init+0x120>)
 8008f04:	f7f9 fbb2 	bl	800266c <HAL_ETH_Init>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008f0c:	2238      	movs	r2, #56	@ 0x38
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4834      	ldr	r0, [pc, #208]	@ (8008fe4 <low_level_init+0x130>)
 8008f12:	f00b fd95 	bl	8014a40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008f16:	4b33      	ldr	r3, [pc, #204]	@ (8008fe4 <low_level_init+0x130>)
 8008f18:	2221      	movs	r2, #33	@ 0x21
 8008f1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008f1c:	4b31      	ldr	r3, [pc, #196]	@ (8008fe4 <low_level_init+0x130>)
 8008f1e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8008f22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008f24:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe4 <low_level_init+0x130>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008f2a:	482f      	ldr	r0, [pc, #188]	@ (8008fe8 <low_level_init+0x134>)
 8008f2c:	f000 ff80 	bl	8009e30 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2206      	movs	r2, #6
 8008f34:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008f38:	4b26      	ldr	r3, [pc, #152]	@ (8008fd4 <low_level_init+0x120>)
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	781a      	ldrb	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008f44:	4b23      	ldr	r3, [pc, #140]	@ (8008fd4 <low_level_init+0x120>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	785a      	ldrb	r2, [r3, #1]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008f50:	4b20      	ldr	r3, [pc, #128]	@ (8008fd4 <low_level_init+0x120>)
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	789a      	ldrb	r2, [r3, #2]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fd4 <low_level_init+0x120>)
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	78da      	ldrb	r2, [r3, #3]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008f68:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd4 <low_level_init+0x120>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	791a      	ldrb	r2, [r3, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008f74:	4b17      	ldr	r3, [pc, #92]	@ (8008fd4 <low_level_init+0x120>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	795a      	ldrb	r2, [r3, #5]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8008f86:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008f8e:	f043 030a 	orr.w	r3, r3, #10
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008f9a:	4914      	ldr	r1, [pc, #80]	@ (8008fec <low_level_init+0x138>)
 8008f9c:	4814      	ldr	r0, [pc, #80]	@ (8008ff0 <low_level_init+0x13c>)
 8008f9e:	f7f8 fa9e 	bl	80014de <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8008fa2:	4813      	ldr	r0, [pc, #76]	@ (8008ff0 <low_level_init+0x13c>)
 8008fa4:	f7f8 facd 	bl	8001542 <LAN8742_Init>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d006      	beq.n	8008fbc <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 fc00 	bl	800a7b4 <netif_set_link_down>
    netif_set_down(netif);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 fb97 	bl	800a6e8 <netif_set_down>
 8008fba:	e008      	b.n	8008fce <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d103      	bne.n	8008fca <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa38 	bl	8009438 <ethernet_link_check_state>
 8008fc8:	e001      	b.n	8008fce <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8008fca:	f7f7 fe95 	bl	8000cf8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	200050b0 	.word	0x200050b0
 8008fd8:	40028000 	.word	0x40028000
 8008fdc:	2000016c 	.word	0x2000016c
 8008fe0:	200000cc 	.word	0x200000cc
 8008fe4:	20005160 	.word	0x20005160
 8008fe8:	08018d0c 	.word	0x08018d0c
 8008fec:	2000000c 	.word	0x2000000c
 8008ff0:	20005198 	.word	0x20005198

08008ff4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b092      	sub	sp, #72	@ 0x48
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800900c:	f107 030c 	add.w	r3, r7, #12
 8009010:	2230      	movs	r2, #48	@ 0x30
 8009012:	2100      	movs	r1, #0
 8009014:	4618      	mov	r0, r3
 8009016:	f00b fd13 	bl	8014a40 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800901a:	f107 030c 	add.w	r3, r7, #12
 800901e:	2230      	movs	r2, #48	@ 0x30
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f00b fd0c 	bl	8014a40 <memset>

  for(q = p; q != NULL; q = q->next)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	643b      	str	r3, [r7, #64]	@ 0x40
 800902c:	e045      	b.n	80090ba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800902e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009030:	2b03      	cmp	r3, #3
 8009032:	d902      	bls.n	800903a <low_level_output+0x46>
      return ERR_IF;
 8009034:	f06f 030b 	mvn.w	r3, #11
 8009038:	e055      	b.n	80090e6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800903a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800903c:	6859      	ldr	r1, [r3, #4]
 800903e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009040:	4613      	mov	r3, r2
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	3348      	adds	r3, #72	@ 0x48
 800904a:	443b      	add	r3, r7
 800904c:	3b3c      	subs	r3, #60	@ 0x3c
 800904e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009052:	895b      	ldrh	r3, [r3, #10]
 8009054:	4619      	mov	r1, r3
 8009056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009058:	4613      	mov	r3, r2
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	3348      	adds	r3, #72	@ 0x48
 8009062:	443b      	add	r3, r7
 8009064:	3b38      	subs	r3, #56	@ 0x38
 8009066:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800906a:	2b00      	cmp	r3, #0
 800906c:	d011      	beq.n	8009092 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800906e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009070:	1e5a      	subs	r2, r3, #1
 8009072:	f107 000c 	add.w	r0, r7, #12
 8009076:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009078:	460b      	mov	r3, r1
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	440b      	add	r3, r1
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	18c1      	adds	r1, r0, r3
 8009082:	4613      	mov	r3, r2
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	3348      	adds	r3, #72	@ 0x48
 800908c:	443b      	add	r3, r7
 800908e:	3b34      	subs	r3, #52	@ 0x34
 8009090:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800909a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800909c:	4613      	mov	r3, r2
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	3348      	adds	r3, #72	@ 0x48
 80090a6:	443b      	add	r3, r7
 80090a8:	3b34      	subs	r3, #52	@ 0x34
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]
    }

    i++;
 80090ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090b0:	3301      	adds	r3, #1
 80090b2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80090b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80090ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1b6      	bne.n	800902e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	891b      	ldrh	r3, [r3, #8]
 80090c4:	461a      	mov	r2, r3
 80090c6:	4b0a      	ldr	r3, [pc, #40]	@ (80090f0 <low_level_output+0xfc>)
 80090c8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80090ca:	4a09      	ldr	r2, [pc, #36]	@ (80090f0 <low_level_output+0xfc>)
 80090cc:	f107 030c 	add.w	r3, r7, #12
 80090d0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80090d2:	4a07      	ldr	r2, [pc, #28]	@ (80090f0 <low_level_output+0xfc>)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80090d8:	2214      	movs	r2, #20
 80090da:	4905      	ldr	r1, [pc, #20]	@ (80090f0 <low_level_output+0xfc>)
 80090dc:	4805      	ldr	r0, [pc, #20]	@ (80090f4 <low_level_output+0x100>)
 80090de:	f7f9 fc4f 	bl	8002980 <HAL_ETH_Transmit>

  return errval;
 80090e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3748      	adds	r7, #72	@ 0x48
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20005160 	.word	0x20005160
 80090f4:	200050b0 	.word	0x200050b0

080090f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009104:	4b07      	ldr	r3, [pc, #28]	@ (8009124 <low_level_input+0x2c>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d105      	bne.n	8009118 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800910c:	f107 030c 	add.w	r3, r7, #12
 8009110:	4619      	mov	r1, r3
 8009112:	4805      	ldr	r0, [pc, #20]	@ (8009128 <low_level_input+0x30>)
 8009114:	f7f9 fcc8 	bl	8002aa8 <HAL_ETH_ReadData>
  }

  return p;
 8009118:	68fb      	ldr	r3, [r7, #12]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	200050ac 	.word	0x200050ac
 8009128:	200050b0 	.word	0x200050b0

0800912c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff ffdd 	bl	80090f8 <low_level_input>
 800913e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	4798      	blx	r3
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f001 fedc 	bl	800af14 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1ea      	bne.n	8009138 <ethernetif_input+0xc>
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <ethernetif_init+0x1c>
 800917a:	4b0e      	ldr	r3, [pc, #56]	@ (80091b4 <ethernetif_init+0x48>)
 800917c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8009180:	490d      	ldr	r1, [pc, #52]	@ (80091b8 <ethernetif_init+0x4c>)
 8009182:	480e      	ldr	r0, [pc, #56]	@ (80091bc <ethernetif_init+0x50>)
 8009184:	f00b fafc 	bl	8014780 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2273      	movs	r2, #115	@ 0x73
 800918c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2274      	movs	r2, #116	@ 0x74
 8009194:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a09      	ldr	r2, [pc, #36]	@ (80091c0 <ethernetif_init+0x54>)
 800919c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a08      	ldr	r2, [pc, #32]	@ (80091c4 <ethernetif_init+0x58>)
 80091a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fe85 	bl	8008eb4 <low_level_init>

  return ERR_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	080156f8 	.word	0x080156f8
 80091b8:	08015714 	.word	0x08015714
 80091bc:	08015724 	.word	0x08015724
 80091c0:	08011fb1 	.word	0x08011fb1
 80091c4:	08008ff5 	.word	0x08008ff5

080091c8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80091d4:	68f9      	ldr	r1, [r7, #12]
 80091d6:	4807      	ldr	r0, [pc, #28]	@ (80091f4 <pbuf_free_custom+0x2c>)
 80091d8:	f000 ff0c 	bl	8009ff4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80091dc:	4b06      	ldr	r3, [pc, #24]	@ (80091f8 <pbuf_free_custom+0x30>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d102      	bne.n	80091ea <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80091e4:	4b04      	ldr	r3, [pc, #16]	@ (80091f8 <pbuf_free_custom+0x30>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
  }
}
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	08018d0c 	.word	0x08018d0c
 80091f8:	200050ac 	.word	0x200050ac

080091fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009200:	f7f8 fac4 	bl	800178c <HAL_GetTick>
 8009204:	4603      	mov	r3, r0
}
 8009206:	4618      	mov	r0, r3
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08e      	sub	sp, #56	@ 0x38
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	605a      	str	r2, [r3, #4]
 800921e:	609a      	str	r2, [r3, #8]
 8009220:	60da      	str	r2, [r3, #12]
 8009222:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a56      	ldr	r2, [pc, #344]	@ (8009384 <HAL_ETH_MspInit+0x178>)
 800922a:	4293      	cmp	r3, r2
 800922c:	f040 80a6 	bne.w	800937c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009230:	4b55      	ldr	r3, [pc, #340]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 8009232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009234:	4a54      	ldr	r2, [pc, #336]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 8009236:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800923a:	6313      	str	r3, [r2, #48]	@ 0x30
 800923c:	4b52      	ldr	r3, [pc, #328]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 800923e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009244:	623b      	str	r3, [r7, #32]
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	4b4f      	ldr	r3, [pc, #316]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 800924a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924c:	4a4e      	ldr	r2, [pc, #312]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 800924e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009252:	6313      	str	r3, [r2, #48]	@ 0x30
 8009254:	4b4c      	ldr	r3, [pc, #304]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 8009256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009258:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800925c:	61fb      	str	r3, [r7, #28]
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4b49      	ldr	r3, [pc, #292]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 8009262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009264:	4a48      	ldr	r2, [pc, #288]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 8009266:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800926a:	6313      	str	r3, [r2, #48]	@ 0x30
 800926c:	4b46      	ldr	r3, [pc, #280]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 800926e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009274:	61bb      	str	r3, [r7, #24]
 8009276:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009278:	4b43      	ldr	r3, [pc, #268]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 800927a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927c:	4a42      	ldr	r2, [pc, #264]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 800927e:	f043 0304 	orr.w	r3, r3, #4
 8009282:	6313      	str	r3, [r2, #48]	@ 0x30
 8009284:	4b40      	ldr	r3, [pc, #256]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 8009286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009290:	4b3d      	ldr	r3, [pc, #244]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 8009292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009294:	4a3c      	ldr	r2, [pc, #240]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 8009296:	f043 0301 	orr.w	r3, r3, #1
 800929a:	6313      	str	r3, [r2, #48]	@ 0x30
 800929c:	4b3a      	ldr	r3, [pc, #232]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 800929e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	613b      	str	r3, [r7, #16]
 80092a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092a8:	4b37      	ldr	r3, [pc, #220]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 80092aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ac:	4a36      	ldr	r2, [pc, #216]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 80092ae:	f043 0302 	orr.w	r3, r3, #2
 80092b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80092b4:	4b34      	ldr	r3, [pc, #208]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 80092b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80092c0:	4b31      	ldr	r3, [pc, #196]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 80092c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c4:	4a30      	ldr	r2, [pc, #192]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 80092c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80092cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009388 <HAL_ETH_MspInit+0x17c>)
 80092ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80092d8:	2332      	movs	r3, #50	@ 0x32
 80092da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092dc:	2302      	movs	r3, #2
 80092de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092e4:	2303      	movs	r3, #3
 80092e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80092e8:	230b      	movs	r3, #11
 80092ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092f0:	4619      	mov	r1, r3
 80092f2:	4826      	ldr	r0, [pc, #152]	@ (800938c <HAL_ETH_MspInit+0x180>)
 80092f4:	f7fa fc08 	bl	8003b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80092f8:	2386      	movs	r3, #134	@ 0x86
 80092fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092fc:	2302      	movs	r3, #2
 80092fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009300:	2300      	movs	r3, #0
 8009302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009304:	2303      	movs	r3, #3
 8009306:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009308:	230b      	movs	r3, #11
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800930c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009310:	4619      	mov	r1, r3
 8009312:	481f      	ldr	r0, [pc, #124]	@ (8009390 <HAL_ETH_MspInit+0x184>)
 8009314:	f7fa fbf8 	bl	8003b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800931e:	2302      	movs	r3, #2
 8009320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009322:	2300      	movs	r3, #0
 8009324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009326:	2303      	movs	r3, #3
 8009328:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800932a:	230b      	movs	r3, #11
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800932e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009332:	4619      	mov	r1, r3
 8009334:	4817      	ldr	r0, [pc, #92]	@ (8009394 <HAL_ETH_MspInit+0x188>)
 8009336:	f7fa fbe7 	bl	8003b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800933a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800933e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009340:	2302      	movs	r3, #2
 8009342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009344:	2300      	movs	r3, #0
 8009346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009348:	2303      	movs	r3, #3
 800934a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800934c:	230b      	movs	r3, #11
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009354:	4619      	mov	r1, r3
 8009356:	4810      	ldr	r0, [pc, #64]	@ (8009398 <HAL_ETH_MspInit+0x18c>)
 8009358:	f7fa fbd6 	bl	8003b08 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800935c:	2200      	movs	r2, #0
 800935e:	2100      	movs	r1, #0
 8009360:	203d      	movs	r0, #61	@ 0x3d
 8009362:	f7f8 fb1e 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009366:	203d      	movs	r0, #61	@ 0x3d
 8009368:	f7f8 fb37 	bl	80019da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800936c:	2200      	movs	r2, #0
 800936e:	2100      	movs	r1, #0
 8009370:	203e      	movs	r0, #62	@ 0x3e
 8009372:	f7f8 fb16 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8009376:	203e      	movs	r0, #62	@ 0x3e
 8009378:	f7f8 fb2f 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800937c:	bf00      	nop
 800937e:	3738      	adds	r7, #56	@ 0x38
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	40028000 	.word	0x40028000
 8009388:	40023800 	.word	0x40023800
 800938c:	40020800 	.word	0x40020800
 8009390:	40020000 	.word	0x40020000
 8009394:	40020400 	.word	0x40020400
 8009398:	40021800 	.word	0x40021800

0800939c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80093a0:	4802      	ldr	r0, [pc, #8]	@ (80093ac <ETH_PHY_IO_Init+0x10>)
 80093a2:	f7f9 ff4f 	bl	8003244 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	200050b0 	.word	0x200050b0

080093b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
  return 0;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	68f9      	ldr	r1, [r7, #12]
 80093d2:	4807      	ldr	r0, [pc, #28]	@ (80093f0 <ETH_PHY_IO_ReadReg+0x30>)
 80093d4:	f7f9 fd90 	bl	8002ef8 <HAL_ETH_ReadPHYRegister>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80093de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093e2:	e000      	b.n	80093e6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	200050b0 	.word	0x200050b0

080093f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	68f9      	ldr	r1, [r7, #12]
 8009406:	4807      	ldr	r0, [pc, #28]	@ (8009424 <ETH_PHY_IO_WriteReg+0x30>)
 8009408:	f7f9 fdc1 	bl	8002f8e <HAL_ETH_WritePHYRegister>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009416:	e000      	b.n	800941a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	200050b0 	.word	0x200050b0

08009428 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800942c:	f7f8 f9ae 	bl	800178c <HAL_GetTick>
 8009430:	4603      	mov	r3, r0
}
 8009432:	4618      	mov	r0, r3
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b0a0      	sub	sp, #128	@ 0x80
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009440:	f107 030c 	add.w	r3, r7, #12
 8009444:	2264      	movs	r2, #100	@ 0x64
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f00b faf9 	bl	8014a40 <memset>
  int32_t PHYLinkState = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009456:	2300      	movs	r3, #0
 8009458:	67bb      	str	r3, [r7, #120]	@ 0x78
 800945a:	2300      	movs	r3, #0
 800945c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800945e:	483a      	ldr	r0, [pc, #232]	@ (8009548 <ethernet_link_check_state+0x110>)
 8009460:	f7f8 f8bc 	bl	80015dc <LAN8742_GetLinkState>
 8009464:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800946c:	089b      	lsrs	r3, r3, #2
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00c      	beq.n	8009492 <ethernet_link_check_state+0x5a>
 8009478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800947a:	2b01      	cmp	r3, #1
 800947c:	dc09      	bgt.n	8009492 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 800947e:	4833      	ldr	r0, [pc, #204]	@ (800954c <ethernet_link_check_state+0x114>)
 8009480:	f7f9 f9fe 	bl	8002880 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 f92f 	bl	800a6e8 <netif_set_down>
    netif_set_link_down(netif);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 f992 	bl	800a7b4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009490:	e055      	b.n	800953e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d14e      	bne.n	800953e <ethernet_link_check_state+0x106>
 80094a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	dd4b      	ble.n	800953e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80094a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094a8:	3b02      	subs	r3, #2
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d82a      	bhi.n	8009504 <ethernet_link_check_state+0xcc>
 80094ae:	a201      	add	r2, pc, #4	@ (adr r2, 80094b4 <ethernet_link_check_state+0x7c>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	080094c5 	.word	0x080094c5
 80094b8:	080094d7 	.word	0x080094d7
 80094bc:	080094e7 	.word	0x080094e7
 80094c0:	080094f7 	.word	0x080094f7
      duplex = ETH_FULLDUPLEX_MODE;
 80094c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094c8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80094ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80094ce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80094d0:	2301      	movs	r3, #1
 80094d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80094d4:	e017      	b.n	8009506 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80094da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80094de:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80094e0:	2301      	movs	r3, #1
 80094e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80094e4:	e00f      	b.n	8009506 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80094e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094ea:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80094ec:	2300      	movs	r3, #0
 80094ee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80094f0:	2301      	movs	r3, #1
 80094f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80094f4:	e007      	b.n	8009506 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80094fa:	2300      	movs	r3, #0
 80094fc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80094fe:	2301      	movs	r3, #1
 8009500:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009502:	e000      	b.n	8009506 <ethernet_link_check_state+0xce>
      break;
 8009504:	bf00      	nop
    if(linkchanged)
 8009506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009508:	2b00      	cmp	r3, #0
 800950a:	d018      	beq.n	800953e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800950c:	f107 030c 	add.w	r3, r7, #12
 8009510:	4619      	mov	r1, r3
 8009512:	480e      	ldr	r0, [pc, #56]	@ (800954c <ethernet_link_check_state+0x114>)
 8009514:	f7f9 fd84 	bl	8003020 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009518:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800951a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800951c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800951e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009520:	f107 030c 	add.w	r3, r7, #12
 8009524:	4619      	mov	r1, r3
 8009526:	4809      	ldr	r0, [pc, #36]	@ (800954c <ethernet_link_check_state+0x114>)
 8009528:	f7f9 fe71 	bl	800320e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800952c:	4807      	ldr	r0, [pc, #28]	@ (800954c <ethernet_link_check_state+0x114>)
 800952e:	f7f9 f937 	bl	80027a0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 f86c 	bl	800a610 <netif_set_up>
      netif_set_link_up(netif);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 f907 	bl	800a74c <netif_set_link_up>
}
 800953e:	bf00      	nop
 8009540:	3780      	adds	r7, #128	@ 0x80
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20005198 	.word	0x20005198
 800954c:	200050b0 	.word	0x200050b0

08009550 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af02      	add	r7, sp, #8
 8009556:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009558:	4812      	ldr	r0, [pc, #72]	@ (80095a4 <HAL_ETH_RxAllocateCallback+0x54>)
 800955a:	f000 fcdd 	bl	8009f18 <memp_malloc_pool>
 800955e:	60f8      	str	r0, [r7, #12]
  if (p)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d014      	beq.n	8009590 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f103 0220 	add.w	r2, r3, #32
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a0d      	ldr	r2, [pc, #52]	@ (80095a8 <HAL_ETH_RxAllocateCallback+0x58>)
 8009574:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800957e:	9201      	str	r2, [sp, #4]
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2241      	movs	r2, #65	@ 0x41
 8009586:	2100      	movs	r1, #0
 8009588:	2000      	movs	r0, #0
 800958a:	f001 fb09 	bl	800aba0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800958e:	e005      	b.n	800959c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009590:	4b06      	ldr	r3, [pc, #24]	@ (80095ac <HAL_ETH_RxAllocateCallback+0x5c>)
 8009592:	2201      	movs	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]
}
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	08018d0c 	.word	0x08018d0c
 80095a8:	080091c9 	.word	0x080091c9
 80095ac:	200050ac 	.word	0x200050ac

080095b0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3b20      	subs	r3, #32
 80095ce:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	2200      	movs	r2, #0
 80095da:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	887a      	ldrh	r2, [r7, #2]
 80095e0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d103      	bne.n	80095f2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	e003      	b.n	80095fa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69fa      	ldr	r2, [r7, #28]
 80095f8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	e009      	b.n	800961c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	891a      	ldrh	r2, [r3, #8]
 800960c:	887b      	ldrh	r3, [r7, #2]
 800960e:	4413      	add	r3, r2
 8009610:	b29a      	uxth	r2, r3
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	61fb      	str	r3, [r7, #28]
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1f2      	bne.n	8009608 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009622:	887b      	ldrh	r3, [r7, #2]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff fc18 	bl	8008e5c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800962c:	bf00      	nop
 800962e:	3720      	adds	r7, #32
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 800963e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009642:	2b00      	cmp	r3, #0
 8009644:	dc04      	bgt.n	8009650 <lwip_strerr+0x1c>
 8009646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800964a:	f113 0f10 	cmn.w	r3, #16
 800964e:	da01      	bge.n	8009654 <lwip_strerr+0x20>
    return "Unknown error.";
 8009650:	4b06      	ldr	r3, [pc, #24]	@ (800966c <lwip_strerr+0x38>)
 8009652:	e005      	b.n	8009660 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8009654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009658:	425b      	negs	r3, r3
 800965a:	4a05      	ldr	r2, [pc, #20]	@ (8009670 <lwip_strerr+0x3c>)
 800965c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009660:	4618      	mov	r0, r3
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	08015888 	.word	0x08015888
 8009670:	20000020 	.word	0x20000020

08009674 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800967e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	b21a      	sxth	r2, r3
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	0a1b      	lsrs	r3, r3, #8
 800968a:	b29b      	uxth	r3, r3
 800968c:	b21b      	sxth	r3, r3
 800968e:	4313      	orrs	r3, r2
 8009690:	b21b      	sxth	r3, r3
 8009692:	b29b      	uxth	r3, r3
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	061a      	lsls	r2, r3, #24
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	021b      	lsls	r3, r3, #8
 80096b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	0a1b      	lsrs	r3, r3, #8
 80096ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	0e1b      	lsrs	r3, r3, #24
 80096c4:	4313      	orrs	r3, r2
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80096dc:	f000 f8d4 	bl	8009888 <mem_init>
  memp_init();
 80096e0:	f000 fbd6 	bl	8009e90 <memp_init>
  pbuf_init();
  netif_init();
 80096e4:	f000 fcd4 	bl	800a090 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80096e8:	f007 f96e 	bl	80109c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80096ec:	f001 feb0 	bl	800b450 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80096f0:	f007 f8e0 	bl	80108b4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009706:	4b05      	ldr	r3, [pc, #20]	@ (800971c <ptr_to_mem+0x20>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	4413      	add	r3, r2
}
 800970e:	4618      	mov	r0, r3
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	200051d0 	.word	0x200051d0

08009720 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009728:	4b05      	ldr	r3, [pc, #20]	@ (8009740 <mem_to_ptr+0x20>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	b29b      	uxth	r3, r3
}
 8009732:	4618      	mov	r0, r3
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	200051d0 	.word	0x200051d0

08009744 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009744:	b590      	push	{r4, r7, lr}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800974c:	4b45      	ldr	r3, [pc, #276]	@ (8009864 <plug_holes+0x120>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	429a      	cmp	r2, r3
 8009754:	d206      	bcs.n	8009764 <plug_holes+0x20>
 8009756:	4b44      	ldr	r3, [pc, #272]	@ (8009868 <plug_holes+0x124>)
 8009758:	f240 12df 	movw	r2, #479	@ 0x1df
 800975c:	4943      	ldr	r1, [pc, #268]	@ (800986c <plug_holes+0x128>)
 800975e:	4844      	ldr	r0, [pc, #272]	@ (8009870 <plug_holes+0x12c>)
 8009760:	f00b f80e 	bl	8014780 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009764:	4b43      	ldr	r3, [pc, #268]	@ (8009874 <plug_holes+0x130>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	429a      	cmp	r2, r3
 800976c:	d306      	bcc.n	800977c <plug_holes+0x38>
 800976e:	4b3e      	ldr	r3, [pc, #248]	@ (8009868 <plug_holes+0x124>)
 8009770:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009774:	4940      	ldr	r1, [pc, #256]	@ (8009878 <plug_holes+0x134>)
 8009776:	483e      	ldr	r0, [pc, #248]	@ (8009870 <plug_holes+0x12c>)
 8009778:	f00b f802 	bl	8014780 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	791b      	ldrb	r3, [r3, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d006      	beq.n	8009792 <plug_holes+0x4e>
 8009784:	4b38      	ldr	r3, [pc, #224]	@ (8009868 <plug_holes+0x124>)
 8009786:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800978a:	493c      	ldr	r1, [pc, #240]	@ (800987c <plug_holes+0x138>)
 800978c:	4838      	ldr	r0, [pc, #224]	@ (8009870 <plug_holes+0x12c>)
 800978e:	f00a fff7 	bl	8014780 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800979a:	d906      	bls.n	80097aa <plug_holes+0x66>
 800979c:	4b32      	ldr	r3, [pc, #200]	@ (8009868 <plug_holes+0x124>)
 800979e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80097a2:	4937      	ldr	r1, [pc, #220]	@ (8009880 <plug_holes+0x13c>)
 80097a4:	4832      	ldr	r0, [pc, #200]	@ (8009870 <plug_holes+0x12c>)
 80097a6:	f00a ffeb 	bl	8014780 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff ffa4 	bl	80096fc <ptr_to_mem>
 80097b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d024      	beq.n	8009808 <plug_holes+0xc4>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	791b      	ldrb	r3, [r3, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d120      	bne.n	8009808 <plug_holes+0xc4>
 80097c6:	4b2b      	ldr	r3, [pc, #172]	@ (8009874 <plug_holes+0x130>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d01b      	beq.n	8009808 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80097d0:	4b2c      	ldr	r3, [pc, #176]	@ (8009884 <plug_holes+0x140>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d102      	bne.n	80097e0 <plug_holes+0x9c>
      lfree = mem;
 80097da:	4a2a      	ldr	r2, [pc, #168]	@ (8009884 <plug_holes+0x140>)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	881a      	ldrh	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80097f0:	d00a      	beq.n	8009808 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff ff80 	bl	80096fc <ptr_to_mem>
 80097fc:	4604      	mov	r4, r0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff ff8e 	bl	8009720 <mem_to_ptr>
 8009804:	4603      	mov	r3, r0
 8009806:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	885b      	ldrh	r3, [r3, #2]
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff ff75 	bl	80096fc <ptr_to_mem>
 8009812:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	d01f      	beq.n	800985c <plug_holes+0x118>
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	791b      	ldrb	r3, [r3, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d11b      	bne.n	800985c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009824:	4b17      	ldr	r3, [pc, #92]	@ (8009884 <plug_holes+0x140>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d102      	bne.n	8009834 <plug_holes+0xf0>
      lfree = pmem;
 800982e:	4a15      	ldr	r2, [pc, #84]	@ (8009884 <plug_holes+0x140>)
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	881a      	ldrh	r2, [r3, #0]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009844:	d00a      	beq.n	800985c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff ff56 	bl	80096fc <ptr_to_mem>
 8009850:	4604      	mov	r4, r0
 8009852:	68b8      	ldr	r0, [r7, #8]
 8009854:	f7ff ff64 	bl	8009720 <mem_to_ptr>
 8009858:	4603      	mov	r3, r0
 800985a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	bd90      	pop	{r4, r7, pc}
 8009864:	200051d0 	.word	0x200051d0
 8009868:	08015898 	.word	0x08015898
 800986c:	080158c8 	.word	0x080158c8
 8009870:	080158e0 	.word	0x080158e0
 8009874:	200051d4 	.word	0x200051d4
 8009878:	08015908 	.word	0x08015908
 800987c:	08015924 	.word	0x08015924
 8009880:	08015940 	.word	0x08015940
 8009884:	200051d8 	.word	0x200051d8

08009888 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800988e:	4b16      	ldr	r3, [pc, #88]	@ (80098e8 <mem_init+0x60>)
 8009890:	4a16      	ldr	r2, [pc, #88]	@ (80098ec <mem_init+0x64>)
 8009892:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009894:	4b14      	ldr	r3, [pc, #80]	@ (80098e8 <mem_init+0x60>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80098a0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80098ae:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80098b2:	f7ff ff23 	bl	80096fc <ptr_to_mem>
 80098b6:	4603      	mov	r3, r0
 80098b8:	4a0d      	ldr	r2, [pc, #52]	@ (80098f0 <mem_init+0x68>)
 80098ba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80098bc:	4b0c      	ldr	r3, [pc, #48]	@ (80098f0 <mem_init+0x68>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2201      	movs	r2, #1
 80098c2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80098c4:	4b0a      	ldr	r3, [pc, #40]	@ (80098f0 <mem_init+0x68>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80098cc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80098ce:	4b08      	ldr	r3, [pc, #32]	@ (80098f0 <mem_init+0x68>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80098d6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80098d8:	4b03      	ldr	r3, [pc, #12]	@ (80098e8 <mem_init+0x60>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a05      	ldr	r2, [pc, #20]	@ (80098f4 <mem_init+0x6c>)
 80098de:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	200051d0 	.word	0x200051d0
 80098ec:	20048000 	.word	0x20048000
 80098f0:	200051d4 	.word	0x200051d4
 80098f4:	200051d8 	.word	0x200051d8

080098f8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff ff0d 	bl	8009720 <mem_to_ptr>
 8009906:	4603      	mov	r3, r0
 8009908:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fef4 	bl	80096fc <ptr_to_mem>
 8009914:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	885b      	ldrh	r3, [r3, #2]
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff feee 	bl	80096fc <ptr_to_mem>
 8009920:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800992a:	d818      	bhi.n	800995e <mem_link_valid+0x66>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	885b      	ldrh	r3, [r3, #2]
 8009930:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009934:	d813      	bhi.n	800995e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800993a:	8afa      	ldrh	r2, [r7, #22]
 800993c:	429a      	cmp	r2, r3
 800993e:	d004      	beq.n	800994a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	8afa      	ldrh	r2, [r7, #22]
 8009946:	429a      	cmp	r2, r3
 8009948:	d109      	bne.n	800995e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800994a:	4b08      	ldr	r3, [pc, #32]	@ (800996c <mem_link_valid+0x74>)
 800994c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	429a      	cmp	r2, r3
 8009952:	d006      	beq.n	8009962 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	885b      	ldrh	r3, [r3, #2]
 8009958:	8afa      	ldrh	r2, [r7, #22]
 800995a:	429a      	cmp	r2, r3
 800995c:	d001      	beq.n	8009962 <mem_link_valid+0x6a>
    return 0;
 800995e:	2300      	movs	r3, #0
 8009960:	e000      	b.n	8009964 <mem_link_valid+0x6c>
  }
  return 1;
 8009962:	2301      	movs	r3, #1
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	200051d4 	.word	0x200051d4

08009970 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d04c      	beq.n	8009a18 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f003 0303 	and.w	r3, r3, #3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d007      	beq.n	8009998 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009988:	4b25      	ldr	r3, [pc, #148]	@ (8009a20 <mem_free+0xb0>)
 800998a:	f240 2273 	movw	r2, #627	@ 0x273
 800998e:	4925      	ldr	r1, [pc, #148]	@ (8009a24 <mem_free+0xb4>)
 8009990:	4825      	ldr	r0, [pc, #148]	@ (8009a28 <mem_free+0xb8>)
 8009992:	f00a fef5 	bl	8014780 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009996:	e040      	b.n	8009a1a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3b08      	subs	r3, #8
 800999c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800999e:	4b23      	ldr	r3, [pc, #140]	@ (8009a2c <mem_free+0xbc>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d306      	bcc.n	80099b6 <mem_free+0x46>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f103 020c 	add.w	r2, r3, #12
 80099ae:	4b20      	ldr	r3, [pc, #128]	@ (8009a30 <mem_free+0xc0>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d907      	bls.n	80099c6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80099b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009a20 <mem_free+0xb0>)
 80099b8:	f240 227f 	movw	r2, #639	@ 0x27f
 80099bc:	491d      	ldr	r1, [pc, #116]	@ (8009a34 <mem_free+0xc4>)
 80099be:	481a      	ldr	r0, [pc, #104]	@ (8009a28 <mem_free+0xb8>)
 80099c0:	f00a fede 	bl	8014780 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80099c4:	e029      	b.n	8009a1a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	791b      	ldrb	r3, [r3, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d107      	bne.n	80099de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80099ce:	4b14      	ldr	r3, [pc, #80]	@ (8009a20 <mem_free+0xb0>)
 80099d0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80099d4:	4918      	ldr	r1, [pc, #96]	@ (8009a38 <mem_free+0xc8>)
 80099d6:	4814      	ldr	r0, [pc, #80]	@ (8009a28 <mem_free+0xb8>)
 80099d8:	f00a fed2 	bl	8014780 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80099dc:	e01d      	b.n	8009a1a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f7ff ff8a 	bl	80098f8 <mem_link_valid>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d107      	bne.n	80099fa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80099ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009a20 <mem_free+0xb0>)
 80099ec:	f240 2295 	movw	r2, #661	@ 0x295
 80099f0:	4912      	ldr	r1, [pc, #72]	@ (8009a3c <mem_free+0xcc>)
 80099f2:	480d      	ldr	r0, [pc, #52]	@ (8009a28 <mem_free+0xb8>)
 80099f4:	f00a fec4 	bl	8014780 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80099f8:	e00f      	b.n	8009a1a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009a00:	4b0f      	ldr	r3, [pc, #60]	@ (8009a40 <mem_free+0xd0>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d202      	bcs.n	8009a10 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8009a40 <mem_free+0xd0>)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff fe97 	bl	8009744 <plug_holes>
 8009a16:	e000      	b.n	8009a1a <mem_free+0xaa>
    return;
 8009a18:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	08015898 	.word	0x08015898
 8009a24:	0801596c 	.word	0x0801596c
 8009a28:	080158e0 	.word	0x080158e0
 8009a2c:	200051d0 	.word	0x200051d0
 8009a30:	200051d4 	.word	0x200051d4
 8009a34:	08015990 	.word	0x08015990
 8009a38:	080159ac 	.word	0x080159ac
 8009a3c:	080159d4 	.word	0x080159d4
 8009a40:	200051d8 	.word	0x200051d8

08009a44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009a50:	887b      	ldrh	r3, [r7, #2]
 8009a52:	3303      	adds	r3, #3
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	f023 0303 	bic.w	r3, r3, #3
 8009a5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009a5c:	8bfb      	ldrh	r3, [r7, #30]
 8009a5e:	2b0b      	cmp	r3, #11
 8009a60:	d801      	bhi.n	8009a66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009a62:	230c      	movs	r3, #12
 8009a64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009a66:	8bfb      	ldrh	r3, [r7, #30]
 8009a68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009a6c:	d803      	bhi.n	8009a76 <mem_trim+0x32>
 8009a6e:	8bfa      	ldrh	r2, [r7, #30]
 8009a70:	887b      	ldrh	r3, [r7, #2]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d201      	bcs.n	8009a7a <mem_trim+0x36>
    return NULL;
 8009a76:	2300      	movs	r3, #0
 8009a78:	e0cc      	b.n	8009c14 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009a7a:	4b68      	ldr	r3, [pc, #416]	@ (8009c1c <mem_trim+0x1d8>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d304      	bcc.n	8009a8e <mem_trim+0x4a>
 8009a84:	4b66      	ldr	r3, [pc, #408]	@ (8009c20 <mem_trim+0x1dc>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d306      	bcc.n	8009a9c <mem_trim+0x58>
 8009a8e:	4b65      	ldr	r3, [pc, #404]	@ (8009c24 <mem_trim+0x1e0>)
 8009a90:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8009a94:	4964      	ldr	r1, [pc, #400]	@ (8009c28 <mem_trim+0x1e4>)
 8009a96:	4865      	ldr	r0, [pc, #404]	@ (8009c2c <mem_trim+0x1e8>)
 8009a98:	f00a fe72 	bl	8014780 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8009c1c <mem_trim+0x1d8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d304      	bcc.n	8009ab0 <mem_trim+0x6c>
 8009aa6:	4b5e      	ldr	r3, [pc, #376]	@ (8009c20 <mem_trim+0x1dc>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d301      	bcc.n	8009ab4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	e0af      	b.n	8009c14 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3b08      	subs	r3, #8
 8009ab8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009aba:	69b8      	ldr	r0, [r7, #24]
 8009abc:	f7ff fe30 	bl	8009720 <mem_to_ptr>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	881a      	ldrh	r2, [r3, #0]
 8009ac8:	8afb      	ldrh	r3, [r7, #22]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b08      	subs	r3, #8
 8009ad0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009ad2:	8bfa      	ldrh	r2, [r7, #30]
 8009ad4:	8abb      	ldrh	r3, [r7, #20]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d906      	bls.n	8009ae8 <mem_trim+0xa4>
 8009ada:	4b52      	ldr	r3, [pc, #328]	@ (8009c24 <mem_trim+0x1e0>)
 8009adc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009ae0:	4953      	ldr	r1, [pc, #332]	@ (8009c30 <mem_trim+0x1ec>)
 8009ae2:	4852      	ldr	r0, [pc, #328]	@ (8009c2c <mem_trim+0x1e8>)
 8009ae4:	f00a fe4c 	bl	8014780 <iprintf>
  if (newsize > size) {
 8009ae8:	8bfa      	ldrh	r2, [r7, #30]
 8009aea:	8abb      	ldrh	r3, [r7, #20]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d901      	bls.n	8009af4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	e08f      	b.n	8009c14 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009af4:	8bfa      	ldrh	r2, [r7, #30]
 8009af6:	8abb      	ldrh	r3, [r7, #20]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d101      	bne.n	8009b00 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	e089      	b.n	8009c14 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff fdf9 	bl	80096fc <ptr_to_mem>
 8009b0a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	791b      	ldrb	r3, [r3, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d13f      	bne.n	8009b94 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009b1c:	d106      	bne.n	8009b2c <mem_trim+0xe8>
 8009b1e:	4b41      	ldr	r3, [pc, #260]	@ (8009c24 <mem_trim+0x1e0>)
 8009b20:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8009b24:	4943      	ldr	r1, [pc, #268]	@ (8009c34 <mem_trim+0x1f0>)
 8009b26:	4841      	ldr	r0, [pc, #260]	@ (8009c2c <mem_trim+0x1e8>)
 8009b28:	f00a fe2a 	bl	8014780 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b32:	8afa      	ldrh	r2, [r7, #22]
 8009b34:	8bfb      	ldrh	r3, [r7, #30]
 8009b36:	4413      	add	r3, r2
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8009c38 <mem_trim+0x1f4>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d106      	bne.n	8009b56 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009b48:	89fb      	ldrh	r3, [r7, #14]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7ff fdd6 	bl	80096fc <ptr_to_mem>
 8009b50:	4603      	mov	r3, r0
 8009b52:	4a39      	ldr	r2, [pc, #228]	@ (8009c38 <mem_trim+0x1f4>)
 8009b54:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009b56:	89fb      	ldrh	r3, [r7, #14]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7ff fdcf 	bl	80096fc <ptr_to_mem>
 8009b5e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	2200      	movs	r2, #0
 8009b64:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	89ba      	ldrh	r2, [r7, #12]
 8009b6a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	8afa      	ldrh	r2, [r7, #22]
 8009b70:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	89fa      	ldrh	r2, [r7, #14]
 8009b76:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009b80:	d047      	beq.n	8009c12 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fdb8 	bl	80096fc <ptr_to_mem>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	89fb      	ldrh	r3, [r7, #14]
 8009b90:	8053      	strh	r3, [r2, #2]
 8009b92:	e03e      	b.n	8009c12 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009b94:	8bfb      	ldrh	r3, [r7, #30]
 8009b96:	f103 0214 	add.w	r2, r3, #20
 8009b9a:	8abb      	ldrh	r3, [r7, #20]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d838      	bhi.n	8009c12 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009ba0:	8afa      	ldrh	r2, [r7, #22]
 8009ba2:	8bfb      	ldrh	r3, [r7, #30]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	3308      	adds	r3, #8
 8009baa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009bb4:	d106      	bne.n	8009bc4 <mem_trim+0x180>
 8009bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c24 <mem_trim+0x1e0>)
 8009bb8:	f240 3216 	movw	r2, #790	@ 0x316
 8009bbc:	491d      	ldr	r1, [pc, #116]	@ (8009c34 <mem_trim+0x1f0>)
 8009bbe:	481b      	ldr	r0, [pc, #108]	@ (8009c2c <mem_trim+0x1e8>)
 8009bc0:	f00a fdde 	bl	8014780 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009bc4:	89fb      	ldrh	r3, [r7, #14]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7ff fd98 	bl	80096fc <ptr_to_mem>
 8009bcc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009bce:	4b1a      	ldr	r3, [pc, #104]	@ (8009c38 <mem_trim+0x1f4>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d202      	bcs.n	8009bde <mem_trim+0x19a>
      lfree = mem2;
 8009bd8:	4a17      	ldr	r2, [pc, #92]	@ (8009c38 <mem_trim+0x1f4>)
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2200      	movs	r2, #0
 8009be2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	881a      	ldrh	r2, [r3, #0]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	8afa      	ldrh	r2, [r7, #22]
 8009bf0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	89fa      	ldrh	r2, [r7, #14]
 8009bf6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009c00:	d007      	beq.n	8009c12 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fd78 	bl	80096fc <ptr_to_mem>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	89fb      	ldrh	r3, [r7, #14]
 8009c10:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009c12:	687b      	ldr	r3, [r7, #4]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3720      	adds	r7, #32
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	200051d0 	.word	0x200051d0
 8009c20:	200051d4 	.word	0x200051d4
 8009c24:	08015898 	.word	0x08015898
 8009c28:	08015a08 	.word	0x08015a08
 8009c2c:	080158e0 	.word	0x080158e0
 8009c30:	08015a20 	.word	0x08015a20
 8009c34:	08015a40 	.word	0x08015a40
 8009c38:	200051d8 	.word	0x200051d8

08009c3c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009c46:	88fb      	ldrh	r3, [r7, #6]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <mem_malloc+0x14>
    return NULL;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	e0d9      	b.n	8009e04 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009c50:	88fb      	ldrh	r3, [r7, #6]
 8009c52:	3303      	adds	r3, #3
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009c5c:	8bbb      	ldrh	r3, [r7, #28]
 8009c5e:	2b0b      	cmp	r3, #11
 8009c60:	d801      	bhi.n	8009c66 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009c62:	230c      	movs	r3, #12
 8009c64:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009c66:	8bbb      	ldrh	r3, [r7, #28]
 8009c68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009c6c:	d803      	bhi.n	8009c76 <mem_malloc+0x3a>
 8009c6e:	8bba      	ldrh	r2, [r7, #28]
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d201      	bcs.n	8009c7a <mem_malloc+0x3e>
    return NULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e0c4      	b.n	8009e04 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c7a:	4b64      	ldr	r3, [pc, #400]	@ (8009e0c <mem_malloc+0x1d0>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fd4e 	bl	8009720 <mem_to_ptr>
 8009c84:	4603      	mov	r3, r0
 8009c86:	83fb      	strh	r3, [r7, #30]
 8009c88:	e0b4      	b.n	8009df4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009c8a:	8bfb      	ldrh	r3, [r7, #30]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7ff fd35 	bl	80096fc <ptr_to_mem>
 8009c92:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	791b      	ldrb	r3, [r3, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f040 80a4 	bne.w	8009de6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	8bfb      	ldrh	r3, [r7, #30]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	f1a3 0208 	sub.w	r2, r3, #8
 8009cac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	f0c0 8099 	bcc.w	8009de6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	8bfb      	ldrh	r3, [r7, #30]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	f1a3 0208 	sub.w	r2, r3, #8
 8009cc2:	8bbb      	ldrh	r3, [r7, #28]
 8009cc4:	3314      	adds	r3, #20
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d333      	bcc.n	8009d32 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009cca:	8bfa      	ldrh	r2, [r7, #30]
 8009ccc:	8bbb      	ldrh	r3, [r7, #28]
 8009cce:	4413      	add	r3, r2
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009cd6:	8a7b      	ldrh	r3, [r7, #18]
 8009cd8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009cdc:	d106      	bne.n	8009cec <mem_malloc+0xb0>
 8009cde:	4b4c      	ldr	r3, [pc, #304]	@ (8009e10 <mem_malloc+0x1d4>)
 8009ce0:	f240 3287 	movw	r2, #903	@ 0x387
 8009ce4:	494b      	ldr	r1, [pc, #300]	@ (8009e14 <mem_malloc+0x1d8>)
 8009ce6:	484c      	ldr	r0, [pc, #304]	@ (8009e18 <mem_malloc+0x1dc>)
 8009ce8:	f00a fd4a 	bl	8014780 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009cec:	8a7b      	ldrh	r3, [r7, #18]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fd04 	bl	80096fc <ptr_to_mem>
 8009cf4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	881a      	ldrh	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8bfa      	ldrh	r2, [r7, #30]
 8009d08:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	8a7a      	ldrh	r2, [r7, #18]
 8009d0e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2201      	movs	r2, #1
 8009d14:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009d1e:	d00b      	beq.n	8009d38 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff fce9 	bl	80096fc <ptr_to_mem>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	8a7b      	ldrh	r3, [r7, #18]
 8009d2e:	8053      	strh	r3, [r2, #2]
 8009d30:	e002      	b.n	8009d38 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2201      	movs	r2, #1
 8009d36:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009d38:	4b34      	ldr	r3, [pc, #208]	@ (8009e0c <mem_malloc+0x1d0>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d127      	bne.n	8009d92 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009d42:	4b32      	ldr	r3, [pc, #200]	@ (8009e0c <mem_malloc+0x1d0>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009d48:	e005      	b.n	8009d56 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7ff fcd4 	bl	80096fc <ptr_to_mem>
 8009d54:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	791b      	ldrb	r3, [r3, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <mem_malloc+0x12c>
 8009d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8009e1c <mem_malloc+0x1e0>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d1f0      	bne.n	8009d4a <mem_malloc+0x10e>
          }
          lfree = cur;
 8009d68:	4a28      	ldr	r2, [pc, #160]	@ (8009e0c <mem_malloc+0x1d0>)
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009d6e:	4b27      	ldr	r3, [pc, #156]	@ (8009e0c <mem_malloc+0x1d0>)
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	4b2a      	ldr	r3, [pc, #168]	@ (8009e1c <mem_malloc+0x1e0>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d00b      	beq.n	8009d92 <mem_malloc+0x156>
 8009d7a:	4b24      	ldr	r3, [pc, #144]	@ (8009e0c <mem_malloc+0x1d0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	791b      	ldrb	r3, [r3, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <mem_malloc+0x156>
 8009d84:	4b22      	ldr	r3, [pc, #136]	@ (8009e10 <mem_malloc+0x1d4>)
 8009d86:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009d8a:	4925      	ldr	r1, [pc, #148]	@ (8009e20 <mem_malloc+0x1e4>)
 8009d8c:	4822      	ldr	r0, [pc, #136]	@ (8009e18 <mem_malloc+0x1dc>)
 8009d8e:	f00a fcf7 	bl	8014780 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009d92:	8bba      	ldrh	r2, [r7, #28]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	4413      	add	r3, r2
 8009d98:	3308      	adds	r3, #8
 8009d9a:	4a20      	ldr	r2, [pc, #128]	@ (8009e1c <mem_malloc+0x1e0>)
 8009d9c:	6812      	ldr	r2, [r2, #0]
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d906      	bls.n	8009db0 <mem_malloc+0x174>
 8009da2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e10 <mem_malloc+0x1d4>)
 8009da4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009da8:	491e      	ldr	r1, [pc, #120]	@ (8009e24 <mem_malloc+0x1e8>)
 8009daa:	481b      	ldr	r0, [pc, #108]	@ (8009e18 <mem_malloc+0x1dc>)
 8009dac:	f00a fce8 	bl	8014780 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d006      	beq.n	8009dc8 <mem_malloc+0x18c>
 8009dba:	4b15      	ldr	r3, [pc, #84]	@ (8009e10 <mem_malloc+0x1d4>)
 8009dbc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009dc0:	4919      	ldr	r1, [pc, #100]	@ (8009e28 <mem_malloc+0x1ec>)
 8009dc2:	4815      	ldr	r0, [pc, #84]	@ (8009e18 <mem_malloc+0x1dc>)
 8009dc4:	f00a fcdc 	bl	8014780 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d006      	beq.n	8009de0 <mem_malloc+0x1a4>
 8009dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8009e10 <mem_malloc+0x1d4>)
 8009dd4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009dd8:	4914      	ldr	r1, [pc, #80]	@ (8009e2c <mem_malloc+0x1f0>)
 8009dda:	480f      	ldr	r0, [pc, #60]	@ (8009e18 <mem_malloc+0x1dc>)
 8009ddc:	f00a fcd0 	bl	8014780 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	3308      	adds	r3, #8
 8009de4:	e00e      	b.n	8009e04 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009de6:	8bfb      	ldrh	r3, [r7, #30]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff fc87 	bl	80096fc <ptr_to_mem>
 8009dee:	4603      	mov	r3, r0
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009df4:	8bfa      	ldrh	r2, [r7, #30]
 8009df6:	8bbb      	ldrh	r3, [r7, #28]
 8009df8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	f4ff af44 	bcc.w	8009c8a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	200051d8 	.word	0x200051d8
 8009e10:	08015898 	.word	0x08015898
 8009e14:	08015a40 	.word	0x08015a40
 8009e18:	080158e0 	.word	0x080158e0
 8009e1c:	200051d4 	.word	0x200051d4
 8009e20:	08015a54 	.word	0x08015a54
 8009e24:	08015a70 	.word	0x08015a70
 8009e28:	08015aa0 	.word	0x08015aa0
 8009e2c:	08015ad0 	.word	0x08015ad0

08009e30 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	3303      	adds	r3, #3
 8009e46:	f023 0303 	bic.w	r3, r3, #3
 8009e4a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	e011      	b.n	8009e76 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	889b      	ldrh	r3, [r3, #4]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3301      	adds	r3, #1
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	88db      	ldrh	r3, [r3, #6]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	dbe7      	blt.n	8009e52 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e96:	2300      	movs	r3, #0
 8009e98:	80fb      	strh	r3, [r7, #6]
 8009e9a:	e009      	b.n	8009eb0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	4a08      	ldr	r2, [pc, #32]	@ (8009ec0 <memp_init+0x30>)
 8009ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff ffc3 	bl	8009e30 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009eaa:	88fb      	ldrh	r3, [r7, #6]
 8009eac:	3301      	adds	r3, #1
 8009eae:	80fb      	strh	r3, [r7, #6]
 8009eb0:	88fb      	ldrh	r3, [r7, #6]
 8009eb2:	2b08      	cmp	r3, #8
 8009eb4:	d9f2      	bls.n	8009e9c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009eb6:	bf00      	nop
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	08018dac 	.word	0x08018dac

08009ec4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d012      	beq.n	8009f00 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	6812      	ldr	r2, [r2, #0]
 8009ee2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f003 0303 	and.w	r3, r3, #3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d006      	beq.n	8009efc <do_memp_malloc_pool+0x38>
 8009eee:	4b07      	ldr	r3, [pc, #28]	@ (8009f0c <do_memp_malloc_pool+0x48>)
 8009ef0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009ef4:	4906      	ldr	r1, [pc, #24]	@ (8009f10 <do_memp_malloc_pool+0x4c>)
 8009ef6:	4807      	ldr	r0, [pc, #28]	@ (8009f14 <do_memp_malloc_pool+0x50>)
 8009ef8:	f00a fc42 	bl	8014780 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	e000      	b.n	8009f02 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	08015b5c 	.word	0x08015b5c
 8009f10:	08015b8c 	.word	0x08015b8c
 8009f14:	08015bb0 	.word	0x08015bb0

08009f18 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d106      	bne.n	8009f34 <memp_malloc_pool+0x1c>
 8009f26:	4b0a      	ldr	r3, [pc, #40]	@ (8009f50 <memp_malloc_pool+0x38>)
 8009f28:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8009f2c:	4909      	ldr	r1, [pc, #36]	@ (8009f54 <memp_malloc_pool+0x3c>)
 8009f2e:	480a      	ldr	r0, [pc, #40]	@ (8009f58 <memp_malloc_pool+0x40>)
 8009f30:	f00a fc26 	bl	8014780 <iprintf>
  if (desc == NULL) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <memp_malloc_pool+0x26>
    return NULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e003      	b.n	8009f46 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff ffc0 	bl	8009ec4 <do_memp_malloc_pool>
 8009f44:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	08015b5c 	.word	0x08015b5c
 8009f54:	08015bd8 	.word	0x08015bd8
 8009f58:	08015bb0 	.word	0x08015bb0

08009f5c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	4603      	mov	r3, r0
 8009f64:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009f66:	79fb      	ldrb	r3, [r7, #7]
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d908      	bls.n	8009f7e <memp_malloc+0x22>
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f98 <memp_malloc+0x3c>)
 8009f6e:	f240 1257 	movw	r2, #343	@ 0x157
 8009f72:	490a      	ldr	r1, [pc, #40]	@ (8009f9c <memp_malloc+0x40>)
 8009f74:	480a      	ldr	r0, [pc, #40]	@ (8009fa0 <memp_malloc+0x44>)
 8009f76:	f00a fc03 	bl	8014780 <iprintf>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e008      	b.n	8009f90 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	4a08      	ldr	r2, [pc, #32]	@ (8009fa4 <memp_malloc+0x48>)
 8009f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff ff9c 	bl	8009ec4 <do_memp_malloc_pool>
 8009f8c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	08015b5c 	.word	0x08015b5c
 8009f9c:	08015bec 	.word	0x08015bec
 8009fa0:	08015bb0 	.word	0x08015bb0
 8009fa4:	08018dac 	.word	0x08018dac

08009fa8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d006      	beq.n	8009fca <do_memp_free_pool+0x22>
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe8 <do_memp_free_pool+0x40>)
 8009fbe:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8009fc2:	490a      	ldr	r1, [pc, #40]	@ (8009fec <do_memp_free_pool+0x44>)
 8009fc4:	480a      	ldr	r0, [pc, #40]	@ (8009ff0 <do_memp_free_pool+0x48>)
 8009fc6:	f00a fbdb 	bl	8014780 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009fe0:	bf00      	nop
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	08015b5c 	.word	0x08015b5c
 8009fec:	08015c0c 	.word	0x08015c0c
 8009ff0:	08015bb0 	.word	0x08015bb0

08009ff4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d106      	bne.n	800a012 <memp_free_pool+0x1e>
 800a004:	4b0a      	ldr	r3, [pc, #40]	@ (800a030 <memp_free_pool+0x3c>)
 800a006:	f240 1295 	movw	r2, #405	@ 0x195
 800a00a:	490a      	ldr	r1, [pc, #40]	@ (800a034 <memp_free_pool+0x40>)
 800a00c:	480a      	ldr	r0, [pc, #40]	@ (800a038 <memp_free_pool+0x44>)
 800a00e:	f00a fbb7 	bl	8014780 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d007      	beq.n	800a028 <memp_free_pool+0x34>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d004      	beq.n	800a028 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7ff ffc1 	bl	8009fa8 <do_memp_free_pool>
 800a026:	e000      	b.n	800a02a <memp_free_pool+0x36>
    return;
 800a028:	bf00      	nop
}
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	08015b5c 	.word	0x08015b5c
 800a034:	08015bd8 	.word	0x08015bd8
 800a038:	08015bb0 	.word	0x08015bb0

0800a03c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	6039      	str	r1, [r7, #0]
 800a046:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	2b08      	cmp	r3, #8
 800a04c:	d907      	bls.n	800a05e <memp_free+0x22>
 800a04e:	4b0c      	ldr	r3, [pc, #48]	@ (800a080 <memp_free+0x44>)
 800a050:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a054:	490b      	ldr	r1, [pc, #44]	@ (800a084 <memp_free+0x48>)
 800a056:	480c      	ldr	r0, [pc, #48]	@ (800a088 <memp_free+0x4c>)
 800a058:	f00a fb92 	bl	8014780 <iprintf>
 800a05c:	e00c      	b.n	800a078 <memp_free+0x3c>

  if (mem == NULL) {
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d008      	beq.n	800a076 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	4a09      	ldr	r2, [pc, #36]	@ (800a08c <memp_free+0x50>)
 800a068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff ff9a 	bl	8009fa8 <do_memp_free_pool>
 800a074:	e000      	b.n	800a078 <memp_free+0x3c>
    return;
 800a076:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	08015b5c 	.word	0x08015b5c
 800a084:	08015c2c 	.word	0x08015c2c
 800a088:	08015bb0 	.word	0x08015bb0
 800a08c:	08018dac 	.word	0x08018dac

0800a090 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a090:	b480      	push	{r7}
 800a092:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a094:	bf00      	nop
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
	...

0800a0a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af02      	add	r7, sp, #8
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d108      	bne.n	800a0c6 <netif_add+0x26>
 800a0b4:	4b96      	ldr	r3, [pc, #600]	@ (800a310 <netif_add+0x270>)
 800a0b6:	f240 1227 	movw	r2, #295	@ 0x127
 800a0ba:	4996      	ldr	r1, [pc, #600]	@ (800a314 <netif_add+0x274>)
 800a0bc:	4896      	ldr	r0, [pc, #600]	@ (800a318 <netif_add+0x278>)
 800a0be:	f00a fb5f 	bl	8014780 <iprintf>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e14c      	b.n	800a360 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d108      	bne.n	800a0de <netif_add+0x3e>
 800a0cc:	4b90      	ldr	r3, [pc, #576]	@ (800a310 <netif_add+0x270>)
 800a0ce:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a0d2:	4992      	ldr	r1, [pc, #584]	@ (800a31c <netif_add+0x27c>)
 800a0d4:	4890      	ldr	r0, [pc, #576]	@ (800a318 <netif_add+0x278>)
 800a0d6:	f00a fb53 	bl	8014780 <iprintf>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e140      	b.n	800a360 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a0e4:	4b8e      	ldr	r3, [pc, #568]	@ (800a320 <netif_add+0x280>)
 800a0e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a0ee:	4b8c      	ldr	r3, [pc, #560]	@ (800a320 <netif_add+0x280>)
 800a0f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a0f8:	4b89      	ldr	r3, [pc, #548]	@ (800a320 <netif_add+0x280>)
 800a0fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4a84      	ldr	r2, [pc, #528]	@ (800a324 <netif_add+0x284>)
 800a112:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a3a      	ldr	r2, [r7, #32]
 800a12c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a12e:	4b7e      	ldr	r3, [pc, #504]	@ (800a328 <netif_add+0x288>)
 800a130:	781a      	ldrb	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a13c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f9f5 	bl	800a534 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	4798      	blx	r3
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <netif_add+0xba>
    return NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	e102      	b.n	800a360 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a160:	2bff      	cmp	r3, #255	@ 0xff
 800a162:	d103      	bne.n	800a16c <netif_add+0xcc>
        netif->num = 0;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a170:	4b6e      	ldr	r3, [pc, #440]	@ (800a32c <netif_add+0x28c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	617b      	str	r3, [r7, #20]
 800a176:	e02b      	b.n	800a1d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d106      	bne.n	800a18e <netif_add+0xee>
 800a180:	4b63      	ldr	r3, [pc, #396]	@ (800a310 <netif_add+0x270>)
 800a182:	f240 128b 	movw	r2, #395	@ 0x18b
 800a186:	496a      	ldr	r1, [pc, #424]	@ (800a330 <netif_add+0x290>)
 800a188:	4863      	ldr	r0, [pc, #396]	@ (800a318 <netif_add+0x278>)
 800a18a:	f00a faf9 	bl	8014780 <iprintf>
        num_netifs++;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3301      	adds	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2bff      	cmp	r3, #255	@ 0xff
 800a198:	dd06      	ble.n	800a1a8 <netif_add+0x108>
 800a19a:	4b5d      	ldr	r3, [pc, #372]	@ (800a310 <netif_add+0x270>)
 800a19c:	f240 128d 	movw	r2, #397	@ 0x18d
 800a1a0:	4964      	ldr	r1, [pc, #400]	@ (800a334 <netif_add+0x294>)
 800a1a2:	485d      	ldr	r0, [pc, #372]	@ (800a318 <netif_add+0x278>)
 800a1a4:	f00a faec 	bl	8014780 <iprintf>
        if (netif2->num == netif->num) {
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d108      	bne.n	800a1ca <netif_add+0x12a>
          netif->num++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1be:	3301      	adds	r3, #1
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800a1c8:	e005      	b.n	800a1d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1d0      	bne.n	800a178 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1be      	bne.n	800a15a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1e2:	2bfe      	cmp	r3, #254	@ 0xfe
 800a1e4:	d103      	bne.n	800a1ee <netif_add+0x14e>
    netif_num = 0;
 800a1e6:	4b50      	ldr	r3, [pc, #320]	@ (800a328 <netif_add+0x288>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	e006      	b.n	800a1fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	4b4b      	ldr	r3, [pc, #300]	@ (800a328 <netif_add+0x288>)
 800a1fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a1fc:	4b4b      	ldr	r3, [pc, #300]	@ (800a32c <netif_add+0x28c>)
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a204:	4a49      	ldr	r2, [pc, #292]	@ (800a32c <netif_add+0x28c>)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a210:	4619      	mov	r1, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a218:	461a      	mov	r2, r3
 800a21a:	4847      	ldr	r0, [pc, #284]	@ (800a338 <netif_add+0x298>)
 800a21c:	f00a fab0 	bl	8014780 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800a220:	4846      	ldr	r0, [pc, #280]	@ (800a33c <netif_add+0x29c>)
 800a222:	f00a faad 	bl	8014780 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <netif_add+0x194>
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	4619      	mov	r1, r3
 800a232:	e000      	b.n	800a236 <netif_add+0x196>
 800a234:	2100      	movs	r1, #0
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d004      	beq.n	800a246 <netif_add+0x1a6>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	3301      	adds	r3, #1
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	e000      	b.n	800a248 <netif_add+0x1a8>
 800a246:	2200      	movs	r2, #0
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d004      	beq.n	800a258 <netif_add+0x1b8>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	3302      	adds	r3, #2
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	e000      	b.n	800a25a <netif_add+0x1ba>
 800a258:	2000      	movs	r0, #0
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <netif_add+0x1c8>
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	3303      	adds	r3, #3
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	e000      	b.n	800a26a <netif_add+0x1ca>
 800a268:	2300      	movs	r3, #0
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	4603      	mov	r3, r0
 800a26e:	4834      	ldr	r0, [pc, #208]	@ (800a340 <netif_add+0x2a0>)
 800a270:	f00a fa86 	bl	8014780 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800a274:	4833      	ldr	r0, [pc, #204]	@ (800a344 <netif_add+0x2a4>)
 800a276:	f00a fa83 	bl	8014780 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <netif_add+0x1e8>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	4619      	mov	r1, r3
 800a286:	e000      	b.n	800a28a <netif_add+0x1ea>
 800a288:	2100      	movs	r1, #0
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d004      	beq.n	800a29a <netif_add+0x1fa>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3301      	adds	r3, #1
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	e000      	b.n	800a29c <netif_add+0x1fc>
 800a29a:	2200      	movs	r2, #0
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d004      	beq.n	800a2ac <netif_add+0x20c>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	e000      	b.n	800a2ae <netif_add+0x20e>
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <netif_add+0x21c>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3303      	adds	r3, #3
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	e000      	b.n	800a2be <netif_add+0x21e>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	481f      	ldr	r0, [pc, #124]	@ (800a340 <netif_add+0x2a0>)
 800a2c4:	f00a fa5c 	bl	8014780 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800a2c8:	481f      	ldr	r0, [pc, #124]	@ (800a348 <netif_add+0x2a8>)
 800a2ca:	f00a fa59 	bl	8014780 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d003      	beq.n	800a2dc <netif_add+0x23c>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	e000      	b.n	800a2de <netif_add+0x23e>
 800a2dc:	2100      	movs	r1, #0
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <netif_add+0x24e>
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	e000      	b.n	800a2f0 <netif_add+0x250>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d004      	beq.n	800a300 <netif_add+0x260>
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	3302      	adds	r3, #2
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	e000      	b.n	800a302 <netif_add+0x262>
 800a300:	2000      	movs	r0, #0
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d021      	beq.n	800a34c <netif_add+0x2ac>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	3303      	adds	r3, #3
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	e01e      	b.n	800a34e <netif_add+0x2ae>
 800a310:	08015c48 	.word	0x08015c48
 800a314:	08015cdc 	.word	0x08015cdc
 800a318:	08015c98 	.word	0x08015c98
 800a31c:	08015cf8 	.word	0x08015cf8
 800a320:	08018e10 	.word	0x08018e10
 800a324:	0800a837 	.word	0x0800a837
 800a328:	20008110 	.word	0x20008110
 800a32c:	20008108 	.word	0x20008108
 800a330:	08015d1c 	.word	0x08015d1c
 800a334:	08015d30 	.word	0x08015d30
 800a338:	08015d60 	.word	0x08015d60
 800a33c:	08015d80 	.word	0x08015d80
 800a340:	08015d88 	.word	0x08015d88
 800a344:	08015d98 	.word	0x08015d98
 800a348:	08015da4 	.word	0x08015da4
 800a34c:	2300      	movs	r3, #0
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	4603      	mov	r3, r0
 800a352:	4805      	ldr	r0, [pc, #20]	@ (800a368 <netif_add+0x2c8>)
 800a354:	f00a fa14 	bl	8014780 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800a358:	200a      	movs	r0, #10
 800a35a:	f00a fa23 	bl	80147a4 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a35e:	68fb      	ldr	r3, [r7, #12]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	08015d88 	.word	0x08015d88

0800a36c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f002 fbb9 	bl	800caf0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f007 f927 	bl	80115d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d106      	bne.n	800a3b0 <netif_do_set_ipaddr+0x20>
 800a3a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a41c <netif_do_set_ipaddr+0x8c>)
 800a3a4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800a3a8:	491d      	ldr	r1, [pc, #116]	@ (800a420 <netif_do_set_ipaddr+0x90>)
 800a3aa:	481e      	ldr	r0, [pc, #120]	@ (800a424 <netif_do_set_ipaddr+0x94>)
 800a3ac:	f00a f9e8 	bl	8014780 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <netif_do_set_ipaddr+0x34>
 800a3b6:	4b19      	ldr	r3, [pc, #100]	@ (800a41c <netif_do_set_ipaddr+0x8c>)
 800a3b8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800a3bc:	4918      	ldr	r1, [pc, #96]	@ (800a420 <netif_do_set_ipaddr+0x90>)
 800a3be:	4819      	ldr	r0, [pc, #100]	@ (800a424 <netif_do_set_ipaddr+0x94>)
 800a3c0:	f00a f9de 	bl	8014780 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d01f      	beq.n	800a412 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800a3e2:	4811      	ldr	r0, [pc, #68]	@ (800a428 <netif_do_set_ipaddr+0x98>)
 800a3e4:	f00a fa3c 	bl	8014860 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a3e8:	f107 0314 	add.w	r3, r7, #20
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff ffbc 	bl	800a36c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <netif_do_set_ipaddr+0x70>
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	e000      	b.n	800a402 <netif_do_set_ipaddr+0x72>
 800a400:	2300      	movs	r3, #0
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a406:	2101      	movs	r1, #1
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 f92d 	bl	800a668 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a40e:	2301      	movs	r3, #1
 800a410:	e000      	b.n	800a414 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	08015c48 	.word	0x08015c48
 800a420:	08015dac 	.word	0x08015dac
 800a424:	08015c98 	.word	0x08015c98
 800a428:	08015dbc 	.word	0x08015dbc

0800a42c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a42c:	b5b0      	push	{r4, r5, r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af04      	add	r7, sp, #16
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3308      	adds	r3, #8
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d02d      	beq.n	800a4a2 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <netif_do_set_netmask+0x26>
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	e000      	b.n	800a454 <netif_do_set_netmask+0x28>
 800a452:	2300      	movs	r3, #0
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a45e:	4618      	mov	r0, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a466:	461c      	mov	r4, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3308      	adds	r3, #8
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	461d      	mov	r5, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3308      	adds	r3, #8
 800a474:	3301      	adds	r3, #1
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3308      	adds	r3, #8
 800a47e:	3302      	adds	r3, #2
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	4619      	mov	r1, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	3308      	adds	r3, #8
 800a488:	3303      	adds	r3, #3
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	9302      	str	r3, [sp, #8]
 800a48e:	9101      	str	r1, [sp, #4]
 800a490:	9200      	str	r2, [sp, #0]
 800a492:	462b      	mov	r3, r5
 800a494:	4622      	mov	r2, r4
 800a496:	4601      	mov	r1, r0
 800a498:	4804      	ldr	r0, [pc, #16]	@ (800a4ac <netif_do_set_netmask+0x80>)
 800a49a:	f00a f971 	bl	8014780 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a4ac:	08015e0c 	.word	0x08015e0c

0800a4b0 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a4b0:	b5b0      	push	{r4, r5, r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af04      	add	r7, sp, #16
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	330c      	adds	r3, #12
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d02d      	beq.n	800a526 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <netif_do_set_gw+0x26>
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	e000      	b.n	800a4d8 <netif_do_set_gw+0x28>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a4ea:	461c      	mov	r4, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	330c      	adds	r3, #12
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	461d      	mov	r5, r3
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	330c      	adds	r3, #12
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	330c      	adds	r3, #12
 800a502:	3302      	adds	r3, #2
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	4619      	mov	r1, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	330c      	adds	r3, #12
 800a50c:	3303      	adds	r3, #3
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	9302      	str	r3, [sp, #8]
 800a512:	9101      	str	r1, [sp, #4]
 800a514:	9200      	str	r2, [sp, #0]
 800a516:	462b      	mov	r3, r5
 800a518:	4622      	mov	r2, r4
 800a51a:	4601      	mov	r1, r0
 800a51c:	4804      	ldr	r0, [pc, #16]	@ (800a530 <netif_do_set_gw+0x80>)
 800a51e:	f00a f92f 	bl	8014780 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a522:	2301      	movs	r3, #1
 800a524:	e000      	b.n	800a528 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bdb0      	pop	{r4, r5, r7, pc}
 800a530:	08015e6c 	.word	0x08015e6c

0800a534 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b088      	sub	sp, #32
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a546:	2300      	movs	r3, #0
 800a548:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a550:	4b1c      	ldr	r3, [pc, #112]	@ (800a5c4 <netif_set_addr+0x90>)
 800a552:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a55a:	4b1a      	ldr	r3, [pc, #104]	@ (800a5c4 <netif_set_addr+0x90>)
 800a55c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a564:	4b17      	ldr	r3, [pc, #92]	@ (800a5c4 <netif_set_addr+0x90>)
 800a566:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <netif_set_addr+0x42>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <netif_set_addr+0x46>
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <netif_set_addr+0x48>
 800a57a:	2300      	movs	r3, #0
 800a57c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d006      	beq.n	800a592 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a584:	f107 0310 	add.w	r3, r7, #16
 800a588:	461a      	mov	r2, r3
 800a58a:	68b9      	ldr	r1, [r7, #8]
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff feff 	bl	800a390 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff ff48 	bl	800a42c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff ff85 	bl	800a4b0 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d106      	bne.n	800a5ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a5ac:	f107 0310 	add.w	r3, r7, #16
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	68b9      	ldr	r1, [r7, #8]
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f7ff feeb 	bl	800a390 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a5ba:	bf00      	nop
 800a5bc:	3720      	adds	r7, #32
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	08018e10 	.word	0x08018e10

0800a5c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a5d0:	4a0d      	ldr	r2, [pc, #52]	@ (800a608 <netif_set_default+0x40>)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d004      	beq.n	800a5e6 <netif_set_default+0x1e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	e000      	b.n	800a5e8 <netif_set_default+0x20>
 800a5e6:	2127      	movs	r1, #39	@ 0x27
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <netif_set_default+0x2e>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a5f4:	e000      	b.n	800a5f8 <netif_set_default+0x30>
 800a5f6:	2327      	movs	r3, #39	@ 0x27
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4804      	ldr	r0, [pc, #16]	@ (800a60c <netif_set_default+0x44>)
 800a5fc:	f00a f8c0 	bl	8014780 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	2000810c 	.word	0x2000810c
 800a60c:	08015ee0 	.word	0x08015ee0

0800a610 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d107      	bne.n	800a62e <netif_set_up+0x1e>
 800a61e:	4b0f      	ldr	r3, [pc, #60]	@ (800a65c <netif_set_up+0x4c>)
 800a620:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800a624:	490e      	ldr	r1, [pc, #56]	@ (800a660 <netif_set_up+0x50>)
 800a626:	480f      	ldr	r0, [pc, #60]	@ (800a664 <netif_set_up+0x54>)
 800a628:	f00a f8aa 	bl	8014780 <iprintf>
 800a62c:	e013      	b.n	800a656 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10c      	bne.n	800a656 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a642:	f043 0301 	orr.w	r3, r3, #1
 800a646:	b2da      	uxtb	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a64e:	2103      	movs	r1, #3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f809 	bl	800a668 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	08015c48 	.word	0x08015c48
 800a660:	08015f08 	.word	0x08015f08
 800a664:	08015c98 	.word	0x08015c98

0800a668 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <netif_issue_reports+0x20>
 800a67a:	4b18      	ldr	r3, [pc, #96]	@ (800a6dc <netif_issue_reports+0x74>)
 800a67c:	f240 326d 	movw	r2, #877	@ 0x36d
 800a680:	4917      	ldr	r1, [pc, #92]	@ (800a6e0 <netif_issue_reports+0x78>)
 800a682:	4818      	ldr	r0, [pc, #96]	@ (800a6e4 <netif_issue_reports+0x7c>)
 800a684:	f00a f87c 	bl	8014780 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a68e:	f003 0304 	and.w	r3, r3, #4
 800a692:	2b00      	cmp	r3, #0
 800a694:	d01e      	beq.n	800a6d4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a69c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d017      	beq.n	800a6d4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a6a4:	78fb      	ldrb	r3, [r7, #3]
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d013      	beq.n	800a6d6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00e      	beq.n	800a6d6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a6be:	f003 0308 	and.w	r3, r3, #8
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d007      	beq.n	800a6d6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f007 ff5d 	bl	801258c <etharp_request>
 800a6d2:	e000      	b.n	800a6d6 <netif_issue_reports+0x6e>
    return;
 800a6d4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	08015c48 	.word	0x08015c48
 800a6e0:	08015f24 	.word	0x08015f24
 800a6e4:	08015c98 	.word	0x08015c98

0800a6e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d107      	bne.n	800a706 <netif_set_down+0x1e>
 800a6f6:	4b12      	ldr	r3, [pc, #72]	@ (800a740 <netif_set_down+0x58>)
 800a6f8:	f240 329b 	movw	r2, #923	@ 0x39b
 800a6fc:	4911      	ldr	r1, [pc, #68]	@ (800a744 <netif_set_down+0x5c>)
 800a6fe:	4812      	ldr	r0, [pc, #72]	@ (800a748 <netif_set_down+0x60>)
 800a700:	f00a f83e 	bl	8014780 <iprintf>
 800a704:	e019      	b.n	800a73a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d012      	beq.n	800a73a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a72c:	f003 0308 	and.w	r3, r3, #8
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f007 fae7 	bl	8011d08 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	08015c48 	.word	0x08015c48
 800a744:	08015f48 	.word	0x08015f48
 800a748:	08015c98 	.word	0x08015c98

0800a74c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d107      	bne.n	800a76a <netif_set_link_up+0x1e>
 800a75a:	4b13      	ldr	r3, [pc, #76]	@ (800a7a8 <netif_set_link_up+0x5c>)
 800a75c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800a760:	4912      	ldr	r1, [pc, #72]	@ (800a7ac <netif_set_link_up+0x60>)
 800a762:	4813      	ldr	r0, [pc, #76]	@ (800a7b0 <netif_set_link_up+0x64>)
 800a764:	f00a f80c 	bl	8014780 <iprintf>
 800a768:	e01b      	b.n	800a7a2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a770:	f003 0304 	and.w	r3, r3, #4
 800a774:	2b00      	cmp	r3, #0
 800a776:	d114      	bne.n	800a7a2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a77e:	f043 0304 	orr.w	r3, r3, #4
 800a782:	b2da      	uxtb	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a78a:	2103      	movs	r1, #3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff ff6b 	bl	800a668 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <netif_set_link_up+0x56>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	08015c48 	.word	0x08015c48
 800a7ac:	08015f68 	.word	0x08015f68
 800a7b0:	08015c98 	.word	0x08015c98

0800a7b4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d107      	bne.n	800a7d2 <netif_set_link_down+0x1e>
 800a7c2:	4b11      	ldr	r3, [pc, #68]	@ (800a808 <netif_set_link_down+0x54>)
 800a7c4:	f240 4206 	movw	r2, #1030	@ 0x406
 800a7c8:	4910      	ldr	r1, [pc, #64]	@ (800a80c <netif_set_link_down+0x58>)
 800a7ca:	4811      	ldr	r0, [pc, #68]	@ (800a810 <netif_set_link_down+0x5c>)
 800a7cc:	f009 ffd8 	bl	8014780 <iprintf>
 800a7d0:	e017      	b.n	800a802 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d010      	beq.n	800a802 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7e6:	f023 0304 	bic.w	r3, r3, #4
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <netif_set_link_down+0x4e>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	08015c48 	.word	0x08015c48
 800a80c:	08015f8c 	.word	0x08015f8c
 800a810:	08015c98 	.word	0x08015c98

0800a814 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	61da      	str	r2, [r3, #28]
  }
}
 800a82a:	bf00      	nop
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a836:	b480      	push	{r7}
 800a838:	b085      	sub	sp, #20
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a842:	f06f 030b 	mvn.w	r3, #11
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
	...

0800a854 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a85e:	79fb      	ldrb	r3, [r7, #7]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d013      	beq.n	800a88c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a864:	4b0d      	ldr	r3, [pc, #52]	@ (800a89c <netif_get_by_index+0x48>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	e00c      	b.n	800a886 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a872:	3301      	adds	r3, #1
 800a874:	b2db      	uxtb	r3, r3
 800a876:	79fa      	ldrb	r2, [r7, #7]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d101      	bne.n	800a880 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	e006      	b.n	800a88e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1ef      	bne.n	800a86c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	20008108 	.word	0x20008108

0800a8a0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a8a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a8d8 <pbuf_free_ooseq+0x38>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a8ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a8dc <pbuf_free_ooseq+0x3c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	607b      	str	r3, [r7, #4]
 800a8b2:	e00a      	b.n	800a8ca <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f002 f955 	bl	800cb6c <tcp_free_ooseq>
      return;
 800a8c2:	e005      	b.n	800a8d0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	607b      	str	r3, [r7, #4]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1f1      	bne.n	800a8b4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20008111 	.word	0x20008111
 800a8dc:	20008120 	.word	0x20008120

0800a8e0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a8e4:	4b03      	ldr	r3, [pc, #12]	@ (800a8f4 <pbuf_pool_is_empty+0x14>)
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a8ea:	bf00      	nop
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	20008111 	.word	0x20008111

0800a8f8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	4611      	mov	r1, r2
 800a904:	461a      	mov	r2, r3
 800a906:	460b      	mov	r3, r1
 800a908:	80fb      	strh	r3, [r7, #6]
 800a90a:	4613      	mov	r3, r2
 800a90c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	88fa      	ldrh	r2, [r7, #6]
 800a91e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	88ba      	ldrh	r2, [r7, #4]
 800a924:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a926:	8b3b      	ldrh	r3, [r7, #24]
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	7f3a      	ldrb	r2, [r7, #28]
 800a932:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2201      	movs	r2, #1
 800a938:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	73da      	strb	r2, [r3, #15]
}
 800a940:	bf00      	nop
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08c      	sub	sp, #48	@ 0x30
 800a950:	af02      	add	r7, sp, #8
 800a952:	4603      	mov	r3, r0
 800a954:	71fb      	strb	r3, [r7, #7]
 800a956:	460b      	mov	r3, r1
 800a958:	80bb      	strh	r3, [r7, #4]
 800a95a:	4613      	mov	r3, r2
 800a95c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a95e:	79fb      	ldrb	r3, [r7, #7]
 800a960:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a962:	887b      	ldrh	r3, [r7, #2]
 800a964:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a968:	d07f      	beq.n	800aa6a <pbuf_alloc+0x11e>
 800a96a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a96e:	f300 80c8 	bgt.w	800ab02 <pbuf_alloc+0x1b6>
 800a972:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a976:	d010      	beq.n	800a99a <pbuf_alloc+0x4e>
 800a978:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a97c:	f300 80c1 	bgt.w	800ab02 <pbuf_alloc+0x1b6>
 800a980:	2b01      	cmp	r3, #1
 800a982:	d002      	beq.n	800a98a <pbuf_alloc+0x3e>
 800a984:	2b41      	cmp	r3, #65	@ 0x41
 800a986:	f040 80bc 	bne.w	800ab02 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a98a:	887a      	ldrh	r2, [r7, #2]
 800a98c:	88bb      	ldrh	r3, [r7, #4]
 800a98e:	4619      	mov	r1, r3
 800a990:	2000      	movs	r0, #0
 800a992:	f000 f8d1 	bl	800ab38 <pbuf_alloc_reference>
 800a996:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800a998:	e0bd      	b.n	800ab16 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a9a2:	88bb      	ldrh	r3, [r7, #4]
 800a9a4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a9a6:	2008      	movs	r0, #8
 800a9a8:	f7ff fad8 	bl	8009f5c <memp_malloc>
 800a9ac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d109      	bne.n	800a9c8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a9b4:	f7ff ff94 	bl	800a8e0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a9be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9c0:	f000 faa8 	bl	800af14 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e0a7      	b.n	800ab18 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a9c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9ca:	3303      	adds	r3, #3
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	f023 0303 	bic.w	r3, r3, #3
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	8b7a      	ldrh	r2, [r7, #26]
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	bf28      	it	cs
 800a9e0:	4613      	movcs	r3, r2
 800a9e2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a9e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9e6:	3310      	adds	r3, #16
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	3303      	adds	r3, #3
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	89f9      	ldrh	r1, [r7, #14]
 800a9f6:	8b7a      	ldrh	r2, [r7, #26]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	887b      	ldrh	r3, [r7, #2]
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	460b      	mov	r3, r1
 800aa02:	4601      	mov	r1, r0
 800aa04:	6938      	ldr	r0, [r7, #16]
 800aa06:	f7ff ff77 	bl	800a8f8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f003 0303 	and.w	r3, r3, #3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d006      	beq.n	800aa24 <pbuf_alloc+0xd8>
 800aa16:	4b42      	ldr	r3, [pc, #264]	@ (800ab20 <pbuf_alloc+0x1d4>)
 800aa18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa1c:	4941      	ldr	r1, [pc, #260]	@ (800ab24 <pbuf_alloc+0x1d8>)
 800aa1e:	4842      	ldr	r0, [pc, #264]	@ (800ab28 <pbuf_alloc+0x1dc>)
 800aa20:	f009 feae 	bl	8014780 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800aa24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800aa26:	3303      	adds	r3, #3
 800aa28:	f023 0303 	bic.w	r3, r3, #3
 800aa2c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800aa30:	d106      	bne.n	800aa40 <pbuf_alloc+0xf4>
 800aa32:	4b3b      	ldr	r3, [pc, #236]	@ (800ab20 <pbuf_alloc+0x1d4>)
 800aa34:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800aa38:	493c      	ldr	r1, [pc, #240]	@ (800ab2c <pbuf_alloc+0x1e0>)
 800aa3a:	483b      	ldr	r0, [pc, #236]	@ (800ab28 <pbuf_alloc+0x1dc>)
 800aa3c:	f009 fea0 	bl	8014780 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d102      	bne.n	800aa4c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa4a:	e002      	b.n	800aa52 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800aa56:	8b7a      	ldrh	r2, [r7, #26]
 800aa58:	89fb      	ldrh	r3, [r7, #14]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800aa62:	8b7b      	ldrh	r3, [r7, #26]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d19e      	bne.n	800a9a6 <pbuf_alloc+0x5a>
      break;
 800aa68:	e055      	b.n	800ab16 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800aa6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800aa6c:	3303      	adds	r3, #3
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f023 0303 	bic.w	r3, r3, #3
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	88bb      	ldrh	r3, [r7, #4]
 800aa78:	3303      	adds	r3, #3
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	f023 0303 	bic.w	r3, r3, #3
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	4413      	add	r3, r2
 800aa84:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800aa86:	8b3b      	ldrh	r3, [r7, #24]
 800aa88:	3310      	adds	r3, #16
 800aa8a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aa8c:	8b3a      	ldrh	r2, [r7, #24]
 800aa8e:	88bb      	ldrh	r3, [r7, #4]
 800aa90:	3303      	adds	r3, #3
 800aa92:	f023 0303 	bic.w	r3, r3, #3
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d306      	bcc.n	800aaa8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800aa9a:	8afa      	ldrh	r2, [r7, #22]
 800aa9c:	88bb      	ldrh	r3, [r7, #4]
 800aa9e:	3303      	adds	r3, #3
 800aaa0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d201      	bcs.n	800aaac <pbuf_alloc+0x160>
        return NULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	e035      	b.n	800ab18 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800aaac:	8afb      	ldrh	r3, [r7, #22]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7ff f8c4 	bl	8009c3c <mem_malloc>
 800aab4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800aab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <pbuf_alloc+0x174>
        return NULL;
 800aabc:	2300      	movs	r3, #0
 800aabe:	e02b      	b.n	800ab18 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aac0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800aac2:	3310      	adds	r3, #16
 800aac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aac6:	4413      	add	r3, r2
 800aac8:	3303      	adds	r3, #3
 800aaca:	f023 0303 	bic.w	r3, r3, #3
 800aace:	4618      	mov	r0, r3
 800aad0:	88b9      	ldrh	r1, [r7, #4]
 800aad2:	88ba      	ldrh	r2, [r7, #4]
 800aad4:	2300      	movs	r3, #0
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	887b      	ldrh	r3, [r7, #2]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	460b      	mov	r3, r1
 800aade:	4601      	mov	r1, r0
 800aae0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aae2:	f7ff ff09 	bl	800a8f8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d010      	beq.n	800ab14 <pbuf_alloc+0x1c8>
 800aaf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ab20 <pbuf_alloc+0x1d4>)
 800aaf4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800aaf8:	490d      	ldr	r1, [pc, #52]	@ (800ab30 <pbuf_alloc+0x1e4>)
 800aafa:	480b      	ldr	r0, [pc, #44]	@ (800ab28 <pbuf_alloc+0x1dc>)
 800aafc:	f009 fe40 	bl	8014780 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ab00:	e008      	b.n	800ab14 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ab02:	4b07      	ldr	r3, [pc, #28]	@ (800ab20 <pbuf_alloc+0x1d4>)
 800ab04:	f240 1227 	movw	r2, #295	@ 0x127
 800ab08:	490a      	ldr	r1, [pc, #40]	@ (800ab34 <pbuf_alloc+0x1e8>)
 800ab0a:	4807      	ldr	r0, [pc, #28]	@ (800ab28 <pbuf_alloc+0x1dc>)
 800ab0c:	f009 fe38 	bl	8014780 <iprintf>
      return NULL;
 800ab10:	2300      	movs	r3, #0
 800ab12:	e001      	b.n	800ab18 <pbuf_alloc+0x1cc>
      break;
 800ab14:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3728      	adds	r7, #40	@ 0x28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	08015fe8 	.word	0x08015fe8
 800ab24:	08016018 	.word	0x08016018
 800ab28:	08016048 	.word	0x08016048
 800ab2c:	08016070 	.word	0x08016070
 800ab30:	080160a4 	.word	0x080160a4
 800ab34:	080160d0 	.word	0x080160d0

0800ab38 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af02      	add	r7, sp, #8
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	807b      	strh	r3, [r7, #2]
 800ab44:	4613      	mov	r3, r2
 800ab46:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ab48:	883b      	ldrh	r3, [r7, #0]
 800ab4a:	2b41      	cmp	r3, #65	@ 0x41
 800ab4c:	d009      	beq.n	800ab62 <pbuf_alloc_reference+0x2a>
 800ab4e:	883b      	ldrh	r3, [r7, #0]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d006      	beq.n	800ab62 <pbuf_alloc_reference+0x2a>
 800ab54:	4b0f      	ldr	r3, [pc, #60]	@ (800ab94 <pbuf_alloc_reference+0x5c>)
 800ab56:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ab5a:	490f      	ldr	r1, [pc, #60]	@ (800ab98 <pbuf_alloc_reference+0x60>)
 800ab5c:	480f      	ldr	r0, [pc, #60]	@ (800ab9c <pbuf_alloc_reference+0x64>)
 800ab5e:	f009 fe0f 	bl	8014780 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ab62:	2007      	movs	r0, #7
 800ab64:	f7ff f9fa 	bl	8009f5c <memp_malloc>
 800ab68:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ab70:	2300      	movs	r3, #0
 800ab72:	e00b      	b.n	800ab8c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ab74:	8879      	ldrh	r1, [r7, #2]
 800ab76:	887a      	ldrh	r2, [r7, #2]
 800ab78:	2300      	movs	r3, #0
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	883b      	ldrh	r3, [r7, #0]
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	460b      	mov	r3, r1
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f7ff feb7 	bl	800a8f8 <pbuf_init_alloced_pbuf>
  return p;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	08015fe8 	.word	0x08015fe8
 800ab98:	080160ec 	.word	0x080160ec
 800ab9c:	08016048 	.word	0x08016048

0800aba0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	607b      	str	r3, [r7, #4]
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]
 800abac:	460b      	mov	r3, r1
 800abae:	81bb      	strh	r3, [r7, #12]
 800abb0:	4613      	mov	r3, r2
 800abb2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800abb8:	8a7b      	ldrh	r3, [r7, #18]
 800abba:	3303      	adds	r3, #3
 800abbc:	f023 0203 	bic.w	r2, r3, #3
 800abc0:	89bb      	ldrh	r3, [r7, #12]
 800abc2:	441a      	add	r2, r3
 800abc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d901      	bls.n	800abce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800abca:	2300      	movs	r3, #0
 800abcc:	e018      	b.n	800ac00 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d007      	beq.n	800abe4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800abd4:	8a7b      	ldrh	r3, [r7, #18]
 800abd6:	3303      	adds	r3, #3
 800abd8:	f023 0303 	bic.w	r3, r3, #3
 800abdc:	6a3a      	ldr	r2, [r7, #32]
 800abde:	4413      	add	r3, r2
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	e001      	b.n	800abe8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	89b9      	ldrh	r1, [r7, #12]
 800abec:	89ba      	ldrh	r2, [r7, #12]
 800abee:	2302      	movs	r3, #2
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	897b      	ldrh	r3, [r7, #10]
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	460b      	mov	r3, r1
 800abf8:	6979      	ldr	r1, [r7, #20]
 800abfa:	f7ff fe7d 	bl	800a8f8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800abfe:	687b      	ldr	r3, [r7, #4]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <pbuf_realloc+0x20>
 800ac1a:	4b3a      	ldr	r3, [pc, #232]	@ (800ad04 <pbuf_realloc+0xfc>)
 800ac1c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ac20:	4939      	ldr	r1, [pc, #228]	@ (800ad08 <pbuf_realloc+0x100>)
 800ac22:	483a      	ldr	r0, [pc, #232]	@ (800ad0c <pbuf_realloc+0x104>)
 800ac24:	f009 fdac 	bl	8014780 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	891b      	ldrh	r3, [r3, #8]
 800ac2c:	887a      	ldrh	r2, [r7, #2]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d263      	bcs.n	800acfa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	891a      	ldrh	r2, [r3, #8]
 800ac36:	887b      	ldrh	r3, [r7, #2]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ac3c:	887b      	ldrh	r3, [r7, #2]
 800ac3e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ac44:	e018      	b.n	800ac78 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	895b      	ldrh	r3, [r3, #10]
 800ac4a:	897a      	ldrh	r2, [r7, #10]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	891a      	ldrh	r2, [r3, #8]
 800ac54:	893b      	ldrh	r3, [r7, #8]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <pbuf_realloc+0x70>
 800ac6a:	4b26      	ldr	r3, [pc, #152]	@ (800ad04 <pbuf_realloc+0xfc>)
 800ac6c:	f240 12af 	movw	r2, #431	@ 0x1af
 800ac70:	4927      	ldr	r1, [pc, #156]	@ (800ad10 <pbuf_realloc+0x108>)
 800ac72:	4826      	ldr	r0, [pc, #152]	@ (800ad0c <pbuf_realloc+0x104>)
 800ac74:	f009 fd84 	bl	8014780 <iprintf>
  while (rem_len > q->len) {
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	895b      	ldrh	r3, [r3, #10]
 800ac7c:	897a      	ldrh	r2, [r7, #10]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d8e1      	bhi.n	800ac46 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	7b1b      	ldrb	r3, [r3, #12]
 800ac86:	f003 030f 	and.w	r3, r3, #15
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d121      	bne.n	800acd2 <pbuf_realloc+0xca>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	895b      	ldrh	r3, [r3, #10]
 800ac92:	897a      	ldrh	r2, [r7, #10]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d01c      	beq.n	800acd2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	7b5b      	ldrb	r3, [r3, #13]
 800ac9c:	f003 0302 	and.w	r3, r3, #2
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d116      	bne.n	800acd2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	b29a      	uxth	r2, r3
 800acae:	897b      	ldrh	r3, [r7, #10]
 800acb0:	4413      	add	r3, r2
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	4619      	mov	r1, r3
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f7fe fec4 	bl	8009a44 <mem_trim>
 800acbc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d106      	bne.n	800acd2 <pbuf_realloc+0xca>
 800acc4:	4b0f      	ldr	r3, [pc, #60]	@ (800ad04 <pbuf_realloc+0xfc>)
 800acc6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800acca:	4912      	ldr	r1, [pc, #72]	@ (800ad14 <pbuf_realloc+0x10c>)
 800accc:	480f      	ldr	r0, [pc, #60]	@ (800ad0c <pbuf_realloc+0x104>)
 800acce:	f009 fd57 	bl	8014780 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	897a      	ldrh	r2, [r7, #10]
 800acd6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	895a      	ldrh	r2, [r3, #10]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d004      	beq.n	800acf2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f911 	bl	800af14 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	e000      	b.n	800acfc <pbuf_realloc+0xf4>
    return;
 800acfa:	bf00      	nop

}
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	08015fe8 	.word	0x08015fe8
 800ad08:	08016100 	.word	0x08016100
 800ad0c:	08016048 	.word	0x08016048
 800ad10:	08016118 	.word	0x08016118
 800ad14:	08016130 	.word	0x08016130

0800ad18 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	4613      	mov	r3, r2
 800ad24:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d106      	bne.n	800ad3a <pbuf_add_header_impl+0x22>
 800ad2c:	4b2b      	ldr	r3, [pc, #172]	@ (800addc <pbuf_add_header_impl+0xc4>)
 800ad2e:	f240 12df 	movw	r2, #479	@ 0x1df
 800ad32:	492b      	ldr	r1, [pc, #172]	@ (800ade0 <pbuf_add_header_impl+0xc8>)
 800ad34:	482b      	ldr	r0, [pc, #172]	@ (800ade4 <pbuf_add_header_impl+0xcc>)
 800ad36:	f009 fd23 	bl	8014780 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <pbuf_add_header_impl+0x30>
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad46:	d301      	bcc.n	800ad4c <pbuf_add_header_impl+0x34>
    return 1;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e043      	b.n	800add4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <pbuf_add_header_impl+0x3e>
    return 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e03e      	b.n	800add4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	891a      	ldrh	r2, [r3, #8]
 800ad5e:	8a7b      	ldrh	r3, [r7, #18]
 800ad60:	4413      	add	r3, r2
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	8a7a      	ldrh	r2, [r7, #18]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d901      	bls.n	800ad6e <pbuf_add_header_impl+0x56>
    return 1;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e032      	b.n	800add4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	7b1b      	ldrb	r3, [r3, #12]
 800ad72:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ad74:	8a3b      	ldrh	r3, [r7, #16]
 800ad76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00c      	beq.n	800ad98 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	425b      	negs	r3, r3
 800ad86:	4413      	add	r3, r2
 800ad88:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3310      	adds	r3, #16
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d20d      	bcs.n	800adb0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e01d      	b.n	800add4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ad98:	79fb      	ldrb	r3, [r7, #7]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d006      	beq.n	800adac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	425b      	negs	r3, r3
 800ada6:	4413      	add	r3, r2
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	e001      	b.n	800adb0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800adac:	2301      	movs	r3, #1
 800adae:	e011      	b.n	800add4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	895a      	ldrh	r2, [r3, #10]
 800adba:	8a7b      	ldrh	r3, [r7, #18]
 800adbc:	4413      	add	r3, r2
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	891a      	ldrh	r2, [r3, #8]
 800adc8:	8a7b      	ldrh	r3, [r7, #18]
 800adca:	4413      	add	r3, r2
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	811a      	strh	r2, [r3, #8]


  return 0;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	08015fe8 	.word	0x08015fe8
 800ade0:	0801614c 	.word	0x0801614c
 800ade4:	08016048 	.word	0x08016048

0800ade8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800adf2:	2200      	movs	r2, #0
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff ff8e 	bl	800ad18 <pbuf_add_header_impl>
 800adfc:	4603      	mov	r3, r0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d106      	bne.n	800ae26 <pbuf_remove_header+0x1e>
 800ae18:	4b20      	ldr	r3, [pc, #128]	@ (800ae9c <pbuf_remove_header+0x94>)
 800ae1a:	f240 224b 	movw	r2, #587	@ 0x24b
 800ae1e:	4920      	ldr	r1, [pc, #128]	@ (800aea0 <pbuf_remove_header+0x98>)
 800ae20:	4820      	ldr	r0, [pc, #128]	@ (800aea4 <pbuf_remove_header+0x9c>)
 800ae22:	f009 fcad 	bl	8014780 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <pbuf_remove_header+0x2c>
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae32:	d301      	bcc.n	800ae38 <pbuf_remove_header+0x30>
    return 1;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e02c      	b.n	800ae92 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <pbuf_remove_header+0x3a>
    return 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e027      	b.n	800ae92 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	895b      	ldrh	r3, [r3, #10]
 800ae4a:	89fa      	ldrh	r2, [r7, #14]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d908      	bls.n	800ae62 <pbuf_remove_header+0x5a>
 800ae50:	4b12      	ldr	r3, [pc, #72]	@ (800ae9c <pbuf_remove_header+0x94>)
 800ae52:	f240 2255 	movw	r2, #597	@ 0x255
 800ae56:	4914      	ldr	r1, [pc, #80]	@ (800aea8 <pbuf_remove_header+0xa0>)
 800ae58:	4812      	ldr	r0, [pc, #72]	@ (800aea4 <pbuf_remove_header+0x9c>)
 800ae5a:	f009 fc91 	bl	8014780 <iprintf>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e017      	b.n	800ae92 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	441a      	add	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	895a      	ldrh	r2, [r3, #10]
 800ae78:	89fb      	ldrh	r3, [r7, #14]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	891a      	ldrh	r2, [r3, #8]
 800ae86:	89fb      	ldrh	r3, [r7, #14]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	08015fe8 	.word	0x08015fe8
 800aea0:	0801614c 	.word	0x0801614c
 800aea4:	08016048 	.word	0x08016048
 800aea8:	08016158 	.word	0x08016158

0800aeac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	807b      	strh	r3, [r7, #2]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800aebc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	da08      	bge.n	800aed6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800aec4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aec8:	425b      	negs	r3, r3
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff ff9b 	bl	800ae08 <pbuf_remove_header>
 800aed2:	4603      	mov	r3, r0
 800aed4:	e007      	b.n	800aee6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800aed6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aeda:	787a      	ldrb	r2, [r7, #1]
 800aedc:	4619      	mov	r1, r3
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7ff ff1a 	bl	800ad18 <pbuf_add_header_impl>
 800aee4:	4603      	mov	r3, r0
  }
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b082      	sub	sp, #8
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	460b      	mov	r3, r1
 800aef8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800aefa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aefe:	2201      	movs	r2, #1
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff ffd2 	bl	800aeac <pbuf_header_impl>
 800af08:	4603      	mov	r3, r0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10b      	bne.n	800af3a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <pbuf_free+0x22>
 800af28:	4b38      	ldr	r3, [pc, #224]	@ (800b00c <pbuf_free+0xf8>)
 800af2a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800af2e:	4938      	ldr	r1, [pc, #224]	@ (800b010 <pbuf_free+0xfc>)
 800af30:	4838      	ldr	r0, [pc, #224]	@ (800b014 <pbuf_free+0x100>)
 800af32:	f009 fc25 	bl	8014780 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800af36:	2300      	movs	r3, #0
 800af38:	e063      	b.n	800b002 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800af3e:	e05c      	b.n	800affa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7b9b      	ldrb	r3, [r3, #14]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d106      	bne.n	800af56 <pbuf_free+0x42>
 800af48:	4b30      	ldr	r3, [pc, #192]	@ (800b00c <pbuf_free+0xf8>)
 800af4a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800af4e:	4932      	ldr	r1, [pc, #200]	@ (800b018 <pbuf_free+0x104>)
 800af50:	4830      	ldr	r0, [pc, #192]	@ (800b014 <pbuf_free+0x100>)
 800af52:	f009 fc15 	bl	8014780 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7b9b      	ldrb	r3, [r3, #14]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	739a      	strb	r2, [r3, #14]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	7b9b      	ldrb	r3, [r3, #14]
 800af66:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800af68:	7dbb      	ldrb	r3, [r7, #22]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d143      	bne.n	800aff6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	7b1b      	ldrb	r3, [r3, #12]
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	7b5b      	ldrb	r3, [r3, #13]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d011      	beq.n	800afae <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <pbuf_free+0x90>
 800af96:	4b1d      	ldr	r3, [pc, #116]	@ (800b00c <pbuf_free+0xf8>)
 800af98:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800af9c:	491f      	ldr	r1, [pc, #124]	@ (800b01c <pbuf_free+0x108>)
 800af9e:	481d      	ldr	r0, [pc, #116]	@ (800b014 <pbuf_free+0x100>)
 800afa0:	f009 fbee 	bl	8014780 <iprintf>
        pc->custom_free_function(p);
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	4798      	blx	r3
 800afac:	e01d      	b.n	800afea <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800afae:	7bfb      	ldrb	r3, [r7, #15]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d104      	bne.n	800afbe <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	2008      	movs	r0, #8
 800afb8:	f7ff f840 	bl	800a03c <memp_free>
 800afbc:	e015      	b.n	800afea <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d104      	bne.n	800afce <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	2007      	movs	r0, #7
 800afc8:	f7ff f838 	bl	800a03c <memp_free>
 800afcc:	e00d      	b.n	800afea <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d103      	bne.n	800afdc <pbuf_free+0xc8>
          mem_free(p);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7fe fccb 	bl	8009970 <mem_free>
 800afda:	e006      	b.n	800afea <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800afdc:	4b0b      	ldr	r3, [pc, #44]	@ (800b00c <pbuf_free+0xf8>)
 800afde:	f240 320f 	movw	r2, #783	@ 0x30f
 800afe2:	490f      	ldr	r1, [pc, #60]	@ (800b020 <pbuf_free+0x10c>)
 800afe4:	480b      	ldr	r0, [pc, #44]	@ (800b014 <pbuf_free+0x100>)
 800afe6:	f009 fbcb 	bl	8014780 <iprintf>
        }
      }
      count++;
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	3301      	adds	r3, #1
 800afee:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	607b      	str	r3, [r7, #4]
 800aff4:	e001      	b.n	800affa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d19f      	bne.n	800af40 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	08015fe8 	.word	0x08015fe8
 800b010:	0801614c 	.word	0x0801614c
 800b014:	08016048 	.word	0x08016048
 800b018:	08016178 	.word	0x08016178
 800b01c:	08016190 	.word	0x08016190
 800b020:	080161b4 	.word	0x080161b4

0800b024 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b030:	e005      	b.n	800b03e <pbuf_clen+0x1a>
    ++len;
 800b032:	89fb      	ldrh	r3, [r7, #14]
 800b034:	3301      	adds	r3, #1
 800b036:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1f6      	bne.n	800b032 <pbuf_clen+0xe>
  }
  return len;
 800b044:	89fb      	ldrh	r3, [r7, #14]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
	...

0800b054 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d010      	beq.n	800b084 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	7b9b      	ldrb	r3, [r3, #14]
 800b066:	3301      	adds	r3, #1
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	7b9b      	ldrb	r3, [r3, #14]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <pbuf_ref+0x30>
 800b076:	4b05      	ldr	r3, [pc, #20]	@ (800b08c <pbuf_ref+0x38>)
 800b078:	f240 3242 	movw	r2, #834	@ 0x342
 800b07c:	4904      	ldr	r1, [pc, #16]	@ (800b090 <pbuf_ref+0x3c>)
 800b07e:	4805      	ldr	r0, [pc, #20]	@ (800b094 <pbuf_ref+0x40>)
 800b080:	f009 fb7e 	bl	8014780 <iprintf>
  }
}
 800b084:	bf00      	nop
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	08015fe8 	.word	0x08015fe8
 800b090:	080161c8 	.word	0x080161c8
 800b094:	08016048 	.word	0x08016048

0800b098 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <pbuf_cat+0x16>
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d107      	bne.n	800b0be <pbuf_cat+0x26>
 800b0ae:	4b20      	ldr	r3, [pc, #128]	@ (800b130 <pbuf_cat+0x98>)
 800b0b0:	f240 3259 	movw	r2, #857	@ 0x359
 800b0b4:	491f      	ldr	r1, [pc, #124]	@ (800b134 <pbuf_cat+0x9c>)
 800b0b6:	4820      	ldr	r0, [pc, #128]	@ (800b138 <pbuf_cat+0xa0>)
 800b0b8:	f009 fb62 	bl	8014780 <iprintf>
 800b0bc:	e034      	b.n	800b128 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	e00a      	b.n	800b0da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	891a      	ldrh	r2, [r3, #8]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	891b      	ldrh	r3, [r3, #8]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1f0      	bne.n	800b0c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	891a      	ldrh	r2, [r3, #8]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	895b      	ldrh	r3, [r3, #10]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d006      	beq.n	800b0fc <pbuf_cat+0x64>
 800b0ee:	4b10      	ldr	r3, [pc, #64]	@ (800b130 <pbuf_cat+0x98>)
 800b0f0:	f240 3262 	movw	r2, #866	@ 0x362
 800b0f4:	4911      	ldr	r1, [pc, #68]	@ (800b13c <pbuf_cat+0xa4>)
 800b0f6:	4810      	ldr	r0, [pc, #64]	@ (800b138 <pbuf_cat+0xa0>)
 800b0f8:	f009 fb42 	bl	8014780 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d006      	beq.n	800b112 <pbuf_cat+0x7a>
 800b104:	4b0a      	ldr	r3, [pc, #40]	@ (800b130 <pbuf_cat+0x98>)
 800b106:	f240 3263 	movw	r2, #867	@ 0x363
 800b10a:	490d      	ldr	r1, [pc, #52]	@ (800b140 <pbuf_cat+0xa8>)
 800b10c:	480a      	ldr	r0, [pc, #40]	@ (800b138 <pbuf_cat+0xa0>)
 800b10e:	f009 fb37 	bl	8014780 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	891a      	ldrh	r2, [r3, #8]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	891b      	ldrh	r3, [r3, #8]
 800b11a:	4413      	add	r3, r2
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	08015fe8 	.word	0x08015fe8
 800b134:	080161dc 	.word	0x080161dc
 800b138:	08016048 	.word	0x08016048
 800b13c:	08016214 	.word	0x08016214
 800b140:	08016244 	.word	0x08016244

0800b144 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff ffa1 	bl	800b098 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b156:	6838      	ldr	r0, [r7, #0]
 800b158:	f7ff ff7c 	bl	800b054 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	2300      	movs	r3, #0
 800b174:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d008      	beq.n	800b18e <pbuf_copy+0x2a>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d005      	beq.n	800b18e <pbuf_copy+0x2a>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	891a      	ldrh	r2, [r3, #8]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	891b      	ldrh	r3, [r3, #8]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d209      	bcs.n	800b1a2 <pbuf_copy+0x3e>
 800b18e:	4b57      	ldr	r3, [pc, #348]	@ (800b2ec <pbuf_copy+0x188>)
 800b190:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800b194:	4956      	ldr	r1, [pc, #344]	@ (800b2f0 <pbuf_copy+0x18c>)
 800b196:	4857      	ldr	r0, [pc, #348]	@ (800b2f4 <pbuf_copy+0x190>)
 800b198:	f009 faf2 	bl	8014780 <iprintf>
 800b19c:	f06f 030f 	mvn.w	r3, #15
 800b1a0:	e09f      	b.n	800b2e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	895b      	ldrh	r3, [r3, #10]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	1ad2      	subs	r2, r2, r3
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	895b      	ldrh	r3, [r3, #10]
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	1acb      	subs	r3, r1, r3
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d306      	bcc.n	800b1c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	895b      	ldrh	r3, [r3, #10]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	e005      	b.n	800b1d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	895b      	ldrh	r3, [r3, #10]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	18d0      	adds	r0, r2, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	f009 fc9f 	bl	8014b2a <memcpy>
    offset_to += len;
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b1f4:	693a      	ldr	r2, [r7, #16]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	895b      	ldrh	r3, [r3, #10]
 800b200:	461a      	mov	r2, r3
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	4293      	cmp	r3, r2
 800b206:	d906      	bls.n	800b216 <pbuf_copy+0xb2>
 800b208:	4b38      	ldr	r3, [pc, #224]	@ (800b2ec <pbuf_copy+0x188>)
 800b20a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b20e:	493a      	ldr	r1, [pc, #232]	@ (800b2f8 <pbuf_copy+0x194>)
 800b210:	4838      	ldr	r0, [pc, #224]	@ (800b2f4 <pbuf_copy+0x190>)
 800b212:	f009 fab5 	bl	8014780 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	895b      	ldrh	r3, [r3, #10]
 800b21a:	461a      	mov	r2, r3
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	4293      	cmp	r3, r2
 800b220:	d906      	bls.n	800b230 <pbuf_copy+0xcc>
 800b222:	4b32      	ldr	r3, [pc, #200]	@ (800b2ec <pbuf_copy+0x188>)
 800b224:	f240 32da 	movw	r2, #986	@ 0x3da
 800b228:	4934      	ldr	r1, [pc, #208]	@ (800b2fc <pbuf_copy+0x198>)
 800b22a:	4832      	ldr	r0, [pc, #200]	@ (800b2f4 <pbuf_copy+0x190>)
 800b22c:	f009 faa8 	bl	8014780 <iprintf>
    if (offset_from >= p_from->len) {
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	895b      	ldrh	r3, [r3, #10]
 800b234:	461a      	mov	r2, r3
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	4293      	cmp	r3, r2
 800b23a:	d304      	bcc.n	800b246 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	895b      	ldrh	r3, [r3, #10]
 800b24a:	461a      	mov	r2, r3
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	4293      	cmp	r3, r2
 800b250:	d114      	bne.n	800b27c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10c      	bne.n	800b27c <pbuf_copy+0x118>
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d009      	beq.n	800b27c <pbuf_copy+0x118>
 800b268:	4b20      	ldr	r3, [pc, #128]	@ (800b2ec <pbuf_copy+0x188>)
 800b26a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b26e:	4924      	ldr	r1, [pc, #144]	@ (800b300 <pbuf_copy+0x19c>)
 800b270:	4820      	ldr	r0, [pc, #128]	@ (800b2f4 <pbuf_copy+0x190>)
 800b272:	f009 fa85 	bl	8014780 <iprintf>
 800b276:	f06f 030f 	mvn.w	r3, #15
 800b27a:	e032      	b.n	800b2e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d013      	beq.n	800b2aa <pbuf_copy+0x146>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	895a      	ldrh	r2, [r3, #10]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	891b      	ldrh	r3, [r3, #8]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d10d      	bne.n	800b2aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d009      	beq.n	800b2aa <pbuf_copy+0x146>
 800b296:	4b15      	ldr	r3, [pc, #84]	@ (800b2ec <pbuf_copy+0x188>)
 800b298:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800b29c:	4919      	ldr	r1, [pc, #100]	@ (800b304 <pbuf_copy+0x1a0>)
 800b29e:	4815      	ldr	r0, [pc, #84]	@ (800b2f4 <pbuf_copy+0x190>)
 800b2a0:	f009 fa6e 	bl	8014780 <iprintf>
 800b2a4:	f06f 0305 	mvn.w	r3, #5
 800b2a8:	e01b      	b.n	800b2e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d013      	beq.n	800b2d8 <pbuf_copy+0x174>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	895a      	ldrh	r2, [r3, #10]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	891b      	ldrh	r3, [r3, #8]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d10d      	bne.n	800b2d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <pbuf_copy+0x174>
 800b2c4:	4b09      	ldr	r3, [pc, #36]	@ (800b2ec <pbuf_copy+0x188>)
 800b2c6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b2ca:	490e      	ldr	r1, [pc, #56]	@ (800b304 <pbuf_copy+0x1a0>)
 800b2cc:	4809      	ldr	r0, [pc, #36]	@ (800b2f4 <pbuf_copy+0x190>)
 800b2ce:	f009 fa57 	bl	8014780 <iprintf>
 800b2d2:	f06f 0305 	mvn.w	r3, #5
 800b2d6:	e004      	b.n	800b2e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f47f af61 	bne.w	800b1a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	08015fe8 	.word	0x08015fe8
 800b2f0:	08016290 	.word	0x08016290
 800b2f4:	08016048 	.word	0x08016048
 800b2f8:	080162c0 	.word	0x080162c0
 800b2fc:	080162d8 	.word	0x080162d8
 800b300:	080162f4 	.word	0x080162f4
 800b304:	08016304 	.word	0x08016304

0800b308 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b088      	sub	sp, #32
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	4611      	mov	r1, r2
 800b314:	461a      	mov	r2, r3
 800b316:	460b      	mov	r3, r1
 800b318:	80fb      	strh	r3, [r7, #6]
 800b31a:	4613      	mov	r3, r2
 800b31c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d108      	bne.n	800b33e <pbuf_copy_partial+0x36>
 800b32c:	4b2b      	ldr	r3, [pc, #172]	@ (800b3dc <pbuf_copy_partial+0xd4>)
 800b32e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b332:	492b      	ldr	r1, [pc, #172]	@ (800b3e0 <pbuf_copy_partial+0xd8>)
 800b334:	482b      	ldr	r0, [pc, #172]	@ (800b3e4 <pbuf_copy_partial+0xdc>)
 800b336:	f009 fa23 	bl	8014780 <iprintf>
 800b33a:	2300      	movs	r3, #0
 800b33c:	e04a      	b.n	800b3d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d108      	bne.n	800b356 <pbuf_copy_partial+0x4e>
 800b344:	4b25      	ldr	r3, [pc, #148]	@ (800b3dc <pbuf_copy_partial+0xd4>)
 800b346:	f240 420b 	movw	r2, #1035	@ 0x40b
 800b34a:	4927      	ldr	r1, [pc, #156]	@ (800b3e8 <pbuf_copy_partial+0xe0>)
 800b34c:	4825      	ldr	r0, [pc, #148]	@ (800b3e4 <pbuf_copy_partial+0xdc>)
 800b34e:	f009 fa17 	bl	8014780 <iprintf>
 800b352:	2300      	movs	r3, #0
 800b354:	e03e      	b.n	800b3d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	61fb      	str	r3, [r7, #28]
 800b35a:	e034      	b.n	800b3c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b35c:	88bb      	ldrh	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00a      	beq.n	800b378 <pbuf_copy_partial+0x70>
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	895b      	ldrh	r3, [r3, #10]
 800b366:	88ba      	ldrh	r2, [r7, #4]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d305      	bcc.n	800b378 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	895b      	ldrh	r3, [r3, #10]
 800b370:	88ba      	ldrh	r2, [r7, #4]
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	80bb      	strh	r3, [r7, #4]
 800b376:	e023      	b.n	800b3c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	895a      	ldrh	r2, [r3, #10]
 800b37c:	88bb      	ldrh	r3, [r7, #4]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b382:	8b3a      	ldrh	r2, [r7, #24]
 800b384:	88fb      	ldrh	r3, [r7, #6]
 800b386:	429a      	cmp	r2, r3
 800b388:	d901      	bls.n	800b38e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b38a:	88fb      	ldrh	r3, [r7, #6]
 800b38c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b38e:	8b7b      	ldrh	r3, [r7, #26]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	18d0      	adds	r0, r2, r3
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	88bb      	ldrh	r3, [r7, #4]
 800b39a:	4413      	add	r3, r2
 800b39c:	8b3a      	ldrh	r2, [r7, #24]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	f009 fbc3 	bl	8014b2a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b3a4:	8afa      	ldrh	r2, [r7, #22]
 800b3a6:	8b3b      	ldrh	r3, [r7, #24]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b3ac:	8b7a      	ldrh	r2, [r7, #26]
 800b3ae:	8b3b      	ldrh	r3, [r7, #24]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b3b4:	88fa      	ldrh	r2, [r7, #6]
 800b3b6:	8b3b      	ldrh	r3, [r7, #24]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	61fb      	str	r3, [r7, #28]
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <pbuf_copy_partial+0xca>
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1c4      	bne.n	800b35c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b3d2:	8afb      	ldrh	r3, [r7, #22]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3720      	adds	r7, #32
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	08015fe8 	.word	0x08015fe8
 800b3e0:	08016330 	.word	0x08016330
 800b3e4:	08016048 	.word	0x08016048
 800b3e8:	08016350 	.word	0x08016350

0800b3ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	603a      	str	r2, [r7, #0]
 800b3f6:	71fb      	strb	r3, [r7, #7]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	8919      	ldrh	r1, [r3, #8]
 800b400:	88ba      	ldrh	r2, [r7, #4]
 800b402:	79fb      	ldrb	r3, [r7, #7]
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff faa1 	bl	800a94c <pbuf_alloc>
 800b40a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <pbuf_clone+0x2a>
    return NULL;
 800b412:	2300      	movs	r3, #0
 800b414:	e011      	b.n	800b43a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f7ff fea3 	bl	800b164 <pbuf_copy>
 800b41e:	4603      	mov	r3, r0
 800b420:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b422:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d006      	beq.n	800b438 <pbuf_clone+0x4c>
 800b42a:	4b06      	ldr	r3, [pc, #24]	@ (800b444 <pbuf_clone+0x58>)
 800b42c:	f240 5224 	movw	r2, #1316	@ 0x524
 800b430:	4905      	ldr	r1, [pc, #20]	@ (800b448 <pbuf_clone+0x5c>)
 800b432:	4806      	ldr	r0, [pc, #24]	@ (800b44c <pbuf_clone+0x60>)
 800b434:	f009 f9a4 	bl	8014780 <iprintf>
  return q;
 800b438:	68fb      	ldr	r3, [r7, #12]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	08015fe8 	.word	0x08015fe8
 800b448:	0801645c 	.word	0x0801645c
 800b44c:	08016048 	.word	0x08016048

0800b450 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b454:	f009 f894 	bl	8014580 <rand>
 800b458:	4603      	mov	r3, r0
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b460:	b29b      	uxth	r3, r3
 800b462:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b466:	b29a      	uxth	r2, r3
 800b468:	4b01      	ldr	r3, [pc, #4]	@ (800b470 <tcp_init+0x20>)
 800b46a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b46c:	bf00      	nop
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20000064 	.word	0x20000064

0800b474 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7d1b      	ldrb	r3, [r3, #20]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d105      	bne.n	800b490 <tcp_free+0x1c>
 800b484:	4b06      	ldr	r3, [pc, #24]	@ (800b4a0 <tcp_free+0x2c>)
 800b486:	22d4      	movs	r2, #212	@ 0xd4
 800b488:	4906      	ldr	r1, [pc, #24]	@ (800b4a4 <tcp_free+0x30>)
 800b48a:	4807      	ldr	r0, [pc, #28]	@ (800b4a8 <tcp_free+0x34>)
 800b48c:	f009 f978 	bl	8014780 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b490:	6879      	ldr	r1, [r7, #4]
 800b492:	2001      	movs	r0, #1
 800b494:	f7fe fdd2 	bl	800a03c <memp_free>
}
 800b498:	bf00      	nop
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	080164e8 	.word	0x080164e8
 800b4a4:	08016518 	.word	0x08016518
 800b4a8:	0801652c 	.word	0x0801652c

0800b4ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	7d1b      	ldrb	r3, [r3, #20]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d105      	bne.n	800b4c8 <tcp_free_listen+0x1c>
 800b4bc:	4b06      	ldr	r3, [pc, #24]	@ (800b4d8 <tcp_free_listen+0x2c>)
 800b4be:	22df      	movs	r2, #223	@ 0xdf
 800b4c0:	4906      	ldr	r1, [pc, #24]	@ (800b4dc <tcp_free_listen+0x30>)
 800b4c2:	4807      	ldr	r0, [pc, #28]	@ (800b4e0 <tcp_free_listen+0x34>)
 800b4c4:	f009 f95c 	bl	8014780 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	2002      	movs	r0, #2
 800b4cc:	f7fe fdb6 	bl	800a03c <memp_free>
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	080164e8 	.word	0x080164e8
 800b4dc:	08016554 	.word	0x08016554
 800b4e0:	0801652c 	.word	0x0801652c

0800b4e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b4e8:	f000 fea4 	bl	800c234 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b4ec:	4b07      	ldr	r3, [pc, #28]	@ (800b50c <tcp_tmr+0x28>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	4b05      	ldr	r3, [pc, #20]	@ (800b50c <tcp_tmr+0x28>)
 800b4f6:	701a      	strb	r2, [r3, #0]
 800b4f8:	4b04      	ldr	r3, [pc, #16]	@ (800b50c <tcp_tmr+0x28>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d001      	beq.n	800b508 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b504:	f000 fb54 	bl	800bbb0 <tcp_slowtmr>
  }
}
 800b508:	bf00      	nop
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	20008129 	.word	0x20008129

0800b510 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d105      	bne.n	800b52c <tcp_remove_listener+0x1c>
 800b520:	4b0d      	ldr	r3, [pc, #52]	@ (800b558 <tcp_remove_listener+0x48>)
 800b522:	22ff      	movs	r2, #255	@ 0xff
 800b524:	490d      	ldr	r1, [pc, #52]	@ (800b55c <tcp_remove_listener+0x4c>)
 800b526:	480e      	ldr	r0, [pc, #56]	@ (800b560 <tcp_remove_listener+0x50>)
 800b528:	f009 f92a 	bl	8014780 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	e00a      	b.n	800b548 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d102      	bne.n	800b542 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1f1      	bne.n	800b532 <tcp_remove_listener+0x22>
    }
  }
}
 800b54e:	bf00      	nop
 800b550:	bf00      	nop
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	080164e8 	.word	0x080164e8
 800b55c:	08016570 	.word	0x08016570
 800b560:	0801652c 	.word	0x0801652c

0800b564 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d106      	bne.n	800b580 <tcp_listen_closed+0x1c>
 800b572:	4b14      	ldr	r3, [pc, #80]	@ (800b5c4 <tcp_listen_closed+0x60>)
 800b574:	f240 1211 	movw	r2, #273	@ 0x111
 800b578:	4913      	ldr	r1, [pc, #76]	@ (800b5c8 <tcp_listen_closed+0x64>)
 800b57a:	4814      	ldr	r0, [pc, #80]	@ (800b5cc <tcp_listen_closed+0x68>)
 800b57c:	f009 f900 	bl	8014780 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	7d1b      	ldrb	r3, [r3, #20]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d006      	beq.n	800b596 <tcp_listen_closed+0x32>
 800b588:	4b0e      	ldr	r3, [pc, #56]	@ (800b5c4 <tcp_listen_closed+0x60>)
 800b58a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800b58e:	4910      	ldr	r1, [pc, #64]	@ (800b5d0 <tcp_listen_closed+0x6c>)
 800b590:	480e      	ldr	r0, [pc, #56]	@ (800b5cc <tcp_listen_closed+0x68>)
 800b592:	f009 f8f5 	bl	8014780 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b596:	2301      	movs	r3, #1
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e00b      	b.n	800b5b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b59c:	4a0d      	ldr	r2, [pc, #52]	@ (800b5d4 <tcp_listen_closed+0x70>)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff ffb1 	bl	800b510 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d9f0      	bls.n	800b59c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b5ba:	bf00      	nop
 800b5bc:	bf00      	nop
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	080164e8 	.word	0x080164e8
 800b5c8:	08016598 	.word	0x08016598
 800b5cc:	0801652c 	.word	0x0801652c
 800b5d0:	080165a4 	.word	0x080165a4
 800b5d4:	08018de8 	.word	0x08018de8

0800b5d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b5d8:	b5b0      	push	{r4, r5, r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af04      	add	r7, sp, #16
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d106      	bne.n	800b5f8 <tcp_close_shutdown+0x20>
 800b5ea:	4b63      	ldr	r3, [pc, #396]	@ (800b778 <tcp_close_shutdown+0x1a0>)
 800b5ec:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b5f0:	4962      	ldr	r1, [pc, #392]	@ (800b77c <tcp_close_shutdown+0x1a4>)
 800b5f2:	4863      	ldr	r0, [pc, #396]	@ (800b780 <tcp_close_shutdown+0x1a8>)
 800b5f4:	f009 f8c4 	bl	8014780 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b5f8:	78fb      	ldrb	r3, [r7, #3]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d066      	beq.n	800b6cc <tcp_close_shutdown+0xf4>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7d1b      	ldrb	r3, [r3, #20]
 800b602:	2b04      	cmp	r3, #4
 800b604:	d003      	beq.n	800b60e <tcp_close_shutdown+0x36>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	7d1b      	ldrb	r3, [r3, #20]
 800b60a:	2b07      	cmp	r3, #7
 800b60c:	d15e      	bne.n	800b6cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b612:	2b00      	cmp	r3, #0
 800b614:	d104      	bne.n	800b620 <tcp_close_shutdown+0x48>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b61a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b61e:	d055      	beq.n	800b6cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	8b5b      	ldrh	r3, [r3, #26]
 800b624:	f003 0310 	and.w	r3, r3, #16
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d106      	bne.n	800b63a <tcp_close_shutdown+0x62>
 800b62c:	4b52      	ldr	r3, [pc, #328]	@ (800b778 <tcp_close_shutdown+0x1a0>)
 800b62e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800b632:	4954      	ldr	r1, [pc, #336]	@ (800b784 <tcp_close_shutdown+0x1ac>)
 800b634:	4852      	ldr	r0, [pc, #328]	@ (800b780 <tcp_close_shutdown+0x1a8>)
 800b636:	f009 f8a3 	bl	8014780 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b642:	687d      	ldr	r5, [r7, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3304      	adds	r3, #4
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	8ad2      	ldrh	r2, [r2, #22]
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	8b09      	ldrh	r1, [r1, #24]
 800b650:	9102      	str	r1, [sp, #8]
 800b652:	9201      	str	r2, [sp, #4]
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	462b      	mov	r3, r5
 800b658:	4622      	mov	r2, r4
 800b65a:	4601      	mov	r1, r0
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f004 fea7 	bl	80103b0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f001 f8c8 	bl	800c7f8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b668:	4b47      	ldr	r3, [pc, #284]	@ (800b788 <tcp_close_shutdown+0x1b0>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d105      	bne.n	800b67e <tcp_close_shutdown+0xa6>
 800b672:	4b45      	ldr	r3, [pc, #276]	@ (800b788 <tcp_close_shutdown+0x1b0>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	4a43      	ldr	r2, [pc, #268]	@ (800b788 <tcp_close_shutdown+0x1b0>)
 800b67a:	6013      	str	r3, [r2, #0]
 800b67c:	e013      	b.n	800b6a6 <tcp_close_shutdown+0xce>
 800b67e:	4b42      	ldr	r3, [pc, #264]	@ (800b788 <tcp_close_shutdown+0x1b0>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	60fb      	str	r3, [r7, #12]
 800b684:	e00c      	b.n	800b6a0 <tcp_close_shutdown+0xc8>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d104      	bne.n	800b69a <tcp_close_shutdown+0xc2>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	60da      	str	r2, [r3, #12]
 800b698:	e005      	b.n	800b6a6 <tcp_close_shutdown+0xce>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1ef      	bne.n	800b686 <tcp_close_shutdown+0xae>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	60da      	str	r2, [r3, #12]
 800b6ac:	4b37      	ldr	r3, [pc, #220]	@ (800b78c <tcp_close_shutdown+0x1b4>)
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b6b2:	4b37      	ldr	r3, [pc, #220]	@ (800b790 <tcp_close_shutdown+0x1b8>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d102      	bne.n	800b6c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b6bc:	f003 fd62 	bl	800f184 <tcp_trigger_input_pcb_close>
 800b6c0:	e002      	b.n	800b6c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff fed6 	bl	800b474 <tcp_free>
      }
      return ERR_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	e050      	b.n	800b76e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	7d1b      	ldrb	r3, [r3, #20]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d03b      	beq.n	800b74c <tcp_close_shutdown+0x174>
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	dc44      	bgt.n	800b762 <tcp_close_shutdown+0x18a>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <tcp_close_shutdown+0x10a>
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d02a      	beq.n	800b736 <tcp_close_shutdown+0x15e>
 800b6e0:	e03f      	b.n	800b762 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	8adb      	ldrh	r3, [r3, #22]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d021      	beq.n	800b72e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b6ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b794 <tcp_close_shutdown+0x1bc>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d105      	bne.n	800b700 <tcp_close_shutdown+0x128>
 800b6f4:	4b27      	ldr	r3, [pc, #156]	@ (800b794 <tcp_close_shutdown+0x1bc>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	4a26      	ldr	r2, [pc, #152]	@ (800b794 <tcp_close_shutdown+0x1bc>)
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	e013      	b.n	800b728 <tcp_close_shutdown+0x150>
 800b700:	4b24      	ldr	r3, [pc, #144]	@ (800b794 <tcp_close_shutdown+0x1bc>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	60bb      	str	r3, [r7, #8]
 800b706:	e00c      	b.n	800b722 <tcp_close_shutdown+0x14a>
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d104      	bne.n	800b71c <tcp_close_shutdown+0x144>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68da      	ldr	r2, [r3, #12]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	60da      	str	r2, [r3, #12]
 800b71a:	e005      	b.n	800b728 <tcp_close_shutdown+0x150>
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	60bb      	str	r3, [r7, #8]
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1ef      	bne.n	800b708 <tcp_close_shutdown+0x130>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff fea0 	bl	800b474 <tcp_free>
      break;
 800b734:	e01a      	b.n	800b76c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff ff14 	bl	800b564 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	4816      	ldr	r0, [pc, #88]	@ (800b798 <tcp_close_shutdown+0x1c0>)
 800b740:	f001 f8aa 	bl	800c898 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff feb1 	bl	800b4ac <tcp_free_listen>
      break;
 800b74a:	e00f      	b.n	800b76c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	480e      	ldr	r0, [pc, #56]	@ (800b788 <tcp_close_shutdown+0x1b0>)
 800b750:	f001 f8a2 	bl	800c898 <tcp_pcb_remove>
 800b754:	4b0d      	ldr	r3, [pc, #52]	@ (800b78c <tcp_close_shutdown+0x1b4>)
 800b756:	2201      	movs	r2, #1
 800b758:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff fe8a 	bl	800b474 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b760:	e004      	b.n	800b76c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f81a 	bl	800b79c <tcp_close_shutdown_fin>
 800b768:	4603      	mov	r3, r0
 800b76a:	e000      	b.n	800b76e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bdb0      	pop	{r4, r5, r7, pc}
 800b776:	bf00      	nop
 800b778:	080164e8 	.word	0x080164e8
 800b77c:	080165bc 	.word	0x080165bc
 800b780:	0801652c 	.word	0x0801652c
 800b784:	080165dc 	.word	0x080165dc
 800b788:	20008120 	.word	0x20008120
 800b78c:	20008128 	.word	0x20008128
 800b790:	20008164 	.word	0x20008164
 800b794:	20008118 	.word	0x20008118
 800b798:	2000811c 	.word	0x2000811c

0800b79c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d106      	bne.n	800b7b8 <tcp_close_shutdown_fin+0x1c>
 800b7aa:	4b2e      	ldr	r3, [pc, #184]	@ (800b864 <tcp_close_shutdown_fin+0xc8>)
 800b7ac:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b7b0:	492d      	ldr	r1, [pc, #180]	@ (800b868 <tcp_close_shutdown_fin+0xcc>)
 800b7b2:	482e      	ldr	r0, [pc, #184]	@ (800b86c <tcp_close_shutdown_fin+0xd0>)
 800b7b4:	f008 ffe4 	bl	8014780 <iprintf>

  switch (pcb->state) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	7d1b      	ldrb	r3, [r3, #20]
 800b7bc:	2b07      	cmp	r3, #7
 800b7be:	d020      	beq.n	800b802 <tcp_close_shutdown_fin+0x66>
 800b7c0:	2b07      	cmp	r3, #7
 800b7c2:	dc2b      	bgt.n	800b81c <tcp_close_shutdown_fin+0x80>
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d002      	beq.n	800b7ce <tcp_close_shutdown_fin+0x32>
 800b7c8:	2b04      	cmp	r3, #4
 800b7ca:	d00d      	beq.n	800b7e8 <tcp_close_shutdown_fin+0x4c>
 800b7cc:	e026      	b.n	800b81c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f003 fef0 	bl	800f5b4 <tcp_send_fin>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d11f      	bne.n	800b820 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2205      	movs	r2, #5
 800b7e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b7e6:	e01b      	b.n	800b820 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f003 fee3 	bl	800f5b4 <tcp_send_fin>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d114      	bne.n	800b824 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2205      	movs	r2, #5
 800b7fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b800:	e010      	b.n	800b824 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f003 fed6 	bl	800f5b4 <tcp_send_fin>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b80c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d109      	bne.n	800b828 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2209      	movs	r2, #9
 800b818:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b81a:	e005      	b.n	800b828 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	e01c      	b.n	800b85a <tcp_close_shutdown_fin+0xbe>
      break;
 800b820:	bf00      	nop
 800b822:	e002      	b.n	800b82a <tcp_close_shutdown_fin+0x8e>
      break;
 800b824:	bf00      	nop
 800b826:	e000      	b.n	800b82a <tcp_close_shutdown_fin+0x8e>
      break;
 800b828:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d103      	bne.n	800b83a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f003 fffc 	bl	800f830 <tcp_output>
 800b838:	e00d      	b.n	800b856 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b83e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b842:	d108      	bne.n	800b856 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	8b5b      	ldrh	r3, [r3, #26]
 800b848:	f043 0308 	orr.w	r3, r3, #8
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	e001      	b.n	800b85a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	080164e8 	.word	0x080164e8
 800b868:	08016598 	.word	0x08016598
 800b86c:	0801652c 	.word	0x0801652c

0800b870 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d109      	bne.n	800b892 <tcp_close+0x22>
 800b87e:	4b0f      	ldr	r3, [pc, #60]	@ (800b8bc <tcp_close+0x4c>)
 800b880:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800b884:	490e      	ldr	r1, [pc, #56]	@ (800b8c0 <tcp_close+0x50>)
 800b886:	480f      	ldr	r0, [pc, #60]	@ (800b8c4 <tcp_close+0x54>)
 800b888:	f008 ff7a 	bl	8014780 <iprintf>
 800b88c:	f06f 030f 	mvn.w	r3, #15
 800b890:	e00f      	b.n	800b8b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7d1b      	ldrb	r3, [r3, #20]
 800b896:	2b01      	cmp	r3, #1
 800b898:	d006      	beq.n	800b8a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	8b5b      	ldrh	r3, [r3, #26]
 800b89e:	f043 0310 	orr.w	r3, r3, #16
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b8a8:	2101      	movs	r1, #1
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff fe94 	bl	800b5d8 <tcp_close_shutdown>
 800b8b0:	4603      	mov	r3, r0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	080164e8 	.word	0x080164e8
 800b8c0:	080165f8 	.word	0x080165f8
 800b8c4:	0801652c 	.word	0x0801652c

0800b8c8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08e      	sub	sp, #56	@ 0x38
 800b8cc:	af04      	add	r7, sp, #16
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d107      	bne.n	800b8e8 <tcp_abandon+0x20>
 800b8d8:	4b52      	ldr	r3, [pc, #328]	@ (800ba24 <tcp_abandon+0x15c>)
 800b8da:	f240 223d 	movw	r2, #573	@ 0x23d
 800b8de:	4952      	ldr	r1, [pc, #328]	@ (800ba28 <tcp_abandon+0x160>)
 800b8e0:	4852      	ldr	r0, [pc, #328]	@ (800ba2c <tcp_abandon+0x164>)
 800b8e2:	f008 ff4d 	bl	8014780 <iprintf>
 800b8e6:	e099      	b.n	800ba1c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	7d1b      	ldrb	r3, [r3, #20]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d106      	bne.n	800b8fe <tcp_abandon+0x36>
 800b8f0:	4b4c      	ldr	r3, [pc, #304]	@ (800ba24 <tcp_abandon+0x15c>)
 800b8f2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800b8f6:	494e      	ldr	r1, [pc, #312]	@ (800ba30 <tcp_abandon+0x168>)
 800b8f8:	484c      	ldr	r0, [pc, #304]	@ (800ba2c <tcp_abandon+0x164>)
 800b8fa:	f008 ff41 	bl	8014780 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	7d1b      	ldrb	r3, [r3, #20]
 800b902:	2b0a      	cmp	r3, #10
 800b904:	d107      	bne.n	800b916 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b906:	6879      	ldr	r1, [r7, #4]
 800b908:	484a      	ldr	r0, [pc, #296]	@ (800ba34 <tcp_abandon+0x16c>)
 800b90a:	f000 ffc5 	bl	800c898 <tcp_pcb_remove>
    tcp_free(pcb);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff fdb0 	bl	800b474 <tcp_free>
 800b914:	e082      	b.n	800ba1c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b922:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b928:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b930:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	7d1b      	ldrb	r3, [r3, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d126      	bne.n	800b98e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8adb      	ldrh	r3, [r3, #22]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d02e      	beq.n	800b9a6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b948:	4b3b      	ldr	r3, [pc, #236]	@ (800ba38 <tcp_abandon+0x170>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d105      	bne.n	800b95e <tcp_abandon+0x96>
 800b952:	4b39      	ldr	r3, [pc, #228]	@ (800ba38 <tcp_abandon+0x170>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	4a37      	ldr	r2, [pc, #220]	@ (800ba38 <tcp_abandon+0x170>)
 800b95a:	6013      	str	r3, [r2, #0]
 800b95c:	e013      	b.n	800b986 <tcp_abandon+0xbe>
 800b95e:	4b36      	ldr	r3, [pc, #216]	@ (800ba38 <tcp_abandon+0x170>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	61fb      	str	r3, [r7, #28]
 800b964:	e00c      	b.n	800b980 <tcp_abandon+0xb8>
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d104      	bne.n	800b97a <tcp_abandon+0xb2>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	68da      	ldr	r2, [r3, #12]
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	60da      	str	r2, [r3, #12]
 800b978:	e005      	b.n	800b986 <tcp_abandon+0xbe>
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1ef      	bne.n	800b966 <tcp_abandon+0x9e>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	60da      	str	r2, [r3, #12]
 800b98c:	e00b      	b.n	800b9a6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	8adb      	ldrh	r3, [r3, #22]
 800b996:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b998:	6879      	ldr	r1, [r7, #4]
 800b99a:	4828      	ldr	r0, [pc, #160]	@ (800ba3c <tcp_abandon+0x174>)
 800b99c:	f000 ff7c 	bl	800c898 <tcp_pcb_remove>
 800b9a0:	4b27      	ldr	r3, [pc, #156]	@ (800ba40 <tcp_abandon+0x178>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d004      	beq.n	800b9b8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 fd1e 	bl	800c3f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f000 fd15 	bl	800c3f4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d004      	beq.n	800b9dc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 fd0c 	bl	800c3f4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00e      	beq.n	800ba00 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	8b12      	ldrh	r2, [r2, #24]
 800b9ec:	9202      	str	r2, [sp, #8]
 800b9ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b9f0:	9201      	str	r2, [sp, #4]
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	69b9      	ldr	r1, [r7, #24]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f004 fcd8 	bl	80103b0 <tcp_rst>
    }
    last_state = pcb->state;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	7d1b      	ldrb	r3, [r3, #20]
 800ba04:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fd34 	bl	800b474 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d004      	beq.n	800ba1c <tcp_abandon+0x154>
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	f06f 010c 	mvn.w	r1, #12
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	4798      	blx	r3
  }
}
 800ba1c:	3728      	adds	r7, #40	@ 0x28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	080164e8 	.word	0x080164e8
 800ba28:	0801662c 	.word	0x0801662c
 800ba2c:	0801652c 	.word	0x0801652c
 800ba30:	08016648 	.word	0x08016648
 800ba34:	20008124 	.word	0x20008124
 800ba38:	20008118 	.word	0x20008118
 800ba3c:	20008120 	.word	0x20008120
 800ba40:	20008128 	.word	0x20008128

0800ba44 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7ff ff3a 	bl	800b8c8 <tcp_abandon>
}
 800ba54:	bf00      	nop
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d106      	bne.n	800ba78 <tcp_update_rcv_ann_wnd+0x1c>
 800ba6a:	4b25      	ldr	r3, [pc, #148]	@ (800bb00 <tcp_update_rcv_ann_wnd+0xa4>)
 800ba6c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ba70:	4924      	ldr	r1, [pc, #144]	@ (800bb04 <tcp_update_rcv_ann_wnd+0xa8>)
 800ba72:	4825      	ldr	r0, [pc, #148]	@ (800bb08 <tcp_update_rcv_ann_wnd+0xac>)
 800ba74:	f008 fe84 	bl	8014780 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ba80:	4413      	add	r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ba8c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ba90:	bf28      	it	cs
 800ba92:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ba96:	b292      	uxth	r2, r2
 800ba98:	4413      	add	r3, r2
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	db08      	blt.n	800bab4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	e020      	b.n	800baf6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	dd03      	ble.n	800baca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bac8:	e014      	b.n	800baf4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800badc:	d306      	bcc.n	800baec <tcp_update_rcv_ann_wnd+0x90>
 800bade:	4b08      	ldr	r3, [pc, #32]	@ (800bb00 <tcp_update_rcv_ann_wnd+0xa4>)
 800bae0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800bae4:	4909      	ldr	r1, [pc, #36]	@ (800bb0c <tcp_update_rcv_ann_wnd+0xb0>)
 800bae6:	4808      	ldr	r0, [pc, #32]	@ (800bb08 <tcp_update_rcv_ann_wnd+0xac>)
 800bae8:	f008 fe4a 	bl	8014780 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800baf4:	2300      	movs	r3, #0
  }
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	080164e8 	.word	0x080164e8
 800bb04:	08016744 	.word	0x08016744
 800bb08:	0801652c 	.word	0x0801652c
 800bb0c:	08016768 	.word	0x08016768

0800bb10 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d107      	bne.n	800bb32 <tcp_recved+0x22>
 800bb22:	4b1f      	ldr	r3, [pc, #124]	@ (800bba0 <tcp_recved+0x90>)
 800bb24:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800bb28:	491e      	ldr	r1, [pc, #120]	@ (800bba4 <tcp_recved+0x94>)
 800bb2a:	481f      	ldr	r0, [pc, #124]	@ (800bba8 <tcp_recved+0x98>)
 800bb2c:	f008 fe28 	bl	8014780 <iprintf>
 800bb30:	e032      	b.n	800bb98 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	7d1b      	ldrb	r3, [r3, #20]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d106      	bne.n	800bb48 <tcp_recved+0x38>
 800bb3a:	4b19      	ldr	r3, [pc, #100]	@ (800bba0 <tcp_recved+0x90>)
 800bb3c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800bb40:	491a      	ldr	r1, [pc, #104]	@ (800bbac <tcp_recved+0x9c>)
 800bb42:	4819      	ldr	r0, [pc, #100]	@ (800bba8 <tcp_recved+0x98>)
 800bb44:	f008 fe1c 	bl	8014780 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bb4c:	887b      	ldrh	r3, [r7, #2]
 800bb4e:	4413      	add	r3, r2
 800bb50:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bb52:	89fb      	ldrh	r3, [r7, #14]
 800bb54:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bb58:	d804      	bhi.n	800bb64 <tcp_recved+0x54>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb5e:	89fa      	ldrh	r2, [r7, #14]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d204      	bcs.n	800bb6e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800bb6a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bb6c:	e002      	b.n	800bb74 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	89fa      	ldrh	r2, [r7, #14]
 800bb72:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7ff ff71 	bl	800ba5c <tcp_update_rcv_ann_wnd>
 800bb7a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800bb82:	d309      	bcc.n	800bb98 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	8b5b      	ldrh	r3, [r3, #26]
 800bb88:	f043 0302 	orr.w	r3, r3, #2
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f003 fe4c 	bl	800f830 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	080164e8 	.word	0x080164e8
 800bba4:	08016784 	.word	0x08016784
 800bba8:	0801652c 	.word	0x0801652c
 800bbac:	0801679c 	.word	0x0801679c

0800bbb0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bbb0:	b5b0      	push	{r4, r5, r7, lr}
 800bbb2:	b090      	sub	sp, #64	@ 0x40
 800bbb4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800bbbc:	4b95      	ldr	r3, [pc, #596]	@ (800be14 <tcp_slowtmr+0x264>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	4a94      	ldr	r2, [pc, #592]	@ (800be14 <tcp_slowtmr+0x264>)
 800bbc4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bbc6:	4b94      	ldr	r3, [pc, #592]	@ (800be18 <tcp_slowtmr+0x268>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	4b92      	ldr	r3, [pc, #584]	@ (800be18 <tcp_slowtmr+0x268>)
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e000      	b.n	800bbd6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800bbd4:	bf00      	nop
  prev = NULL;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800bbda:	4b90      	ldr	r3, [pc, #576]	@ (800be1c <tcp_slowtmr+0x26c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800bbe0:	e29d      	b.n	800c11e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe4:	7d1b      	ldrb	r3, [r3, #20]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <tcp_slowtmr+0x48>
 800bbea:	4b8d      	ldr	r3, [pc, #564]	@ (800be20 <tcp_slowtmr+0x270>)
 800bbec:	f240 42be 	movw	r2, #1214	@ 0x4be
 800bbf0:	498c      	ldr	r1, [pc, #560]	@ (800be24 <tcp_slowtmr+0x274>)
 800bbf2:	488d      	ldr	r0, [pc, #564]	@ (800be28 <tcp_slowtmr+0x278>)
 800bbf4:	f008 fdc4 	bl	8014780 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfa:	7d1b      	ldrb	r3, [r3, #20]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d106      	bne.n	800bc0e <tcp_slowtmr+0x5e>
 800bc00:	4b87      	ldr	r3, [pc, #540]	@ (800be20 <tcp_slowtmr+0x270>)
 800bc02:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800bc06:	4989      	ldr	r1, [pc, #548]	@ (800be2c <tcp_slowtmr+0x27c>)
 800bc08:	4887      	ldr	r0, [pc, #540]	@ (800be28 <tcp_slowtmr+0x278>)
 800bc0a:	f008 fdb9 	bl	8014780 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc10:	7d1b      	ldrb	r3, [r3, #20]
 800bc12:	2b0a      	cmp	r3, #10
 800bc14:	d106      	bne.n	800bc24 <tcp_slowtmr+0x74>
 800bc16:	4b82      	ldr	r3, [pc, #520]	@ (800be20 <tcp_slowtmr+0x270>)
 800bc18:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800bc1c:	4984      	ldr	r1, [pc, #528]	@ (800be30 <tcp_slowtmr+0x280>)
 800bc1e:	4882      	ldr	r0, [pc, #520]	@ (800be28 <tcp_slowtmr+0x278>)
 800bc20:	f008 fdae 	bl	8014780 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc26:	7f9a      	ldrb	r2, [r3, #30]
 800bc28:	4b7b      	ldr	r3, [pc, #492]	@ (800be18 <tcp_slowtmr+0x268>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d105      	bne.n	800bc3c <tcp_slowtmr+0x8c>
      prev = pcb;
 800bc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc32:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800bc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800bc3a:	e270      	b.n	800c11e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800bc3c:	4b76      	ldr	r3, [pc, #472]	@ (800be18 <tcp_slowtmr+0x268>)
 800bc3e:	781a      	ldrb	r2, [r3, #0]
 800bc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc42:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc52:	7d1b      	ldrb	r3, [r3, #20]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d10a      	bne.n	800bc6e <tcp_slowtmr+0xbe>
 800bc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc5e:	2b05      	cmp	r3, #5
 800bc60:	d905      	bls.n	800bc6e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800bc62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc66:	3301      	adds	r3, #1
 800bc68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800bc6c:	e11e      	b.n	800beac <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc74:	2b0b      	cmp	r3, #11
 800bc76:	d905      	bls.n	800bc84 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800bc78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc82:	e113      	b.n	800beac <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800bc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc86:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d075      	beq.n	800bd7a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d006      	beq.n	800bca4 <tcp_slowtmr+0xf4>
 800bc96:	4b62      	ldr	r3, [pc, #392]	@ (800be20 <tcp_slowtmr+0x270>)
 800bc98:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800bc9c:	4965      	ldr	r1, [pc, #404]	@ (800be34 <tcp_slowtmr+0x284>)
 800bc9e:	4862      	ldr	r0, [pc, #392]	@ (800be28 <tcp_slowtmr+0x278>)
 800bca0:	f008 fd6e 	bl	8014780 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <tcp_slowtmr+0x10a>
 800bcac:	4b5c      	ldr	r3, [pc, #368]	@ (800be20 <tcp_slowtmr+0x270>)
 800bcae:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800bcb2:	4961      	ldr	r1, [pc, #388]	@ (800be38 <tcp_slowtmr+0x288>)
 800bcb4:	485c      	ldr	r0, [pc, #368]	@ (800be28 <tcp_slowtmr+0x278>)
 800bcb6:	f008 fd63 	bl	8014780 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bcc0:	2b0b      	cmp	r3, #11
 800bcc2:	d905      	bls.n	800bcd0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800bcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcc8:	3301      	adds	r3, #1
 800bcca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bcce:	e0ed      	b.n	800beac <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	4a58      	ldr	r2, [pc, #352]	@ (800be3c <tcp_slowtmr+0x28c>)
 800bcda:	5cd3      	ldrb	r3, [r2, r3]
 800bcdc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bce4:	7c7a      	ldrb	r2, [r7, #17]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d907      	bls.n	800bcfa <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800bcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800bcfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bd00:	7c7a      	ldrb	r2, [r7, #17]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	f200 80d2 	bhi.w	800beac <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800bd08:	2301      	movs	r3, #1
 800bd0a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800bd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d108      	bne.n	800bd28 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bd16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd18:	f004 fc3e 	bl	8010598 <tcp_zero_window_probe>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d014      	beq.n	800bd4c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800bd22:	2300      	movs	r3, #0
 800bd24:	623b      	str	r3, [r7, #32]
 800bd26:	e011      	b.n	800bd4c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd32:	f003 faf3 	bl	800f31c <tcp_split_unsent_seg>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d107      	bne.n	800bd4c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800bd3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd3e:	f003 fd77 	bl	800f830 <tcp_output>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d101      	bne.n	800bd4c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800bd4c:	6a3b      	ldr	r3, [r7, #32]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 80ac 	beq.w	800beac <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800bd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bd62:	2b06      	cmp	r3, #6
 800bd64:	f200 80a2 	bhi.w	800beac <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800bd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bd6e:	3301      	adds	r3, #1
 800bd70:	b2da      	uxtb	r2, r3
 800bd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd74:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800bd78:	e098      	b.n	800beac <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	db0f      	blt.n	800bda4 <tcp_slowtmr+0x1f4>
 800bd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bd8a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d008      	beq.n	800bda4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800bd92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	b21a      	sxth	r2, r3
 800bda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800bdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	db7b      	blt.n	800beac <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bdb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bdb6:	f004 f831 	bl	800fe1c <tcp_rexmit_rto_prepare>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d007      	beq.n	800bdd0 <tcp_slowtmr+0x220>
 800bdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d171      	bne.n	800beac <tcp_slowtmr+0x2fc>
 800bdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d06d      	beq.n	800beac <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd2:	7d1b      	ldrb	r3, [r3, #20]
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d03a      	beq.n	800be4e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bdde:	2b0c      	cmp	r3, #12
 800bde0:	bf28      	it	cs
 800bde2:	230c      	movcs	r3, #12
 800bde4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bdec:	10db      	asrs	r3, r3, #3
 800bdee:	b21b      	sxth	r3, r3
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bdf8:	4413      	add	r3, r2
 800bdfa:	7efa      	ldrb	r2, [r7, #27]
 800bdfc:	4910      	ldr	r1, [pc, #64]	@ (800be40 <tcp_slowtmr+0x290>)
 800bdfe:	5c8a      	ldrb	r2, [r1, r2]
 800be00:	4093      	lsls	r3, r2
 800be02:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800be0a:	4293      	cmp	r3, r2
 800be0c:	dc1a      	bgt.n	800be44 <tcp_slowtmr+0x294>
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	b21a      	sxth	r2, r3
 800be12:	e019      	b.n	800be48 <tcp_slowtmr+0x298>
 800be14:	20008114 	.word	0x20008114
 800be18:	2000812a 	.word	0x2000812a
 800be1c:	20008120 	.word	0x20008120
 800be20:	080164e8 	.word	0x080164e8
 800be24:	0801682c 	.word	0x0801682c
 800be28:	0801652c 	.word	0x0801652c
 800be2c:	08016858 	.word	0x08016858
 800be30:	08016884 	.word	0x08016884
 800be34:	080168b4 	.word	0x080168b4
 800be38:	080168e8 	.word	0x080168e8
 800be3c:	08018de0 	.word	0x08018de0
 800be40:	08018dd0 	.word	0x08018dd0
 800be44:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800be48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800be4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be50:	2200      	movs	r2, #0
 800be52:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800be54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800be5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800be60:	4293      	cmp	r3, r2
 800be62:	bf28      	it	cs
 800be64:	4613      	movcs	r3, r2
 800be66:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800be68:	8a7b      	ldrh	r3, [r7, #18]
 800be6a:	085b      	lsrs	r3, r3, #1
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be70:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800be74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be76:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800be7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	b29b      	uxth	r3, r3
 800be82:	429a      	cmp	r2, r3
 800be84:	d206      	bcs.n	800be94 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800be86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be90:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800be94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be96:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800be9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea0:	2200      	movs	r2, #0
 800bea2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800bea6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bea8:	f004 f832 	bl	800ff10 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	7d1b      	ldrb	r3, [r3, #20]
 800beb0:	2b06      	cmp	r3, #6
 800beb2:	d111      	bne.n	800bed8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800beb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb6:	8b5b      	ldrh	r3, [r3, #26]
 800beb8:	f003 0310 	and.w	r3, r3, #16
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bec0:	4b9c      	ldr	r3, [pc, #624]	@ (800c134 <tcp_slowtmr+0x584>)
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec6:	6a1b      	ldr	r3, [r3, #32]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	2b28      	cmp	r3, #40	@ 0x28
 800becc:	d904      	bls.n	800bed8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800bece:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bed2:	3301      	adds	r3, #1
 800bed4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beda:	7a5b      	ldrb	r3, [r3, #9]
 800bedc:	f003 0308 	and.w	r3, r3, #8
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d04a      	beq.n	800bf7a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800bee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d003      	beq.n	800bef4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800beec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bef0:	2b07      	cmp	r3, #7
 800bef2:	d142      	bne.n	800bf7a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bef4:	4b8f      	ldr	r3, [pc, #572]	@ (800c134 <tcp_slowtmr+0x584>)
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800befe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf00:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800bf04:	4b8c      	ldr	r3, [pc, #560]	@ (800c138 <tcp_slowtmr+0x588>)
 800bf06:	440b      	add	r3, r1
 800bf08:	498c      	ldr	r1, [pc, #560]	@ (800c13c <tcp_slowtmr+0x58c>)
 800bf0a:	fba1 1303 	umull	r1, r3, r1, r3
 800bf0e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d90a      	bls.n	800bf2a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800bf14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf18:	3301      	adds	r3, #1
 800bf1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800bf1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf22:	3301      	adds	r3, #1
 800bf24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bf28:	e027      	b.n	800bf7a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf2a:	4b82      	ldr	r3, [pc, #520]	@ (800c134 <tcp_slowtmr+0x584>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf36:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800bf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf3c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800bf40:	4618      	mov	r0, r3
 800bf42:	4b7f      	ldr	r3, [pc, #508]	@ (800c140 <tcp_slowtmr+0x590>)
 800bf44:	fb00 f303 	mul.w	r3, r0, r3
 800bf48:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bf4a:	497c      	ldr	r1, [pc, #496]	@ (800c13c <tcp_slowtmr+0x58c>)
 800bf4c:	fba1 1303 	umull	r1, r3, r1, r3
 800bf50:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d911      	bls.n	800bf7a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bf56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf58:	f004 fade 	bl	8010518 <tcp_keepalive>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800bf62:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d107      	bne.n	800bf7a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bf6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800bf70:	3301      	adds	r3, #1
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf76:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800bf7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d011      	beq.n	800bfa6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bf82:	4b6c      	ldr	r3, [pc, #432]	@ (800c134 <tcp_slowtmr+0x584>)
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	1ad2      	subs	r2, r2, r3
 800bf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bf92:	4619      	mov	r1, r3
 800bf94:	460b      	mov	r3, r1
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	440b      	add	r3, r1
 800bf9a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d302      	bcc.n	800bfa6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800bfa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfa2:	f000 fde3 	bl	800cb6c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800bfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa8:	7d1b      	ldrb	r3, [r3, #20]
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d10b      	bne.n	800bfc6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bfae:	4b61      	ldr	r3, [pc, #388]	@ (800c134 <tcp_slowtmr+0x584>)
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	2b28      	cmp	r3, #40	@ 0x28
 800bfba:	d904      	bls.n	800bfc6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800bfbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800bfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc8:	7d1b      	ldrb	r3, [r3, #20]
 800bfca:	2b09      	cmp	r3, #9
 800bfcc:	d10b      	bne.n	800bfe6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bfce:	4b59      	ldr	r3, [pc, #356]	@ (800c134 <tcp_slowtmr+0x584>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	2bf0      	cmp	r3, #240	@ 0xf0
 800bfda:	d904      	bls.n	800bfe6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800bfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800bfe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d060      	beq.n	800c0b0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800bfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bff4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800bff6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bff8:	f000 fbfe 	bl	800c7f8 <tcp_pcb_purge>
      if (prev != NULL) {
 800bffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d010      	beq.n	800c024 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c002:	4b50      	ldr	r3, [pc, #320]	@ (800c144 <tcp_slowtmr+0x594>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c008:	429a      	cmp	r2, r3
 800c00a:	d106      	bne.n	800c01a <tcp_slowtmr+0x46a>
 800c00c:	4b4e      	ldr	r3, [pc, #312]	@ (800c148 <tcp_slowtmr+0x598>)
 800c00e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800c012:	494e      	ldr	r1, [pc, #312]	@ (800c14c <tcp_slowtmr+0x59c>)
 800c014:	484e      	ldr	r0, [pc, #312]	@ (800c150 <tcp_slowtmr+0x5a0>)
 800c016:	f008 fbb3 	bl	8014780 <iprintf>
        prev->next = pcb->next;
 800c01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01c:	68da      	ldr	r2, [r3, #12]
 800c01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c020:	60da      	str	r2, [r3, #12]
 800c022:	e00f      	b.n	800c044 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c024:	4b47      	ldr	r3, [pc, #284]	@ (800c144 <tcp_slowtmr+0x594>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d006      	beq.n	800c03c <tcp_slowtmr+0x48c>
 800c02e:	4b46      	ldr	r3, [pc, #280]	@ (800c148 <tcp_slowtmr+0x598>)
 800c030:	f240 5271 	movw	r2, #1393	@ 0x571
 800c034:	4947      	ldr	r1, [pc, #284]	@ (800c154 <tcp_slowtmr+0x5a4>)
 800c036:	4846      	ldr	r0, [pc, #280]	@ (800c150 <tcp_slowtmr+0x5a0>)
 800c038:	f008 fba2 	bl	8014780 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	4a40      	ldr	r2, [pc, #256]	@ (800c144 <tcp_slowtmr+0x594>)
 800c042:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800c044:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d013      	beq.n	800c074 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c052:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c054:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c058:	3304      	adds	r3, #4
 800c05a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c05c:	8ad2      	ldrh	r2, [r2, #22]
 800c05e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c060:	8b09      	ldrh	r1, [r1, #24]
 800c062:	9102      	str	r1, [sp, #8]
 800c064:	9201      	str	r2, [sp, #4]
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	462b      	mov	r3, r5
 800c06a:	4622      	mov	r2, r4
 800c06c:	4601      	mov	r1, r0
 800c06e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c070:	f004 f99e 	bl	80103b0 <tcp_rst>
      err_arg = pcb->callback_arg;
 800c074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c07c:	7d1b      	ldrb	r3, [r3, #20]
 800c07e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c082:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800c08a:	6838      	ldr	r0, [r7, #0]
 800c08c:	f7ff f9f2 	bl	800b474 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800c090:	4b31      	ldr	r3, [pc, #196]	@ (800c158 <tcp_slowtmr+0x5a8>)
 800c092:	2200      	movs	r2, #0
 800c094:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <tcp_slowtmr+0x4f6>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f06f 010c 	mvn.w	r1, #12
 800c0a2:	68b8      	ldr	r0, [r7, #8]
 800c0a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c0a6:	4b2c      	ldr	r3, [pc, #176]	@ (800c158 <tcp_slowtmr+0x5a8>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d037      	beq.n	800c11e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c0ae:	e592      	b.n	800bbd6 <tcp_slowtmr+0x26>
      prev = pcb;
 800c0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800c0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0bc:	7f1b      	ldrb	r3, [r3, #28]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c8:	7f1a      	ldrb	r2, [r3, #28]
 800c0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0cc:	7f5b      	ldrb	r3, [r3, #29]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d325      	bcc.n	800c11e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800c0d8:	4b1f      	ldr	r3, [pc, #124]	@ (800c158 <tcp_slowtmr+0x5a8>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00b      	beq.n	800c100 <tcp_slowtmr+0x550>
 800c0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0f0:	6912      	ldr	r2, [r2, #16]
 800c0f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	4798      	blx	r3
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c0fe:	e002      	b.n	800c106 <tcp_slowtmr+0x556>
 800c100:	2300      	movs	r3, #0
 800c102:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800c106:	4b14      	ldr	r3, [pc, #80]	@ (800c158 <tcp_slowtmr+0x5a8>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f47f ad62 	bne.w	800bbd4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c110:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800c114:	2b00      	cmp	r3, #0
 800c116:	d102      	bne.n	800c11e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c11a:	f003 fb89 	bl	800f830 <tcp_output>
  while (pcb != NULL) {
 800c11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	f47f ad5e 	bne.w	800bbe2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c126:	2300      	movs	r3, #0
 800c128:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800c12a:	4b0c      	ldr	r3, [pc, #48]	@ (800c15c <tcp_slowtmr+0x5ac>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c130:	e069      	b.n	800c206 <tcp_slowtmr+0x656>
 800c132:	bf00      	nop
 800c134:	20008114 	.word	0x20008114
 800c138:	000a4cb8 	.word	0x000a4cb8
 800c13c:	10624dd3 	.word	0x10624dd3
 800c140:	000124f8 	.word	0x000124f8
 800c144:	20008120 	.word	0x20008120
 800c148:	080164e8 	.word	0x080164e8
 800c14c:	08016920 	.word	0x08016920
 800c150:	0801652c 	.word	0x0801652c
 800c154:	0801694c 	.word	0x0801694c
 800c158:	20008128 	.word	0x20008128
 800c15c:	20008124 	.word	0x20008124
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c162:	7d1b      	ldrb	r3, [r3, #20]
 800c164:	2b0a      	cmp	r3, #10
 800c166:	d006      	beq.n	800c176 <tcp_slowtmr+0x5c6>
 800c168:	4b2b      	ldr	r3, [pc, #172]	@ (800c218 <tcp_slowtmr+0x668>)
 800c16a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800c16e:	492b      	ldr	r1, [pc, #172]	@ (800c21c <tcp_slowtmr+0x66c>)
 800c170:	482b      	ldr	r0, [pc, #172]	@ (800c220 <tcp_slowtmr+0x670>)
 800c172:	f008 fb05 	bl	8014780 <iprintf>
    pcb_remove = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c17c:	4b29      	ldr	r3, [pc, #164]	@ (800c224 <tcp_slowtmr+0x674>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c182:	6a1b      	ldr	r3, [r3, #32]
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	2bf0      	cmp	r3, #240	@ 0xf0
 800c188:	d904      	bls.n	800c194 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800c18a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c18e:	3301      	adds	r3, #1
 800c190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d02f      	beq.n	800c1fc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c19c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c19e:	f000 fb2b 	bl	800c7f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d010      	beq.n	800c1ca <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c1a8:	4b1f      	ldr	r3, [pc, #124]	@ (800c228 <tcp_slowtmr+0x678>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d106      	bne.n	800c1c0 <tcp_slowtmr+0x610>
 800c1b2:	4b19      	ldr	r3, [pc, #100]	@ (800c218 <tcp_slowtmr+0x668>)
 800c1b4:	f240 52af 	movw	r2, #1455	@ 0x5af
 800c1b8:	491c      	ldr	r1, [pc, #112]	@ (800c22c <tcp_slowtmr+0x67c>)
 800c1ba:	4819      	ldr	r0, [pc, #100]	@ (800c220 <tcp_slowtmr+0x670>)
 800c1bc:	f008 fae0 	bl	8014780 <iprintf>
        prev->next = pcb->next;
 800c1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c2:	68da      	ldr	r2, [r3, #12]
 800c1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c6:	60da      	str	r2, [r3, #12]
 800c1c8:	e00f      	b.n	800c1ea <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c1ca:	4b17      	ldr	r3, [pc, #92]	@ (800c228 <tcp_slowtmr+0x678>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d006      	beq.n	800c1e2 <tcp_slowtmr+0x632>
 800c1d4:	4b10      	ldr	r3, [pc, #64]	@ (800c218 <tcp_slowtmr+0x668>)
 800c1d6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c1da:	4915      	ldr	r1, [pc, #84]	@ (800c230 <tcp_slowtmr+0x680>)
 800c1dc:	4810      	ldr	r0, [pc, #64]	@ (800c220 <tcp_slowtmr+0x670>)
 800c1de:	f008 facf 	bl	8014780 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	4a10      	ldr	r2, [pc, #64]	@ (800c228 <tcp_slowtmr+0x678>)
 800c1e8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ec:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800c1f4:	69f8      	ldr	r0, [r7, #28]
 800c1f6:	f7ff f93d 	bl	800b474 <tcp_free>
 800c1fa:	e004      	b.n	800c206 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800c1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1a9      	bne.n	800c160 <tcp_slowtmr+0x5b0>
    }
  }
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	3730      	adds	r7, #48	@ 0x30
 800c212:	46bd      	mov	sp, r7
 800c214:	bdb0      	pop	{r4, r5, r7, pc}
 800c216:	bf00      	nop
 800c218:	080164e8 	.word	0x080164e8
 800c21c:	08016978 	.word	0x08016978
 800c220:	0801652c 	.word	0x0801652c
 800c224:	20008114 	.word	0x20008114
 800c228:	20008124 	.word	0x20008124
 800c22c:	080169a8 	.word	0x080169a8
 800c230:	080169d0 	.word	0x080169d0

0800c234 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c23a:	4b2d      	ldr	r3, [pc, #180]	@ (800c2f0 <tcp_fasttmr+0xbc>)
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	3301      	adds	r3, #1
 800c240:	b2da      	uxtb	r2, r3
 800c242:	4b2b      	ldr	r3, [pc, #172]	@ (800c2f0 <tcp_fasttmr+0xbc>)
 800c244:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c246:	4b2b      	ldr	r3, [pc, #172]	@ (800c2f4 <tcp_fasttmr+0xc0>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c24c:	e048      	b.n	800c2e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	7f9a      	ldrb	r2, [r3, #30]
 800c252:	4b27      	ldr	r3, [pc, #156]	@ (800c2f0 <tcp_fasttmr+0xbc>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	429a      	cmp	r2, r3
 800c258:	d03f      	beq.n	800c2da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c25a:	4b25      	ldr	r3, [pc, #148]	@ (800c2f0 <tcp_fasttmr+0xbc>)
 800c25c:	781a      	ldrb	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	8b5b      	ldrh	r3, [r3, #26]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d010      	beq.n	800c290 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	8b5b      	ldrh	r3, [r3, #26]
 800c272:	f043 0302 	orr.w	r3, r3, #2
 800c276:	b29a      	uxth	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f003 fad7 	bl	800f830 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	8b5b      	ldrh	r3, [r3, #26]
 800c286:	f023 0303 	bic.w	r3, r3, #3
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	8b5b      	ldrh	r3, [r3, #26]
 800c294:	f003 0308 	and.w	r3, r3, #8
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d009      	beq.n	800c2b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	8b5b      	ldrh	r3, [r3, #26]
 800c2a0:	f023 0308 	bic.w	r3, r3, #8
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7ff fa76 	bl	800b79c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00a      	beq.n	800c2d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c2be:	4b0e      	ldr	r3, [pc, #56]	@ (800c2f8 <tcp_fasttmr+0xc4>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f819 	bl	800c2fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f8 <tcp_fasttmr+0xc4>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d000      	beq.n	800c2d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c2d2:	e7b8      	b.n	800c246 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	607b      	str	r3, [r7, #4]
 800c2d8:	e002      	b.n	800c2e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1b3      	bne.n	800c24e <tcp_fasttmr+0x1a>
    }
  }
}
 800c2e6:	bf00      	nop
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	2000812a 	.word	0x2000812a
 800c2f4:	20008120 	.word	0x20008120
 800c2f8:	20008128 	.word	0x20008128

0800c2fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c2fc:	b590      	push	{r4, r7, lr}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d109      	bne.n	800c31e <tcp_process_refused_data+0x22>
 800c30a:	4b37      	ldr	r3, [pc, #220]	@ (800c3e8 <tcp_process_refused_data+0xec>)
 800c30c:	f240 6209 	movw	r2, #1545	@ 0x609
 800c310:	4936      	ldr	r1, [pc, #216]	@ (800c3ec <tcp_process_refused_data+0xf0>)
 800c312:	4837      	ldr	r0, [pc, #220]	@ (800c3f0 <tcp_process_refused_data+0xf4>)
 800c314:	f008 fa34 	bl	8014780 <iprintf>
 800c318:	f06f 030f 	mvn.w	r3, #15
 800c31c:	e060      	b.n	800c3e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c322:	7b5b      	ldrb	r3, [r3, #13]
 800c324:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c32a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <tcp_process_refused_data+0x58>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6918      	ldr	r0, [r3, #16]
 800c346:	2300      	movs	r3, #0
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	47a0      	blx	r4
 800c34e:	4603      	mov	r3, r0
 800c350:	73fb      	strb	r3, [r7, #15]
 800c352:	e007      	b.n	800c364 <tcp_process_refused_data+0x68>
 800c354:	2300      	movs	r3, #0
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	2000      	movs	r0, #0
 800c35c:	f000 f8a4 	bl	800c4a8 <tcp_recv_null>
 800c360:	4603      	mov	r3, r0
 800c362:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d12a      	bne.n	800c3c2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	f003 0320 	and.w	r3, r3, #32
 800c372:	2b00      	cmp	r3, #0
 800c374:	d033      	beq.n	800c3de <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c37a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c37e:	d005      	beq.n	800c38c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c384:	3301      	adds	r3, #1
 800c386:	b29a      	uxth	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <tcp_process_refused_data+0xb2>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6918      	ldr	r0, [r3, #16]
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	47a0      	blx	r4
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73fb      	strb	r3, [r7, #15]
 800c3ac:	e001      	b.n	800c3b2 <tcp_process_refused_data+0xb6>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3b6:	f113 0f0d 	cmn.w	r3, #13
 800c3ba:	d110      	bne.n	800c3de <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c3bc:	f06f 030c 	mvn.w	r3, #12
 800c3c0:	e00e      	b.n	800c3e0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3c6:	f113 0f0d 	cmn.w	r3, #13
 800c3ca:	d102      	bne.n	800c3d2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c3cc:	f06f 030c 	mvn.w	r3, #12
 800c3d0:	e006      	b.n	800c3e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800c3d8:	f06f 0304 	mvn.w	r3, #4
 800c3dc:	e000      	b.n	800c3e0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd90      	pop	{r4, r7, pc}
 800c3e8:	080164e8 	.word	0x080164e8
 800c3ec:	080169f8 	.word	0x080169f8
 800c3f0:	0801652c 	.word	0x0801652c

0800c3f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c3fc:	e007      	b.n	800c40e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f80a 	bl	800c41e <tcp_seg_free>
    seg = next;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1f4      	bne.n	800c3fe <tcp_segs_free+0xa>
  }
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00c      	beq.n	800c446 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d004      	beq.n	800c43e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fe fd6b 	bl	800af14 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	2003      	movs	r0, #3
 800c442:	f7fd fdfb 	bl	800a03c <memp_free>
  }
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <tcp_seg_copy+0x1c>
 800c45e:	4b0f      	ldr	r3, [pc, #60]	@ (800c49c <tcp_seg_copy+0x4c>)
 800c460:	f240 6282 	movw	r2, #1666	@ 0x682
 800c464:	490e      	ldr	r1, [pc, #56]	@ (800c4a0 <tcp_seg_copy+0x50>)
 800c466:	480f      	ldr	r0, [pc, #60]	@ (800c4a4 <tcp_seg_copy+0x54>)
 800c468:	f008 f98a 	bl	8014780 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c46c:	2003      	movs	r0, #3
 800c46e:	f7fd fd75 	bl	8009f5c <memp_malloc>
 800c472:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <tcp_seg_copy+0x2e>
    return NULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	e00a      	b.n	800c494 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c47e:	2214      	movs	r2, #20
 800c480:	6879      	ldr	r1, [r7, #4]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f008 fb51 	bl	8014b2a <memcpy>
  pbuf_ref(cseg->p);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fe fde1 	bl	800b054 <pbuf_ref>
  return cseg;
 800c492:	68fb      	ldr	r3, [r7, #12]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	080164e8 	.word	0x080164e8
 800c4a0:	08016a3c 	.word	0x08016a3c
 800c4a4:	0801652c 	.word	0x0801652c

0800c4a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d109      	bne.n	800c4d0 <tcp_recv_null+0x28>
 800c4bc:	4b12      	ldr	r3, [pc, #72]	@ (800c508 <tcp_recv_null+0x60>)
 800c4be:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c4c2:	4912      	ldr	r1, [pc, #72]	@ (800c50c <tcp_recv_null+0x64>)
 800c4c4:	4812      	ldr	r0, [pc, #72]	@ (800c510 <tcp_recv_null+0x68>)
 800c4c6:	f008 f95b 	bl	8014780 <iprintf>
 800c4ca:	f06f 030f 	mvn.w	r3, #15
 800c4ce:	e016      	b.n	800c4fe <tcp_recv_null+0x56>

  if (p != NULL) {
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d009      	beq.n	800c4ea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	891b      	ldrh	r3, [r3, #8]
 800c4da:	4619      	mov	r1, r3
 800c4dc:	68b8      	ldr	r0, [r7, #8]
 800c4de:	f7ff fb17 	bl	800bb10 <tcp_recved>
    pbuf_free(p);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7fe fd16 	bl	800af14 <pbuf_free>
 800c4e8:	e008      	b.n	800c4fc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c4ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d104      	bne.n	800c4fc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c4f2:	68b8      	ldr	r0, [r7, #8]
 800c4f4:	f7ff f9bc 	bl	800b870 <tcp_close>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	e000      	b.n	800c4fe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	080164e8 	.word	0x080164e8
 800c50c:	08016a58 	.word	0x08016a58
 800c510:	0801652c 	.word	0x0801652c

0800c514 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c51e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c522:	2b00      	cmp	r3, #0
 800c524:	db01      	blt.n	800c52a <tcp_kill_prio+0x16>
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	e000      	b.n	800c52c <tcp_kill_prio+0x18>
 800c52a:	237f      	movs	r3, #127	@ 0x7f
 800c52c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c52e:	7afb      	ldrb	r3, [r7, #11]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d034      	beq.n	800c59e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c534:	7afb      	ldrb	r3, [r7, #11]
 800c536:	3b01      	subs	r3, #1
 800c538:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c542:	4b19      	ldr	r3, [pc, #100]	@ (800c5a8 <tcp_kill_prio+0x94>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	e01f      	b.n	800c58a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	7d5b      	ldrb	r3, [r3, #21]
 800c54e:	7afa      	ldrb	r2, [r7, #11]
 800c550:	429a      	cmp	r2, r3
 800c552:	d80c      	bhi.n	800c56e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c558:	7afa      	ldrb	r2, [r7, #11]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d112      	bne.n	800c584 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c55e:	4b13      	ldr	r3, [pc, #76]	@ (800c5ac <tcp_kill_prio+0x98>)
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d80a      	bhi.n	800c584 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c56e:	4b0f      	ldr	r3, [pc, #60]	@ (800c5ac <tcp_kill_prio+0x98>)
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	7d5b      	ldrb	r3, [r3, #21]
 800c582:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	617b      	str	r3, [r7, #20]
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1dc      	bne.n	800c54a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d004      	beq.n	800c5a0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c596:	6938      	ldr	r0, [r7, #16]
 800c598:	f7ff fa54 	bl	800ba44 <tcp_abort>
 800c59c:	e000      	b.n	800c5a0 <tcp_kill_prio+0x8c>
    return;
 800c59e:	bf00      	nop
  }
}
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20008120 	.word	0x20008120
 800c5ac:	20008114 	.word	0x20008114

0800c5b0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	2b08      	cmp	r3, #8
 800c5be:	d009      	beq.n	800c5d4 <tcp_kill_state+0x24>
 800c5c0:	79fb      	ldrb	r3, [r7, #7]
 800c5c2:	2b09      	cmp	r3, #9
 800c5c4:	d006      	beq.n	800c5d4 <tcp_kill_state+0x24>
 800c5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c630 <tcp_kill_state+0x80>)
 800c5c8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800c5cc:	4919      	ldr	r1, [pc, #100]	@ (800c634 <tcp_kill_state+0x84>)
 800c5ce:	481a      	ldr	r0, [pc, #104]	@ (800c638 <tcp_kill_state+0x88>)
 800c5d0:	f008 f8d6 	bl	8014780 <iprintf>

  inactivity = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5dc:	4b17      	ldr	r3, [pc, #92]	@ (800c63c <tcp_kill_state+0x8c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	617b      	str	r3, [r7, #20]
 800c5e2:	e017      	b.n	800c614 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	7d1b      	ldrb	r3, [r3, #20]
 800c5e8:	79fa      	ldrb	r2, [r7, #7]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d10f      	bne.n	800c60e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c5ee:	4b14      	ldr	r3, [pc, #80]	@ (800c640 <tcp_kill_state+0x90>)
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d807      	bhi.n	800c60e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c5fe:	4b10      	ldr	r3, [pc, #64]	@ (800c640 <tcp_kill_state+0x90>)
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	617b      	str	r3, [r7, #20]
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e4      	bne.n	800c5e4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d003      	beq.n	800c628 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c620:	2100      	movs	r1, #0
 800c622:	6938      	ldr	r0, [r7, #16]
 800c624:	f7ff f950 	bl	800b8c8 <tcp_abandon>
  }
}
 800c628:	bf00      	nop
 800c62a:	3718      	adds	r7, #24
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	080164e8 	.word	0x080164e8
 800c634:	08016a74 	.word	0x08016a74
 800c638:	0801652c 	.word	0x0801652c
 800c63c:	20008120 	.word	0x20008120
 800c640:	20008114 	.word	0x20008114

0800c644 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c64e:	2300      	movs	r3, #0
 800c650:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c652:	4b12      	ldr	r3, [pc, #72]	@ (800c69c <tcp_kill_timewait+0x58>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	e012      	b.n	800c680 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c65a:	4b11      	ldr	r3, [pc, #68]	@ (800c6a0 <tcp_kill_timewait+0x5c>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6a1b      	ldr	r3, [r3, #32]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d807      	bhi.n	800c67a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c66a:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a0 <tcp_kill_timewait+0x5c>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	60fb      	str	r3, [r7, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1e9      	bne.n	800c65a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c68c:	68b8      	ldr	r0, [r7, #8]
 800c68e:	f7ff f9d9 	bl	800ba44 <tcp_abort>
  }
}
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	20008124 	.word	0x20008124
 800c6a0:	20008114 	.word	0x20008114

0800c6a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c6aa:	4b10      	ldr	r3, [pc, #64]	@ (800c6ec <tcp_handle_closepend+0x48>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c6b0:	e014      	b.n	800c6dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8b5b      	ldrh	r3, [r3, #26]
 800c6bc:	f003 0308 	and.w	r3, r3, #8
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d009      	beq.n	800c6d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	8b5b      	ldrh	r3, [r3, #26]
 800c6c8:	f023 0308 	bic.w	r3, r3, #8
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7ff f862 	bl	800b79c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e7      	bne.n	800c6b2 <tcp_handle_closepend+0xe>
  }
}
 800c6e2:	bf00      	nop
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	20008120 	.word	0x20008120

0800c6f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	f7fd fc2e 	bl	8009f5c <memp_malloc>
 800c700:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d126      	bne.n	800c756 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c708:	f7ff ffcc 	bl	800c6a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c70c:	f7ff ff9a 	bl	800c644 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c710:	2001      	movs	r0, #1
 800c712:	f7fd fc23 	bl	8009f5c <memp_malloc>
 800c716:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d11b      	bne.n	800c756 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c71e:	2009      	movs	r0, #9
 800c720:	f7ff ff46 	bl	800c5b0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c724:	2001      	movs	r0, #1
 800c726:	f7fd fc19 	bl	8009f5c <memp_malloc>
 800c72a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d111      	bne.n	800c756 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c732:	2008      	movs	r0, #8
 800c734:	f7ff ff3c 	bl	800c5b0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c738:	2001      	movs	r0, #1
 800c73a:	f7fd fc0f 	bl	8009f5c <memp_malloc>
 800c73e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d107      	bne.n	800c756 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c746:	79fb      	ldrb	r3, [r7, #7]
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff fee3 	bl	800c514 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c74e:	2001      	movs	r0, #1
 800c750:	f7fd fc04 	bl	8009f5c <memp_malloc>
 800c754:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d03f      	beq.n	800c7dc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c75c:	229c      	movs	r2, #156	@ 0x9c
 800c75e:	2100      	movs	r1, #0
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f008 f96d 	bl	8014a40 <memset>
    pcb->prio = prio;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	79fa      	ldrb	r2, [r7, #7]
 800c76a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c772:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c77c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	22ff      	movs	r2, #255	@ 0xff
 800c78a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c792:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2206      	movs	r2, #6
 800c798:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2206      	movs	r2, #6
 800c7a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c7a8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800c7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7e8 <tcp_alloc+0xf8>)
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c7ec <tcp_alloc+0xfc>)
 800c7bc:	781a      	ldrb	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c7c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4a08      	ldr	r2, [pc, #32]	@ (800c7f0 <tcp_alloc+0x100>)
 800c7d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	4a07      	ldr	r2, [pc, #28]	@ (800c7f4 <tcp_alloc+0x104>)
 800c7d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20008114 	.word	0x20008114
 800c7ec:	2000812a 	.word	0x2000812a
 800c7f0:	0800c4a9 	.word	0x0800c4a9
 800c7f4:	006ddd00 	.word	0x006ddd00

0800c7f8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d107      	bne.n	800c816 <tcp_pcb_purge+0x1e>
 800c806:	4b21      	ldr	r3, [pc, #132]	@ (800c88c <tcp_pcb_purge+0x94>)
 800c808:	f640 0251 	movw	r2, #2129	@ 0x851
 800c80c:	4920      	ldr	r1, [pc, #128]	@ (800c890 <tcp_pcb_purge+0x98>)
 800c80e:	4821      	ldr	r0, [pc, #132]	@ (800c894 <tcp_pcb_purge+0x9c>)
 800c810:	f007 ffb6 	bl	8014780 <iprintf>
 800c814:	e037      	b.n	800c886 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7d1b      	ldrb	r3, [r3, #20]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d033      	beq.n	800c886 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c822:	2b0a      	cmp	r3, #10
 800c824:	d02f      	beq.n	800c886 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d02b      	beq.n	800c886 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c832:	2b00      	cmp	r3, #0
 800c834:	d007      	beq.n	800c846 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fb6a 	bl	800af14 <pbuf_free>
      pcb->refused_data = NULL;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f98c 	bl	800cb6c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c85a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c860:	4618      	mov	r0, r3
 800c862:	f7ff fdc7 	bl	800c3f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff fdc2 	bl	800c3f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	080164e8 	.word	0x080164e8
 800c890:	08016b34 	.word	0x08016b34
 800c894:	0801652c 	.word	0x0801652c

0800c898 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d106      	bne.n	800c8b6 <tcp_pcb_remove+0x1e>
 800c8a8:	4b3e      	ldr	r3, [pc, #248]	@ (800c9a4 <tcp_pcb_remove+0x10c>)
 800c8aa:	f640 0283 	movw	r2, #2179	@ 0x883
 800c8ae:	493e      	ldr	r1, [pc, #248]	@ (800c9a8 <tcp_pcb_remove+0x110>)
 800c8b0:	483e      	ldr	r0, [pc, #248]	@ (800c9ac <tcp_pcb_remove+0x114>)
 800c8b2:	f007 ff65 	bl	8014780 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d106      	bne.n	800c8ca <tcp_pcb_remove+0x32>
 800c8bc:	4b39      	ldr	r3, [pc, #228]	@ (800c9a4 <tcp_pcb_remove+0x10c>)
 800c8be:	f640 0284 	movw	r2, #2180	@ 0x884
 800c8c2:	493b      	ldr	r1, [pc, #236]	@ (800c9b0 <tcp_pcb_remove+0x118>)
 800c8c4:	4839      	ldr	r0, [pc, #228]	@ (800c9ac <tcp_pcb_remove+0x114>)
 800c8c6:	f007 ff5b 	bl	8014780 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d105      	bne.n	800c8e0 <tcp_pcb_remove+0x48>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68da      	ldr	r2, [r3, #12]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	e013      	b.n	800c908 <tcp_pcb_remove+0x70>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	e00c      	b.n	800c902 <tcp_pcb_remove+0x6a>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d104      	bne.n	800c8fc <tcp_pcb_remove+0x64>
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	60da      	str	r2, [r3, #12]
 800c8fa:	e005      	b.n	800c908 <tcp_pcb_remove+0x70>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	60fb      	str	r3, [r7, #12]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1ef      	bne.n	800c8e8 <tcp_pcb_remove+0x50>
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2200      	movs	r2, #0
 800c90c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c90e:	6838      	ldr	r0, [r7, #0]
 800c910:	f7ff ff72 	bl	800c7f8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	7d1b      	ldrb	r3, [r3, #20]
 800c918:	2b0a      	cmp	r3, #10
 800c91a:	d013      	beq.n	800c944 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c920:	2b01      	cmp	r3, #1
 800c922:	d00f      	beq.n	800c944 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	8b5b      	ldrh	r3, [r3, #26]
 800c928:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d009      	beq.n	800c944 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	8b5b      	ldrh	r3, [r3, #26]
 800c934:	f043 0302 	orr.w	r3, r3, #2
 800c938:	b29a      	uxth	r2, r3
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c93e:	6838      	ldr	r0, [r7, #0]
 800c940:	f002 ff76 	bl	800f830 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	7d1b      	ldrb	r3, [r3, #20]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d020      	beq.n	800c98e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c950:	2b00      	cmp	r3, #0
 800c952:	d006      	beq.n	800c962 <tcp_pcb_remove+0xca>
 800c954:	4b13      	ldr	r3, [pc, #76]	@ (800c9a4 <tcp_pcb_remove+0x10c>)
 800c956:	f640 0293 	movw	r2, #2195	@ 0x893
 800c95a:	4916      	ldr	r1, [pc, #88]	@ (800c9b4 <tcp_pcb_remove+0x11c>)
 800c95c:	4813      	ldr	r0, [pc, #76]	@ (800c9ac <tcp_pcb_remove+0x114>)
 800c95e:	f007 ff0f 	bl	8014780 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c966:	2b00      	cmp	r3, #0
 800c968:	d006      	beq.n	800c978 <tcp_pcb_remove+0xe0>
 800c96a:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a4 <tcp_pcb_remove+0x10c>)
 800c96c:	f640 0294 	movw	r2, #2196	@ 0x894
 800c970:	4911      	ldr	r1, [pc, #68]	@ (800c9b8 <tcp_pcb_remove+0x120>)
 800c972:	480e      	ldr	r0, [pc, #56]	@ (800c9ac <tcp_pcb_remove+0x114>)
 800c974:	f007 ff04 	bl	8014780 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d006      	beq.n	800c98e <tcp_pcb_remove+0xf6>
 800c980:	4b08      	ldr	r3, [pc, #32]	@ (800c9a4 <tcp_pcb_remove+0x10c>)
 800c982:	f640 0296 	movw	r2, #2198	@ 0x896
 800c986:	490d      	ldr	r1, [pc, #52]	@ (800c9bc <tcp_pcb_remove+0x124>)
 800c988:	4808      	ldr	r0, [pc, #32]	@ (800c9ac <tcp_pcb_remove+0x114>)
 800c98a:	f007 fef9 	bl	8014780 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2200      	movs	r2, #0
 800c992:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	2200      	movs	r2, #0
 800c998:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c99a:	bf00      	nop
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	080164e8 	.word	0x080164e8
 800c9a8:	08016b50 	.word	0x08016b50
 800c9ac:	0801652c 	.word	0x0801652c
 800c9b0:	08016b6c 	.word	0x08016b6c
 800c9b4:	08016b8c 	.word	0x08016b8c
 800c9b8:	08016ba4 	.word	0x08016ba4
 800c9bc:	08016bc0 	.word	0x08016bc0

0800c9c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <tcp_next_iss+0x1c>
 800c9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f8 <tcp_next_iss+0x38>)
 800c9d0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800c9d4:	4909      	ldr	r1, [pc, #36]	@ (800c9fc <tcp_next_iss+0x3c>)
 800c9d6:	480a      	ldr	r0, [pc, #40]	@ (800ca00 <tcp_next_iss+0x40>)
 800c9d8:	f007 fed2 	bl	8014780 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c9dc:	4b09      	ldr	r3, [pc, #36]	@ (800ca04 <tcp_next_iss+0x44>)
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	4b09      	ldr	r3, [pc, #36]	@ (800ca08 <tcp_next_iss+0x48>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	4a07      	ldr	r2, [pc, #28]	@ (800ca04 <tcp_next_iss+0x44>)
 800c9e8:	6013      	str	r3, [r2, #0]
  return iss;
 800c9ea:	4b06      	ldr	r3, [pc, #24]	@ (800ca04 <tcp_next_iss+0x44>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	080164e8 	.word	0x080164e8
 800c9fc:	08016bd8 	.word	0x08016bd8
 800ca00:	0801652c 	.word	0x0801652c
 800ca04:	20000068 	.word	0x20000068
 800ca08:	20008114 	.word	0x20008114

0800ca0c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	4603      	mov	r3, r0
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d106      	bne.n	800ca2e <tcp_eff_send_mss_netif+0x22>
 800ca20:	4b14      	ldr	r3, [pc, #80]	@ (800ca74 <tcp_eff_send_mss_netif+0x68>)
 800ca22:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ca26:	4914      	ldr	r1, [pc, #80]	@ (800ca78 <tcp_eff_send_mss_netif+0x6c>)
 800ca28:	4814      	ldr	r0, [pc, #80]	@ (800ca7c <tcp_eff_send_mss_netif+0x70>)
 800ca2a:	f007 fea9 	bl	8014780 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ca34:	89fb      	ldrh	r3, [r7, #14]
 800ca36:	e019      	b.n	800ca6c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ca3c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ca3e:	8afb      	ldrh	r3, [r7, #22]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d012      	beq.n	800ca6a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ca44:	2328      	movs	r3, #40	@ 0x28
 800ca46:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ca48:	8afa      	ldrh	r2, [r7, #22]
 800ca4a:	8abb      	ldrh	r3, [r7, #20]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d904      	bls.n	800ca5a <tcp_eff_send_mss_netif+0x4e>
 800ca50:	8afa      	ldrh	r2, [r7, #22]
 800ca52:	8abb      	ldrh	r3, [r7, #20]
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	e000      	b.n	800ca5c <tcp_eff_send_mss_netif+0x50>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ca5e:	8a7a      	ldrh	r2, [r7, #18]
 800ca60:	89fb      	ldrh	r3, [r7, #14]
 800ca62:	4293      	cmp	r3, r2
 800ca64:	bf28      	it	cs
 800ca66:	4613      	movcs	r3, r2
 800ca68:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ca6a:	89fb      	ldrh	r3, [r7, #14]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3718      	adds	r7, #24
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	080164e8 	.word	0x080164e8
 800ca78:	08016bf4 	.word	0x08016bf4
 800ca7c:	0801652c 	.word	0x0801652c

0800ca80 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d11d      	bne.n	800cad0 <tcp_netif_ip_addr_changed_pcblist+0x50>
 800ca94:	4b12      	ldr	r3, [pc, #72]	@ (800cae0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ca96:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ca9a:	4912      	ldr	r1, [pc, #72]	@ (800cae4 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 800ca9c:	4812      	ldr	r0, [pc, #72]	@ (800cae8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800ca9e:	f007 fe6f 	bl	8014780 <iprintf>

  while (pcb != NULL) {
 800caa2:	e015      	b.n	800cad0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	d10c      	bne.n	800caca <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800cab6:	68f9      	ldr	r1, [r7, #12]
 800cab8:	480c      	ldr	r0, [pc, #48]	@ (800caec <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800caba:	f007 fe61 	bl	8014780 <iprintf>
      tcp_abort(pcb);
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7fe ffc0 	bl	800ba44 <tcp_abort>
      pcb = next;
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	e002      	b.n	800cad0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1e6      	bne.n	800caa4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cad6:	bf00      	nop
 800cad8:	bf00      	nop
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	080164e8 	.word	0x080164e8
 800cae4:	08016c1c 	.word	0x08016c1c
 800cae8:	0801652c 	.word	0x0801652c
 800caec:	08016c50 	.word	0x08016c50

0800caf0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d02a      	beq.n	800cb56 <tcp_netif_ip_addr_changed+0x66>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d026      	beq.n	800cb56 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cb08:	4b15      	ldr	r3, [pc, #84]	@ (800cb60 <tcp_netif_ip_addr_changed+0x70>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7ff ffb6 	bl	800ca80 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cb14:	4b13      	ldr	r3, [pc, #76]	@ (800cb64 <tcp_netif_ip_addr_changed+0x74>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff ffb0 	bl	800ca80 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d017      	beq.n	800cb56 <tcp_netif_ip_addr_changed+0x66>
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d013      	beq.n	800cb56 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb68 <tcp_netif_ip_addr_changed+0x78>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	e00c      	b.n	800cb50 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d103      	bne.n	800cb4a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1ef      	bne.n	800cb36 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	20008120 	.word	0x20008120
 800cb64:	20008118 	.word	0x20008118
 800cb68:	2000811c 	.word	0x2000811c

0800cb6c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d007      	beq.n	800cb8c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7ff fc37 	bl	800c3f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cb8c:	bf00      	nop
 800cb8e:	3708      	adds	r7, #8
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cb94:	b590      	push	{r4, r7, lr}
 800cb96:	b08d      	sub	sp, #52	@ 0x34
 800cb98:	af04      	add	r7, sp, #16
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d105      	bne.n	800cbb0 <tcp_input+0x1c>
 800cba4:	4b9b      	ldr	r3, [pc, #620]	@ (800ce14 <tcp_input+0x280>)
 800cba6:	2283      	movs	r2, #131	@ 0x83
 800cba8:	499b      	ldr	r1, [pc, #620]	@ (800ce18 <tcp_input+0x284>)
 800cbaa:	489c      	ldr	r0, [pc, #624]	@ (800ce1c <tcp_input+0x288>)
 800cbac:	f007 fde8 	bl	8014780 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	4a9a      	ldr	r2, [pc, #616]	@ (800ce20 <tcp_input+0x28c>)
 800cbb6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	895b      	ldrh	r3, [r3, #10]
 800cbbc:	2b13      	cmp	r3, #19
 800cbbe:	f240 83d1 	bls.w	800d364 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cbc2:	4b98      	ldr	r3, [pc, #608]	@ (800ce24 <tcp_input+0x290>)
 800cbc4:	695b      	ldr	r3, [r3, #20]
 800cbc6:	4a97      	ldr	r2, [pc, #604]	@ (800ce24 <tcp_input+0x290>)
 800cbc8:	6812      	ldr	r2, [r2, #0]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f006 f9a5 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f040 83c7 	bne.w	800d368 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cbda:	4b92      	ldr	r3, [pc, #584]	@ (800ce24 <tcp_input+0x290>)
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cbe2:	2be0      	cmp	r3, #224	@ 0xe0
 800cbe4:	f000 83c0 	beq.w	800d368 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cbe8:	4b8d      	ldr	r3, [pc, #564]	@ (800ce20 <tcp_input+0x28c>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	899b      	ldrh	r3, [r3, #12]
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fc fd3f 	bl	8009674 <lwip_htons>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	0b1b      	lsrs	r3, r3, #12
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cc02:	7cbb      	ldrb	r3, [r7, #18]
 800cc04:	2b13      	cmp	r3, #19
 800cc06:	f240 83b1 	bls.w	800d36c <tcp_input+0x7d8>
 800cc0a:	7cbb      	ldrb	r3, [r7, #18]
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	891b      	ldrh	r3, [r3, #8]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	f200 83aa 	bhi.w	800d36c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cc18:	7cbb      	ldrb	r3, [r7, #18]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	3b14      	subs	r3, #20
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	4b81      	ldr	r3, [pc, #516]	@ (800ce28 <tcp_input+0x294>)
 800cc22:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cc24:	4b81      	ldr	r3, [pc, #516]	@ (800ce2c <tcp_input+0x298>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	895a      	ldrh	r2, [r3, #10]
 800cc2e:	7cbb      	ldrb	r3, [r7, #18]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d309      	bcc.n	800cc4a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cc36:	4b7c      	ldr	r3, [pc, #496]	@ (800ce28 <tcp_input+0x294>)
 800cc38:	881a      	ldrh	r2, [r3, #0]
 800cc3a:	4b7d      	ldr	r3, [pc, #500]	@ (800ce30 <tcp_input+0x29c>)
 800cc3c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cc3e:	7cbb      	ldrb	r3, [r7, #18]
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7fe f8e0 	bl	800ae08 <pbuf_remove_header>
 800cc48:	e04e      	b.n	800cce8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d105      	bne.n	800cc5e <tcp_input+0xca>
 800cc52:	4b70      	ldr	r3, [pc, #448]	@ (800ce14 <tcp_input+0x280>)
 800cc54:	22c2      	movs	r2, #194	@ 0xc2
 800cc56:	4977      	ldr	r1, [pc, #476]	@ (800ce34 <tcp_input+0x2a0>)
 800cc58:	4870      	ldr	r0, [pc, #448]	@ (800ce1c <tcp_input+0x288>)
 800cc5a:	f007 fd91 	bl	8014780 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cc5e:	2114      	movs	r1, #20
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7fe f8d1 	bl	800ae08 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	895a      	ldrh	r2, [r3, #10]
 800cc6a:	4b71      	ldr	r3, [pc, #452]	@ (800ce30 <tcp_input+0x29c>)
 800cc6c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cc6e:	4b6e      	ldr	r3, [pc, #440]	@ (800ce28 <tcp_input+0x294>)
 800cc70:	881a      	ldrh	r2, [r3, #0]
 800cc72:	4b6f      	ldr	r3, [pc, #444]	@ (800ce30 <tcp_input+0x29c>)
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cc7a:	4b6d      	ldr	r3, [pc, #436]	@ (800ce30 <tcp_input+0x29c>)
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7fe f8c1 	bl	800ae08 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	895b      	ldrh	r3, [r3, #10]
 800cc8c:	8a3a      	ldrh	r2, [r7, #16]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	f200 836e 	bhi.w	800d370 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	4a64      	ldr	r2, [pc, #400]	@ (800ce2c <tcp_input+0x298>)
 800cc9c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	8a3a      	ldrh	r2, [r7, #16]
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7fe f8ae 	bl	800ae08 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	891a      	ldrh	r2, [r3, #8]
 800ccb0:	8a3b      	ldrh	r3, [r7, #16]
 800ccb2:	1ad3      	subs	r3, r2, r3
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	895b      	ldrh	r3, [r3, #10]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d005      	beq.n	800ccce <tcp_input+0x13a>
 800ccc2:	4b54      	ldr	r3, [pc, #336]	@ (800ce14 <tcp_input+0x280>)
 800ccc4:	22df      	movs	r2, #223	@ 0xdf
 800ccc6:	495c      	ldr	r1, [pc, #368]	@ (800ce38 <tcp_input+0x2a4>)
 800ccc8:	4854      	ldr	r0, [pc, #336]	@ (800ce1c <tcp_input+0x288>)
 800ccca:	f007 fd59 	bl	8014780 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	891a      	ldrh	r2, [r3, #8]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	891b      	ldrh	r3, [r3, #8]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d005      	beq.n	800cce8 <tcp_input+0x154>
 800ccdc:	4b4d      	ldr	r3, [pc, #308]	@ (800ce14 <tcp_input+0x280>)
 800ccde:	22e0      	movs	r2, #224	@ 0xe0
 800cce0:	4956      	ldr	r1, [pc, #344]	@ (800ce3c <tcp_input+0x2a8>)
 800cce2:	484e      	ldr	r0, [pc, #312]	@ (800ce1c <tcp_input+0x288>)
 800cce4:	f007 fd4c 	bl	8014780 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cce8:	4b4d      	ldr	r3, [pc, #308]	@ (800ce20 <tcp_input+0x28c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	4a4b      	ldr	r2, [pc, #300]	@ (800ce20 <tcp_input+0x28c>)
 800ccf2:	6814      	ldr	r4, [r2, #0]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fc fcbd 	bl	8009674 <lwip_htons>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ccfe:	4b48      	ldr	r3, [pc, #288]	@ (800ce20 <tcp_input+0x28c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	885b      	ldrh	r3, [r3, #2]
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	4a46      	ldr	r2, [pc, #280]	@ (800ce20 <tcp_input+0x28c>)
 800cd08:	6814      	ldr	r4, [r2, #0]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fc fcb2 	bl	8009674 <lwip_htons>
 800cd10:	4603      	mov	r3, r0
 800cd12:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cd14:	4b42      	ldr	r3, [pc, #264]	@ (800ce20 <tcp_input+0x28c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	4a41      	ldr	r2, [pc, #260]	@ (800ce20 <tcp_input+0x28c>)
 800cd1c:	6814      	ldr	r4, [r2, #0]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fc fcbe 	bl	80096a0 <lwip_htonl>
 800cd24:	4603      	mov	r3, r0
 800cd26:	6063      	str	r3, [r4, #4]
 800cd28:	6863      	ldr	r3, [r4, #4]
 800cd2a:	4a45      	ldr	r2, [pc, #276]	@ (800ce40 <tcp_input+0x2ac>)
 800cd2c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cd2e:	4b3c      	ldr	r3, [pc, #240]	@ (800ce20 <tcp_input+0x28c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	4a3a      	ldr	r2, [pc, #232]	@ (800ce20 <tcp_input+0x28c>)
 800cd36:	6814      	ldr	r4, [r2, #0]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fc fcb1 	bl	80096a0 <lwip_htonl>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	60a3      	str	r3, [r4, #8]
 800cd42:	68a3      	ldr	r3, [r4, #8]
 800cd44:	4a3f      	ldr	r2, [pc, #252]	@ (800ce44 <tcp_input+0x2b0>)
 800cd46:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cd48:	4b35      	ldr	r3, [pc, #212]	@ (800ce20 <tcp_input+0x28c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	89db      	ldrh	r3, [r3, #14]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	4a33      	ldr	r2, [pc, #204]	@ (800ce20 <tcp_input+0x28c>)
 800cd52:	6814      	ldr	r4, [r2, #0]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7fc fc8d 	bl	8009674 <lwip_htons>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cd5e:	4b30      	ldr	r3, [pc, #192]	@ (800ce20 <tcp_input+0x28c>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	899b      	ldrh	r3, [r3, #12]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fc fc84 	bl	8009674 <lwip_htons>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	4b34      	ldr	r3, [pc, #208]	@ (800ce48 <tcp_input+0x2b4>)
 800cd78:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	891a      	ldrh	r2, [r3, #8]
 800cd7e:	4b33      	ldr	r3, [pc, #204]	@ (800ce4c <tcp_input+0x2b8>)
 800cd80:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cd82:	4b31      	ldr	r3, [pc, #196]	@ (800ce48 <tcp_input+0x2b4>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	f003 0303 	and.w	r3, r3, #3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00c      	beq.n	800cda8 <tcp_input+0x214>
    tcplen++;
 800cd8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ce4c <tcp_input+0x2b8>)
 800cd90:	881b      	ldrh	r3, [r3, #0]
 800cd92:	3301      	adds	r3, #1
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	4b2d      	ldr	r3, [pc, #180]	@ (800ce4c <tcp_input+0x2b8>)
 800cd98:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	891a      	ldrh	r2, [r3, #8]
 800cd9e:	4b2b      	ldr	r3, [pc, #172]	@ (800ce4c <tcp_input+0x2b8>)
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	f200 82e6 	bhi.w	800d374 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdac:	4b28      	ldr	r3, [pc, #160]	@ (800ce50 <tcp_input+0x2bc>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	61bb      	str	r3, [r7, #24]
 800cdb2:	e09d      	b.n	800cef0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	7d1b      	ldrb	r3, [r3, #20]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d105      	bne.n	800cdc8 <tcp_input+0x234>
 800cdbc:	4b15      	ldr	r3, [pc, #84]	@ (800ce14 <tcp_input+0x280>)
 800cdbe:	22fb      	movs	r2, #251	@ 0xfb
 800cdc0:	4924      	ldr	r1, [pc, #144]	@ (800ce54 <tcp_input+0x2c0>)
 800cdc2:	4816      	ldr	r0, [pc, #88]	@ (800ce1c <tcp_input+0x288>)
 800cdc4:	f007 fcdc 	bl	8014780 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	7d1b      	ldrb	r3, [r3, #20]
 800cdcc:	2b0a      	cmp	r3, #10
 800cdce:	d105      	bne.n	800cddc <tcp_input+0x248>
 800cdd0:	4b10      	ldr	r3, [pc, #64]	@ (800ce14 <tcp_input+0x280>)
 800cdd2:	22fc      	movs	r2, #252	@ 0xfc
 800cdd4:	4920      	ldr	r1, [pc, #128]	@ (800ce58 <tcp_input+0x2c4>)
 800cdd6:	4811      	ldr	r0, [pc, #68]	@ (800ce1c <tcp_input+0x288>)
 800cdd8:	f007 fcd2 	bl	8014780 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	7d1b      	ldrb	r3, [r3, #20]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d105      	bne.n	800cdf0 <tcp_input+0x25c>
 800cde4:	4b0b      	ldr	r3, [pc, #44]	@ (800ce14 <tcp_input+0x280>)
 800cde6:	22fd      	movs	r2, #253	@ 0xfd
 800cde8:	491c      	ldr	r1, [pc, #112]	@ (800ce5c <tcp_input+0x2c8>)
 800cdea:	480c      	ldr	r0, [pc, #48]	@ (800ce1c <tcp_input+0x288>)
 800cdec:	f007 fcc8 	bl	8014780 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	7a1b      	ldrb	r3, [r3, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d033      	beq.n	800ce60 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	7a1a      	ldrb	r2, [r3, #8]
 800cdfc:	4b09      	ldr	r3, [pc, #36]	@ (800ce24 <tcp_input+0x290>)
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce04:	3301      	adds	r3, #1
 800ce06:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d029      	beq.n	800ce60 <tcp_input+0x2cc>
      prev = pcb;
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	61fb      	str	r3, [r7, #28]
      continue;
 800ce10:	e06b      	b.n	800ceea <tcp_input+0x356>
 800ce12:	bf00      	nop
 800ce14:	08016c78 	.word	0x08016c78
 800ce18:	08016cac 	.word	0x08016cac
 800ce1c:	08016cc4 	.word	0x08016cc4
 800ce20:	20008140 	.word	0x20008140
 800ce24:	200051b8 	.word	0x200051b8
 800ce28:	20008144 	.word	0x20008144
 800ce2c:	20008148 	.word	0x20008148
 800ce30:	20008146 	.word	0x20008146
 800ce34:	08016cec 	.word	0x08016cec
 800ce38:	08016cfc 	.word	0x08016cfc
 800ce3c:	08016d08 	.word	0x08016d08
 800ce40:	20008150 	.word	0x20008150
 800ce44:	20008154 	.word	0x20008154
 800ce48:	2000815c 	.word	0x2000815c
 800ce4c:	2000815a 	.word	0x2000815a
 800ce50:	20008120 	.word	0x20008120
 800ce54:	08016d28 	.word	0x08016d28
 800ce58:	08016d50 	.word	0x08016d50
 800ce5c:	08016d7c 	.word	0x08016d7c
    }

    if (pcb->remote_port == tcphdr->src &&
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	8b1a      	ldrh	r2, [r3, #24]
 800ce64:	4b72      	ldr	r3, [pc, #456]	@ (800d030 <tcp_input+0x49c>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d13a      	bne.n	800cee6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	8ada      	ldrh	r2, [r3, #22]
 800ce74:	4b6e      	ldr	r3, [pc, #440]	@ (800d030 <tcp_input+0x49c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	885b      	ldrh	r3, [r3, #2]
 800ce7a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d132      	bne.n	800cee6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	4b6b      	ldr	r3, [pc, #428]	@ (800d034 <tcp_input+0x4a0>)
 800ce86:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d12c      	bne.n	800cee6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	4b68      	ldr	r3, [pc, #416]	@ (800d034 <tcp_input+0x4a0>)
 800ce92:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d126      	bne.n	800cee6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	69ba      	ldr	r2, [r7, #24]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d106      	bne.n	800ceb0 <tcp_input+0x31c>
 800cea2:	4b65      	ldr	r3, [pc, #404]	@ (800d038 <tcp_input+0x4a4>)
 800cea4:	f240 120d 	movw	r2, #269	@ 0x10d
 800cea8:	4964      	ldr	r1, [pc, #400]	@ (800d03c <tcp_input+0x4a8>)
 800ceaa:	4865      	ldr	r0, [pc, #404]	@ (800d040 <tcp_input+0x4ac>)
 800ceac:	f007 fc68 	bl	8014780 <iprintf>
      if (prev != NULL) {
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00a      	beq.n	800cecc <tcp_input+0x338>
        prev->next = pcb->next;
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	68da      	ldr	r2, [r3, #12]
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cebe:	4b61      	ldr	r3, [pc, #388]	@ (800d044 <tcp_input+0x4b0>)
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cec6:	4a5f      	ldr	r2, [pc, #380]	@ (800d044 <tcp_input+0x4b0>)
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	69ba      	ldr	r2, [r7, #24]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d111      	bne.n	800cefa <tcp_input+0x366>
 800ced6:	4b58      	ldr	r3, [pc, #352]	@ (800d038 <tcp_input+0x4a4>)
 800ced8:	f240 1215 	movw	r2, #277	@ 0x115
 800cedc:	495a      	ldr	r1, [pc, #360]	@ (800d048 <tcp_input+0x4b4>)
 800cede:	4858      	ldr	r0, [pc, #352]	@ (800d040 <tcp_input+0x4ac>)
 800cee0:	f007 fc4e 	bl	8014780 <iprintf>
      break;
 800cee4:	e009      	b.n	800cefa <tcp_input+0x366>
    }
    prev = pcb;
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	61bb      	str	r3, [r7, #24]
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f47f af5e 	bne.w	800cdb4 <tcp_input+0x220>
 800cef8:	e000      	b.n	800cefc <tcp_input+0x368>
      break;
 800cefa:	bf00      	nop
  }

  if (pcb == NULL) {
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f040 80aa 	bne.w	800d058 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf04:	4b51      	ldr	r3, [pc, #324]	@ (800d04c <tcp_input+0x4b8>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	61bb      	str	r3, [r7, #24]
 800cf0a:	e03f      	b.n	800cf8c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	7d1b      	ldrb	r3, [r3, #20]
 800cf10:	2b0a      	cmp	r3, #10
 800cf12:	d006      	beq.n	800cf22 <tcp_input+0x38e>
 800cf14:	4b48      	ldr	r3, [pc, #288]	@ (800d038 <tcp_input+0x4a4>)
 800cf16:	f240 121f 	movw	r2, #287	@ 0x11f
 800cf1a:	494d      	ldr	r1, [pc, #308]	@ (800d050 <tcp_input+0x4bc>)
 800cf1c:	4848      	ldr	r0, [pc, #288]	@ (800d040 <tcp_input+0x4ac>)
 800cf1e:	f007 fc2f 	bl	8014780 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	7a1b      	ldrb	r3, [r3, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d009      	beq.n	800cf3e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	7a1a      	ldrb	r2, [r3, #8]
 800cf2e:	4b41      	ldr	r3, [pc, #260]	@ (800d034 <tcp_input+0x4a0>)
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf36:	3301      	adds	r3, #1
 800cf38:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d122      	bne.n	800cf84 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	8b1a      	ldrh	r2, [r3, #24]
 800cf42:	4b3b      	ldr	r3, [pc, #236]	@ (800d030 <tcp_input+0x49c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d11b      	bne.n	800cf86 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	8ada      	ldrh	r2, [r3, #22]
 800cf52:	4b37      	ldr	r3, [pc, #220]	@ (800d030 <tcp_input+0x49c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	885b      	ldrh	r3, [r3, #2]
 800cf58:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d113      	bne.n	800cf86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	685a      	ldr	r2, [r3, #4]
 800cf62:	4b34      	ldr	r3, [pc, #208]	@ (800d034 <tcp_input+0x4a0>)
 800cf64:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d10d      	bne.n	800cf86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	4b31      	ldr	r3, [pc, #196]	@ (800d034 <tcp_input+0x4a0>)
 800cf70:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d107      	bne.n	800cf86 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cf76:	69b8      	ldr	r0, [r7, #24]
 800cf78:	f000 fb56 	bl	800d628 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7fd ffc9 	bl	800af14 <pbuf_free>
        return;
 800cf82:	e1fd      	b.n	800d380 <tcp_input+0x7ec>
        continue;
 800cf84:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	61bb      	str	r3, [r7, #24]
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1bc      	bne.n	800cf0c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf96:	4b2f      	ldr	r3, [pc, #188]	@ (800d054 <tcp_input+0x4c0>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	617b      	str	r3, [r7, #20]
 800cf9c:	e02a      	b.n	800cff4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	7a1b      	ldrb	r3, [r3, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00c      	beq.n	800cfc0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	7a1a      	ldrb	r2, [r3, #8]
 800cfaa:	4b22      	ldr	r3, [pc, #136]	@ (800d034 <tcp_input+0x4a0>)
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d002      	beq.n	800cfc0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	61fb      	str	r3, [r7, #28]
        continue;
 800cfbe:	e016      	b.n	800cfee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	8ada      	ldrh	r2, [r3, #22]
 800cfc4:	4b1a      	ldr	r3, [pc, #104]	@ (800d030 <tcp_input+0x49c>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	885b      	ldrh	r3, [r3, #2]
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d10c      	bne.n	800cfea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	4b17      	ldr	r3, [pc, #92]	@ (800d034 <tcp_input+0x4a0>)
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d00f      	beq.n	800cffc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00d      	beq.n	800cffe <tcp_input+0x46a>
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d009      	beq.n	800cffe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	617b      	str	r3, [r7, #20]
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1d1      	bne.n	800cf9e <tcp_input+0x40a>
 800cffa:	e000      	b.n	800cffe <tcp_input+0x46a>
            break;
 800cffc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d029      	beq.n	800d058 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00a      	beq.n	800d020 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	68da      	ldr	r2, [r3, #12]
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d012:	4b10      	ldr	r3, [pc, #64]	@ (800d054 <tcp_input+0x4c0>)
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d01a:	4a0e      	ldr	r2, [pc, #56]	@ (800d054 <tcp_input+0x4c0>)
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d020:	6978      	ldr	r0, [r7, #20]
 800d022:	f000 fa03 	bl	800d42c <tcp_listen_input>
      }
      pbuf_free(p);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7fd ff74 	bl	800af14 <pbuf_free>
      return;
 800d02c:	e1a8      	b.n	800d380 <tcp_input+0x7ec>
 800d02e:	bf00      	nop
 800d030:	20008140 	.word	0x20008140
 800d034:	200051b8 	.word	0x200051b8
 800d038:	08016c78 	.word	0x08016c78
 800d03c:	08016da4 	.word	0x08016da4
 800d040:	08016cc4 	.word	0x08016cc4
 800d044:	20008120 	.word	0x20008120
 800d048:	08016dd0 	.word	0x08016dd0
 800d04c:	20008124 	.word	0x20008124
 800d050:	08016dfc 	.word	0x08016dfc
 800d054:	2000811c 	.word	0x2000811c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f000 8158 	beq.w	800d310 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d060:	4b95      	ldr	r3, [pc, #596]	@ (800d2b8 <tcp_input+0x724>)
 800d062:	2200      	movs	r2, #0
 800d064:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	891a      	ldrh	r2, [r3, #8]
 800d06a:	4b93      	ldr	r3, [pc, #588]	@ (800d2b8 <tcp_input+0x724>)
 800d06c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d06e:	4a92      	ldr	r2, [pc, #584]	@ (800d2b8 <tcp_input+0x724>)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d074:	4b91      	ldr	r3, [pc, #580]	@ (800d2bc <tcp_input+0x728>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a8f      	ldr	r2, [pc, #572]	@ (800d2b8 <tcp_input+0x724>)
 800d07a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800d07c:	4b90      	ldr	r3, [pc, #576]	@ (800d2c0 <tcp_input+0x72c>)
 800d07e:	2200      	movs	r2, #0
 800d080:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d082:	4b90      	ldr	r3, [pc, #576]	@ (800d2c4 <tcp_input+0x730>)
 800d084:	2200      	movs	r2, #0
 800d086:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d088:	4b8f      	ldr	r3, [pc, #572]	@ (800d2c8 <tcp_input+0x734>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d08e:	4b8f      	ldr	r3, [pc, #572]	@ (800d2cc <tcp_input+0x738>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	f003 0308 	and.w	r3, r3, #8
 800d096:	2b00      	cmp	r3, #0
 800d098:	d006      	beq.n	800d0a8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7b5b      	ldrb	r3, [r3, #13]
 800d09e:	f043 0301 	orr.w	r3, r3, #1
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d017      	beq.n	800d0e0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d0b0:	69b8      	ldr	r0, [r7, #24]
 800d0b2:	f7ff f923 	bl	800c2fc <tcp_process_refused_data>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	f113 0f0d 	cmn.w	r3, #13
 800d0bc:	d007      	beq.n	800d0ce <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00c      	beq.n	800d0e0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d0c6:	4b82      	ldr	r3, [pc, #520]	@ (800d2d0 <tcp_input+0x73c>)
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d008      	beq.n	800d0e0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f040 80e3 	bne.w	800d29e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d0d8:	69b8      	ldr	r0, [r7, #24]
 800d0da:	f003 f9bb 	bl	8010454 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d0de:	e0de      	b.n	800d29e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d0e0:	4a7c      	ldr	r2, [pc, #496]	@ (800d2d4 <tcp_input+0x740>)
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d0e6:	69b8      	ldr	r0, [r7, #24]
 800d0e8:	f000 fb18 	bl	800d71c <tcp_process>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d0f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0f4:	f113 0f0d 	cmn.w	r3, #13
 800d0f8:	f000 80d3 	beq.w	800d2a2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d0fc:	4b71      	ldr	r3, [pc, #452]	@ (800d2c4 <tcp_input+0x730>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	f003 0308 	and.w	r3, r3, #8
 800d104:	2b00      	cmp	r3, #0
 800d106:	d015      	beq.n	800d134 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d008      	beq.n	800d124 <tcp_input+0x590>
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	6912      	ldr	r2, [r2, #16]
 800d11c:	f06f 010d 	mvn.w	r1, #13
 800d120:	4610      	mov	r0, r2
 800d122:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d124:	69b9      	ldr	r1, [r7, #24]
 800d126:	486c      	ldr	r0, [pc, #432]	@ (800d2d8 <tcp_input+0x744>)
 800d128:	f7ff fbb6 	bl	800c898 <tcp_pcb_remove>
        tcp_free(pcb);
 800d12c:	69b8      	ldr	r0, [r7, #24]
 800d12e:	f7fe f9a1 	bl	800b474 <tcp_free>
 800d132:	e0da      	b.n	800d2ea <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d138:	4b63      	ldr	r3, [pc, #396]	@ (800d2c8 <tcp_input+0x734>)
 800d13a:	881b      	ldrh	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d01d      	beq.n	800d17c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d140:	4b61      	ldr	r3, [pc, #388]	@ (800d2c8 <tcp_input+0x734>)
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00a      	beq.n	800d166 <tcp_input+0x5d2>
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d156:	69ba      	ldr	r2, [r7, #24]
 800d158:	6910      	ldr	r0, [r2, #16]
 800d15a:	89fa      	ldrh	r2, [r7, #14]
 800d15c:	69b9      	ldr	r1, [r7, #24]
 800d15e:	4798      	blx	r3
 800d160:	4603      	mov	r3, r0
 800d162:	74fb      	strb	r3, [r7, #19]
 800d164:	e001      	b.n	800d16a <tcp_input+0x5d6>
 800d166:	2300      	movs	r3, #0
 800d168:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d16a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d16e:	f113 0f0d 	cmn.w	r3, #13
 800d172:	f000 8098 	beq.w	800d2a6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d176:	4b54      	ldr	r3, [pc, #336]	@ (800d2c8 <tcp_input+0x734>)
 800d178:	2200      	movs	r2, #0
 800d17a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d17c:	69b8      	ldr	r0, [r7, #24]
 800d17e:	f000 f915 	bl	800d3ac <tcp_input_delayed_close>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	f040 8090 	bne.w	800d2aa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d18a:	4b4d      	ldr	r3, [pc, #308]	@ (800d2c0 <tcp_input+0x72c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d041      	beq.n	800d216 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d196:	2b00      	cmp	r3, #0
 800d198:	d006      	beq.n	800d1a8 <tcp_input+0x614>
 800d19a:	4b50      	ldr	r3, [pc, #320]	@ (800d2dc <tcp_input+0x748>)
 800d19c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d1a0:	494f      	ldr	r1, [pc, #316]	@ (800d2e0 <tcp_input+0x74c>)
 800d1a2:	4850      	ldr	r0, [pc, #320]	@ (800d2e4 <tcp_input+0x750>)
 800d1a4:	f007 faec 	bl	8014780 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	8b5b      	ldrh	r3, [r3, #26]
 800d1ac:	f003 0310 	and.w	r3, r3, #16
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d008      	beq.n	800d1c6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d1b4:	4b42      	ldr	r3, [pc, #264]	@ (800d2c0 <tcp_input+0x72c>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fd feab 	bl	800af14 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d1be:	69b8      	ldr	r0, [r7, #24]
 800d1c0:	f7fe fc40 	bl	800ba44 <tcp_abort>
            goto aborted;
 800d1c4:	e091      	b.n	800d2ea <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00c      	beq.n	800d1ea <tcp_input+0x656>
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	6918      	ldr	r0, [r3, #16]
 800d1da:	4b39      	ldr	r3, [pc, #228]	@ (800d2c0 <tcp_input+0x72c>)
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	69b9      	ldr	r1, [r7, #24]
 800d1e2:	47a0      	blx	r4
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	74fb      	strb	r3, [r7, #19]
 800d1e8:	e008      	b.n	800d1fc <tcp_input+0x668>
 800d1ea:	4b35      	ldr	r3, [pc, #212]	@ (800d2c0 <tcp_input+0x72c>)
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	69b9      	ldr	r1, [r7, #24]
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	f7ff f958 	bl	800c4a8 <tcp_recv_null>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d1fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d200:	f113 0f0d 	cmn.w	r3, #13
 800d204:	d053      	beq.n	800d2ae <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d206:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d003      	beq.n	800d216 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d20e:	4b2c      	ldr	r3, [pc, #176]	@ (800d2c0 <tcp_input+0x72c>)
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d216:	4b2b      	ldr	r3, [pc, #172]	@ (800d2c4 <tcp_input+0x730>)
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	f003 0320 	and.w	r3, r3, #32
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d030      	beq.n	800d284 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d226:	2b00      	cmp	r3, #0
 800d228:	d009      	beq.n	800d23e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d22e:	7b5a      	ldrb	r2, [r3, #13]
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d234:	f042 0220 	orr.w	r2, r2, #32
 800d238:	b2d2      	uxtb	r2, r2
 800d23a:	735a      	strb	r2, [r3, #13]
 800d23c:	e022      	b.n	800d284 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d242:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d246:	d005      	beq.n	800d254 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d24c:	3301      	adds	r3, #1
 800d24e:	b29a      	uxth	r2, r3
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00b      	beq.n	800d276 <tcp_input+0x6e2>
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	6918      	ldr	r0, [r3, #16]
 800d268:	2300      	movs	r3, #0
 800d26a:	2200      	movs	r2, #0
 800d26c:	69b9      	ldr	r1, [r7, #24]
 800d26e:	47a0      	blx	r4
 800d270:	4603      	mov	r3, r0
 800d272:	74fb      	strb	r3, [r7, #19]
 800d274:	e001      	b.n	800d27a <tcp_input+0x6e6>
 800d276:	2300      	movs	r3, #0
 800d278:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d27a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d27e:	f113 0f0d 	cmn.w	r3, #13
 800d282:	d016      	beq.n	800d2b2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d284:	4b13      	ldr	r3, [pc, #76]	@ (800d2d4 <tcp_input+0x740>)
 800d286:	2200      	movs	r2, #0
 800d288:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d28a:	69b8      	ldr	r0, [r7, #24]
 800d28c:	f000 f88e 	bl	800d3ac <tcp_input_delayed_close>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d128      	bne.n	800d2e8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d296:	69b8      	ldr	r0, [r7, #24]
 800d298:	f002 faca 	bl	800f830 <tcp_output>
 800d29c:	e025      	b.n	800d2ea <tcp_input+0x756>
        goto aborted;
 800d29e:	bf00      	nop
 800d2a0:	e023      	b.n	800d2ea <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d2a2:	bf00      	nop
 800d2a4:	e021      	b.n	800d2ea <tcp_input+0x756>
              goto aborted;
 800d2a6:	bf00      	nop
 800d2a8:	e01f      	b.n	800d2ea <tcp_input+0x756>
          goto aborted;
 800d2aa:	bf00      	nop
 800d2ac:	e01d      	b.n	800d2ea <tcp_input+0x756>
            goto aborted;
 800d2ae:	bf00      	nop
 800d2b0:	e01b      	b.n	800d2ea <tcp_input+0x756>
              goto aborted;
 800d2b2:	bf00      	nop
 800d2b4:	e019      	b.n	800d2ea <tcp_input+0x756>
 800d2b6:	bf00      	nop
 800d2b8:	2000812c 	.word	0x2000812c
 800d2bc:	20008140 	.word	0x20008140
 800d2c0:	20008160 	.word	0x20008160
 800d2c4:	2000815d 	.word	0x2000815d
 800d2c8:	20008158 	.word	0x20008158
 800d2cc:	2000815c 	.word	0x2000815c
 800d2d0:	2000815a 	.word	0x2000815a
 800d2d4:	20008164 	.word	0x20008164
 800d2d8:	20008120 	.word	0x20008120
 800d2dc:	08016c78 	.word	0x08016c78
 800d2e0:	08016e2c 	.word	0x08016e2c
 800d2e4:	08016cc4 	.word	0x08016cc4
          goto aborted;
 800d2e8:	bf00      	nop
    tcp_input_pcb = NULL;
 800d2ea:	4b27      	ldr	r3, [pc, #156]	@ (800d388 <tcp_input+0x7f4>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d2f0:	4b26      	ldr	r3, [pc, #152]	@ (800d38c <tcp_input+0x7f8>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d2f6:	4b26      	ldr	r3, [pc, #152]	@ (800d390 <tcp_input+0x7fc>)
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d03f      	beq.n	800d37e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d2fe:	4b24      	ldr	r3, [pc, #144]	@ (800d390 <tcp_input+0x7fc>)
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	4618      	mov	r0, r3
 800d304:	f7fd fe06 	bl	800af14 <pbuf_free>
      inseg.p = NULL;
 800d308:	4b21      	ldr	r3, [pc, #132]	@ (800d390 <tcp_input+0x7fc>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d30e:	e036      	b.n	800d37e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d310:	4b20      	ldr	r3, [pc, #128]	@ (800d394 <tcp_input+0x800>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	899b      	ldrh	r3, [r3, #12]
 800d316:	b29b      	uxth	r3, r3
 800d318:	4618      	mov	r0, r3
 800d31a:	f7fc f9ab 	bl	8009674 <lwip_htons>
 800d31e:	4603      	mov	r3, r0
 800d320:	b2db      	uxtb	r3, r3
 800d322:	f003 0304 	and.w	r3, r3, #4
 800d326:	2b00      	cmp	r3, #0
 800d328:	d118      	bne.n	800d35c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d32a:	4b1b      	ldr	r3, [pc, #108]	@ (800d398 <tcp_input+0x804>)
 800d32c:	6819      	ldr	r1, [r3, #0]
 800d32e:	4b1b      	ldr	r3, [pc, #108]	@ (800d39c <tcp_input+0x808>)
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a0 <tcp_input+0x80c>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d33a:	4b16      	ldr	r3, [pc, #88]	@ (800d394 <tcp_input+0x800>)
 800d33c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d33e:	885b      	ldrh	r3, [r3, #2]
 800d340:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d342:	4a14      	ldr	r2, [pc, #80]	@ (800d394 <tcp_input+0x800>)
 800d344:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d346:	8812      	ldrh	r2, [r2, #0]
 800d348:	b292      	uxth	r2, r2
 800d34a:	9202      	str	r2, [sp, #8]
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	4b15      	ldr	r3, [pc, #84]	@ (800d3a4 <tcp_input+0x810>)
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	4b15      	ldr	r3, [pc, #84]	@ (800d3a8 <tcp_input+0x814>)
 800d354:	4602      	mov	r2, r0
 800d356:	2000      	movs	r0, #0
 800d358:	f003 f82a 	bl	80103b0 <tcp_rst>
    pbuf_free(p);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7fd fdd9 	bl	800af14 <pbuf_free>
  return;
 800d362:	e00c      	b.n	800d37e <tcp_input+0x7ea>
    goto dropped;
 800d364:	bf00      	nop
 800d366:	e006      	b.n	800d376 <tcp_input+0x7e2>
    goto dropped;
 800d368:	bf00      	nop
 800d36a:	e004      	b.n	800d376 <tcp_input+0x7e2>
    goto dropped;
 800d36c:	bf00      	nop
 800d36e:	e002      	b.n	800d376 <tcp_input+0x7e2>
      goto dropped;
 800d370:	bf00      	nop
 800d372:	e000      	b.n	800d376 <tcp_input+0x7e2>
      goto dropped;
 800d374:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7fd fdcc 	bl	800af14 <pbuf_free>
 800d37c:	e000      	b.n	800d380 <tcp_input+0x7ec>
  return;
 800d37e:	bf00      	nop
}
 800d380:	3724      	adds	r7, #36	@ 0x24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd90      	pop	{r4, r7, pc}
 800d386:	bf00      	nop
 800d388:	20008164 	.word	0x20008164
 800d38c:	20008160 	.word	0x20008160
 800d390:	2000812c 	.word	0x2000812c
 800d394:	20008140 	.word	0x20008140
 800d398:	20008154 	.word	0x20008154
 800d39c:	2000815a 	.word	0x2000815a
 800d3a0:	20008150 	.word	0x20008150
 800d3a4:	200051c8 	.word	0x200051c8
 800d3a8:	200051cc 	.word	0x200051cc

0800d3ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d106      	bne.n	800d3c8 <tcp_input_delayed_close+0x1c>
 800d3ba:	4b17      	ldr	r3, [pc, #92]	@ (800d418 <tcp_input_delayed_close+0x6c>)
 800d3bc:	f240 225a 	movw	r2, #602	@ 0x25a
 800d3c0:	4916      	ldr	r1, [pc, #88]	@ (800d41c <tcp_input_delayed_close+0x70>)
 800d3c2:	4817      	ldr	r0, [pc, #92]	@ (800d420 <tcp_input_delayed_close+0x74>)
 800d3c4:	f007 f9dc 	bl	8014780 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d3c8:	4b16      	ldr	r3, [pc, #88]	@ (800d424 <tcp_input_delayed_close+0x78>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	f003 0310 	and.w	r3, r3, #16
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d01c      	beq.n	800d40e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	8b5b      	ldrh	r3, [r3, #26]
 800d3d8:	f003 0310 	and.w	r3, r3, #16
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10d      	bne.n	800d3fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d008      	beq.n	800d3fc <tcp_input_delayed_close+0x50>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	6912      	ldr	r2, [r2, #16]
 800d3f4:	f06f 010e 	mvn.w	r1, #14
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	480a      	ldr	r0, [pc, #40]	@ (800d428 <tcp_input_delayed_close+0x7c>)
 800d400:	f7ff fa4a 	bl	800c898 <tcp_pcb_remove>
    tcp_free(pcb);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7fe f835 	bl	800b474 <tcp_free>
    return 1;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e000      	b.n	800d410 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	08016c78 	.word	0x08016c78
 800d41c:	08016e48 	.word	0x08016e48
 800d420:	08016cc4 	.word	0x08016cc4
 800d424:	2000815d 	.word	0x2000815d
 800d428:	20008120 	.word	0x20008120

0800d42c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d42c:	b590      	push	{r4, r7, lr}
 800d42e:	b08b      	sub	sp, #44	@ 0x2c
 800d430:	af04      	add	r7, sp, #16
 800d432:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d434:	4b6f      	ldr	r3, [pc, #444]	@ (800d5f4 <tcp_listen_input+0x1c8>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	f003 0304 	and.w	r3, r3, #4
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f040 80d2 	bne.w	800d5e6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d106      	bne.n	800d456 <tcp_listen_input+0x2a>
 800d448:	4b6b      	ldr	r3, [pc, #428]	@ (800d5f8 <tcp_listen_input+0x1cc>)
 800d44a:	f240 2281 	movw	r2, #641	@ 0x281
 800d44e:	496b      	ldr	r1, [pc, #428]	@ (800d5fc <tcp_listen_input+0x1d0>)
 800d450:	486b      	ldr	r0, [pc, #428]	@ (800d600 <tcp_listen_input+0x1d4>)
 800d452:	f007 f995 	bl	8014780 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d456:	4b67      	ldr	r3, [pc, #412]	@ (800d5f4 <tcp_listen_input+0x1c8>)
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	f003 0310 	and.w	r3, r3, #16
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d019      	beq.n	800d496 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d462:	4b68      	ldr	r3, [pc, #416]	@ (800d604 <tcp_listen_input+0x1d8>)
 800d464:	6819      	ldr	r1, [r3, #0]
 800d466:	4b68      	ldr	r3, [pc, #416]	@ (800d608 <tcp_listen_input+0x1dc>)
 800d468:	881b      	ldrh	r3, [r3, #0]
 800d46a:	461a      	mov	r2, r3
 800d46c:	4b67      	ldr	r3, [pc, #412]	@ (800d60c <tcp_listen_input+0x1e0>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d472:	4b67      	ldr	r3, [pc, #412]	@ (800d610 <tcp_listen_input+0x1e4>)
 800d474:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d476:	885b      	ldrh	r3, [r3, #2]
 800d478:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d47a:	4a65      	ldr	r2, [pc, #404]	@ (800d610 <tcp_listen_input+0x1e4>)
 800d47c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d47e:	8812      	ldrh	r2, [r2, #0]
 800d480:	b292      	uxth	r2, r2
 800d482:	9202      	str	r2, [sp, #8]
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	4b63      	ldr	r3, [pc, #396]	@ (800d614 <tcp_listen_input+0x1e8>)
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	4b63      	ldr	r3, [pc, #396]	@ (800d618 <tcp_listen_input+0x1ec>)
 800d48c:	4602      	mov	r2, r0
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f002 ff8e 	bl	80103b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d494:	e0a9      	b.n	800d5ea <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d496:	4b57      	ldr	r3, [pc, #348]	@ (800d5f4 <tcp_listen_input+0x1c8>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	f003 0302 	and.w	r3, r3, #2
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f000 80a3 	beq.w	800d5ea <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7d5b      	ldrb	r3, [r3, #21]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7ff f921 	bl	800c6f0 <tcp_alloc>
 800d4ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d111      	bne.n	800d4da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	699b      	ldr	r3, [r3, #24]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00a      	beq.n	800d4d4 <tcp_listen_input+0xa8>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	699b      	ldr	r3, [r3, #24]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	6910      	ldr	r0, [r2, #16]
 800d4c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	4798      	blx	r3
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	73bb      	strb	r3, [r7, #14]
      return;
 800d4d2:	e08b      	b.n	800d5ec <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d4d4:	23f0      	movs	r3, #240	@ 0xf0
 800d4d6:	73bb      	strb	r3, [r7, #14]
      return;
 800d4d8:	e088      	b.n	800d5ec <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d4da:	4b50      	ldr	r3, [pc, #320]	@ (800d61c <tcp_listen_input+0x1f0>)
 800d4dc:	695a      	ldr	r2, [r3, #20]
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d4e2:	4b4e      	ldr	r3, [pc, #312]	@ (800d61c <tcp_listen_input+0x1f0>)
 800d4e4:	691a      	ldr	r2, [r3, #16]
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	8ada      	ldrh	r2, [r3, #22]
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d4f2:	4b47      	ldr	r3, [pc, #284]	@ (800d610 <tcp_listen_input+0x1e4>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	2203      	movs	r2, #3
 800d502:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d504:	4b41      	ldr	r3, [pc, #260]	@ (800d60c <tcp_listen_input+0x1e0>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800d516:	6978      	ldr	r0, [r7, #20]
 800d518:	f7ff fa52 	bl	800c9c0 <tcp_next_iss>
 800d51c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	693a      	ldr	r2, [r7, #16]
 800d528:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	693a      	ldr	r2, [r7, #16]
 800d52e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	693a      	ldr	r2, [r7, #16]
 800d534:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d536:	4b35      	ldr	r3, [pc, #212]	@ (800d60c <tcp_listen_input+0x1e0>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	1e5a      	subs	r2, r3, #1
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	691a      	ldr	r2, [r3, #16]
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	7a5b      	ldrb	r3, [r3, #9]
 800d552:	f003 030c 	and.w	r3, r3, #12
 800d556:	b2da      	uxtb	r2, r3
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	7a1a      	ldrb	r2, [r3, #8]
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d564:	4b2e      	ldr	r3, [pc, #184]	@ (800d620 <tcp_listen_input+0x1f4>)
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	60da      	str	r2, [r3, #12]
 800d56c:	4a2c      	ldr	r2, [pc, #176]	@ (800d620 <tcp_listen_input+0x1f4>)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	6013      	str	r3, [r2, #0]
 800d572:	f003 f8df 	bl	8010734 <tcp_timer_needed>
 800d576:	4b2b      	ldr	r3, [pc, #172]	@ (800d624 <tcp_listen_input+0x1f8>)
 800d578:	2201      	movs	r2, #1
 800d57a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d57c:	6978      	ldr	r0, [r7, #20]
 800d57e:	f001 fd8b 	bl	800f098 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d582:	4b23      	ldr	r3, [pc, #140]	@ (800d610 <tcp_listen_input+0x1e4>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	89db      	ldrh	r3, [r3, #14]
 800d588:	b29a      	uxth	r2, r3
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f005 fa23 	bl	80129f0 <ip4_route>
 800d5aa:	4601      	mov	r1, r0
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f7ff fa2a 	bl	800ca0c <tcp_eff_send_mss_netif>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d5c0:	2112      	movs	r1, #18
 800d5c2:	6978      	ldr	r0, [r7, #20]
 800d5c4:	f002 f846 	bl	800f654 <tcp_enqueue_flags>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d5cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d004      	beq.n	800d5de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	6978      	ldr	r0, [r7, #20]
 800d5d8:	f7fe f976 	bl	800b8c8 <tcp_abandon>
      return;
 800d5dc:	e006      	b.n	800d5ec <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d5de:	6978      	ldr	r0, [r7, #20]
 800d5e0:	f002 f926 	bl	800f830 <tcp_output>
  return;
 800d5e4:	e001      	b.n	800d5ea <tcp_listen_input+0x1be>
    return;
 800d5e6:	bf00      	nop
 800d5e8:	e000      	b.n	800d5ec <tcp_listen_input+0x1c0>
  return;
 800d5ea:	bf00      	nop
}
 800d5ec:	371c      	adds	r7, #28
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd90      	pop	{r4, r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	2000815c 	.word	0x2000815c
 800d5f8:	08016c78 	.word	0x08016c78
 800d5fc:	08016e70 	.word	0x08016e70
 800d600:	08016cc4 	.word	0x08016cc4
 800d604:	20008154 	.word	0x20008154
 800d608:	2000815a 	.word	0x2000815a
 800d60c:	20008150 	.word	0x20008150
 800d610:	20008140 	.word	0x20008140
 800d614:	200051c8 	.word	0x200051c8
 800d618:	200051cc 	.word	0x200051cc
 800d61c:	200051b8 	.word	0x200051b8
 800d620:	20008120 	.word	0x20008120
 800d624:	20008128 	.word	0x20008128

0800d628 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b086      	sub	sp, #24
 800d62c:	af04      	add	r7, sp, #16
 800d62e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d630:	4b2f      	ldr	r3, [pc, #188]	@ (800d6f0 <tcp_timewait_input+0xc8>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	f003 0304 	and.w	r3, r3, #4
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d153      	bne.n	800d6e4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d106      	bne.n	800d650 <tcp_timewait_input+0x28>
 800d642:	4b2c      	ldr	r3, [pc, #176]	@ (800d6f4 <tcp_timewait_input+0xcc>)
 800d644:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d648:	492b      	ldr	r1, [pc, #172]	@ (800d6f8 <tcp_timewait_input+0xd0>)
 800d64a:	482c      	ldr	r0, [pc, #176]	@ (800d6fc <tcp_timewait_input+0xd4>)
 800d64c:	f007 f898 	bl	8014780 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d650:	4b27      	ldr	r3, [pc, #156]	@ (800d6f0 <tcp_timewait_input+0xc8>)
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	f003 0302 	and.w	r3, r3, #2
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d02a      	beq.n	800d6b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d65c:	4b28      	ldr	r3, [pc, #160]	@ (800d700 <tcp_timewait_input+0xd8>)
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	2b00      	cmp	r3, #0
 800d668:	db2d      	blt.n	800d6c6 <tcp_timewait_input+0x9e>
 800d66a:	4b25      	ldr	r3, [pc, #148]	@ (800d700 <tcp_timewait_input+0xd8>)
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d672:	6879      	ldr	r1, [r7, #4]
 800d674:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d676:	440b      	add	r3, r1
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	dc23      	bgt.n	800d6c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d67e:	4b21      	ldr	r3, [pc, #132]	@ (800d704 <tcp_timewait_input+0xdc>)
 800d680:	6819      	ldr	r1, [r3, #0]
 800d682:	4b21      	ldr	r3, [pc, #132]	@ (800d708 <tcp_timewait_input+0xe0>)
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	461a      	mov	r2, r3
 800d688:	4b1d      	ldr	r3, [pc, #116]	@ (800d700 <tcp_timewait_input+0xd8>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d68e:	4b1f      	ldr	r3, [pc, #124]	@ (800d70c <tcp_timewait_input+0xe4>)
 800d690:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d692:	885b      	ldrh	r3, [r3, #2]
 800d694:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d696:	4a1d      	ldr	r2, [pc, #116]	@ (800d70c <tcp_timewait_input+0xe4>)
 800d698:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d69a:	8812      	ldrh	r2, [r2, #0]
 800d69c:	b292      	uxth	r2, r2
 800d69e:	9202      	str	r2, [sp, #8]
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d710 <tcp_timewait_input+0xe8>)
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	4b1b      	ldr	r3, [pc, #108]	@ (800d714 <tcp_timewait_input+0xec>)
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f002 fe80 	bl	80103b0 <tcp_rst>
      return;
 800d6b0:	e01b      	b.n	800d6ea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d6b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d6f0 <tcp_timewait_input+0xc8>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d6be:	4b16      	ldr	r3, [pc, #88]	@ (800d718 <tcp_timewait_input+0xf0>)
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d6c6:	4b10      	ldr	r3, [pc, #64]	@ (800d708 <tcp_timewait_input+0xe0>)
 800d6c8:	881b      	ldrh	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00c      	beq.n	800d6e8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	8b5b      	ldrh	r3, [r3, #26]
 800d6d2:	f043 0302 	orr.w	r3, r3, #2
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f002 f8a7 	bl	800f830 <tcp_output>
  }
  return;
 800d6e2:	e001      	b.n	800d6e8 <tcp_timewait_input+0xc0>
    return;
 800d6e4:	bf00      	nop
 800d6e6:	e000      	b.n	800d6ea <tcp_timewait_input+0xc2>
  return;
 800d6e8:	bf00      	nop
}
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	2000815c 	.word	0x2000815c
 800d6f4:	08016c78 	.word	0x08016c78
 800d6f8:	08016e90 	.word	0x08016e90
 800d6fc:	08016cc4 	.word	0x08016cc4
 800d700:	20008150 	.word	0x20008150
 800d704:	20008154 	.word	0x20008154
 800d708:	2000815a 	.word	0x2000815a
 800d70c:	20008140 	.word	0x20008140
 800d710:	200051c8 	.word	0x200051c8
 800d714:	200051cc 	.word	0x200051cc
 800d718:	20008114 	.word	0x20008114

0800d71c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d71c:	b590      	push	{r4, r7, lr}
 800d71e:	b08d      	sub	sp, #52	@ 0x34
 800d720:	af04      	add	r7, sp, #16
 800d722:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d724:	2300      	movs	r3, #0
 800d726:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <tcp_process+0x24>
 800d732:	4b9d      	ldr	r3, [pc, #628]	@ (800d9a8 <tcp_process+0x28c>)
 800d734:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d738:	499c      	ldr	r1, [pc, #624]	@ (800d9ac <tcp_process+0x290>)
 800d73a:	489d      	ldr	r0, [pc, #628]	@ (800d9b0 <tcp_process+0x294>)
 800d73c:	f007 f820 	bl	8014780 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d740:	4b9c      	ldr	r3, [pc, #624]	@ (800d9b4 <tcp_process+0x298>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	f003 0304 	and.w	r3, r3, #4
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d04e      	beq.n	800d7ea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	7d1b      	ldrb	r3, [r3, #20]
 800d750:	2b02      	cmp	r3, #2
 800d752:	d108      	bne.n	800d766 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d758:	4b97      	ldr	r3, [pc, #604]	@ (800d9b8 <tcp_process+0x29c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d123      	bne.n	800d7a8 <tcp_process+0x8c>
        acceptable = 1;
 800d760:	2301      	movs	r3, #1
 800d762:	77fb      	strb	r3, [r7, #31]
 800d764:	e020      	b.n	800d7a8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d76a:	4b94      	ldr	r3, [pc, #592]	@ (800d9bc <tcp_process+0x2a0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d102      	bne.n	800d778 <tcp_process+0x5c>
        acceptable = 1;
 800d772:	2301      	movs	r3, #1
 800d774:	77fb      	strb	r3, [r7, #31]
 800d776:	e017      	b.n	800d7a8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d778:	4b90      	ldr	r3, [pc, #576]	@ (800d9bc <tcp_process+0x2a0>)
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	db10      	blt.n	800d7a8 <tcp_process+0x8c>
 800d786:	4b8d      	ldr	r3, [pc, #564]	@ (800d9bc <tcp_process+0x2a0>)
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d78e:	6879      	ldr	r1, [r7, #4]
 800d790:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d792:	440b      	add	r3, r1
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	2b00      	cmp	r3, #0
 800d798:	dc06      	bgt.n	800d7a8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	8b5b      	ldrh	r3, [r3, #26]
 800d79e:	f043 0302 	orr.w	r3, r3, #2
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d7a8:	7ffb      	ldrb	r3, [r7, #31]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d01b      	beq.n	800d7e6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7d1b      	ldrb	r3, [r3, #20]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <tcp_process+0xa8>
 800d7b6:	4b7c      	ldr	r3, [pc, #496]	@ (800d9a8 <tcp_process+0x28c>)
 800d7b8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800d7bc:	4980      	ldr	r1, [pc, #512]	@ (800d9c0 <tcp_process+0x2a4>)
 800d7be:	487c      	ldr	r0, [pc, #496]	@ (800d9b0 <tcp_process+0x294>)
 800d7c0:	f006 ffde 	bl	8014780 <iprintf>
      recv_flags |= TF_RESET;
 800d7c4:	4b7f      	ldr	r3, [pc, #508]	@ (800d9c4 <tcp_process+0x2a8>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	f043 0308 	orr.w	r3, r3, #8
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	4b7d      	ldr	r3, [pc, #500]	@ (800d9c4 <tcp_process+0x2a8>)
 800d7d0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	8b5b      	ldrh	r3, [r3, #26]
 800d7d6:	f023 0301 	bic.w	r3, r3, #1
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d7e0:	f06f 030d 	mvn.w	r3, #13
 800d7e4:	e37a      	b.n	800dedc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	e378      	b.n	800dedc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d7ea:	4b72      	ldr	r3, [pc, #456]	@ (800d9b4 <tcp_process+0x298>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d010      	beq.n	800d818 <tcp_process+0xfc>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	7d1b      	ldrb	r3, [r3, #20]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d00c      	beq.n	800d818 <tcp_process+0xfc>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	7d1b      	ldrb	r3, [r3, #20]
 800d802:	2b03      	cmp	r3, #3
 800d804:	d008      	beq.n	800d818 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	8b5b      	ldrh	r3, [r3, #26]
 800d80a:	f043 0302 	orr.w	r3, r3, #2
 800d80e:	b29a      	uxth	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d814:	2300      	movs	r3, #0
 800d816:	e361      	b.n	800dedc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	8b5b      	ldrh	r3, [r3, #26]
 800d81c:	f003 0310 	and.w	r3, r3, #16
 800d820:	2b00      	cmp	r3, #0
 800d822:	d103      	bne.n	800d82c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d824:	4b68      	ldr	r3, [pc, #416]	@ (800d9c8 <tcp_process+0x2ac>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f001 fc2b 	bl	800f098 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	7d1b      	ldrb	r3, [r3, #20]
 800d846:	3b02      	subs	r3, #2
 800d848:	2b07      	cmp	r3, #7
 800d84a:	f200 8337 	bhi.w	800debc <tcp_process+0x7a0>
 800d84e:	a201      	add	r2, pc, #4	@ (adr r2, 800d854 <tcp_process+0x138>)
 800d850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d854:	0800d875 	.word	0x0800d875
 800d858:	0800daa5 	.word	0x0800daa5
 800d85c:	0800dc1d 	.word	0x0800dc1d
 800d860:	0800dc47 	.word	0x0800dc47
 800d864:	0800dd6b 	.word	0x0800dd6b
 800d868:	0800dc1d 	.word	0x0800dc1d
 800d86c:	0800ddf7 	.word	0x0800ddf7
 800d870:	0800de87 	.word	0x0800de87
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d874:	4b4f      	ldr	r3, [pc, #316]	@ (800d9b4 <tcp_process+0x298>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 0310 	and.w	r3, r3, #16
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f000 80e4 	beq.w	800da4a <tcp_process+0x32e>
 800d882:	4b4c      	ldr	r3, [pc, #304]	@ (800d9b4 <tcp_process+0x298>)
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	f003 0302 	and.w	r3, r3, #2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 80dd 	beq.w	800da4a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d894:	1c5a      	adds	r2, r3, #1
 800d896:	4b48      	ldr	r3, [pc, #288]	@ (800d9b8 <tcp_process+0x29c>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	f040 80d5 	bne.w	800da4a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d8a0:	4b46      	ldr	r3, [pc, #280]	@ (800d9bc <tcp_process+0x2a0>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800d8b2:	4b41      	ldr	r3, [pc, #260]	@ (800d9b8 <tcp_process+0x29c>)
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d8ba:	4b44      	ldr	r3, [pc, #272]	@ (800d9cc <tcp_process+0x2b0>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	89db      	ldrh	r3, [r3, #14]
 800d8c0:	b29a      	uxth	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d8d4:	4b39      	ldr	r3, [pc, #228]	@ (800d9bc <tcp_process+0x2a0>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	1e5a      	subs	r2, r3, #1
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f005 f87f 	bl	80129f0 <ip4_route>
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	3304      	adds	r3, #4
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f7ff f886 	bl	800ca0c <tcp_eff_send_mss_netif>
 800d900:	4603      	mov	r3, r0
 800d902:	461a      	mov	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d90c:	009a      	lsls	r2, r3, #2
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d918:	428b      	cmp	r3, r1
 800d91a:	bf38      	it	cc
 800d91c:	460b      	movcc	r3, r1
 800d91e:	429a      	cmp	r2, r3
 800d920:	d204      	bcs.n	800d92c <tcp_process+0x210>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	b29b      	uxth	r3, r3
 800d92a:	e00d      	b.n	800d948 <tcp_process+0x22c>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d936:	4293      	cmp	r3, r2
 800d938:	d904      	bls.n	800d944 <tcp_process+0x228>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d93e:	005b      	lsls	r3, r3, #1
 800d940:	b29b      	uxth	r3, r3
 800d942:	e001      	b.n	800d948 <tcp_process+0x22c>
 800d944:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d954:	2b00      	cmp	r3, #0
 800d956:	d106      	bne.n	800d966 <tcp_process+0x24a>
 800d958:	4b13      	ldr	r3, [pc, #76]	@ (800d9a8 <tcp_process+0x28c>)
 800d95a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800d95e:	491c      	ldr	r1, [pc, #112]	@ (800d9d0 <tcp_process+0x2b4>)
 800d960:	4813      	ldr	r0, [pc, #76]	@ (800d9b0 <tcp_process+0x294>)
 800d962:	f006 ff0d 	bl	8014780 <iprintf>
        --pcb->snd_queuelen;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d96c:	3b01      	subs	r3, #1
 800d96e:	b29a      	uxth	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d97a:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d12a      	bne.n	800d9d8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d986:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d106      	bne.n	800d99c <tcp_process+0x280>
 800d98e:	4b06      	ldr	r3, [pc, #24]	@ (800d9a8 <tcp_process+0x28c>)
 800d990:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800d994:	490f      	ldr	r1, [pc, #60]	@ (800d9d4 <tcp_process+0x2b8>)
 800d996:	4806      	ldr	r0, [pc, #24]	@ (800d9b0 <tcp_process+0x294>)
 800d998:	f006 fef2 	bl	8014780 <iprintf>
          pcb->unsent = rseg->next;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d9a4:	e01c      	b.n	800d9e0 <tcp_process+0x2c4>
 800d9a6:	bf00      	nop
 800d9a8:	08016c78 	.word	0x08016c78
 800d9ac:	08016eb0 	.word	0x08016eb0
 800d9b0:	08016cc4 	.word	0x08016cc4
 800d9b4:	2000815c 	.word	0x2000815c
 800d9b8:	20008154 	.word	0x20008154
 800d9bc:	20008150 	.word	0x20008150
 800d9c0:	08016ecc 	.word	0x08016ecc
 800d9c4:	2000815d 	.word	0x2000815d
 800d9c8:	20008114 	.word	0x20008114
 800d9cc:	20008140 	.word	0x20008140
 800d9d0:	08016eec 	.word	0x08016eec
 800d9d4:	08016f04 	.word	0x08016f04
        } else {
          pcb->unacked = rseg->next;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800d9e0:	6978      	ldr	r0, [r7, #20]
 800d9e2:	f7fe fd1c 	bl	800c41e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d104      	bne.n	800d9f8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d9f4:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d9f6:	e006      	b.n	800da06 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00a      	beq.n	800da26 <tcp_process+0x30a>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	6910      	ldr	r0, [r2, #16]
 800da1a:	2200      	movs	r2, #0
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	4798      	blx	r3
 800da20:	4603      	mov	r3, r0
 800da22:	77bb      	strb	r3, [r7, #30]
 800da24:	e001      	b.n	800da2a <tcp_process+0x30e>
 800da26:	2300      	movs	r3, #0
 800da28:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800da2a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800da2e:	f113 0f0d 	cmn.w	r3, #13
 800da32:	d102      	bne.n	800da3a <tcp_process+0x31e>
          return ERR_ABRT;
 800da34:	f06f 030c 	mvn.w	r3, #12
 800da38:	e250      	b.n	800dedc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	8b5b      	ldrh	r3, [r3, #26]
 800da3e:	f043 0302 	orr.w	r3, r3, #2
 800da42:	b29a      	uxth	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800da48:	e23a      	b.n	800dec0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800da4a:	4b98      	ldr	r3, [pc, #608]	@ (800dcac <tcp_process+0x590>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	f003 0310 	and.w	r3, r3, #16
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 8234 	beq.w	800dec0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da58:	4b95      	ldr	r3, [pc, #596]	@ (800dcb0 <tcp_process+0x594>)
 800da5a:	6819      	ldr	r1, [r3, #0]
 800da5c:	4b95      	ldr	r3, [pc, #596]	@ (800dcb4 <tcp_process+0x598>)
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	4b95      	ldr	r3, [pc, #596]	@ (800dcb8 <tcp_process+0x59c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da68:	4b94      	ldr	r3, [pc, #592]	@ (800dcbc <tcp_process+0x5a0>)
 800da6a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da6c:	885b      	ldrh	r3, [r3, #2]
 800da6e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da70:	4a92      	ldr	r2, [pc, #584]	@ (800dcbc <tcp_process+0x5a0>)
 800da72:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da74:	8812      	ldrh	r2, [r2, #0]
 800da76:	b292      	uxth	r2, r2
 800da78:	9202      	str	r2, [sp, #8]
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	4b90      	ldr	r3, [pc, #576]	@ (800dcc0 <tcp_process+0x5a4>)
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	4b90      	ldr	r3, [pc, #576]	@ (800dcc4 <tcp_process+0x5a8>)
 800da82:	4602      	mov	r2, r0
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f002 fc93 	bl	80103b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800da90:	2b05      	cmp	r3, #5
 800da92:	f200 8215 	bhi.w	800dec0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f002 fa5f 	bl	800ff60 <tcp_rexmit_rto>
      break;
 800daa2:	e20d      	b.n	800dec0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800daa4:	4b81      	ldr	r3, [pc, #516]	@ (800dcac <tcp_process+0x590>)
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	f003 0310 	and.w	r3, r3, #16
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 80a1 	beq.w	800dbf4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dab2:	4b7f      	ldr	r3, [pc, #508]	@ (800dcb0 <tcp_process+0x594>)
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	3b01      	subs	r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	db7e      	blt.n	800dbc0 <tcp_process+0x4a4>
 800dac2:	4b7b      	ldr	r3, [pc, #492]	@ (800dcb0 <tcp_process+0x594>)
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	2b00      	cmp	r3, #0
 800dace:	dc77      	bgt.n	800dbc0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2204      	movs	r2, #4
 800dad4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d102      	bne.n	800dae4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dade:	23fa      	movs	r3, #250	@ 0xfa
 800dae0:	77bb      	strb	r3, [r7, #30]
 800dae2:	e01d      	b.n	800db20 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <tcp_process+0x3e0>
 800daee:	4b76      	ldr	r3, [pc, #472]	@ (800dcc8 <tcp_process+0x5ac>)
 800daf0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800daf4:	4975      	ldr	r1, [pc, #468]	@ (800dccc <tcp_process+0x5b0>)
 800daf6:	4876      	ldr	r0, [pc, #472]	@ (800dcd0 <tcp_process+0x5b4>)
 800daf8:	f006 fe42 	bl	8014780 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800db00:	699b      	ldr	r3, [r3, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00a      	beq.n	800db1c <tcp_process+0x400>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	6910      	ldr	r0, [r2, #16]
 800db10:	2200      	movs	r2, #0
 800db12:	6879      	ldr	r1, [r7, #4]
 800db14:	4798      	blx	r3
 800db16:	4603      	mov	r3, r0
 800db18:	77bb      	strb	r3, [r7, #30]
 800db1a:	e001      	b.n	800db20 <tcp_process+0x404>
 800db1c:	23f0      	movs	r3, #240	@ 0xf0
 800db1e:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800db20:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00a      	beq.n	800db3e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800db28:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800db2c:	f113 0f0d 	cmn.w	r3, #13
 800db30:	d002      	beq.n	800db38 <tcp_process+0x41c>
              tcp_abort(pcb);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fd ff86 	bl	800ba44 <tcp_abort>
            }
            return ERR_ABRT;
 800db38:	f06f 030c 	mvn.w	r3, #12
 800db3c:	e1ce      	b.n	800dedc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fae0 	bl	800e104 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800db44:	4b63      	ldr	r3, [pc, #396]	@ (800dcd4 <tcp_process+0x5b8>)
 800db46:	881b      	ldrh	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d005      	beq.n	800db58 <tcp_process+0x43c>
            recv_acked--;
 800db4c:	4b61      	ldr	r3, [pc, #388]	@ (800dcd4 <tcp_process+0x5b8>)
 800db4e:	881b      	ldrh	r3, [r3, #0]
 800db50:	3b01      	subs	r3, #1
 800db52:	b29a      	uxth	r2, r3
 800db54:	4b5f      	ldr	r3, [pc, #380]	@ (800dcd4 <tcp_process+0x5b8>)
 800db56:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db5c:	009a      	lsls	r2, r3, #2
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db62:	005b      	lsls	r3, r3, #1
 800db64:	f241 111c 	movw	r1, #4380	@ 0x111c
 800db68:	428b      	cmp	r3, r1
 800db6a:	bf38      	it	cc
 800db6c:	460b      	movcc	r3, r1
 800db6e:	429a      	cmp	r2, r3
 800db70:	d204      	bcs.n	800db7c <tcp_process+0x460>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	b29b      	uxth	r3, r3
 800db7a:	e00d      	b.n	800db98 <tcp_process+0x47c>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db80:	005b      	lsls	r3, r3, #1
 800db82:	f241 121c 	movw	r2, #4380	@ 0x111c
 800db86:	4293      	cmp	r3, r2
 800db88:	d904      	bls.n	800db94 <tcp_process+0x478>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	b29b      	uxth	r3, r3
 800db92:	e001      	b.n	800db98 <tcp_process+0x47c>
 800db94:	f241 131c 	movw	r3, #4380	@ 0x111c
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800db9e:	4b4e      	ldr	r3, [pc, #312]	@ (800dcd8 <tcp_process+0x5bc>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d037      	beq.n	800dc1a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	8b5b      	ldrh	r3, [r3, #26]
 800dbae:	f043 0302 	orr.w	r3, r3, #2
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2207      	movs	r2, #7
 800dbbc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dbbe:	e02c      	b.n	800dc1a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbc0:	4b3b      	ldr	r3, [pc, #236]	@ (800dcb0 <tcp_process+0x594>)
 800dbc2:	6819      	ldr	r1, [r3, #0]
 800dbc4:	4b3b      	ldr	r3, [pc, #236]	@ (800dcb4 <tcp_process+0x598>)
 800dbc6:	881b      	ldrh	r3, [r3, #0]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4b3b      	ldr	r3, [pc, #236]	@ (800dcb8 <tcp_process+0x59c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbd0:	4b3a      	ldr	r3, [pc, #232]	@ (800dcbc <tcp_process+0x5a0>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbd4:	885b      	ldrh	r3, [r3, #2]
 800dbd6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbd8:	4a38      	ldr	r2, [pc, #224]	@ (800dcbc <tcp_process+0x5a0>)
 800dbda:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbdc:	8812      	ldrh	r2, [r2, #0]
 800dbde:	b292      	uxth	r2, r2
 800dbe0:	9202      	str	r2, [sp, #8]
 800dbe2:	9301      	str	r3, [sp, #4]
 800dbe4:	4b36      	ldr	r3, [pc, #216]	@ (800dcc0 <tcp_process+0x5a4>)
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	4b36      	ldr	r3, [pc, #216]	@ (800dcc4 <tcp_process+0x5a8>)
 800dbea:	4602      	mov	r2, r0
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f002 fbdf 	bl	80103b0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dbf2:	e167      	b.n	800dec4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800dbf4:	4b2d      	ldr	r3, [pc, #180]	@ (800dcac <tcp_process+0x590>)
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	f003 0302 	and.w	r3, r3, #2
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f000 8161 	beq.w	800dec4 <tcp_process+0x7a8>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc06:	1e5a      	subs	r2, r3, #1
 800dc08:	4b2b      	ldr	r3, [pc, #172]	@ (800dcb8 <tcp_process+0x59c>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	f040 8159 	bne.w	800dec4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f002 f9c6 	bl	800ffa4 <tcp_rexmit>
      break;
 800dc18:	e154      	b.n	800dec4 <tcp_process+0x7a8>
 800dc1a:	e153      	b.n	800dec4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fa71 	bl	800e104 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800dc22:	4b2d      	ldr	r3, [pc, #180]	@ (800dcd8 <tcp_process+0x5bc>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	f003 0320 	and.w	r3, r3, #32
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f000 814c 	beq.w	800dec8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	8b5b      	ldrh	r3, [r3, #26]
 800dc34:	f043 0302 	orr.w	r3, r3, #2
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2207      	movs	r2, #7
 800dc42:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc44:	e140      	b.n	800dec8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 fa5c 	bl	800e104 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dc4c:	4b22      	ldr	r3, [pc, #136]	@ (800dcd8 <tcp_process+0x5bc>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	f003 0320 	and.w	r3, r3, #32
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d071      	beq.n	800dd3c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dc58:	4b14      	ldr	r3, [pc, #80]	@ (800dcac <tcp_process+0x590>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	f003 0310 	and.w	r3, r3, #16
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d060      	beq.n	800dd26 <tcp_process+0x60a>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc68:	4b11      	ldr	r3, [pc, #68]	@ (800dcb0 <tcp_process+0x594>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d15a      	bne.n	800dd26 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d156      	bne.n	800dd26 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	8b5b      	ldrh	r3, [r3, #26]
 800dc7c:	f043 0302 	orr.w	r3, r3, #2
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7fe fdb6 	bl	800c7f8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dc8c:	4b13      	ldr	r3, [pc, #76]	@ (800dcdc <tcp_process+0x5c0>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d105      	bne.n	800dca2 <tcp_process+0x586>
 800dc96:	4b11      	ldr	r3, [pc, #68]	@ (800dcdc <tcp_process+0x5c0>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	4a0f      	ldr	r2, [pc, #60]	@ (800dcdc <tcp_process+0x5c0>)
 800dc9e:	6013      	str	r3, [r2, #0]
 800dca0:	e02e      	b.n	800dd00 <tcp_process+0x5e4>
 800dca2:	4b0e      	ldr	r3, [pc, #56]	@ (800dcdc <tcp_process+0x5c0>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	613b      	str	r3, [r7, #16]
 800dca8:	e027      	b.n	800dcfa <tcp_process+0x5de>
 800dcaa:	bf00      	nop
 800dcac:	2000815c 	.word	0x2000815c
 800dcb0:	20008154 	.word	0x20008154
 800dcb4:	2000815a 	.word	0x2000815a
 800dcb8:	20008150 	.word	0x20008150
 800dcbc:	20008140 	.word	0x20008140
 800dcc0:	200051c8 	.word	0x200051c8
 800dcc4:	200051cc 	.word	0x200051cc
 800dcc8:	08016c78 	.word	0x08016c78
 800dccc:	08016f18 	.word	0x08016f18
 800dcd0:	08016cc4 	.word	0x08016cc4
 800dcd4:	20008158 	.word	0x20008158
 800dcd8:	2000815d 	.word	0x2000815d
 800dcdc:	20008120 	.word	0x20008120
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d104      	bne.n	800dcf4 <tcp_process+0x5d8>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	68da      	ldr	r2, [r3, #12]
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	60da      	str	r2, [r3, #12]
 800dcf2:	e005      	b.n	800dd00 <tcp_process+0x5e4>
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	613b      	str	r3, [r7, #16]
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1ef      	bne.n	800dce0 <tcp_process+0x5c4>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	60da      	str	r2, [r3, #12]
 800dd06:	4b77      	ldr	r3, [pc, #476]	@ (800dee4 <tcp_process+0x7c8>)
 800dd08:	2201      	movs	r2, #1
 800dd0a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	220a      	movs	r2, #10
 800dd10:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dd12:	4b75      	ldr	r3, [pc, #468]	@ (800dee8 <tcp_process+0x7cc>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	60da      	str	r2, [r3, #12]
 800dd1a:	4a73      	ldr	r2, [pc, #460]	@ (800dee8 <tcp_process+0x7cc>)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	f002 fd08 	bl	8010734 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dd24:	e0d2      	b.n	800decc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8b5b      	ldrh	r3, [r3, #26]
 800dd2a:	f043 0302 	orr.w	r3, r3, #2
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2208      	movs	r2, #8
 800dd38:	751a      	strb	r2, [r3, #20]
      break;
 800dd3a:	e0c7      	b.n	800decc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dd3c:	4b6b      	ldr	r3, [pc, #428]	@ (800deec <tcp_process+0x7d0>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	f003 0310 	and.w	r3, r3, #16
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f000 80c1 	beq.w	800decc <tcp_process+0x7b0>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd4e:	4b68      	ldr	r3, [pc, #416]	@ (800def0 <tcp_process+0x7d4>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	f040 80ba 	bne.w	800decc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f040 80b5 	bne.w	800decc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2206      	movs	r2, #6
 800dd66:	751a      	strb	r2, [r3, #20]
      break;
 800dd68:	e0b0      	b.n	800decc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f9ca 	bl	800e104 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dd70:	4b60      	ldr	r3, [pc, #384]	@ (800def4 <tcp_process+0x7d8>)
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	f003 0320 	and.w	r3, r3, #32
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 80a9 	beq.w	800ded0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	8b5b      	ldrh	r3, [r3, #26]
 800dd82:	f043 0302 	orr.w	r3, r3, #2
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7fe fd33 	bl	800c7f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dd92:	4b59      	ldr	r3, [pc, #356]	@ (800def8 <tcp_process+0x7dc>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d105      	bne.n	800dda8 <tcp_process+0x68c>
 800dd9c:	4b56      	ldr	r3, [pc, #344]	@ (800def8 <tcp_process+0x7dc>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	4a55      	ldr	r2, [pc, #340]	@ (800def8 <tcp_process+0x7dc>)
 800dda4:	6013      	str	r3, [r2, #0]
 800dda6:	e013      	b.n	800ddd0 <tcp_process+0x6b4>
 800dda8:	4b53      	ldr	r3, [pc, #332]	@ (800def8 <tcp_process+0x7dc>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	60fb      	str	r3, [r7, #12]
 800ddae:	e00c      	b.n	800ddca <tcp_process+0x6ae>
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d104      	bne.n	800ddc4 <tcp_process+0x6a8>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68da      	ldr	r2, [r3, #12]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	60da      	str	r2, [r3, #12]
 800ddc2:	e005      	b.n	800ddd0 <tcp_process+0x6b4>
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	60fb      	str	r3, [r7, #12]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1ef      	bne.n	800ddb0 <tcp_process+0x694>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	60da      	str	r2, [r3, #12]
 800ddd6:	4b43      	ldr	r3, [pc, #268]	@ (800dee4 <tcp_process+0x7c8>)
 800ddd8:	2201      	movs	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	220a      	movs	r2, #10
 800dde0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dde2:	4b41      	ldr	r3, [pc, #260]	@ (800dee8 <tcp_process+0x7cc>)
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	60da      	str	r2, [r3, #12]
 800ddea:	4a3f      	ldr	r2, [pc, #252]	@ (800dee8 <tcp_process+0x7cc>)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6013      	str	r3, [r2, #0]
 800ddf0:	f002 fca0 	bl	8010734 <tcp_timer_needed>
      }
      break;
 800ddf4:	e06c      	b.n	800ded0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f984 	bl	800e104 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ddfc:	4b3b      	ldr	r3, [pc, #236]	@ (800deec <tcp_process+0x7d0>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	f003 0310 	and.w	r3, r3, #16
 800de04:	2b00      	cmp	r3, #0
 800de06:	d065      	beq.n	800ded4 <tcp_process+0x7b8>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de0c:	4b38      	ldr	r3, [pc, #224]	@ (800def0 <tcp_process+0x7d4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	429a      	cmp	r2, r3
 800de12:	d15f      	bne.n	800ded4 <tcp_process+0x7b8>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d15b      	bne.n	800ded4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7fe fceb 	bl	800c7f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800de22:	4b35      	ldr	r3, [pc, #212]	@ (800def8 <tcp_process+0x7dc>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d105      	bne.n	800de38 <tcp_process+0x71c>
 800de2c:	4b32      	ldr	r3, [pc, #200]	@ (800def8 <tcp_process+0x7dc>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	4a31      	ldr	r2, [pc, #196]	@ (800def8 <tcp_process+0x7dc>)
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	e013      	b.n	800de60 <tcp_process+0x744>
 800de38:	4b2f      	ldr	r3, [pc, #188]	@ (800def8 <tcp_process+0x7dc>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	61bb      	str	r3, [r7, #24]
 800de3e:	e00c      	b.n	800de5a <tcp_process+0x73e>
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	429a      	cmp	r2, r3
 800de48:	d104      	bne.n	800de54 <tcp_process+0x738>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68da      	ldr	r2, [r3, #12]
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	60da      	str	r2, [r3, #12]
 800de52:	e005      	b.n	800de60 <tcp_process+0x744>
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	61bb      	str	r3, [r7, #24]
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1ef      	bne.n	800de40 <tcp_process+0x724>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	60da      	str	r2, [r3, #12]
 800de66:	4b1f      	ldr	r3, [pc, #124]	@ (800dee4 <tcp_process+0x7c8>)
 800de68:	2201      	movs	r2, #1
 800de6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	220a      	movs	r2, #10
 800de70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800de72:	4b1d      	ldr	r3, [pc, #116]	@ (800dee8 <tcp_process+0x7cc>)
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	60da      	str	r2, [r3, #12]
 800de7a:	4a1b      	ldr	r2, [pc, #108]	@ (800dee8 <tcp_process+0x7cc>)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6013      	str	r3, [r2, #0]
 800de80:	f002 fc58 	bl	8010734 <tcp_timer_needed>
      }
      break;
 800de84:	e026      	b.n	800ded4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f93c 	bl	800e104 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800de8c:	4b17      	ldr	r3, [pc, #92]	@ (800deec <tcp_process+0x7d0>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	f003 0310 	and.w	r3, r3, #16
 800de94:	2b00      	cmp	r3, #0
 800de96:	d01f      	beq.n	800ded8 <tcp_process+0x7bc>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de9c:	4b14      	ldr	r3, [pc, #80]	@ (800def0 <tcp_process+0x7d4>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d119      	bne.n	800ded8 <tcp_process+0x7bc>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d115      	bne.n	800ded8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800deac:	4b11      	ldr	r3, [pc, #68]	@ (800def4 <tcp_process+0x7d8>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f043 0310 	orr.w	r3, r3, #16
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	4b0f      	ldr	r3, [pc, #60]	@ (800def4 <tcp_process+0x7d8>)
 800deb8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800deba:	e00d      	b.n	800ded8 <tcp_process+0x7bc>
    default:
      break;
 800debc:	bf00      	nop
 800debe:	e00c      	b.n	800deda <tcp_process+0x7be>
      break;
 800dec0:	bf00      	nop
 800dec2:	e00a      	b.n	800deda <tcp_process+0x7be>
      break;
 800dec4:	bf00      	nop
 800dec6:	e008      	b.n	800deda <tcp_process+0x7be>
      break;
 800dec8:	bf00      	nop
 800deca:	e006      	b.n	800deda <tcp_process+0x7be>
      break;
 800decc:	bf00      	nop
 800dece:	e004      	b.n	800deda <tcp_process+0x7be>
      break;
 800ded0:	bf00      	nop
 800ded2:	e002      	b.n	800deda <tcp_process+0x7be>
      break;
 800ded4:	bf00      	nop
 800ded6:	e000      	b.n	800deda <tcp_process+0x7be>
      break;
 800ded8:	bf00      	nop
  }
  return ERR_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3724      	adds	r7, #36	@ 0x24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd90      	pop	{r4, r7, pc}
 800dee4:	20008128 	.word	0x20008128
 800dee8:	20008124 	.word	0x20008124
 800deec:	2000815c 	.word	0x2000815c
 800def0:	20008154 	.word	0x20008154
 800def4:	2000815d 	.word	0x2000815d
 800def8:	20008120 	.word	0x20008120

0800defc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800defc:	b590      	push	{r4, r7, lr}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d106      	bne.n	800df1a <tcp_oos_insert_segment+0x1e>
 800df0c:	4b3b      	ldr	r3, [pc, #236]	@ (800dffc <tcp_oos_insert_segment+0x100>)
 800df0e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800df12:	493b      	ldr	r1, [pc, #236]	@ (800e000 <tcp_oos_insert_segment+0x104>)
 800df14:	483b      	ldr	r0, [pc, #236]	@ (800e004 <tcp_oos_insert_segment+0x108>)
 800df16:	f006 fc33 	bl	8014780 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	691b      	ldr	r3, [r3, #16]
 800df1e:	899b      	ldrh	r3, [r3, #12]
 800df20:	b29b      	uxth	r3, r3
 800df22:	4618      	mov	r0, r3
 800df24:	f7fb fba6 	bl	8009674 <lwip_htons>
 800df28:	4603      	mov	r3, r0
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	2b00      	cmp	r3, #0
 800df32:	d028      	beq.n	800df86 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800df34:	6838      	ldr	r0, [r7, #0]
 800df36:	f7fe fa5d 	bl	800c3f4 <tcp_segs_free>
    next = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	603b      	str	r3, [r7, #0]
 800df3e:	e056      	b.n	800dfee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	899b      	ldrh	r3, [r3, #12]
 800df46:	b29b      	uxth	r3, r3
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fb fb93 	bl	8009674 <lwip_htons>
 800df4e:	4603      	mov	r3, r0
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00d      	beq.n	800df76 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	899b      	ldrh	r3, [r3, #12]
 800df60:	b29c      	uxth	r4, r3
 800df62:	2001      	movs	r0, #1
 800df64:	f7fb fb86 	bl	8009674 <lwip_htons>
 800df68:	4603      	mov	r3, r0
 800df6a:	461a      	mov	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	4322      	orrs	r2, r4
 800df72:	b292      	uxth	r2, r2
 800df74:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f7fe fa4c 	bl	800c41e <tcp_seg_free>
    while (next &&
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00e      	beq.n	800dfaa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	891b      	ldrh	r3, [r3, #8]
 800df90:	461a      	mov	r2, r3
 800df92:	4b1d      	ldr	r3, [pc, #116]	@ (800e008 <tcp_oos_insert_segment+0x10c>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	441a      	add	r2, r3
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	6839      	ldr	r1, [r7, #0]
 800dfa0:	8909      	ldrh	r1, [r1, #8]
 800dfa2:	440b      	add	r3, r1
 800dfa4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	daca      	bge.n	800df40 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d01e      	beq.n	800dfee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	891b      	ldrh	r3, [r3, #8]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	4b14      	ldr	r3, [pc, #80]	@ (800e008 <tcp_oos_insert_segment+0x10c>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	441a      	add	r2, r3
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	dd12      	ble.n	800dfee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	4b0d      	ldr	r3, [pc, #52]	@ (800e008 <tcp_oos_insert_segment+0x10c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685a      	ldr	r2, [r3, #4]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	891b      	ldrh	r3, [r3, #8]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4610      	mov	r0, r2
 800dfea:	f7fc fe0d 	bl	800ac08 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	601a      	str	r2, [r3, #0]
}
 800dff4:	bf00      	nop
 800dff6:	3714      	adds	r7, #20
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd90      	pop	{r4, r7, pc}
 800dffc:	08016c78 	.word	0x08016c78
 800e000:	08016f38 	.word	0x08016f38
 800e004:	08016cc4 	.word	0x08016cc4
 800e008:	20008150 	.word	0x20008150

0800e00c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e00c:	b5b0      	push	{r4, r5, r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
 800e018:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e01a:	e03e      	b.n	800e09a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fc fffa 	bl	800b024 <pbuf_clen>
 800e030:	4603      	mov	r3, r0
 800e032:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e03a:	8a7a      	ldrh	r2, [r7, #18]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d906      	bls.n	800e04e <tcp_free_acked_segments+0x42>
 800e040:	4b2a      	ldr	r3, [pc, #168]	@ (800e0ec <tcp_free_acked_segments+0xe0>)
 800e042:	f240 4257 	movw	r2, #1111	@ 0x457
 800e046:	492a      	ldr	r1, [pc, #168]	@ (800e0f0 <tcp_free_acked_segments+0xe4>)
 800e048:	482a      	ldr	r0, [pc, #168]	@ (800e0f4 <tcp_free_acked_segments+0xe8>)
 800e04a:	f006 fb99 	bl	8014780 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800e054:	8a7b      	ldrh	r3, [r7, #18]
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	b29a      	uxth	r2, r3
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	891a      	ldrh	r2, [r3, #8]
 800e064:	4b24      	ldr	r3, [pc, #144]	@ (800e0f8 <tcp_free_acked_segments+0xec>)
 800e066:	881b      	ldrh	r3, [r3, #0]
 800e068:	4413      	add	r3, r2
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	4b22      	ldr	r3, [pc, #136]	@ (800e0f8 <tcp_free_acked_segments+0xec>)
 800e06e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e070:	6978      	ldr	r0, [r7, #20]
 800e072:	f7fe f9d4 	bl	800c41e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00c      	beq.n	800e09a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d109      	bne.n	800e09a <tcp_free_acked_segments+0x8e>
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d106      	bne.n	800e09a <tcp_free_acked_segments+0x8e>
 800e08c:	4b17      	ldr	r3, [pc, #92]	@ (800e0ec <tcp_free_acked_segments+0xe0>)
 800e08e:	f240 4261 	movw	r2, #1121	@ 0x461
 800e092:	491a      	ldr	r1, [pc, #104]	@ (800e0fc <tcp_free_acked_segments+0xf0>)
 800e094:	4817      	ldr	r0, [pc, #92]	@ (800e0f4 <tcp_free_acked_segments+0xe8>)
 800e096:	f006 fb73 	bl	8014780 <iprintf>
  while (seg_list != NULL &&
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d020      	beq.n	800e0e2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fb fafa 	bl	80096a0 <lwip_htonl>
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	891b      	ldrh	r3, [r3, #8]
 800e0b2:	461d      	mov	r5, r3
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	899b      	ldrh	r3, [r3, #12]
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fb fad9 	bl	8009674 <lwip_htons>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	f003 0303 	and.w	r3, r3, #3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <tcp_free_acked_segments+0xc6>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e000      	b.n	800e0d4 <tcp_free_acked_segments+0xc8>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	442b      	add	r3, r5
 800e0d6:	18e2      	adds	r2, r4, r3
 800e0d8:	4b09      	ldr	r3, [pc, #36]	@ (800e100 <tcp_free_acked_segments+0xf4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	dd9c      	ble.n	800e01c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e0e2:	68bb      	ldr	r3, [r7, #8]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3718      	adds	r7, #24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bdb0      	pop	{r4, r5, r7, pc}
 800e0ec:	08016c78 	.word	0x08016c78
 800e0f0:	08016f60 	.word	0x08016f60
 800e0f4:	08016cc4 	.word	0x08016cc4
 800e0f8:	20008158 	.word	0x20008158
 800e0fc:	08016f88 	.word	0x08016f88
 800e100:	20008154 	.word	0x20008154

0800e104 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e104:	b5b0      	push	{r4, r5, r7, lr}
 800e106:	b094      	sub	sp, #80	@ 0x50
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <tcp_receive+0x20>
 800e116:	4b91      	ldr	r3, [pc, #580]	@ (800e35c <tcp_receive+0x258>)
 800e118:	f240 427b 	movw	r2, #1147	@ 0x47b
 800e11c:	4990      	ldr	r1, [pc, #576]	@ (800e360 <tcp_receive+0x25c>)
 800e11e:	4891      	ldr	r0, [pc, #580]	@ (800e364 <tcp_receive+0x260>)
 800e120:	f006 fb2e 	bl	8014780 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	7d1b      	ldrb	r3, [r3, #20]
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d806      	bhi.n	800e13a <tcp_receive+0x36>
 800e12c:	4b8b      	ldr	r3, [pc, #556]	@ (800e35c <tcp_receive+0x258>)
 800e12e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800e132:	498d      	ldr	r1, [pc, #564]	@ (800e368 <tcp_receive+0x264>)
 800e134:	488b      	ldr	r0, [pc, #556]	@ (800e364 <tcp_receive+0x260>)
 800e136:	f006 fb23 	bl	8014780 <iprintf>

  if (flags & TCP_ACK) {
 800e13a:	4b8c      	ldr	r3, [pc, #560]	@ (800e36c <tcp_receive+0x268>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	f003 0310 	and.w	r3, r3, #16
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 8264 	beq.w	800e610 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e14e:	461a      	mov	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e154:	4413      	add	r3, r2
 800e156:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e15c:	4b84      	ldr	r3, [pc, #528]	@ (800e370 <tcp_receive+0x26c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	2b00      	cmp	r3, #0
 800e164:	db1b      	blt.n	800e19e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e16a:	4b81      	ldr	r3, [pc, #516]	@ (800e370 <tcp_receive+0x26c>)
 800e16c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e16e:	429a      	cmp	r2, r3
 800e170:	d106      	bne.n	800e180 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e176:	4b7f      	ldr	r3, [pc, #508]	@ (800e374 <tcp_receive+0x270>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	db0e      	blt.n	800e19e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e184:	4b7b      	ldr	r3, [pc, #492]	@ (800e374 <tcp_receive+0x270>)
 800e186:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e188:	429a      	cmp	r2, r3
 800e18a:	d125      	bne.n	800e1d8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e18c:	4b7a      	ldr	r3, [pc, #488]	@ (800e378 <tcp_receive+0x274>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	89db      	ldrh	r3, [r3, #14]
 800e192:	b29a      	uxth	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d91c      	bls.n	800e1d8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e19e:	4b76      	ldr	r3, [pc, #472]	@ (800e378 <tcp_receive+0x274>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	89db      	ldrh	r3, [r3, #14]
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d205      	bcs.n	800e1c8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800e1c8:	4b69      	ldr	r3, [pc, #420]	@ (800e370 <tcp_receive+0x26c>)
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800e1d0:	4b68      	ldr	r3, [pc, #416]	@ (800e374 <tcp_receive+0x270>)
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e1d8:	4b66      	ldr	r3, [pc, #408]	@ (800e374 <tcp_receive+0x270>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dc58      	bgt.n	800e298 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e1e6:	4b65      	ldr	r3, [pc, #404]	@ (800e37c <tcp_receive+0x278>)
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d14b      	bne.n	800e286 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800e1f8:	4413      	add	r3, r2
 800e1fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d142      	bne.n	800e286 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e206:	2b00      	cmp	r3, #0
 800e208:	db3d      	blt.n	800e286 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e20e:	4b59      	ldr	r3, [pc, #356]	@ (800e374 <tcp_receive+0x270>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	429a      	cmp	r2, r3
 800e214:	d137      	bne.n	800e286 <tcp_receive+0x182>
              found_dupack = 1;
 800e216:	2301      	movs	r3, #1
 800e218:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e220:	2bff      	cmp	r3, #255	@ 0xff
 800e222:	d007      	beq.n	800e234 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e22a:	3301      	adds	r3, #1
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e23a:	2b03      	cmp	r3, #3
 800e23c:	d91b      	bls.n	800e276 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e248:	4413      	add	r3, r2
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e252:	429a      	cmp	r2, r3
 800e254:	d30a      	bcc.n	800e26c <tcp_receive+0x168>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e260:	4413      	add	r3, r2
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e26a:	e004      	b.n	800e276 <tcp_receive+0x172>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e272:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	d902      	bls.n	800e286 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f001 fefb 	bl	801007c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f040 8161 	bne.w	800e550 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e296:	e15b      	b.n	800e550 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e298:	4b36      	ldr	r3, [pc, #216]	@ (800e374 <tcp_receive+0x270>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f2c0 814e 	blt.w	800e546 <tcp_receive+0x442>
 800e2aa:	4b32      	ldr	r3, [pc, #200]	@ (800e374 <tcp_receive+0x270>)
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f300 8146 	bgt.w	800e546 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	8b5b      	ldrh	r3, [r3, #26]
 800e2be:	f003 0304 	and.w	r3, r3, #4
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d010      	beq.n	800e2e8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	8b5b      	ldrh	r3, [r3, #26]
 800e2ca:	f023 0304 	bic.w	r3, r3, #4
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e2f6:	10db      	asrs	r3, r3, #3
 800e2f8:	b21b      	sxth	r3, r3
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e302:	b29b      	uxth	r3, r3
 800e304:	4413      	add	r3, r2
 800e306:	b29b      	uxth	r3, r3
 800e308:	b21a      	sxth	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e310:	4b18      	ldr	r3, [pc, #96]	@ (800e374 <tcp_receive+0x270>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	b29a      	uxth	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800e328:	4b12      	ldr	r3, [pc, #72]	@ (800e374 <tcp_receive+0x270>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7d1b      	ldrb	r3, [r3, #20]
 800e334:	2b03      	cmp	r3, #3
 800e336:	f240 8097 	bls.w	800e468 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e346:	429a      	cmp	r2, r3
 800e348:	d245      	bcs.n	800e3d6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	8b5b      	ldrh	r3, [r3, #26]
 800e34e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e352:	2b00      	cmp	r3, #0
 800e354:	d014      	beq.n	800e380 <tcp_receive+0x27c>
 800e356:	2301      	movs	r3, #1
 800e358:	e013      	b.n	800e382 <tcp_receive+0x27e>
 800e35a:	bf00      	nop
 800e35c:	08016c78 	.word	0x08016c78
 800e360:	08016fa8 	.word	0x08016fa8
 800e364:	08016cc4 	.word	0x08016cc4
 800e368:	08016fc4 	.word	0x08016fc4
 800e36c:	2000815c 	.word	0x2000815c
 800e370:	20008150 	.word	0x20008150
 800e374:	20008154 	.word	0x20008154
 800e378:	20008140 	.word	0x20008140
 800e37c:	2000815a 	.word	0x2000815a
 800e380:	2302      	movs	r3, #2
 800e382:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e386:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e390:	fb12 f303 	smulbb	r3, r2, r3
 800e394:	b29b      	uxth	r3, r3
 800e396:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e398:	4293      	cmp	r3, r2
 800e39a:	bf28      	it	cs
 800e39c:	4613      	movcs	r3, r2
 800e39e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e3a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e3a8:	4413      	add	r3, r2
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d309      	bcc.n	800e3ca <tcp_receive+0x2c6>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e3bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e3be:	4413      	add	r3, r2
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e3c8:	e04e      	b.n	800e468 <tcp_receive+0x364>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e3d4:	e048      	b.n	800e468 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e3dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e3de:	4413      	add	r3, r2
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d309      	bcc.n	800e400 <tcp_receive+0x2fc>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e3f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e3f4:	4413      	add	r3, r2
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e3fe:	e004      	b.n	800e40a <tcp_receive+0x306>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e406:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e416:	429a      	cmp	r2, r3
 800e418:	d326      	bcc.n	800e468 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e426:	1ad3      	subs	r3, r2, r3
 800e428:	b29a      	uxth	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e43a:	4413      	add	r3, r2
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e444:	429a      	cmp	r2, r3
 800e446:	d30a      	bcc.n	800e45e <tcp_receive+0x35a>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e452:	4413      	add	r3, r2
 800e454:	b29a      	uxth	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e45c:	e004      	b.n	800e468 <tcp_receive+0x364>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e464:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e470:	4a98      	ldr	r2, [pc, #608]	@ (800e6d4 <tcp_receive+0x5d0>)
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff fdca 	bl	800e00c <tcp_free_acked_segments>
 800e478:	4602      	mov	r2, r0
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e486:	4a94      	ldr	r2, [pc, #592]	@ (800e6d8 <tcp_receive+0x5d4>)
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f7ff fdbf 	bl	800e00c <tcp_free_acked_segments>
 800e48e:	4602      	mov	r2, r0
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d104      	bne.n	800e4a6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e4a2:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e4a4:	e002      	b.n	800e4ac <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d103      	bne.n	800e4c2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800e4c8:	4b84      	ldr	r3, [pc, #528]	@ (800e6dc <tcp_receive+0x5d8>)
 800e4ca:	881b      	ldrh	r3, [r3, #0]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	8b5b      	ldrh	r3, [r3, #26]
 800e4da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d035      	beq.n	800e54e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d118      	bne.n	800e51c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00c      	beq.n	800e50c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fb f8ce 	bl	80096a0 <lwip_htonl>
 800e504:	4603      	mov	r3, r0
 800e506:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e508:	2b00      	cmp	r3, #0
 800e50a:	dc20      	bgt.n	800e54e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	8b5b      	ldrh	r3, [r3, #26]
 800e510:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e514:	b29a      	uxth	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e51a:	e018      	b.n	800e54e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e524:	691b      	ldr	r3, [r3, #16]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fb f8b9 	bl	80096a0 <lwip_htonl>
 800e52e:	4603      	mov	r3, r0
 800e530:	1ae3      	subs	r3, r4, r3
 800e532:	2b00      	cmp	r3, #0
 800e534:	dc0b      	bgt.n	800e54e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	8b5b      	ldrh	r3, [r3, #26]
 800e53a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e53e:	b29a      	uxth	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e544:	e003      	b.n	800e54e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f001 ff84 	bl	8010454 <tcp_send_empty_ack>
 800e54c:	e000      	b.n	800e550 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e54e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e554:	2b00      	cmp	r3, #0
 800e556:	d05b      	beq.n	800e610 <tcp_receive+0x50c>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e55c:	4b60      	ldr	r3, [pc, #384]	@ (800e6e0 <tcp_receive+0x5dc>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	1ad3      	subs	r3, r2, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	da54      	bge.n	800e610 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e566:	4b5f      	ldr	r3, [pc, #380]	@ (800e6e4 <tcp_receive+0x5e0>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e570:	b29b      	uxth	r3, r3
 800e572:	1ad3      	subs	r3, r2, r3
 800e574:	b29b      	uxth	r3, r3
 800e576:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e57a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e584:	10db      	asrs	r3, r3, #3
 800e586:	b21b      	sxth	r3, r3
 800e588:	b29b      	uxth	r3, r3
 800e58a:	1ad3      	subs	r3, r2, r3
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e598:	b29a      	uxth	r2, r3
 800e59a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e59e:	4413      	add	r3, r2
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	b21a      	sxth	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800e5a8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	da05      	bge.n	800e5bc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e5b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e5b4:	425b      	negs	r3, r3
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e5bc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e5c6:	109b      	asrs	r3, r3, #2
 800e5c8:	b21b      	sxth	r3, r3
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e5e0:	4413      	add	r3, r2
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	b21a      	sxth	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e5f0:	10db      	asrs	r3, r3, #3
 800e5f2:	b21b      	sxth	r3, r3
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	4413      	add	r3, r2
 800e600:	b29b      	uxth	r3, r3
 800e602:	b21a      	sxth	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e610:	4b35      	ldr	r3, [pc, #212]	@ (800e6e8 <tcp_receive+0x5e4>)
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	f000 84df 	beq.w	800efd8 <tcp_receive+0xed4>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	7d1b      	ldrb	r3, [r3, #20]
 800e61e:	2b06      	cmp	r3, #6
 800e620:	f200 84da 	bhi.w	800efd8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e628:	4b30      	ldr	r3, [pc, #192]	@ (800e6ec <tcp_receive+0x5e8>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	3b01      	subs	r3, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	f2c0 808f 	blt.w	800e754 <tcp_receive+0x650>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e63a:	4b2b      	ldr	r3, [pc, #172]	@ (800e6e8 <tcp_receive+0x5e4>)
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	4619      	mov	r1, r3
 800e640:	4b2a      	ldr	r3, [pc, #168]	@ (800e6ec <tcp_receive+0x5e8>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	440b      	add	r3, r1
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	3301      	adds	r3, #1
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f300 8082 	bgt.w	800e754 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e650:	4b27      	ldr	r3, [pc, #156]	@ (800e6f0 <tcp_receive+0x5ec>)
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e65a:	4b24      	ldr	r3, [pc, #144]	@ (800e6ec <tcp_receive+0x5e8>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	1ad3      	subs	r3, r2, r3
 800e660:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e662:	4b23      	ldr	r3, [pc, #140]	@ (800e6f0 <tcp_receive+0x5ec>)
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d106      	bne.n	800e678 <tcp_receive+0x574>
 800e66a:	4b22      	ldr	r3, [pc, #136]	@ (800e6f4 <tcp_receive+0x5f0>)
 800e66c:	f240 5294 	movw	r2, #1428	@ 0x594
 800e670:	4921      	ldr	r1, [pc, #132]	@ (800e6f8 <tcp_receive+0x5f4>)
 800e672:	4822      	ldr	r0, [pc, #136]	@ (800e6fc <tcp_receive+0x5f8>)
 800e674:	f006 f884 	bl	8014780 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e67e:	4293      	cmp	r3, r2
 800e680:	d906      	bls.n	800e690 <tcp_receive+0x58c>
 800e682:	4b1c      	ldr	r3, [pc, #112]	@ (800e6f4 <tcp_receive+0x5f0>)
 800e684:	f240 5295 	movw	r2, #1429	@ 0x595
 800e688:	491d      	ldr	r1, [pc, #116]	@ (800e700 <tcp_receive+0x5fc>)
 800e68a:	481c      	ldr	r0, [pc, #112]	@ (800e6fc <tcp_receive+0x5f8>)
 800e68c:	f006 f878 	bl	8014780 <iprintf>
      off = (u16_t)off32;
 800e690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e692:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e696:	4b16      	ldr	r3, [pc, #88]	@ (800e6f0 <tcp_receive+0x5ec>)
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	891b      	ldrh	r3, [r3, #8]
 800e69c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d906      	bls.n	800e6b2 <tcp_receive+0x5ae>
 800e6a4:	4b13      	ldr	r3, [pc, #76]	@ (800e6f4 <tcp_receive+0x5f0>)
 800e6a6:	f240 5297 	movw	r2, #1431	@ 0x597
 800e6aa:	4916      	ldr	r1, [pc, #88]	@ (800e704 <tcp_receive+0x600>)
 800e6ac:	4813      	ldr	r0, [pc, #76]	@ (800e6fc <tcp_receive+0x5f8>)
 800e6ae:	f006 f867 	bl	8014780 <iprintf>
      inseg.len -= off;
 800e6b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e6f0 <tcp_receive+0x5ec>)
 800e6b4:	891a      	ldrh	r2, [r3, #8]
 800e6b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	4b0c      	ldr	r3, [pc, #48]	@ (800e6f0 <tcp_receive+0x5ec>)
 800e6c0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e6f0 <tcp_receive+0x5ec>)
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	891a      	ldrh	r2, [r3, #8]
 800e6c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800e6d0:	e02a      	b.n	800e728 <tcp_receive+0x624>
 800e6d2:	bf00      	nop
 800e6d4:	08016fe0 	.word	0x08016fe0
 800e6d8:	08016fe8 	.word	0x08016fe8
 800e6dc:	20008158 	.word	0x20008158
 800e6e0:	20008154 	.word	0x20008154
 800e6e4:	20008114 	.word	0x20008114
 800e6e8:	2000815a 	.word	0x2000815a
 800e6ec:	20008150 	.word	0x20008150
 800e6f0:	2000812c 	.word	0x2000812c
 800e6f4:	08016c78 	.word	0x08016c78
 800e6f8:	08016ff0 	.word	0x08016ff0
 800e6fc:	08016cc4 	.word	0x08016cc4
 800e700:	08017000 	.word	0x08017000
 800e704:	08017010 	.word	0x08017010
        off -= p->len;
 800e708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e70a:	895b      	ldrh	r3, [r3, #10]
 800e70c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e718:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e71a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e71c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e71e:	2200      	movs	r2, #0
 800e720:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800e728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e72a:	895b      	ldrh	r3, [r3, #10]
 800e72c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e730:	429a      	cmp	r2, r3
 800e732:	d8e9      	bhi.n	800e708 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e734:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e738:	4619      	mov	r1, r3
 800e73a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e73c:	f7fc fb64 	bl	800ae08 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e744:	4a90      	ldr	r2, [pc, #576]	@ (800e988 <tcp_receive+0x884>)
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	4b90      	ldr	r3, [pc, #576]	@ (800e98c <tcp_receive+0x888>)
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	4a8e      	ldr	r2, [pc, #568]	@ (800e988 <tcp_receive+0x884>)
 800e74e:	6812      	ldr	r2, [r2, #0]
 800e750:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e752:	e00d      	b.n	800e770 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e754:	4b8c      	ldr	r3, [pc, #560]	@ (800e988 <tcp_receive+0x884>)
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	da06      	bge.n	800e770 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	8b5b      	ldrh	r3, [r3, #26]
 800e766:	f043 0302 	orr.w	r3, r3, #2
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e770:	4b85      	ldr	r3, [pc, #532]	@ (800e988 <tcp_receive+0x884>)
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f2c0 8427 	blt.w	800efce <tcp_receive+0xeca>
 800e780:	4b81      	ldr	r3, [pc, #516]	@ (800e988 <tcp_receive+0x884>)
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e788:	6879      	ldr	r1, [r7, #4]
 800e78a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e78c:	440b      	add	r3, r1
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	3301      	adds	r3, #1
 800e792:	2b00      	cmp	r3, #0
 800e794:	f300 841b 	bgt.w	800efce <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e79c:	4b7a      	ldr	r3, [pc, #488]	@ (800e988 <tcp_receive+0x884>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	f040 8298 	bne.w	800ecd6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e7a6:	4b79      	ldr	r3, [pc, #484]	@ (800e98c <tcp_receive+0x888>)
 800e7a8:	891c      	ldrh	r4, [r3, #8]
 800e7aa:	4b78      	ldr	r3, [pc, #480]	@ (800e98c <tcp_receive+0x888>)
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	899b      	ldrh	r3, [r3, #12]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fa ff5e 	bl	8009674 <lwip_htons>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	f003 0303 	and.w	r3, r3, #3
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d001      	beq.n	800e7c8 <tcp_receive+0x6c4>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e000      	b.n	800e7ca <tcp_receive+0x6c6>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	4423      	add	r3, r4
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	4b70      	ldr	r3, [pc, #448]	@ (800e990 <tcp_receive+0x88c>)
 800e7d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e7d6:	4b6e      	ldr	r3, [pc, #440]	@ (800e990 <tcp_receive+0x88c>)
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d274      	bcs.n	800e8c8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e7de:	4b6b      	ldr	r3, [pc, #428]	@ (800e98c <tcp_receive+0x888>)
 800e7e0:	691b      	ldr	r3, [r3, #16]
 800e7e2:	899b      	ldrh	r3, [r3, #12]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fa ff44 	bl	8009674 <lwip_htons>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	f003 0301 	and.w	r3, r3, #1
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d01e      	beq.n	800e836 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e7f8:	4b64      	ldr	r3, [pc, #400]	@ (800e98c <tcp_receive+0x888>)
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	899b      	ldrh	r3, [r3, #12]
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	b21b      	sxth	r3, r3
 800e802:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e806:	b21c      	sxth	r4, r3
 800e808:	4b60      	ldr	r3, [pc, #384]	@ (800e98c <tcp_receive+0x888>)
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	899b      	ldrh	r3, [r3, #12]
 800e80e:	b29b      	uxth	r3, r3
 800e810:	4618      	mov	r0, r3
 800e812:	f7fa ff2f 	bl	8009674 <lwip_htons>
 800e816:	4603      	mov	r3, r0
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e81e:	b29b      	uxth	r3, r3
 800e820:	4618      	mov	r0, r3
 800e822:	f7fa ff27 	bl	8009674 <lwip_htons>
 800e826:	4603      	mov	r3, r0
 800e828:	b21b      	sxth	r3, r3
 800e82a:	4323      	orrs	r3, r4
 800e82c:	b21a      	sxth	r2, r3
 800e82e:	4b57      	ldr	r3, [pc, #348]	@ (800e98c <tcp_receive+0x888>)
 800e830:	691b      	ldr	r3, [r3, #16]
 800e832:	b292      	uxth	r2, r2
 800e834:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e83a:	4b54      	ldr	r3, [pc, #336]	@ (800e98c <tcp_receive+0x888>)
 800e83c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e83e:	4b53      	ldr	r3, [pc, #332]	@ (800e98c <tcp_receive+0x888>)
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	899b      	ldrh	r3, [r3, #12]
 800e844:	b29b      	uxth	r3, r3
 800e846:	4618      	mov	r0, r3
 800e848:	f7fa ff14 	bl	8009674 <lwip_htons>
 800e84c:	4603      	mov	r3, r0
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	f003 0302 	and.w	r3, r3, #2
 800e854:	2b00      	cmp	r3, #0
 800e856:	d005      	beq.n	800e864 <tcp_receive+0x760>
            inseg.len -= 1;
 800e858:	4b4c      	ldr	r3, [pc, #304]	@ (800e98c <tcp_receive+0x888>)
 800e85a:	891b      	ldrh	r3, [r3, #8]
 800e85c:	3b01      	subs	r3, #1
 800e85e:	b29a      	uxth	r2, r3
 800e860:	4b4a      	ldr	r3, [pc, #296]	@ (800e98c <tcp_receive+0x888>)
 800e862:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e864:	4b49      	ldr	r3, [pc, #292]	@ (800e98c <tcp_receive+0x888>)
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	4a48      	ldr	r2, [pc, #288]	@ (800e98c <tcp_receive+0x888>)
 800e86a:	8912      	ldrh	r2, [r2, #8]
 800e86c:	4611      	mov	r1, r2
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fc f9ca 	bl	800ac08 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e874:	4b45      	ldr	r3, [pc, #276]	@ (800e98c <tcp_receive+0x888>)
 800e876:	891c      	ldrh	r4, [r3, #8]
 800e878:	4b44      	ldr	r3, [pc, #272]	@ (800e98c <tcp_receive+0x888>)
 800e87a:	691b      	ldr	r3, [r3, #16]
 800e87c:	899b      	ldrh	r3, [r3, #12]
 800e87e:	b29b      	uxth	r3, r3
 800e880:	4618      	mov	r0, r3
 800e882:	f7fa fef7 	bl	8009674 <lwip_htons>
 800e886:	4603      	mov	r3, r0
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	f003 0303 	and.w	r3, r3, #3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d001      	beq.n	800e896 <tcp_receive+0x792>
 800e892:	2301      	movs	r3, #1
 800e894:	e000      	b.n	800e898 <tcp_receive+0x794>
 800e896:	2300      	movs	r3, #0
 800e898:	4423      	add	r3, r4
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	4b3c      	ldr	r3, [pc, #240]	@ (800e990 <tcp_receive+0x88c>)
 800e89e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e8a0:	4b3b      	ldr	r3, [pc, #236]	@ (800e990 <tcp_receive+0x88c>)
 800e8a2:	881b      	ldrh	r3, [r3, #0]
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	4b38      	ldr	r3, [pc, #224]	@ (800e988 <tcp_receive+0x884>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	441a      	add	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8b0:	6879      	ldr	r1, [r7, #4]
 800e8b2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e8b4:	440b      	add	r3, r1
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d006      	beq.n	800e8c8 <tcp_receive+0x7c4>
 800e8ba:	4b36      	ldr	r3, [pc, #216]	@ (800e994 <tcp_receive+0x890>)
 800e8bc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800e8c0:	4935      	ldr	r1, [pc, #212]	@ (800e998 <tcp_receive+0x894>)
 800e8c2:	4836      	ldr	r0, [pc, #216]	@ (800e99c <tcp_receive+0x898>)
 800e8c4:	f005 ff5c 	bl	8014780 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f000 80e6 	beq.w	800ea9e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e8d2:	4b2e      	ldr	r3, [pc, #184]	@ (800e98c <tcp_receive+0x888>)
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	899b      	ldrh	r3, [r3, #12]
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fa feca 	bl	8009674 <lwip_htons>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	f003 0301 	and.w	r3, r3, #1
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d010      	beq.n	800e90e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e8ec:	e00a      	b.n	800e904 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8f2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f7fd fd8d 	bl	800c41e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1f0      	bne.n	800e8ee <tcp_receive+0x7ea>
 800e90c:	e0c7      	b.n	800ea9e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e912:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e914:	e051      	b.n	800e9ba <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	899b      	ldrh	r3, [r3, #12]
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fa fea8 	bl	8009674 <lwip_htons>
 800e924:	4603      	mov	r3, r0
 800e926:	b2db      	uxtb	r3, r3
 800e928:	f003 0301 	and.w	r3, r3, #1
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d03c      	beq.n	800e9aa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e930:	4b16      	ldr	r3, [pc, #88]	@ (800e98c <tcp_receive+0x888>)
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	899b      	ldrh	r3, [r3, #12]
 800e936:	b29b      	uxth	r3, r3
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fa fe9b 	bl	8009674 <lwip_htons>
 800e93e:	4603      	mov	r3, r0
 800e940:	b2db      	uxtb	r3, r3
 800e942:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e946:	2b00      	cmp	r3, #0
 800e948:	d12f      	bne.n	800e9aa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e94a:	4b10      	ldr	r3, [pc, #64]	@ (800e98c <tcp_receive+0x888>)
 800e94c:	691b      	ldr	r3, [r3, #16]
 800e94e:	899b      	ldrh	r3, [r3, #12]
 800e950:	b29c      	uxth	r4, r3
 800e952:	2001      	movs	r0, #1
 800e954:	f7fa fe8e 	bl	8009674 <lwip_htons>
 800e958:	4603      	mov	r3, r0
 800e95a:	461a      	mov	r2, r3
 800e95c:	4b0b      	ldr	r3, [pc, #44]	@ (800e98c <tcp_receive+0x888>)
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	4322      	orrs	r2, r4
 800e962:	b292      	uxth	r2, r2
 800e964:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e966:	4b09      	ldr	r3, [pc, #36]	@ (800e98c <tcp_receive+0x888>)
 800e968:	891c      	ldrh	r4, [r3, #8]
 800e96a:	4b08      	ldr	r3, [pc, #32]	@ (800e98c <tcp_receive+0x888>)
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	899b      	ldrh	r3, [r3, #12]
 800e970:	b29b      	uxth	r3, r3
 800e972:	4618      	mov	r0, r3
 800e974:	f7fa fe7e 	bl	8009674 <lwip_htons>
 800e978:	4603      	mov	r3, r0
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	f003 0303 	and.w	r3, r3, #3
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00d      	beq.n	800e9a0 <tcp_receive+0x89c>
 800e984:	2301      	movs	r3, #1
 800e986:	e00c      	b.n	800e9a2 <tcp_receive+0x89e>
 800e988:	20008150 	.word	0x20008150
 800e98c:	2000812c 	.word	0x2000812c
 800e990:	2000815a 	.word	0x2000815a
 800e994:	08016c78 	.word	0x08016c78
 800e998:	08017020 	.word	0x08017020
 800e99c:	08016cc4 	.word	0x08016cc4
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4423      	add	r3, r4
 800e9a4:	b29a      	uxth	r2, r3
 800e9a6:	4b98      	ldr	r3, [pc, #608]	@ (800ec08 <tcp_receive+0xb04>)
 800e9a8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9ac:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800e9b4:	6938      	ldr	r0, [r7, #16]
 800e9b6:	f7fd fd32 	bl	800c41e <tcp_seg_free>
            while (next &&
 800e9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00e      	beq.n	800e9de <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e9c0:	4b91      	ldr	r3, [pc, #580]	@ (800ec08 <tcp_receive+0xb04>)
 800e9c2:	881b      	ldrh	r3, [r3, #0]
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	4b91      	ldr	r3, [pc, #580]	@ (800ec0c <tcp_receive+0xb08>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	441a      	add	r2, r3
 800e9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e9d4:	8909      	ldrh	r1, [r1, #8]
 800e9d6:	440b      	add	r3, r1
 800e9d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	da9b      	bge.n	800e916 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d059      	beq.n	800ea98 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e9e4:	4b88      	ldr	r3, [pc, #544]	@ (800ec08 <tcp_receive+0xb04>)
 800e9e6:	881b      	ldrh	r3, [r3, #0]
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	4b88      	ldr	r3, [pc, #544]	@ (800ec0c <tcp_receive+0xb08>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	441a      	add	r2, r3
 800e9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9f2:	691b      	ldr	r3, [r3, #16]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	dd4d      	ble.n	800ea98 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9fe:	691b      	ldr	r3, [r3, #16]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	4b81      	ldr	r3, [pc, #516]	@ (800ec0c <tcp_receive+0xb08>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	4b80      	ldr	r3, [pc, #512]	@ (800ec10 <tcp_receive+0xb0c>)
 800ea10:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea12:	4b7f      	ldr	r3, [pc, #508]	@ (800ec10 <tcp_receive+0xb0c>)
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	899b      	ldrh	r3, [r3, #12]
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fa fe2a 	bl	8009674 <lwip_htons>
 800ea20:	4603      	mov	r3, r0
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	f003 0302 	and.w	r3, r3, #2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d005      	beq.n	800ea38 <tcp_receive+0x934>
                inseg.len -= 1;
 800ea2c:	4b78      	ldr	r3, [pc, #480]	@ (800ec10 <tcp_receive+0xb0c>)
 800ea2e:	891b      	ldrh	r3, [r3, #8]
 800ea30:	3b01      	subs	r3, #1
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	4b76      	ldr	r3, [pc, #472]	@ (800ec10 <tcp_receive+0xb0c>)
 800ea36:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ea38:	4b75      	ldr	r3, [pc, #468]	@ (800ec10 <tcp_receive+0xb0c>)
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	4a74      	ldr	r2, [pc, #464]	@ (800ec10 <tcp_receive+0xb0c>)
 800ea3e:	8912      	ldrh	r2, [r2, #8]
 800ea40:	4611      	mov	r1, r2
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fc f8e0 	bl	800ac08 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ea48:	4b71      	ldr	r3, [pc, #452]	@ (800ec10 <tcp_receive+0xb0c>)
 800ea4a:	891c      	ldrh	r4, [r3, #8]
 800ea4c:	4b70      	ldr	r3, [pc, #448]	@ (800ec10 <tcp_receive+0xb0c>)
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	899b      	ldrh	r3, [r3, #12]
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fa fe0d 	bl	8009674 <lwip_htons>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	f003 0303 	and.w	r3, r3, #3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d001      	beq.n	800ea6a <tcp_receive+0x966>
 800ea66:	2301      	movs	r3, #1
 800ea68:	e000      	b.n	800ea6c <tcp_receive+0x968>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	4423      	add	r3, r4
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	4b65      	ldr	r3, [pc, #404]	@ (800ec08 <tcp_receive+0xb04>)
 800ea72:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ea74:	4b64      	ldr	r3, [pc, #400]	@ (800ec08 <tcp_receive+0xb04>)
 800ea76:	881b      	ldrh	r3, [r3, #0]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	4b64      	ldr	r3, [pc, #400]	@ (800ec0c <tcp_receive+0xb08>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	441a      	add	r2, r3
 800ea80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea82:	691b      	ldr	r3, [r3, #16]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d006      	beq.n	800ea98 <tcp_receive+0x994>
 800ea8a:	4b62      	ldr	r3, [pc, #392]	@ (800ec14 <tcp_receive+0xb10>)
 800ea8c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ea90:	4961      	ldr	r1, [pc, #388]	@ (800ec18 <tcp_receive+0xb14>)
 800ea92:	4862      	ldr	r0, [pc, #392]	@ (800ec1c <tcp_receive+0xb18>)
 800ea94:	f005 fe74 	bl	8014780 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ea9c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ea9e:	4b5a      	ldr	r3, [pc, #360]	@ (800ec08 <tcp_receive+0xb04>)
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	4b59      	ldr	r3, [pc, #356]	@ (800ec0c <tcp_receive+0xb08>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	441a      	add	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800eab2:	4b55      	ldr	r3, [pc, #340]	@ (800ec08 <tcp_receive+0xb04>)
 800eab4:	881b      	ldrh	r3, [r3, #0]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d206      	bcs.n	800eac8 <tcp_receive+0x9c4>
 800eaba:	4b56      	ldr	r3, [pc, #344]	@ (800ec14 <tcp_receive+0xb10>)
 800eabc:	f240 6207 	movw	r2, #1543	@ 0x607
 800eac0:	4957      	ldr	r1, [pc, #348]	@ (800ec20 <tcp_receive+0xb1c>)
 800eac2:	4856      	ldr	r0, [pc, #344]	@ (800ec1c <tcp_receive+0xb18>)
 800eac4:	f005 fe5c 	bl	8014780 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800eacc:	4b4e      	ldr	r3, [pc, #312]	@ (800ec08 <tcp_receive+0xb04>)
 800eace:	881b      	ldrh	r3, [r3, #0]
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7fc ffbf 	bl	800ba5c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800eade:	4b4c      	ldr	r3, [pc, #304]	@ (800ec10 <tcp_receive+0xb0c>)
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	891b      	ldrh	r3, [r3, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d006      	beq.n	800eaf6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800eae8:	4b49      	ldr	r3, [pc, #292]	@ (800ec10 <tcp_receive+0xb0c>)
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	4a4d      	ldr	r2, [pc, #308]	@ (800ec24 <tcp_receive+0xb20>)
 800eaee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800eaf0:	4b47      	ldr	r3, [pc, #284]	@ (800ec10 <tcp_receive+0xb0c>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eaf6:	4b46      	ldr	r3, [pc, #280]	@ (800ec10 <tcp_receive+0xb0c>)
 800eaf8:	691b      	ldr	r3, [r3, #16]
 800eafa:	899b      	ldrh	r3, [r3, #12]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fa fdb8 	bl	8009674 <lwip_htons>
 800eb04:	4603      	mov	r3, r0
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	f003 0301 	and.w	r3, r3, #1
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 80b8 	beq.w	800ec82 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800eb12:	4b45      	ldr	r3, [pc, #276]	@ (800ec28 <tcp_receive+0xb24>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f043 0320 	orr.w	r3, r3, #32
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	4b42      	ldr	r3, [pc, #264]	@ (800ec28 <tcp_receive+0xb24>)
 800eb1e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800eb20:	e0af      	b.n	800ec82 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb26:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb2c:	691b      	ldr	r3, [r3, #16]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	4a36      	ldr	r2, [pc, #216]	@ (800ec0c <tcp_receive+0xb08>)
 800eb32:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	891b      	ldrh	r3, [r3, #8]
 800eb38:	461c      	mov	r4, r3
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	899b      	ldrh	r3, [r3, #12]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fa fd96 	bl	8009674 <lwip_htons>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	f003 0303 	and.w	r3, r3, #3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <tcp_receive+0xa54>
 800eb54:	2301      	movs	r3, #1
 800eb56:	e000      	b.n	800eb5a <tcp_receive+0xa56>
 800eb58:	2300      	movs	r3, #0
 800eb5a:	191a      	adds	r2, r3, r4
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb60:	441a      	add	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb6a:	461c      	mov	r4, r3
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	891b      	ldrh	r3, [r3, #8]
 800eb70:	461d      	mov	r5, r3
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	899b      	ldrh	r3, [r3, #12]
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fa fd7a 	bl	8009674 <lwip_htons>
 800eb80:	4603      	mov	r3, r0
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	f003 0303 	and.w	r3, r3, #3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <tcp_receive+0xa8c>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e000      	b.n	800eb92 <tcp_receive+0xa8e>
 800eb90:	2300      	movs	r3, #0
 800eb92:	442b      	add	r3, r5
 800eb94:	429c      	cmp	r4, r3
 800eb96:	d206      	bcs.n	800eba6 <tcp_receive+0xaa2>
 800eb98:	4b1e      	ldr	r3, [pc, #120]	@ (800ec14 <tcp_receive+0xb10>)
 800eb9a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800eb9e:	4923      	ldr	r1, [pc, #140]	@ (800ec2c <tcp_receive+0xb28>)
 800eba0:	481e      	ldr	r0, [pc, #120]	@ (800ec1c <tcp_receive+0xb18>)
 800eba2:	f005 fded 	bl	8014780 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	891b      	ldrh	r3, [r3, #8]
 800ebaa:	461c      	mov	r4, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	899b      	ldrh	r3, [r3, #12]
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fa fd5d 	bl	8009674 <lwip_htons>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	f003 0303 	and.w	r3, r3, #3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d001      	beq.n	800ebca <tcp_receive+0xac6>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e000      	b.n	800ebcc <tcp_receive+0xac8>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	1919      	adds	r1, r3, r4
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ebd2:	b28b      	uxth	r3, r1
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7fc ff3d 	bl	800ba5c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	891b      	ldrh	r3, [r3, #8]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d028      	beq.n	800ec3e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ebec:	4b0d      	ldr	r3, [pc, #52]	@ (800ec24 <tcp_receive+0xb20>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d01d      	beq.n	800ec30 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ebf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ec24 <tcp_receive+0xb20>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	4610      	mov	r0, r2
 800ec00:	f7fc fa4a 	bl	800b098 <pbuf_cat>
 800ec04:	e018      	b.n	800ec38 <tcp_receive+0xb34>
 800ec06:	bf00      	nop
 800ec08:	2000815a 	.word	0x2000815a
 800ec0c:	20008150 	.word	0x20008150
 800ec10:	2000812c 	.word	0x2000812c
 800ec14:	08016c78 	.word	0x08016c78
 800ec18:	08017058 	.word	0x08017058
 800ec1c:	08016cc4 	.word	0x08016cc4
 800ec20:	08017094 	.word	0x08017094
 800ec24:	20008160 	.word	0x20008160
 800ec28:	2000815d 	.word	0x2000815d
 800ec2c:	080170b4 	.word	0x080170b4
            } else {
              recv_data = cseg->p;
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	4a70      	ldr	r2, [pc, #448]	@ (800edf8 <tcp_receive+0xcf4>)
 800ec36:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	691b      	ldr	r3, [r3, #16]
 800ec42:	899b      	ldrh	r3, [r3, #12]
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fa fd14 	bl	8009674 <lwip_htons>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	f003 0301 	and.w	r3, r3, #1
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00d      	beq.n	800ec74 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ec58:	4b68      	ldr	r3, [pc, #416]	@ (800edfc <tcp_receive+0xcf8>)
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	f043 0320 	orr.w	r3, r3, #32
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	4b66      	ldr	r3, [pc, #408]	@ (800edfc <tcp_receive+0xcf8>)
 800ec64:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7d1b      	ldrb	r3, [r3, #20]
 800ec6a:	2b04      	cmp	r3, #4
 800ec6c:	d102      	bne.n	800ec74 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2207      	movs	r2, #7
 800ec72:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800ec7c:	68b8      	ldr	r0, [r7, #8]
 800ec7e:	f7fd fbce 	bl	800c41e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d008      	beq.n	800ec9c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec8e:	691b      	ldr	r3, [r3, #16]
 800ec90:	685a      	ldr	r2, [r3, #4]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800ec96:	429a      	cmp	r2, r3
 800ec98:	f43f af43 	beq.w	800eb22 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	8b5b      	ldrh	r3, [r3, #26]
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00e      	beq.n	800ecc6 <tcp_receive+0xbc2>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	8b5b      	ldrh	r3, [r3, #26]
 800ecac:	f023 0301 	bic.w	r3, r3, #1
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	835a      	strh	r2, [r3, #26]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	8b5b      	ldrh	r3, [r3, #26]
 800ecba:	f043 0302 	orr.w	r3, r3, #2
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ecc4:	e187      	b.n	800efd6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	8b5b      	ldrh	r3, [r3, #26]
 800ecca:	f043 0301 	orr.w	r3, r3, #1
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ecd4:	e17f      	b.n	800efd6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d106      	bne.n	800ecec <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ecde:	4848      	ldr	r0, [pc, #288]	@ (800ee00 <tcp_receive+0xcfc>)
 800ece0:	f7fd fbb6 	bl	800c450 <tcp_seg_copy>
 800ece4:	4602      	mov	r2, r0
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	675a      	str	r2, [r3, #116]	@ 0x74
 800ecea:	e16c      	b.n	800efc6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ecec:	2300      	movs	r3, #0
 800ecee:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ecf6:	e156      	b.n	800efa6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	685a      	ldr	r2, [r3, #4]
 800ecfe:	4b41      	ldr	r3, [pc, #260]	@ (800ee04 <tcp_receive+0xd00>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d11d      	bne.n	800ed42 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ed06:	4b3e      	ldr	r3, [pc, #248]	@ (800ee00 <tcp_receive+0xcfc>)
 800ed08:	891a      	ldrh	r2, [r3, #8]
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed0c:	891b      	ldrh	r3, [r3, #8]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	f240 814e 	bls.w	800efb0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed14:	483a      	ldr	r0, [pc, #232]	@ (800ee00 <tcp_receive+0xcfc>)
 800ed16:	f7fd fb9b 	bl	800c450 <tcp_seg_copy>
 800ed1a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 8148 	beq.w	800efb4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ed24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d003      	beq.n	800ed32 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ed2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed2c:	697a      	ldr	r2, [r7, #20]
 800ed2e:	601a      	str	r2, [r3, #0]
 800ed30:	e002      	b.n	800ed38 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ed38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed3a:	6978      	ldr	r0, [r7, #20]
 800ed3c:	f7ff f8de 	bl	800defc <tcp_oos_insert_segment>
                }
                break;
 800ed40:	e138      	b.n	800efb4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ed42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d117      	bne.n	800ed78 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ed48:	4b2e      	ldr	r3, [pc, #184]	@ (800ee04 <tcp_receive+0xd00>)
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	da57      	bge.n	800ee08 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed58:	4829      	ldr	r0, [pc, #164]	@ (800ee00 <tcp_receive+0xcfc>)
 800ed5a:	f7fd fb79 	bl	800c450 <tcp_seg_copy>
 800ed5e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 8128 	beq.w	800efb8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ed6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed70:	69b8      	ldr	r0, [r7, #24]
 800ed72:	f7ff f8c3 	bl	800defc <tcp_oos_insert_segment>
                  }
                  break;
 800ed76:	e11f      	b.n	800efb8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ed78:	4b22      	ldr	r3, [pc, #136]	@ (800ee04 <tcp_receive+0xd00>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed7e:	691b      	ldr	r3, [r3, #16]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	3b01      	subs	r3, #1
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	db3e      	blt.n	800ee08 <tcp_receive+0xd04>
 800ed8a:	4b1e      	ldr	r3, [pc, #120]	@ (800ee04 <tcp_receive+0xd00>)
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed90:	691b      	ldr	r3, [r3, #16]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	3301      	adds	r3, #1
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	dc35      	bgt.n	800ee08 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed9c:	4818      	ldr	r0, [pc, #96]	@ (800ee00 <tcp_receive+0xcfc>)
 800ed9e:	f7fd fb57 	bl	800c450 <tcp_seg_copy>
 800eda2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 8108 	beq.w	800efbc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800edac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800edb4:	8912      	ldrh	r2, [r2, #8]
 800edb6:	441a      	add	r2, r3
 800edb8:	4b12      	ldr	r3, [pc, #72]	@ (800ee04 <tcp_receive+0xd00>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dd12      	ble.n	800ede8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800edc2:	4b10      	ldr	r3, [pc, #64]	@ (800ee04 <tcp_receive+0xd00>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edca:	691b      	ldr	r3, [r3, #16]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	b29b      	uxth	r3, r3
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edd6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800edd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edda:	685a      	ldr	r2, [r3, #4]
 800eddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edde:	891b      	ldrh	r3, [r3, #8]
 800ede0:	4619      	mov	r1, r3
 800ede2:	4610      	mov	r0, r2
 800ede4:	f7fb ff10 	bl	800ac08 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ede8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edea:	69fa      	ldr	r2, [r7, #28]
 800edec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800edee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800edf0:	69f8      	ldr	r0, [r7, #28]
 800edf2:	f7ff f883 	bl	800defc <tcp_oos_insert_segment>
                  }
                  break;
 800edf6:	e0e1      	b.n	800efbc <tcp_receive+0xeb8>
 800edf8:	20008160 	.word	0x20008160
 800edfc:	2000815d 	.word	0x2000815d
 800ee00:	2000812c 	.word	0x2000812c
 800ee04:	20008150 	.word	0x20008150
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ee08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f040 80c5 	bne.w	800efa0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ee16:	4b7f      	ldr	r3, [pc, #508]	@ (800f014 <tcp_receive+0xf10>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee1c:	691b      	ldr	r3, [r3, #16]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f340 80bc 	ble.w	800efa0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ee28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	899b      	ldrh	r3, [r3, #12]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fa fc1f 	bl	8009674 <lwip_htons>
 800ee36:	4603      	mov	r3, r0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f003 0301 	and.w	r3, r3, #1
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f040 80be 	bne.w	800efc0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ee44:	4874      	ldr	r0, [pc, #464]	@ (800f018 <tcp_receive+0xf14>)
 800ee46:	f7fd fb03 	bl	800c450 <tcp_seg_copy>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee4e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ee50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f000 80b5 	beq.w	800efc4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee62:	8912      	ldrh	r2, [r2, #8]
 800ee64:	441a      	add	r2, r3
 800ee66:	4b6b      	ldr	r3, [pc, #428]	@ (800f014 <tcp_receive+0xf10>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	dd12      	ble.n	800ee96 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ee70:	4b68      	ldr	r3, [pc, #416]	@ (800f014 <tcp_receive+0xf10>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	1ad3      	subs	r3, r2, r3
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee84:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ee86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee88:	685a      	ldr	r2, [r3, #4]
 800ee8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee8c:	891b      	ldrh	r3, [r3, #8]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4610      	mov	r0, r2
 800ee92:	f7fb feb9 	bl	800ac08 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ee96:	4b61      	ldr	r3, [pc, #388]	@ (800f01c <tcp_receive+0xf18>)
 800ee98:	881b      	ldrh	r3, [r3, #0]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	4b5d      	ldr	r3, [pc, #372]	@ (800f014 <tcp_receive+0xf10>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	441a      	add	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea6:	6879      	ldr	r1, [r7, #4]
 800eea8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eeaa:	440b      	add	r3, r1
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f340 8088 	ble.w	800efc4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	691b      	ldr	r3, [r3, #16]
 800eeba:	899b      	ldrh	r3, [r3, #12]
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fa fbd8 	bl	8009674 <lwip_htons>
 800eec4:	4603      	mov	r3, r0
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	f003 0301 	and.w	r3, r3, #1
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d021      	beq.n	800ef14 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800eed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	899b      	ldrh	r3, [r3, #12]
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	b21b      	sxth	r3, r3
 800eedc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800eee0:	b21c      	sxth	r4, r3
 800eee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	899b      	ldrh	r3, [r3, #12]
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fa fbc1 	bl	8009674 <lwip_htons>
 800eef2:	4603      	mov	r3, r0
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fa fbb9 	bl	8009674 <lwip_htons>
 800ef02:	4603      	mov	r3, r0
 800ef04:	b21b      	sxth	r3, r3
 800ef06:	4323      	orrs	r3, r4
 800ef08:	b21a      	sxth	r2, r3
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	b292      	uxth	r2, r2
 800ef12:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef1e:	4413      	add	r3, r2
 800ef20:	b299      	uxth	r1, r3
 800ef22:	4b3c      	ldr	r3, [pc, #240]	@ (800f014 <tcp_receive+0xf10>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	1a8a      	subs	r2, r1, r2
 800ef2e:	b292      	uxth	r2, r2
 800ef30:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ef32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	685a      	ldr	r2, [r3, #4]
 800ef38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	891b      	ldrh	r3, [r3, #8]
 800ef3e:	4619      	mov	r1, r3
 800ef40:	4610      	mov	r0, r2
 800ef42:	f7fb fe61 	bl	800ac08 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ef46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	891c      	ldrh	r4, [r3, #8]
 800ef4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	691b      	ldr	r3, [r3, #16]
 800ef52:	899b      	ldrh	r3, [r3, #12]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fa fb8c 	bl	8009674 <lwip_htons>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	f003 0303 	and.w	r3, r3, #3
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d001      	beq.n	800ef6c <tcp_receive+0xe68>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e000      	b.n	800ef6e <tcp_receive+0xe6a>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	4423      	add	r3, r4
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	4b2a      	ldr	r3, [pc, #168]	@ (800f01c <tcp_receive+0xf18>)
 800ef74:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ef76:	4b29      	ldr	r3, [pc, #164]	@ (800f01c <tcp_receive+0xf18>)
 800ef78:	881b      	ldrh	r3, [r3, #0]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	4b25      	ldr	r3, [pc, #148]	@ (800f014 <tcp_receive+0xf10>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	441a      	add	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef86:	6879      	ldr	r1, [r7, #4]
 800ef88:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ef8a:	440b      	add	r3, r1
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d019      	beq.n	800efc4 <tcp_receive+0xec0>
 800ef90:	4b23      	ldr	r3, [pc, #140]	@ (800f020 <tcp_receive+0xf1c>)
 800ef92:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ef96:	4923      	ldr	r1, [pc, #140]	@ (800f024 <tcp_receive+0xf20>)
 800ef98:	4823      	ldr	r0, [pc, #140]	@ (800f028 <tcp_receive+0xf24>)
 800ef9a:	f005 fbf1 	bl	8014780 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ef9e:	e011      	b.n	800efc4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800efa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800efa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f47f aea5 	bne.w	800ecf8 <tcp_receive+0xbf4>
 800efae:	e00a      	b.n	800efc6 <tcp_receive+0xec2>
                break;
 800efb0:	bf00      	nop
 800efb2:	e008      	b.n	800efc6 <tcp_receive+0xec2>
                break;
 800efb4:	bf00      	nop
 800efb6:	e006      	b.n	800efc6 <tcp_receive+0xec2>
                  break;
 800efb8:	bf00      	nop
 800efba:	e004      	b.n	800efc6 <tcp_receive+0xec2>
                  break;
 800efbc:	bf00      	nop
 800efbe:	e002      	b.n	800efc6 <tcp_receive+0xec2>
                  break;
 800efc0:	bf00      	nop
 800efc2:	e000      	b.n	800efc6 <tcp_receive+0xec2>
                break;
 800efc4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f001 fa44 	bl	8010454 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800efcc:	e003      	b.n	800efd6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f001 fa40 	bl	8010454 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efd4:	e01a      	b.n	800f00c <tcp_receive+0xf08>
 800efd6:	e019      	b.n	800f00c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800efd8:	4b0e      	ldr	r3, [pc, #56]	@ (800f014 <tcp_receive+0xf10>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	db0a      	blt.n	800effc <tcp_receive+0xef8>
 800efe6:	4b0b      	ldr	r3, [pc, #44]	@ (800f014 <tcp_receive+0xf10>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efee:	6879      	ldr	r1, [r7, #4]
 800eff0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eff2:	440b      	add	r3, r1
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	3301      	adds	r3, #1
 800eff8:	2b00      	cmp	r3, #0
 800effa:	dd07      	ble.n	800f00c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	8b5b      	ldrh	r3, [r3, #26]
 800f000:	f043 0302 	orr.w	r3, r3, #2
 800f004:	b29a      	uxth	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f00a:	e7ff      	b.n	800f00c <tcp_receive+0xf08>
 800f00c:	bf00      	nop
 800f00e:	3750      	adds	r7, #80	@ 0x50
 800f010:	46bd      	mov	sp, r7
 800f012:	bdb0      	pop	{r4, r5, r7, pc}
 800f014:	20008150 	.word	0x20008150
 800f018:	2000812c 	.word	0x2000812c
 800f01c:	2000815a 	.word	0x2000815a
 800f020:	08016c78 	.word	0x08016c78
 800f024:	08017020 	.word	0x08017020
 800f028:	08016cc4 	.word	0x08016cc4

0800f02c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f032:	4b15      	ldr	r3, [pc, #84]	@ (800f088 <tcp_get_next_optbyte+0x5c>)
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	1c5a      	adds	r2, r3, #1
 800f038:	b291      	uxth	r1, r2
 800f03a:	4a13      	ldr	r2, [pc, #76]	@ (800f088 <tcp_get_next_optbyte+0x5c>)
 800f03c:	8011      	strh	r1, [r2, #0]
 800f03e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f040:	4b12      	ldr	r3, [pc, #72]	@ (800f08c <tcp_get_next_optbyte+0x60>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d004      	beq.n	800f052 <tcp_get_next_optbyte+0x26>
 800f048:	4b11      	ldr	r3, [pc, #68]	@ (800f090 <tcp_get_next_optbyte+0x64>)
 800f04a:	881b      	ldrh	r3, [r3, #0]
 800f04c:	88fa      	ldrh	r2, [r7, #6]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d208      	bcs.n	800f064 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f052:	4b10      	ldr	r3, [pc, #64]	@ (800f094 <tcp_get_next_optbyte+0x68>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3314      	adds	r3, #20
 800f058:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f05a:	88fb      	ldrh	r3, [r7, #6]
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	4413      	add	r3, r2
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	e00b      	b.n	800f07c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f064:	88fb      	ldrh	r3, [r7, #6]
 800f066:	b2da      	uxtb	r2, r3
 800f068:	4b09      	ldr	r3, [pc, #36]	@ (800f090 <tcp_get_next_optbyte+0x64>)
 800f06a:	881b      	ldrh	r3, [r3, #0]
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f072:	4b06      	ldr	r3, [pc, #24]	@ (800f08c <tcp_get_next_optbyte+0x60>)
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	797b      	ldrb	r3, [r7, #5]
 800f078:	4413      	add	r3, r2
 800f07a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr
 800f088:	2000814c 	.word	0x2000814c
 800f08c:	20008148 	.word	0x20008148
 800f090:	20008146 	.word	0x20008146
 800f094:	20008140 	.word	0x20008140

0800f098 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d106      	bne.n	800f0b4 <tcp_parseopt+0x1c>
 800f0a6:	4b32      	ldr	r3, [pc, #200]	@ (800f170 <tcp_parseopt+0xd8>)
 800f0a8:	f240 727d 	movw	r2, #1917	@ 0x77d
 800f0ac:	4931      	ldr	r1, [pc, #196]	@ (800f174 <tcp_parseopt+0xdc>)
 800f0ae:	4832      	ldr	r0, [pc, #200]	@ (800f178 <tcp_parseopt+0xe0>)
 800f0b0:	f005 fb66 	bl	8014780 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f0b4:	4b31      	ldr	r3, [pc, #196]	@ (800f17c <tcp_parseopt+0xe4>)
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d056      	beq.n	800f16a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f0bc:	4b30      	ldr	r3, [pc, #192]	@ (800f180 <tcp_parseopt+0xe8>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	801a      	strh	r2, [r3, #0]
 800f0c2:	e046      	b.n	800f152 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800f0c4:	f7ff ffb2 	bl	800f02c <tcp_get_next_optbyte>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
 800f0ce:	2b02      	cmp	r3, #2
 800f0d0:	d006      	beq.n	800f0e0 <tcp_parseopt+0x48>
 800f0d2:	2b02      	cmp	r3, #2
 800f0d4:	dc2a      	bgt.n	800f12c <tcp_parseopt+0x94>
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d042      	beq.n	800f160 <tcp_parseopt+0xc8>
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d038      	beq.n	800f150 <tcp_parseopt+0xb8>
 800f0de:	e025      	b.n	800f12c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f0e0:	f7ff ffa4 	bl	800f02c <tcp_get_next_optbyte>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b04      	cmp	r3, #4
 800f0e8:	d13c      	bne.n	800f164 <tcp_parseopt+0xcc>
 800f0ea:	4b25      	ldr	r3, [pc, #148]	@ (800f180 <tcp_parseopt+0xe8>)
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	4a22      	ldr	r2, [pc, #136]	@ (800f17c <tcp_parseopt+0xe4>)
 800f0f2:	8812      	ldrh	r2, [r2, #0]
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	da35      	bge.n	800f164 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f0f8:	f7ff ff98 	bl	800f02c <tcp_get_next_optbyte>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	021b      	lsls	r3, r3, #8
 800f100:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f102:	f7ff ff93 	bl	800f02c <tcp_get_next_optbyte>
 800f106:	4603      	mov	r3, r0
 800f108:	461a      	mov	r2, r3
 800f10a:	89bb      	ldrh	r3, [r7, #12]
 800f10c:	4313      	orrs	r3, r2
 800f10e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f110:	89bb      	ldrh	r3, [r7, #12]
 800f112:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f116:	d804      	bhi.n	800f122 <tcp_parseopt+0x8a>
 800f118:	89bb      	ldrh	r3, [r7, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d001      	beq.n	800f122 <tcp_parseopt+0x8a>
 800f11e:	89ba      	ldrh	r2, [r7, #12]
 800f120:	e001      	b.n	800f126 <tcp_parseopt+0x8e>
 800f122:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800f12a:	e012      	b.n	800f152 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f12c:	f7ff ff7e 	bl	800f02c <tcp_get_next_optbyte>
 800f130:	4603      	mov	r3, r0
 800f132:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f134:	7afb      	ldrb	r3, [r7, #11]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d916      	bls.n	800f168 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f13a:	7afb      	ldrb	r3, [r7, #11]
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	4b10      	ldr	r3, [pc, #64]	@ (800f180 <tcp_parseopt+0xe8>)
 800f140:	881b      	ldrh	r3, [r3, #0]
 800f142:	4413      	add	r3, r2
 800f144:	b29b      	uxth	r3, r3
 800f146:	3b02      	subs	r3, #2
 800f148:	b29a      	uxth	r2, r3
 800f14a:	4b0d      	ldr	r3, [pc, #52]	@ (800f180 <tcp_parseopt+0xe8>)
 800f14c:	801a      	strh	r2, [r3, #0]
 800f14e:	e000      	b.n	800f152 <tcp_parseopt+0xba>
          break;
 800f150:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f152:	4b0b      	ldr	r3, [pc, #44]	@ (800f180 <tcp_parseopt+0xe8>)
 800f154:	881a      	ldrh	r2, [r3, #0]
 800f156:	4b09      	ldr	r3, [pc, #36]	@ (800f17c <tcp_parseopt+0xe4>)
 800f158:	881b      	ldrh	r3, [r3, #0]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d3b2      	bcc.n	800f0c4 <tcp_parseopt+0x2c>
 800f15e:	e004      	b.n	800f16a <tcp_parseopt+0xd2>
          return;
 800f160:	bf00      	nop
 800f162:	e002      	b.n	800f16a <tcp_parseopt+0xd2>
            return;
 800f164:	bf00      	nop
 800f166:	e000      	b.n	800f16a <tcp_parseopt+0xd2>
            return;
 800f168:	bf00      	nop
      }
    }
  }
}
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	08016c78 	.word	0x08016c78
 800f174:	080170dc 	.word	0x080170dc
 800f178:	08016cc4 	.word	0x08016cc4
 800f17c:	20008144 	.word	0x20008144
 800f180:	2000814c 	.word	0x2000814c

0800f184 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f184:	b480      	push	{r7}
 800f186:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f188:	4b05      	ldr	r3, [pc, #20]	@ (800f1a0 <tcp_trigger_input_pcb_close+0x1c>)
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	f043 0310 	orr.w	r3, r3, #16
 800f190:	b2da      	uxtb	r2, r3
 800f192:	4b03      	ldr	r3, [pc, #12]	@ (800f1a0 <tcp_trigger_input_pcb_close+0x1c>)
 800f194:	701a      	strb	r2, [r3, #0]
}
 800f196:	bf00      	nop
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr
 800f1a0:	2000815d 	.word	0x2000815d

0800f1a4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00a      	beq.n	800f1cc <tcp_route+0x28>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	7a1b      	ldrb	r3, [r3, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d006      	beq.n	800f1cc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	7a1b      	ldrb	r3, [r3, #8]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fb fb46 	bl	800a854 <netif_get_by_index>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	e003      	b.n	800f1d4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f003 fc0f 	bl	80129f0 <ip4_route>
 800f1d2:	4603      	mov	r3, r0
  }
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3710      	adds	r7, #16
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f1dc:	b590      	push	{r4, r7, lr}
 800f1de:	b087      	sub	sp, #28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d105      	bne.n	800f1fe <tcp_create_segment+0x22>
 800f1f2:	4b45      	ldr	r3, [pc, #276]	@ (800f308 <tcp_create_segment+0x12c>)
 800f1f4:	22a3      	movs	r2, #163	@ 0xa3
 800f1f6:	4945      	ldr	r1, [pc, #276]	@ (800f30c <tcp_create_segment+0x130>)
 800f1f8:	4845      	ldr	r0, [pc, #276]	@ (800f310 <tcp_create_segment+0x134>)
 800f1fa:	f005 fac1 	bl	8014780 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d105      	bne.n	800f210 <tcp_create_segment+0x34>
 800f204:	4b40      	ldr	r3, [pc, #256]	@ (800f308 <tcp_create_segment+0x12c>)
 800f206:	22a4      	movs	r2, #164	@ 0xa4
 800f208:	4942      	ldr	r1, [pc, #264]	@ (800f314 <tcp_create_segment+0x138>)
 800f20a:	4841      	ldr	r0, [pc, #260]	@ (800f310 <tcp_create_segment+0x134>)
 800f20c:	f005 fab8 	bl	8014780 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f210:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	b2db      	uxtb	r3, r3
 800f218:	f003 0304 	and.w	r3, r3, #4
 800f21c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f21e:	2003      	movs	r0, #3
 800f220:	f7fa fe9c 	bl	8009f5c <memp_malloc>
 800f224:	6138      	str	r0, [r7, #16]
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d104      	bne.n	800f236 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f22c:	68b8      	ldr	r0, [r7, #8]
 800f22e:	f7fb fe71 	bl	800af14 <pbuf_free>
    return NULL;
 800f232:	2300      	movs	r3, #0
 800f234:	e063      	b.n	800f2fe <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f23c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2200      	movs	r2, #0
 800f242:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	891a      	ldrh	r2, [r3, #8]
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
 800f250:	b29b      	uxth	r3, r3
 800f252:	429a      	cmp	r2, r3
 800f254:	d205      	bcs.n	800f262 <tcp_create_segment+0x86>
 800f256:	4b2c      	ldr	r3, [pc, #176]	@ (800f308 <tcp_create_segment+0x12c>)
 800f258:	22b0      	movs	r2, #176	@ 0xb0
 800f25a:	492f      	ldr	r1, [pc, #188]	@ (800f318 <tcp_create_segment+0x13c>)
 800f25c:	482c      	ldr	r0, [pc, #176]	@ (800f310 <tcp_create_segment+0x134>)
 800f25e:	f005 fa8f 	bl	8014780 <iprintf>
  seg->len = p->tot_len - optlen;
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	891a      	ldrh	r2, [r3, #8]
 800f266:	7dfb      	ldrb	r3, [r7, #23]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	2200      	movs	r2, #0
 800f276:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f278:	2114      	movs	r1, #20
 800f27a:	68b8      	ldr	r0, [r7, #8]
 800f27c:	f7fb fdb4 	bl	800ade8 <pbuf_add_header>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d004      	beq.n	800f290 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f286:	6938      	ldr	r0, [r7, #16]
 800f288:	f7fd f8c9 	bl	800c41e <tcp_seg_free>
    return NULL;
 800f28c:	2300      	movs	r3, #0
 800f28e:	e036      	b.n	800f2fe <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	685a      	ldr	r2, [r3, #4]
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	8ada      	ldrh	r2, [r3, #22]
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	691c      	ldr	r4, [r3, #16]
 800f2a2:	4610      	mov	r0, r2
 800f2a4:	f7fa f9e6 	bl	8009674 <lwip_htons>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	8b1a      	ldrh	r2, [r3, #24]
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	691c      	ldr	r4, [r3, #16]
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	f7fa f9dd 	bl	8009674 <lwip_htons>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	691c      	ldr	r4, [r3, #16]
 800f2c2:	6838      	ldr	r0, [r7, #0]
 800f2c4:	f7fa f9ec 	bl	80096a0 <lwip_htonl>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f2cc:	7dfb      	ldrb	r3, [r7, #23]
 800f2ce:	089b      	lsrs	r3, r3, #2
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	3305      	adds	r3, #5
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	031b      	lsls	r3, r3, #12
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	79fb      	ldrb	r3, [r7, #7]
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	691c      	ldr	r4, [r3, #16]
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	f7fa f9c4 	bl	8009674 <lwip_htons>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	749a      	strb	r2, [r3, #18]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	74da      	strb	r2, [r3, #19]
  return seg;
 800f2fc:	693b      	ldr	r3, [r7, #16]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	371c      	adds	r7, #28
 800f302:	46bd      	mov	sp, r7
 800f304:	bd90      	pop	{r4, r7, pc}
 800f306:	bf00      	nop
 800f308:	080170f8 	.word	0x080170f8
 800f30c:	0801712c 	.word	0x0801712c
 800f310:	0801714c 	.word	0x0801714c
 800f314:	08017174 	.word	0x08017174
 800f318:	08017198 	.word	0x08017198

0800f31c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f31c:	b590      	push	{r4, r7, lr}
 800f31e:	b08b      	sub	sp, #44	@ 0x2c
 800f320:	af02      	add	r7, sp, #8
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	460b      	mov	r3, r1
 800f326:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f328:	2300      	movs	r3, #0
 800f32a:	61bb      	str	r3, [r7, #24]
 800f32c:	2300      	movs	r3, #0
 800f32e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f330:	2300      	movs	r3, #0
 800f332:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d106      	bne.n	800f348 <tcp_split_unsent_seg+0x2c>
 800f33a:	4b97      	ldr	r3, [pc, #604]	@ (800f598 <tcp_split_unsent_seg+0x27c>)
 800f33c:	f240 324b 	movw	r2, #843	@ 0x34b
 800f340:	4996      	ldr	r1, [pc, #600]	@ (800f59c <tcp_split_unsent_seg+0x280>)
 800f342:	4897      	ldr	r0, [pc, #604]	@ (800f5a0 <tcp_split_unsent_seg+0x284>)
 800f344:	f005 fa1c 	bl	8014780 <iprintf>

  useg = pcb->unsent;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f34c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d102      	bne.n	800f35a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f358:	e119      	b.n	800f58e <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800f35a:	887b      	ldrh	r3, [r7, #2]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d109      	bne.n	800f374 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f360:	4b8d      	ldr	r3, [pc, #564]	@ (800f598 <tcp_split_unsent_seg+0x27c>)
 800f362:	f240 3253 	movw	r2, #851	@ 0x353
 800f366:	498f      	ldr	r1, [pc, #572]	@ (800f5a4 <tcp_split_unsent_seg+0x288>)
 800f368:	488d      	ldr	r0, [pc, #564]	@ (800f5a0 <tcp_split_unsent_seg+0x284>)
 800f36a:	f005 fa09 	bl	8014780 <iprintf>
    return ERR_VAL;
 800f36e:	f06f 0305 	mvn.w	r3, #5
 800f372:	e10c      	b.n	800f58e <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	891b      	ldrh	r3, [r3, #8]
 800f378:	887a      	ldrh	r2, [r7, #2]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d301      	bcc.n	800f382 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f37e:	2300      	movs	r3, #0
 800f380:	e105      	b.n	800f58e <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f386:	887a      	ldrh	r2, [r7, #2]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d906      	bls.n	800f39a <tcp_split_unsent_seg+0x7e>
 800f38c:	4b82      	ldr	r3, [pc, #520]	@ (800f598 <tcp_split_unsent_seg+0x27c>)
 800f38e:	f240 325b 	movw	r2, #859	@ 0x35b
 800f392:	4985      	ldr	r1, [pc, #532]	@ (800f5a8 <tcp_split_unsent_seg+0x28c>)
 800f394:	4882      	ldr	r0, [pc, #520]	@ (800f5a0 <tcp_split_unsent_seg+0x284>)
 800f396:	f005 f9f3 	bl	8014780 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	891b      	ldrh	r3, [r3, #8]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d106      	bne.n	800f3b0 <tcp_split_unsent_seg+0x94>
 800f3a2:	4b7d      	ldr	r3, [pc, #500]	@ (800f598 <tcp_split_unsent_seg+0x27c>)
 800f3a4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800f3a8:	4980      	ldr	r1, [pc, #512]	@ (800f5ac <tcp_split_unsent_seg+0x290>)
 800f3aa:	487d      	ldr	r0, [pc, #500]	@ (800f5a0 <tcp_split_unsent_seg+0x284>)
 800f3ac:	f005 f9e8 	bl	8014780 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	7b1b      	ldrb	r3, [r3, #12]
 800f3b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f3b6:	7bfb      	ldrb	r3, [r7, #15]
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	f003 0304 	and.w	r3, r3, #4
 800f3c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	891a      	ldrh	r2, [r3, #8]
 800f3c6:	887b      	ldrh	r3, [r7, #2]
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	89bb      	ldrh	r3, [r7, #12]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f3da:	4619      	mov	r1, r3
 800f3dc:	2036      	movs	r0, #54	@ 0x36
 800f3de:	f7fb fab5 	bl	800a94c <pbuf_alloc>
 800f3e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f000 80ba 	beq.w	800f560 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	891a      	ldrh	r2, [r3, #8]
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	891b      	ldrh	r3, [r3, #8]
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	887b      	ldrh	r3, [r7, #2]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	6858      	ldr	r0, [r3, #4]
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	685a      	ldr	r2, [r3, #4]
 800f408:	7bbb      	ldrb	r3, [r7, #14]
 800f40a:	18d1      	adds	r1, r2, r3
 800f40c:	897b      	ldrh	r3, [r7, #10]
 800f40e:	89ba      	ldrh	r2, [r7, #12]
 800f410:	f7fb ff7a 	bl	800b308 <pbuf_copy_partial>
 800f414:	4603      	mov	r3, r0
 800f416:	461a      	mov	r2, r3
 800f418:	89bb      	ldrh	r3, [r7, #12]
 800f41a:	4293      	cmp	r3, r2
 800f41c:	f040 80a2 	bne.w	800f564 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	899b      	ldrh	r3, [r3, #12]
 800f426:	b29b      	uxth	r3, r3
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fa f923 	bl	8009674 <lwip_htons>
 800f42e:	4603      	mov	r3, r0
 800f430:	b2db      	uxtb	r3, r3
 800f432:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f436:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f438:	2300      	movs	r3, #0
 800f43a:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800f43c:	7ffb      	ldrb	r3, [r7, #31]
 800f43e:	f003 0308 	and.w	r3, r3, #8
 800f442:	2b00      	cmp	r3, #0
 800f444:	d007      	beq.n	800f456 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f446:	7ffb      	ldrb	r3, [r7, #31]
 800f448:	f023 0308 	bic.w	r3, r3, #8
 800f44c:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800f44e:	7fbb      	ldrb	r3, [r7, #30]
 800f450:	f043 0308 	orr.w	r3, r3, #8
 800f454:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800f456:	7ffb      	ldrb	r3, [r7, #31]
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d007      	beq.n	800f470 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f460:	7ffb      	ldrb	r3, [r7, #31]
 800f462:	f023 0301 	bic.w	r3, r3, #1
 800f466:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800f468:	7fbb      	ldrb	r3, [r7, #30]
 800f46a:	f043 0301 	orr.w	r3, r3, #1
 800f46e:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	4618      	mov	r0, r3
 800f478:	f7fa f912 	bl	80096a0 <lwip_htonl>
 800f47c:	4602      	mov	r2, r0
 800f47e:	887b      	ldrh	r3, [r7, #2]
 800f480:	18d1      	adds	r1, r2, r3
 800f482:	7fba      	ldrb	r2, [r7, #30]
 800f484:	7bfb      	ldrb	r3, [r7, #15]
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	460b      	mov	r3, r1
 800f48a:	6939      	ldr	r1, [r7, #16]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff fea5 	bl	800f1dc <tcp_create_segment>
 800f492:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800f494:	69bb      	ldr	r3, [r7, #24]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d066      	beq.n	800f568 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fb fdc0 	bl	800b024 <pbuf_clen>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f4ae:	1a9b      	subs	r3, r3, r2
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	6858      	ldr	r0, [r3, #4]
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	891a      	ldrh	r2, [r3, #8]
 800f4c2:	89bb      	ldrh	r3, [r7, #12]
 800f4c4:	1ad3      	subs	r3, r2, r3
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	f7fb fb9d 	bl	800ac08 <pbuf_realloc>
  useg->len -= remainder;
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	891a      	ldrh	r2, [r3, #8]
 800f4d2:	89bb      	ldrh	r3, [r7, #12]
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	899b      	ldrh	r3, [r3, #12]
 800f4e2:	b29c      	uxth	r4, r3
 800f4e4:	7ffb      	ldrb	r3, [r7, #31]
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fa f8c3 	bl	8009674 <lwip_htons>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	691b      	ldr	r3, [r3, #16]
 800f4f6:	4322      	orrs	r2, r4
 800f4f8:	b292      	uxth	r2, r2
 800f4fa:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	2200      	movs	r2, #0
 800f500:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	4618      	mov	r0, r3
 800f508:	f7fb fd8c 	bl	800b024 <pbuf_clen>
 800f50c:	4603      	mov	r3, r0
 800f50e:	461a      	mov	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f516:	4413      	add	r3, r2
 800f518:	b29a      	uxth	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	4618      	mov	r0, r3
 800f526:	f7fb fd7d 	bl	800b024 <pbuf_clen>
 800f52a:	4603      	mov	r3, r0
 800f52c:	461a      	mov	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f534:	4413      	add	r3, r2
 800f536:	b29a      	uxth	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	69ba      	ldr	r2, [r7, #24]
 800f54a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d103      	bne.n	800f55c <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f55c:	2300      	movs	r3, #0
 800f55e:	e016      	b.n	800f58e <tcp_split_unsent_seg+0x272>
    goto memerr;
 800f560:	bf00      	nop
 800f562:	e002      	b.n	800f56a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800f564:	bf00      	nop
 800f566:	e000      	b.n	800f56a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800f568:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d006      	beq.n	800f57e <tcp_split_unsent_seg+0x262>
 800f570:	4b09      	ldr	r3, [pc, #36]	@ (800f598 <tcp_split_unsent_seg+0x27c>)
 800f572:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800f576:	490e      	ldr	r1, [pc, #56]	@ (800f5b0 <tcp_split_unsent_seg+0x294>)
 800f578:	4809      	ldr	r0, [pc, #36]	@ (800f5a0 <tcp_split_unsent_seg+0x284>)
 800f57a:	f005 f901 	bl	8014780 <iprintf>
  if (p != NULL) {
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d002      	beq.n	800f58a <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800f584:	6938      	ldr	r0, [r7, #16]
 800f586:	f7fb fcc5 	bl	800af14 <pbuf_free>
  }

  return ERR_MEM;
 800f58a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3724      	adds	r7, #36	@ 0x24
 800f592:	46bd      	mov	sp, r7
 800f594:	bd90      	pop	{r4, r7, pc}
 800f596:	bf00      	nop
 800f598:	080170f8 	.word	0x080170f8
 800f59c:	080174e8 	.word	0x080174e8
 800f5a0:	0801714c 	.word	0x0801714c
 800f5a4:	0801750c 	.word	0x0801750c
 800f5a8:	08017530 	.word	0x08017530
 800f5ac:	08017540 	.word	0x08017540
 800f5b0:	08017550 	.word	0x08017550

0800f5b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f5b4:	b590      	push	{r4, r7, lr}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <tcp_send_fin+0x1c>
 800f5c2:	4b21      	ldr	r3, [pc, #132]	@ (800f648 <tcp_send_fin+0x94>)
 800f5c4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800f5c8:	4920      	ldr	r1, [pc, #128]	@ (800f64c <tcp_send_fin+0x98>)
 800f5ca:	4821      	ldr	r0, [pc, #132]	@ (800f650 <tcp_send_fin+0x9c>)
 800f5cc:	f005 f8d8 	bl	8014780 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d02e      	beq.n	800f636 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5dc:	60fb      	str	r3, [r7, #12]
 800f5de:	e002      	b.n	800f5e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1f8      	bne.n	800f5e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	691b      	ldr	r3, [r3, #16]
 800f5f2:	899b      	ldrh	r3, [r3, #12]
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fa f83c 	bl	8009674 <lwip_htons>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	f003 0307 	and.w	r3, r3, #7
 800f604:	2b00      	cmp	r3, #0
 800f606:	d116      	bne.n	800f636 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	899b      	ldrh	r3, [r3, #12]
 800f60e:	b29c      	uxth	r4, r3
 800f610:	2001      	movs	r0, #1
 800f612:	f7fa f82f 	bl	8009674 <lwip_htons>
 800f616:	4603      	mov	r3, r0
 800f618:	461a      	mov	r2, r3
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	4322      	orrs	r2, r4
 800f620:	b292      	uxth	r2, r2
 800f622:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	8b5b      	ldrh	r3, [r3, #26]
 800f628:	f043 0320 	orr.w	r3, r3, #32
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f632:	2300      	movs	r3, #0
 800f634:	e004      	b.n	800f640 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f636:	2101      	movs	r1, #1
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 f80b 	bl	800f654 <tcp_enqueue_flags>
 800f63e:	4603      	mov	r3, r0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3714      	adds	r7, #20
 800f644:	46bd      	mov	sp, r7
 800f646:	bd90      	pop	{r4, r7, pc}
 800f648:	080170f8 	.word	0x080170f8
 800f64c:	0801755c 	.word	0x0801755c
 800f650:	0801714c 	.word	0x0801714c

0800f654 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b088      	sub	sp, #32
 800f658:	af02      	add	r7, sp, #8
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	460b      	mov	r3, r1
 800f65e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f660:	2300      	movs	r3, #0
 800f662:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800f664:	2300      	movs	r3, #0
 800f666:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f668:	78fb      	ldrb	r3, [r7, #3]
 800f66a:	f003 0303 	and.w	r3, r3, #3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <tcp_enqueue_flags+0x2c>
 800f672:	4b67      	ldr	r3, [pc, #412]	@ (800f810 <tcp_enqueue_flags+0x1bc>)
 800f674:	f240 4211 	movw	r2, #1041	@ 0x411
 800f678:	4966      	ldr	r1, [pc, #408]	@ (800f814 <tcp_enqueue_flags+0x1c0>)
 800f67a:	4867      	ldr	r0, [pc, #412]	@ (800f818 <tcp_enqueue_flags+0x1c4>)
 800f67c:	f005 f880 	bl	8014780 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d106      	bne.n	800f694 <tcp_enqueue_flags+0x40>
 800f686:	4b62      	ldr	r3, [pc, #392]	@ (800f810 <tcp_enqueue_flags+0x1bc>)
 800f688:	f240 4213 	movw	r2, #1043	@ 0x413
 800f68c:	4963      	ldr	r1, [pc, #396]	@ (800f81c <tcp_enqueue_flags+0x1c8>)
 800f68e:	4862      	ldr	r0, [pc, #392]	@ (800f818 <tcp_enqueue_flags+0x1c4>)
 800f690:	f005 f876 	bl	8014780 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f694:	78fb      	ldrb	r3, [r7, #3]
 800f696:	f003 0302 	and.w	r3, r3, #2
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d001      	beq.n	800f6a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f6a2:	7dfb      	ldrb	r3, [r7, #23]
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	f003 0304 	and.w	r3, r3, #4
 800f6ac:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f6ae:	7dbb      	ldrb	r3, [r7, #22]
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	2036      	movs	r0, #54	@ 0x36
 800f6ba:	f7fb f947 	bl	800a94c <pbuf_alloc>
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d109      	bne.n	800f6da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	8b5b      	ldrh	r3, [r3, #26]
 800f6ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f6d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f6d8:	e095      	b.n	800f806 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	895a      	ldrh	r2, [r3, #10]
 800f6de:	7dbb      	ldrb	r3, [r7, #22]
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d206      	bcs.n	800f6f4 <tcp_enqueue_flags+0xa0>
 800f6e6:	4b4a      	ldr	r3, [pc, #296]	@ (800f810 <tcp_enqueue_flags+0x1bc>)
 800f6e8:	f240 4239 	movw	r2, #1081	@ 0x439
 800f6ec:	494c      	ldr	r1, [pc, #304]	@ (800f820 <tcp_enqueue_flags+0x1cc>)
 800f6ee:	484a      	ldr	r0, [pc, #296]	@ (800f818 <tcp_enqueue_flags+0x1c4>)
 800f6f0:	f005 f846 	bl	8014780 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800f6f8:	78fa      	ldrb	r2, [r7, #3]
 800f6fa:	7dfb      	ldrb	r3, [r7, #23]
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	460b      	mov	r3, r1
 800f700:	68f9      	ldr	r1, [r7, #12]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7ff fd6a 	bl	800f1dc <tcp_create_segment>
 800f708:	60b8      	str	r0, [r7, #8]
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d109      	bne.n	800f724 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	8b5b      	ldrh	r3, [r3, #26]
 800f714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f718:	b29a      	uxth	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f71e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f722:	e070      	b.n	800f806 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	691b      	ldr	r3, [r3, #16]
 800f728:	f003 0303 	and.w	r3, r3, #3
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d006      	beq.n	800f73e <tcp_enqueue_flags+0xea>
 800f730:	4b37      	ldr	r3, [pc, #220]	@ (800f810 <tcp_enqueue_flags+0x1bc>)
 800f732:	f240 4242 	movw	r2, #1090	@ 0x442
 800f736:	493b      	ldr	r1, [pc, #236]	@ (800f824 <tcp_enqueue_flags+0x1d0>)
 800f738:	4837      	ldr	r0, [pc, #220]	@ (800f818 <tcp_enqueue_flags+0x1c4>)
 800f73a:	f005 f821 	bl	8014780 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	891b      	ldrh	r3, [r3, #8]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d006      	beq.n	800f754 <tcp_enqueue_flags+0x100>
 800f746:	4b32      	ldr	r3, [pc, #200]	@ (800f810 <tcp_enqueue_flags+0x1bc>)
 800f748:	f240 4243 	movw	r2, #1091	@ 0x443
 800f74c:	4936      	ldr	r1, [pc, #216]	@ (800f828 <tcp_enqueue_flags+0x1d4>)
 800f74e:	4832      	ldr	r0, [pc, #200]	@ (800f818 <tcp_enqueue_flags+0x1c4>)
 800f750:	f005 f816 	bl	8014780 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d103      	bne.n	800f764 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	68ba      	ldr	r2, [r7, #8]
 800f760:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f762:	e00d      	b.n	800f780 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f768:	613b      	str	r3, [r7, #16]
 800f76a:	e002      	b.n	800f772 <tcp_enqueue_flags+0x11e>
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	613b      	str	r3, [r7, #16]
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1f8      	bne.n	800f76c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f788:	78fb      	ldrb	r3, [r7, #3]
 800f78a:	f003 0302 	and.w	r3, r3, #2
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d104      	bne.n	800f79c <tcp_enqueue_flags+0x148>
 800f792:	78fb      	ldrb	r3, [r7, #3]
 800f794:	f003 0301 	and.w	r3, r3, #1
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d004      	beq.n	800f7a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7a0:	1c5a      	adds	r2, r3, #1
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f7a6:	78fb      	ldrb	r3, [r7, #3]
 800f7a8:	f003 0301 	and.w	r3, r3, #1
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d006      	beq.n	800f7be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	8b5b      	ldrh	r3, [r3, #26]
 800f7b4:	f043 0320 	orr.w	r3, r3, #32
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fb fc2e 	bl	800b024 <pbuf_clen>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f7d2:	4413      	add	r3, r2
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00e      	beq.n	800f804 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10a      	bne.n	800f804 <tcp_enqueue_flags+0x1b0>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d106      	bne.n	800f804 <tcp_enqueue_flags+0x1b0>
 800f7f6:	4b06      	ldr	r3, [pc, #24]	@ (800f810 <tcp_enqueue_flags+0x1bc>)
 800f7f8:	f240 4265 	movw	r2, #1125	@ 0x465
 800f7fc:	490b      	ldr	r1, [pc, #44]	@ (800f82c <tcp_enqueue_flags+0x1d8>)
 800f7fe:	4806      	ldr	r0, [pc, #24]	@ (800f818 <tcp_enqueue_flags+0x1c4>)
 800f800:	f004 ffbe 	bl	8014780 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	080170f8 	.word	0x080170f8
 800f814:	08017578 	.word	0x08017578
 800f818:	0801714c 	.word	0x0801714c
 800f81c:	080175d0 	.word	0x080175d0
 800f820:	080175f0 	.word	0x080175f0
 800f824:	0801762c 	.word	0x0801762c
 800f828:	08017644 	.word	0x08017644
 800f82c:	08017670 	.word	0x08017670

0800f830 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f830:	b5b0      	push	{r4, r5, r7, lr}
 800f832:	b08a      	sub	sp, #40	@ 0x28
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d106      	bne.n	800f84c <tcp_output+0x1c>
 800f83e:	4b8a      	ldr	r3, [pc, #552]	@ (800fa68 <tcp_output+0x238>)
 800f840:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800f844:	4989      	ldr	r1, [pc, #548]	@ (800fa6c <tcp_output+0x23c>)
 800f846:	488a      	ldr	r0, [pc, #552]	@ (800fa70 <tcp_output+0x240>)
 800f848:	f004 ff9a 	bl	8014780 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	7d1b      	ldrb	r3, [r3, #20]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d106      	bne.n	800f862 <tcp_output+0x32>
 800f854:	4b84      	ldr	r3, [pc, #528]	@ (800fa68 <tcp_output+0x238>)
 800f856:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800f85a:	4986      	ldr	r1, [pc, #536]	@ (800fa74 <tcp_output+0x244>)
 800f85c:	4884      	ldr	r0, [pc, #528]	@ (800fa70 <tcp_output+0x240>)
 800f85e:	f004 ff8f 	bl	8014780 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f862:	4b85      	ldr	r3, [pc, #532]	@ (800fa78 <tcp_output+0x248>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d101      	bne.n	800f870 <tcp_output+0x40>
    return ERR_OK;
 800f86c:	2300      	movs	r3, #0
 800f86e:	e1d1      	b.n	800fc14 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f87c:	4293      	cmp	r3, r2
 800f87e:	bf28      	it	cs
 800f880:	4613      	movcs	r3, r2
 800f882:	b29b      	uxth	r3, r3
 800f884:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f88a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800f88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d10b      	bne.n	800f8aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	8b5b      	ldrh	r3, [r3, #26]
 800f896:	f003 0302 	and.w	r3, r3, #2
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 81ad 	beq.w	800fbfa <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f000 fdd7 	bl	8010454 <tcp_send_empty_ack>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	e1b4      	b.n	800fc14 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f8aa:	6879      	ldr	r1, [r7, #4]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3304      	adds	r3, #4
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7ff fc76 	bl	800f1a4 <tcp_route>
 800f8b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d102      	bne.n	800f8c6 <tcp_output+0x96>
    return ERR_RTE;
 800f8c0:	f06f 0303 	mvn.w	r3, #3
 800f8c4:	e1a6      	b.n	800fc14 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d003      	beq.n	800f8d4 <tcp_output+0xa4>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d111      	bne.n	800f8f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d002      	beq.n	800f8e0 <tcp_output+0xb0>
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	3304      	adds	r3, #4
 800f8de:	e000      	b.n	800f8e2 <tcp_output+0xb2>
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d102      	bne.n	800f8f0 <tcp_output+0xc0>
      return ERR_RTE;
 800f8ea:	f06f 0303 	mvn.w	r3, #3
 800f8ee:	e191      	b.n	800fc14 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8fa:	691b      	ldr	r3, [r3, #16]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7f9 fece 	bl	80096a0 <lwip_htonl>
 800f904:	4602      	mov	r2, r0
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f90e:	8912      	ldrh	r2, [r2, #8]
 800f910:	4413      	add	r3, r2
 800f912:	69ba      	ldr	r2, [r7, #24]
 800f914:	429a      	cmp	r2, r3
 800f916:	d227      	bcs.n	800f968 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f91e:	461a      	mov	r2, r3
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	4293      	cmp	r3, r2
 800f924:	d114      	bne.n	800f950 <tcp_output+0x120>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d110      	bne.n	800f950 <tcp_output+0x120>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f934:	2b00      	cmp	r3, #0
 800f936:	d10b      	bne.n	800f950 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2201      	movs	r2, #1
 800f944:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	8b5b      	ldrh	r3, [r3, #26]
 800f954:	f003 0302 	and.w	r3, r3, #2
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f000 8150 	beq.w	800fbfe <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 fd78 	bl	8010454 <tcp_send_empty_ack>
 800f964:	4603      	mov	r3, r0
 800f966:	e155      	b.n	800fc14 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f974:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f976:	6a3b      	ldr	r3, [r7, #32]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	f000 811f 	beq.w	800fbbc <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800f97e:	e002      	b.n	800f986 <tcp_output+0x156>
 800f980:	6a3b      	ldr	r3, [r7, #32]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	623b      	str	r3, [r7, #32]
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d1f8      	bne.n	800f980 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f98e:	e115      	b.n	800fbbc <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f992:	691b      	ldr	r3, [r3, #16]
 800f994:	899b      	ldrh	r3, [r3, #12]
 800f996:	b29b      	uxth	r3, r3
 800f998:	4618      	mov	r0, r3
 800f99a:	f7f9 fe6b 	bl	8009674 <lwip_htons>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	f003 0304 	and.w	r3, r3, #4
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d006      	beq.n	800f9b8 <tcp_output+0x188>
 800f9aa:	4b2f      	ldr	r3, [pc, #188]	@ (800fa68 <tcp_output+0x238>)
 800f9ac:	f240 5236 	movw	r2, #1334	@ 0x536
 800f9b0:	4932      	ldr	r1, [pc, #200]	@ (800fa7c <tcp_output+0x24c>)
 800f9b2:	482f      	ldr	r0, [pc, #188]	@ (800fa70 <tcp_output+0x240>)
 800f9b4:	f004 fee4 	bl	8014780 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d01f      	beq.n	800fa00 <tcp_output+0x1d0>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	8b5b      	ldrh	r3, [r3, #26]
 800f9c4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d119      	bne.n	800fa00 <tcp_output+0x1d0>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d00b      	beq.n	800f9ec <tcp_output+0x1bc>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d110      	bne.n	800fa00 <tcp_output+0x1d0>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9e2:	891a      	ldrh	r2, [r3, #8]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d209      	bcs.n	800fa00 <tcp_output+0x1d0>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d004      	beq.n	800fa00 <tcp_output+0x1d0>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f9fc:	2b08      	cmp	r3, #8
 800f9fe:	d901      	bls.n	800fa04 <tcp_output+0x1d4>
 800fa00:	2301      	movs	r3, #1
 800fa02:	e000      	b.n	800fa06 <tcp_output+0x1d6>
 800fa04:	2300      	movs	r3, #0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d106      	bne.n	800fa18 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	8b5b      	ldrh	r3, [r3, #26]
 800fa0e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f000 80e7 	beq.w	800fbe6 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	7d1b      	ldrb	r3, [r3, #20]
 800fa1c:	2b02      	cmp	r3, #2
 800fa1e:	d00d      	beq.n	800fa3c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa22:	691b      	ldr	r3, [r3, #16]
 800fa24:	899b      	ldrh	r3, [r3, #12]
 800fa26:	b29c      	uxth	r4, r3
 800fa28:	2010      	movs	r0, #16
 800fa2a:	f7f9 fe23 	bl	8009674 <lwip_htons>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	461a      	mov	r2, r3
 800fa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	4322      	orrs	r2, r4
 800fa38:	b292      	uxth	r2, r2
 800fa3a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fa3c:	697a      	ldr	r2, [r7, #20]
 800fa3e:	6879      	ldr	r1, [r7, #4]
 800fa40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa42:	f000 f90b 	bl	800fc5c <tcp_output_segment>
 800fa46:	4603      	mov	r3, r0
 800fa48:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fa4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d016      	beq.n	800fa80 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	8b5b      	ldrh	r3, [r3, #26]
 800fa56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	835a      	strh	r2, [r3, #26]
      return err;
 800fa60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa64:	e0d6      	b.n	800fc14 <tcp_output+0x3e4>
 800fa66:	bf00      	nop
 800fa68:	080170f8 	.word	0x080170f8
 800fa6c:	08017698 	.word	0x08017698
 800fa70:	0801714c 	.word	0x0801714c
 800fa74:	080176b0 	.word	0x080176b0
 800fa78:	20008164 	.word	0x20008164
 800fa7c:	080176d8 	.word	0x080176d8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800fa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa82:	2200      	movs	r2, #0
 800fa84:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	7d1b      	ldrb	r3, [r3, #20]
 800fa92:	2b02      	cmp	r3, #2
 800fa94:	d006      	beq.n	800faa4 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	8b5b      	ldrh	r3, [r3, #26]
 800fa9a:	f023 0303 	bic.w	r3, r3, #3
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800faa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa6:	691b      	ldr	r3, [r3, #16]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	4618      	mov	r0, r3
 800faac:	f7f9 fdf8 	bl	80096a0 <lwip_htonl>
 800fab0:	4604      	mov	r4, r0
 800fab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fab4:	891b      	ldrh	r3, [r3, #8]
 800fab6:	461d      	mov	r5, r3
 800fab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	899b      	ldrh	r3, [r3, #12]
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7f9 fdd7 	bl	8009674 <lwip_htons>
 800fac6:	4603      	mov	r3, r0
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	f003 0303 	and.w	r3, r3, #3
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <tcp_output+0x2a6>
 800fad2:	2301      	movs	r3, #1
 800fad4:	e000      	b.n	800fad8 <tcp_output+0x2a8>
 800fad6:	2300      	movs	r3, #0
 800fad8:	442b      	add	r3, r5
 800fada:	4423      	add	r3, r4
 800fadc:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	1ad3      	subs	r3, r2, r3
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	da02      	bge.n	800faf0 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800faf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf2:	891b      	ldrh	r3, [r3, #8]
 800faf4:	461c      	mov	r4, r3
 800faf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf8:	691b      	ldr	r3, [r3, #16]
 800fafa:	899b      	ldrh	r3, [r3, #12]
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7f9 fdb8 	bl	8009674 <lwip_htons>
 800fb04:	4603      	mov	r3, r0
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	f003 0303 	and.w	r3, r3, #3
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d001      	beq.n	800fb14 <tcp_output+0x2e4>
 800fb10:	2301      	movs	r3, #1
 800fb12:	e000      	b.n	800fb16 <tcp_output+0x2e6>
 800fb14:	2300      	movs	r3, #0
 800fb16:	4423      	add	r3, r4
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d049      	beq.n	800fbb0 <tcp_output+0x380>
      seg->next = NULL;
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb1e:	2200      	movs	r2, #0
 800fb20:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d105      	bne.n	800fb36 <tcp_output+0x306>
        pcb->unacked = seg;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb2e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800fb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb32:	623b      	str	r3, [r7, #32]
 800fb34:	e03f      	b.n	800fbb6 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb38:	691b      	ldr	r3, [r3, #16]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7f9 fdaf 	bl	80096a0 <lwip_htonl>
 800fb42:	4604      	mov	r4, r0
 800fb44:	6a3b      	ldr	r3, [r7, #32]
 800fb46:	691b      	ldr	r3, [r3, #16]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7f9 fda8 	bl	80096a0 <lwip_htonl>
 800fb50:	4603      	mov	r3, r0
 800fb52:	1ae3      	subs	r3, r4, r3
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	da24      	bge.n	800fba2 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	3370      	adds	r3, #112	@ 0x70
 800fb5c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fb5e:	e002      	b.n	800fb66 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d011      	beq.n	800fb92 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	691b      	ldr	r3, [r3, #16]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7f9 fd92 	bl	80096a0 <lwip_htonl>
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7f9 fd8b 	bl	80096a0 <lwip_htonl>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	dbe6      	blt.n	800fb60 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb98:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb9e:	601a      	str	r2, [r3, #0]
 800fba0:	e009      	b.n	800fbb6 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fba2:	6a3b      	ldr	r3, [r7, #32]
 800fba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fba6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fba8:	6a3b      	ldr	r3, [r7, #32]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	623b      	str	r3, [r7, #32]
 800fbae:	e002      	b.n	800fbb6 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fbb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fbb2:	f7fc fc34 	bl	800c41e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800fbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d012      	beq.n	800fbe8 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7f9 fd69 	bl	80096a0 <lwip_htonl>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbd4:	1ad3      	subs	r3, r2, r3
 800fbd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbd8:	8912      	ldrh	r2, [r2, #8]
 800fbda:	4413      	add	r3, r2
  while (seg != NULL &&
 800fbdc:	69ba      	ldr	r2, [r7, #24]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	f4bf aed6 	bcs.w	800f990 <tcp_output+0x160>
 800fbe4:	e000      	b.n	800fbe8 <tcp_output+0x3b8>
      break;
 800fbe6:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d108      	bne.n	800fc02 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800fbf8:	e004      	b.n	800fc04 <tcp_output+0x3d4>
    goto output_done;
 800fbfa:	bf00      	nop
 800fbfc:	e002      	b.n	800fc04 <tcp_output+0x3d4>
    goto output_done;
 800fbfe:	bf00      	nop
 800fc00:	e000      	b.n	800fc04 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fc02:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	8b5b      	ldrh	r3, [r3, #26]
 800fc08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3728      	adds	r7, #40	@ 0x28
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bdb0      	pop	{r4, r5, r7, pc}

0800fc1c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d106      	bne.n	800fc38 <tcp_output_segment_busy+0x1c>
 800fc2a:	4b09      	ldr	r3, [pc, #36]	@ (800fc50 <tcp_output_segment_busy+0x34>)
 800fc2c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800fc30:	4908      	ldr	r1, [pc, #32]	@ (800fc54 <tcp_output_segment_busy+0x38>)
 800fc32:	4809      	ldr	r0, [pc, #36]	@ (800fc58 <tcp_output_segment_busy+0x3c>)
 800fc34:	f004 fda4 	bl	8014780 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	7b9b      	ldrb	r3, [r3, #14]
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	d001      	beq.n	800fc46 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fc42:	2301      	movs	r3, #1
 800fc44:	e000      	b.n	800fc48 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fc46:	2300      	movs	r3, #0
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	080170f8 	.word	0x080170f8
 800fc54:	080176f0 	.word	0x080176f0
 800fc58:	0801714c 	.word	0x0801714c

0800fc5c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fc5c:	b5b0      	push	{r4, r5, r7, lr}
 800fc5e:	b08c      	sub	sp, #48	@ 0x30
 800fc60:	af04      	add	r7, sp, #16
 800fc62:	60f8      	str	r0, [r7, #12]
 800fc64:	60b9      	str	r1, [r7, #8]
 800fc66:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d106      	bne.n	800fc7c <tcp_output_segment+0x20>
 800fc6e:	4b64      	ldr	r3, [pc, #400]	@ (800fe00 <tcp_output_segment+0x1a4>)
 800fc70:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800fc74:	4963      	ldr	r1, [pc, #396]	@ (800fe04 <tcp_output_segment+0x1a8>)
 800fc76:	4864      	ldr	r0, [pc, #400]	@ (800fe08 <tcp_output_segment+0x1ac>)
 800fc78:	f004 fd82 	bl	8014780 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d106      	bne.n	800fc90 <tcp_output_segment+0x34>
 800fc82:	4b5f      	ldr	r3, [pc, #380]	@ (800fe00 <tcp_output_segment+0x1a4>)
 800fc84:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800fc88:	4960      	ldr	r1, [pc, #384]	@ (800fe0c <tcp_output_segment+0x1b0>)
 800fc8a:	485f      	ldr	r0, [pc, #380]	@ (800fe08 <tcp_output_segment+0x1ac>)
 800fc8c:	f004 fd78 	bl	8014780 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d106      	bne.n	800fca4 <tcp_output_segment+0x48>
 800fc96:	4b5a      	ldr	r3, [pc, #360]	@ (800fe00 <tcp_output_segment+0x1a4>)
 800fc98:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800fc9c:	495c      	ldr	r1, [pc, #368]	@ (800fe10 <tcp_output_segment+0x1b4>)
 800fc9e:	485a      	ldr	r0, [pc, #360]	@ (800fe08 <tcp_output_segment+0x1ac>)
 800fca0:	f004 fd6e 	bl	8014780 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f7ff ffb9 	bl	800fc1c <tcp_output_segment_busy>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d001      	beq.n	800fcb4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	e0a1      	b.n	800fdf8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	691c      	ldr	r4, [r3, #16]
 800fcbc:	4610      	mov	r0, r2
 800fcbe:	f7f9 fcef 	bl	80096a0 <lwip_htonl>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	691c      	ldr	r4, [r3, #16]
 800fcce:	4610      	mov	r0, r2
 800fcd0:	f7f9 fcd0 	bl	8009674 <lwip_htons>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcdc:	68ba      	ldr	r2, [r7, #8]
 800fcde:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800fce0:	441a      	add	r2, r3
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	691b      	ldr	r3, [r3, #16]
 800fcea:	3314      	adds	r3, #20
 800fcec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	7b1b      	ldrb	r3, [r3, #12]
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d015      	beq.n	800fd26 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	3304      	adds	r3, #4
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6879      	ldr	r1, [r7, #4]
 800fd02:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800fd06:	f7fc fe81 	bl	800ca0c <tcp_eff_send_mss_netif>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fd0e:	8b7b      	ldrh	r3, [r7, #26]
 800fd10:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7f9 fcc3 	bl	80096a0 <lwip_htonl>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	3304      	adds	r3, #4
 800fd24:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	da02      	bge.n	800fd36 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	2200      	movs	r2, #0
 800fd34:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d10c      	bne.n	800fd58 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fd3e:	4b35      	ldr	r3, [pc, #212]	@ (800fe14 <tcp_output_segment+0x1b8>)
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7f9 fca7 	bl	80096a0 <lwip_htonl>
 800fd52:	4602      	mov	r2, r0
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	691a      	ldr	r2, [r3, #16]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	685b      	ldr	r3, [r3, #4]
 800fd6a:	8959      	ldrh	r1, [r3, #10]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	8b3a      	ldrh	r2, [r7, #24]
 800fd72:	1a8a      	subs	r2, r1, r2
 800fd74:	b292      	uxth	r2, r2
 800fd76:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	8919      	ldrh	r1, [r3, #8]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	8b3a      	ldrh	r2, [r7, #24]
 800fd84:	1a8a      	subs	r2, r1, r2
 800fd86:	b292      	uxth	r2, r2
 800fd88:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	68fa      	ldr	r2, [r7, #12]
 800fd90:	6912      	ldr	r2, [r2, #16]
 800fd92:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	691b      	ldr	r3, [r3, #16]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	741a      	strb	r2, [r3, #16]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	691a      	ldr	r2, [r3, #16]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	7b1b      	ldrb	r3, [r3, #12]
 800fda8:	f003 0301 	and.w	r3, r3, #1
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <tcp_output_segment+0x158>
 800fdb0:	2318      	movs	r3, #24
 800fdb2:	e000      	b.n	800fdb6 <tcp_output_segment+0x15a>
 800fdb4:	2314      	movs	r3, #20
 800fdb6:	4413      	add	r3, r2
 800fdb8:	69fa      	ldr	r2, [r7, #28]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d006      	beq.n	800fdcc <tcp_output_segment+0x170>
 800fdbe:	4b10      	ldr	r3, [pc, #64]	@ (800fe00 <tcp_output_segment+0x1a4>)
 800fdc0:	f240 621c 	movw	r2, #1564	@ 0x61c
 800fdc4:	4914      	ldr	r1, [pc, #80]	@ (800fe18 <tcp_output_segment+0x1bc>)
 800fdc6:	4810      	ldr	r0, [pc, #64]	@ (800fe08 <tcp_output_segment+0x1ac>)
 800fdc8:	f004 fcda 	bl	8014780 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6858      	ldr	r0, [r3, #4]
 800fdd0:	68b9      	ldr	r1, [r7, #8]
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	1d1c      	adds	r4, r3, #4
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	7add      	ldrb	r5, [r3, #11]
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	7a9b      	ldrb	r3, [r3, #10]
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	9202      	str	r2, [sp, #8]
 800fde2:	2206      	movs	r2, #6
 800fde4:	9201      	str	r2, [sp, #4]
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	462b      	mov	r3, r5
 800fdea:	4622      	mov	r2, r4
 800fdec:	f002 ffbe 	bl	8012d6c <ip4_output_if>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fdf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3720      	adds	r7, #32
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bdb0      	pop	{r4, r5, r7, pc}
 800fe00:	080170f8 	.word	0x080170f8
 800fe04:	08017718 	.word	0x08017718
 800fe08:	0801714c 	.word	0x0801714c
 800fe0c:	08017738 	.word	0x08017738
 800fe10:	08017758 	.word	0x08017758
 800fe14:	20008114 	.word	0x20008114
 800fe18:	0801777c 	.word	0x0801777c

0800fe1c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fe1c:	b5b0      	push	{r4, r5, r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d106      	bne.n	800fe38 <tcp_rexmit_rto_prepare+0x1c>
 800fe2a:	4b36      	ldr	r3, [pc, #216]	@ (800ff04 <tcp_rexmit_rto_prepare+0xe8>)
 800fe2c:	f240 6263 	movw	r2, #1635	@ 0x663
 800fe30:	4935      	ldr	r1, [pc, #212]	@ (800ff08 <tcp_rexmit_rto_prepare+0xec>)
 800fe32:	4836      	ldr	r0, [pc, #216]	@ (800ff0c <tcp_rexmit_rto_prepare+0xf0>)
 800fe34:	f004 fca4 	bl	8014780 <iprintf>

  if (pcb->unacked == NULL) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d102      	bne.n	800fe46 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fe40:	f06f 0305 	mvn.w	r3, #5
 800fe44:	e059      	b.n	800fefa <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe4a:	60fb      	str	r3, [r7, #12]
 800fe4c:	e00b      	b.n	800fe66 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f7ff fee4 	bl	800fc1c <tcp_output_segment_busy>
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d002      	beq.n	800fe60 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fe5a:	f06f 0305 	mvn.w	r3, #5
 800fe5e:	e04c      	b.n	800fefa <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	60fb      	str	r3, [r7, #12]
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d1ef      	bne.n	800fe4e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	f7ff fed4 	bl	800fc1c <tcp_output_segment_busy>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d002      	beq.n	800fe80 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fe7a:	f06f 0305 	mvn.w	r3, #5
 800fe7e:	e03c      	b.n	800fefa <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d104      	bne.n	800fe9a <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	895a      	ldrh	r2, [r3, #10]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	8b5b      	ldrh	r3, [r3, #26]
 800feac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	691b      	ldr	r3, [r3, #16]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	f7f9 fbef 	bl	80096a0 <lwip_htonl>
 800fec2:	4604      	mov	r4, r0
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	891b      	ldrh	r3, [r3, #8]
 800fec8:	461d      	mov	r5, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	899b      	ldrh	r3, [r3, #12]
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f9 fbce 	bl	8009674 <lwip_htons>
 800fed8:	4603      	mov	r3, r0
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	f003 0303 	and.w	r3, r3, #3
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d001      	beq.n	800fee8 <tcp_rexmit_rto_prepare+0xcc>
 800fee4:	2301      	movs	r3, #1
 800fee6:	e000      	b.n	800feea <tcp_rexmit_rto_prepare+0xce>
 800fee8:	2300      	movs	r3, #0
 800feea:	442b      	add	r3, r5
 800feec:	18e2      	adds	r2, r4, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800fef8:	2300      	movs	r3, #0
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bdb0      	pop	{r4, r5, r7, pc}
 800ff02:	bf00      	nop
 800ff04:	080170f8 	.word	0x080170f8
 800ff08:	08017790 	.word	0x08017790
 800ff0c:	0801714c 	.word	0x0801714c

0800ff10 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <tcp_rexmit_rto_commit+0x1c>
 800ff1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff54 <tcp_rexmit_rto_commit+0x44>)
 800ff20:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ff24:	490c      	ldr	r1, [pc, #48]	@ (800ff58 <tcp_rexmit_rto_commit+0x48>)
 800ff26:	480d      	ldr	r0, [pc, #52]	@ (800ff5c <tcp_rexmit_rto_commit+0x4c>)
 800ff28:	f004 fc2a 	bl	8014780 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff32:	2bff      	cmp	r3, #255	@ 0xff
 800ff34:	d007      	beq.n	800ff46 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	b2da      	uxtb	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f7ff fc72 	bl	800f830 <tcp_output>
}
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	080170f8 	.word	0x080170f8
 800ff58:	080177b4 	.word	0x080177b4
 800ff5c:	0801714c 	.word	0x0801714c

0800ff60 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d106      	bne.n	800ff7c <tcp_rexmit_rto+0x1c>
 800ff6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ff98 <tcp_rexmit_rto+0x38>)
 800ff70:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ff74:	4909      	ldr	r1, [pc, #36]	@ (800ff9c <tcp_rexmit_rto+0x3c>)
 800ff76:	480a      	ldr	r0, [pc, #40]	@ (800ffa0 <tcp_rexmit_rto+0x40>)
 800ff78:	f004 fc02 	bl	8014780 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7ff ff4d 	bl	800fe1c <tcp_rexmit_rto_prepare>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d102      	bne.n	800ff8e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ffc1 	bl	800ff10 <tcp_rexmit_rto_commit>
  }
}
 800ff8e:	bf00      	nop
 800ff90:	3708      	adds	r7, #8
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	080170f8 	.word	0x080170f8
 800ff9c:	080177d8 	.word	0x080177d8
 800ffa0:	0801714c 	.word	0x0801714c

0800ffa4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ffa4:	b590      	push	{r4, r7, lr}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d106      	bne.n	800ffc0 <tcp_rexmit+0x1c>
 800ffb2:	4b2f      	ldr	r3, [pc, #188]	@ (8010070 <tcp_rexmit+0xcc>)
 800ffb4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ffb8:	492e      	ldr	r1, [pc, #184]	@ (8010074 <tcp_rexmit+0xd0>)
 800ffba:	482f      	ldr	r0, [pc, #188]	@ (8010078 <tcp_rexmit+0xd4>)
 800ffbc:	f004 fbe0 	bl	8014780 <iprintf>

  if (pcb->unacked == NULL) {
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d102      	bne.n	800ffce <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ffc8:	f06f 0305 	mvn.w	r3, #5
 800ffcc:	e04c      	b.n	8010068 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffd2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ffd4:	68b8      	ldr	r0, [r7, #8]
 800ffd6:	f7ff fe21 	bl	800fc1c <tcp_output_segment_busy>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d002      	beq.n	800ffe6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ffe0:	f06f 0305 	mvn.w	r3, #5
 800ffe4:	e040      	b.n	8010068 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	336c      	adds	r3, #108	@ 0x6c
 800fff2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fff4:	e002      	b.n	800fffc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d011      	beq.n	8010028 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	4618      	mov	r0, r3
 801000e:	f7f9 fb47 	bl	80096a0 <lwip_htonl>
 8010012:	4604      	mov	r4, r0
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	691b      	ldr	r3, [r3, #16]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	4618      	mov	r0, r3
 801001c:	f7f9 fb40 	bl	80096a0 <lwip_htonl>
 8010020:	4603      	mov	r3, r0
 8010022:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010024:	2b00      	cmp	r3, #0
 8010026:	dbe6      	blt.n	800fff6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	68ba      	ldr	r2, [r7, #8]
 8010034:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d103      	bne.n	8010046 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801004c:	2bff      	cmp	r3, #255	@ 0xff
 801004e:	d007      	beq.n	8010060 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010056:	3301      	adds	r3, #1
 8010058:	b2da      	uxtb	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010066:	2300      	movs	r3, #0
}
 8010068:	4618      	mov	r0, r3
 801006a:	3714      	adds	r7, #20
 801006c:	46bd      	mov	sp, r7
 801006e:	bd90      	pop	{r4, r7, pc}
 8010070:	080170f8 	.word	0x080170f8
 8010074:	080177f4 	.word	0x080177f4
 8010078:	0801714c 	.word	0x0801714c

0801007c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d106      	bne.n	8010098 <tcp_rexmit_fast+0x1c>
 801008a:	4b2a      	ldr	r3, [pc, #168]	@ (8010134 <tcp_rexmit_fast+0xb8>)
 801008c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010090:	4929      	ldr	r1, [pc, #164]	@ (8010138 <tcp_rexmit_fast+0xbc>)
 8010092:	482a      	ldr	r0, [pc, #168]	@ (801013c <tcp_rexmit_fast+0xc0>)
 8010094:	f004 fb74 	bl	8014780 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801009c:	2b00      	cmp	r3, #0
 801009e:	d045      	beq.n	801012c <tcp_rexmit_fast+0xb0>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	8b5b      	ldrh	r3, [r3, #26]
 80100a4:	f003 0304 	and.w	r3, r3, #4
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d13f      	bne.n	801012c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f7ff ff79 	bl	800ffa4 <tcp_rexmit>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d139      	bne.n	801012c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80100c4:	4293      	cmp	r3, r2
 80100c6:	bf28      	it	cs
 80100c8:	4613      	movcs	r3, r2
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	da00      	bge.n	80100d2 <tcp_rexmit_fast+0x56>
 80100d0:	3301      	adds	r3, #1
 80100d2:	105b      	asrs	r3, r3, #1
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80100e2:	461a      	mov	r2, r3
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80100e8:	005b      	lsls	r3, r3, #1
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d206      	bcs.n	80100fc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80100f2:	005b      	lsls	r3, r3, #1
 80100f4:	b29a      	uxth	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010106:	4619      	mov	r1, r3
 8010108:	0049      	lsls	r1, r1, #1
 801010a:	440b      	add	r3, r1
 801010c:	b29b      	uxth	r3, r3
 801010e:	4413      	add	r3, r2
 8010110:	b29a      	uxth	r2, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	8b5b      	ldrh	r3, [r3, #26]
 801011c:	f043 0304 	orr.w	r3, r3, #4
 8010120:	b29a      	uxth	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2200      	movs	r2, #0
 801012a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801012c:	bf00      	nop
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	080170f8 	.word	0x080170f8
 8010138:	0801780c 	.word	0x0801780c
 801013c:	0801714c 	.word	0x0801714c

08010140 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	607b      	str	r3, [r7, #4]
 801014a:	460b      	mov	r3, r1
 801014c:	817b      	strh	r3, [r7, #10]
 801014e:	4613      	mov	r3, r2
 8010150:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010152:	897a      	ldrh	r2, [r7, #10]
 8010154:	893b      	ldrh	r3, [r7, #8]
 8010156:	4413      	add	r3, r2
 8010158:	b29b      	uxth	r3, r3
 801015a:	3314      	adds	r3, #20
 801015c:	b29b      	uxth	r3, r3
 801015e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010162:	4619      	mov	r1, r3
 8010164:	2022      	movs	r0, #34	@ 0x22
 8010166:	f7fa fbf1 	bl	800a94c <pbuf_alloc>
 801016a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d04d      	beq.n	801020e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010172:	897b      	ldrh	r3, [r7, #10]
 8010174:	3313      	adds	r3, #19
 8010176:	697a      	ldr	r2, [r7, #20]
 8010178:	8952      	ldrh	r2, [r2, #10]
 801017a:	4293      	cmp	r3, r2
 801017c:	db06      	blt.n	801018c <tcp_output_alloc_header_common+0x4c>
 801017e:	4b26      	ldr	r3, [pc, #152]	@ (8010218 <tcp_output_alloc_header_common+0xd8>)
 8010180:	f240 7223 	movw	r2, #1827	@ 0x723
 8010184:	4925      	ldr	r1, [pc, #148]	@ (801021c <tcp_output_alloc_header_common+0xdc>)
 8010186:	4826      	ldr	r0, [pc, #152]	@ (8010220 <tcp_output_alloc_header_common+0xe0>)
 8010188:	f004 fafa 	bl	8014780 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010192:	8c3b      	ldrh	r3, [r7, #32]
 8010194:	4618      	mov	r0, r3
 8010196:	f7f9 fa6d 	bl	8009674 <lwip_htons>
 801019a:	4603      	mov	r3, r0
 801019c:	461a      	mov	r2, r3
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80101a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7f9 fa65 	bl	8009674 <lwip_htons>
 80101aa:	4603      	mov	r3, r0
 80101ac:	461a      	mov	r2, r3
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f7f9 fa71 	bl	80096a0 <lwip_htonl>
 80101be:	4602      	mov	r2, r0
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80101c4:	897b      	ldrh	r3, [r7, #10]
 80101c6:	089b      	lsrs	r3, r3, #2
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	3305      	adds	r3, #5
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	031b      	lsls	r3, r3, #12
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	4313      	orrs	r3, r2
 80101da:	b29b      	uxth	r3, r3
 80101dc:	4618      	mov	r0, r3
 80101de:	f7f9 fa49 	bl	8009674 <lwip_htons>
 80101e2:	4603      	mov	r3, r0
 80101e4:	461a      	mov	r2, r3
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80101ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7f9 fa41 	bl	8009674 <lwip_htons>
 80101f2:	4603      	mov	r3, r0
 80101f4:	461a      	mov	r2, r3
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	2200      	movs	r2, #0
 80101fe:	741a      	strb	r2, [r3, #16]
 8010200:	2200      	movs	r2, #0
 8010202:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	2200      	movs	r2, #0
 8010208:	749a      	strb	r2, [r3, #18]
 801020a:	2200      	movs	r2, #0
 801020c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801020e:	697b      	ldr	r3, [r7, #20]
}
 8010210:	4618      	mov	r0, r3
 8010212:	3718      	adds	r7, #24
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	080170f8 	.word	0x080170f8
 801021c:	0801782c 	.word	0x0801782c
 8010220:	0801714c 	.word	0x0801714c

08010224 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010224:	b5b0      	push	{r4, r5, r7, lr}
 8010226:	b08a      	sub	sp, #40	@ 0x28
 8010228:	af04      	add	r7, sp, #16
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	607b      	str	r3, [r7, #4]
 801022e:	460b      	mov	r3, r1
 8010230:	817b      	strh	r3, [r7, #10]
 8010232:	4613      	mov	r3, r2
 8010234:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d106      	bne.n	801024a <tcp_output_alloc_header+0x26>
 801023c:	4b15      	ldr	r3, [pc, #84]	@ (8010294 <tcp_output_alloc_header+0x70>)
 801023e:	f240 7242 	movw	r2, #1858	@ 0x742
 8010242:	4915      	ldr	r1, [pc, #84]	@ (8010298 <tcp_output_alloc_header+0x74>)
 8010244:	4815      	ldr	r0, [pc, #84]	@ (801029c <tcp_output_alloc_header+0x78>)
 8010246:	f004 fa9b 	bl	8014780 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	8adb      	ldrh	r3, [r3, #22]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	8b12      	ldrh	r2, [r2, #24]
 8010256:	68f9      	ldr	r1, [r7, #12]
 8010258:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801025a:	893d      	ldrh	r5, [r7, #8]
 801025c:	897c      	ldrh	r4, [r7, #10]
 801025e:	9103      	str	r1, [sp, #12]
 8010260:	2110      	movs	r1, #16
 8010262:	9102      	str	r1, [sp, #8]
 8010264:	9201      	str	r2, [sp, #4]
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	462a      	mov	r2, r5
 801026c:	4621      	mov	r1, r4
 801026e:	f7ff ff67 	bl	8010140 <tcp_output_alloc_header_common>
 8010272:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d006      	beq.n	8010288 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801027e:	68fa      	ldr	r2, [r7, #12]
 8010280:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010282:	441a      	add	r2, r3
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010288:	697b      	ldr	r3, [r7, #20]
}
 801028a:	4618      	mov	r0, r3
 801028c:	3718      	adds	r7, #24
 801028e:	46bd      	mov	sp, r7
 8010290:	bdb0      	pop	{r4, r5, r7, pc}
 8010292:	bf00      	nop
 8010294:	080170f8 	.word	0x080170f8
 8010298:	0801785c 	.word	0x0801785c
 801029c:	0801714c 	.word	0x0801714c

080102a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b088      	sub	sp, #32
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	4611      	mov	r1, r2
 80102ac:	461a      	mov	r2, r3
 80102ae:	460b      	mov	r3, r1
 80102b0:	71fb      	strb	r3, [r7, #7]
 80102b2:	4613      	mov	r3, r2
 80102b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80102b6:	2300      	movs	r3, #0
 80102b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d106      	bne.n	80102ce <tcp_output_fill_options+0x2e>
 80102c0:	4b12      	ldr	r3, [pc, #72]	@ (801030c <tcp_output_fill_options+0x6c>)
 80102c2:	f240 7256 	movw	r2, #1878	@ 0x756
 80102c6:	4912      	ldr	r1, [pc, #72]	@ (8010310 <tcp_output_fill_options+0x70>)
 80102c8:	4812      	ldr	r0, [pc, #72]	@ (8010314 <tcp_output_fill_options+0x74>)
 80102ca:	f004 fa59 	bl	8014780 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	3314      	adds	r3, #20
 80102d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80102da:	8bfb      	ldrh	r3, [r7, #30]
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	461a      	mov	r2, r3
 80102e0:	79fb      	ldrb	r3, [r7, #7]
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	f003 0304 	and.w	r3, r3, #4
 80102e8:	4413      	add	r3, r2
 80102ea:	3314      	adds	r3, #20
 80102ec:	69ba      	ldr	r2, [r7, #24]
 80102ee:	4413      	add	r3, r2
 80102f0:	697a      	ldr	r2, [r7, #20]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d006      	beq.n	8010304 <tcp_output_fill_options+0x64>
 80102f6:	4b05      	ldr	r3, [pc, #20]	@ (801030c <tcp_output_fill_options+0x6c>)
 80102f8:	f240 7275 	movw	r2, #1909	@ 0x775
 80102fc:	4906      	ldr	r1, [pc, #24]	@ (8010318 <tcp_output_fill_options+0x78>)
 80102fe:	4805      	ldr	r0, [pc, #20]	@ (8010314 <tcp_output_fill_options+0x74>)
 8010300:	f004 fa3e 	bl	8014780 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010304:	bf00      	nop
 8010306:	3720      	adds	r7, #32
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	080170f8 	.word	0x080170f8
 8010310:	08017884 	.word	0x08017884
 8010314:	0801714c 	.word	0x0801714c
 8010318:	0801777c 	.word	0x0801777c

0801031c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b08a      	sub	sp, #40	@ 0x28
 8010320:	af04      	add	r7, sp, #16
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
 8010328:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d106      	bne.n	801033e <tcp_output_control_segment+0x22>
 8010330:	4b1c      	ldr	r3, [pc, #112]	@ (80103a4 <tcp_output_control_segment+0x88>)
 8010332:	f240 7287 	movw	r2, #1927	@ 0x787
 8010336:	491c      	ldr	r1, [pc, #112]	@ (80103a8 <tcp_output_control_segment+0x8c>)
 8010338:	481c      	ldr	r0, [pc, #112]	@ (80103ac <tcp_output_control_segment+0x90>)
 801033a:	f004 fa21 	bl	8014780 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801033e:	683a      	ldr	r2, [r7, #0]
 8010340:	6879      	ldr	r1, [r7, #4]
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f7fe ff2e 	bl	800f1a4 <tcp_route>
 8010348:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d102      	bne.n	8010356 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010350:	23fc      	movs	r3, #252	@ 0xfc
 8010352:	75fb      	strb	r3, [r7, #23]
 8010354:	e01c      	b.n	8010390 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d006      	beq.n	801036a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	7adb      	ldrb	r3, [r3, #11]
 8010360:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	7a9b      	ldrb	r3, [r3, #10]
 8010366:	757b      	strb	r3, [r7, #21]
 8010368:	e003      	b.n	8010372 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801036a:	23ff      	movs	r3, #255	@ 0xff
 801036c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801036e:	2300      	movs	r3, #0
 8010370:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010372:	7dba      	ldrb	r2, [r7, #22]
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	9302      	str	r3, [sp, #8]
 8010378:	2306      	movs	r3, #6
 801037a:	9301      	str	r3, [sp, #4]
 801037c:	7d7b      	ldrb	r3, [r7, #21]
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	4613      	mov	r3, r2
 8010382:	683a      	ldr	r2, [r7, #0]
 8010384:	6879      	ldr	r1, [r7, #4]
 8010386:	68b8      	ldr	r0, [r7, #8]
 8010388:	f002 fcf0 	bl	8012d6c <ip4_output_if>
 801038c:	4603      	mov	r3, r0
 801038e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010390:	68b8      	ldr	r0, [r7, #8]
 8010392:	f7fa fdbf 	bl	800af14 <pbuf_free>
  return err;
 8010396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	080170f8 	.word	0x080170f8
 80103a8:	080178ac 	.word	0x080178ac
 80103ac:	0801714c 	.word	0x0801714c

080103b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80103b0:	b590      	push	{r4, r7, lr}
 80103b2:	b08b      	sub	sp, #44	@ 0x2c
 80103b4:	af04      	add	r7, sp, #16
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	607a      	str	r2, [r7, #4]
 80103bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d106      	bne.n	80103d2 <tcp_rst+0x22>
 80103c4:	4b1f      	ldr	r3, [pc, #124]	@ (8010444 <tcp_rst+0x94>)
 80103c6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80103ca:	491f      	ldr	r1, [pc, #124]	@ (8010448 <tcp_rst+0x98>)
 80103cc:	481f      	ldr	r0, [pc, #124]	@ (801044c <tcp_rst+0x9c>)
 80103ce:	f004 f9d7 	bl	8014780 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80103d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d106      	bne.n	80103e6 <tcp_rst+0x36>
 80103d8:	4b1a      	ldr	r3, [pc, #104]	@ (8010444 <tcp_rst+0x94>)
 80103da:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80103de:	491c      	ldr	r1, [pc, #112]	@ (8010450 <tcp_rst+0xa0>)
 80103e0:	481a      	ldr	r0, [pc, #104]	@ (801044c <tcp_rst+0x9c>)
 80103e2:	f004 f9cd 	bl	8014780 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80103e6:	2300      	movs	r3, #0
 80103e8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80103ea:	f246 0308 	movw	r3, #24584	@ 0x6008
 80103ee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80103f0:	7dfb      	ldrb	r3, [r7, #23]
 80103f2:	b29c      	uxth	r4, r3
 80103f4:	68b8      	ldr	r0, [r7, #8]
 80103f6:	f7f9 f953 	bl	80096a0 <lwip_htonl>
 80103fa:	4602      	mov	r2, r0
 80103fc:	8abb      	ldrh	r3, [r7, #20]
 80103fe:	9303      	str	r3, [sp, #12]
 8010400:	2314      	movs	r3, #20
 8010402:	9302      	str	r3, [sp, #8]
 8010404:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010406:	9301      	str	r3, [sp, #4]
 8010408:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	4613      	mov	r3, r2
 801040e:	2200      	movs	r2, #0
 8010410:	4621      	mov	r1, r4
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7ff fe94 	bl	8010140 <tcp_output_alloc_header_common>
 8010418:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d00c      	beq.n	801043a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010420:	7dfb      	ldrb	r3, [r7, #23]
 8010422:	2200      	movs	r2, #0
 8010424:	6939      	ldr	r1, [r7, #16]
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f7ff ff3a 	bl	80102a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801042c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	6939      	ldr	r1, [r7, #16]
 8010432:	68f8      	ldr	r0, [r7, #12]
 8010434:	f7ff ff72 	bl	801031c <tcp_output_control_segment>
 8010438:	e000      	b.n	801043c <tcp_rst+0x8c>
    return;
 801043a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801043c:	371c      	adds	r7, #28
 801043e:	46bd      	mov	sp, r7
 8010440:	bd90      	pop	{r4, r7, pc}
 8010442:	bf00      	nop
 8010444:	080170f8 	.word	0x080170f8
 8010448:	080178d8 	.word	0x080178d8
 801044c:	0801714c 	.word	0x0801714c
 8010450:	080178f4 	.word	0x080178f4

08010454 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010454:	b590      	push	{r4, r7, lr}
 8010456:	b087      	sub	sp, #28
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801045c:	2300      	movs	r3, #0
 801045e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010460:	2300      	movs	r3, #0
 8010462:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d106      	bne.n	8010478 <tcp_send_empty_ack+0x24>
 801046a:	4b28      	ldr	r3, [pc, #160]	@ (801050c <tcp_send_empty_ack+0xb8>)
 801046c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8010470:	4927      	ldr	r1, [pc, #156]	@ (8010510 <tcp_send_empty_ack+0xbc>)
 8010472:	4828      	ldr	r0, [pc, #160]	@ (8010514 <tcp_send_empty_ack+0xc0>)
 8010474:	f004 f984 	bl	8014780 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010478:	7dfb      	ldrb	r3, [r7, #23]
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	b2db      	uxtb	r3, r3
 801047e:	f003 0304 	and.w	r3, r3, #4
 8010482:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010484:	7d7b      	ldrb	r3, [r7, #21]
 8010486:	b29c      	uxth	r4, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801048c:	4618      	mov	r0, r3
 801048e:	f7f9 f907 	bl	80096a0 <lwip_htonl>
 8010492:	4603      	mov	r3, r0
 8010494:	2200      	movs	r2, #0
 8010496:	4621      	mov	r1, r4
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7ff fec3 	bl	8010224 <tcp_output_alloc_header>
 801049e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d109      	bne.n	80104ba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8b5b      	ldrh	r3, [r3, #26]
 80104aa:	f043 0303 	orr.w	r3, r3, #3
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80104b4:	f06f 0301 	mvn.w	r3, #1
 80104b8:	e023      	b.n	8010502 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80104ba:	7dbb      	ldrb	r3, [r7, #22]
 80104bc:	7dfa      	ldrb	r2, [r7, #23]
 80104be:	6939      	ldr	r1, [r7, #16]
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7ff feed 	bl	80102a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	3304      	adds	r3, #4
 80104cc:	6939      	ldr	r1, [r7, #16]
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7ff ff24 	bl	801031c <tcp_output_control_segment>
 80104d4:	4603      	mov	r3, r0
 80104d6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80104d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d007      	beq.n	80104f0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	8b5b      	ldrh	r3, [r3, #26]
 80104e4:	f043 0303 	orr.w	r3, r3, #3
 80104e8:	b29a      	uxth	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	835a      	strh	r2, [r3, #26]
 80104ee:	e006      	b.n	80104fe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	8b5b      	ldrh	r3, [r3, #26]
 80104f4:	f023 0303 	bic.w	r3, r3, #3
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80104fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010502:	4618      	mov	r0, r3
 8010504:	371c      	adds	r7, #28
 8010506:	46bd      	mov	sp, r7
 8010508:	bd90      	pop	{r4, r7, pc}
 801050a:	bf00      	nop
 801050c:	080170f8 	.word	0x080170f8
 8010510:	08017910 	.word	0x08017910
 8010514:	0801714c 	.word	0x0801714c

08010518 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010518:	b590      	push	{r4, r7, lr}
 801051a:	b085      	sub	sp, #20
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010520:	2300      	movs	r3, #0
 8010522:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <tcp_keepalive+0x20>
 801052a:	4b18      	ldr	r3, [pc, #96]	@ (801058c <tcp_keepalive+0x74>)
 801052c:	f640 0224 	movw	r2, #2084	@ 0x824
 8010530:	4917      	ldr	r1, [pc, #92]	@ (8010590 <tcp_keepalive+0x78>)
 8010532:	4818      	ldr	r0, [pc, #96]	@ (8010594 <tcp_keepalive+0x7c>)
 8010534:	f004 f924 	bl	8014780 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010538:	7abb      	ldrb	r3, [r7, #10]
 801053a:	b29c      	uxth	r4, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010540:	3b01      	subs	r3, #1
 8010542:	4618      	mov	r0, r3
 8010544:	f7f9 f8ac 	bl	80096a0 <lwip_htonl>
 8010548:	4603      	mov	r3, r0
 801054a:	2200      	movs	r2, #0
 801054c:	4621      	mov	r1, r4
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7ff fe68 	bl	8010224 <tcp_output_alloc_header>
 8010554:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d102      	bne.n	8010562 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801055c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010560:	e010      	b.n	8010584 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010562:	7abb      	ldrb	r3, [r7, #10]
 8010564:	2200      	movs	r2, #0
 8010566:	68f9      	ldr	r1, [r7, #12]
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f7ff fe99 	bl	80102a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	3304      	adds	r3, #4
 8010574:	68f9      	ldr	r1, [r7, #12]
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7ff fed0 	bl	801031c <tcp_output_control_segment>
 801057c:	4603      	mov	r3, r0
 801057e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010580:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3714      	adds	r7, #20
 8010588:	46bd      	mov	sp, r7
 801058a:	bd90      	pop	{r4, r7, pc}
 801058c:	080170f8 	.word	0x080170f8
 8010590:	08017930 	.word	0x08017930
 8010594:	0801714c 	.word	0x0801714c

08010598 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010598:	b590      	push	{r4, r7, lr}
 801059a:	b08b      	sub	sp, #44	@ 0x2c
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80105a0:	2300      	movs	r3, #0
 80105a2:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <tcp_zero_window_probe+0x20>
 80105aa:	4b4d      	ldr	r3, [pc, #308]	@ (80106e0 <tcp_zero_window_probe+0x148>)
 80105ac:	f640 024f 	movw	r2, #2127	@ 0x84f
 80105b0:	494c      	ldr	r1, [pc, #304]	@ (80106e4 <tcp_zero_window_probe+0x14c>)
 80105b2:	484d      	ldr	r0, [pc, #308]	@ (80106e8 <tcp_zero_window_probe+0x150>)
 80105b4:	f004 f8e4 	bl	8014780 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 80105be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d101      	bne.n	80105c8 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80105c4:	2300      	movs	r3, #0
 80105c6:	e087      	b.n	80106d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80105ce:	2bff      	cmp	r3, #255	@ 0xff
 80105d0:	d007      	beq.n	80105e2 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80105d8:	3301      	adds	r3, #1
 80105da:	b2da      	uxtb	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80105e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	899b      	ldrh	r3, [r3, #12]
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7f9 f842 	bl	8009674 <lwip_htons>
 80105f0:	4603      	mov	r3, r0
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	f003 0301 	and.w	r3, r3, #1
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d005      	beq.n	8010608 <tcp_zero_window_probe+0x70>
 80105fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fe:	891b      	ldrh	r3, [r3, #8]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d101      	bne.n	8010608 <tcp_zero_window_probe+0x70>
 8010604:	2301      	movs	r3, #1
 8010606:	e000      	b.n	801060a <tcp_zero_window_probe+0x72>
 8010608:	2300      	movs	r3, #0
 801060a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801060e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010612:	2b00      	cmp	r3, #0
 8010614:	bf0c      	ite	eq
 8010616:	2301      	moveq	r3, #1
 8010618:	2300      	movne	r3, #0
 801061a:	b2db      	uxtb	r3, r3
 801061c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801061e:	7cfb      	ldrb	r3, [r7, #19]
 8010620:	b299      	uxth	r1, r3
 8010622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	8c3a      	ldrh	r2, [r7, #32]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7ff fdfa 	bl	8010224 <tcp_output_alloc_header>
 8010630:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d102      	bne.n	801063e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801063c:	e04c      	b.n	80106d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8010644:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010648:	2b00      	cmp	r3, #0
 801064a:	d011      	beq.n	8010670 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	899b      	ldrh	r3, [r3, #12]
 8010650:	b29b      	uxth	r3, r3
 8010652:	b21b      	sxth	r3, r3
 8010654:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010658:	b21c      	sxth	r4, r3
 801065a:	2011      	movs	r0, #17
 801065c:	f7f9 f80a 	bl	8009674 <lwip_htons>
 8010660:	4603      	mov	r3, r0
 8010662:	b21b      	sxth	r3, r3
 8010664:	4323      	orrs	r3, r4
 8010666:	b21b      	sxth	r3, r3
 8010668:	b29a      	uxth	r2, r3
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	819a      	strh	r2, [r3, #12]
 801066e:	e010      	b.n	8010692 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	3314      	adds	r3, #20
 8010676:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801067a:	6858      	ldr	r0, [r3, #4]
 801067c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	891a      	ldrh	r2, [r3, #8]
 8010682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010684:	891b      	ldrh	r3, [r3, #8]
 8010686:	1ad3      	subs	r3, r2, r3
 8010688:	b29b      	uxth	r3, r3
 801068a:	2201      	movs	r2, #1
 801068c:	6979      	ldr	r1, [r7, #20]
 801068e:	f7fa fe3b 	bl	800b308 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	4618      	mov	r0, r3
 801069a:	f7f9 f801 	bl	80096a0 <lwip_htonl>
 801069e:	4603      	mov	r3, r0
 80106a0:	3301      	adds	r3, #1
 80106a2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	da02      	bge.n	80106b6 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80106b6:	7cfb      	ldrb	r3, [r7, #19]
 80106b8:	2200      	movs	r2, #0
 80106ba:	69f9      	ldr	r1, [r7, #28]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f7ff fdef 	bl	80102a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	3304      	adds	r3, #4
 80106c8:	69f9      	ldr	r1, [r7, #28]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7ff fe26 	bl	801031c <tcp_output_control_segment>
 80106d0:	4603      	mov	r3, r0
 80106d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80106d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80106d8:	4618      	mov	r0, r3
 80106da:	372c      	adds	r7, #44	@ 0x2c
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd90      	pop	{r4, r7, pc}
 80106e0:	080170f8 	.word	0x080170f8
 80106e4:	0801794c 	.word	0x0801794c
 80106e8:	0801714c 	.word	0x0801714c

080106ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80106f4:	f7fa fef6 	bl	800b4e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80106f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010724 <tcpip_tcp_timer+0x38>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d103      	bne.n	8010708 <tcpip_tcp_timer+0x1c>
 8010700:	4b09      	ldr	r3, [pc, #36]	@ (8010728 <tcpip_tcp_timer+0x3c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d005      	beq.n	8010714 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010708:	2200      	movs	r2, #0
 801070a:	4908      	ldr	r1, [pc, #32]	@ (801072c <tcpip_tcp_timer+0x40>)
 801070c:	20fa      	movs	r0, #250	@ 0xfa
 801070e:	f000 f8f3 	bl	80108f8 <sys_timeout>
 8010712:	e003      	b.n	801071c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010714:	4b06      	ldr	r3, [pc, #24]	@ (8010730 <tcpip_tcp_timer+0x44>)
 8010716:	2200      	movs	r2, #0
 8010718:	601a      	str	r2, [r3, #0]
  }
}
 801071a:	bf00      	nop
 801071c:	bf00      	nop
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	20008120 	.word	0x20008120
 8010728:	20008124 	.word	0x20008124
 801072c:	080106ed 	.word	0x080106ed
 8010730:	20008170 	.word	0x20008170

08010734 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010738:	4b0a      	ldr	r3, [pc, #40]	@ (8010764 <tcp_timer_needed+0x30>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d10f      	bne.n	8010760 <tcp_timer_needed+0x2c>
 8010740:	4b09      	ldr	r3, [pc, #36]	@ (8010768 <tcp_timer_needed+0x34>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d103      	bne.n	8010750 <tcp_timer_needed+0x1c>
 8010748:	4b08      	ldr	r3, [pc, #32]	@ (801076c <tcp_timer_needed+0x38>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d007      	beq.n	8010760 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010750:	4b04      	ldr	r3, [pc, #16]	@ (8010764 <tcp_timer_needed+0x30>)
 8010752:	2201      	movs	r2, #1
 8010754:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010756:	2200      	movs	r2, #0
 8010758:	4905      	ldr	r1, [pc, #20]	@ (8010770 <tcp_timer_needed+0x3c>)
 801075a:	20fa      	movs	r0, #250	@ 0xfa
 801075c:	f000 f8cc 	bl	80108f8 <sys_timeout>
  }
}
 8010760:	bf00      	nop
 8010762:	bd80      	pop	{r7, pc}
 8010764:	20008170 	.word	0x20008170
 8010768:	20008120 	.word	0x20008120
 801076c:	20008124 	.word	0x20008124
 8010770:	080106ed 	.word	0x080106ed

08010774 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010780:	2006      	movs	r0, #6
 8010782:	f7f9 fbeb 	bl	8009f5c <memp_malloc>
 8010786:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d109      	bne.n	80107a2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d151      	bne.n	8010838 <sys_timeout_abs+0xc4>
 8010794:	4b2a      	ldr	r3, [pc, #168]	@ (8010840 <sys_timeout_abs+0xcc>)
 8010796:	22be      	movs	r2, #190	@ 0xbe
 8010798:	492a      	ldr	r1, [pc, #168]	@ (8010844 <sys_timeout_abs+0xd0>)
 801079a:	482b      	ldr	r0, [pc, #172]	@ (8010848 <sys_timeout_abs+0xd4>)
 801079c:	f003 fff0 	bl	8014780 <iprintf>
    return;
 80107a0:	e04a      	b.n	8010838 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	2200      	movs	r2, #0
 80107a6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80107ba:	4b24      	ldr	r3, [pc, #144]	@ (801084c <sys_timeout_abs+0xd8>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d103      	bne.n	80107ca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80107c2:	4a22      	ldr	r2, [pc, #136]	@ (801084c <sys_timeout_abs+0xd8>)
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	6013      	str	r3, [r2, #0]
    return;
 80107c8:	e037      	b.n	801083a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	685a      	ldr	r2, [r3, #4]
 80107ce:	4b1f      	ldr	r3, [pc, #124]	@ (801084c <sys_timeout_abs+0xd8>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	1ad3      	subs	r3, r2, r3
 80107d6:	0fdb      	lsrs	r3, r3, #31
 80107d8:	f003 0301 	and.w	r3, r3, #1
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d007      	beq.n	80107f2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80107e2:	4b1a      	ldr	r3, [pc, #104]	@ (801084c <sys_timeout_abs+0xd8>)
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80107ea:	4a18      	ldr	r2, [pc, #96]	@ (801084c <sys_timeout_abs+0xd8>)
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	6013      	str	r3, [r2, #0]
 80107f0:	e023      	b.n	801083a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80107f2:	4b16      	ldr	r3, [pc, #88]	@ (801084c <sys_timeout_abs+0xd8>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	617b      	str	r3, [r7, #20]
 80107f8:	e01a      	b.n	8010830 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00b      	beq.n	801081a <sys_timeout_abs+0xa6>
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	685a      	ldr	r2, [r3, #4]
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	0fdb      	lsrs	r3, r3, #31
 8010810:	f003 0301 	and.w	r3, r3, #1
 8010814:	b2db      	uxtb	r3, r3
 8010816:	2b00      	cmp	r3, #0
 8010818:	d007      	beq.n	801082a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	693a      	ldr	r2, [r7, #16]
 8010826:	601a      	str	r2, [r3, #0]
        break;
 8010828:	e007      	b.n	801083a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	617b      	str	r3, [r7, #20]
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1e1      	bne.n	80107fa <sys_timeout_abs+0x86>
 8010836:	e000      	b.n	801083a <sys_timeout_abs+0xc6>
    return;
 8010838:	bf00      	nop
      }
    }
  }
}
 801083a:	3718      	adds	r7, #24
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	08017970 	.word	0x08017970
 8010844:	080179a4 	.word	0x080179a4
 8010848:	080179e4 	.word	0x080179e4
 801084c:	20008168 	.word	0x20008168

08010850 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b086      	sub	sp, #24
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	4798      	blx	r3

  now = sys_now();
 8010862:	f7f8 fccb 	bl	80091fc <sys_now>
 8010866:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	4b0f      	ldr	r3, [pc, #60]	@ (80108ac <lwip_cyclic_timer+0x5c>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4413      	add	r3, r2
 8010872:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	1ad3      	subs	r3, r2, r3
 801087a:	0fdb      	lsrs	r3, r3, #31
 801087c:	f003 0301 	and.w	r3, r3, #1
 8010880:	b2db      	uxtb	r3, r3
 8010882:	2b00      	cmp	r3, #0
 8010884:	d009      	beq.n	801089a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	4413      	add	r3, r2
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	4907      	ldr	r1, [pc, #28]	@ (80108b0 <lwip_cyclic_timer+0x60>)
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff ff6e 	bl	8010774 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010898:	e004      	b.n	80108a4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	4904      	ldr	r1, [pc, #16]	@ (80108b0 <lwip_cyclic_timer+0x60>)
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	f7ff ff68 	bl	8010774 <sys_timeout_abs>
}
 80108a4:	bf00      	nop
 80108a6:	3718      	adds	r7, #24
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	2000816c 	.word	0x2000816c
 80108b0:	08010851 	.word	0x08010851

080108b4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80108ba:	2301      	movs	r3, #1
 80108bc:	607b      	str	r3, [r7, #4]
 80108be:	e00e      	b.n	80108de <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80108c0:	4a0b      	ldr	r2, [pc, #44]	@ (80108f0 <sys_timeouts_init+0x3c>)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	00db      	lsls	r3, r3, #3
 80108cc:	4a08      	ldr	r2, [pc, #32]	@ (80108f0 <sys_timeouts_init+0x3c>)
 80108ce:	4413      	add	r3, r2
 80108d0:	461a      	mov	r2, r3
 80108d2:	4908      	ldr	r1, [pc, #32]	@ (80108f4 <sys_timeouts_init+0x40>)
 80108d4:	f000 f810 	bl	80108f8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	3301      	adds	r3, #1
 80108dc:	607b      	str	r3, [r7, #4]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2b02      	cmp	r3, #2
 80108e2:	d9ed      	bls.n	80108c0 <sys_timeouts_init+0xc>
  }
}
 80108e4:	bf00      	nop
 80108e6:	bf00      	nop
 80108e8:	3708      	adds	r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	08018df8 	.word	0x08018df8
 80108f4:	08010851 	.word	0x08010851

080108f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b086      	sub	sp, #24
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801090a:	d306      	bcc.n	801091a <sys_timeout+0x22>
 801090c:	4b0a      	ldr	r3, [pc, #40]	@ (8010938 <sys_timeout+0x40>)
 801090e:	f240 1229 	movw	r2, #297	@ 0x129
 8010912:	490a      	ldr	r1, [pc, #40]	@ (801093c <sys_timeout+0x44>)
 8010914:	480a      	ldr	r0, [pc, #40]	@ (8010940 <sys_timeout+0x48>)
 8010916:	f003 ff33 	bl	8014780 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801091a:	f7f8 fc6f 	bl	80091fc <sys_now>
 801091e:	4602      	mov	r2, r0
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	4413      	add	r3, r2
 8010924:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010926:	687a      	ldr	r2, [r7, #4]
 8010928:	68b9      	ldr	r1, [r7, #8]
 801092a:	6978      	ldr	r0, [r7, #20]
 801092c:	f7ff ff22 	bl	8010774 <sys_timeout_abs>
#endif
}
 8010930:	bf00      	nop
 8010932:	3718      	adds	r7, #24
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	08017970 	.word	0x08017970
 801093c:	08017a0c 	.word	0x08017a0c
 8010940:	080179e4 	.word	0x080179e4

08010944 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801094a:	f7f8 fc57 	bl	80091fc <sys_now>
 801094e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010950:	4b1a      	ldr	r3, [pc, #104]	@ (80109bc <sys_check_timeouts+0x78>)
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d001      	beq.n	801095e <sys_check_timeouts+0x1a>
 801095a:	f7f9 ffa1 	bl	800a8a0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801095e:	4b18      	ldr	r3, [pc, #96]	@ (80109c0 <sys_check_timeouts+0x7c>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d022      	beq.n	80109b0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	68fa      	ldr	r2, [r7, #12]
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	0fdb      	lsrs	r3, r3, #31
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	b2db      	uxtb	r3, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	d11a      	bne.n	80109b4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4a0f      	ldr	r2, [pc, #60]	@ (80109c0 <sys_check_timeouts+0x7c>)
 8010984:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	68db      	ldr	r3, [r3, #12]
 8010990:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	4a0b      	ldr	r2, [pc, #44]	@ (80109c4 <sys_check_timeouts+0x80>)
 8010998:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801099a:	68b9      	ldr	r1, [r7, #8]
 801099c:	2006      	movs	r0, #6
 801099e:	f7f9 fb4d 	bl	800a03c <memp_free>
    if (handler != NULL) {
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d0d3      	beq.n	8010950 <sys_check_timeouts+0xc>
      handler(arg);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6838      	ldr	r0, [r7, #0]
 80109ac:	4798      	blx	r3
  do {
 80109ae:	e7cf      	b.n	8010950 <sys_check_timeouts+0xc>
      return;
 80109b0:	bf00      	nop
 80109b2:	e000      	b.n	80109b6 <sys_check_timeouts+0x72>
      return;
 80109b4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80109b6:	3710      	adds	r7, #16
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	20008111 	.word	0x20008111
 80109c0:	20008168 	.word	0x20008168
 80109c4:	2000816c 	.word	0x2000816c

080109c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80109cc:	f003 fdd8 	bl	8014580 <rand>
 80109d0:	4603      	mov	r3, r0
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80109d8:	b29b      	uxth	r3, r3
 80109da:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80109de:	b29a      	uxth	r2, r3
 80109e0:	4b01      	ldr	r3, [pc, #4]	@ (80109e8 <udp_init+0x20>)
 80109e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80109e4:	bf00      	nop
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	2000006c 	.word	0x2000006c

080109ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80109f6:	4b17      	ldr	r3, [pc, #92]	@ (8010a54 <udp_new_port+0x68>)
 80109f8:	881b      	ldrh	r3, [r3, #0]
 80109fa:	1c5a      	adds	r2, r3, #1
 80109fc:	b291      	uxth	r1, r2
 80109fe:	4a15      	ldr	r2, [pc, #84]	@ (8010a54 <udp_new_port+0x68>)
 8010a00:	8011      	strh	r1, [r2, #0]
 8010a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d103      	bne.n	8010a12 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010a0a:	4b12      	ldr	r3, [pc, #72]	@ (8010a54 <udp_new_port+0x68>)
 8010a0c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010a10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a12:	4b11      	ldr	r3, [pc, #68]	@ (8010a58 <udp_new_port+0x6c>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	603b      	str	r3, [r7, #0]
 8010a18:	e011      	b.n	8010a3e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	8a5a      	ldrh	r2, [r3, #18]
 8010a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8010a54 <udp_new_port+0x68>)
 8010a20:	881b      	ldrh	r3, [r3, #0]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d108      	bne.n	8010a38 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010a26:	88fb      	ldrh	r3, [r7, #6]
 8010a28:	3301      	adds	r3, #1
 8010a2a:	80fb      	strh	r3, [r7, #6]
 8010a2c:	88fb      	ldrh	r3, [r7, #6]
 8010a2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010a32:	d3e0      	bcc.n	80109f6 <udp_new_port+0xa>
        return 0;
 8010a34:	2300      	movs	r3, #0
 8010a36:	e007      	b.n	8010a48 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	603b      	str	r3, [r7, #0]
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d1ea      	bne.n	8010a1a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010a44:	4b03      	ldr	r3, [pc, #12]	@ (8010a54 <udp_new_port+0x68>)
 8010a46:	881b      	ldrh	r3, [r3, #0]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr
 8010a54:	2000006c 	.word	0x2000006c
 8010a58:	20008174 	.word	0x20008174

08010a5c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	4613      	mov	r3, r2
 8010a68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d105      	bne.n	8010a7c <udp_input_local_match+0x20>
 8010a70:	4b27      	ldr	r3, [pc, #156]	@ (8010b10 <udp_input_local_match+0xb4>)
 8010a72:	2287      	movs	r2, #135	@ 0x87
 8010a74:	4927      	ldr	r1, [pc, #156]	@ (8010b14 <udp_input_local_match+0xb8>)
 8010a76:	4828      	ldr	r0, [pc, #160]	@ (8010b18 <udp_input_local_match+0xbc>)
 8010a78:	f003 fe82 	bl	8014780 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d105      	bne.n	8010a8e <udp_input_local_match+0x32>
 8010a82:	4b23      	ldr	r3, [pc, #140]	@ (8010b10 <udp_input_local_match+0xb4>)
 8010a84:	2288      	movs	r2, #136	@ 0x88
 8010a86:	4925      	ldr	r1, [pc, #148]	@ (8010b1c <udp_input_local_match+0xc0>)
 8010a88:	4823      	ldr	r0, [pc, #140]	@ (8010b18 <udp_input_local_match+0xbc>)
 8010a8a:	f003 fe79 	bl	8014780 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	7a1b      	ldrb	r3, [r3, #8]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d00b      	beq.n	8010aae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	7a1a      	ldrb	r2, [r3, #8]
 8010a9a:	4b21      	ldr	r3, [pc, #132]	@ (8010b20 <udp_input_local_match+0xc4>)
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d001      	beq.n	8010aae <udp_input_local_match+0x52>
    return 0;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e02b      	b.n	8010b06 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010aae:	79fb      	ldrb	r3, [r7, #7]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d018      	beq.n	8010ae6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d013      	beq.n	8010ae2 <udp_input_local_match+0x86>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00f      	beq.n	8010ae2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ac2:	4b17      	ldr	r3, [pc, #92]	@ (8010b20 <udp_input_local_match+0xc4>)
 8010ac4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010aca:	d00a      	beq.n	8010ae2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	4b13      	ldr	r3, [pc, #76]	@ (8010b20 <udp_input_local_match+0xc4>)
 8010ad2:	695b      	ldr	r3, [r3, #20]
 8010ad4:	405a      	eors	r2, r3
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	3308      	adds	r3, #8
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d110      	bne.n	8010b04 <udp_input_local_match+0xa8>
          return 1;
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	e00f      	b.n	8010b06 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d009      	beq.n	8010b00 <udp_input_local_match+0xa4>
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d005      	beq.n	8010b00 <udp_input_local_match+0xa4>
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681a      	ldr	r2, [r3, #0]
 8010af8:	4b09      	ldr	r3, [pc, #36]	@ (8010b20 <udp_input_local_match+0xc4>)
 8010afa:	695b      	ldr	r3, [r3, #20]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d101      	bne.n	8010b04 <udp_input_local_match+0xa8>
        return 1;
 8010b00:	2301      	movs	r3, #1
 8010b02:	e000      	b.n	8010b06 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	08017a58 	.word	0x08017a58
 8010b14:	08017a88 	.word	0x08017a88
 8010b18:	08017aac 	.word	0x08017aac
 8010b1c:	08017ad4 	.word	0x08017ad4
 8010b20:	200051b8 	.word	0x200051b8

08010b24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010b24:	b590      	push	{r4, r7, lr}
 8010b26:	b08d      	sub	sp, #52	@ 0x34
 8010b28:	af02      	add	r7, sp, #8
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d105      	bne.n	8010b44 <udp_input+0x20>
 8010b38:	4b95      	ldr	r3, [pc, #596]	@ (8010d90 <udp_input+0x26c>)
 8010b3a:	22cf      	movs	r2, #207	@ 0xcf
 8010b3c:	4995      	ldr	r1, [pc, #596]	@ (8010d94 <udp_input+0x270>)
 8010b3e:	4896      	ldr	r0, [pc, #600]	@ (8010d98 <udp_input+0x274>)
 8010b40:	f003 fe1e 	bl	8014780 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d105      	bne.n	8010b56 <udp_input+0x32>
 8010b4a:	4b91      	ldr	r3, [pc, #580]	@ (8010d90 <udp_input+0x26c>)
 8010b4c:	22d0      	movs	r2, #208	@ 0xd0
 8010b4e:	4993      	ldr	r1, [pc, #588]	@ (8010d9c <udp_input+0x278>)
 8010b50:	4891      	ldr	r0, [pc, #580]	@ (8010d98 <udp_input+0x274>)
 8010b52:	f003 fe15 	bl	8014780 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	895b      	ldrh	r3, [r3, #10]
 8010b5a:	2b07      	cmp	r3, #7
 8010b5c:	d809      	bhi.n	8010b72 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	891b      	ldrh	r3, [r3, #8]
 8010b62:	4619      	mov	r1, r3
 8010b64:	488e      	ldr	r0, [pc, #568]	@ (8010da0 <udp_input+0x27c>)
 8010b66:	f003 fe0b 	bl	8014780 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f7fa f9d2 	bl	800af14 <pbuf_free>
    goto end;
 8010b70:	e18d      	b.n	8010e8e <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010b78:	4b8a      	ldr	r3, [pc, #552]	@ (8010da4 <udp_input+0x280>)
 8010b7a:	695b      	ldr	r3, [r3, #20]
 8010b7c:	4a89      	ldr	r2, [pc, #548]	@ (8010da4 <udp_input+0x280>)
 8010b7e:	6812      	ldr	r2, [r2, #0]
 8010b80:	4611      	mov	r1, r2
 8010b82:	4618      	mov	r0, r3
 8010b84:	f002 f9ca 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	891b      	ldrh	r3, [r3, #8]
 8010b90:	4619      	mov	r1, r3
 8010b92:	4885      	ldr	r0, [pc, #532]	@ (8010da8 <udp_input+0x284>)
 8010b94:	f003 fdf4 	bl	8014780 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7f8 fd68 	bl	8009674 <lwip_htons>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	885b      	ldrh	r3, [r3, #2]
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7f8 fd60 	bl	8009674 <lwip_htons>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8010bb8:	6978      	ldr	r0, [r7, #20]
 8010bba:	f000 fd3b 	bl	8011634 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8010bbe:	487b      	ldr	r0, [pc, #492]	@ (8010dac <udp_input+0x288>)
 8010bc0:	f003 fdde 	bl	8014780 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8010bc4:	4b77      	ldr	r3, [pc, #476]	@ (8010da4 <udp_input+0x280>)
 8010bc6:	695b      	ldr	r3, [r3, #20]
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	4619      	mov	r1, r3
 8010bcc:	4b75      	ldr	r3, [pc, #468]	@ (8010da4 <udp_input+0x280>)
 8010bce:	695b      	ldr	r3, [r3, #20]
 8010bd0:	0a1b      	lsrs	r3, r3, #8
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	4b73      	ldr	r3, [pc, #460]	@ (8010da4 <udp_input+0x280>)
 8010bd8:	695b      	ldr	r3, [r3, #20]
 8010bda:	0c1b      	lsrs	r3, r3, #16
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	4618      	mov	r0, r3
 8010be0:	4b70      	ldr	r3, [pc, #448]	@ (8010da4 <udp_input+0x280>)
 8010be2:	695b      	ldr	r3, [r3, #20]
 8010be4:	0e1b      	lsrs	r3, r3, #24
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	4603      	mov	r3, r0
 8010bec:	4870      	ldr	r0, [pc, #448]	@ (8010db0 <udp_input+0x28c>)
 8010bee:	f003 fdc7 	bl	8014780 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	885b      	ldrh	r3, [r3, #2]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7f8 fd3b 	bl	8009674 <lwip_htons>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	4619      	mov	r1, r3
 8010c02:	486c      	ldr	r0, [pc, #432]	@ (8010db4 <udp_input+0x290>)
 8010c04:	f003 fdbc 	bl	8014780 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 8010c08:	4b66      	ldr	r3, [pc, #408]	@ (8010da4 <udp_input+0x280>)
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	4619      	mov	r1, r3
 8010c10:	4b64      	ldr	r3, [pc, #400]	@ (8010da4 <udp_input+0x280>)
 8010c12:	691b      	ldr	r3, [r3, #16]
 8010c14:	0a1b      	lsrs	r3, r3, #8
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	461a      	mov	r2, r3
 8010c1a:	4b62      	ldr	r3, [pc, #392]	@ (8010da4 <udp_input+0x280>)
 8010c1c:	691b      	ldr	r3, [r3, #16]
 8010c1e:	0c1b      	lsrs	r3, r3, #16
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	4618      	mov	r0, r3
 8010c24:	4b5f      	ldr	r3, [pc, #380]	@ (8010da4 <udp_input+0x280>)
 8010c26:	691b      	ldr	r3, [r3, #16]
 8010c28:	0e1b      	lsrs	r3, r3, #24
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	9300      	str	r3, [sp, #0]
 8010c2e:	4603      	mov	r3, r0
 8010c30:	485f      	ldr	r0, [pc, #380]	@ (8010db0 <udp_input+0x28c>)
 8010c32:	f003 fda5 	bl	8014780 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7f8 fd19 	bl	8009674 <lwip_htons>
 8010c42:	4603      	mov	r3, r0
 8010c44:	4619      	mov	r1, r3
 8010c46:	485c      	ldr	r0, [pc, #368]	@ (8010db8 <udp_input+0x294>)
 8010c48:	f003 fd9a 	bl	8014780 <iprintf>

  pcb = NULL;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8010c50:	2300      	movs	r3, #0
 8010c52:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010c54:	2300      	movs	r3, #0
 8010c56:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c58:	4b58      	ldr	r3, [pc, #352]	@ (8010dbc <udp_input+0x298>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c5e:	e091      	b.n	8010d84 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 8010c60:	4857      	ldr	r0, [pc, #348]	@ (8010dc0 <udp_input+0x29c>)
 8010c62:	f003 fd8d 	bl	8014780 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8010c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	0a1b      	lsrs	r3, r3, #8
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	461a      	mov	r2, r3
 8010c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	0c1b      	lsrs	r3, r3, #16
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	4618      	mov	r0, r3
 8010c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	0e1b      	lsrs	r3, r3, #24
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	9300      	str	r3, [sp, #0]
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	4848      	ldr	r0, [pc, #288]	@ (8010db0 <udp_input+0x28c>)
 8010c90:	f003 fd76 	bl	8014780 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8010c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c96:	8a5b      	ldrh	r3, [r3, #18]
 8010c98:	4619      	mov	r1, r3
 8010c9a:	4846      	ldr	r0, [pc, #280]	@ (8010db4 <udp_input+0x290>)
 8010c9c:	f003 fd70 	bl	8014780 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	0a1b      	lsrs	r3, r3, #8
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	0c1b      	lsrs	r3, r3, #16
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	4618      	mov	r0, r3
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	0e1b      	lsrs	r3, r3, #24
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	9300      	str	r3, [sp, #0]
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	4839      	ldr	r0, [pc, #228]	@ (8010db0 <udp_input+0x28c>)
 8010cca:	f003 fd59 	bl	8014780 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8010cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd0:	8a9b      	ldrh	r3, [r3, #20]
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	4838      	ldr	r0, [pc, #224]	@ (8010db8 <udp_input+0x294>)
 8010cd6:	f003 fd53 	bl	8014780 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cdc:	8a5b      	ldrh	r3, [r3, #18]
 8010cde:	89fa      	ldrh	r2, [r7, #14]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d14a      	bne.n	8010d7a <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010ce4:	7cfb      	ldrb	r3, [r7, #19]
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	6839      	ldr	r1, [r7, #0]
 8010cea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010cec:	f7ff feb6 	bl	8010a5c <udp_input_local_match>
 8010cf0:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d041      	beq.n	8010d7a <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf8:	7c1b      	ldrb	r3, [r3, #16]
 8010cfa:	f003 0304 	and.w	r3, r3, #4
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d11d      	bne.n	8010d3e <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 8010d02:	69fb      	ldr	r3, [r7, #28]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d102      	bne.n	8010d0e <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d0a:	61fb      	str	r3, [r7, #28]
 8010d0c:	e017      	b.n	8010d3e <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010d0e:	7cfb      	ldrb	r3, [r7, #19]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d014      	beq.n	8010d3e <udp_input+0x21a>
 8010d14:	4b23      	ldr	r3, [pc, #140]	@ (8010da4 <udp_input+0x280>)
 8010d16:	695b      	ldr	r3, [r3, #20]
 8010d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d1c:	d10f      	bne.n	8010d3e <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	681a      	ldr	r2, [r3, #0]
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	3304      	adds	r3, #4
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d008      	beq.n	8010d3e <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2e:	681a      	ldr	r2, [r3, #0]
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	3304      	adds	r3, #4
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d101      	bne.n	8010d3e <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 8010d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3c:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d40:	8a9b      	ldrh	r3, [r3, #20]
 8010d42:	8a3a      	ldrh	r2, [r7, #16]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d118      	bne.n	8010d7a <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d005      	beq.n	8010d5c <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d52:	685a      	ldr	r2, [r3, #4]
 8010d54:	4b13      	ldr	r3, [pc, #76]	@ (8010da4 <udp_input+0x280>)
 8010d56:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d10e      	bne.n	8010d7a <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010d5c:	6a3b      	ldr	r3, [r7, #32]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d030      	beq.n	8010dc4 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d64:	68da      	ldr	r2, [r3, #12]
 8010d66:	6a3b      	ldr	r3, [r7, #32]
 8010d68:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010d6a:	4b14      	ldr	r3, [pc, #80]	@ (8010dbc <udp_input+0x298>)
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d70:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010d72:	4a12      	ldr	r2, [pc, #72]	@ (8010dbc <udp_input+0x298>)
 8010d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d76:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010d78:	e024      	b.n	8010dc4 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d7c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d80:	68db      	ldr	r3, [r3, #12]
 8010d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	f47f af6a 	bne.w	8010c60 <udp_input+0x13c>
 8010d8c:	e01b      	b.n	8010dc6 <udp_input+0x2a2>
 8010d8e:	bf00      	nop
 8010d90:	08017a58 	.word	0x08017a58
 8010d94:	08017afc 	.word	0x08017afc
 8010d98:	08017aac 	.word	0x08017aac
 8010d9c:	08017b14 	.word	0x08017b14
 8010da0:	08017b30 	.word	0x08017b30
 8010da4:	200051b8 	.word	0x200051b8
 8010da8:	08017b68 	.word	0x08017b68
 8010dac:	08017b94 	.word	0x08017b94
 8010db0:	08017b9c 	.word	0x08017b9c
 8010db4:	08017bac 	.word	0x08017bac
 8010db8:	08017bbc 	.word	0x08017bbc
 8010dbc:	20008174 	.word	0x20008174
 8010dc0:	08017bc4 	.word	0x08017bc4
        break;
 8010dc4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d101      	bne.n	8010dd0 <udp_input+0x2ac>
    pcb = uncon_pcb;
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d002      	beq.n	8010ddc <udp_input+0x2b8>
    for_us = 1;
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	76fb      	strb	r3, [r7, #27]
 8010dda:	e00a      	b.n	8010df2 <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	3304      	adds	r3, #4
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	4b2d      	ldr	r3, [pc, #180]	@ (8010e98 <udp_input+0x374>)
 8010de4:	695b      	ldr	r3, [r3, #20]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	bf0c      	ite	eq
 8010dea:	2301      	moveq	r3, #1
 8010dec:	2300      	movne	r3, #0
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010df2:	7efb      	ldrb	r3, [r7, #27]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d047      	beq.n	8010e88 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8010df8:	4828      	ldr	r0, [pc, #160]	@ (8010e9c <udp_input+0x378>)
 8010dfa:	f003 fd31 	bl	8014860 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010dfe:	2108      	movs	r1, #8
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7fa f801 	bl	800ae08 <pbuf_remove_header>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d00a      	beq.n	8010e22 <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010e0c:	4b24      	ldr	r3, [pc, #144]	@ (8010ea0 <udp_input+0x37c>)
 8010e0e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8010e12:	4924      	ldr	r1, [pc, #144]	@ (8010ea4 <udp_input+0x380>)
 8010e14:	4824      	ldr	r0, [pc, #144]	@ (8010ea8 <udp_input+0x384>)
 8010e16:	f003 fcb3 	bl	8014780 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7fa f87a 	bl	800af14 <pbuf_free>
      goto end;
 8010e20:	e035      	b.n	8010e8e <udp_input+0x36a>
    }

    if (pcb != NULL) {
 8010e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d012      	beq.n	8010e4e <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e2a:	699b      	ldr	r3, [r3, #24]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00a      	beq.n	8010e46 <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e32:	699c      	ldr	r4, [r3, #24]
 8010e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e36:	69d8      	ldr	r0, [r3, #28]
 8010e38:	8a3b      	ldrh	r3, [r7, #16]
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8010eac <udp_input+0x388>)
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010e42:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010e44:	e024      	b.n	8010e90 <udp_input+0x36c>
        pbuf_free(p);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f7fa f864 	bl	800af14 <pbuf_free>
        goto end;
 8010e4c:	e01f      	b.n	8010e8e <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 8010e4e:	4818      	ldr	r0, [pc, #96]	@ (8010eb0 <udp_input+0x38c>)
 8010e50:	f003 fd06 	bl	8014860 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010e54:	7cfb      	ldrb	r3, [r7, #19]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d112      	bne.n	8010e80 <udp_input+0x35c>
 8010e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8010e98 <udp_input+0x374>)
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010e62:	2be0      	cmp	r3, #224	@ 0xe0
 8010e64:	d00c      	beq.n	8010e80 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010e66:	4b0c      	ldr	r3, [pc, #48]	@ (8010e98 <udp_input+0x374>)
 8010e68:	899b      	ldrh	r3, [r3, #12]
 8010e6a:	3308      	adds	r3, #8
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	b21b      	sxth	r3, r3
 8010e70:	4619      	mov	r1, r3
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7fa f83b 	bl	800aeee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010e78:	2103      	movs	r1, #3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f001 fcee 	bl	801285c <icmp_dest_unreach>
      pbuf_free(p);
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7fa f847 	bl	800af14 <pbuf_free>
  return;
 8010e86:	e003      	b.n	8010e90 <udp_input+0x36c>
    pbuf_free(p);
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f7fa f843 	bl	800af14 <pbuf_free>
  return;
 8010e8e:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010e90:	372c      	adds	r7, #44	@ 0x2c
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd90      	pop	{r4, r7, pc}
 8010e96:	bf00      	nop
 8010e98:	200051b8 	.word	0x200051b8
 8010e9c:	08017bcc 	.word	0x08017bcc
 8010ea0:	08017a58 	.word	0x08017a58
 8010ea4:	08017bec 	.word	0x08017bec
 8010ea8:	08017aac 	.word	0x08017aac
 8010eac:	200051c8 	.word	0x200051c8
 8010eb0:	08017c08 	.word	0x08017c08

08010eb4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b088      	sub	sp, #32
 8010eb8:	af02      	add	r7, sp, #8
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	607a      	str	r2, [r7, #4]
 8010ec0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d109      	bne.n	8010edc <udp_sendto+0x28>
 8010ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8010fb8 <udp_sendto+0x104>)
 8010eca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010ece:	493b      	ldr	r1, [pc, #236]	@ (8010fbc <udp_sendto+0x108>)
 8010ed0:	483b      	ldr	r0, [pc, #236]	@ (8010fc0 <udp_sendto+0x10c>)
 8010ed2:	f003 fc55 	bl	8014780 <iprintf>
 8010ed6:	f06f 030f 	mvn.w	r3, #15
 8010eda:	e068      	b.n	8010fae <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d109      	bne.n	8010ef6 <udp_sendto+0x42>
 8010ee2:	4b35      	ldr	r3, [pc, #212]	@ (8010fb8 <udp_sendto+0x104>)
 8010ee4:	f240 2219 	movw	r2, #537	@ 0x219
 8010ee8:	4936      	ldr	r1, [pc, #216]	@ (8010fc4 <udp_sendto+0x110>)
 8010eea:	4835      	ldr	r0, [pc, #212]	@ (8010fc0 <udp_sendto+0x10c>)
 8010eec:	f003 fc48 	bl	8014780 <iprintf>
 8010ef0:	f06f 030f 	mvn.w	r3, #15
 8010ef4:	e05b      	b.n	8010fae <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d109      	bne.n	8010f10 <udp_sendto+0x5c>
 8010efc:	4b2e      	ldr	r3, [pc, #184]	@ (8010fb8 <udp_sendto+0x104>)
 8010efe:	f240 221a 	movw	r2, #538	@ 0x21a
 8010f02:	4931      	ldr	r1, [pc, #196]	@ (8010fc8 <udp_sendto+0x114>)
 8010f04:	482e      	ldr	r0, [pc, #184]	@ (8010fc0 <udp_sendto+0x10c>)
 8010f06:	f003 fc3b 	bl	8014780 <iprintf>
 8010f0a:	f06f 030f 	mvn.w	r3, #15
 8010f0e:	e04e      	b.n	8010fae <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 8010f10:	482e      	ldr	r0, [pc, #184]	@ (8010fcc <udp_sendto+0x118>)
 8010f12:	f003 fca5 	bl	8014860 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	7a1b      	ldrb	r3, [r3, #8]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d006      	beq.n	8010f2c <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	7a1b      	ldrb	r3, [r3, #8]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7f9 fc96 	bl	800a854 <netif_get_by_index>
 8010f28:	6178      	str	r0, [r7, #20]
 8010f2a:	e003      	b.n	8010f34 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f001 fd5f 	bl	80129f0 <ip4_route>
 8010f32:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d12f      	bne.n	8010f9a <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 8010f3a:	4825      	ldr	r0, [pc, #148]	@ (8010fd0 <udp_sendto+0x11c>)
 8010f3c:	f003 fc20 	bl	8014780 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d003      	beq.n	8010f4e <udp_sendto+0x9a>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	e000      	b.n	8010f50 <udp_sendto+0x9c>
 8010f4e:	2100      	movs	r1, #0
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d004      	beq.n	8010f60 <udp_sendto+0xac>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	e000      	b.n	8010f62 <udp_sendto+0xae>
 8010f60:	2200      	movs	r2, #0
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d004      	beq.n	8010f72 <udp_sendto+0xbe>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3302      	adds	r3, #2
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	e000      	b.n	8010f74 <udp_sendto+0xc0>
 8010f72:	2000      	movs	r0, #0
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d003      	beq.n	8010f82 <udp_sendto+0xce>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	3303      	adds	r3, #3
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	e000      	b.n	8010f84 <udp_sendto+0xd0>
 8010f82:	2300      	movs	r3, #0
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	4603      	mov	r3, r0
 8010f88:	4812      	ldr	r0, [pc, #72]	@ (8010fd4 <udp_sendto+0x120>)
 8010f8a:	f003 fbf9 	bl	8014780 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 8010f8e:	200a      	movs	r0, #10
 8010f90:	f003 fc08 	bl	80147a4 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010f94:	f06f 0303 	mvn.w	r3, #3
 8010f98:	e009      	b.n	8010fae <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010f9a:	887a      	ldrh	r2, [r7, #2]
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	9300      	str	r3, [sp, #0]
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	68b9      	ldr	r1, [r7, #8]
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	f000 f816 	bl	8010fd8 <udp_sendto_if>
 8010fac:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	08017a58 	.word	0x08017a58
 8010fbc:	08017c50 	.word	0x08017c50
 8010fc0:	08017aac 	.word	0x08017aac
 8010fc4:	08017c68 	.word	0x08017c68
 8010fc8:	08017c84 	.word	0x08017c84
 8010fcc:	08017ca0 	.word	0x08017ca0
 8010fd0:	08017cac 	.word	0x08017cac
 8010fd4:	08017b9c 	.word	0x08017b9c

08010fd8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b088      	sub	sp, #32
 8010fdc:	af02      	add	r7, sp, #8
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
 8010fe4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d109      	bne.n	8011000 <udp_sendto_if+0x28>
 8010fec:	4b2e      	ldr	r3, [pc, #184]	@ (80110a8 <udp_sendto_if+0xd0>)
 8010fee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ff2:	492e      	ldr	r1, [pc, #184]	@ (80110ac <udp_sendto_if+0xd4>)
 8010ff4:	482e      	ldr	r0, [pc, #184]	@ (80110b0 <udp_sendto_if+0xd8>)
 8010ff6:	f003 fbc3 	bl	8014780 <iprintf>
 8010ffa:	f06f 030f 	mvn.w	r3, #15
 8010ffe:	e04f      	b.n	80110a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d109      	bne.n	801101a <udp_sendto_if+0x42>
 8011006:	4b28      	ldr	r3, [pc, #160]	@ (80110a8 <udp_sendto_if+0xd0>)
 8011008:	f240 2281 	movw	r2, #641	@ 0x281
 801100c:	4929      	ldr	r1, [pc, #164]	@ (80110b4 <udp_sendto_if+0xdc>)
 801100e:	4828      	ldr	r0, [pc, #160]	@ (80110b0 <udp_sendto_if+0xd8>)
 8011010:	f003 fbb6 	bl	8014780 <iprintf>
 8011014:	f06f 030f 	mvn.w	r3, #15
 8011018:	e042      	b.n	80110a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d109      	bne.n	8011034 <udp_sendto_if+0x5c>
 8011020:	4b21      	ldr	r3, [pc, #132]	@ (80110a8 <udp_sendto_if+0xd0>)
 8011022:	f240 2282 	movw	r2, #642	@ 0x282
 8011026:	4924      	ldr	r1, [pc, #144]	@ (80110b8 <udp_sendto_if+0xe0>)
 8011028:	4821      	ldr	r0, [pc, #132]	@ (80110b0 <udp_sendto_if+0xd8>)
 801102a:	f003 fba9 	bl	8014780 <iprintf>
 801102e:	f06f 030f 	mvn.w	r3, #15
 8011032:	e035      	b.n	80110a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011034:	6a3b      	ldr	r3, [r7, #32]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d109      	bne.n	801104e <udp_sendto_if+0x76>
 801103a:	4b1b      	ldr	r3, [pc, #108]	@ (80110a8 <udp_sendto_if+0xd0>)
 801103c:	f240 2283 	movw	r2, #643	@ 0x283
 8011040:	491e      	ldr	r1, [pc, #120]	@ (80110bc <udp_sendto_if+0xe4>)
 8011042:	481b      	ldr	r0, [pc, #108]	@ (80110b0 <udp_sendto_if+0xd8>)
 8011044:	f003 fb9c 	bl	8014780 <iprintf>
 8011048:	f06f 030f 	mvn.w	r3, #15
 801104c:	e028      	b.n	80110a0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d009      	beq.n	8011068 <udp_sendto_if+0x90>
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d005      	beq.n	8011068 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011064:	2be0      	cmp	r3, #224	@ 0xe0
 8011066:	d103      	bne.n	8011070 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	3304      	adds	r3, #4
 801106c:	617b      	str	r3, [r7, #20]
 801106e:	e00b      	b.n	8011088 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	6a3b      	ldr	r3, [r7, #32]
 8011076:	3304      	adds	r3, #4
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	429a      	cmp	r2, r3
 801107c:	d002      	beq.n	8011084 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801107e:	f06f 0303 	mvn.w	r3, #3
 8011082:	e00d      	b.n	80110a0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011088:	887a      	ldrh	r2, [r7, #2]
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	9301      	str	r3, [sp, #4]
 801108e:	6a3b      	ldr	r3, [r7, #32]
 8011090:	9300      	str	r3, [sp, #0]
 8011092:	4613      	mov	r3, r2
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	68b9      	ldr	r1, [r7, #8]
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	f000 f811 	bl	80110c0 <udp_sendto_if_src>
 801109e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3718      	adds	r7, #24
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	08017a58 	.word	0x08017a58
 80110ac:	08017cc4 	.word	0x08017cc4
 80110b0:	08017aac 	.word	0x08017aac
 80110b4:	08017ce0 	.word	0x08017ce0
 80110b8:	08017cfc 	.word	0x08017cfc
 80110bc:	08017d1c 	.word	0x08017d1c

080110c0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b08c      	sub	sp, #48	@ 0x30
 80110c4:	af04      	add	r7, sp, #16
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	607a      	str	r2, [r7, #4]
 80110cc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d109      	bne.n	80110e8 <udp_sendto_if_src+0x28>
 80110d4:	4b7a      	ldr	r3, [pc, #488]	@ (80112c0 <udp_sendto_if_src+0x200>)
 80110d6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80110da:	497a      	ldr	r1, [pc, #488]	@ (80112c4 <udp_sendto_if_src+0x204>)
 80110dc:	487a      	ldr	r0, [pc, #488]	@ (80112c8 <udp_sendto_if_src+0x208>)
 80110de:	f003 fb4f 	bl	8014780 <iprintf>
 80110e2:	f06f 030f 	mvn.w	r3, #15
 80110e6:	e0e6      	b.n	80112b6 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d109      	bne.n	8011102 <udp_sendto_if_src+0x42>
 80110ee:	4b74      	ldr	r3, [pc, #464]	@ (80112c0 <udp_sendto_if_src+0x200>)
 80110f0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80110f4:	4975      	ldr	r1, [pc, #468]	@ (80112cc <udp_sendto_if_src+0x20c>)
 80110f6:	4874      	ldr	r0, [pc, #464]	@ (80112c8 <udp_sendto_if_src+0x208>)
 80110f8:	f003 fb42 	bl	8014780 <iprintf>
 80110fc:	f06f 030f 	mvn.w	r3, #15
 8011100:	e0d9      	b.n	80112b6 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d109      	bne.n	801111c <udp_sendto_if_src+0x5c>
 8011108:	4b6d      	ldr	r3, [pc, #436]	@ (80112c0 <udp_sendto_if_src+0x200>)
 801110a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801110e:	4970      	ldr	r1, [pc, #448]	@ (80112d0 <udp_sendto_if_src+0x210>)
 8011110:	486d      	ldr	r0, [pc, #436]	@ (80112c8 <udp_sendto_if_src+0x208>)
 8011112:	f003 fb35 	bl	8014780 <iprintf>
 8011116:	f06f 030f 	mvn.w	r3, #15
 801111a:	e0cc      	b.n	80112b6 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801111c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801111e:	2b00      	cmp	r3, #0
 8011120:	d109      	bne.n	8011136 <udp_sendto_if_src+0x76>
 8011122:	4b67      	ldr	r3, [pc, #412]	@ (80112c0 <udp_sendto_if_src+0x200>)
 8011124:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8011128:	496a      	ldr	r1, [pc, #424]	@ (80112d4 <udp_sendto_if_src+0x214>)
 801112a:	4867      	ldr	r0, [pc, #412]	@ (80112c8 <udp_sendto_if_src+0x208>)
 801112c:	f003 fb28 	bl	8014780 <iprintf>
 8011130:	f06f 030f 	mvn.w	r3, #15
 8011134:	e0bf      	b.n	80112b6 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011138:	2b00      	cmp	r3, #0
 801113a:	d109      	bne.n	8011150 <udp_sendto_if_src+0x90>
 801113c:	4b60      	ldr	r3, [pc, #384]	@ (80112c0 <udp_sendto_if_src+0x200>)
 801113e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8011142:	4965      	ldr	r1, [pc, #404]	@ (80112d8 <udp_sendto_if_src+0x218>)
 8011144:	4860      	ldr	r0, [pc, #384]	@ (80112c8 <udp_sendto_if_src+0x208>)
 8011146:	f003 fb1b 	bl	8014780 <iprintf>
 801114a:	f06f 030f 	mvn.w	r3, #15
 801114e:	e0b2      	b.n	80112b6 <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	8a5b      	ldrh	r3, [r3, #18]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d115      	bne.n	8011184 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 8011158:	4860      	ldr	r0, [pc, #384]	@ (80112dc <udp_sendto_if_src+0x21c>)
 801115a:	f003 fb81 	bl	8014860 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801115e:	68f9      	ldr	r1, [r7, #12]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	8a5b      	ldrh	r3, [r3, #18]
 8011164:	461a      	mov	r2, r3
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f000 f8cc 	bl	8011304 <udp_bind>
 801116c:	4603      	mov	r3, r0
 801116e:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011170:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d005      	beq.n	8011184 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 8011178:	4859      	ldr	r0, [pc, #356]	@ (80112e0 <udp_sendto_if_src+0x220>)
 801117a:	f003 fb71 	bl	8014860 <puts>
      return err;
 801117e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011182:	e098      	b.n	80112b6 <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	891b      	ldrh	r3, [r3, #8]
 8011188:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801118c:	4293      	cmp	r3, r2
 801118e:	d902      	bls.n	8011196 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 8011190:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011194:	e08f      	b.n	80112b6 <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011196:	2108      	movs	r1, #8
 8011198:	68b8      	ldr	r0, [r7, #8]
 801119a:	f7f9 fe25 	bl	800ade8 <pbuf_add_header>
 801119e:	4603      	mov	r3, r0
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d01d      	beq.n	80111e0 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80111a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80111a8:	2108      	movs	r1, #8
 80111aa:	2022      	movs	r0, #34	@ 0x22
 80111ac:	f7f9 fbce 	bl	800a94c <pbuf_alloc>
 80111b0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d105      	bne.n	80111c4 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 80111b8:	484a      	ldr	r0, [pc, #296]	@ (80112e4 <udp_sendto_if_src+0x224>)
 80111ba:	f003 fb51 	bl	8014860 <puts>
      return ERR_MEM;
 80111be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111c2:	e078      	b.n	80112b6 <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	891b      	ldrh	r3, [r3, #8]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d003      	beq.n	80111d4 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80111cc:	68b9      	ldr	r1, [r7, #8]
 80111ce:	69f8      	ldr	r0, [r7, #28]
 80111d0:	f7f9 ffb8 	bl	800b144 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 80111d4:	68ba      	ldr	r2, [r7, #8]
 80111d6:	69f9      	ldr	r1, [r7, #28]
 80111d8:	4843      	ldr	r0, [pc, #268]	@ (80112e8 <udp_sendto_if_src+0x228>)
 80111da:	f003 fad1 	bl	8014780 <iprintf>
 80111de:	e005      	b.n	80111ec <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 80111e4:	68b9      	ldr	r1, [r7, #8]
 80111e6:	4841      	ldr	r0, [pc, #260]	@ (80112ec <udp_sendto_if_src+0x22c>)
 80111e8:	f003 faca 	bl	8014780 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	895b      	ldrh	r3, [r3, #10]
 80111f0:	2b07      	cmp	r3, #7
 80111f2:	d806      	bhi.n	8011202 <udp_sendto_if_src+0x142>
 80111f4:	4b32      	ldr	r3, [pc, #200]	@ (80112c0 <udp_sendto_if_src+0x200>)
 80111f6:	f240 320d 	movw	r2, #781	@ 0x30d
 80111fa:	493d      	ldr	r1, [pc, #244]	@ (80112f0 <udp_sendto_if_src+0x230>)
 80111fc:	4832      	ldr	r0, [pc, #200]	@ (80112c8 <udp_sendto_if_src+0x208>)
 80111fe:	f003 fabf 	bl	8014780 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	8a5b      	ldrh	r3, [r3, #18]
 801120c:	4618      	mov	r0, r3
 801120e:	f7f8 fa31 	bl	8009674 <lwip_htons>
 8011212:	4603      	mov	r3, r0
 8011214:	461a      	mov	r2, r3
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801121a:	887b      	ldrh	r3, [r7, #2]
 801121c:	4618      	mov	r0, r3
 801121e:	f7f8 fa29 	bl	8009674 <lwip_htons>
 8011222:	4603      	mov	r3, r0
 8011224:	461a      	mov	r2, r3
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	2200      	movs	r2, #0
 801122e:	719a      	strb	r2, [r3, #6]
 8011230:	2200      	movs	r2, #0
 8011232:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	891b      	ldrh	r3, [r3, #8]
 8011238:	4619      	mov	r1, r3
 801123a:	482e      	ldr	r0, [pc, #184]	@ (80112f4 <udp_sendto_if_src+0x234>)
 801123c:	f003 faa0 	bl	8014780 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	891b      	ldrh	r3, [r3, #8]
 8011244:	4619      	mov	r1, r3
 8011246:	482c      	ldr	r0, [pc, #176]	@ (80112f8 <udp_sendto_if_src+0x238>)
 8011248:	f003 fa9a 	bl	8014780 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801124c:	69fb      	ldr	r3, [r7, #28]
 801124e:	891b      	ldrh	r3, [r3, #8]
 8011250:	4618      	mov	r0, r3
 8011252:	f7f8 fa0f 	bl	8009674 <lwip_htons>
 8011256:	4603      	mov	r3, r0
 8011258:	461a      	mov	r2, r3
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801125e:	2311      	movs	r3, #17
 8011260:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	7adb      	ldrb	r3, [r3, #11]
 8011266:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	88db      	ldrh	r3, [r3, #6]
 801126c:	b29b      	uxth	r3, r3
 801126e:	4619      	mov	r1, r3
 8011270:	4822      	ldr	r0, [pc, #136]	@ (80112fc <udp_sendto_if_src+0x23c>)
 8011272:	f003 fa85 	bl	8014780 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 8011276:	7cfb      	ldrb	r3, [r7, #19]
 8011278:	4619      	mov	r1, r3
 801127a:	4821      	ldr	r0, [pc, #132]	@ (8011300 <udp_sendto_if_src+0x240>)
 801127c:	f003 fa80 	bl	8014780 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	7a9b      	ldrb	r3, [r3, #10]
 8011284:	7cb9      	ldrb	r1, [r7, #18]
 8011286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011288:	9202      	str	r2, [sp, #8]
 801128a:	7cfa      	ldrb	r2, [r7, #19]
 801128c:	9201      	str	r2, [sp, #4]
 801128e:	9300      	str	r3, [sp, #0]
 8011290:	460b      	mov	r3, r1
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011296:	69f8      	ldr	r0, [r7, #28]
 8011298:	f001 fd92 	bl	8012dc0 <ip4_output_if_src>
 801129c:	4603      	mov	r3, r0
 801129e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80112a0:	69fa      	ldr	r2, [r7, #28]
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d004      	beq.n	80112b2 <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 80112a8:	69f8      	ldr	r0, [r7, #28]
 80112aa:	f7f9 fe33 	bl	800af14 <pbuf_free>
    q = NULL;
 80112ae:	2300      	movs	r3, #0
 80112b0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80112b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3720      	adds	r7, #32
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	08017a58 	.word	0x08017a58
 80112c4:	08017d3c 	.word	0x08017d3c
 80112c8:	08017aac 	.word	0x08017aac
 80112cc:	08017d5c 	.word	0x08017d5c
 80112d0:	08017d7c 	.word	0x08017d7c
 80112d4:	08017da0 	.word	0x08017da0
 80112d8:	08017dc4 	.word	0x08017dc4
 80112dc:	08017de8 	.word	0x08017de8
 80112e0:	08017e18 	.word	0x08017e18
 80112e4:	08017e3c 	.word	0x08017e3c
 80112e8:	08017e60 	.word	0x08017e60
 80112ec:	08017e98 	.word	0x08017e98
 80112f0:	08017ec4 	.word	0x08017ec4
 80112f4:	08017ef4 	.word	0x08017ef4
 80112f8:	08017f20 	.word	0x08017f20
 80112fc:	08017f44 	.word	0x08017f44
 8011300:	08017f64 	.word	0x08017f64

08011304 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b088      	sub	sp, #32
 8011308:	af02      	add	r7, sp, #8
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	4613      	mov	r3, r2
 8011310:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d101      	bne.n	801131c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011318:	4b65      	ldr	r3, [pc, #404]	@ (80114b0 <udp_bind+0x1ac>)
 801131a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d109      	bne.n	8011336 <udp_bind+0x32>
 8011322:	4b64      	ldr	r3, [pc, #400]	@ (80114b4 <udp_bind+0x1b0>)
 8011324:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8011328:	4963      	ldr	r1, [pc, #396]	@ (80114b8 <udp_bind+0x1b4>)
 801132a:	4864      	ldr	r0, [pc, #400]	@ (80114bc <udp_bind+0x1b8>)
 801132c:	f003 fa28 	bl	8014780 <iprintf>
 8011330:	f06f 030f 	mvn.w	r3, #15
 8011334:	e0b7      	b.n	80114a6 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 8011336:	4862      	ldr	r0, [pc, #392]	@ (80114c0 <udp_bind+0x1bc>)
 8011338:	f003 fa22 	bl	8014780 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d003      	beq.n	801134a <udp_bind+0x46>
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	4619      	mov	r1, r3
 8011348:	e000      	b.n	801134c <udp_bind+0x48>
 801134a:	2100      	movs	r1, #0
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d004      	beq.n	801135c <udp_bind+0x58>
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	3301      	adds	r3, #1
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	461a      	mov	r2, r3
 801135a:	e000      	b.n	801135e <udp_bind+0x5a>
 801135c:	2200      	movs	r2, #0
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d004      	beq.n	801136e <udp_bind+0x6a>
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	3302      	adds	r3, #2
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	4618      	mov	r0, r3
 801136c:	e000      	b.n	8011370 <udp_bind+0x6c>
 801136e:	2000      	movs	r0, #0
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d003      	beq.n	801137e <udp_bind+0x7a>
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	3303      	adds	r3, #3
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	e000      	b.n	8011380 <udp_bind+0x7c>
 801137e:	2300      	movs	r3, #0
 8011380:	9300      	str	r3, [sp, #0]
 8011382:	4603      	mov	r3, r0
 8011384:	484f      	ldr	r0, [pc, #316]	@ (80114c4 <udp_bind+0x1c0>)
 8011386:	f003 f9fb 	bl	8014780 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801138a:	88fb      	ldrh	r3, [r7, #6]
 801138c:	4619      	mov	r1, r3
 801138e:	484e      	ldr	r0, [pc, #312]	@ (80114c8 <udp_bind+0x1c4>)
 8011390:	f003 f9f6 	bl	8014780 <iprintf>

  rebind = 0;
 8011394:	2300      	movs	r3, #0
 8011396:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011398:	4b4c      	ldr	r3, [pc, #304]	@ (80114cc <udp_bind+0x1c8>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	617b      	str	r3, [r7, #20]
 801139e:	e009      	b.n	80113b4 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d102      	bne.n	80113ae <udp_bind+0xaa>
      rebind = 1;
 80113a8:	2301      	movs	r3, #1
 80113aa:	74fb      	strb	r3, [r7, #19]
      break;
 80113ac:	e005      	b.n	80113ba <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	617b      	str	r3, [r7, #20]
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d1f2      	bne.n	80113a0 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80113ba:	88fb      	ldrh	r3, [r7, #6]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d10c      	bne.n	80113da <udp_bind+0xd6>
    port = udp_new_port();
 80113c0:	f7ff fb14 	bl	80109ec <udp_new_port>
 80113c4:	4603      	mov	r3, r0
 80113c6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80113c8:	88fb      	ldrh	r3, [r7, #6]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d134      	bne.n	8011438 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 80113ce:	4840      	ldr	r0, [pc, #256]	@ (80114d0 <udp_bind+0x1cc>)
 80113d0:	f003 fa46 	bl	8014860 <puts>
      return ERR_USE;
 80113d4:	f06f 0307 	mvn.w	r3, #7
 80113d8:	e065      	b.n	80114a6 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80113da:	4b3c      	ldr	r3, [pc, #240]	@ (80114cc <udp_bind+0x1c8>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	617b      	str	r3, [r7, #20]
 80113e0:	e027      	b.n	8011432 <udp_bind+0x12e>
      if (pcb != ipcb) {
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d020      	beq.n	801142c <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	8a5b      	ldrh	r3, [r3, #18]
 80113ee:	88fa      	ldrh	r2, [r7, #6]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d11b      	bne.n	801142c <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d00d      	beq.n	801141c <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d00a      	beq.n	801141c <udp_bind+0x118>
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d006      	beq.n	801141c <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801140e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011410:	2b00      	cmp	r3, #0
 8011412:	d003      	beq.n	801141c <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d107      	bne.n	801142c <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801141c:	88fb      	ldrh	r3, [r7, #6]
 801141e:	4619      	mov	r1, r3
 8011420:	482c      	ldr	r0, [pc, #176]	@ (80114d4 <udp_bind+0x1d0>)
 8011422:	f003 f9ad 	bl	8014780 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011426:	f06f 0307 	mvn.w	r3, #7
 801142a:	e03c      	b.n	80114a6 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	617b      	str	r3, [r7, #20]
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d1d4      	bne.n	80113e2 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d002      	beq.n	8011444 <udp_bind+0x140>
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	e000      	b.n	8011446 <udp_bind+0x142>
 8011444:	2300      	movs	r3, #0
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	88fa      	ldrh	r2, [r7, #6]
 801144e:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011450:	7cfb      	ldrb	r3, [r7, #19]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d106      	bne.n	8011464 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011456:	4b1d      	ldr	r3, [pc, #116]	@ (80114cc <udp_bind+0x1c8>)
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801145e:	4a1b      	ldr	r2, [pc, #108]	@ (80114cc <udp_bind+0x1c8>)
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 8011464:	481c      	ldr	r0, [pc, #112]	@ (80114d8 <udp_bind+0x1d4>)
 8011466:	f003 f98b 	bl	8014780 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	b2db      	uxtb	r3, r3
 8011470:	4619      	mov	r1, r3
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	0a1b      	lsrs	r3, r3, #8
 8011478:	b2db      	uxtb	r3, r3
 801147a:	461a      	mov	r2, r3
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	0c1b      	lsrs	r3, r3, #16
 8011482:	b2db      	uxtb	r3, r3
 8011484:	4618      	mov	r0, r3
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	0e1b      	lsrs	r3, r3, #24
 801148c:	b2db      	uxtb	r3, r3
 801148e:	9300      	str	r3, [sp, #0]
 8011490:	4603      	mov	r3, r0
 8011492:	480c      	ldr	r0, [pc, #48]	@ (80114c4 <udp_bind+0x1c0>)
 8011494:	f003 f974 	bl	8014780 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	8a5b      	ldrh	r3, [r3, #18]
 801149c:	4619      	mov	r1, r3
 801149e:	480f      	ldr	r0, [pc, #60]	@ (80114dc <udp_bind+0x1d8>)
 80114a0:	f003 f96e 	bl	8014780 <iprintf>
  return ERR_OK;
 80114a4:	2300      	movs	r3, #0
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3718      	adds	r7, #24
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	08018e10 	.word	0x08018e10
 80114b4:	08017a58 	.word	0x08017a58
 80114b8:	08017f8c 	.word	0x08017f8c
 80114bc:	08017aac 	.word	0x08017aac
 80114c0:	08017fa4 	.word	0x08017fa4
 80114c4:	08017b9c 	.word	0x08017b9c
 80114c8:	08017fb8 	.word	0x08017fb8
 80114cc:	20008174 	.word	0x20008174
 80114d0:	08017fc8 	.word	0x08017fc8
 80114d4:	08017fe8 	.word	0x08017fe8
 80114d8:	08018020 	.word	0x08018020
 80114dc:	08018034 	.word	0x08018034

080114e0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d107      	bne.n	8011502 <udp_recv+0x22>
 80114f2:	4b08      	ldr	r3, [pc, #32]	@ (8011514 <udp_recv+0x34>)
 80114f4:	f240 428a 	movw	r2, #1162	@ 0x48a
 80114f8:	4907      	ldr	r1, [pc, #28]	@ (8011518 <udp_recv+0x38>)
 80114fa:	4808      	ldr	r0, [pc, #32]	@ (801151c <udp_recv+0x3c>)
 80114fc:	f003 f940 	bl	8014780 <iprintf>
 8011500:	e005      	b.n	801150e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	68ba      	ldr	r2, [r7, #8]
 8011506:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	61da      	str	r2, [r3, #28]
}
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	08017a58 	.word	0x08017a58
 8011518:	080180b4 	.word	0x080180b4
 801151c:	08017aac 	.word	0x08017aac

08011520 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d107      	bne.n	801153e <udp_remove+0x1e>
 801152e:	4b19      	ldr	r3, [pc, #100]	@ (8011594 <udp_remove+0x74>)
 8011530:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8011534:	4918      	ldr	r1, [pc, #96]	@ (8011598 <udp_remove+0x78>)
 8011536:	4819      	ldr	r0, [pc, #100]	@ (801159c <udp_remove+0x7c>)
 8011538:	f003 f922 	bl	8014780 <iprintf>
 801153c:	e026      	b.n	801158c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801153e:	4b18      	ldr	r3, [pc, #96]	@ (80115a0 <udp_remove+0x80>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	429a      	cmp	r2, r3
 8011546:	d105      	bne.n	8011554 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011548:	4b15      	ldr	r3, [pc, #84]	@ (80115a0 <udp_remove+0x80>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	68db      	ldr	r3, [r3, #12]
 801154e:	4a14      	ldr	r2, [pc, #80]	@ (80115a0 <udp_remove+0x80>)
 8011550:	6013      	str	r3, [r2, #0]
 8011552:	e017      	b.n	8011584 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011554:	4b12      	ldr	r3, [pc, #72]	@ (80115a0 <udp_remove+0x80>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	60fb      	str	r3, [r7, #12]
 801155a:	e010      	b.n	801157e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d009      	beq.n	8011578 <udp_remove+0x58>
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	429a      	cmp	r2, r3
 801156c:	d104      	bne.n	8011578 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	68da      	ldr	r2, [r3, #12]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	60da      	str	r2, [r3, #12]
        break;
 8011576:	e005      	b.n	8011584 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	60fb      	str	r3, [r7, #12]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d1eb      	bne.n	801155c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011584:	6879      	ldr	r1, [r7, #4]
 8011586:	2000      	movs	r0, #0
 8011588:	f7f8 fd58 	bl	800a03c <memp_free>
}
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	08017a58 	.word	0x08017a58
 8011598:	080180cc 	.word	0x080180cc
 801159c:	08017aac 	.word	0x08017aac
 80115a0:	20008174 	.word	0x20008174

080115a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80115aa:	2000      	movs	r0, #0
 80115ac:	f7f8 fcd6 	bl	8009f5c <memp_malloc>
 80115b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d007      	beq.n	80115c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80115b8:	2220      	movs	r2, #32
 80115ba:	2100      	movs	r1, #0
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f003 fa3f 	bl	8014a40 <memset>
    pcb->ttl = UDP_TTL;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	22ff      	movs	r2, #255	@ 0xff
 80115c6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80115c8:	687b      	ldr	r3, [r7, #4]
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3708      	adds	r7, #8
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
	...

080115d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d01e      	beq.n	8011622 <udp_netif_ip_addr_changed+0x4e>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d01a      	beq.n	8011622 <udp_netif_ip_addr_changed+0x4e>
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d017      	beq.n	8011622 <udp_netif_ip_addr_changed+0x4e>
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d013      	beq.n	8011622 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80115fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011630 <udp_netif_ip_addr_changed+0x5c>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	60fb      	str	r3, [r7, #12]
 8011600:	e00c      	b.n	801161c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	429a      	cmp	r2, r3
 801160c:	d103      	bne.n	8011616 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	68db      	ldr	r3, [r3, #12]
 801161a:	60fb      	str	r3, [r7, #12]
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1ef      	bne.n	8011602 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011622:	bf00      	nop
 8011624:	3714      	adds	r7, #20
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	20008174 	.word	0x20008174

08011634 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8011634:	b590      	push	{r4, r7, lr}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801163c:	481b      	ldr	r0, [pc, #108]	@ (80116ac <udp_debug_print+0x78>)
 801163e:	f003 f90f 	bl	8014860 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8011642:	481b      	ldr	r0, [pc, #108]	@ (80116b0 <udp_debug_print+0x7c>)
 8011644:	f003 f90c 	bl	8014860 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	b29b      	uxth	r3, r3
 801164e:	4618      	mov	r0, r3
 8011650:	f7f8 f810 	bl	8009674 <lwip_htons>
 8011654:	4603      	mov	r3, r0
 8011656:	461c      	mov	r4, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	885b      	ldrh	r3, [r3, #2]
 801165c:	b29b      	uxth	r3, r3
 801165e:	4618      	mov	r0, r3
 8011660:	f7f8 f808 	bl	8009674 <lwip_htons>
 8011664:	4603      	mov	r3, r0
 8011666:	461a      	mov	r2, r3
 8011668:	4621      	mov	r1, r4
 801166a:	4812      	ldr	r0, [pc, #72]	@ (80116b4 <udp_debug_print+0x80>)
 801166c:	f003 f888 	bl	8014780 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8011670:	480f      	ldr	r0, [pc, #60]	@ (80116b0 <udp_debug_print+0x7c>)
 8011672:	f003 f8f5 	bl	8014860 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	889b      	ldrh	r3, [r3, #4]
 801167a:	b29b      	uxth	r3, r3
 801167c:	4618      	mov	r0, r3
 801167e:	f7f7 fff9 	bl	8009674 <lwip_htons>
 8011682:	4603      	mov	r3, r0
 8011684:	461c      	mov	r4, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	88db      	ldrh	r3, [r3, #6]
 801168a:	b29b      	uxth	r3, r3
 801168c:	4618      	mov	r0, r3
 801168e:	f7f7 fff1 	bl	8009674 <lwip_htons>
 8011692:	4603      	mov	r3, r0
 8011694:	461a      	mov	r2, r3
 8011696:	4621      	mov	r1, r4
 8011698:	4807      	ldr	r0, [pc, #28]	@ (80116b8 <udp_debug_print+0x84>)
 801169a:	f003 f871 	bl	8014780 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801169e:	4804      	ldr	r0, [pc, #16]	@ (80116b0 <udp_debug_print+0x7c>)
 80116a0:	f003 f8de 	bl	8014860 <puts>
}
 80116a4:	bf00      	nop
 80116a6:	370c      	adds	r7, #12
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd90      	pop	{r4, r7, pc}
 80116ac:	080180e4 	.word	0x080180e4
 80116b0:	080180f0 	.word	0x080180f0
 80116b4:	08018114 	.word	0x08018114
 80116b8:	0801814c 	.word	0x0801814c

080116bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80116c4:	492b      	ldr	r1, [pc, #172]	@ (8011774 <etharp_free_entry+0xb8>)
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	4613      	mov	r3, r2
 80116ca:	005b      	lsls	r3, r3, #1
 80116cc:	4413      	add	r3, r2
 80116ce:	00db      	lsls	r3, r3, #3
 80116d0:	440b      	add	r3, r1
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d013      	beq.n	8011700 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80116d8:	4926      	ldr	r1, [pc, #152]	@ (8011774 <etharp_free_entry+0xb8>)
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	4613      	mov	r3, r2
 80116de:	005b      	lsls	r3, r3, #1
 80116e0:	4413      	add	r3, r2
 80116e2:	00db      	lsls	r3, r3, #3
 80116e4:	440b      	add	r3, r1
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7f9 fc13 	bl	800af14 <pbuf_free>
    arp_table[i].q = NULL;
 80116ee:	4921      	ldr	r1, [pc, #132]	@ (8011774 <etharp_free_entry+0xb8>)
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	4613      	mov	r3, r2
 80116f4:	005b      	lsls	r3, r3, #1
 80116f6:	4413      	add	r3, r2
 80116f8:	00db      	lsls	r3, r3, #3
 80116fa:	440b      	add	r3, r1
 80116fc:	2200      	movs	r2, #0
 80116fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011700:	491c      	ldr	r1, [pc, #112]	@ (8011774 <etharp_free_entry+0xb8>)
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	4613      	mov	r3, r2
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	4413      	add	r3, r2
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	440b      	add	r3, r1
 801170e:	3314      	adds	r3, #20
 8011710:	2200      	movs	r2, #0
 8011712:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8011714:	4917      	ldr	r1, [pc, #92]	@ (8011774 <etharp_free_entry+0xb8>)
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	4613      	mov	r3, r2
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	4413      	add	r3, r2
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	440b      	add	r3, r1
 8011722:	3312      	adds	r3, #18
 8011724:	2200      	movs	r2, #0
 8011726:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8011728:	4912      	ldr	r1, [pc, #72]	@ (8011774 <etharp_free_entry+0xb8>)
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	4613      	mov	r3, r2
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	4413      	add	r3, r2
 8011732:	00db      	lsls	r3, r3, #3
 8011734:	440b      	add	r3, r1
 8011736:	3308      	adds	r3, #8
 8011738:	2200      	movs	r2, #0
 801173a:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801173c:	490d      	ldr	r1, [pc, #52]	@ (8011774 <etharp_free_entry+0xb8>)
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	4613      	mov	r3, r2
 8011742:	005b      	lsls	r3, r3, #1
 8011744:	4413      	add	r3, r2
 8011746:	00db      	lsls	r3, r3, #3
 8011748:	440b      	add	r3, r1
 801174a:	3304      	adds	r3, #4
 801174c:	2200      	movs	r2, #0
 801174e:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8011750:	4908      	ldr	r1, [pc, #32]	@ (8011774 <etharp_free_entry+0xb8>)
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	4613      	mov	r3, r2
 8011756:	005b      	lsls	r3, r3, #1
 8011758:	4413      	add	r3, r2
 801175a:	00db      	lsls	r3, r3, #3
 801175c:	440b      	add	r3, r1
 801175e:	3308      	adds	r3, #8
 8011760:	4a05      	ldr	r2, [pc, #20]	@ (8011778 <etharp_free_entry+0xbc>)
 8011762:	3304      	adds	r3, #4
 8011764:	6810      	ldr	r0, [r2, #0]
 8011766:	6018      	str	r0, [r3, #0]
 8011768:	8892      	ldrh	r2, [r2, #4]
 801176a:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801176c:	bf00      	nop
 801176e:	3708      	adds	r7, #8
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	20008178 	.word	0x20008178
 8011778:	08018e1c 	.word	0x08018e1c

0801177c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b082      	sub	sp, #8
 8011780:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011782:	2300      	movs	r3, #0
 8011784:	607b      	str	r3, [r7, #4]
 8011786:	e096      	b.n	80118b6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011788:	494f      	ldr	r1, [pc, #316]	@ (80118c8 <etharp_tmr+0x14c>)
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	4613      	mov	r3, r2
 801178e:	005b      	lsls	r3, r3, #1
 8011790:	4413      	add	r3, r2
 8011792:	00db      	lsls	r3, r3, #3
 8011794:	440b      	add	r3, r1
 8011796:	3314      	adds	r3, #20
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801179c:	78fb      	ldrb	r3, [r7, #3]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f000 8086 	beq.w	80118b0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80117a4:	4948      	ldr	r1, [pc, #288]	@ (80118c8 <etharp_tmr+0x14c>)
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	4613      	mov	r3, r2
 80117aa:	005b      	lsls	r3, r3, #1
 80117ac:	4413      	add	r3, r2
 80117ae:	00db      	lsls	r3, r3, #3
 80117b0:	440b      	add	r3, r1
 80117b2:	3312      	adds	r3, #18
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	3301      	adds	r3, #1
 80117b8:	b298      	uxth	r0, r3
 80117ba:	4943      	ldr	r1, [pc, #268]	@ (80118c8 <etharp_tmr+0x14c>)
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	4613      	mov	r3, r2
 80117c0:	005b      	lsls	r3, r3, #1
 80117c2:	4413      	add	r3, r2
 80117c4:	00db      	lsls	r3, r3, #3
 80117c6:	440b      	add	r3, r1
 80117c8:	3312      	adds	r3, #18
 80117ca:	4602      	mov	r2, r0
 80117cc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80117ce:	493e      	ldr	r1, [pc, #248]	@ (80118c8 <etharp_tmr+0x14c>)
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	4613      	mov	r3, r2
 80117d4:	005b      	lsls	r3, r3, #1
 80117d6:	4413      	add	r3, r2
 80117d8:	00db      	lsls	r3, r3, #3
 80117da:	440b      	add	r3, r1
 80117dc:	3312      	adds	r3, #18
 80117de:	881b      	ldrh	r3, [r3, #0]
 80117e0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80117e4:	d215      	bcs.n	8011812 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80117e6:	4938      	ldr	r1, [pc, #224]	@ (80118c8 <etharp_tmr+0x14c>)
 80117e8:	687a      	ldr	r2, [r7, #4]
 80117ea:	4613      	mov	r3, r2
 80117ec:	005b      	lsls	r3, r3, #1
 80117ee:	4413      	add	r3, r2
 80117f0:	00db      	lsls	r3, r3, #3
 80117f2:	440b      	add	r3, r1
 80117f4:	3314      	adds	r3, #20
 80117f6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	d10e      	bne.n	801181a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80117fc:	4932      	ldr	r1, [pc, #200]	@ (80118c8 <etharp_tmr+0x14c>)
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	4613      	mov	r3, r2
 8011802:	005b      	lsls	r3, r3, #1
 8011804:	4413      	add	r3, r2
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	440b      	add	r3, r1
 801180a:	3312      	adds	r3, #18
 801180c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801180e:	2b04      	cmp	r3, #4
 8011810:	d903      	bls.n	801181a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7ff ff52 	bl	80116bc <etharp_free_entry>
 8011818:	e04a      	b.n	80118b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801181a:	492b      	ldr	r1, [pc, #172]	@ (80118c8 <etharp_tmr+0x14c>)
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	4613      	mov	r3, r2
 8011820:	005b      	lsls	r3, r3, #1
 8011822:	4413      	add	r3, r2
 8011824:	00db      	lsls	r3, r3, #3
 8011826:	440b      	add	r3, r1
 8011828:	3314      	adds	r3, #20
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	2b03      	cmp	r3, #3
 801182e:	d10a      	bne.n	8011846 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011830:	4925      	ldr	r1, [pc, #148]	@ (80118c8 <etharp_tmr+0x14c>)
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	4613      	mov	r3, r2
 8011836:	005b      	lsls	r3, r3, #1
 8011838:	4413      	add	r3, r2
 801183a:	00db      	lsls	r3, r3, #3
 801183c:	440b      	add	r3, r1
 801183e:	3314      	adds	r3, #20
 8011840:	2204      	movs	r2, #4
 8011842:	701a      	strb	r2, [r3, #0]
 8011844:	e034      	b.n	80118b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011846:	4920      	ldr	r1, [pc, #128]	@ (80118c8 <etharp_tmr+0x14c>)
 8011848:	687a      	ldr	r2, [r7, #4]
 801184a:	4613      	mov	r3, r2
 801184c:	005b      	lsls	r3, r3, #1
 801184e:	4413      	add	r3, r2
 8011850:	00db      	lsls	r3, r3, #3
 8011852:	440b      	add	r3, r1
 8011854:	3314      	adds	r3, #20
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	2b04      	cmp	r3, #4
 801185a:	d10a      	bne.n	8011872 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801185c:	491a      	ldr	r1, [pc, #104]	@ (80118c8 <etharp_tmr+0x14c>)
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	4613      	mov	r3, r2
 8011862:	005b      	lsls	r3, r3, #1
 8011864:	4413      	add	r3, r2
 8011866:	00db      	lsls	r3, r3, #3
 8011868:	440b      	add	r3, r1
 801186a:	3314      	adds	r3, #20
 801186c:	2202      	movs	r2, #2
 801186e:	701a      	strb	r2, [r3, #0]
 8011870:	e01e      	b.n	80118b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011872:	4915      	ldr	r1, [pc, #84]	@ (80118c8 <etharp_tmr+0x14c>)
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	4613      	mov	r3, r2
 8011878:	005b      	lsls	r3, r3, #1
 801187a:	4413      	add	r3, r2
 801187c:	00db      	lsls	r3, r3, #3
 801187e:	440b      	add	r3, r1
 8011880:	3314      	adds	r3, #20
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	2b01      	cmp	r3, #1
 8011886:	d113      	bne.n	80118b0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011888:	490f      	ldr	r1, [pc, #60]	@ (80118c8 <etharp_tmr+0x14c>)
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	4613      	mov	r3, r2
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	4413      	add	r3, r2
 8011892:	00db      	lsls	r3, r3, #3
 8011894:	440b      	add	r3, r1
 8011896:	3308      	adds	r3, #8
 8011898:	6818      	ldr	r0, [r3, #0]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	4613      	mov	r3, r2
 801189e:	005b      	lsls	r3, r3, #1
 80118a0:	4413      	add	r3, r2
 80118a2:	00db      	lsls	r3, r3, #3
 80118a4:	4a08      	ldr	r2, [pc, #32]	@ (80118c8 <etharp_tmr+0x14c>)
 80118a6:	4413      	add	r3, r2
 80118a8:	3304      	adds	r3, #4
 80118aa:	4619      	mov	r1, r3
 80118ac:	f000 fe6e 	bl	801258c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3301      	adds	r3, #1
 80118b4:	607b      	str	r3, [r7, #4]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2b09      	cmp	r3, #9
 80118ba:	f77f af65 	ble.w	8011788 <etharp_tmr+0xc>
      }
    }
  }
}
 80118be:	bf00      	nop
 80118c0:	bf00      	nop
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	20008178 	.word	0x20008178

080118cc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b08a      	sub	sp, #40	@ 0x28
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	460b      	mov	r3, r1
 80118d6:	607a      	str	r2, [r7, #4]
 80118d8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80118da:	230a      	movs	r3, #10
 80118dc:	843b      	strh	r3, [r7, #32]
 80118de:	230a      	movs	r3, #10
 80118e0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 80118e2:	230a      	movs	r3, #10
 80118e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 80118e6:	2300      	movs	r3, #0
 80118e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80118ea:	230a      	movs	r3, #10
 80118ec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80118ee:	2300      	movs	r3, #0
 80118f0:	83bb      	strh	r3, [r7, #28]
 80118f2:	2300      	movs	r3, #0
 80118f4:	837b      	strh	r3, [r7, #26]
 80118f6:	2300      	movs	r3, #0
 80118f8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118fa:	2300      	movs	r3, #0
 80118fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80118fe:	e0ae      	b.n	8011a5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011900:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011904:	49a6      	ldr	r1, [pc, #664]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011906:	4613      	mov	r3, r2
 8011908:	005b      	lsls	r3, r3, #1
 801190a:	4413      	add	r3, r2
 801190c:	00db      	lsls	r3, r3, #3
 801190e:	440b      	add	r3, r1
 8011910:	3314      	adds	r3, #20
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011916:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801191a:	2b0a      	cmp	r3, #10
 801191c:	d105      	bne.n	801192a <etharp_find_entry+0x5e>
 801191e:	7dfb      	ldrb	r3, [r7, #23]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d102      	bne.n	801192a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011924:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011926:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011928:	e095      	b.n	8011a56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801192a:	7dfb      	ldrb	r3, [r7, #23]
 801192c:	2b00      	cmp	r3, #0
 801192e:	f000 8092 	beq.w	8011a56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011932:	7dfb      	ldrb	r3, [r7, #23]
 8011934:	2b01      	cmp	r3, #1
 8011936:	d009      	beq.n	801194c <etharp_find_entry+0x80>
 8011938:	7dfb      	ldrb	r3, [r7, #23]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d806      	bhi.n	801194c <etharp_find_entry+0x80>
 801193e:	4b99      	ldr	r3, [pc, #612]	@ (8011ba4 <etharp_find_entry+0x2d8>)
 8011940:	f240 1223 	movw	r2, #291	@ 0x123
 8011944:	4998      	ldr	r1, [pc, #608]	@ (8011ba8 <etharp_find_entry+0x2dc>)
 8011946:	4899      	ldr	r0, [pc, #612]	@ (8011bac <etharp_find_entry+0x2e0>)
 8011948:	f002 ff1a 	bl	8014780 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d020      	beq.n	8011994 <etharp_find_entry+0xc8>
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	6819      	ldr	r1, [r3, #0]
 8011956:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801195a:	4891      	ldr	r0, [pc, #580]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 801195c:	4613      	mov	r3, r2
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	4413      	add	r3, r2
 8011962:	00db      	lsls	r3, r3, #3
 8011964:	4403      	add	r3, r0
 8011966:	3304      	adds	r3, #4
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4299      	cmp	r1, r3
 801196c:	d112      	bne.n	8011994 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00c      	beq.n	801198e <etharp_find_entry+0xc2>
 8011974:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011978:	4989      	ldr	r1, [pc, #548]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 801197a:	4613      	mov	r3, r2
 801197c:	005b      	lsls	r3, r3, #1
 801197e:	4413      	add	r3, r2
 8011980:	00db      	lsls	r3, r3, #3
 8011982:	440b      	add	r3, r1
 8011984:	3308      	adds	r3, #8
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	429a      	cmp	r2, r3
 801198c:	d102      	bne.n	8011994 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801198e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011992:	e100      	b.n	8011b96 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011994:	7dfb      	ldrb	r3, [r7, #23]
 8011996:	2b01      	cmp	r3, #1
 8011998:	d140      	bne.n	8011a1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801199a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801199e:	4980      	ldr	r1, [pc, #512]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 80119a0:	4613      	mov	r3, r2
 80119a2:	005b      	lsls	r3, r3, #1
 80119a4:	4413      	add	r3, r2
 80119a6:	00db      	lsls	r3, r3, #3
 80119a8:	440b      	add	r3, r1
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d01a      	beq.n	80119e6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80119b0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80119b4:	497a      	ldr	r1, [pc, #488]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 80119b6:	4613      	mov	r3, r2
 80119b8:	005b      	lsls	r3, r3, #1
 80119ba:	4413      	add	r3, r2
 80119bc:	00db      	lsls	r3, r3, #3
 80119be:	440b      	add	r3, r1
 80119c0:	3312      	adds	r3, #18
 80119c2:	881b      	ldrh	r3, [r3, #0]
 80119c4:	8bba      	ldrh	r2, [r7, #28]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d845      	bhi.n	8011a56 <etharp_find_entry+0x18a>
            old_queue = i;
 80119ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80119cc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80119ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80119d2:	4973      	ldr	r1, [pc, #460]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 80119d4:	4613      	mov	r3, r2
 80119d6:	005b      	lsls	r3, r3, #1
 80119d8:	4413      	add	r3, r2
 80119da:	00db      	lsls	r3, r3, #3
 80119dc:	440b      	add	r3, r1
 80119de:	3312      	adds	r3, #18
 80119e0:	881b      	ldrh	r3, [r3, #0]
 80119e2:	83bb      	strh	r3, [r7, #28]
 80119e4:	e037      	b.n	8011a56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80119e6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80119ea:	496d      	ldr	r1, [pc, #436]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 80119ec:	4613      	mov	r3, r2
 80119ee:	005b      	lsls	r3, r3, #1
 80119f0:	4413      	add	r3, r2
 80119f2:	00db      	lsls	r3, r3, #3
 80119f4:	440b      	add	r3, r1
 80119f6:	3312      	adds	r3, #18
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	8b7a      	ldrh	r2, [r7, #26]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d82a      	bhi.n	8011a56 <etharp_find_entry+0x18a>
            old_pending = i;
 8011a00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011a02:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8011a04:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011a08:	4965      	ldr	r1, [pc, #404]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	005b      	lsls	r3, r3, #1
 8011a0e:	4413      	add	r3, r2
 8011a10:	00db      	lsls	r3, r3, #3
 8011a12:	440b      	add	r3, r1
 8011a14:	3312      	adds	r3, #18
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	837b      	strh	r3, [r7, #26]
 8011a1a:	e01c      	b.n	8011a56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011a1c:	7dfb      	ldrb	r3, [r7, #23]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d919      	bls.n	8011a56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011a22:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011a26:	495e      	ldr	r1, [pc, #376]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011a28:	4613      	mov	r3, r2
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	4413      	add	r3, r2
 8011a2e:	00db      	lsls	r3, r3, #3
 8011a30:	440b      	add	r3, r1
 8011a32:	3312      	adds	r3, #18
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	8b3a      	ldrh	r2, [r7, #24]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d80c      	bhi.n	8011a56 <etharp_find_entry+0x18a>
            old_stable = i;
 8011a3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011a3e:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8011a40:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011a44:	4956      	ldr	r1, [pc, #344]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011a46:	4613      	mov	r3, r2
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	4413      	add	r3, r2
 8011a4c:	00db      	lsls	r3, r3, #3
 8011a4e:	440b      	add	r3, r1
 8011a50:	3312      	adds	r3, #18
 8011a52:	881b      	ldrh	r3, [r3, #0]
 8011a54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011a58:	3301      	adds	r3, #1
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011a5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011a62:	2b09      	cmp	r3, #9
 8011a64:	f77f af4c 	ble.w	8011900 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011a68:	7afb      	ldrb	r3, [r7, #11]
 8011a6a:	f003 0302 	and.w	r3, r3, #2
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d108      	bne.n	8011a84 <etharp_find_entry+0x1b8>
 8011a72:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011a76:	2b0a      	cmp	r3, #10
 8011a78:	d107      	bne.n	8011a8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011a7a:	7afb      	ldrb	r3, [r7, #11]
 8011a7c:	f003 0301 	and.w	r3, r3, #1
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d102      	bne.n	8011a8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a88:	e085      	b.n	8011b96 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011a8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011a8e:	2b09      	cmp	r3, #9
 8011a90:	dc02      	bgt.n	8011a98 <etharp_find_entry+0x1cc>
    i = empty;
 8011a92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011a94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011a96:	e039      	b.n	8011b0c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011a98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011a9c:	2b09      	cmp	r3, #9
 8011a9e:	dc14      	bgt.n	8011aca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011aa0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011aa2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011aa4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011aa8:	493d      	ldr	r1, [pc, #244]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011aaa:	4613      	mov	r3, r2
 8011aac:	005b      	lsls	r3, r3, #1
 8011aae:	4413      	add	r3, r2
 8011ab0:	00db      	lsls	r3, r3, #3
 8011ab2:	440b      	add	r3, r1
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d018      	beq.n	8011aec <etharp_find_entry+0x220>
 8011aba:	4b3a      	ldr	r3, [pc, #232]	@ (8011ba4 <etharp_find_entry+0x2d8>)
 8011abc:	f240 126d 	movw	r2, #365	@ 0x16d
 8011ac0:	493b      	ldr	r1, [pc, #236]	@ (8011bb0 <etharp_find_entry+0x2e4>)
 8011ac2:	483a      	ldr	r0, [pc, #232]	@ (8011bac <etharp_find_entry+0x2e0>)
 8011ac4:	f002 fe5c 	bl	8014780 <iprintf>
 8011ac8:	e010      	b.n	8011aec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011aca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ace:	2b09      	cmp	r3, #9
 8011ad0:	dc02      	bgt.n	8011ad8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011ad2:	8c3b      	ldrh	r3, [r7, #32]
 8011ad4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011ad6:	e009      	b.n	8011aec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011ad8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011adc:	2b09      	cmp	r3, #9
 8011ade:	dc02      	bgt.n	8011ae6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011ae0:	8bfb      	ldrh	r3, [r7, #30]
 8011ae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011ae4:	e002      	b.n	8011aec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011aea:	e054      	b.n	8011b96 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011aec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011af0:	2b09      	cmp	r3, #9
 8011af2:	dd06      	ble.n	8011b02 <etharp_find_entry+0x236>
 8011af4:	4b2b      	ldr	r3, [pc, #172]	@ (8011ba4 <etharp_find_entry+0x2d8>)
 8011af6:	f240 127f 	movw	r2, #383	@ 0x17f
 8011afa:	492e      	ldr	r1, [pc, #184]	@ (8011bb4 <etharp_find_entry+0x2e8>)
 8011afc:	482b      	ldr	r0, [pc, #172]	@ (8011bac <etharp_find_entry+0x2e0>)
 8011afe:	f002 fe3f 	bl	8014780 <iprintf>
    etharp_free_entry(i);
 8011b02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7ff fdd8 	bl	80116bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011b10:	2b09      	cmp	r3, #9
 8011b12:	dd06      	ble.n	8011b22 <etharp_find_entry+0x256>
 8011b14:	4b23      	ldr	r3, [pc, #140]	@ (8011ba4 <etharp_find_entry+0x2d8>)
 8011b16:	f240 1283 	movw	r2, #387	@ 0x183
 8011b1a:	4926      	ldr	r1, [pc, #152]	@ (8011bb4 <etharp_find_entry+0x2e8>)
 8011b1c:	4823      	ldr	r0, [pc, #140]	@ (8011bac <etharp_find_entry+0x2e0>)
 8011b1e:	f002 fe2f 	bl	8014780 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011b22:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011b26:	491e      	ldr	r1, [pc, #120]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011b28:	4613      	mov	r3, r2
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	4413      	add	r3, r2
 8011b2e:	00db      	lsls	r3, r3, #3
 8011b30:	440b      	add	r3, r1
 8011b32:	3314      	adds	r3, #20
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d006      	beq.n	8011b48 <etharp_find_entry+0x27c>
 8011b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8011ba4 <etharp_find_entry+0x2d8>)
 8011b3c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011b40:	491d      	ldr	r1, [pc, #116]	@ (8011bb8 <etharp_find_entry+0x2ec>)
 8011b42:	481a      	ldr	r0, [pc, #104]	@ (8011bac <etharp_find_entry+0x2e0>)
 8011b44:	f002 fe1c 	bl	8014780 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d00b      	beq.n	8011b66 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011b4e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	6819      	ldr	r1, [r3, #0]
 8011b56:	4812      	ldr	r0, [pc, #72]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011b58:	4613      	mov	r3, r2
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	4413      	add	r3, r2
 8011b5e:	00db      	lsls	r3, r3, #3
 8011b60:	4403      	add	r3, r0
 8011b62:	3304      	adds	r3, #4
 8011b64:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011b66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011b6a:	490d      	ldr	r1, [pc, #52]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	005b      	lsls	r3, r3, #1
 8011b70:	4413      	add	r3, r2
 8011b72:	00db      	lsls	r3, r3, #3
 8011b74:	440b      	add	r3, r1
 8011b76:	3312      	adds	r3, #18
 8011b78:	2200      	movs	r2, #0
 8011b7a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011b7c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011b80:	4907      	ldr	r1, [pc, #28]	@ (8011ba0 <etharp_find_entry+0x2d4>)
 8011b82:	4613      	mov	r3, r2
 8011b84:	005b      	lsls	r3, r3, #1
 8011b86:	4413      	add	r3, r2
 8011b88:	00db      	lsls	r3, r3, #3
 8011b8a:	440b      	add	r3, r1
 8011b8c:	3308      	adds	r3, #8
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011b92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3728      	adds	r7, #40	@ 0x28
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	20008178 	.word	0x20008178
 8011ba4:	08018180 	.word	0x08018180
 8011ba8:	080181b8 	.word	0x080181b8
 8011bac:	080181f8 	.word	0x080181f8
 8011bb0:	08018220 	.word	0x08018220
 8011bb4:	08018238 	.word	0x08018238
 8011bb8:	0801824c 	.word	0x0801824c

08011bbc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b088      	sub	sp, #32
 8011bc0:	af02      	add	r7, sp, #8
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	607a      	str	r2, [r7, #4]
 8011bc8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011bd0:	2b06      	cmp	r3, #6
 8011bd2:	d006      	beq.n	8011be2 <etharp_update_arp_entry+0x26>
 8011bd4:	4b48      	ldr	r3, [pc, #288]	@ (8011cf8 <etharp_update_arp_entry+0x13c>)
 8011bd6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011bda:	4948      	ldr	r1, [pc, #288]	@ (8011cfc <etharp_update_arp_entry+0x140>)
 8011bdc:	4848      	ldr	r0, [pc, #288]	@ (8011d00 <etharp_update_arp_entry+0x144>)
 8011bde:	f002 fdcf 	bl	8014780 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d012      	beq.n	8011c0e <etharp_update_arp_entry+0x52>
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00e      	beq.n	8011c0e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	68f9      	ldr	r1, [r7, #12]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f001 f990 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 8011bfc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d105      	bne.n	8011c0e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c0a:	2be0      	cmp	r3, #224	@ 0xe0
 8011c0c:	d102      	bne.n	8011c14 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011c0e:	f06f 030f 	mvn.w	r3, #15
 8011c12:	e06c      	b.n	8011cee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011c14:	78fb      	ldrb	r3, [r7, #3]
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	4619      	mov	r1, r3
 8011c1a:	68b8      	ldr	r0, [r7, #8]
 8011c1c:	f7ff fe56 	bl	80118cc <etharp_find_entry>
 8011c20:	4603      	mov	r3, r0
 8011c22:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011c24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	da02      	bge.n	8011c32 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011c2c:	8afb      	ldrh	r3, [r7, #22]
 8011c2e:	b25b      	sxtb	r3, r3
 8011c30:	e05d      	b.n	8011cee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011c32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c36:	4933      	ldr	r1, [pc, #204]	@ (8011d04 <etharp_update_arp_entry+0x148>)
 8011c38:	4613      	mov	r3, r2
 8011c3a:	005b      	lsls	r3, r3, #1
 8011c3c:	4413      	add	r3, r2
 8011c3e:	00db      	lsls	r3, r3, #3
 8011c40:	440b      	add	r3, r1
 8011c42:	3314      	adds	r3, #20
 8011c44:	2202      	movs	r2, #2
 8011c46:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011c48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c4c:	492d      	ldr	r1, [pc, #180]	@ (8011d04 <etharp_update_arp_entry+0x148>)
 8011c4e:	4613      	mov	r3, r2
 8011c50:	005b      	lsls	r3, r3, #1
 8011c52:	4413      	add	r3, r2
 8011c54:	00db      	lsls	r3, r3, #3
 8011c56:	440b      	add	r3, r1
 8011c58:	3308      	adds	r3, #8
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011c5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c62:	4613      	mov	r3, r2
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	4413      	add	r3, r2
 8011c68:	00db      	lsls	r3, r3, #3
 8011c6a:	3308      	adds	r3, #8
 8011c6c:	4a25      	ldr	r2, [pc, #148]	@ (8011d04 <etharp_update_arp_entry+0x148>)
 8011c6e:	4413      	add	r3, r2
 8011c70:	3304      	adds	r3, #4
 8011c72:	2206      	movs	r2, #6
 8011c74:	6879      	ldr	r1, [r7, #4]
 8011c76:	4618      	mov	r0, r3
 8011c78:	f002 ff57 	bl	8014b2a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011c7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c80:	4920      	ldr	r1, [pc, #128]	@ (8011d04 <etharp_update_arp_entry+0x148>)
 8011c82:	4613      	mov	r3, r2
 8011c84:	005b      	lsls	r3, r3, #1
 8011c86:	4413      	add	r3, r2
 8011c88:	00db      	lsls	r3, r3, #3
 8011c8a:	440b      	add	r3, r1
 8011c8c:	3312      	adds	r3, #18
 8011c8e:	2200      	movs	r2, #0
 8011c90:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011c92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c96:	491b      	ldr	r1, [pc, #108]	@ (8011d04 <etharp_update_arp_entry+0x148>)
 8011c98:	4613      	mov	r3, r2
 8011c9a:	005b      	lsls	r3, r3, #1
 8011c9c:	4413      	add	r3, r2
 8011c9e:	00db      	lsls	r3, r3, #3
 8011ca0:	440b      	add	r3, r1
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d021      	beq.n	8011cec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011ca8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cac:	4915      	ldr	r1, [pc, #84]	@ (8011d04 <etharp_update_arp_entry+0x148>)
 8011cae:	4613      	mov	r3, r2
 8011cb0:	005b      	lsls	r3, r3, #1
 8011cb2:	4413      	add	r3, r2
 8011cb4:	00db      	lsls	r3, r3, #3
 8011cb6:	440b      	add	r3, r1
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011cbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cc0:	4910      	ldr	r1, [pc, #64]	@ (8011d04 <etharp_update_arp_entry+0x148>)
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	005b      	lsls	r3, r3, #1
 8011cc6:	4413      	add	r3, r2
 8011cc8:	00db      	lsls	r3, r3, #3
 8011cca:	440b      	add	r3, r1
 8011ccc:	2200      	movs	r2, #0
 8011cce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8011cd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6939      	ldr	r1, [r7, #16]
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f002 f829 	bl	8013d38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011ce6:	6938      	ldr	r0, [r7, #16]
 8011ce8:	f7f9 f914 	bl	800af14 <pbuf_free>
  }
  return ERR_OK;
 8011cec:	2300      	movs	r3, #0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3718      	adds	r7, #24
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	08018180 	.word	0x08018180
 8011cfc:	08018278 	.word	0x08018278
 8011d00:	080181f8 	.word	0x080181f8
 8011d04:	20008178 	.word	0x20008178

08011d08 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d10:	2300      	movs	r3, #0
 8011d12:	60fb      	str	r3, [r7, #12]
 8011d14:	e01e      	b.n	8011d54 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011d16:	4913      	ldr	r1, [pc, #76]	@ (8011d64 <etharp_cleanup_netif+0x5c>)
 8011d18:	68fa      	ldr	r2, [r7, #12]
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	005b      	lsls	r3, r3, #1
 8011d1e:	4413      	add	r3, r2
 8011d20:	00db      	lsls	r3, r3, #3
 8011d22:	440b      	add	r3, r1
 8011d24:	3314      	adds	r3, #20
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011d2a:	7afb      	ldrb	r3, [r7, #11]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00e      	beq.n	8011d4e <etharp_cleanup_netif+0x46>
 8011d30:	490c      	ldr	r1, [pc, #48]	@ (8011d64 <etharp_cleanup_netif+0x5c>)
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	4613      	mov	r3, r2
 8011d36:	005b      	lsls	r3, r3, #1
 8011d38:	4413      	add	r3, r2
 8011d3a:	00db      	lsls	r3, r3, #3
 8011d3c:	440b      	add	r3, r1
 8011d3e:	3308      	adds	r3, #8
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d102      	bne.n	8011d4e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	f7ff fcb7 	bl	80116bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	3301      	adds	r3, #1
 8011d52:	60fb      	str	r3, [r7, #12]
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	2b09      	cmp	r3, #9
 8011d58:	dddd      	ble.n	8011d16 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011d5a:	bf00      	nop
 8011d5c:	bf00      	nop
 8011d5e:	3710      	adds	r7, #16
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	20008178 	.word	0x20008178

08011d68 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011d68:	b5b0      	push	{r4, r5, r7, lr}
 8011d6a:	b08a      	sub	sp, #40	@ 0x28
 8011d6c:	af04      	add	r7, sp, #16
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d107      	bne.n	8011d88 <etharp_input+0x20>
 8011d78:	4b3d      	ldr	r3, [pc, #244]	@ (8011e70 <etharp_input+0x108>)
 8011d7a:	f240 228a 	movw	r2, #650	@ 0x28a
 8011d7e:	493d      	ldr	r1, [pc, #244]	@ (8011e74 <etharp_input+0x10c>)
 8011d80:	483d      	ldr	r0, [pc, #244]	@ (8011e78 <etharp_input+0x110>)
 8011d82:	f002 fcfd 	bl	8014780 <iprintf>
 8011d86:	e06f      	b.n	8011e68 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	881b      	ldrh	r3, [r3, #0]
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011d98:	d10c      	bne.n	8011db4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011d9e:	2b06      	cmp	r3, #6
 8011da0:	d108      	bne.n	8011db4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011da6:	2b04      	cmp	r3, #4
 8011da8:	d104      	bne.n	8011db4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	885b      	ldrh	r3, [r3, #2]
 8011dae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011db0:	2b08      	cmp	r3, #8
 8011db2:	d003      	beq.n	8011dbc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f7f9 f8ad 	bl	800af14 <pbuf_free>
    return;
 8011dba:	e055      	b.n	8011e68 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	330e      	adds	r3, #14
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	3318      	adds	r3, #24
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	3304      	adds	r3, #4
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d102      	bne.n	8011ddc <etharp_input+0x74>
    for_us = 0;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	74fb      	strb	r3, [r7, #19]
 8011dda:	e009      	b.n	8011df0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011ddc:	68ba      	ldr	r2, [r7, #8]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	3304      	adds	r3, #4
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	bf0c      	ite	eq
 8011de8:	2301      	moveq	r3, #1
 8011dea:	2300      	movne	r3, #0
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	f103 0208 	add.w	r2, r3, #8
 8011df6:	7cfb      	ldrb	r3, [r7, #19]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d001      	beq.n	8011e00 <etharp_input+0x98>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e000      	b.n	8011e02 <etharp_input+0x9a>
 8011e00:	2302      	movs	r3, #2
 8011e02:	f107 010c 	add.w	r1, r7, #12
 8011e06:	6838      	ldr	r0, [r7, #0]
 8011e08:	f7ff fed8 	bl	8011bbc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	88db      	ldrh	r3, [r3, #6]
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e16:	d003      	beq.n	8011e20 <etharp_input+0xb8>
 8011e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e1c:	d01e      	beq.n	8011e5c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011e1e:	e020      	b.n	8011e62 <etharp_input+0xfa>
      if (for_us) {
 8011e20:	7cfb      	ldrb	r3, [r7, #19]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d01c      	beq.n	8011e60 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011e3c:	697a      	ldr	r2, [r7, #20]
 8011e3e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011e40:	2102      	movs	r1, #2
 8011e42:	9103      	str	r1, [sp, #12]
 8011e44:	f107 010c 	add.w	r1, r7, #12
 8011e48:	9102      	str	r1, [sp, #8]
 8011e4a:	9201      	str	r2, [sp, #4]
 8011e4c:	9300      	str	r3, [sp, #0]
 8011e4e:	462b      	mov	r3, r5
 8011e50:	4622      	mov	r2, r4
 8011e52:	4601      	mov	r1, r0
 8011e54:	6838      	ldr	r0, [r7, #0]
 8011e56:	f000 faeb 	bl	8012430 <etharp_raw>
      break;
 8011e5a:	e001      	b.n	8011e60 <etharp_input+0xf8>
      break;
 8011e5c:	bf00      	nop
 8011e5e:	e000      	b.n	8011e62 <etharp_input+0xfa>
      break;
 8011e60:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7f9 f856 	bl	800af14 <pbuf_free>
}
 8011e68:	3718      	adds	r7, #24
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	08018180 	.word	0x08018180
 8011e74:	080182d0 	.word	0x080182d0
 8011e78:	080181f8 	.word	0x080181f8

08011e7c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af02      	add	r7, sp, #8
 8011e82:	60f8      	str	r0, [r7, #12]
 8011e84:	60b9      	str	r1, [r7, #8]
 8011e86:	4613      	mov	r3, r2
 8011e88:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011e8a:	79fa      	ldrb	r2, [r7, #7]
 8011e8c:	4944      	ldr	r1, [pc, #272]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011e8e:	4613      	mov	r3, r2
 8011e90:	005b      	lsls	r3, r3, #1
 8011e92:	4413      	add	r3, r2
 8011e94:	00db      	lsls	r3, r3, #3
 8011e96:	440b      	add	r3, r1
 8011e98:	3314      	adds	r3, #20
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d806      	bhi.n	8011eae <etharp_output_to_arp_index+0x32>
 8011ea0:	4b40      	ldr	r3, [pc, #256]	@ (8011fa4 <etharp_output_to_arp_index+0x128>)
 8011ea2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011ea6:	4940      	ldr	r1, [pc, #256]	@ (8011fa8 <etharp_output_to_arp_index+0x12c>)
 8011ea8:	4840      	ldr	r0, [pc, #256]	@ (8011fac <etharp_output_to_arp_index+0x130>)
 8011eaa:	f002 fc69 	bl	8014780 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011eae:	79fa      	ldrb	r2, [r7, #7]
 8011eb0:	493b      	ldr	r1, [pc, #236]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	005b      	lsls	r3, r3, #1
 8011eb6:	4413      	add	r3, r2
 8011eb8:	00db      	lsls	r3, r3, #3
 8011eba:	440b      	add	r3, r1
 8011ebc:	3314      	adds	r3, #20
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	2b02      	cmp	r3, #2
 8011ec2:	d153      	bne.n	8011f6c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011ec4:	79fa      	ldrb	r2, [r7, #7]
 8011ec6:	4936      	ldr	r1, [pc, #216]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011ec8:	4613      	mov	r3, r2
 8011eca:	005b      	lsls	r3, r3, #1
 8011ecc:	4413      	add	r3, r2
 8011ece:	00db      	lsls	r3, r3, #3
 8011ed0:	440b      	add	r3, r1
 8011ed2:	3312      	adds	r3, #18
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8011eda:	d919      	bls.n	8011f10 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011edc:	79fa      	ldrb	r2, [r7, #7]
 8011ede:	4613      	mov	r3, r2
 8011ee0:	005b      	lsls	r3, r3, #1
 8011ee2:	4413      	add	r3, r2
 8011ee4:	00db      	lsls	r3, r3, #3
 8011ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011ee8:	4413      	add	r3, r2
 8011eea:	3304      	adds	r3, #4
 8011eec:	4619      	mov	r1, r3
 8011eee:	68f8      	ldr	r0, [r7, #12]
 8011ef0:	f000 fb4c 	bl	801258c <etharp_request>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d138      	bne.n	8011f6c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011efa:	79fa      	ldrb	r2, [r7, #7]
 8011efc:	4928      	ldr	r1, [pc, #160]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011efe:	4613      	mov	r3, r2
 8011f00:	005b      	lsls	r3, r3, #1
 8011f02:	4413      	add	r3, r2
 8011f04:	00db      	lsls	r3, r3, #3
 8011f06:	440b      	add	r3, r1
 8011f08:	3314      	adds	r3, #20
 8011f0a:	2203      	movs	r2, #3
 8011f0c:	701a      	strb	r2, [r3, #0]
 8011f0e:	e02d      	b.n	8011f6c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011f10:	79fa      	ldrb	r2, [r7, #7]
 8011f12:	4923      	ldr	r1, [pc, #140]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011f14:	4613      	mov	r3, r2
 8011f16:	005b      	lsls	r3, r3, #1
 8011f18:	4413      	add	r3, r2
 8011f1a:	00db      	lsls	r3, r3, #3
 8011f1c:	440b      	add	r3, r1
 8011f1e:	3312      	adds	r3, #18
 8011f20:	881b      	ldrh	r3, [r3, #0]
 8011f22:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8011f26:	d321      	bcc.n	8011f6c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011f28:	79fa      	ldrb	r2, [r7, #7]
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	005b      	lsls	r3, r3, #1
 8011f2e:	4413      	add	r3, r2
 8011f30:	00db      	lsls	r3, r3, #3
 8011f32:	4a1b      	ldr	r2, [pc, #108]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011f34:	4413      	add	r3, r2
 8011f36:	1d19      	adds	r1, r3, #4
 8011f38:	79fa      	ldrb	r2, [r7, #7]
 8011f3a:	4613      	mov	r3, r2
 8011f3c:	005b      	lsls	r3, r3, #1
 8011f3e:	4413      	add	r3, r2
 8011f40:	00db      	lsls	r3, r3, #3
 8011f42:	3308      	adds	r3, #8
 8011f44:	4a16      	ldr	r2, [pc, #88]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011f46:	4413      	add	r3, r2
 8011f48:	3304      	adds	r3, #4
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f000 fafb 	bl	8012548 <etharp_request_dst>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d109      	bne.n	8011f6c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f58:	79fa      	ldrb	r2, [r7, #7]
 8011f5a:	4911      	ldr	r1, [pc, #68]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	005b      	lsls	r3, r3, #1
 8011f60:	4413      	add	r3, r2
 8011f62:	00db      	lsls	r3, r3, #3
 8011f64:	440b      	add	r3, r1
 8011f66:	3314      	adds	r3, #20
 8011f68:	2203      	movs	r2, #3
 8011f6a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8011f72:	79fa      	ldrb	r2, [r7, #7]
 8011f74:	4613      	mov	r3, r2
 8011f76:	005b      	lsls	r3, r3, #1
 8011f78:	4413      	add	r3, r2
 8011f7a:	00db      	lsls	r3, r3, #3
 8011f7c:	3308      	adds	r3, #8
 8011f7e:	4a08      	ldr	r2, [pc, #32]	@ (8011fa0 <etharp_output_to_arp_index+0x124>)
 8011f80:	4413      	add	r3, r2
 8011f82:	3304      	adds	r3, #4
 8011f84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011f88:	9200      	str	r2, [sp, #0]
 8011f8a:	460a      	mov	r2, r1
 8011f8c:	68b9      	ldr	r1, [r7, #8]
 8011f8e:	68f8      	ldr	r0, [r7, #12]
 8011f90:	f001 fed2 	bl	8013d38 <ethernet_output>
 8011f94:	4603      	mov	r3, r0
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3710      	adds	r7, #16
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20008178 	.word	0x20008178
 8011fa4:	08018180 	.word	0x08018180
 8011fa8:	080182f0 	.word	0x080182f0
 8011fac:	080181f8 	.word	0x080181f8

08011fb0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b08a      	sub	sp, #40	@ 0x28
 8011fb4:	af02      	add	r7, sp, #8
 8011fb6:	60f8      	str	r0, [r7, #12]
 8011fb8:	60b9      	str	r1, [r7, #8]
 8011fba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d106      	bne.n	8011fd4 <etharp_output+0x24>
 8011fc6:	4b73      	ldr	r3, [pc, #460]	@ (8012194 <etharp_output+0x1e4>)
 8011fc8:	f240 321e 	movw	r2, #798	@ 0x31e
 8011fcc:	4972      	ldr	r1, [pc, #456]	@ (8012198 <etharp_output+0x1e8>)
 8011fce:	4873      	ldr	r0, [pc, #460]	@ (801219c <etharp_output+0x1ec>)
 8011fd0:	f002 fbd6 	bl	8014780 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d106      	bne.n	8011fe8 <etharp_output+0x38>
 8011fda:	4b6e      	ldr	r3, [pc, #440]	@ (8012194 <etharp_output+0x1e4>)
 8011fdc:	f240 321f 	movw	r2, #799	@ 0x31f
 8011fe0:	496f      	ldr	r1, [pc, #444]	@ (80121a0 <etharp_output+0x1f0>)
 8011fe2:	486e      	ldr	r0, [pc, #440]	@ (801219c <etharp_output+0x1ec>)
 8011fe4:	f002 fbcc 	bl	8014780 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d106      	bne.n	8011ffc <etharp_output+0x4c>
 8011fee:	4b69      	ldr	r3, [pc, #420]	@ (8012194 <etharp_output+0x1e4>)
 8011ff0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011ff4:	496b      	ldr	r1, [pc, #428]	@ (80121a4 <etharp_output+0x1f4>)
 8011ff6:	4869      	ldr	r0, [pc, #420]	@ (801219c <etharp_output+0x1ec>)
 8011ff8:	f002 fbc2 	bl	8014780 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	68f9      	ldr	r1, [r7, #12]
 8012002:	4618      	mov	r0, r3
 8012004:	f000 ff8a 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 8012008:	4603      	mov	r3, r0
 801200a:	2b00      	cmp	r3, #0
 801200c:	d002      	beq.n	8012014 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801200e:	4b66      	ldr	r3, [pc, #408]	@ (80121a8 <etharp_output+0x1f8>)
 8012010:	61fb      	str	r3, [r7, #28]
 8012012:	e0af      	b.n	8012174 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801201c:	2be0      	cmp	r3, #224	@ 0xe0
 801201e:	d118      	bne.n	8012052 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012020:	2301      	movs	r3, #1
 8012022:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012024:	2300      	movs	r3, #0
 8012026:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012028:	235e      	movs	r3, #94	@ 0x5e
 801202a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	3301      	adds	r3, #1
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012036:	b2db      	uxtb	r3, r3
 8012038:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	3302      	adds	r3, #2
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	3303      	adds	r3, #3
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801204a:	f107 0310 	add.w	r3, r7, #16
 801204e:	61fb      	str	r3, [r7, #28]
 8012050:	e090      	b.n	8012174 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	3304      	adds	r3, #4
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	405a      	eors	r2, r3
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	3308      	adds	r3, #8
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	4013      	ands	r3, r2
 8012066:	2b00      	cmp	r3, #0
 8012068:	d012      	beq.n	8012090 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012070:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012074:	4293      	cmp	r3, r2
 8012076:	d00b      	beq.n	8012090 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	330c      	adds	r3, #12
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d003      	beq.n	801208a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	330c      	adds	r3, #12
 8012086:	61bb      	str	r3, [r7, #24]
 8012088:	e002      	b.n	8012090 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801208a:	f06f 0303 	mvn.w	r3, #3
 801208e:	e07d      	b.n	801218c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012090:	4b46      	ldr	r3, [pc, #280]	@ (80121ac <etharp_output+0x1fc>)
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	4619      	mov	r1, r3
 8012096:	4a46      	ldr	r2, [pc, #280]	@ (80121b0 <etharp_output+0x200>)
 8012098:	460b      	mov	r3, r1
 801209a:	005b      	lsls	r3, r3, #1
 801209c:	440b      	add	r3, r1
 801209e:	00db      	lsls	r3, r3, #3
 80120a0:	4413      	add	r3, r2
 80120a2:	3314      	adds	r3, #20
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	2b01      	cmp	r3, #1
 80120a8:	d925      	bls.n	80120f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80120aa:	4b40      	ldr	r3, [pc, #256]	@ (80121ac <etharp_output+0x1fc>)
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	4619      	mov	r1, r3
 80120b0:	4a3f      	ldr	r2, [pc, #252]	@ (80121b0 <etharp_output+0x200>)
 80120b2:	460b      	mov	r3, r1
 80120b4:	005b      	lsls	r3, r3, #1
 80120b6:	440b      	add	r3, r1
 80120b8:	00db      	lsls	r3, r3, #3
 80120ba:	4413      	add	r3, r2
 80120bc:	3308      	adds	r3, #8
 80120be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80120c0:	68fa      	ldr	r2, [r7, #12]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d117      	bne.n	80120f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	4b38      	ldr	r3, [pc, #224]	@ (80121ac <etharp_output+0x1fc>)
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	4618      	mov	r0, r3
 80120d0:	4937      	ldr	r1, [pc, #220]	@ (80121b0 <etharp_output+0x200>)
 80120d2:	4603      	mov	r3, r0
 80120d4:	005b      	lsls	r3, r3, #1
 80120d6:	4403      	add	r3, r0
 80120d8:	00db      	lsls	r3, r3, #3
 80120da:	440b      	add	r3, r1
 80120dc:	3304      	adds	r3, #4
 80120de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d108      	bne.n	80120f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80120e4:	4b31      	ldr	r3, [pc, #196]	@ (80121ac <etharp_output+0x1fc>)
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	461a      	mov	r2, r3
 80120ea:	68b9      	ldr	r1, [r7, #8]
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f7ff fec5 	bl	8011e7c <etharp_output_to_arp_index>
 80120f2:	4603      	mov	r3, r0
 80120f4:	e04a      	b.n	801218c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80120f6:	2300      	movs	r3, #0
 80120f8:	75fb      	strb	r3, [r7, #23]
 80120fa:	e031      	b.n	8012160 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80120fc:	7dfa      	ldrb	r2, [r7, #23]
 80120fe:	492c      	ldr	r1, [pc, #176]	@ (80121b0 <etharp_output+0x200>)
 8012100:	4613      	mov	r3, r2
 8012102:	005b      	lsls	r3, r3, #1
 8012104:	4413      	add	r3, r2
 8012106:	00db      	lsls	r3, r3, #3
 8012108:	440b      	add	r3, r1
 801210a:	3314      	adds	r3, #20
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	2b01      	cmp	r3, #1
 8012110:	d923      	bls.n	801215a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012112:	7dfa      	ldrb	r2, [r7, #23]
 8012114:	4926      	ldr	r1, [pc, #152]	@ (80121b0 <etharp_output+0x200>)
 8012116:	4613      	mov	r3, r2
 8012118:	005b      	lsls	r3, r3, #1
 801211a:	4413      	add	r3, r2
 801211c:	00db      	lsls	r3, r3, #3
 801211e:	440b      	add	r3, r1
 8012120:	3308      	adds	r3, #8
 8012122:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	429a      	cmp	r2, r3
 8012128:	d117      	bne.n	801215a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	6819      	ldr	r1, [r3, #0]
 801212e:	7dfa      	ldrb	r2, [r7, #23]
 8012130:	481f      	ldr	r0, [pc, #124]	@ (80121b0 <etharp_output+0x200>)
 8012132:	4613      	mov	r3, r2
 8012134:	005b      	lsls	r3, r3, #1
 8012136:	4413      	add	r3, r2
 8012138:	00db      	lsls	r3, r3, #3
 801213a:	4403      	add	r3, r0
 801213c:	3304      	adds	r3, #4
 801213e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012140:	4299      	cmp	r1, r3
 8012142:	d10a      	bne.n	801215a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012144:	4a19      	ldr	r2, [pc, #100]	@ (80121ac <etharp_output+0x1fc>)
 8012146:	7dfb      	ldrb	r3, [r7, #23]
 8012148:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801214a:	7dfb      	ldrb	r3, [r7, #23]
 801214c:	461a      	mov	r2, r3
 801214e:	68b9      	ldr	r1, [r7, #8]
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7ff fe93 	bl	8011e7c <etharp_output_to_arp_index>
 8012156:	4603      	mov	r3, r0
 8012158:	e018      	b.n	801218c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801215a:	7dfb      	ldrb	r3, [r7, #23]
 801215c:	3301      	adds	r3, #1
 801215e:	75fb      	strb	r3, [r7, #23]
 8012160:	7dfb      	ldrb	r3, [r7, #23]
 8012162:	2b09      	cmp	r3, #9
 8012164:	d9ca      	bls.n	80120fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012166:	68ba      	ldr	r2, [r7, #8]
 8012168:	69b9      	ldr	r1, [r7, #24]
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f000 f822 	bl	80121b4 <etharp_query>
 8012170:	4603      	mov	r3, r0
 8012172:	e00b      	b.n	801218c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801217a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801217e:	9300      	str	r3, [sp, #0]
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	68b9      	ldr	r1, [r7, #8]
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	f001 fdd7 	bl	8013d38 <ethernet_output>
 801218a:	4603      	mov	r3, r0
}
 801218c:	4618      	mov	r0, r3
 801218e:	3720      	adds	r7, #32
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	08018180 	.word	0x08018180
 8012198:	080182d0 	.word	0x080182d0
 801219c:	080181f8 	.word	0x080181f8
 80121a0:	08018320 	.word	0x08018320
 80121a4:	080182c0 	.word	0x080182c0
 80121a8:	08018e14 	.word	0x08018e14
 80121ac:	20008268 	.word	0x20008268
 80121b0:	20008178 	.word	0x20008178

080121b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b08c      	sub	sp, #48	@ 0x30
 80121b8:	af02      	add	r7, sp, #8
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	3326      	adds	r3, #38	@ 0x26
 80121c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80121c6:	23ff      	movs	r3, #255	@ 0xff
 80121c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80121cc:	2300      	movs	r3, #0
 80121ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	68f9      	ldr	r1, [r7, #12]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f000 fea0 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 80121dc:	4603      	mov	r3, r0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10c      	bne.n	80121fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80121ea:	2be0      	cmp	r3, #224	@ 0xe0
 80121ec:	d006      	beq.n	80121fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d003      	beq.n	80121fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d102      	bne.n	8012202 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80121fc:	f06f 030f 	mvn.w	r3, #15
 8012200:	e101      	b.n	8012406 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012202:	68fa      	ldr	r2, [r7, #12]
 8012204:	2101      	movs	r1, #1
 8012206:	68b8      	ldr	r0, [r7, #8]
 8012208:	f7ff fb60 	bl	80118cc <etharp_find_entry>
 801220c:	4603      	mov	r3, r0
 801220e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012210:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012214:	2b00      	cmp	r3, #0
 8012216:	da02      	bge.n	801221e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012218:	8a7b      	ldrh	r3, [r7, #18]
 801221a:	b25b      	sxtb	r3, r3
 801221c:	e0f3      	b.n	8012406 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801221e:	8a7b      	ldrh	r3, [r7, #18]
 8012220:	2b7e      	cmp	r3, #126	@ 0x7e
 8012222:	d906      	bls.n	8012232 <etharp_query+0x7e>
 8012224:	4b7a      	ldr	r3, [pc, #488]	@ (8012410 <etharp_query+0x25c>)
 8012226:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801222a:	497a      	ldr	r1, [pc, #488]	@ (8012414 <etharp_query+0x260>)
 801222c:	487a      	ldr	r0, [pc, #488]	@ (8012418 <etharp_query+0x264>)
 801222e:	f002 faa7 	bl	8014780 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012232:	8a7b      	ldrh	r3, [r7, #18]
 8012234:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012236:	7c7a      	ldrb	r2, [r7, #17]
 8012238:	4978      	ldr	r1, [pc, #480]	@ (801241c <etharp_query+0x268>)
 801223a:	4613      	mov	r3, r2
 801223c:	005b      	lsls	r3, r3, #1
 801223e:	4413      	add	r3, r2
 8012240:	00db      	lsls	r3, r3, #3
 8012242:	440b      	add	r3, r1
 8012244:	3314      	adds	r3, #20
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d115      	bne.n	8012278 <etharp_query+0xc4>
    is_new_entry = 1;
 801224c:	2301      	movs	r3, #1
 801224e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012250:	7c7a      	ldrb	r2, [r7, #17]
 8012252:	4972      	ldr	r1, [pc, #456]	@ (801241c <etharp_query+0x268>)
 8012254:	4613      	mov	r3, r2
 8012256:	005b      	lsls	r3, r3, #1
 8012258:	4413      	add	r3, r2
 801225a:	00db      	lsls	r3, r3, #3
 801225c:	440b      	add	r3, r1
 801225e:	3314      	adds	r3, #20
 8012260:	2201      	movs	r2, #1
 8012262:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012264:	7c7a      	ldrb	r2, [r7, #17]
 8012266:	496d      	ldr	r1, [pc, #436]	@ (801241c <etharp_query+0x268>)
 8012268:	4613      	mov	r3, r2
 801226a:	005b      	lsls	r3, r3, #1
 801226c:	4413      	add	r3, r2
 801226e:	00db      	lsls	r3, r3, #3
 8012270:	440b      	add	r3, r1
 8012272:	3308      	adds	r3, #8
 8012274:	68fa      	ldr	r2, [r7, #12]
 8012276:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012278:	7c7a      	ldrb	r2, [r7, #17]
 801227a:	4968      	ldr	r1, [pc, #416]	@ (801241c <etharp_query+0x268>)
 801227c:	4613      	mov	r3, r2
 801227e:	005b      	lsls	r3, r3, #1
 8012280:	4413      	add	r3, r2
 8012282:	00db      	lsls	r3, r3, #3
 8012284:	440b      	add	r3, r1
 8012286:	3314      	adds	r3, #20
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	2b01      	cmp	r3, #1
 801228c:	d011      	beq.n	80122b2 <etharp_query+0xfe>
 801228e:	7c7a      	ldrb	r2, [r7, #17]
 8012290:	4962      	ldr	r1, [pc, #392]	@ (801241c <etharp_query+0x268>)
 8012292:	4613      	mov	r3, r2
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	4413      	add	r3, r2
 8012298:	00db      	lsls	r3, r3, #3
 801229a:	440b      	add	r3, r1
 801229c:	3314      	adds	r3, #20
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	d806      	bhi.n	80122b2 <etharp_query+0xfe>
 80122a4:	4b5a      	ldr	r3, [pc, #360]	@ (8012410 <etharp_query+0x25c>)
 80122a6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80122aa:	495d      	ldr	r1, [pc, #372]	@ (8012420 <etharp_query+0x26c>)
 80122ac:	485a      	ldr	r0, [pc, #360]	@ (8012418 <etharp_query+0x264>)
 80122ae:	f002 fa67 	bl	8014780 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80122b2:	6a3b      	ldr	r3, [r7, #32]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d102      	bne.n	80122be <etharp_query+0x10a>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d10c      	bne.n	80122d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80122be:	68b9      	ldr	r1, [r7, #8]
 80122c0:	68f8      	ldr	r0, [r7, #12]
 80122c2:	f000 f963 	bl	801258c <etharp_request>
 80122c6:	4603      	mov	r3, r0
 80122c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d102      	bne.n	80122d8 <etharp_query+0x124>
      return result;
 80122d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80122d6:	e096      	b.n	8012406 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d106      	bne.n	80122ec <etharp_query+0x138>
 80122de:	4b4c      	ldr	r3, [pc, #304]	@ (8012410 <etharp_query+0x25c>)
 80122e0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80122e4:	494f      	ldr	r1, [pc, #316]	@ (8012424 <etharp_query+0x270>)
 80122e6:	484c      	ldr	r0, [pc, #304]	@ (8012418 <etharp_query+0x264>)
 80122e8:	f002 fa4a 	bl	8014780 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80122ec:	7c7a      	ldrb	r2, [r7, #17]
 80122ee:	494b      	ldr	r1, [pc, #300]	@ (801241c <etharp_query+0x268>)
 80122f0:	4613      	mov	r3, r2
 80122f2:	005b      	lsls	r3, r3, #1
 80122f4:	4413      	add	r3, r2
 80122f6:	00db      	lsls	r3, r3, #3
 80122f8:	440b      	add	r3, r1
 80122fa:	3314      	adds	r3, #20
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	2b01      	cmp	r3, #1
 8012300:	d917      	bls.n	8012332 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012302:	4a49      	ldr	r2, [pc, #292]	@ (8012428 <etharp_query+0x274>)
 8012304:	7c7b      	ldrb	r3, [r7, #17]
 8012306:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012308:	7c7a      	ldrb	r2, [r7, #17]
 801230a:	4613      	mov	r3, r2
 801230c:	005b      	lsls	r3, r3, #1
 801230e:	4413      	add	r3, r2
 8012310:	00db      	lsls	r3, r3, #3
 8012312:	3308      	adds	r3, #8
 8012314:	4a41      	ldr	r2, [pc, #260]	@ (801241c <etharp_query+0x268>)
 8012316:	4413      	add	r3, r2
 8012318:	3304      	adds	r3, #4
 801231a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801231e:	9200      	str	r2, [sp, #0]
 8012320:	697a      	ldr	r2, [r7, #20]
 8012322:	6879      	ldr	r1, [r7, #4]
 8012324:	68f8      	ldr	r0, [r7, #12]
 8012326:	f001 fd07 	bl	8013d38 <ethernet_output>
 801232a:	4603      	mov	r3, r0
 801232c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012330:	e067      	b.n	8012402 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012332:	7c7a      	ldrb	r2, [r7, #17]
 8012334:	4939      	ldr	r1, [pc, #228]	@ (801241c <etharp_query+0x268>)
 8012336:	4613      	mov	r3, r2
 8012338:	005b      	lsls	r3, r3, #1
 801233a:	4413      	add	r3, r2
 801233c:	00db      	lsls	r3, r3, #3
 801233e:	440b      	add	r3, r1
 8012340:	3314      	adds	r3, #20
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d15c      	bne.n	8012402 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012348:	2300      	movs	r3, #0
 801234a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012350:	e01c      	b.n	801238c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	895a      	ldrh	r2, [r3, #10]
 8012356:	69fb      	ldr	r3, [r7, #28]
 8012358:	891b      	ldrh	r3, [r3, #8]
 801235a:	429a      	cmp	r2, r3
 801235c:	d10a      	bne.n	8012374 <etharp_query+0x1c0>
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d006      	beq.n	8012374 <etharp_query+0x1c0>
 8012366:	4b2a      	ldr	r3, [pc, #168]	@ (8012410 <etharp_query+0x25c>)
 8012368:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801236c:	492f      	ldr	r1, [pc, #188]	@ (801242c <etharp_query+0x278>)
 801236e:	482a      	ldr	r0, [pc, #168]	@ (8012418 <etharp_query+0x264>)
 8012370:	f002 fa06 	bl	8014780 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	7b1b      	ldrb	r3, [r3, #12]
 8012378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801237c:	2b00      	cmp	r3, #0
 801237e:	d002      	beq.n	8012386 <etharp_query+0x1d2>
        copy_needed = 1;
 8012380:	2301      	movs	r3, #1
 8012382:	61bb      	str	r3, [r7, #24]
        break;
 8012384:	e005      	b.n	8012392 <etharp_query+0x1de>
      }
      p = p->next;
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1df      	bne.n	8012352 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d007      	beq.n	80123a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012398:	687a      	ldr	r2, [r7, #4]
 801239a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801239e:	200e      	movs	r0, #14
 80123a0:	f7f9 f824 	bl	800b3ec <pbuf_clone>
 80123a4:	61f8      	str	r0, [r7, #28]
 80123a6:	e004      	b.n	80123b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80123ac:	69f8      	ldr	r0, [r7, #28]
 80123ae:	f7f8 fe51 	bl	800b054 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d021      	beq.n	80123fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80123b8:	7c7a      	ldrb	r2, [r7, #17]
 80123ba:	4918      	ldr	r1, [pc, #96]	@ (801241c <etharp_query+0x268>)
 80123bc:	4613      	mov	r3, r2
 80123be:	005b      	lsls	r3, r3, #1
 80123c0:	4413      	add	r3, r2
 80123c2:	00db      	lsls	r3, r3, #3
 80123c4:	440b      	add	r3, r1
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00a      	beq.n	80123e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80123cc:	7c7a      	ldrb	r2, [r7, #17]
 80123ce:	4913      	ldr	r1, [pc, #76]	@ (801241c <etharp_query+0x268>)
 80123d0:	4613      	mov	r3, r2
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	4413      	add	r3, r2
 80123d6:	00db      	lsls	r3, r3, #3
 80123d8:	440b      	add	r3, r1
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	4618      	mov	r0, r3
 80123de:	f7f8 fd99 	bl	800af14 <pbuf_free>
      }
      arp_table[i].q = p;
 80123e2:	7c7a      	ldrb	r2, [r7, #17]
 80123e4:	490d      	ldr	r1, [pc, #52]	@ (801241c <etharp_query+0x268>)
 80123e6:	4613      	mov	r3, r2
 80123e8:	005b      	lsls	r3, r3, #1
 80123ea:	4413      	add	r3, r2
 80123ec:	00db      	lsls	r3, r3, #3
 80123ee:	440b      	add	r3, r1
 80123f0:	69fa      	ldr	r2, [r7, #28]
 80123f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80123f4:	2300      	movs	r3, #0
 80123f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80123fa:	e002      	b.n	8012402 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80123fc:	23ff      	movs	r3, #255	@ 0xff
 80123fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8012402:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8012406:	4618      	mov	r0, r3
 8012408:	3728      	adds	r7, #40	@ 0x28
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	08018180 	.word	0x08018180
 8012414:	0801832c 	.word	0x0801832c
 8012418:	080181f8 	.word	0x080181f8
 801241c:	20008178 	.word	0x20008178
 8012420:	0801833c 	.word	0x0801833c
 8012424:	08018320 	.word	0x08018320
 8012428:	20008268 	.word	0x20008268
 801242c:	08018364 	.word	0x08018364

08012430 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b08a      	sub	sp, #40	@ 0x28
 8012434:	af02      	add	r7, sp, #8
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801243e:	2300      	movs	r3, #0
 8012440:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d106      	bne.n	8012456 <etharp_raw+0x26>
 8012448:	4b3a      	ldr	r3, [pc, #232]	@ (8012534 <etharp_raw+0x104>)
 801244a:	f240 4257 	movw	r2, #1111	@ 0x457
 801244e:	493a      	ldr	r1, [pc, #232]	@ (8012538 <etharp_raw+0x108>)
 8012450:	483a      	ldr	r0, [pc, #232]	@ (801253c <etharp_raw+0x10c>)
 8012452:	f002 f995 	bl	8014780 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012456:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801245a:	211c      	movs	r1, #28
 801245c:	200e      	movs	r0, #14
 801245e:	f7f8 fa75 	bl	800a94c <pbuf_alloc>
 8012462:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d102      	bne.n	8012470 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801246a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801246e:	e05d      	b.n	801252c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	895b      	ldrh	r3, [r3, #10]
 8012474:	2b1b      	cmp	r3, #27
 8012476:	d806      	bhi.n	8012486 <etharp_raw+0x56>
 8012478:	4b2e      	ldr	r3, [pc, #184]	@ (8012534 <etharp_raw+0x104>)
 801247a:	f240 4262 	movw	r2, #1122	@ 0x462
 801247e:	4930      	ldr	r1, [pc, #192]	@ (8012540 <etharp_raw+0x110>)
 8012480:	482e      	ldr	r0, [pc, #184]	@ (801253c <etharp_raw+0x10c>)
 8012482:	f002 f97d 	bl	8014780 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801248c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801248e:	4618      	mov	r0, r3
 8012490:	f7f7 f8f0 	bl	8009674 <lwip_htons>
 8012494:	4603      	mov	r3, r0
 8012496:	461a      	mov	r2, r3
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80124a2:	2b06      	cmp	r3, #6
 80124a4:	d006      	beq.n	80124b4 <etharp_raw+0x84>
 80124a6:	4b23      	ldr	r3, [pc, #140]	@ (8012534 <etharp_raw+0x104>)
 80124a8:	f240 4269 	movw	r2, #1129	@ 0x469
 80124ac:	4925      	ldr	r1, [pc, #148]	@ (8012544 <etharp_raw+0x114>)
 80124ae:	4823      	ldr	r0, [pc, #140]	@ (801253c <etharp_raw+0x10c>)
 80124b0:	f002 f966 	bl	8014780 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	3308      	adds	r3, #8
 80124b8:	2206      	movs	r2, #6
 80124ba:	6839      	ldr	r1, [r7, #0]
 80124bc:	4618      	mov	r0, r3
 80124be:	f002 fb34 	bl	8014b2a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	3312      	adds	r3, #18
 80124c6:	2206      	movs	r2, #6
 80124c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80124ca:	4618      	mov	r0, r3
 80124cc:	f002 fb2d 	bl	8014b2a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	330e      	adds	r3, #14
 80124d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80124d6:	6812      	ldr	r2, [r2, #0]
 80124d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	3318      	adds	r3, #24
 80124de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124e0:	6812      	ldr	r2, [r2, #0]
 80124e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	2200      	movs	r2, #0
 80124e8:	701a      	strb	r2, [r3, #0]
 80124ea:	2200      	movs	r2, #0
 80124ec:	f042 0201 	orr.w	r2, r2, #1
 80124f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	2200      	movs	r2, #0
 80124f6:	f042 0208 	orr.w	r2, r2, #8
 80124fa:	709a      	strb	r2, [r3, #2]
 80124fc:	2200      	movs	r2, #0
 80124fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	2206      	movs	r2, #6
 8012504:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	2204      	movs	r2, #4
 801250a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801250c:	f640 0306 	movw	r3, #2054	@ 0x806
 8012510:	9300      	str	r3, [sp, #0]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	68ba      	ldr	r2, [r7, #8]
 8012516:	69b9      	ldr	r1, [r7, #24]
 8012518:	68f8      	ldr	r0, [r7, #12]
 801251a:	f001 fc0d 	bl	8013d38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801251e:	69b8      	ldr	r0, [r7, #24]
 8012520:	f7f8 fcf8 	bl	800af14 <pbuf_free>
  p = NULL;
 8012524:	2300      	movs	r3, #0
 8012526:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012528:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3720      	adds	r7, #32
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	08018180 	.word	0x08018180
 8012538:	080182d0 	.word	0x080182d0
 801253c:	080181f8 	.word	0x080181f8
 8012540:	08018380 	.word	0x08018380
 8012544:	080183b4 	.word	0x080183b4

08012548 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b088      	sub	sp, #32
 801254c:	af04      	add	r7, sp, #16
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	60b9      	str	r1, [r7, #8]
 8012552:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012564:	2201      	movs	r2, #1
 8012566:	9203      	str	r2, [sp, #12]
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	9202      	str	r2, [sp, #8]
 801256c:	4a06      	ldr	r2, [pc, #24]	@ (8012588 <etharp_request_dst+0x40>)
 801256e:	9201      	str	r2, [sp, #4]
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	4603      	mov	r3, r0
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	f7ff ff5a 	bl	8012430 <etharp_raw>
 801257c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801257e:	4618      	mov	r0, r3
 8012580:	3710      	adds	r7, #16
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}
 8012586:	bf00      	nop
 8012588:	08018e1c 	.word	0x08018e1c

0801258c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012596:	4a05      	ldr	r2, [pc, #20]	@ (80125ac <etharp_request+0x20>)
 8012598:	6839      	ldr	r1, [r7, #0]
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f7ff ffd4 	bl	8012548 <etharp_request_dst>
 80125a0:	4603      	mov	r3, r0
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	08018e14 	.word	0x08018e14

080125b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b08e      	sub	sp, #56	@ 0x38
 80125b4:	af04      	add	r7, sp, #16
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80125ba:	4b95      	ldr	r3, [pc, #596]	@ (8012810 <icmp_input+0x260>)
 80125bc:	689b      	ldr	r3, [r3, #8]
 80125be:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80125c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	f003 030f 	and.w	r3, r3, #15
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	009b      	lsls	r3, r3, #2
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80125d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125d2:	2b13      	cmp	r3, #19
 80125d4:	d805      	bhi.n	80125e2 <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 80125d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125d8:	4619      	mov	r1, r3
 80125da:	488e      	ldr	r0, [pc, #568]	@ (8012814 <icmp_input+0x264>)
 80125dc:	f002 f8d0 	bl	8014780 <iprintf>
    goto lenerr;
 80125e0:	e10a      	b.n	80127f8 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	895b      	ldrh	r3, [r3, #10]
 80125e6:	2b03      	cmp	r3, #3
 80125e8:	d806      	bhi.n	80125f8 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	891b      	ldrh	r3, [r3, #8]
 80125ee:	4619      	mov	r1, r3
 80125f0:	4889      	ldr	r0, [pc, #548]	@ (8012818 <icmp_input+0x268>)
 80125f2:	f002 f8c5 	bl	8014780 <iprintf>
    goto lenerr;
 80125f6:	e0ff      	b.n	80127f8 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	781b      	ldrb	r3, [r3, #0]
 80125fe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	785b      	ldrb	r3, [r3, #1]
 8012608:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801260c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012610:	2b00      	cmp	r3, #0
 8012612:	f000 80ea 	beq.w	80127ea <icmp_input+0x23a>
 8012616:	2b08      	cmp	r3, #8
 8012618:	f040 80de 	bne.w	80127d8 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801261c:	4b7f      	ldr	r3, [pc, #508]	@ (801281c <icmp_input+0x26c>)
 801261e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012620:	4b7b      	ldr	r3, [pc, #492]	@ (8012810 <icmp_input+0x260>)
 8012622:	695b      	ldr	r3, [r3, #20]
 8012624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012628:	2be0      	cmp	r3, #224	@ 0xe0
 801262a:	d103      	bne.n	8012634 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801262c:	487c      	ldr	r0, [pc, #496]	@ (8012820 <icmp_input+0x270>)
 801262e:	f002 f917 	bl	8014860 <puts>
        goto icmperr;
 8012632:	e0e5      	b.n	8012800 <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012634:	4b76      	ldr	r3, [pc, #472]	@ (8012810 <icmp_input+0x260>)
 8012636:	695b      	ldr	r3, [r3, #20]
 8012638:	4a75      	ldr	r2, [pc, #468]	@ (8012810 <icmp_input+0x260>)
 801263a:	6812      	ldr	r2, [r2, #0]
 801263c:	4611      	mov	r1, r2
 801263e:	4618      	mov	r0, r3
 8012640:	f000 fc6c 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 8012644:	4603      	mov	r3, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	d003      	beq.n	8012652 <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801264a:	4876      	ldr	r0, [pc, #472]	@ (8012824 <icmp_input+0x274>)
 801264c:	f002 f908 	bl	8014860 <puts>
        goto icmperr;
 8012650:	e0d6      	b.n	8012800 <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 8012652:	4875      	ldr	r0, [pc, #468]	@ (8012828 <icmp_input+0x278>)
 8012654:	f002 f904 	bl	8014860 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	891b      	ldrh	r3, [r3, #8]
 801265c:	2b07      	cmp	r3, #7
 801265e:	d803      	bhi.n	8012668 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 8012660:	4872      	ldr	r0, [pc, #456]	@ (801282c <icmp_input+0x27c>)
 8012662:	f002 f8fd 	bl	8014860 <puts>
        goto lenerr;
 8012666:	e0c7      	b.n	80127f8 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012668:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801266a:	330e      	adds	r3, #14
 801266c:	4619      	mov	r1, r3
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f7f8 fbba 	bl	800ade8 <pbuf_add_header>
 8012674:	4603      	mov	r3, r0
 8012676:	2b00      	cmp	r3, #0
 8012678:	d057      	beq.n	801272a <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	891a      	ldrh	r2, [r3, #8]
 801267e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012680:	4413      	add	r3, r2
 8012682:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	891b      	ldrh	r3, [r3, #8]
 8012688:	8b7a      	ldrh	r2, [r7, #26]
 801268a:	429a      	cmp	r2, r3
 801268c:	d203      	bcs.n	8012696 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801268e:	4868      	ldr	r0, [pc, #416]	@ (8012830 <icmp_input+0x280>)
 8012690:	f002 f8e6 	bl	8014860 <puts>
          goto icmperr;
 8012694:	e0b4      	b.n	8012800 <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012696:	8b7b      	ldrh	r3, [r7, #26]
 8012698:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801269c:	4619      	mov	r1, r3
 801269e:	200e      	movs	r0, #14
 80126a0:	f7f8 f954 	bl	800a94c <pbuf_alloc>
 80126a4:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d103      	bne.n	80126b4 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 80126ac:	4861      	ldr	r0, [pc, #388]	@ (8012834 <icmp_input+0x284>)
 80126ae:	f002 f8d7 	bl	8014860 <puts>
          goto icmperr;
 80126b2:	e0a5      	b.n	8012800 <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	895b      	ldrh	r3, [r3, #10]
 80126b8:	461a      	mov	r2, r3
 80126ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126bc:	3308      	adds	r3, #8
 80126be:	429a      	cmp	r2, r3
 80126c0:	d206      	bcs.n	80126d0 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 80126c2:	485d      	ldr	r0, [pc, #372]	@ (8012838 <icmp_input+0x288>)
 80126c4:	f002 f85c 	bl	8014780 <iprintf>
          pbuf_free(r);
 80126c8:	6978      	ldr	r0, [r7, #20]
 80126ca:	f7f8 fc23 	bl	800af14 <pbuf_free>
          goto icmperr;
 80126ce:	e097      	b.n	8012800 <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80126d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80126d8:	4618      	mov	r0, r3
 80126da:	f002 fa26 	bl	8014b2a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80126de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126e0:	4619      	mov	r1, r3
 80126e2:	6978      	ldr	r0, [r7, #20]
 80126e4:	f7f8 fb90 	bl	800ae08 <pbuf_remove_header>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d009      	beq.n	8012702 <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80126ee:	4b53      	ldr	r3, [pc, #332]	@ (801283c <icmp_input+0x28c>)
 80126f0:	22b6      	movs	r2, #182	@ 0xb6
 80126f2:	4953      	ldr	r1, [pc, #332]	@ (8012840 <icmp_input+0x290>)
 80126f4:	4853      	ldr	r0, [pc, #332]	@ (8012844 <icmp_input+0x294>)
 80126f6:	f002 f843 	bl	8014780 <iprintf>
          pbuf_free(r);
 80126fa:	6978      	ldr	r0, [r7, #20]
 80126fc:	f7f8 fc0a 	bl	800af14 <pbuf_free>
          goto icmperr;
 8012700:	e07e      	b.n	8012800 <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012702:	6879      	ldr	r1, [r7, #4]
 8012704:	6978      	ldr	r0, [r7, #20]
 8012706:	f7f8 fd2d 	bl	800b164 <pbuf_copy>
 801270a:	4603      	mov	r3, r0
 801270c:	2b00      	cmp	r3, #0
 801270e:	d006      	beq.n	801271e <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 8012710:	484d      	ldr	r0, [pc, #308]	@ (8012848 <icmp_input+0x298>)
 8012712:	f002 f835 	bl	8014780 <iprintf>
          pbuf_free(r);
 8012716:	6978      	ldr	r0, [r7, #20]
 8012718:	f7f8 fbfc 	bl	800af14 <pbuf_free>
          goto icmperr;
 801271c:	e070      	b.n	8012800 <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f7f8 fbf8 	bl	800af14 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	607b      	str	r3, [r7, #4]
 8012728:	e00f      	b.n	801274a <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801272a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801272c:	330e      	adds	r3, #14
 801272e:	4619      	mov	r1, r3
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f7f8 fb69 	bl	800ae08 <pbuf_remove_header>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d006      	beq.n	801274a <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801273c:	4b3f      	ldr	r3, [pc, #252]	@ (801283c <icmp_input+0x28c>)
 801273e:	22c7      	movs	r2, #199	@ 0xc7
 8012740:	4942      	ldr	r1, [pc, #264]	@ (801284c <icmp_input+0x29c>)
 8012742:	4840      	ldr	r0, [pc, #256]	@ (8012844 <icmp_input+0x294>)
 8012744:	f002 f81c 	bl	8014780 <iprintf>
          goto icmperr;
 8012748:	e05a      	b.n	8012800 <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012750:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012752:	4619      	mov	r1, r3
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f7f8 fb47 	bl	800ade8 <pbuf_add_header>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d003      	beq.n	8012768 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 8012760:	483b      	ldr	r0, [pc, #236]	@ (8012850 <icmp_input+0x2a0>)
 8012762:	f002 f80d 	bl	8014780 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012766:	e042      	b.n	80127ee <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	685b      	ldr	r3, [r3, #4]
 801276c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801276e:	69fb      	ldr	r3, [r7, #28]
 8012770:	681a      	ldr	r2, [r3, #0]
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012776:	4b26      	ldr	r3, [pc, #152]	@ (8012810 <icmp_input+0x260>)
 8012778:	691a      	ldr	r2, [r3, #16]
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	2200      	movs	r2, #0
 8012782:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	2200      	movs	r2, #0
 8012788:	709a      	strb	r2, [r3, #2]
 801278a:	2200      	movs	r2, #0
 801278c:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	22ff      	movs	r2, #255	@ 0xff
 8012792:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2200      	movs	r2, #0
 8012798:	729a      	strb	r2, [r3, #10]
 801279a:	2200      	movs	r2, #0
 801279c:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	9302      	str	r3, [sp, #8]
 80127a2:	2301      	movs	r3, #1
 80127a4:	9301      	str	r3, [sp, #4]
 80127a6:	2300      	movs	r3, #0
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	23ff      	movs	r3, #255	@ 0xff
 80127ac:	2200      	movs	r2, #0
 80127ae:	69f9      	ldr	r1, [r7, #28]
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f000 fadb 	bl	8012d6c <ip4_output_if>
 80127b6:	4603      	mov	r3, r0
 80127b8:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 80127ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d015      	beq.n	80127ee <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 80127c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7f6 ff34 	bl	8009634 <lwip_strerr>
 80127cc:	4603      	mov	r3, r0
 80127ce:	4619      	mov	r1, r3
 80127d0:	4820      	ldr	r0, [pc, #128]	@ (8012854 <icmp_input+0x2a4>)
 80127d2:	f001 ffd5 	bl	8014780 <iprintf>
      break;
 80127d6:	e00a      	b.n	80127ee <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 80127d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80127dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80127e0:	4619      	mov	r1, r3
 80127e2:	481d      	ldr	r0, [pc, #116]	@ (8012858 <icmp_input+0x2a8>)
 80127e4:	f001 ffcc 	bl	8014780 <iprintf>
 80127e8:	e002      	b.n	80127f0 <icmp_input+0x240>
      break;
 80127ea:	bf00      	nop
 80127ec:	e000      	b.n	80127f0 <icmp_input+0x240>
      break;
 80127ee:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f7f8 fb8f 	bl	800af14 <pbuf_free>
  return;
 80127f6:	e007      	b.n	8012808 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7f8 fb8b 	bl	800af14 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80127fe:	e003      	b.n	8012808 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f7f8 fb87 	bl	800af14 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012806:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012808:	3728      	adds	r7, #40	@ 0x28
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	200051b8 	.word	0x200051b8
 8012814:	080183f8 	.word	0x080183f8
 8012818:	0801842c 	.word	0x0801842c
 801281c:	200051cc 	.word	0x200051cc
 8012820:	0801845c 	.word	0x0801845c
 8012824:	08018488 	.word	0x08018488
 8012828:	080184b4 	.word	0x080184b4
 801282c:	080184c8 	.word	0x080184c8
 8012830:	080184ec 	.word	0x080184ec
 8012834:	08018528 	.word	0x08018528
 8012838:	08018550 	.word	0x08018550
 801283c:	08018578 	.word	0x08018578
 8012840:	080185b0 	.word	0x080185b0
 8012844:	080185e8 	.word	0x080185e8
 8012848:	08018610 	.word	0x08018610
 801284c:	08018638 	.word	0x08018638
 8012850:	0801866c 	.word	0x0801866c
 8012854:	08018690 	.word	0x08018690
 8012858:	080186c0 	.word	0x080186c0

0801285c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	460b      	mov	r3, r1
 8012866:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012868:	78fb      	ldrb	r3, [r7, #3]
 801286a:	461a      	mov	r2, r3
 801286c:	2103      	movs	r1, #3
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f000 f814 	bl	801289c <icmp_send_response>
}
 8012874:	bf00      	nop
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	460b      	mov	r3, r1
 8012886:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012888:	78fb      	ldrb	r3, [r7, #3]
 801288a:	461a      	mov	r2, r3
 801288c:	210b      	movs	r1, #11
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f000 f804 	bl	801289c <icmp_send_response>
}
 8012894:	bf00      	nop
 8012896:	3708      	adds	r7, #8
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b08c      	sub	sp, #48	@ 0x30
 80128a0:	af04      	add	r7, sp, #16
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	460b      	mov	r3, r1
 80128a6:	70fb      	strb	r3, [r7, #3]
 80128a8:	4613      	mov	r3, r2
 80128aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80128ac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80128b0:	2124      	movs	r1, #36	@ 0x24
 80128b2:	2022      	movs	r0, #34	@ 0x22
 80128b4:	f7f8 f84a 	bl	800a94c <pbuf_alloc>
 80128b8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d103      	bne.n	80128c8 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 80128c0:	4844      	ldr	r0, [pc, #272]	@ (80129d4 <icmp_send_response+0x138>)
 80128c2:	f001 ffcd 	bl	8014860 <puts>
 80128c6:	e082      	b.n	80129ce <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	895b      	ldrh	r3, [r3, #10]
 80128cc:	2b23      	cmp	r3, #35	@ 0x23
 80128ce:	d806      	bhi.n	80128de <icmp_send_response+0x42>
 80128d0:	4b41      	ldr	r3, [pc, #260]	@ (80129d8 <icmp_send_response+0x13c>)
 80128d2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80128d6:	4941      	ldr	r1, [pc, #260]	@ (80129dc <icmp_send_response+0x140>)
 80128d8:	4841      	ldr	r0, [pc, #260]	@ (80129e0 <icmp_send_response+0x144>)
 80128da:	f001 ff51 	bl	8014780 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 80128e4:	483f      	ldr	r0, [pc, #252]	@ (80129e4 <icmp_send_response+0x148>)
 80128e6:	f001 ff4b 	bl	8014780 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	68db      	ldr	r3, [r3, #12]
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	4619      	mov	r1, r3
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	0a1b      	lsrs	r3, r3, #8
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	461a      	mov	r2, r3
 80128fc:	69bb      	ldr	r3, [r7, #24]
 80128fe:	68db      	ldr	r3, [r3, #12]
 8012900:	0c1b      	lsrs	r3, r3, #16
 8012902:	b2db      	uxtb	r3, r3
 8012904:	4618      	mov	r0, r3
 8012906:	69bb      	ldr	r3, [r7, #24]
 8012908:	68db      	ldr	r3, [r3, #12]
 801290a:	0e1b      	lsrs	r3, r3, #24
 801290c:	b2db      	uxtb	r3, r3
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	4603      	mov	r3, r0
 8012912:	4835      	ldr	r0, [pc, #212]	@ (80129e8 <icmp_send_response+0x14c>)
 8012914:	f001 ff34 	bl	8014780 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 8012918:	4834      	ldr	r0, [pc, #208]	@ (80129ec <icmp_send_response+0x150>)
 801291a:	f001 ff31 	bl	8014780 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801291e:	69bb      	ldr	r3, [r7, #24]
 8012920:	691b      	ldr	r3, [r3, #16]
 8012922:	b2db      	uxtb	r3, r3
 8012924:	4619      	mov	r1, r3
 8012926:	69bb      	ldr	r3, [r7, #24]
 8012928:	691b      	ldr	r3, [r3, #16]
 801292a:	0a1b      	lsrs	r3, r3, #8
 801292c:	b2db      	uxtb	r3, r3
 801292e:	461a      	mov	r2, r3
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	691b      	ldr	r3, [r3, #16]
 8012934:	0c1b      	lsrs	r3, r3, #16
 8012936:	b2db      	uxtb	r3, r3
 8012938:	4618      	mov	r0, r3
 801293a:	69bb      	ldr	r3, [r7, #24]
 801293c:	691b      	ldr	r3, [r3, #16]
 801293e:	0e1b      	lsrs	r3, r3, #24
 8012940:	b2db      	uxtb	r3, r3
 8012942:	9300      	str	r3, [sp, #0]
 8012944:	4603      	mov	r3, r0
 8012946:	4828      	ldr	r0, [pc, #160]	@ (80129e8 <icmp_send_response+0x14c>)
 8012948:	f001 ff1a 	bl	8014780 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801294c:	200a      	movs	r0, #10
 801294e:	f001 ff29 	bl	80147a4 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	78fa      	ldrb	r2, [r7, #3]
 801295c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	78ba      	ldrb	r2, [r7, #2]
 8012962:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	2200      	movs	r2, #0
 8012968:	711a      	strb	r2, [r3, #4]
 801296a:	2200      	movs	r2, #0
 801296c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	2200      	movs	r2, #0
 8012972:	719a      	strb	r2, [r3, #6]
 8012974:	2200      	movs	r2, #0
 8012976:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	f103 0008 	add.w	r0, r3, #8
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	221c      	movs	r2, #28
 8012986:	4619      	mov	r1, r3
 8012988:	f002 f8cf 	bl	8014b2a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801298c:	69bb      	ldr	r3, [r7, #24]
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012992:	f107 030c 	add.w	r3, r7, #12
 8012996:	4618      	mov	r0, r3
 8012998:	f000 f82a 	bl	80129f0 <ip4_route>
 801299c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d011      	beq.n	80129c8 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	2200      	movs	r2, #0
 80129a8:	709a      	strb	r2, [r3, #2]
 80129aa:	2200      	movs	r2, #0
 80129ac:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80129ae:	f107 020c 	add.w	r2, r7, #12
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	9302      	str	r3, [sp, #8]
 80129b6:	2301      	movs	r3, #1
 80129b8:	9301      	str	r3, [sp, #4]
 80129ba:	2300      	movs	r3, #0
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	23ff      	movs	r3, #255	@ 0xff
 80129c0:	2100      	movs	r1, #0
 80129c2:	69f8      	ldr	r0, [r7, #28]
 80129c4:	f000 f9d2 	bl	8012d6c <ip4_output_if>
  }
  pbuf_free(q);
 80129c8:	69f8      	ldr	r0, [r7, #28]
 80129ca:	f7f8 faa3 	bl	800af14 <pbuf_free>
}
 80129ce:	3720      	adds	r7, #32
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	080186f4 	.word	0x080186f4
 80129d8:	08018578 	.word	0x08018578
 80129dc:	08018734 	.word	0x08018734
 80129e0:	080185e8 	.word	0x080185e8
 80129e4:	08018760 	.word	0x08018760
 80129e8:	0801877c 	.word	0x0801877c
 80129ec:	0801878c 	.word	0x0801878c

080129f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80129f0:	b480      	push	{r7}
 80129f2:	b085      	sub	sp, #20
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80129f8:	4b33      	ldr	r3, [pc, #204]	@ (8012ac8 <ip4_route+0xd8>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	60fb      	str	r3, [r7, #12]
 80129fe:	e036      	b.n	8012a6e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a06:	f003 0301 	and.w	r3, r3, #1
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d02b      	beq.n	8012a68 <ip4_route+0x78>
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a16:	089b      	lsrs	r3, r3, #2
 8012a18:	f003 0301 	and.w	r3, r3, #1
 8012a1c:	b2db      	uxtb	r3, r3
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d022      	beq.n	8012a68 <ip4_route+0x78>
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	3304      	adds	r3, #4
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d01d      	beq.n	8012a68 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681a      	ldr	r2, [r3, #0]
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	3304      	adds	r3, #4
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	405a      	eors	r2, r3
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	3308      	adds	r3, #8
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	4013      	ands	r3, r2
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d101      	bne.n	8012a48 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	e038      	b.n	8012aba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a4e:	f003 0302 	and.w	r3, r3, #2
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d108      	bne.n	8012a68 <ip4_route+0x78>
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	330c      	adds	r3, #12
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d101      	bne.n	8012a68 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	e028      	b.n	8012aba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	60fb      	str	r3, [r7, #12]
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d1c5      	bne.n	8012a00 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a74:	4b15      	ldr	r3, [pc, #84]	@ (8012acc <ip4_route+0xdc>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d01a      	beq.n	8012ab2 <ip4_route+0xc2>
 8012a7c:	4b13      	ldr	r3, [pc, #76]	@ (8012acc <ip4_route+0xdc>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a84:	f003 0301 	and.w	r3, r3, #1
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d012      	beq.n	8012ab2 <ip4_route+0xc2>
 8012a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8012acc <ip4_route+0xdc>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a94:	f003 0304 	and.w	r3, r3, #4
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d00a      	beq.n	8012ab2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8012acc <ip4_route+0xdc>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	3304      	adds	r3, #4
 8012aa2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d004      	beq.n	8012ab2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8012ab0:	d101      	bne.n	8012ab6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	e001      	b.n	8012aba <ip4_route+0xca>
  }

  return netif_default;
 8012ab6:	4b05      	ldr	r3, [pc, #20]	@ (8012acc <ip4_route+0xdc>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3714      	adds	r7, #20
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop
 8012ac8:	20008108 	.word	0x20008108
 8012acc:	2000810c 	.word	0x2000810c

08012ad0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012ade:	f003 0301 	and.w	r3, r3, #1
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d016      	beq.n	8012b16 <ip4_input_accept+0x46>
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	3304      	adds	r3, #4
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d011      	beq.n	8012b16 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012af2:	4b0b      	ldr	r3, [pc, #44]	@ (8012b20 <ip4_input_accept+0x50>)
 8012af4:	695a      	ldr	r2, [r3, #20]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	3304      	adds	r3, #4
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d008      	beq.n	8012b12 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012b00:	4b07      	ldr	r3, [pc, #28]	@ (8012b20 <ip4_input_accept+0x50>)
 8012b02:	695b      	ldr	r3, [r3, #20]
 8012b04:	6879      	ldr	r1, [r7, #4]
 8012b06:	4618      	mov	r0, r3
 8012b08:	f000 fa08 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 8012b0c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d001      	beq.n	8012b16 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012b12:	2301      	movs	r3, #1
 8012b14:	e000      	b.n	8012b18 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012b16:	2300      	movs	r3, #0
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3708      	adds	r7, #8
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	200051b8 	.word	0x200051b8

08012b24 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b086      	sub	sp, #24
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	091b      	lsrs	r3, r3, #4
 8012b3a:	b2db      	uxtb	r3, r3
 8012b3c:	2b04      	cmp	r3, #4
 8012b3e:	d004      	beq.n	8012b4a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f7f8 f9e7 	bl	800af14 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012b46:	2300      	movs	r3, #0
 8012b48:	e107      	b.n	8012d5a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	f003 030f 	and.w	r3, r3, #15
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	009b      	lsls	r3, r3, #2
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	885b      	ldrh	r3, [r3, #2]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7f6 fd87 	bl	8009674 <lwip_htons>
 8012b66:	4603      	mov	r3, r0
 8012b68:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	891b      	ldrh	r3, [r3, #8]
 8012b6e:	89ba      	ldrh	r2, [r7, #12]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d204      	bcs.n	8012b7e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012b74:	89bb      	ldrh	r3, [r7, #12]
 8012b76:	4619      	mov	r1, r3
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f7f8 f845 	bl	800ac08 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	895b      	ldrh	r3, [r3, #10]
 8012b82:	89fa      	ldrh	r2, [r7, #14]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d807      	bhi.n	8012b98 <ip4_input+0x74>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	891b      	ldrh	r3, [r3, #8]
 8012b8c:	89ba      	ldrh	r2, [r7, #12]
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d802      	bhi.n	8012b98 <ip4_input+0x74>
 8012b92:	89fb      	ldrh	r3, [r7, #14]
 8012b94:	2b13      	cmp	r3, #19
 8012b96:	d804      	bhi.n	8012ba2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7f8 f9bb 	bl	800af14 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	e0db      	b.n	8012d5a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	691b      	ldr	r3, [r3, #16]
 8012ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8012d64 <ip4_input+0x240>)
 8012ba8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	4a6d      	ldr	r2, [pc, #436]	@ (8012d64 <ip4_input+0x240>)
 8012bb0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8012d64 <ip4_input+0x240>)
 8012bb4:	695b      	ldr	r3, [r3, #20]
 8012bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012bba:	2be0      	cmp	r3, #224	@ 0xe0
 8012bbc:	d112      	bne.n	8012be4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012bc4:	f003 0301 	and.w	r3, r3, #1
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d007      	beq.n	8012bde <ip4_input+0xba>
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	3304      	adds	r3, #4
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d002      	beq.n	8012bde <ip4_input+0xba>
      netif = inp;
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	617b      	str	r3, [r7, #20]
 8012bdc:	e02a      	b.n	8012c34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012bde:	2300      	movs	r3, #0
 8012be0:	617b      	str	r3, [r7, #20]
 8012be2:	e027      	b.n	8012c34 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012be4:	6838      	ldr	r0, [r7, #0]
 8012be6:	f7ff ff73 	bl	8012ad0 <ip4_input_accept>
 8012bea:	4603      	mov	r3, r0
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d002      	beq.n	8012bf6 <ip4_input+0xd2>
      netif = inp;
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	617b      	str	r3, [r7, #20]
 8012bf4:	e01e      	b.n	8012c34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8012d64 <ip4_input+0x240>)
 8012bfc:	695b      	ldr	r3, [r3, #20]
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c02:	d017      	beq.n	8012c34 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012c04:	4b58      	ldr	r3, [pc, #352]	@ (8012d68 <ip4_input+0x244>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	617b      	str	r3, [r7, #20]
 8012c0a:	e00e      	b.n	8012c2a <ip4_input+0x106>
          if (netif == inp) {
 8012c0c:	697a      	ldr	r2, [r7, #20]
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d006      	beq.n	8012c22 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012c14:	6978      	ldr	r0, [r7, #20]
 8012c16:	f7ff ff5b 	bl	8012ad0 <ip4_input_accept>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d108      	bne.n	8012c32 <ip4_input+0x10e>
 8012c20:	e000      	b.n	8012c24 <ip4_input+0x100>
            continue;
 8012c22:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	617b      	str	r3, [r7, #20]
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d1ed      	bne.n	8012c0c <ip4_input+0xe8>
 8012c30:	e000      	b.n	8012c34 <ip4_input+0x110>
            break;
 8012c32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012c34:	4b4b      	ldr	r3, [pc, #300]	@ (8012d64 <ip4_input+0x240>)
 8012c36:	691b      	ldr	r3, [r3, #16]
 8012c38:	6839      	ldr	r1, [r7, #0]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f000 f96e 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 8012c40:	4603      	mov	r3, r0
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d105      	bne.n	8012c52 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012c46:	4b47      	ldr	r3, [pc, #284]	@ (8012d64 <ip4_input+0x240>)
 8012c48:	691b      	ldr	r3, [r3, #16]
 8012c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012c4e:	2be0      	cmp	r3, #224	@ 0xe0
 8012c50:	d104      	bne.n	8012c5c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f7f8 f95e 	bl	800af14 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	e07e      	b.n	8012d5a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d104      	bne.n	8012c6c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f7f8 f956 	bl	800af14 <pbuf_free>
    return ERR_OK;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	e076      	b.n	8012d5a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	88db      	ldrh	r3, [r3, #6]
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	461a      	mov	r2, r3
 8012c74:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8012c78:	4013      	ands	r3, r2
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d00b      	beq.n	8012c96 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f000 fc92 	bl	80135a8 <ip4_reass>
 8012c84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d101      	bne.n	8012c90 <ip4_input+0x16c>
      return ERR_OK;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	e064      	b.n	8012d5a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012c96:	4a33      	ldr	r2, [pc, #204]	@ (8012d64 <ip4_input+0x240>)
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012c9c:	4a31      	ldr	r2, [pc, #196]	@ (8012d64 <ip4_input+0x240>)
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012ca2:	4a30      	ldr	r2, [pc, #192]	@ (8012d64 <ip4_input+0x240>)
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	f003 030f 	and.w	r3, r3, #15
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	009b      	lsls	r3, r3, #2
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8012d64 <ip4_input+0x240>)
 8012cba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012cbc:	89fb      	ldrh	r3, [r7, #14]
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7f8 f8a1 	bl	800ae08 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012cc6:	693b      	ldr	r3, [r7, #16]
 8012cc8:	7a5b      	ldrb	r3, [r3, #9]
 8012cca:	2b11      	cmp	r3, #17
 8012ccc:	d006      	beq.n	8012cdc <ip4_input+0x1b8>
 8012cce:	2b11      	cmp	r3, #17
 8012cd0:	dc13      	bgt.n	8012cfa <ip4_input+0x1d6>
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d00c      	beq.n	8012cf0 <ip4_input+0x1cc>
 8012cd6:	2b06      	cmp	r3, #6
 8012cd8:	d005      	beq.n	8012ce6 <ip4_input+0x1c2>
 8012cda:	e00e      	b.n	8012cfa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012cdc:	6839      	ldr	r1, [r7, #0]
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7fd ff20 	bl	8010b24 <udp_input>
        break;
 8012ce4:	e026      	b.n	8012d34 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012ce6:	6839      	ldr	r1, [r7, #0]
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f7f9 ff53 	bl	800cb94 <tcp_input>
        break;
 8012cee:	e021      	b.n	8012d34 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012cf0:	6839      	ldr	r1, [r7, #0]
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f7ff fc5c 	bl	80125b0 <icmp_input>
        break;
 8012cf8:	e01c      	b.n	8012d34 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8012d64 <ip4_input+0x240>)
 8012cfc:	695b      	ldr	r3, [r3, #20]
 8012cfe:	6979      	ldr	r1, [r7, #20]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f000 f90b 	bl	8012f1c <ip4_addr_isbroadcast_u32>
 8012d06:	4603      	mov	r3, r0
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d10f      	bne.n	8012d2c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d0c:	4b15      	ldr	r3, [pc, #84]	@ (8012d64 <ip4_input+0x240>)
 8012d0e:	695b      	ldr	r3, [r3, #20]
 8012d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012d14:	2be0      	cmp	r3, #224	@ 0xe0
 8012d16:	d009      	beq.n	8012d2c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012d18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f7f8 f8e5 	bl	800aeee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012d24:	2102      	movs	r1, #2
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f7ff fd98 	bl	801285c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f7f8 f8f1 	bl	800af14 <pbuf_free>
        break;
 8012d32:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012d34:	4b0b      	ldr	r3, [pc, #44]	@ (8012d64 <ip4_input+0x240>)
 8012d36:	2200      	movs	r2, #0
 8012d38:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8012d64 <ip4_input+0x240>)
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012d40:	4b08      	ldr	r3, [pc, #32]	@ (8012d64 <ip4_input+0x240>)
 8012d42:	2200      	movs	r2, #0
 8012d44:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012d46:	4b07      	ldr	r3, [pc, #28]	@ (8012d64 <ip4_input+0x240>)
 8012d48:	2200      	movs	r2, #0
 8012d4a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012d4c:	4b05      	ldr	r3, [pc, #20]	@ (8012d64 <ip4_input+0x240>)
 8012d4e:	2200      	movs	r2, #0
 8012d50:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012d52:	4b04      	ldr	r3, [pc, #16]	@ (8012d64 <ip4_input+0x240>)
 8012d54:	2200      	movs	r2, #0
 8012d56:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012d58:	2300      	movs	r3, #0
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3718      	adds	r7, #24
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	200051b8 	.word	0x200051b8
 8012d68:	20008108 	.word	0x20008108

08012d6c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b08a      	sub	sp, #40	@ 0x28
 8012d70:	af04      	add	r7, sp, #16
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	607a      	str	r2, [r7, #4]
 8012d78:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d009      	beq.n	8012d98 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d003      	beq.n	8012d92 <ip4_output_if+0x26>
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d102      	bne.n	8012d98 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d94:	3304      	adds	r3, #4
 8012d96:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012d98:	78fa      	ldrb	r2, [r7, #3]
 8012d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d9c:	9302      	str	r3, [sp, #8]
 8012d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012da2:	9301      	str	r3, [sp, #4]
 8012da4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012da8:	9300      	str	r3, [sp, #0]
 8012daa:	4613      	mov	r3, r2
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	6979      	ldr	r1, [r7, #20]
 8012db0:	68f8      	ldr	r0, [r7, #12]
 8012db2:	f000 f805 	bl	8012dc0 <ip4_output_if_src>
 8012db6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3718      	adds	r7, #24
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b088      	sub	sp, #32
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
 8012dcc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	7b9b      	ldrb	r3, [r3, #14]
 8012dd2:	2b01      	cmp	r3, #1
 8012dd4:	d006      	beq.n	8012de4 <ip4_output_if_src+0x24>
 8012dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8012f04 <ip4_output_if_src+0x144>)
 8012dd8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012ddc:	494a      	ldr	r1, [pc, #296]	@ (8012f08 <ip4_output_if_src+0x148>)
 8012dde:	484b      	ldr	r0, [pc, #300]	@ (8012f0c <ip4_output_if_src+0x14c>)
 8012de0:	f001 fcce 	bl	8014780 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d060      	beq.n	8012eac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012dea:	2314      	movs	r3, #20
 8012dec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012dee:	2114      	movs	r1, #20
 8012df0:	68f8      	ldr	r0, [r7, #12]
 8012df2:	f7f7 fff9 	bl	800ade8 <pbuf_add_header>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d002      	beq.n	8012e02 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012dfc:	f06f 0301 	mvn.w	r3, #1
 8012e00:	e07c      	b.n	8012efc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	895b      	ldrh	r3, [r3, #10]
 8012e0c:	2b13      	cmp	r3, #19
 8012e0e:	d806      	bhi.n	8012e1e <ip4_output_if_src+0x5e>
 8012e10:	4b3c      	ldr	r3, [pc, #240]	@ (8012f04 <ip4_output_if_src+0x144>)
 8012e12:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012e16:	493e      	ldr	r1, [pc, #248]	@ (8012f10 <ip4_output_if_src+0x150>)
 8012e18:	483c      	ldr	r0, [pc, #240]	@ (8012f0c <ip4_output_if_src+0x14c>)
 8012e1a:	f001 fcb1 	bl	8014780 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	78fa      	ldrb	r2, [r7, #3]
 8012e22:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012e2a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012e34:	8b7b      	ldrh	r3, [r7, #26]
 8012e36:	089b      	lsrs	r3, r3, #2
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	69fb      	ldr	r3, [r7, #28]
 8012e44:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012e4c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	891b      	ldrh	r3, [r3, #8]
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7f6 fc0e 	bl	8009674 <lwip_htons>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	2200      	movs	r2, #0
 8012e64:	719a      	strb	r2, [r3, #6]
 8012e66:	2200      	movs	r2, #0
 8012e68:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8012f14 <ip4_output_if_src+0x154>)
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7f6 fc00 	bl	8009674 <lwip_htons>
 8012e74:	4603      	mov	r3, r0
 8012e76:	461a      	mov	r2, r3
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012e7c:	4b25      	ldr	r3, [pc, #148]	@ (8012f14 <ip4_output_if_src+0x154>)
 8012e7e:	881b      	ldrh	r3, [r3, #0]
 8012e80:	3301      	adds	r3, #1
 8012e82:	b29a      	uxth	r2, r3
 8012e84:	4b23      	ldr	r3, [pc, #140]	@ (8012f14 <ip4_output_if_src+0x154>)
 8012e86:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d104      	bne.n	8012e98 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012e8e:	4b22      	ldr	r3, [pc, #136]	@ (8012f18 <ip4_output_if_src+0x158>)
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	69fb      	ldr	r3, [r7, #28]
 8012e94:	60da      	str	r2, [r3, #12]
 8012e96:	e003      	b.n	8012ea0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	69fb      	ldr	r3, [r7, #28]
 8012e9e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	729a      	strb	r2, [r3, #10]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	72da      	strb	r2, [r3, #11]
 8012eaa:	e00f      	b.n	8012ecc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	895b      	ldrh	r3, [r3, #10]
 8012eb0:	2b13      	cmp	r3, #19
 8012eb2:	d802      	bhi.n	8012eba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012eb4:	f06f 0301 	mvn.w	r3, #1
 8012eb8:	e020      	b.n	8012efc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	691b      	ldr	r3, [r3, #16]
 8012ec4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012ec6:	f107 0314 	add.w	r3, r7, #20
 8012eca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ece:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d00c      	beq.n	8012eee <ip4_output_if_src+0x12e>
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	891a      	ldrh	r2, [r3, #8]
 8012ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d906      	bls.n	8012eee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012ee4:	68f8      	ldr	r0, [r7, #12]
 8012ee6:	f000 fd53 	bl	8013990 <ip4_frag>
 8012eea:	4603      	mov	r3, r0
 8012eec:	e006      	b.n	8012efc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ef0:	695b      	ldr	r3, [r3, #20]
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	68f9      	ldr	r1, [r7, #12]
 8012ef6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ef8:	4798      	blx	r3
 8012efa:	4603      	mov	r3, r0
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3720      	adds	r7, #32
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	08018794 	.word	0x08018794
 8012f08:	080187c8 	.word	0x080187c8
 8012f0c:	080187d4 	.word	0x080187d4
 8012f10:	080187fc 	.word	0x080187fc
 8012f14:	2000826a 	.word	0x2000826a
 8012f18:	08018e10 	.word	0x08018e10

08012f1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b085      	sub	sp, #20
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f30:	d002      	beq.n	8012f38 <ip4_addr_isbroadcast_u32+0x1c>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d101      	bne.n	8012f3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012f38:	2301      	movs	r3, #1
 8012f3a:	e02a      	b.n	8012f92 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012f42:	f003 0302 	and.w	r3, r3, #2
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d101      	bne.n	8012f4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	e021      	b.n	8012f92 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	3304      	adds	r3, #4
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d101      	bne.n	8012f5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e019      	b.n	8012f92 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012f5e:	68fa      	ldr	r2, [r7, #12]
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	3304      	adds	r3, #4
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	405a      	eors	r2, r3
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	3308      	adds	r3, #8
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4013      	ands	r3, r2
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d10d      	bne.n	8012f90 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	3308      	adds	r3, #8
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	43da      	mvns	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	3308      	adds	r3, #8
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d101      	bne.n	8012f90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e000      	b.n	8012f92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012f90:	2300      	movs	r3, #0
  }
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3714      	adds	r7, #20
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr
	...

08012fa0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012faa:	4b12      	ldr	r3, [pc, #72]	@ (8012ff4 <ip_reass_tmr+0x54>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012fb0:	e018      	b.n	8012fe4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	7fdb      	ldrb	r3, [r3, #31]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d00b      	beq.n	8012fd2 <ip_reass_tmr+0x32>
      r->timer--;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	7fdb      	ldrb	r3, [r3, #31]
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	b2da      	uxtb	r2, r3
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	60fb      	str	r3, [r7, #12]
 8012fd0:	e008      	b.n	8012fe4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012fdc:	68b9      	ldr	r1, [r7, #8]
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 f80a 	bl	8012ff8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d1e3      	bne.n	8012fb2 <ip_reass_tmr+0x12>
    }
  }
}
 8012fea:	bf00      	nop
 8012fec:	bf00      	nop
 8012fee:	3710      	adds	r7, #16
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}
 8012ff4:	2000826c 	.word	0x2000826c

08012ff8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b088      	sub	sp, #32
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013002:	2300      	movs	r3, #0
 8013004:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013006:	683a      	ldr	r2, [r7, #0]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	429a      	cmp	r2, r3
 801300c:	d105      	bne.n	801301a <ip_reass_free_complete_datagram+0x22>
 801300e:	4b45      	ldr	r3, [pc, #276]	@ (8013124 <ip_reass_free_complete_datagram+0x12c>)
 8013010:	22ab      	movs	r2, #171	@ 0xab
 8013012:	4945      	ldr	r1, [pc, #276]	@ (8013128 <ip_reass_free_complete_datagram+0x130>)
 8013014:	4845      	ldr	r0, [pc, #276]	@ (801312c <ip_reass_free_complete_datagram+0x134>)
 8013016:	f001 fbb3 	bl	8014780 <iprintf>
  if (prev != NULL) {
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00a      	beq.n	8013036 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	429a      	cmp	r2, r3
 8013028:	d005      	beq.n	8013036 <ip_reass_free_complete_datagram+0x3e>
 801302a:	4b3e      	ldr	r3, [pc, #248]	@ (8013124 <ip_reass_free_complete_datagram+0x12c>)
 801302c:	22ad      	movs	r2, #173	@ 0xad
 801302e:	4940      	ldr	r1, [pc, #256]	@ (8013130 <ip_reass_free_complete_datagram+0x138>)
 8013030:	483e      	ldr	r0, [pc, #248]	@ (801312c <ip_reass_free_complete_datagram+0x134>)
 8013032:	f001 fba5 	bl	8014780 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	889b      	ldrh	r3, [r3, #4]
 8013042:	b29b      	uxth	r3, r3
 8013044:	2b00      	cmp	r3, #0
 8013046:	d12a      	bne.n	801309e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	6858      	ldr	r0, [r3, #4]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	3308      	adds	r3, #8
 801305e:	2214      	movs	r2, #20
 8013060:	4619      	mov	r1, r3
 8013062:	f001 fd62 	bl	8014b2a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013066:	2101      	movs	r1, #1
 8013068:	69b8      	ldr	r0, [r7, #24]
 801306a:	f7ff fc07 	bl	801287c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801306e:	69b8      	ldr	r0, [r7, #24]
 8013070:	f7f7 ffd8 	bl	800b024 <pbuf_clen>
 8013074:	4603      	mov	r3, r0
 8013076:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013078:	8bfa      	ldrh	r2, [r7, #30]
 801307a:	8a7b      	ldrh	r3, [r7, #18]
 801307c:	4413      	add	r3, r2
 801307e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013082:	db05      	blt.n	8013090 <ip_reass_free_complete_datagram+0x98>
 8013084:	4b27      	ldr	r3, [pc, #156]	@ (8013124 <ip_reass_free_complete_datagram+0x12c>)
 8013086:	22bc      	movs	r2, #188	@ 0xbc
 8013088:	492a      	ldr	r1, [pc, #168]	@ (8013134 <ip_reass_free_complete_datagram+0x13c>)
 801308a:	4828      	ldr	r0, [pc, #160]	@ (801312c <ip_reass_free_complete_datagram+0x134>)
 801308c:	f001 fb78 	bl	8014780 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013090:	8bfa      	ldrh	r2, [r7, #30]
 8013092:	8a7b      	ldrh	r3, [r7, #18]
 8013094:	4413      	add	r3, r2
 8013096:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013098:	69b8      	ldr	r0, [r7, #24]
 801309a:	f7f7 ff3b 	bl	800af14 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80130a4:	e01f      	b.n	80130e6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80130ac:	69bb      	ldr	r3, [r7, #24]
 80130ae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f7f7 ffb4 	bl	800b024 <pbuf_clen>
 80130bc:	4603      	mov	r3, r0
 80130be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80130c0:	8bfa      	ldrh	r2, [r7, #30]
 80130c2:	8a7b      	ldrh	r3, [r7, #18]
 80130c4:	4413      	add	r3, r2
 80130c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80130ca:	db05      	blt.n	80130d8 <ip_reass_free_complete_datagram+0xe0>
 80130cc:	4b15      	ldr	r3, [pc, #84]	@ (8013124 <ip_reass_free_complete_datagram+0x12c>)
 80130ce:	22cc      	movs	r2, #204	@ 0xcc
 80130d0:	4918      	ldr	r1, [pc, #96]	@ (8013134 <ip_reass_free_complete_datagram+0x13c>)
 80130d2:	4816      	ldr	r0, [pc, #88]	@ (801312c <ip_reass_free_complete_datagram+0x134>)
 80130d4:	f001 fb54 	bl	8014780 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80130d8:	8bfa      	ldrh	r2, [r7, #30]
 80130da:	8a7b      	ldrh	r3, [r7, #18]
 80130dc:	4413      	add	r3, r2
 80130de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80130e0:	68f8      	ldr	r0, [r7, #12]
 80130e2:	f7f7 ff17 	bl	800af14 <pbuf_free>
  while (p != NULL) {
 80130e6:	69bb      	ldr	r3, [r7, #24]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d1dc      	bne.n	80130a6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80130ec:	6839      	ldr	r1, [r7, #0]
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f000 f8c2 	bl	8013278 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80130f4:	4b10      	ldr	r3, [pc, #64]	@ (8013138 <ip_reass_free_complete_datagram+0x140>)
 80130f6:	881b      	ldrh	r3, [r3, #0]
 80130f8:	8bfa      	ldrh	r2, [r7, #30]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d905      	bls.n	801310a <ip_reass_free_complete_datagram+0x112>
 80130fe:	4b09      	ldr	r3, [pc, #36]	@ (8013124 <ip_reass_free_complete_datagram+0x12c>)
 8013100:	22d2      	movs	r2, #210	@ 0xd2
 8013102:	490e      	ldr	r1, [pc, #56]	@ (801313c <ip_reass_free_complete_datagram+0x144>)
 8013104:	4809      	ldr	r0, [pc, #36]	@ (801312c <ip_reass_free_complete_datagram+0x134>)
 8013106:	f001 fb3b 	bl	8014780 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801310a:	4b0b      	ldr	r3, [pc, #44]	@ (8013138 <ip_reass_free_complete_datagram+0x140>)
 801310c:	881a      	ldrh	r2, [r3, #0]
 801310e:	8bfb      	ldrh	r3, [r7, #30]
 8013110:	1ad3      	subs	r3, r2, r3
 8013112:	b29a      	uxth	r2, r3
 8013114:	4b08      	ldr	r3, [pc, #32]	@ (8013138 <ip_reass_free_complete_datagram+0x140>)
 8013116:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013118:	8bfb      	ldrh	r3, [r7, #30]
}
 801311a:	4618      	mov	r0, r3
 801311c:	3720      	adds	r7, #32
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	0801882c 	.word	0x0801882c
 8013128:	08018868 	.word	0x08018868
 801312c:	08018874 	.word	0x08018874
 8013130:	0801889c 	.word	0x0801889c
 8013134:	080188b0 	.word	0x080188b0
 8013138:	20008270 	.word	0x20008270
 801313c:	080188d0 	.word	0x080188d0

08013140 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b08a      	sub	sp, #40	@ 0x28
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801314a:	2300      	movs	r3, #0
 801314c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801314e:	2300      	movs	r3, #0
 8013150:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013152:	2300      	movs	r3, #0
 8013154:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013156:	2300      	movs	r3, #0
 8013158:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801315a:	2300      	movs	r3, #0
 801315c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801315e:	4b28      	ldr	r3, [pc, #160]	@ (8013200 <ip_reass_remove_oldest_datagram+0xc0>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013164:	e030      	b.n	80131c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013168:	695a      	ldr	r2, [r3, #20]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	68db      	ldr	r3, [r3, #12]
 801316e:	429a      	cmp	r2, r3
 8013170:	d10c      	bne.n	801318c <ip_reass_remove_oldest_datagram+0x4c>
 8013172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013174:	699a      	ldr	r2, [r3, #24]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	691b      	ldr	r3, [r3, #16]
 801317a:	429a      	cmp	r2, r3
 801317c:	d106      	bne.n	801318c <ip_reass_remove_oldest_datagram+0x4c>
 801317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013180:	899a      	ldrh	r2, [r3, #12]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	889b      	ldrh	r3, [r3, #4]
 8013186:	b29b      	uxth	r3, r3
 8013188:	429a      	cmp	r2, r3
 801318a:	d014      	beq.n	80131b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	3301      	adds	r3, #1
 8013190:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013192:	6a3b      	ldr	r3, [r7, #32]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d104      	bne.n	80131a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801319a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	61bb      	str	r3, [r7, #24]
 80131a0:	e009      	b.n	80131b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80131a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a4:	7fda      	ldrb	r2, [r3, #31]
 80131a6:	6a3b      	ldr	r3, [r7, #32]
 80131a8:	7fdb      	ldrb	r3, [r3, #31]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d803      	bhi.n	80131b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80131ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80131b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d001      	beq.n	80131c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80131be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80131c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80131c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d1cb      	bne.n	8013166 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80131ce:	6a3b      	ldr	r3, [r7, #32]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d008      	beq.n	80131e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80131d4:	69b9      	ldr	r1, [r7, #24]
 80131d6:	6a38      	ldr	r0, [r7, #32]
 80131d8:	f7ff ff0e 	bl	8012ff8 <ip_reass_free_complete_datagram>
 80131dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80131de:	697a      	ldr	r2, [r7, #20]
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	4413      	add	r3, r2
 80131e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80131e6:	697a      	ldr	r2, [r7, #20]
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	da02      	bge.n	80131f4 <ip_reass_remove_oldest_datagram+0xb4>
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	dcac      	bgt.n	801314e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80131f4:	697b      	ldr	r3, [r7, #20]
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3728      	adds	r7, #40	@ 0x28
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	bf00      	nop
 8013200:	2000826c 	.word	0x2000826c

08013204 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801320e:	2004      	movs	r0, #4
 8013210:	f7f6 fea4 	bl	8009f5c <memp_malloc>
 8013214:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d110      	bne.n	801323e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801321c:	6839      	ldr	r1, [r7, #0]
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f7ff ff8e 	bl	8013140 <ip_reass_remove_oldest_datagram>
 8013224:	4602      	mov	r2, r0
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	4293      	cmp	r3, r2
 801322a:	dc03      	bgt.n	8013234 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801322c:	2004      	movs	r0, #4
 801322e:	f7f6 fe95 	bl	8009f5c <memp_malloc>
 8013232:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d101      	bne.n	801323e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801323a:	2300      	movs	r3, #0
 801323c:	e016      	b.n	801326c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801323e:	2220      	movs	r2, #32
 8013240:	2100      	movs	r1, #0
 8013242:	68f8      	ldr	r0, [r7, #12]
 8013244:	f001 fbfc 	bl	8014a40 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	220f      	movs	r2, #15
 801324c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801324e:	4b09      	ldr	r3, [pc, #36]	@ (8013274 <ip_reass_enqueue_new_datagram+0x70>)
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013256:	4a07      	ldr	r2, [pc, #28]	@ (8013274 <ip_reass_enqueue_new_datagram+0x70>)
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	3308      	adds	r3, #8
 8013260:	2214      	movs	r2, #20
 8013262:	6879      	ldr	r1, [r7, #4]
 8013264:	4618      	mov	r0, r3
 8013266:	f001 fc60 	bl	8014b2a <memcpy>
  return ipr;
 801326a:	68fb      	ldr	r3, [r7, #12]
}
 801326c:	4618      	mov	r0, r3
 801326e:	3710      	adds	r7, #16
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}
 8013274:	2000826c 	.word	0x2000826c

08013278 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013282:	4b10      	ldr	r3, [pc, #64]	@ (80132c4 <ip_reass_dequeue_datagram+0x4c>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	429a      	cmp	r2, r3
 801328a:	d104      	bne.n	8013296 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4a0c      	ldr	r2, [pc, #48]	@ (80132c4 <ip_reass_dequeue_datagram+0x4c>)
 8013292:	6013      	str	r3, [r2, #0]
 8013294:	e00d      	b.n	80132b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d106      	bne.n	80132aa <ip_reass_dequeue_datagram+0x32>
 801329c:	4b0a      	ldr	r3, [pc, #40]	@ (80132c8 <ip_reass_dequeue_datagram+0x50>)
 801329e:	f240 1245 	movw	r2, #325	@ 0x145
 80132a2:	490a      	ldr	r1, [pc, #40]	@ (80132cc <ip_reass_dequeue_datagram+0x54>)
 80132a4:	480a      	ldr	r0, [pc, #40]	@ (80132d0 <ip_reass_dequeue_datagram+0x58>)
 80132a6:	f001 fa6b 	bl	8014780 <iprintf>
    prev->next = ipr->next;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80132b2:	6879      	ldr	r1, [r7, #4]
 80132b4:	2004      	movs	r0, #4
 80132b6:	f7f6 fec1 	bl	800a03c <memp_free>
}
 80132ba:	bf00      	nop
 80132bc:	3708      	adds	r7, #8
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	2000826c 	.word	0x2000826c
 80132c8:	0801882c 	.word	0x0801882c
 80132cc:	080188f4 	.word	0x080188f4
 80132d0:	08018874 	.word	0x08018874

080132d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b08c      	sub	sp, #48	@ 0x30
 80132d8:	af00      	add	r7, sp, #0
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80132e0:	2300      	movs	r3, #0
 80132e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80132e4:	2301      	movs	r3, #1
 80132e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	885b      	ldrh	r3, [r3, #2]
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7f6 f9bd 	bl	8009674 <lwip_htons>
 80132fa:	4603      	mov	r3, r0
 80132fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	f003 030f 	and.w	r3, r3, #15
 8013306:	b2db      	uxtb	r3, r3
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801330c:	7e7b      	ldrb	r3, [r7, #25]
 801330e:	b29b      	uxth	r3, r3
 8013310:	8b7a      	ldrh	r2, [r7, #26]
 8013312:	429a      	cmp	r2, r3
 8013314:	d202      	bcs.n	801331c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801331a:	e135      	b.n	8013588 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801331c:	7e7b      	ldrb	r3, [r7, #25]
 801331e:	b29b      	uxth	r3, r3
 8013320:	8b7a      	ldrh	r2, [r7, #26]
 8013322:	1ad3      	subs	r3, r2, r3
 8013324:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	88db      	ldrh	r3, [r3, #6]
 801332a:	b29b      	uxth	r3, r3
 801332c:	4618      	mov	r0, r3
 801332e:	f7f6 f9a1 	bl	8009674 <lwip_htons>
 8013332:	4603      	mov	r3, r0
 8013334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013338:	b29b      	uxth	r3, r3
 801333a:	00db      	lsls	r3, r3, #3
 801333c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013346:	2200      	movs	r2, #0
 8013348:	701a      	strb	r2, [r3, #0]
 801334a:	2200      	movs	r2, #0
 801334c:	705a      	strb	r2, [r3, #1]
 801334e:	2200      	movs	r2, #0
 8013350:	709a      	strb	r2, [r3, #2]
 8013352:	2200      	movs	r2, #0
 8013354:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013358:	8afa      	ldrh	r2, [r7, #22]
 801335a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801335c:	8afa      	ldrh	r2, [r7, #22]
 801335e:	8b7b      	ldrh	r3, [r7, #26]
 8013360:	4413      	add	r3, r2
 8013362:	b29a      	uxth	r2, r3
 8013364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013366:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801336a:	88db      	ldrh	r3, [r3, #6]
 801336c:	b29b      	uxth	r3, r3
 801336e:	8afa      	ldrh	r2, [r7, #22]
 8013370:	429a      	cmp	r2, r3
 8013372:	d902      	bls.n	801337a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013374:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013378:	e106      	b.n	8013588 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013380:	e068      	b.n	8013454 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801338a:	889b      	ldrh	r3, [r3, #4]
 801338c:	b29a      	uxth	r2, r3
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	889b      	ldrh	r3, [r3, #4]
 8013392:	b29b      	uxth	r3, r3
 8013394:	429a      	cmp	r2, r3
 8013396:	d235      	bcs.n	8013404 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801339a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801339c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801339e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d020      	beq.n	80133e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80133a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133a6:	889b      	ldrh	r3, [r3, #4]
 80133a8:	b29a      	uxth	r2, r3
 80133aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ac:	88db      	ldrh	r3, [r3, #6]
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d307      	bcc.n	80133c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80133b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b6:	88db      	ldrh	r3, [r3, #6]
 80133b8:	b29a      	uxth	r2, r3
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	889b      	ldrh	r3, [r3, #4]
 80133be:	b29b      	uxth	r3, r3
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d902      	bls.n	80133ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80133c8:	e0de      	b.n	8013588 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80133ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133cc:	68ba      	ldr	r2, [r7, #8]
 80133ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80133d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d2:	88db      	ldrh	r3, [r3, #6]
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d8:	889b      	ldrh	r3, [r3, #4]
 80133da:	b29b      	uxth	r3, r3
 80133dc:	429a      	cmp	r2, r3
 80133de:	d03d      	beq.n	801345c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80133e0:	2300      	movs	r3, #0
 80133e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80133e4:	e03a      	b.n	801345c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80133e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e8:	88db      	ldrh	r3, [r3, #6]
 80133ea:	b29a      	uxth	r2, r3
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	889b      	ldrh	r3, [r3, #4]
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d902      	bls.n	80133fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80133fa:	e0c5      	b.n	8013588 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	68ba      	ldr	r2, [r7, #8]
 8013400:	605a      	str	r2, [r3, #4]
      break;
 8013402:	e02b      	b.n	801345c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013406:	889b      	ldrh	r3, [r3, #4]
 8013408:	b29a      	uxth	r2, r3
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	889b      	ldrh	r3, [r3, #4]
 801340e:	b29b      	uxth	r3, r3
 8013410:	429a      	cmp	r2, r3
 8013412:	d102      	bne.n	801341a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013418:	e0b6      	b.n	8013588 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801341c:	889b      	ldrh	r3, [r3, #4]
 801341e:	b29a      	uxth	r2, r3
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	88db      	ldrh	r3, [r3, #6]
 8013424:	b29b      	uxth	r3, r3
 8013426:	429a      	cmp	r2, r3
 8013428:	d202      	bcs.n	8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801342a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801342e:	e0ab      	b.n	8013588 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013432:	2b00      	cmp	r3, #0
 8013434:	d009      	beq.n	801344a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013438:	88db      	ldrh	r3, [r3, #6]
 801343a:	b29a      	uxth	r2, r3
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	889b      	ldrh	r3, [r3, #4]
 8013440:	b29b      	uxth	r3, r3
 8013442:	429a      	cmp	r2, r3
 8013444:	d001      	beq.n	801344a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013446:	2300      	movs	r3, #0
 8013448:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013456:	2b00      	cmp	r3, #0
 8013458:	d193      	bne.n	8013382 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801345a:	e000      	b.n	801345e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801345c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013460:	2b00      	cmp	r3, #0
 8013462:	d12d      	bne.n	80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013466:	2b00      	cmp	r3, #0
 8013468:	d01c      	beq.n	80134a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801346c:	88db      	ldrh	r3, [r3, #6]
 801346e:	b29a      	uxth	r2, r3
 8013470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013472:	889b      	ldrh	r3, [r3, #4]
 8013474:	b29b      	uxth	r3, r3
 8013476:	429a      	cmp	r2, r3
 8013478:	d906      	bls.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801347a:	4b45      	ldr	r3, [pc, #276]	@ (8013590 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801347c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013480:	4944      	ldr	r1, [pc, #272]	@ (8013594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013482:	4845      	ldr	r0, [pc, #276]	@ (8013598 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013484:	f001 f97c 	bl	8014780 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801348a:	68ba      	ldr	r2, [r7, #8]
 801348c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801348e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013490:	88db      	ldrh	r3, [r3, #6]
 8013492:	b29a      	uxth	r2, r3
 8013494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013496:	889b      	ldrh	r3, [r3, #4]
 8013498:	b29b      	uxth	r3, r3
 801349a:	429a      	cmp	r2, r3
 801349c:	d010      	beq.n	80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801349e:	2300      	movs	r3, #0
 80134a0:	623b      	str	r3, [r7, #32]
 80134a2:	e00d      	b.n	80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d006      	beq.n	80134ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80134ac:	4b38      	ldr	r3, [pc, #224]	@ (8013590 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134ae:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80134b2:	493a      	ldr	r1, [pc, #232]	@ (801359c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80134b4:	4838      	ldr	r0, [pc, #224]	@ (8013598 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80134b6:	f001 f963 	bl	8014780 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	68ba      	ldr	r2, [r7, #8]
 80134be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d105      	bne.n	80134d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	7f9b      	ldrb	r3, [r3, #30]
 80134ca:	f003 0301 	and.w	r3, r3, #1
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d059      	beq.n	8013586 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80134d2:	6a3b      	ldr	r3, [r7, #32]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d04f      	beq.n	8013578 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	685b      	ldr	r3, [r3, #4]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d006      	beq.n	80134ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	889b      	ldrh	r3, [r3, #4]
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d002      	beq.n	80134f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80134ee:	2300      	movs	r3, #0
 80134f0:	623b      	str	r3, [r7, #32]
 80134f2:	e041      	b.n	8013578 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80134f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80134f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80134fe:	e012      	b.n	8013526 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8013506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013508:	88db      	ldrh	r3, [r3, #6]
 801350a:	b29a      	uxth	r2, r3
 801350c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801350e:	889b      	ldrh	r3, [r3, #4]
 8013510:	b29b      	uxth	r3, r3
 8013512:	429a      	cmp	r2, r3
 8013514:	d002      	beq.n	801351c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013516:	2300      	movs	r3, #0
 8013518:	623b      	str	r3, [r7, #32]
            break;
 801351a:	e007      	b.n	801352c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801351c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801351e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013528:	2b00      	cmp	r3, #0
 801352a:	d1e9      	bne.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801352c:	6a3b      	ldr	r3, [r7, #32]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d022      	beq.n	8013578 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d106      	bne.n	8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801353a:	4b15      	ldr	r3, [pc, #84]	@ (8013590 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801353c:	f240 12df 	movw	r2, #479	@ 0x1df
 8013540:	4917      	ldr	r1, [pc, #92]	@ (80135a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013542:	4815      	ldr	r0, [pc, #84]	@ (8013598 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013544:	f001 f91c 	bl	8014780 <iprintf>
          LWIP_ASSERT("sanity check",
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013550:	429a      	cmp	r2, r3
 8013552:	d106      	bne.n	8013562 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013554:	4b0e      	ldr	r3, [pc, #56]	@ (8013590 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013556:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801355a:	4911      	ldr	r1, [pc, #68]	@ (80135a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801355c:	480e      	ldr	r0, [pc, #56]	@ (8013598 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801355e:	f001 f90f 	bl	8014780 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d006      	beq.n	8013578 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801356a:	4b09      	ldr	r3, [pc, #36]	@ (8013590 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801356c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013570:	490c      	ldr	r1, [pc, #48]	@ (80135a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013572:	4809      	ldr	r0, [pc, #36]	@ (8013598 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013574:	f001 f904 	bl	8014780 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013578:	6a3b      	ldr	r3, [r7, #32]
 801357a:	2b00      	cmp	r3, #0
 801357c:	bf14      	ite	ne
 801357e:	2301      	movne	r3, #1
 8013580:	2300      	moveq	r3, #0
 8013582:	b2db      	uxtb	r3, r3
 8013584:	e000      	b.n	8013588 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013586:	2300      	movs	r3, #0
}
 8013588:	4618      	mov	r0, r3
 801358a:	3730      	adds	r7, #48	@ 0x30
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	0801882c 	.word	0x0801882c
 8013594:	08018910 	.word	0x08018910
 8013598:	08018874 	.word	0x08018874
 801359c:	08018930 	.word	0x08018930
 80135a0:	08018968 	.word	0x08018968
 80135a4:	08018978 	.word	0x08018978

080135a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b08e      	sub	sp, #56	@ 0x38
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80135b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	f003 030f 	and.w	r3, r3, #15
 80135be:	b2db      	uxtb	r3, r3
 80135c0:	009b      	lsls	r3, r3, #2
 80135c2:	b2db      	uxtb	r3, r3
 80135c4:	2b14      	cmp	r3, #20
 80135c6:	f040 8171 	bne.w	80138ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80135ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135cc:	88db      	ldrh	r3, [r3, #6]
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7f6 f84f 	bl	8009674 <lwip_htons>
 80135d6:	4603      	mov	r3, r0
 80135d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135dc:	b29b      	uxth	r3, r3
 80135de:	00db      	lsls	r3, r3, #3
 80135e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80135e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135e4:	885b      	ldrh	r3, [r3, #2]
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7f6 f843 	bl	8009674 <lwip_htons>
 80135ee:	4603      	mov	r3, r0
 80135f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80135f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	f003 030f 	and.w	r3, r3, #15
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013602:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013606:	b29b      	uxth	r3, r3
 8013608:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801360a:	429a      	cmp	r2, r3
 801360c:	f0c0 8150 	bcc.w	80138b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013610:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013614:	b29b      	uxth	r3, r3
 8013616:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013618:	1ad3      	subs	r3, r2, r3
 801361a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f7f7 fd01 	bl	800b024 <pbuf_clen>
 8013622:	4603      	mov	r3, r0
 8013624:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013626:	4b8c      	ldr	r3, [pc, #560]	@ (8013858 <ip4_reass+0x2b0>)
 8013628:	881b      	ldrh	r3, [r3, #0]
 801362a:	461a      	mov	r2, r3
 801362c:	8c3b      	ldrh	r3, [r7, #32]
 801362e:	4413      	add	r3, r2
 8013630:	2b0a      	cmp	r3, #10
 8013632:	dd10      	ble.n	8013656 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013634:	8c3b      	ldrh	r3, [r7, #32]
 8013636:	4619      	mov	r1, r3
 8013638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801363a:	f7ff fd81 	bl	8013140 <ip_reass_remove_oldest_datagram>
 801363e:	4603      	mov	r3, r0
 8013640:	2b00      	cmp	r3, #0
 8013642:	f000 8137 	beq.w	80138b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013646:	4b84      	ldr	r3, [pc, #528]	@ (8013858 <ip4_reass+0x2b0>)
 8013648:	881b      	ldrh	r3, [r3, #0]
 801364a:	461a      	mov	r2, r3
 801364c:	8c3b      	ldrh	r3, [r7, #32]
 801364e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013650:	2b0a      	cmp	r3, #10
 8013652:	f300 812f 	bgt.w	80138b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013656:	4b81      	ldr	r3, [pc, #516]	@ (801385c <ip4_reass+0x2b4>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	633b      	str	r3, [r7, #48]	@ 0x30
 801365c:	e015      	b.n	801368a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013660:	695a      	ldr	r2, [r3, #20]
 8013662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	429a      	cmp	r2, r3
 8013668:	d10c      	bne.n	8013684 <ip4_reass+0xdc>
 801366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801366c:	699a      	ldr	r2, [r3, #24]
 801366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013670:	691b      	ldr	r3, [r3, #16]
 8013672:	429a      	cmp	r2, r3
 8013674:	d106      	bne.n	8013684 <ip4_reass+0xdc>
 8013676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013678:	899a      	ldrh	r2, [r3, #12]
 801367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801367c:	889b      	ldrh	r3, [r3, #4]
 801367e:	b29b      	uxth	r3, r3
 8013680:	429a      	cmp	r2, r3
 8013682:	d006      	beq.n	8013692 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	633b      	str	r3, [r7, #48]	@ 0x30
 801368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801368c:	2b00      	cmp	r3, #0
 801368e:	d1e6      	bne.n	801365e <ip4_reass+0xb6>
 8013690:	e000      	b.n	8013694 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013692:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013696:	2b00      	cmp	r3, #0
 8013698:	d109      	bne.n	80136ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801369a:	8c3b      	ldrh	r3, [r7, #32]
 801369c:	4619      	mov	r1, r3
 801369e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136a0:	f7ff fdb0 	bl	8013204 <ip_reass_enqueue_new_datagram>
 80136a4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80136a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d11c      	bne.n	80136e6 <ip4_reass+0x13e>
      goto nullreturn;
 80136ac:	e105      	b.n	80138ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80136ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b0:	88db      	ldrh	r3, [r3, #6]
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7f5 ffdd 	bl	8009674 <lwip_htons>
 80136ba:	4603      	mov	r3, r0
 80136bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d110      	bne.n	80136e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80136c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c6:	89db      	ldrh	r3, [r3, #14]
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7f5 ffd3 	bl	8009674 <lwip_htons>
 80136ce:	4603      	mov	r3, r0
 80136d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d006      	beq.n	80136e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80136d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136da:	3308      	adds	r3, #8
 80136dc:	2214      	movs	r2, #20
 80136de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80136e0:	4618      	mov	r0, r3
 80136e2:	f001 fa22 	bl	8014b2a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80136e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136e8:	88db      	ldrh	r3, [r3, #6]
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	f003 0320 	and.w	r3, r3, #32
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	bf0c      	ite	eq
 80136f4:	2301      	moveq	r3, #1
 80136f6:	2300      	movne	r3, #0
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00e      	beq.n	8013720 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013702:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013704:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013706:	4413      	add	r3, r2
 8013708:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801370a:	8b7a      	ldrh	r2, [r7, #26]
 801370c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801370e:	429a      	cmp	r2, r3
 8013710:	f0c0 80a0 	bcc.w	8013854 <ip4_reass+0x2ac>
 8013714:	8b7b      	ldrh	r3, [r7, #26]
 8013716:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801371a:	4293      	cmp	r3, r2
 801371c:	f200 809a 	bhi.w	8013854 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013720:	69fa      	ldr	r2, [r7, #28]
 8013722:	6879      	ldr	r1, [r7, #4]
 8013724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013726:	f7ff fdd5 	bl	80132d4 <ip_reass_chain_frag_into_datagram_and_validate>
 801372a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013732:	f000 809b 	beq.w	801386c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013736:	4b48      	ldr	r3, [pc, #288]	@ (8013858 <ip4_reass+0x2b0>)
 8013738:	881a      	ldrh	r2, [r3, #0]
 801373a:	8c3b      	ldrh	r3, [r7, #32]
 801373c:	4413      	add	r3, r2
 801373e:	b29a      	uxth	r2, r3
 8013740:	4b45      	ldr	r3, [pc, #276]	@ (8013858 <ip4_reass+0x2b0>)
 8013742:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d00d      	beq.n	8013766 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801374a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801374c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801374e:	4413      	add	r3, r2
 8013750:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013754:	8a7a      	ldrh	r2, [r7, #18]
 8013756:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801375a:	7f9b      	ldrb	r3, [r3, #30]
 801375c:	f043 0301 	orr.w	r3, r3, #1
 8013760:	b2da      	uxtb	r2, r3
 8013762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013764:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	2b01      	cmp	r3, #1
 801376a:	d171      	bne.n	8013850 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801376e:	8b9b      	ldrh	r3, [r3, #28]
 8013770:	3314      	adds	r3, #20
 8013772:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013788:	3308      	adds	r3, #8
 801378a:	2214      	movs	r2, #20
 801378c:	4619      	mov	r1, r3
 801378e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013790:	f001 f9cb 	bl	8014b2a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013794:	8a3b      	ldrh	r3, [r7, #16]
 8013796:	4618      	mov	r0, r3
 8013798:	f7f5 ff6c 	bl	8009674 <lwip_htons>
 801379c:	4603      	mov	r3, r0
 801379e:	461a      	mov	r2, r3
 80137a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80137a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a6:	2200      	movs	r2, #0
 80137a8:	719a      	strb	r2, [r3, #6]
 80137aa:	2200      	movs	r2, #0
 80137ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80137ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b0:	2200      	movs	r2, #0
 80137b2:	729a      	strb	r2, [r3, #10]
 80137b4:	2200      	movs	r2, #0
 80137b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80137b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80137be:	e00d      	b.n	80137dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80137c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80137c6:	2114      	movs	r1, #20
 80137c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137ca:	f7f7 fb1d 	bl	800ae08 <pbuf_remove_header>
      pbuf_cat(p, r);
 80137ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f7f7 fc61 	bl	800b098 <pbuf_cat>
      r = iprh->next_pbuf;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 80137dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d1ee      	bne.n	80137c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80137e2:	4b1e      	ldr	r3, [pc, #120]	@ (801385c <ip4_reass+0x2b4>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d102      	bne.n	80137f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80137ec:	2300      	movs	r3, #0
 80137ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80137f0:	e010      	b.n	8013814 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80137f2:	4b1a      	ldr	r3, [pc, #104]	@ (801385c <ip4_reass+0x2b4>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80137f8:	e007      	b.n	801380a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80137fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013800:	429a      	cmp	r2, r3
 8013802:	d006      	beq.n	8013812 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	637b      	str	r3, [r7, #52]	@ 0x34
 801380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801380c:	2b00      	cmp	r3, #0
 801380e:	d1f4      	bne.n	80137fa <ip4_reass+0x252>
 8013810:	e000      	b.n	8013814 <ip4_reass+0x26c>
          break;
 8013812:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013814:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013816:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013818:	f7ff fd2e 	bl	8013278 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f7f7 fc01 	bl	800b024 <pbuf_clen>
 8013822:	4603      	mov	r3, r0
 8013824:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013826:	4b0c      	ldr	r3, [pc, #48]	@ (8013858 <ip4_reass+0x2b0>)
 8013828:	881b      	ldrh	r3, [r3, #0]
 801382a:	8c3a      	ldrh	r2, [r7, #32]
 801382c:	429a      	cmp	r2, r3
 801382e:	d906      	bls.n	801383e <ip4_reass+0x296>
 8013830:	4b0b      	ldr	r3, [pc, #44]	@ (8013860 <ip4_reass+0x2b8>)
 8013832:	f240 229b 	movw	r2, #667	@ 0x29b
 8013836:	490b      	ldr	r1, [pc, #44]	@ (8013864 <ip4_reass+0x2bc>)
 8013838:	480b      	ldr	r0, [pc, #44]	@ (8013868 <ip4_reass+0x2c0>)
 801383a:	f000 ffa1 	bl	8014780 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801383e:	4b06      	ldr	r3, [pc, #24]	@ (8013858 <ip4_reass+0x2b0>)
 8013840:	881a      	ldrh	r2, [r3, #0]
 8013842:	8c3b      	ldrh	r3, [r7, #32]
 8013844:	1ad3      	subs	r3, r2, r3
 8013846:	b29a      	uxth	r2, r3
 8013848:	4b03      	ldr	r3, [pc, #12]	@ (8013858 <ip4_reass+0x2b0>)
 801384a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	e038      	b.n	80138c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013850:	2300      	movs	r3, #0
 8013852:	e036      	b.n	80138c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013854:	bf00      	nop
 8013856:	e00a      	b.n	801386e <ip4_reass+0x2c6>
 8013858:	20008270 	.word	0x20008270
 801385c:	2000826c 	.word	0x2000826c
 8013860:	0801882c 	.word	0x0801882c
 8013864:	0801899c 	.word	0x0801899c
 8013868:	08018874 	.word	0x08018874
    goto nullreturn_ipr;
 801386c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013870:	2b00      	cmp	r3, #0
 8013872:	d106      	bne.n	8013882 <ip4_reass+0x2da>
 8013874:	4b15      	ldr	r3, [pc, #84]	@ (80138cc <ip4_reass+0x324>)
 8013876:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801387a:	4915      	ldr	r1, [pc, #84]	@ (80138d0 <ip4_reass+0x328>)
 801387c:	4815      	ldr	r0, [pc, #84]	@ (80138d4 <ip4_reass+0x32c>)
 801387e:	f000 ff7f 	bl	8014780 <iprintf>
  if (ipr->p == NULL) {
 8013882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d116      	bne.n	80138b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801388a:	4b13      	ldr	r3, [pc, #76]	@ (80138d8 <ip4_reass+0x330>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013890:	429a      	cmp	r2, r3
 8013892:	d006      	beq.n	80138a2 <ip4_reass+0x2fa>
 8013894:	4b0d      	ldr	r3, [pc, #52]	@ (80138cc <ip4_reass+0x324>)
 8013896:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801389a:	4910      	ldr	r1, [pc, #64]	@ (80138dc <ip4_reass+0x334>)
 801389c:	480d      	ldr	r0, [pc, #52]	@ (80138d4 <ip4_reass+0x32c>)
 801389e:	f000 ff6f 	bl	8014780 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80138a2:	2100      	movs	r1, #0
 80138a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138a6:	f7ff fce7 	bl	8013278 <ip_reass_dequeue_datagram>
 80138aa:	e006      	b.n	80138ba <ip4_reass+0x312>
    goto nullreturn;
 80138ac:	bf00      	nop
 80138ae:	e004      	b.n	80138ba <ip4_reass+0x312>
    goto nullreturn;
 80138b0:	bf00      	nop
 80138b2:	e002      	b.n	80138ba <ip4_reass+0x312>
      goto nullreturn;
 80138b4:	bf00      	nop
 80138b6:	e000      	b.n	80138ba <ip4_reass+0x312>
  }

nullreturn:
 80138b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f7f7 fb2a 	bl	800af14 <pbuf_free>
  return NULL;
 80138c0:	2300      	movs	r3, #0
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	3738      	adds	r7, #56	@ 0x38
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}
 80138ca:	bf00      	nop
 80138cc:	0801882c 	.word	0x0801882c
 80138d0:	080189b8 	.word	0x080189b8
 80138d4:	08018874 	.word	0x08018874
 80138d8:	2000826c 	.word	0x2000826c
 80138dc:	080189c4 	.word	0x080189c4

080138e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80138e4:	2005      	movs	r0, #5
 80138e6:	f7f6 fb39 	bl	8009f5c <memp_malloc>
 80138ea:	4603      	mov	r3, r0
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d106      	bne.n	801390c <ip_frag_free_pbuf_custom_ref+0x1c>
 80138fe:	4b07      	ldr	r3, [pc, #28]	@ (801391c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013900:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013904:	4906      	ldr	r1, [pc, #24]	@ (8013920 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013906:	4807      	ldr	r0, [pc, #28]	@ (8013924 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013908:	f000 ff3a 	bl	8014780 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801390c:	6879      	ldr	r1, [r7, #4]
 801390e:	2005      	movs	r0, #5
 8013910:	f7f6 fb94 	bl	800a03c <memp_free>
}
 8013914:	bf00      	nop
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	0801882c 	.word	0x0801882c
 8013920:	080189e4 	.word	0x080189e4
 8013924:	08018874 	.word	0x08018874

08013928 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d106      	bne.n	8013948 <ipfrag_free_pbuf_custom+0x20>
 801393a:	4b11      	ldr	r3, [pc, #68]	@ (8013980 <ipfrag_free_pbuf_custom+0x58>)
 801393c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013940:	4910      	ldr	r1, [pc, #64]	@ (8013984 <ipfrag_free_pbuf_custom+0x5c>)
 8013942:	4811      	ldr	r0, [pc, #68]	@ (8013988 <ipfrag_free_pbuf_custom+0x60>)
 8013944:	f000 ff1c 	bl	8014780 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	429a      	cmp	r2, r3
 801394e:	d006      	beq.n	801395e <ipfrag_free_pbuf_custom+0x36>
 8013950:	4b0b      	ldr	r3, [pc, #44]	@ (8013980 <ipfrag_free_pbuf_custom+0x58>)
 8013952:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8013956:	490d      	ldr	r1, [pc, #52]	@ (801398c <ipfrag_free_pbuf_custom+0x64>)
 8013958:	480b      	ldr	r0, [pc, #44]	@ (8013988 <ipfrag_free_pbuf_custom+0x60>)
 801395a:	f000 ff11 	bl	8014780 <iprintf>
  if (pcr->original != NULL) {
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	695b      	ldr	r3, [r3, #20]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d004      	beq.n	8013970 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	695b      	ldr	r3, [r3, #20]
 801396a:	4618      	mov	r0, r3
 801396c:	f7f7 fad2 	bl	800af14 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f7ff ffbd 	bl	80138f0 <ip_frag_free_pbuf_custom_ref>
}
 8013976:	bf00      	nop
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	0801882c 	.word	0x0801882c
 8013984:	080189f0 	.word	0x080189f0
 8013988:	08018874 	.word	0x08018874
 801398c:	080189fc 	.word	0x080189fc

08013990 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b094      	sub	sp, #80	@ 0x50
 8013994:	af02      	add	r7, sp, #8
 8013996:	60f8      	str	r0, [r7, #12]
 8013998:	60b9      	str	r1, [r7, #8]
 801399a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801399c:	2300      	movs	r3, #0
 801399e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80139a6:	3b14      	subs	r3, #20
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	da00      	bge.n	80139ae <ip4_frag+0x1e>
 80139ac:	3307      	adds	r3, #7
 80139ae:	10db      	asrs	r3, r3, #3
 80139b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80139b2:	2314      	movs	r3, #20
 80139b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80139bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80139c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	f003 030f 	and.w	r3, r3, #15
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	009b      	lsls	r3, r3, #2
 80139cc:	b2db      	uxtb	r3, r3
 80139ce:	2b14      	cmp	r3, #20
 80139d0:	d002      	beq.n	80139d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80139d2:	f06f 0305 	mvn.w	r3, #5
 80139d6:	e110      	b.n	8013bfa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	895b      	ldrh	r3, [r3, #10]
 80139dc:	2b13      	cmp	r3, #19
 80139de:	d809      	bhi.n	80139f4 <ip4_frag+0x64>
 80139e0:	4b88      	ldr	r3, [pc, #544]	@ (8013c04 <ip4_frag+0x274>)
 80139e2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80139e6:	4988      	ldr	r1, [pc, #544]	@ (8013c08 <ip4_frag+0x278>)
 80139e8:	4888      	ldr	r0, [pc, #544]	@ (8013c0c <ip4_frag+0x27c>)
 80139ea:	f000 fec9 	bl	8014780 <iprintf>
 80139ee:	f06f 0305 	mvn.w	r3, #5
 80139f2:	e102      	b.n	8013bfa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80139f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f6:	88db      	ldrh	r3, [r3, #6]
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7f5 fe3a 	bl	8009674 <lwip_htons>
 8013a00:	4603      	mov	r3, r0
 8013a02:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013a04:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013a06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a0a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013a0e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013a10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013a14:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	891b      	ldrh	r3, [r3, #8]
 8013a1a:	3b14      	subs	r3, #20
 8013a1c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013a20:	e0e1      	b.n	8013be6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013a22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013a24:	00db      	lsls	r3, r3, #3
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	bf28      	it	cs
 8013a30:	4613      	movcs	r3, r2
 8013a32:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013a34:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013a38:	2114      	movs	r1, #20
 8013a3a:	200e      	movs	r0, #14
 8013a3c:	f7f6 ff86 	bl	800a94c <pbuf_alloc>
 8013a40:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f000 80d5 	beq.w	8013bf4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a4c:	895b      	ldrh	r3, [r3, #10]
 8013a4e:	2b13      	cmp	r3, #19
 8013a50:	d806      	bhi.n	8013a60 <ip4_frag+0xd0>
 8013a52:	4b6c      	ldr	r3, [pc, #432]	@ (8013c04 <ip4_frag+0x274>)
 8013a54:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8013a58:	496d      	ldr	r1, [pc, #436]	@ (8013c10 <ip4_frag+0x280>)
 8013a5a:	486c      	ldr	r0, [pc, #432]	@ (8013c0c <ip4_frag+0x27c>)
 8013a5c:	f000 fe90 	bl	8014780 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	2214      	movs	r2, #20
 8013a66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f001 f85e 	bl	8014b2a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a70:	685b      	ldr	r3, [r3, #4]
 8013a72:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8013a74:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013a76:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8013a7a:	e064      	b.n	8013b46 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	895a      	ldrh	r2, [r3, #10]
 8013a80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013a82:	1ad3      	subs	r3, r2, r3
 8013a84:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	895b      	ldrh	r3, [r3, #10]
 8013a8a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d906      	bls.n	8013a9e <ip4_frag+0x10e>
 8013a90:	4b5c      	ldr	r3, [pc, #368]	@ (8013c04 <ip4_frag+0x274>)
 8013a92:	f240 322d 	movw	r2, #813	@ 0x32d
 8013a96:	495f      	ldr	r1, [pc, #380]	@ (8013c14 <ip4_frag+0x284>)
 8013a98:	485c      	ldr	r0, [pc, #368]	@ (8013c0c <ip4_frag+0x27c>)
 8013a9a:	f000 fe71 	bl	8014780 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013a9e:	8bfa      	ldrh	r2, [r7, #30]
 8013aa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013aa4:	4293      	cmp	r3, r2
 8013aa6:	bf28      	it	cs
 8013aa8:	4613      	movcs	r3, r2
 8013aaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013aae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d105      	bne.n	8013ac2 <ip4_frag+0x132>
        poff = 0;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	60fb      	str	r3, [r7, #12]
        continue;
 8013ac0:	e041      	b.n	8013b46 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013ac2:	f7ff ff0d 	bl	80138e0 <ip_frag_alloc_pbuf_custom_ref>
 8013ac6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d103      	bne.n	8013ad6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013ace:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ad0:	f7f7 fa20 	bl	800af14 <pbuf_free>
        goto memerr;
 8013ad4:	e08f      	b.n	8013bf6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013ad6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013adc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013ade:	4413      	add	r3, r2
 8013ae0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8013ae4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013ae8:	9201      	str	r2, [sp, #4]
 8013aea:	9300      	str	r3, [sp, #0]
 8013aec:	4603      	mov	r3, r0
 8013aee:	2241      	movs	r2, #65	@ 0x41
 8013af0:	2000      	movs	r0, #0
 8013af2:	f7f7 f855 	bl	800aba0 <pbuf_alloced_custom>
 8013af6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d106      	bne.n	8013b0c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013afe:	69b8      	ldr	r0, [r7, #24]
 8013b00:	f7ff fef6 	bl	80138f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013b04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b06:	f7f7 fa05 	bl	800af14 <pbuf_free>
        goto memerr;
 8013b0a:	e074      	b.n	8013bf6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013b0c:	68f8      	ldr	r0, [r7, #12]
 8013b0e:	f7f7 faa1 	bl	800b054 <pbuf_ref>
      pcr->original = p;
 8013b12:	69bb      	ldr	r3, [r7, #24]
 8013b14:	68fa      	ldr	r2, [r7, #12]
 8013b16:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8013c18 <ip4_frag+0x288>)
 8013b1c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013b1e:	6979      	ldr	r1, [r7, #20]
 8013b20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b22:	f7f7 fab9 	bl	800b098 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013b26:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8013b2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013b2e:	1ad3      	subs	r3, r2, r3
 8013b30:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013b34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d004      	beq.n	8013b46 <ip4_frag+0x1b6>
        poff = 0;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013b46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d196      	bne.n	8013a7c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013b4e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013b50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013b54:	4413      	add	r3, r2
 8013b56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013b5c:	f1a3 0213 	sub.w	r2, r3, #19
 8013b60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013b64:	429a      	cmp	r2, r3
 8013b66:	bfcc      	ite	gt
 8013b68:	2301      	movgt	r3, #1
 8013b6a:	2300      	movle	r3, #0
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013b70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b78:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8013b7a:	6a3b      	ldr	r3, [r7, #32]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d002      	beq.n	8013b86 <ip4_frag+0x1f6>
 8013b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d003      	beq.n	8013b8e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013b86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013b88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013b8c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013b8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f5 fd6f 	bl	8009674 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	461a      	mov	r2, r3
 8013b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b9c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013b9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013ba0:	3314      	adds	r3, #20
 8013ba2:	b29b      	uxth	r3, r3
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7f5 fd65 	bl	8009674 <lwip_htons>
 8013baa:	4603      	mov	r3, r0
 8013bac:	461a      	mov	r2, r3
 8013bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bb0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	729a      	strb	r2, [r3, #10]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	695b      	ldr	r3, [r3, #20]
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013bc4:	68b8      	ldr	r0, [r7, #8]
 8013bc6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013bc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013bca:	f7f7 f9a3 	bl	800af14 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013bce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013bd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013bd4:	1ad3      	subs	r3, r2, r3
 8013bd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8013bda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013bde:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013be0:	4413      	add	r3, r2
 8013be2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8013be6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	f47f af19 	bne.w	8013a22 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	e002      	b.n	8013bfa <ip4_frag+0x26a>
      goto memerr;
 8013bf4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013bf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3748      	adds	r7, #72	@ 0x48
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	0801882c 	.word	0x0801882c
 8013c08:	08018a08 	.word	0x08018a08
 8013c0c:	08018874 	.word	0x08018874
 8013c10:	08018a24 	.word	0x08018a24
 8013c14:	08018a44 	.word	0x08018a44
 8013c18:	08013929 	.word	0x08013929

08013c1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b086      	sub	sp, #24
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013c26:	230e      	movs	r3, #14
 8013c28:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	895b      	ldrh	r3, [r3, #10]
 8013c2e:	2b0e      	cmp	r3, #14
 8013c30:	d96e      	bls.n	8013d10 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	7bdb      	ldrb	r3, [r3, #15]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d106      	bne.n	8013c48 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c40:	3301      	adds	r3, #1
 8013c42:	b2da      	uxtb	r2, r3
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	7b1a      	ldrb	r2, [r3, #12]
 8013c52:	7b5b      	ldrb	r3, [r3, #13]
 8013c54:	021b      	lsls	r3, r3, #8
 8013c56:	4313      	orrs	r3, r2
 8013c58:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	f003 0301 	and.w	r3, r3, #1
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d023      	beq.n	8013cae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	2b01      	cmp	r3, #1
 8013c6c:	d10f      	bne.n	8013c8e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	785b      	ldrb	r3, [r3, #1]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d11b      	bne.n	8013cae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013c76:	693b      	ldr	r3, [r7, #16]
 8013c78:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c7a:	2b5e      	cmp	r3, #94	@ 0x5e
 8013c7c:	d117      	bne.n	8013cae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	7b5b      	ldrb	r3, [r3, #13]
 8013c82:	f043 0310 	orr.w	r3, r3, #16
 8013c86:	b2da      	uxtb	r2, r3
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	735a      	strb	r2, [r3, #13]
 8013c8c:	e00f      	b.n	8013cae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	2206      	movs	r2, #6
 8013c92:	4928      	ldr	r1, [pc, #160]	@ (8013d34 <ethernet_input+0x118>)
 8013c94:	4618      	mov	r0, r3
 8013c96:	f000 fec3 	bl	8014a20 <memcmp>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d106      	bne.n	8013cae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	7b5b      	ldrb	r3, [r3, #13]
 8013ca4:	f043 0308 	orr.w	r3, r3, #8
 8013ca8:	b2da      	uxtb	r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013cae:	89fb      	ldrh	r3, [r7, #14]
 8013cb0:	2b08      	cmp	r3, #8
 8013cb2:	d003      	beq.n	8013cbc <ethernet_input+0xa0>
 8013cb4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013cb8:	d014      	beq.n	8013ce4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013cba:	e032      	b.n	8013d22 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cc2:	f003 0308 	and.w	r3, r3, #8
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d024      	beq.n	8013d14 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013cca:	8afb      	ldrh	r3, [r7, #22]
 8013ccc:	4619      	mov	r1, r3
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7f7 f89a 	bl	800ae08 <pbuf_remove_header>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d11e      	bne.n	8013d18 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013cda:	6839      	ldr	r1, [r7, #0]
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f7fe ff21 	bl	8012b24 <ip4_input>
      break;
 8013ce2:	e013      	b.n	8013d0c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cea:	f003 0308 	and.w	r3, r3, #8
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d014      	beq.n	8013d1c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013cf2:	8afb      	ldrh	r3, [r7, #22]
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f7f7 f886 	bl	800ae08 <pbuf_remove_header>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d10e      	bne.n	8013d20 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013d02:	6839      	ldr	r1, [r7, #0]
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f7fe f82f 	bl	8011d68 <etharp_input>
      break;
 8013d0a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	e00c      	b.n	8013d2a <ethernet_input+0x10e>
    goto free_and_return;
 8013d10:	bf00      	nop
 8013d12:	e006      	b.n	8013d22 <ethernet_input+0x106>
        goto free_and_return;
 8013d14:	bf00      	nop
 8013d16:	e004      	b.n	8013d22 <ethernet_input+0x106>
        goto free_and_return;
 8013d18:	bf00      	nop
 8013d1a:	e002      	b.n	8013d22 <ethernet_input+0x106>
        goto free_and_return;
 8013d1c:	bf00      	nop
 8013d1e:	e000      	b.n	8013d22 <ethernet_input+0x106>
        goto free_and_return;
 8013d20:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f7f7 f8f6 	bl	800af14 <pbuf_free>
  return ERR_OK;
 8013d28:	2300      	movs	r3, #0
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3718      	adds	r7, #24
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	08018e14 	.word	0x08018e14

08013d38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b086      	sub	sp, #24
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	60f8      	str	r0, [r7, #12]
 8013d40:	60b9      	str	r1, [r7, #8]
 8013d42:	607a      	str	r2, [r7, #4]
 8013d44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013d46:	8c3b      	ldrh	r3, [r7, #32]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7f5 fc93 	bl	8009674 <lwip_htons>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013d52:	210e      	movs	r1, #14
 8013d54:	68b8      	ldr	r0, [r7, #8]
 8013d56:	f7f7 f847 	bl	800ade8 <pbuf_add_header>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d125      	bne.n	8013dac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	8afa      	ldrh	r2, [r7, #22]
 8013d6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	2206      	movs	r2, #6
 8013d70:	6839      	ldr	r1, [r7, #0]
 8013d72:	4618      	mov	r0, r3
 8013d74:	f000 fed9 	bl	8014b2a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	3306      	adds	r3, #6
 8013d7c:	2206      	movs	r2, #6
 8013d7e:	6879      	ldr	r1, [r7, #4]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f000 fed2 	bl	8014b2a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013d8c:	2b06      	cmp	r3, #6
 8013d8e:	d006      	beq.n	8013d9e <ethernet_output+0x66>
 8013d90:	4b0a      	ldr	r3, [pc, #40]	@ (8013dbc <ethernet_output+0x84>)
 8013d92:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8013d96:	490a      	ldr	r1, [pc, #40]	@ (8013dc0 <ethernet_output+0x88>)
 8013d98:	480a      	ldr	r0, [pc, #40]	@ (8013dc4 <ethernet_output+0x8c>)
 8013d9a:	f000 fcf1 	bl	8014780 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	699b      	ldr	r3, [r3, #24]
 8013da2:	68b9      	ldr	r1, [r7, #8]
 8013da4:	68f8      	ldr	r0, [r7, #12]
 8013da6:	4798      	blx	r3
 8013da8:	4603      	mov	r3, r0
 8013daa:	e002      	b.n	8013db2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013dac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013dae:	f06f 0301 	mvn.w	r3, #1
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3718      	adds	r7, #24
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	08018a54 	.word	0x08018a54
 8013dc0:	08018a8c 	.word	0x08018a8c
 8013dc4:	08018ac0 	.word	0x08018ac0

08013dc8 <HW_Verification_Proccess>:
 *      Author: leah
 */
#include "hw_verif.h"

void HW_Verification_Proccess(void)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	af00      	add	r7, sp, #0
	UDP_Server_Init();
 8013dcc:	f000 f82a 	bl	8013e24 <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 8013dd0:	f7f5 f82c 	bl	8008e2c <MX_LWIP_Process>
 8013dd4:	e7fc      	b.n	8013dd0 <HW_Verification_Proccess+0x8>
	...

08013dd8 <Match_CRC>:
 */
#include "crc.h"
#include "hw_verif_crc.h"

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b086      	sub	sp, #24
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	607a      	str	r2, [r7, #4]
 8013de2:	461a      	mov	r2, r3
 8013de4:	460b      	mov	r3, r1
 8013de6:	72fb      	strb	r3, [r7, #11]
 8013de8:	4613      	mov	r3, r2
 8013dea:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 8013dec:	7afb      	ldrb	r3, [r7, #11]
 8013dee:	461a      	mov	r2, r3
 8013df0:	68f9      	ldr	r1, [r7, #12]
 8013df2:	480b      	ldr	r0, [pc, #44]	@ (8013e20 <Match_CRC+0x48>)
 8013df4:	f7ed fe70 	bl	8001ad8 <HAL_CRC_Calculate>
 8013df8:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 8013dfa:	7abb      	ldrb	r3, [r7, #10]
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	6879      	ldr	r1, [r7, #4]
 8013e00:	4807      	ldr	r0, [pc, #28]	@ (8013e20 <Match_CRC+0x48>)
 8013e02:	f7ed fe69 	bl	8001ad8 <HAL_CRC_Calculate>
 8013e06:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 8013e08:	697a      	ldr	r2, [r7, #20]
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d101      	bne.n	8013e14 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 8013e10:	2301      	movs	r3, #1
 8013e12:	e000      	b.n	8013e16 <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 8013e14:	2300      	movs	r3, #0
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3718      	adds	r7, #24
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	20000228 	.word	0x20000228

08013e24 <UDP_Server_Init>:

uint8_t perform_test();
void send_result(uint8_t result);

void UDP_Server_Init(void)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 8013e2a:	f7fd fbbb 	bl	80115a4 <udp_new>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	4a12      	ldr	r2, [pc, #72]	@ (8013e7c <UDP_Server_Init+0x58>)
 8013e32:	6013      	str	r3, [r2, #0]

	if (upcb)
 8013e34:	4b11      	ldr	r3, [pc, #68]	@ (8013e7c <UDP_Server_Init+0x58>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d01a      	beq.n	8013e72 <UDP_Server_Init+0x4e>
	{
		// Bind the upcb to the UDP_PORT port
		// Using IP_ADDR_ANY allow the upcb to be used by any local interface
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 8013e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8013e7c <UDP_Server_Init+0x58>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	f24d 4231 	movw	r2, #54321	@ 0xd431
 8013e44:	490e      	ldr	r1, [pc, #56]	@ (8013e80 <UDP_Server_Init+0x5c>)
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7fd fa5c 	bl	8011304 <udp_bind>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 8013e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d107      	bne.n	8013e68 <UDP_Server_Init+0x44>
		{
			// Set a receive callback for the upcb
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 8013e58:	4b08      	ldr	r3, [pc, #32]	@ (8013e7c <UDP_Server_Init+0x58>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	4909      	ldr	r1, [pc, #36]	@ (8013e84 <UDP_Server_Init+0x60>)
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7fd fb3d 	bl	80114e0 <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 8013e66:	e004      	b.n	8013e72 <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 8013e68:	4b04      	ldr	r3, [pc, #16]	@ (8013e7c <UDP_Server_Init+0x58>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7fd fb57 	bl	8011520 <udp_remove>
}
 8013e72:	bf00      	nop
 8013e74:	3708      	adds	r7, #8
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	20008274 	.word	0x20008274
 8013e80:	08018e10 	.word	0x08018e10
 8013e84:	08013e89 	.word	0x08013e89

08013e88 <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b086      	sub	sp, #24
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	60f8      	str	r0, [r7, #12]
 8013e90:	60b9      	str	r1, [r7, #8]
 8013e92:	607a      	str	r2, [r7, #4]
 8013e94:	603b      	str	r3, [r7, #0]
	// Load data to in_msg
	in_msg.upcb = upcb;
 8013e96:	4a24      	ldr	r2, [pc, #144]	@ (8013f28 <UDP_Recv_Callback+0xa0>)
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	6013      	str	r3, [r2, #0]
	in_msg.addr = addr;
 8013e9c:	4a22      	ldr	r2, [pc, #136]	@ (8013f28 <UDP_Recv_Callback+0xa0>)
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	6053      	str	r3, [r2, #4]
	in_msg.port = port;
 8013ea2:	4a21      	ldr	r2, [pc, #132]	@ (8013f28 <UDP_Recv_Callback+0xa0>)
 8013ea4:	8c3b      	ldrh	r3, [r7, #32]
 8013ea6:	8113      	strh	r3, [r2, #8]

	int n_read = 0;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	617b      	str	r3, [r7, #20]
	memcpy(&in_msg.test_id, p->payload, sizeof(in_msg.test_id));
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8013f28 <UDP_Recv_Callback+0xa0>)
 8013eb6:	60da      	str	r2, [r3, #12]
	n_read += sizeof(in_msg.test_id);
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	3304      	adds	r3, #4
 8013ebc:	617b      	str	r3, [r7, #20]

	memcpy(&in_msg.peripheral, &((uint8_t *)p->payload)[n_read++], 1);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	685a      	ldr	r2, [r3, #4]
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	1c59      	adds	r1, r3, #1
 8013ec6:	6179      	str	r1, [r7, #20]
 8013ec8:	4413      	add	r3, r2
 8013eca:	781a      	ldrb	r2, [r3, #0]
 8013ecc:	4b16      	ldr	r3, [pc, #88]	@ (8013f28 <UDP_Recv_Callback+0xa0>)
 8013ece:	741a      	strb	r2, [r3, #16]
	memcpy(&in_msg.n_iter, &((uint8_t *)p->payload)[n_read++], 1);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	685a      	ldr	r2, [r3, #4]
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	1c59      	adds	r1, r3, #1
 8013ed8:	6179      	str	r1, [r7, #20]
 8013eda:	4413      	add	r3, r2
 8013edc:	781a      	ldrb	r2, [r3, #0]
 8013ede:	4b12      	ldr	r3, [pc, #72]	@ (8013f28 <UDP_Recv_Callback+0xa0>)
 8013ee0:	745a      	strb	r2, [r3, #17]
	memcpy(&in_msg.p_len, &((uint8_t *)p->payload)[n_read++], 1);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	685a      	ldr	r2, [r3, #4]
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	1c59      	adds	r1, r3, #1
 8013eea:	6179      	str	r1, [r7, #20]
 8013eec:	4413      	add	r3, r2
 8013eee:	781a      	ldrb	r2, [r3, #0]
 8013ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8013f28 <UDP_Recv_Callback+0xa0>)
 8013ef2:	749a      	strb	r2, [r3, #18]
	memcpy(&in_msg.payload, &((char *)p->payload)[n_read], in_msg.p_len);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	685a      	ldr	r2, [r3, #4]
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	4413      	add	r3, r2
 8013efc:	4a0a      	ldr	r2, [pc, #40]	@ (8013f28 <UDP_Recv_Callback+0xa0>)
 8013efe:	7c92      	ldrb	r2, [r2, #18]
 8013f00:	4619      	mov	r1, r3
 8013f02:	480a      	ldr	r0, [pc, #40]	@ (8013f2c <UDP_Recv_Callback+0xa4>)
 8013f04:	f000 fe11 	bl	8014b2a <memcpy>

	uint8_t result = perform_test();
 8013f08:	f000 f812 	bl	8013f30 <perform_test>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	74fb      	strb	r3, [r7, #19]
	send_result(result);
 8013f10:	7cfb      	ldrb	r3, [r7, #19]
 8013f12:	4618      	mov	r0, r3
 8013f14:	f000 f858 	bl	8013fc8 <send_result>

	// Free the p buffer
	pbuf_free(p);
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f7f6 fffb 	bl	800af14 <pbuf_free>
}
 8013f1e:	bf00      	nop
 8013f20:	3718      	adds	r7, #24
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	20008278 	.word	0x20008278
 8013f2c:	2000828b 	.word	0x2000828b

08013f30 <perform_test>:

uint8_t perform_test()
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	af00      	add	r7, sp, #0
	switch (in_msg.peripheral) {
 8013f34:	4b22      	ldr	r3, [pc, #136]	@ (8013fc0 <perform_test+0x90>)
 8013f36:	7c1b      	ldrb	r3, [r3, #16]
 8013f38:	3b01      	subs	r3, #1
 8013f3a:	2b0f      	cmp	r3, #15
 8013f3c:	d83c      	bhi.n	8013fb8 <perform_test+0x88>
 8013f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8013f44 <perform_test+0x14>)
 8013f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f44:	08013f85 	.word	0x08013f85
 8013f48:	08013f89 	.word	0x08013f89
 8013f4c:	08013fb9 	.word	0x08013fb9
 8013f50:	08013f9d 	.word	0x08013f9d
 8013f54:	08013fb9 	.word	0x08013fb9
 8013f58:	08013fb9 	.word	0x08013fb9
 8013f5c:	08013fb9 	.word	0x08013fb9
 8013f60:	08013fa1 	.word	0x08013fa1
 8013f64:	08013fb9 	.word	0x08013fb9
 8013f68:	08013fb9 	.word	0x08013fb9
 8013f6c:	08013fb9 	.word	0x08013fb9
 8013f70:	08013fb9 	.word	0x08013fb9
 8013f74:	08013fb9 	.word	0x08013fb9
 8013f78:	08013fb9 	.word	0x08013fb9
 8013f7c:	08013fb9 	.word	0x08013fb9
 8013f80:	08013fb5 	.word	0x08013fb5
		case TEST_TIM:
			return TEST_SUCCESS;
 8013f84:	2301      	movs	r3, #1
 8013f86:	e018      	b.n	8013fba <perform_test+0x8a>
			break;
		case TEST_UART:
			return UART_Test_N_Perform((uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 8013f88:	4b0d      	ldr	r3, [pc, #52]	@ (8013fc0 <perform_test+0x90>)
 8013f8a:	7c9b      	ldrb	r3, [r3, #18]
 8013f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8013fc0 <perform_test+0x90>)
 8013f8e:	7c52      	ldrb	r2, [r2, #17]
 8013f90:	4619      	mov	r1, r3
 8013f92:	480c      	ldr	r0, [pc, #48]	@ (8013fc4 <perform_test+0x94>)
 8013f94:	f000 faa2 	bl	80144dc <UART_Test_N_Perform>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	e00e      	b.n	8013fba <perform_test+0x8a>
			break;
		case TEST_SPI:
			return TEST_SUCCESS;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	e00c      	b.n	8013fba <perform_test+0x8a>
			break;
		case TEST_I2C:
			return I2C_Test_N_Perform((uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);;
 8013fa0:	4b07      	ldr	r3, [pc, #28]	@ (8013fc0 <perform_test+0x90>)
 8013fa2:	7c9b      	ldrb	r3, [r3, #18]
 8013fa4:	4a06      	ldr	r2, [pc, #24]	@ (8013fc0 <perform_test+0x90>)
 8013fa6:	7c52      	ldrb	r2, [r2, #17]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	4806      	ldr	r0, [pc, #24]	@ (8013fc4 <perform_test+0x94>)
 8013fac:	f000 f90c 	bl	80141c8 <I2C_Test_N_Perform>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	e002      	b.n	8013fba <perform_test+0x8a>
			break;
		case TEST_ADC:
			return TEST_SUCCESS;
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	e000      	b.n	8013fba <perform_test+0x8a>
			break;
		default:
			return TEST_FAILED;
 8013fb8:	23ff      	movs	r3, #255	@ 0xff
			break;
	}

	return TEST_FAILED;
}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	20008278 	.word	0x20008278
 8013fc4:	2000828b 	.word	0x2000828b

08013fc8 <send_result>:

void send_result(uint8_t result)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b086      	sub	sp, #24
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	4603      	mov	r3, r0
 8013fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t response[RESPONSE_SIZE];
	memcpy(response, &in_msg.test_id, sizeof(in_msg.test_id));
 8013fd2:	4b14      	ldr	r3, [pc, #80]	@ (8014024 <send_result+0x5c>)
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	60fb      	str	r3, [r7, #12]
	response[sizeof(in_msg.test_id)] = result;
 8013fd8:	79fb      	ldrb	r3, [r7, #7]
 8013fda:	743b      	strb	r3, [r7, #16]

	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 8013fdc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013fe0:	2105      	movs	r1, #5
 8013fe2:	2036      	movs	r0, #54	@ 0x36
 8013fe4:	f7f6 fcb2 	bl	800a94c <pbuf_alloc>
 8013fe8:	6178      	str	r0, [r7, #20]
	if (resp_buf != NULL)
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d014      	beq.n	801401a <send_result+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	f107 030c 	add.w	r3, r7, #12
 8013ffa:	6818      	ldr	r0, [r3, #0]
 8013ffc:	6010      	str	r0, [r2, #0]
 8013ffe:	791b      	ldrb	r3, [r3, #4]
 8014000:	7113      	strb	r3, [r2, #4]
		udp_sendto(in_msg.upcb, resp_buf, in_msg.addr, in_msg.port);
 8014002:	4b08      	ldr	r3, [pc, #32]	@ (8014024 <send_result+0x5c>)
 8014004:	6818      	ldr	r0, [r3, #0]
 8014006:	4b07      	ldr	r3, [pc, #28]	@ (8014024 <send_result+0x5c>)
 8014008:	685a      	ldr	r2, [r3, #4]
 801400a:	4b06      	ldr	r3, [pc, #24]	@ (8014024 <send_result+0x5c>)
 801400c:	891b      	ldrh	r3, [r3, #8]
 801400e:	6979      	ldr	r1, [r7, #20]
 8014010:	f7fc ff50 	bl	8010eb4 <udp_sendto>
	    pbuf_free(resp_buf);
 8014014:	6978      	ldr	r0, [r7, #20]
 8014016:	f7f6 ff7d 	bl	800af14 <pbuf_free>
	}
}
 801401a:	bf00      	nop
 801401c:	3718      	adds	r7, #24
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
 8014022:	bf00      	nop
 8014024:	20008278 	.word	0x20008278

08014028 <I2C_Test_Perform>:
volatile uint8_t i2c1_rx_done;
volatile uint8_t i2c2_tx_done;
volatile uint8_t i2c2_rx_done;

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8014028:	b590      	push	{r4, r7, lr}
 801402a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801402e:	af00      	add	r7, sp, #0
 8014030:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014034:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014038:	6018      	str	r0, [r3, #0]
 801403a:	460a      	mov	r2, r1
 801403c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014040:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014044:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
 8014046:	4855      	ldr	r0, [pc, #340]	@ (801419c <I2C_Test_Perform+0x174>)
 8014048:	f000 fc0a 	bl	8014860 <puts>

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 801404c:	4b54      	ldr	r3, [pc, #336]	@ (80141a0 <I2C_Test_Perform+0x178>)
 801404e:	2200      	movs	r2, #0
 8014050:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 8014052:	4b54      	ldr	r3, [pc, #336]	@ (80141a4 <I2C_Test_Perform+0x17c>)
 8014054:	2200      	movs	r2, #0
 8014056:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 8014058:	4b53      	ldr	r3, [pc, #332]	@ (80141a8 <I2C_Test_Perform+0x180>)
 801405a:	2200      	movs	r2, #0
 801405c:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 801405e:	4b53      	ldr	r3, [pc, #332]	@ (80141ac <I2C_Test_Perform+0x184>)
 8014060:	2200      	movs	r2, #0
 8014062:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 8014064:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014068:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	b29a      	uxth	r2, r3
 8014070:	f107 0308 	add.w	r3, r7, #8
 8014074:	4619      	mov	r1, r3
 8014076:	484e      	ldr	r0, [pc, #312]	@ (80141b0 <I2C_Test_Perform+0x188>)
 8014078:	f7f0 fa7e 	bl	8004578 <HAL_I2C_Slave_Receive_DMA>
 801407c:	4603      	mov	r3, r0
 801407e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8014082:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8014086:	2b00      	cmp	r3, #0
 8014088:	d004      	beq.n	8014094 <I2C_Test_Perform+0x6c>
	{
		printf("i2c1 -> i2c2 RX failed\n");
 801408a:	484a      	ldr	r0, [pc, #296]	@ (80141b4 <I2C_Test_Perform+0x18c>)
 801408c:	f000 fbe8 	bl	8014860 <puts>
		return TEST_FAILED;
 8014090:	23ff      	movs	r3, #255	@ 0xff
 8014092:	e07d      	b.n	8014190 <I2C_Test_Perform+0x168>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 8014094:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014098:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	b29b      	uxth	r3, r3
 80140a0:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80140a4:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80140a8:	6812      	ldr	r2, [r2, #0]
 80140aa:	2114      	movs	r1, #20
 80140ac:	4842      	ldr	r0, [pc, #264]	@ (80141b8 <I2C_Test_Perform+0x190>)
 80140ae:	f7ef ff73 	bl	8003f98 <HAL_I2C_Master_Transmit_DMA>
 80140b2:	4603      	mov	r3, r0
 80140b4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80140b8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d004      	beq.n	80140ca <I2C_Test_Perform+0xa2>
	{
		printf("i2c1 -> i2c2 TX failed\n");
 80140c0:	483e      	ldr	r0, [pc, #248]	@ (80141bc <I2C_Test_Perform+0x194>)
 80140c2:	f000 fbcd 	bl	8014860 <puts>
		return TEST_FAILED;
 80140c6:	23ff      	movs	r3, #255	@ 0xff
 80140c8:	e062      	b.n	8014190 <I2C_Test_Perform+0x168>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 80140ca:	bf00      	nop
 80140cc:	4b37      	ldr	r3, [pc, #220]	@ (80141ac <I2C_Test_Perform+0x184>)
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	b2db      	uxtb	r3, r3
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d0fa      	beq.n	80140cc <I2C_Test_Perform+0xa4>
 80140d6:	4b32      	ldr	r3, [pc, #200]	@ (80141a0 <I2C_Test_Perform+0x178>)
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d0f5      	beq.n	80140cc <I2C_Test_Perform+0xa4>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 80140e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80140e4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80140f0:	2114      	movs	r1, #20
 80140f2:	4831      	ldr	r0, [pc, #196]	@ (80141b8 <I2C_Test_Perform+0x190>)
 80140f4:	f7f0 f864 	bl	80041c0 <HAL_I2C_Master_Receive_DMA>
 80140f8:	4603      	mov	r3, r0
 80140fa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80140fe:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8014102:	2b00      	cmp	r3, #0
 8014104:	d004      	beq.n	8014110 <I2C_Test_Perform+0xe8>
	{
		printf("i2c2 -> i2c1 RX failed\n");
 8014106:	482e      	ldr	r0, [pc, #184]	@ (80141c0 <I2C_Test_Perform+0x198>)
 8014108:	f000 fbaa 	bl	8014860 <puts>
		return TEST_FAILED;
 801410c:	23ff      	movs	r3, #255	@ 0xff
 801410e:	e03f      	b.n	8014190 <I2C_Test_Perform+0x168>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 8014110:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014114:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	b29a      	uxth	r2, r3
 801411c:	f107 0308 	add.w	r3, r7, #8
 8014120:	4619      	mov	r1, r3
 8014122:	4823      	ldr	r0, [pc, #140]	@ (80141b0 <I2C_Test_Perform+0x188>)
 8014124:	f7f0 f93c 	bl	80043a0 <HAL_I2C_Slave_Transmit_DMA>
 8014128:	4603      	mov	r3, r0
 801412a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801412e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8014132:	2b00      	cmp	r3, #0
 8014134:	d004      	beq.n	8014140 <I2C_Test_Perform+0x118>
	{
		printf("i2c2 -> i2c1 TX failed\n");
 8014136:	4823      	ldr	r0, [pc, #140]	@ (80141c4 <I2C_Test_Perform+0x19c>)
 8014138:	f000 fb92 	bl	8014860 <puts>
		return TEST_FAILED;
 801413c:	23ff      	movs	r3, #255	@ 0xff
 801413e:	e027      	b.n	8014190 <I2C_Test_Perform+0x168>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 8014140:	bf00      	nop
 8014142:	4b18      	ldr	r3, [pc, #96]	@ (80141a4 <I2C_Test_Perform+0x17c>)
 8014144:	781b      	ldrb	r3, [r3, #0]
 8014146:	b2db      	uxtb	r3, r3
 8014148:	2b00      	cmp	r3, #0
 801414a:	d0fa      	beq.n	8014142 <I2C_Test_Perform+0x11a>
 801414c:	4b16      	ldr	r3, [pc, #88]	@ (80141a8 <I2C_Test_Perform+0x180>)
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	b2db      	uxtb	r3, r3
 8014152:	2b00      	cmp	r3, #0
 8014154:	d0f5      	beq.n	8014142 <I2C_Test_Perform+0x11a>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 8014156:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801415a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801415e:	781c      	ldrb	r4, [r3, #0]
 8014160:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8014164:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014168:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801416c:	7819      	ldrb	r1, [r3, #0]
 801416e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014172:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8014176:	4623      	mov	r3, r4
 8014178:	6800      	ldr	r0, [r0, #0]
 801417a:	f7ff fe2d 	bl	8013dd8 <Match_CRC>
 801417e:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208

	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8014182:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8014186:	2b01      	cmp	r3, #1
 8014188:	d101      	bne.n	801418e <I2C_Test_Perform+0x166>
 801418a:	2301      	movs	r3, #1
 801418c:	e000      	b.n	8014190 <I2C_Test_Perform+0x168>

	return TEST_FAILED;
 801418e:	23ff      	movs	r3, #255	@ 0xff
}
 8014190:	4618      	mov	r0, r3
 8014192:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8014196:	46bd      	mov	sp, r7
 8014198:	bd90      	pop	{r4, r7, pc}
 801419a:	bf00      	nop
 801419c:	08018ae8 	.word	0x08018ae8
 80141a0:	2000838c 	.word	0x2000838c
 80141a4:	2000838d 	.word	0x2000838d
 80141a8:	2000838e 	.word	0x2000838e
 80141ac:	2000838f 	.word	0x2000838f
 80141b0:	200002a0 	.word	0x200002a0
 80141b4:	08018afc 	.word	0x08018afc
 80141b8:	2000024c 	.word	0x2000024c
 80141bc:	08018b14 	.word	0x08018b14
 80141c0:	08018b2c 	.word	0x08018b2c
 80141c4:	08018b44 	.word	0x08018b44

080141c8 <I2C_Test_N_Perform>:

uint8_t I2C_Test_N_Perform(uint8_t *msg, uint8_t msg_len, uint8_t n)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	460b      	mov	r3, r1
 80141d2:	70fb      	strb	r3, [r7, #3]
 80141d4:	4613      	mov	r3, r2
 80141d6:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i < n; i++)
 80141d8:	2300      	movs	r3, #0
 80141da:	60fb      	str	r3, [r7, #12]
 80141dc:	e018      	b.n	8014210 <I2C_Test_N_Perform+0x48>
	{
		if (I2C_Test_Perform(msg, msg_len) == TEST_FAILED)
 80141de:	78fb      	ldrb	r3, [r7, #3]
 80141e0:	4619      	mov	r1, r3
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f7ff ff20 	bl	8014028 <I2C_Test_Perform>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2bff      	cmp	r3, #255	@ 0xff
 80141ec:	d107      	bne.n	80141fe <I2C_Test_N_Perform+0x36>
		{
			printf("TEST %d: i2c test failed\n", i+1);
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	3301      	adds	r3, #1
 80141f2:	4619      	mov	r1, r3
 80141f4:	480b      	ldr	r0, [pc, #44]	@ (8014224 <I2C_Test_N_Perform+0x5c>)
 80141f6:	f000 fac3 	bl	8014780 <iprintf>
			return TEST_FAILED;
 80141fa:	23ff      	movs	r3, #255	@ 0xff
 80141fc:	e00d      	b.n	801421a <I2C_Test_N_Perform+0x52>
		}
		else printf("TEST %d: i2c test success\n", i+1);
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	3301      	adds	r3, #1
 8014202:	4619      	mov	r1, r3
 8014204:	4808      	ldr	r0, [pc, #32]	@ (8014228 <I2C_Test_N_Perform+0x60>)
 8014206:	f000 fabb 	bl	8014780 <iprintf>
	for (int i = 0; i < n; i++)
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	3301      	adds	r3, #1
 801420e:	60fb      	str	r3, [r7, #12]
 8014210:	78bb      	ldrb	r3, [r7, #2]
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	429a      	cmp	r2, r3
 8014216:	dbe2      	blt.n	80141de <I2C_Test_N_Perform+0x16>
	}

	return TEST_SUCCESS;
 8014218:	2301      	movs	r3, #1
}
 801421a:	4618      	mov	r0, r3
 801421c:	3710      	adds	r7, #16
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	08018b5c 	.word	0x08018b5c
 8014228:	08018b78 	.word	0x08018b78

0801422c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
    printf("I2C Error on %s: 0x%08lX\r\n",
           (hi2c->Instance == I2C1) ? "I2C1" : "I2C2",
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
    printf("I2C Error on %s: 0x%08lX\r\n",
 8014238:	4a1e      	ldr	r2, [pc, #120]	@ (80142b4 <HAL_I2C_ErrorCallback+0x88>)
 801423a:	4293      	cmp	r3, r2
 801423c:	d101      	bne.n	8014242 <HAL_I2C_ErrorCallback+0x16>
 801423e:	491e      	ldr	r1, [pc, #120]	@ (80142b8 <HAL_I2C_ErrorCallback+0x8c>)
 8014240:	e000      	b.n	8014244 <HAL_I2C_ErrorCallback+0x18>
 8014242:	491e      	ldr	r1, [pc, #120]	@ (80142bc <HAL_I2C_ErrorCallback+0x90>)
           hi2c->ErrorCode);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    printf("I2C Error on %s: 0x%08lX\r\n",
 8014248:	461a      	mov	r2, r3
 801424a:	481d      	ldr	r0, [pc, #116]	@ (80142c0 <HAL_I2C_ErrorCallback+0x94>)
 801424c:	f000 fa98 	bl	8014780 <iprintf>

    // Print specific error details
    if (hi2c->ErrorCode & HAL_I2C_ERROR_BERR) printf("  - Bus Error\r\n");
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014254:	f003 0301 	and.w	r3, r3, #1
 8014258:	2b00      	cmp	r3, #0
 801425a:	d002      	beq.n	8014262 <HAL_I2C_ErrorCallback+0x36>
 801425c:	4819      	ldr	r0, [pc, #100]	@ (80142c4 <HAL_I2C_ErrorCallback+0x98>)
 801425e:	f000 faff 	bl	8014860 <puts>
    if (hi2c->ErrorCode & HAL_I2C_ERROR_ARLO) printf("  - Arbitration Lost\r\n");
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014266:	f003 0302 	and.w	r3, r3, #2
 801426a:	2b00      	cmp	r3, #0
 801426c:	d002      	beq.n	8014274 <HAL_I2C_ErrorCallback+0x48>
 801426e:	4816      	ldr	r0, [pc, #88]	@ (80142c8 <HAL_I2C_ErrorCallback+0x9c>)
 8014270:	f000 faf6 	bl	8014860 <puts>
    if (hi2c->ErrorCode & HAL_I2C_ERROR_AF) printf("  - Acknowledge Failure\r\n");
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014278:	f003 0304 	and.w	r3, r3, #4
 801427c:	2b00      	cmp	r3, #0
 801427e:	d002      	beq.n	8014286 <HAL_I2C_ErrorCallback+0x5a>
 8014280:	4812      	ldr	r0, [pc, #72]	@ (80142cc <HAL_I2C_ErrorCallback+0xa0>)
 8014282:	f000 faed 	bl	8014860 <puts>
    if (hi2c->ErrorCode & HAL_I2C_ERROR_OVR) printf("  - Overrun/Underrun\r\n");
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801428a:	f003 0308 	and.w	r3, r3, #8
 801428e:	2b00      	cmp	r3, #0
 8014290:	d002      	beq.n	8014298 <HAL_I2C_ErrorCallback+0x6c>
 8014292:	480f      	ldr	r0, [pc, #60]	@ (80142d0 <HAL_I2C_ErrorCallback+0xa4>)
 8014294:	f000 fae4 	bl	8014860 <puts>
    if (hi2c->ErrorCode & HAL_I2C_ERROR_TIMEOUT) printf("  - Timeout\r\n");
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801429c:	f003 0320 	and.w	r3, r3, #32
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d002      	beq.n	80142aa <HAL_I2C_ErrorCallback+0x7e>
 80142a4:	480b      	ldr	r0, [pc, #44]	@ (80142d4 <HAL_I2C_ErrorCallback+0xa8>)
 80142a6:	f000 fadb 	bl	8014860 <puts>
}
 80142aa:	bf00      	nop
 80142ac:	3708      	adds	r7, #8
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}
 80142b2:	bf00      	nop
 80142b4:	40005400 	.word	0x40005400
 80142b8:	08018b94 	.word	0x08018b94
 80142bc:	08018b9c 	.word	0x08018b9c
 80142c0:	08018ba4 	.word	0x08018ba4
 80142c4:	08018bc0 	.word	0x08018bc0
 80142c8:	08018bd0 	.word	0x08018bd0
 80142cc:	08018be8 	.word	0x08018be8
 80142d0:	08018c04 	.word	0x08018c04
 80142d4:	08018c1c 	.word	0x08018c1c

080142d8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80142d8:	b480      	push	{r7}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	4a06      	ldr	r2, [pc, #24]	@ (80142fc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80142e4:	4293      	cmp	r3, r2
 80142e6:	d102      	bne.n	80142ee <HAL_I2C_MasterTxCpltCallback+0x16>
 80142e8:	4b05      	ldr	r3, [pc, #20]	@ (8014300 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80142ea:	2201      	movs	r2, #1
 80142ec:	701a      	strb	r2, [r3, #0]
}
 80142ee:	bf00      	nop
 80142f0:	370c      	adds	r7, #12
 80142f2:	46bd      	mov	sp, r7
 80142f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f8:	4770      	bx	lr
 80142fa:	bf00      	nop
 80142fc:	2000024c 	.word	0x2000024c
 8014300:	2000838c 	.word	0x2000838c

08014304 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	4a06      	ldr	r2, [pc, #24]	@ (8014328 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8014310:	4293      	cmp	r3, r2
 8014312:	d102      	bne.n	801431a <HAL_I2C_MasterRxCpltCallback+0x16>
 8014314:	4b05      	ldr	r3, [pc, #20]	@ (801432c <HAL_I2C_MasterRxCpltCallback+0x28>)
 8014316:	2201      	movs	r2, #1
 8014318:	701a      	strb	r2, [r3, #0]
}
 801431a:	bf00      	nop
 801431c:	370c      	adds	r7, #12
 801431e:	46bd      	mov	sp, r7
 8014320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop
 8014328:	2000024c 	.word	0x2000024c
 801432c:	2000838d 	.word	0x2000838d

08014330 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014330:	b480      	push	{r7}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	4a06      	ldr	r2, [pc, #24]	@ (8014354 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801433c:	4293      	cmp	r3, r2
 801433e:	d102      	bne.n	8014346 <HAL_I2C_SlaveTxCpltCallback+0x16>
 8014340:	4b05      	ldr	r3, [pc, #20]	@ (8014358 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8014342:	2201      	movs	r2, #1
 8014344:	701a      	strb	r2, [r3, #0]
}
 8014346:	bf00      	nop
 8014348:	370c      	adds	r7, #12
 801434a:	46bd      	mov	sp, r7
 801434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014350:	4770      	bx	lr
 8014352:	bf00      	nop
 8014354:	200002a0 	.word	0x200002a0
 8014358:	2000838e 	.word	0x2000838e

0801435c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801435c:	b480      	push	{r7}
 801435e:	b083      	sub	sp, #12
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	4a06      	ldr	r2, [pc, #24]	@ (8014380 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8014368:	4293      	cmp	r3, r2
 801436a:	d102      	bne.n	8014372 <HAL_I2C_SlaveRxCpltCallback+0x16>
 801436c:	4b05      	ldr	r3, [pc, #20]	@ (8014384 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801436e:	2201      	movs	r2, #1
 8014370:	701a      	strb	r2, [r3, #0]
}
 8014372:	bf00      	nop
 8014374:	370c      	adds	r7, #12
 8014376:	46bd      	mov	sp, r7
 8014378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437c:	4770      	bx	lr
 801437e:	bf00      	nop
 8014380:	200002a0 	.word	0x200002a0
 8014384:	2000838f 	.word	0x2000838f

08014388 <UART_Test_Perform>:
// DMA synchronization
volatile uint8_t uart4_rx_done;
volatile uint8_t uart5_rx_done;

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8014388:	b590      	push	{r4, r7, lr}
 801438a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801438e:	af00      	add	r7, sp, #0
 8014390:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014394:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014398:	6018      	str	r0, [r3, #0]
 801439a:	460a      	mov	r2, r1
 801439c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80143a0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80143a4:	701a      	strb	r2, [r3, #0]
	printf("Performing uart test\n");
 80143a6:	4844      	ldr	r0, [pc, #272]	@ (80144b8 <UART_Test_Perform+0x130>)
 80143a8:	f000 fa5a 	bl	8014860 <puts>

	uart4_rx_done = 0;
 80143ac:	4b43      	ldr	r3, [pc, #268]	@ (80144bc <UART_Test_Perform+0x134>)
 80143ae:	2200      	movs	r2, #0
 80143b0:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 80143b2:	4b43      	ldr	r3, [pc, #268]	@ (80144c0 <UART_Test_Perform+0x138>)
 80143b4:	2200      	movs	r2, #0
 80143b6:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 80143b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80143bc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	b29a      	uxth	r2, r3
 80143c4:	f107 030c 	add.w	r3, r7, #12
 80143c8:	4619      	mov	r1, r3
 80143ca:	483e      	ldr	r0, [pc, #248]	@ (80144c4 <UART_Test_Perform+0x13c>)
 80143cc:	f7f3 f982 	bl	80076d4 <HAL_UART_Receive_DMA>
 80143d0:	4603      	mov	r3, r0
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d004      	beq.n	80143e0 <UART_Test_Perform+0x58>
	{
		printf("uart4 -> uart5 RX1 failed\n");
 80143d6:	483c      	ldr	r0, [pc, #240]	@ (80144c8 <UART_Test_Perform+0x140>)
 80143d8:	f000 fa42 	bl	8014860 <puts>
		return TEST_FAILED;
 80143dc:	23ff      	movs	r3, #255	@ 0xff
 80143de:	e066      	b.n	80144ae <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 80143e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80143e4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	b29a      	uxth	r2, r3
 80143ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80143f0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80143f4:	6819      	ldr	r1, [r3, #0]
 80143f6:	4835      	ldr	r0, [pc, #212]	@ (80144cc <UART_Test_Perform+0x144>)
 80143f8:	f7f3 f90e 	bl	8007618 <HAL_UART_Transmit_IT>
 80143fc:	4603      	mov	r3, r0
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d004      	beq.n	801440c <UART_Test_Perform+0x84>
	{
		printf("uart4 -> uart5 TX failed\n");
 8014402:	4833      	ldr	r0, [pc, #204]	@ (80144d0 <UART_Test_Perform+0x148>)
 8014404:	f000 fa2c 	bl	8014860 <puts>
		return TEST_FAILED;
 8014408:	23ff      	movs	r3, #255	@ 0xff
 801440a:	e050      	b.n	80144ae <UART_Test_Perform+0x126>
	}
	while (!uart5_rx_done);
 801440c:	bf00      	nop
 801440e:	4b2c      	ldr	r3, [pc, #176]	@ (80144c0 <UART_Test_Perform+0x138>)
 8014410:	781b      	ldrb	r3, [r3, #0]
 8014412:	b2db      	uxtb	r3, r3
 8014414:	2b00      	cmp	r3, #0
 8014416:	d0fa      	beq.n	801440e <UART_Test_Perform+0x86>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8014418:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801441c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	b29a      	uxth	r2, r3
 8014424:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8014428:	4619      	mov	r1, r3
 801442a:	4828      	ldr	r0, [pc, #160]	@ (80144cc <UART_Test_Perform+0x144>)
 801442c:	f7f3 f952 	bl	80076d4 <HAL_UART_Receive_DMA>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d004      	beq.n	8014440 <UART_Test_Perform+0xb8>
	{
		printf("uart5 -> uart4 RX failed\n");
 8014436:	4827      	ldr	r0, [pc, #156]	@ (80144d4 <UART_Test_Perform+0x14c>)
 8014438:	f000 fa12 	bl	8014860 <puts>
		return TEST_FAILED;
 801443c:	23ff      	movs	r3, #255	@ 0xff
 801443e:	e036      	b.n	80144ae <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 8014440:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014444:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	b29a      	uxth	r2, r3
 801444c:	f107 030c 	add.w	r3, r7, #12
 8014450:	4619      	mov	r1, r3
 8014452:	481c      	ldr	r0, [pc, #112]	@ (80144c4 <UART_Test_Perform+0x13c>)
 8014454:	f7f3 f8e0 	bl	8007618 <HAL_UART_Transmit_IT>
 8014458:	4603      	mov	r3, r0
 801445a:	2b00      	cmp	r3, #0
 801445c:	d004      	beq.n	8014468 <UART_Test_Perform+0xe0>
	{
		printf("uart5 -> uart4 TX failed\n");
 801445e:	481e      	ldr	r0, [pc, #120]	@ (80144d8 <UART_Test_Perform+0x150>)
 8014460:	f000 f9fe 	bl	8014860 <puts>
		return TEST_FAILED;
 8014464:	23ff      	movs	r3, #255	@ 0xff
 8014466:	e022      	b.n	80144ae <UART_Test_Perform+0x126>
	}
	while (!uart4_rx_done);
 8014468:	bf00      	nop
 801446a:	4b14      	ldr	r3, [pc, #80]	@ (80144bc <UART_Test_Perform+0x134>)
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	b2db      	uxtb	r3, r3
 8014470:	2b00      	cmp	r3, #0
 8014472:	d0fa      	beq.n	801446a <UART_Test_Perform+0xe2>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8014474:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014478:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801447c:	781c      	ldrb	r4, [r3, #0]
 801447e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8014482:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014486:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801448a:	7819      	ldrb	r1, [r3, #0]
 801448c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014490:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8014494:	4623      	mov	r3, r4
 8014496:	6800      	ldr	r0, [r0, #0]
 8014498:	f7ff fc9e 	bl	8013dd8 <Match_CRC>
 801449c:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c

	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80144a0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80144a4:	2b01      	cmp	r3, #1
 80144a6:	d101      	bne.n	80144ac <UART_Test_Perform+0x124>
 80144a8:	2301      	movs	r3, #1
 80144aa:	e000      	b.n	80144ae <UART_Test_Perform+0x126>

	return TEST_FAILED;
 80144ac:	23ff      	movs	r3, #255	@ 0xff
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd90      	pop	{r4, r7, pc}
 80144b8:	08018c2c 	.word	0x08018c2c
 80144bc:	20008390 	.word	0x20008390
 80144c0:	20008391 	.word	0x20008391
 80144c4:	20000500 	.word	0x20000500
 80144c8:	08018c44 	.word	0x08018c44
 80144cc:	20000478 	.word	0x20000478
 80144d0:	08018c60 	.word	0x08018c60
 80144d4:	08018c7c 	.word	0x08018c7c
 80144d8:	08018c98 	.word	0x08018c98

080144dc <UART_Test_N_Perform>:

uint8_t UART_Test_N_Perform(uint8_t *msg, uint8_t msg_len, uint8_t n)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
 80144e4:	460b      	mov	r3, r1
 80144e6:	70fb      	strb	r3, [r7, #3]
 80144e8:	4613      	mov	r3, r2
 80144ea:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i < n; i++)
 80144ec:	2300      	movs	r3, #0
 80144ee:	60fb      	str	r3, [r7, #12]
 80144f0:	e018      	b.n	8014524 <UART_Test_N_Perform+0x48>
	{
		if (UART_Test_Perform(msg, msg_len) == TEST_FAILED)
 80144f2:	78fb      	ldrb	r3, [r7, #3]
 80144f4:	4619      	mov	r1, r3
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f7ff ff46 	bl	8014388 <UART_Test_Perform>
 80144fc:	4603      	mov	r3, r0
 80144fe:	2bff      	cmp	r3, #255	@ 0xff
 8014500:	d107      	bne.n	8014512 <UART_Test_N_Perform+0x36>
		{
			printf("TEST %d: uart test failed\n", i+1);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	3301      	adds	r3, #1
 8014506:	4619      	mov	r1, r3
 8014508:	480b      	ldr	r0, [pc, #44]	@ (8014538 <UART_Test_N_Perform+0x5c>)
 801450a:	f000 f939 	bl	8014780 <iprintf>
			return TEST_FAILED;
 801450e:	23ff      	movs	r3, #255	@ 0xff
 8014510:	e00d      	b.n	801452e <UART_Test_N_Perform+0x52>
		}
		else printf("TEST %d: uart test success\n", i+1);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	3301      	adds	r3, #1
 8014516:	4619      	mov	r1, r3
 8014518:	4808      	ldr	r0, [pc, #32]	@ (801453c <UART_Test_N_Perform+0x60>)
 801451a:	f000 f931 	bl	8014780 <iprintf>
	for (int i = 0; i < n; i++)
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	3301      	adds	r3, #1
 8014522:	60fb      	str	r3, [r7, #12]
 8014524:	78bb      	ldrb	r3, [r7, #2]
 8014526:	68fa      	ldr	r2, [r7, #12]
 8014528:	429a      	cmp	r2, r3
 801452a:	dbe2      	blt.n	80144f2 <UART_Test_N_Perform+0x16>
	}

	return TEST_SUCCESS;
 801452c:	2301      	movs	r3, #1
}
 801452e:	4618      	mov	r0, r3
 8014530:	3710      	adds	r7, #16
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	08018cb4 	.word	0x08018cb4
 801453c:	08018cd0 	.word	0x08018cd0

08014540 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8014540:	b480      	push	{r7}
 8014542:	b083      	sub	sp, #12
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	4a09      	ldr	r2, [pc, #36]	@ (8014570 <HAL_UART_RxCpltCallback+0x30>)
 801454c:	4293      	cmp	r3, r2
 801454e:	d102      	bne.n	8014556 <HAL_UART_RxCpltCallback+0x16>
 8014550:	4b08      	ldr	r3, [pc, #32]	@ (8014574 <HAL_UART_RxCpltCallback+0x34>)
 8014552:	2201      	movs	r2, #1
 8014554:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	4a07      	ldr	r2, [pc, #28]	@ (8014578 <HAL_UART_RxCpltCallback+0x38>)
 801455a:	4293      	cmp	r3, r2
 801455c:	d102      	bne.n	8014564 <HAL_UART_RxCpltCallback+0x24>
 801455e:	4b07      	ldr	r3, [pc, #28]	@ (801457c <HAL_UART_RxCpltCallback+0x3c>)
 8014560:	2201      	movs	r2, #1
 8014562:	701a      	strb	r2, [r3, #0]
}
 8014564:	bf00      	nop
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr
 8014570:	20000478 	.word	0x20000478
 8014574:	20008390 	.word	0x20008390
 8014578:	20000500 	.word	0x20000500
 801457c:	20008391 	.word	0x20008391

08014580 <rand>:
 8014580:	4b16      	ldr	r3, [pc, #88]	@ (80145dc <rand+0x5c>)
 8014582:	b510      	push	{r4, lr}
 8014584:	681c      	ldr	r4, [r3, #0]
 8014586:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014588:	b9b3      	cbnz	r3, 80145b8 <rand+0x38>
 801458a:	2018      	movs	r0, #24
 801458c:	f000 fb44 	bl	8014c18 <malloc>
 8014590:	4602      	mov	r2, r0
 8014592:	6320      	str	r0, [r4, #48]	@ 0x30
 8014594:	b920      	cbnz	r0, 80145a0 <rand+0x20>
 8014596:	4b12      	ldr	r3, [pc, #72]	@ (80145e0 <rand+0x60>)
 8014598:	4812      	ldr	r0, [pc, #72]	@ (80145e4 <rand+0x64>)
 801459a:	2152      	movs	r1, #82	@ 0x52
 801459c:	f000 fad4 	bl	8014b48 <__assert_func>
 80145a0:	4911      	ldr	r1, [pc, #68]	@ (80145e8 <rand+0x68>)
 80145a2:	4b12      	ldr	r3, [pc, #72]	@ (80145ec <rand+0x6c>)
 80145a4:	e9c0 1300 	strd	r1, r3, [r0]
 80145a8:	4b11      	ldr	r3, [pc, #68]	@ (80145f0 <rand+0x70>)
 80145aa:	6083      	str	r3, [r0, #8]
 80145ac:	230b      	movs	r3, #11
 80145ae:	8183      	strh	r3, [r0, #12]
 80145b0:	2100      	movs	r1, #0
 80145b2:	2001      	movs	r0, #1
 80145b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80145b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80145ba:	480e      	ldr	r0, [pc, #56]	@ (80145f4 <rand+0x74>)
 80145bc:	690b      	ldr	r3, [r1, #16]
 80145be:	694c      	ldr	r4, [r1, #20]
 80145c0:	4a0d      	ldr	r2, [pc, #52]	@ (80145f8 <rand+0x78>)
 80145c2:	4358      	muls	r0, r3
 80145c4:	fb02 0004 	mla	r0, r2, r4, r0
 80145c8:	fba3 3202 	umull	r3, r2, r3, r2
 80145cc:	3301      	adds	r3, #1
 80145ce:	eb40 0002 	adc.w	r0, r0, r2
 80145d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80145d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80145da:	bd10      	pop	{r4, pc}
 80145dc:	2000007c 	.word	0x2000007c
 80145e0:	08018e22 	.word	0x08018e22
 80145e4:	08018e39 	.word	0x08018e39
 80145e8:	abcd330e 	.word	0xabcd330e
 80145ec:	e66d1234 	.word	0xe66d1234
 80145f0:	0005deec 	.word	0x0005deec
 80145f4:	5851f42d 	.word	0x5851f42d
 80145f8:	4c957f2d 	.word	0x4c957f2d

080145fc <std>:
 80145fc:	2300      	movs	r3, #0
 80145fe:	b510      	push	{r4, lr}
 8014600:	4604      	mov	r4, r0
 8014602:	e9c0 3300 	strd	r3, r3, [r0]
 8014606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801460a:	6083      	str	r3, [r0, #8]
 801460c:	8181      	strh	r1, [r0, #12]
 801460e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014610:	81c2      	strh	r2, [r0, #14]
 8014612:	6183      	str	r3, [r0, #24]
 8014614:	4619      	mov	r1, r3
 8014616:	2208      	movs	r2, #8
 8014618:	305c      	adds	r0, #92	@ 0x5c
 801461a:	f000 fa11 	bl	8014a40 <memset>
 801461e:	4b0d      	ldr	r3, [pc, #52]	@ (8014654 <std+0x58>)
 8014620:	6263      	str	r3, [r4, #36]	@ 0x24
 8014622:	4b0d      	ldr	r3, [pc, #52]	@ (8014658 <std+0x5c>)
 8014624:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014626:	4b0d      	ldr	r3, [pc, #52]	@ (801465c <std+0x60>)
 8014628:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801462a:	4b0d      	ldr	r3, [pc, #52]	@ (8014660 <std+0x64>)
 801462c:	6323      	str	r3, [r4, #48]	@ 0x30
 801462e:	4b0d      	ldr	r3, [pc, #52]	@ (8014664 <std+0x68>)
 8014630:	6224      	str	r4, [r4, #32]
 8014632:	429c      	cmp	r4, r3
 8014634:	d006      	beq.n	8014644 <std+0x48>
 8014636:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801463a:	4294      	cmp	r4, r2
 801463c:	d002      	beq.n	8014644 <std+0x48>
 801463e:	33d0      	adds	r3, #208	@ 0xd0
 8014640:	429c      	cmp	r4, r3
 8014642:	d105      	bne.n	8014650 <std+0x54>
 8014644:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801464c:	f000 ba6a 	b.w	8014b24 <__retarget_lock_init_recursive>
 8014650:	bd10      	pop	{r4, pc}
 8014652:	bf00      	nop
 8014654:	08014871 	.word	0x08014871
 8014658:	08014893 	.word	0x08014893
 801465c:	080148cb 	.word	0x080148cb
 8014660:	080148ef 	.word	0x080148ef
 8014664:	20008394 	.word	0x20008394

08014668 <stdio_exit_handler>:
 8014668:	4a02      	ldr	r2, [pc, #8]	@ (8014674 <stdio_exit_handler+0xc>)
 801466a:	4903      	ldr	r1, [pc, #12]	@ (8014678 <stdio_exit_handler+0x10>)
 801466c:	4803      	ldr	r0, [pc, #12]	@ (801467c <stdio_exit_handler+0x14>)
 801466e:	f000 b869 	b.w	8014744 <_fwalk_sglue>
 8014672:	bf00      	nop
 8014674:	20000070 	.word	0x20000070
 8014678:	08015429 	.word	0x08015429
 801467c:	20000080 	.word	0x20000080

08014680 <cleanup_stdio>:
 8014680:	6841      	ldr	r1, [r0, #4]
 8014682:	4b0c      	ldr	r3, [pc, #48]	@ (80146b4 <cleanup_stdio+0x34>)
 8014684:	4299      	cmp	r1, r3
 8014686:	b510      	push	{r4, lr}
 8014688:	4604      	mov	r4, r0
 801468a:	d001      	beq.n	8014690 <cleanup_stdio+0x10>
 801468c:	f000 fecc 	bl	8015428 <_fflush_r>
 8014690:	68a1      	ldr	r1, [r4, #8]
 8014692:	4b09      	ldr	r3, [pc, #36]	@ (80146b8 <cleanup_stdio+0x38>)
 8014694:	4299      	cmp	r1, r3
 8014696:	d002      	beq.n	801469e <cleanup_stdio+0x1e>
 8014698:	4620      	mov	r0, r4
 801469a:	f000 fec5 	bl	8015428 <_fflush_r>
 801469e:	68e1      	ldr	r1, [r4, #12]
 80146a0:	4b06      	ldr	r3, [pc, #24]	@ (80146bc <cleanup_stdio+0x3c>)
 80146a2:	4299      	cmp	r1, r3
 80146a4:	d004      	beq.n	80146b0 <cleanup_stdio+0x30>
 80146a6:	4620      	mov	r0, r4
 80146a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146ac:	f000 bebc 	b.w	8015428 <_fflush_r>
 80146b0:	bd10      	pop	{r4, pc}
 80146b2:	bf00      	nop
 80146b4:	20008394 	.word	0x20008394
 80146b8:	200083fc 	.word	0x200083fc
 80146bc:	20008464 	.word	0x20008464

080146c0 <global_stdio_init.part.0>:
 80146c0:	b510      	push	{r4, lr}
 80146c2:	4b0b      	ldr	r3, [pc, #44]	@ (80146f0 <global_stdio_init.part.0+0x30>)
 80146c4:	4c0b      	ldr	r4, [pc, #44]	@ (80146f4 <global_stdio_init.part.0+0x34>)
 80146c6:	4a0c      	ldr	r2, [pc, #48]	@ (80146f8 <global_stdio_init.part.0+0x38>)
 80146c8:	601a      	str	r2, [r3, #0]
 80146ca:	4620      	mov	r0, r4
 80146cc:	2200      	movs	r2, #0
 80146ce:	2104      	movs	r1, #4
 80146d0:	f7ff ff94 	bl	80145fc <std>
 80146d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80146d8:	2201      	movs	r2, #1
 80146da:	2109      	movs	r1, #9
 80146dc:	f7ff ff8e 	bl	80145fc <std>
 80146e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80146e4:	2202      	movs	r2, #2
 80146e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146ea:	2112      	movs	r1, #18
 80146ec:	f7ff bf86 	b.w	80145fc <std>
 80146f0:	200084cc 	.word	0x200084cc
 80146f4:	20008394 	.word	0x20008394
 80146f8:	08014669 	.word	0x08014669

080146fc <__sfp_lock_acquire>:
 80146fc:	4801      	ldr	r0, [pc, #4]	@ (8014704 <__sfp_lock_acquire+0x8>)
 80146fe:	f000 ba12 	b.w	8014b26 <__retarget_lock_acquire_recursive>
 8014702:	bf00      	nop
 8014704:	200084d5 	.word	0x200084d5

08014708 <__sfp_lock_release>:
 8014708:	4801      	ldr	r0, [pc, #4]	@ (8014710 <__sfp_lock_release+0x8>)
 801470a:	f000 ba0d 	b.w	8014b28 <__retarget_lock_release_recursive>
 801470e:	bf00      	nop
 8014710:	200084d5 	.word	0x200084d5

08014714 <__sinit>:
 8014714:	b510      	push	{r4, lr}
 8014716:	4604      	mov	r4, r0
 8014718:	f7ff fff0 	bl	80146fc <__sfp_lock_acquire>
 801471c:	6a23      	ldr	r3, [r4, #32]
 801471e:	b11b      	cbz	r3, 8014728 <__sinit+0x14>
 8014720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014724:	f7ff bff0 	b.w	8014708 <__sfp_lock_release>
 8014728:	4b04      	ldr	r3, [pc, #16]	@ (801473c <__sinit+0x28>)
 801472a:	6223      	str	r3, [r4, #32]
 801472c:	4b04      	ldr	r3, [pc, #16]	@ (8014740 <__sinit+0x2c>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d1f5      	bne.n	8014720 <__sinit+0xc>
 8014734:	f7ff ffc4 	bl	80146c0 <global_stdio_init.part.0>
 8014738:	e7f2      	b.n	8014720 <__sinit+0xc>
 801473a:	bf00      	nop
 801473c:	08014681 	.word	0x08014681
 8014740:	200084cc 	.word	0x200084cc

08014744 <_fwalk_sglue>:
 8014744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014748:	4607      	mov	r7, r0
 801474a:	4688      	mov	r8, r1
 801474c:	4614      	mov	r4, r2
 801474e:	2600      	movs	r6, #0
 8014750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014754:	f1b9 0901 	subs.w	r9, r9, #1
 8014758:	d505      	bpl.n	8014766 <_fwalk_sglue+0x22>
 801475a:	6824      	ldr	r4, [r4, #0]
 801475c:	2c00      	cmp	r4, #0
 801475e:	d1f7      	bne.n	8014750 <_fwalk_sglue+0xc>
 8014760:	4630      	mov	r0, r6
 8014762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014766:	89ab      	ldrh	r3, [r5, #12]
 8014768:	2b01      	cmp	r3, #1
 801476a:	d907      	bls.n	801477c <_fwalk_sglue+0x38>
 801476c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014770:	3301      	adds	r3, #1
 8014772:	d003      	beq.n	801477c <_fwalk_sglue+0x38>
 8014774:	4629      	mov	r1, r5
 8014776:	4638      	mov	r0, r7
 8014778:	47c0      	blx	r8
 801477a:	4306      	orrs	r6, r0
 801477c:	3568      	adds	r5, #104	@ 0x68
 801477e:	e7e9      	b.n	8014754 <_fwalk_sglue+0x10>

08014780 <iprintf>:
 8014780:	b40f      	push	{r0, r1, r2, r3}
 8014782:	b507      	push	{r0, r1, r2, lr}
 8014784:	4906      	ldr	r1, [pc, #24]	@ (80147a0 <iprintf+0x20>)
 8014786:	ab04      	add	r3, sp, #16
 8014788:	6808      	ldr	r0, [r1, #0]
 801478a:	f853 2b04 	ldr.w	r2, [r3], #4
 801478e:	6881      	ldr	r1, [r0, #8]
 8014790:	9301      	str	r3, [sp, #4]
 8014792:	f000 fb21 	bl	8014dd8 <_vfiprintf_r>
 8014796:	b003      	add	sp, #12
 8014798:	f85d eb04 	ldr.w	lr, [sp], #4
 801479c:	b004      	add	sp, #16
 801479e:	4770      	bx	lr
 80147a0:	2000007c 	.word	0x2000007c

080147a4 <putchar>:
 80147a4:	4b02      	ldr	r3, [pc, #8]	@ (80147b0 <putchar+0xc>)
 80147a6:	4601      	mov	r1, r0
 80147a8:	6818      	ldr	r0, [r3, #0]
 80147aa:	6882      	ldr	r2, [r0, #8]
 80147ac:	f000 bed8 	b.w	8015560 <_putc_r>
 80147b0:	2000007c 	.word	0x2000007c

080147b4 <_puts_r>:
 80147b4:	6a03      	ldr	r3, [r0, #32]
 80147b6:	b570      	push	{r4, r5, r6, lr}
 80147b8:	6884      	ldr	r4, [r0, #8]
 80147ba:	4605      	mov	r5, r0
 80147bc:	460e      	mov	r6, r1
 80147be:	b90b      	cbnz	r3, 80147c4 <_puts_r+0x10>
 80147c0:	f7ff ffa8 	bl	8014714 <__sinit>
 80147c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147c6:	07db      	lsls	r3, r3, #31
 80147c8:	d405      	bmi.n	80147d6 <_puts_r+0x22>
 80147ca:	89a3      	ldrh	r3, [r4, #12]
 80147cc:	0598      	lsls	r0, r3, #22
 80147ce:	d402      	bmi.n	80147d6 <_puts_r+0x22>
 80147d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147d2:	f000 f9a8 	bl	8014b26 <__retarget_lock_acquire_recursive>
 80147d6:	89a3      	ldrh	r3, [r4, #12]
 80147d8:	0719      	lsls	r1, r3, #28
 80147da:	d502      	bpl.n	80147e2 <_puts_r+0x2e>
 80147dc:	6923      	ldr	r3, [r4, #16]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d135      	bne.n	801484e <_puts_r+0x9a>
 80147e2:	4621      	mov	r1, r4
 80147e4:	4628      	mov	r0, r5
 80147e6:	f000 f8c5 	bl	8014974 <__swsetup_r>
 80147ea:	b380      	cbz	r0, 801484e <_puts_r+0x9a>
 80147ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80147f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147f2:	07da      	lsls	r2, r3, #31
 80147f4:	d405      	bmi.n	8014802 <_puts_r+0x4e>
 80147f6:	89a3      	ldrh	r3, [r4, #12]
 80147f8:	059b      	lsls	r3, r3, #22
 80147fa:	d402      	bmi.n	8014802 <_puts_r+0x4e>
 80147fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147fe:	f000 f993 	bl	8014b28 <__retarget_lock_release_recursive>
 8014802:	4628      	mov	r0, r5
 8014804:	bd70      	pop	{r4, r5, r6, pc}
 8014806:	2b00      	cmp	r3, #0
 8014808:	da04      	bge.n	8014814 <_puts_r+0x60>
 801480a:	69a2      	ldr	r2, [r4, #24]
 801480c:	429a      	cmp	r2, r3
 801480e:	dc17      	bgt.n	8014840 <_puts_r+0x8c>
 8014810:	290a      	cmp	r1, #10
 8014812:	d015      	beq.n	8014840 <_puts_r+0x8c>
 8014814:	6823      	ldr	r3, [r4, #0]
 8014816:	1c5a      	adds	r2, r3, #1
 8014818:	6022      	str	r2, [r4, #0]
 801481a:	7019      	strb	r1, [r3, #0]
 801481c:	68a3      	ldr	r3, [r4, #8]
 801481e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014822:	3b01      	subs	r3, #1
 8014824:	60a3      	str	r3, [r4, #8]
 8014826:	2900      	cmp	r1, #0
 8014828:	d1ed      	bne.n	8014806 <_puts_r+0x52>
 801482a:	2b00      	cmp	r3, #0
 801482c:	da11      	bge.n	8014852 <_puts_r+0x9e>
 801482e:	4622      	mov	r2, r4
 8014830:	210a      	movs	r1, #10
 8014832:	4628      	mov	r0, r5
 8014834:	f000 f85f 	bl	80148f6 <__swbuf_r>
 8014838:	3001      	adds	r0, #1
 801483a:	d0d7      	beq.n	80147ec <_puts_r+0x38>
 801483c:	250a      	movs	r5, #10
 801483e:	e7d7      	b.n	80147f0 <_puts_r+0x3c>
 8014840:	4622      	mov	r2, r4
 8014842:	4628      	mov	r0, r5
 8014844:	f000 f857 	bl	80148f6 <__swbuf_r>
 8014848:	3001      	adds	r0, #1
 801484a:	d1e7      	bne.n	801481c <_puts_r+0x68>
 801484c:	e7ce      	b.n	80147ec <_puts_r+0x38>
 801484e:	3e01      	subs	r6, #1
 8014850:	e7e4      	b.n	801481c <_puts_r+0x68>
 8014852:	6823      	ldr	r3, [r4, #0]
 8014854:	1c5a      	adds	r2, r3, #1
 8014856:	6022      	str	r2, [r4, #0]
 8014858:	220a      	movs	r2, #10
 801485a:	701a      	strb	r2, [r3, #0]
 801485c:	e7ee      	b.n	801483c <_puts_r+0x88>
	...

08014860 <puts>:
 8014860:	4b02      	ldr	r3, [pc, #8]	@ (801486c <puts+0xc>)
 8014862:	4601      	mov	r1, r0
 8014864:	6818      	ldr	r0, [r3, #0]
 8014866:	f7ff bfa5 	b.w	80147b4 <_puts_r>
 801486a:	bf00      	nop
 801486c:	2000007c 	.word	0x2000007c

08014870 <__sread>:
 8014870:	b510      	push	{r4, lr}
 8014872:	460c      	mov	r4, r1
 8014874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014878:	f000 f90c 	bl	8014a94 <_read_r>
 801487c:	2800      	cmp	r0, #0
 801487e:	bfab      	itete	ge
 8014880:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014882:	89a3      	ldrhlt	r3, [r4, #12]
 8014884:	181b      	addge	r3, r3, r0
 8014886:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801488a:	bfac      	ite	ge
 801488c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801488e:	81a3      	strhlt	r3, [r4, #12]
 8014890:	bd10      	pop	{r4, pc}

08014892 <__swrite>:
 8014892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014896:	461f      	mov	r7, r3
 8014898:	898b      	ldrh	r3, [r1, #12]
 801489a:	05db      	lsls	r3, r3, #23
 801489c:	4605      	mov	r5, r0
 801489e:	460c      	mov	r4, r1
 80148a0:	4616      	mov	r6, r2
 80148a2:	d505      	bpl.n	80148b0 <__swrite+0x1e>
 80148a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148a8:	2302      	movs	r3, #2
 80148aa:	2200      	movs	r2, #0
 80148ac:	f000 f8e0 	bl	8014a70 <_lseek_r>
 80148b0:	89a3      	ldrh	r3, [r4, #12]
 80148b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80148ba:	81a3      	strh	r3, [r4, #12]
 80148bc:	4632      	mov	r2, r6
 80148be:	463b      	mov	r3, r7
 80148c0:	4628      	mov	r0, r5
 80148c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148c6:	f000 b8f7 	b.w	8014ab8 <_write_r>

080148ca <__sseek>:
 80148ca:	b510      	push	{r4, lr}
 80148cc:	460c      	mov	r4, r1
 80148ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148d2:	f000 f8cd 	bl	8014a70 <_lseek_r>
 80148d6:	1c43      	adds	r3, r0, #1
 80148d8:	89a3      	ldrh	r3, [r4, #12]
 80148da:	bf15      	itete	ne
 80148dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80148de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80148e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80148e6:	81a3      	strheq	r3, [r4, #12]
 80148e8:	bf18      	it	ne
 80148ea:	81a3      	strhne	r3, [r4, #12]
 80148ec:	bd10      	pop	{r4, pc}

080148ee <__sclose>:
 80148ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148f2:	f000 b8ad 	b.w	8014a50 <_close_r>

080148f6 <__swbuf_r>:
 80148f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148f8:	460e      	mov	r6, r1
 80148fa:	4614      	mov	r4, r2
 80148fc:	4605      	mov	r5, r0
 80148fe:	b118      	cbz	r0, 8014908 <__swbuf_r+0x12>
 8014900:	6a03      	ldr	r3, [r0, #32]
 8014902:	b90b      	cbnz	r3, 8014908 <__swbuf_r+0x12>
 8014904:	f7ff ff06 	bl	8014714 <__sinit>
 8014908:	69a3      	ldr	r3, [r4, #24]
 801490a:	60a3      	str	r3, [r4, #8]
 801490c:	89a3      	ldrh	r3, [r4, #12]
 801490e:	071a      	lsls	r2, r3, #28
 8014910:	d501      	bpl.n	8014916 <__swbuf_r+0x20>
 8014912:	6923      	ldr	r3, [r4, #16]
 8014914:	b943      	cbnz	r3, 8014928 <__swbuf_r+0x32>
 8014916:	4621      	mov	r1, r4
 8014918:	4628      	mov	r0, r5
 801491a:	f000 f82b 	bl	8014974 <__swsetup_r>
 801491e:	b118      	cbz	r0, 8014928 <__swbuf_r+0x32>
 8014920:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014924:	4638      	mov	r0, r7
 8014926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014928:	6823      	ldr	r3, [r4, #0]
 801492a:	6922      	ldr	r2, [r4, #16]
 801492c:	1a98      	subs	r0, r3, r2
 801492e:	6963      	ldr	r3, [r4, #20]
 8014930:	b2f6      	uxtb	r6, r6
 8014932:	4283      	cmp	r3, r0
 8014934:	4637      	mov	r7, r6
 8014936:	dc05      	bgt.n	8014944 <__swbuf_r+0x4e>
 8014938:	4621      	mov	r1, r4
 801493a:	4628      	mov	r0, r5
 801493c:	f000 fd74 	bl	8015428 <_fflush_r>
 8014940:	2800      	cmp	r0, #0
 8014942:	d1ed      	bne.n	8014920 <__swbuf_r+0x2a>
 8014944:	68a3      	ldr	r3, [r4, #8]
 8014946:	3b01      	subs	r3, #1
 8014948:	60a3      	str	r3, [r4, #8]
 801494a:	6823      	ldr	r3, [r4, #0]
 801494c:	1c5a      	adds	r2, r3, #1
 801494e:	6022      	str	r2, [r4, #0]
 8014950:	701e      	strb	r6, [r3, #0]
 8014952:	6962      	ldr	r2, [r4, #20]
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	429a      	cmp	r2, r3
 8014958:	d004      	beq.n	8014964 <__swbuf_r+0x6e>
 801495a:	89a3      	ldrh	r3, [r4, #12]
 801495c:	07db      	lsls	r3, r3, #31
 801495e:	d5e1      	bpl.n	8014924 <__swbuf_r+0x2e>
 8014960:	2e0a      	cmp	r6, #10
 8014962:	d1df      	bne.n	8014924 <__swbuf_r+0x2e>
 8014964:	4621      	mov	r1, r4
 8014966:	4628      	mov	r0, r5
 8014968:	f000 fd5e 	bl	8015428 <_fflush_r>
 801496c:	2800      	cmp	r0, #0
 801496e:	d0d9      	beq.n	8014924 <__swbuf_r+0x2e>
 8014970:	e7d6      	b.n	8014920 <__swbuf_r+0x2a>
	...

08014974 <__swsetup_r>:
 8014974:	b538      	push	{r3, r4, r5, lr}
 8014976:	4b29      	ldr	r3, [pc, #164]	@ (8014a1c <__swsetup_r+0xa8>)
 8014978:	4605      	mov	r5, r0
 801497a:	6818      	ldr	r0, [r3, #0]
 801497c:	460c      	mov	r4, r1
 801497e:	b118      	cbz	r0, 8014988 <__swsetup_r+0x14>
 8014980:	6a03      	ldr	r3, [r0, #32]
 8014982:	b90b      	cbnz	r3, 8014988 <__swsetup_r+0x14>
 8014984:	f7ff fec6 	bl	8014714 <__sinit>
 8014988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801498c:	0719      	lsls	r1, r3, #28
 801498e:	d422      	bmi.n	80149d6 <__swsetup_r+0x62>
 8014990:	06da      	lsls	r2, r3, #27
 8014992:	d407      	bmi.n	80149a4 <__swsetup_r+0x30>
 8014994:	2209      	movs	r2, #9
 8014996:	602a      	str	r2, [r5, #0]
 8014998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801499c:	81a3      	strh	r3, [r4, #12]
 801499e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149a2:	e033      	b.n	8014a0c <__swsetup_r+0x98>
 80149a4:	0758      	lsls	r0, r3, #29
 80149a6:	d512      	bpl.n	80149ce <__swsetup_r+0x5a>
 80149a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80149aa:	b141      	cbz	r1, 80149be <__swsetup_r+0x4a>
 80149ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80149b0:	4299      	cmp	r1, r3
 80149b2:	d002      	beq.n	80149ba <__swsetup_r+0x46>
 80149b4:	4628      	mov	r0, r5
 80149b6:	f000 f8e5 	bl	8014b84 <_free_r>
 80149ba:	2300      	movs	r3, #0
 80149bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80149be:	89a3      	ldrh	r3, [r4, #12]
 80149c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80149c4:	81a3      	strh	r3, [r4, #12]
 80149c6:	2300      	movs	r3, #0
 80149c8:	6063      	str	r3, [r4, #4]
 80149ca:	6923      	ldr	r3, [r4, #16]
 80149cc:	6023      	str	r3, [r4, #0]
 80149ce:	89a3      	ldrh	r3, [r4, #12]
 80149d0:	f043 0308 	orr.w	r3, r3, #8
 80149d4:	81a3      	strh	r3, [r4, #12]
 80149d6:	6923      	ldr	r3, [r4, #16]
 80149d8:	b94b      	cbnz	r3, 80149ee <__swsetup_r+0x7a>
 80149da:	89a3      	ldrh	r3, [r4, #12]
 80149dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80149e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80149e4:	d003      	beq.n	80149ee <__swsetup_r+0x7a>
 80149e6:	4621      	mov	r1, r4
 80149e8:	4628      	mov	r0, r5
 80149ea:	f000 fd7d 	bl	80154e8 <__smakebuf_r>
 80149ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149f2:	f013 0201 	ands.w	r2, r3, #1
 80149f6:	d00a      	beq.n	8014a0e <__swsetup_r+0x9a>
 80149f8:	2200      	movs	r2, #0
 80149fa:	60a2      	str	r2, [r4, #8]
 80149fc:	6962      	ldr	r2, [r4, #20]
 80149fe:	4252      	negs	r2, r2
 8014a00:	61a2      	str	r2, [r4, #24]
 8014a02:	6922      	ldr	r2, [r4, #16]
 8014a04:	b942      	cbnz	r2, 8014a18 <__swsetup_r+0xa4>
 8014a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014a0a:	d1c5      	bne.n	8014998 <__swsetup_r+0x24>
 8014a0c:	bd38      	pop	{r3, r4, r5, pc}
 8014a0e:	0799      	lsls	r1, r3, #30
 8014a10:	bf58      	it	pl
 8014a12:	6962      	ldrpl	r2, [r4, #20]
 8014a14:	60a2      	str	r2, [r4, #8]
 8014a16:	e7f4      	b.n	8014a02 <__swsetup_r+0x8e>
 8014a18:	2000      	movs	r0, #0
 8014a1a:	e7f7      	b.n	8014a0c <__swsetup_r+0x98>
 8014a1c:	2000007c 	.word	0x2000007c

08014a20 <memcmp>:
 8014a20:	b510      	push	{r4, lr}
 8014a22:	3901      	subs	r1, #1
 8014a24:	4402      	add	r2, r0
 8014a26:	4290      	cmp	r0, r2
 8014a28:	d101      	bne.n	8014a2e <memcmp+0xe>
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	e005      	b.n	8014a3a <memcmp+0x1a>
 8014a2e:	7803      	ldrb	r3, [r0, #0]
 8014a30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014a34:	42a3      	cmp	r3, r4
 8014a36:	d001      	beq.n	8014a3c <memcmp+0x1c>
 8014a38:	1b18      	subs	r0, r3, r4
 8014a3a:	bd10      	pop	{r4, pc}
 8014a3c:	3001      	adds	r0, #1
 8014a3e:	e7f2      	b.n	8014a26 <memcmp+0x6>

08014a40 <memset>:
 8014a40:	4402      	add	r2, r0
 8014a42:	4603      	mov	r3, r0
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d100      	bne.n	8014a4a <memset+0xa>
 8014a48:	4770      	bx	lr
 8014a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8014a4e:	e7f9      	b.n	8014a44 <memset+0x4>

08014a50 <_close_r>:
 8014a50:	b538      	push	{r3, r4, r5, lr}
 8014a52:	4d06      	ldr	r5, [pc, #24]	@ (8014a6c <_close_r+0x1c>)
 8014a54:	2300      	movs	r3, #0
 8014a56:	4604      	mov	r4, r0
 8014a58:	4608      	mov	r0, r1
 8014a5a:	602b      	str	r3, [r5, #0]
 8014a5c:	f7ec fa7e 	bl	8000f5c <_close>
 8014a60:	1c43      	adds	r3, r0, #1
 8014a62:	d102      	bne.n	8014a6a <_close_r+0x1a>
 8014a64:	682b      	ldr	r3, [r5, #0]
 8014a66:	b103      	cbz	r3, 8014a6a <_close_r+0x1a>
 8014a68:	6023      	str	r3, [r4, #0]
 8014a6a:	bd38      	pop	{r3, r4, r5, pc}
 8014a6c:	200084d0 	.word	0x200084d0

08014a70 <_lseek_r>:
 8014a70:	b538      	push	{r3, r4, r5, lr}
 8014a72:	4d07      	ldr	r5, [pc, #28]	@ (8014a90 <_lseek_r+0x20>)
 8014a74:	4604      	mov	r4, r0
 8014a76:	4608      	mov	r0, r1
 8014a78:	4611      	mov	r1, r2
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	602a      	str	r2, [r5, #0]
 8014a7e:	461a      	mov	r2, r3
 8014a80:	f7ec fa93 	bl	8000faa <_lseek>
 8014a84:	1c43      	adds	r3, r0, #1
 8014a86:	d102      	bne.n	8014a8e <_lseek_r+0x1e>
 8014a88:	682b      	ldr	r3, [r5, #0]
 8014a8a:	b103      	cbz	r3, 8014a8e <_lseek_r+0x1e>
 8014a8c:	6023      	str	r3, [r4, #0]
 8014a8e:	bd38      	pop	{r3, r4, r5, pc}
 8014a90:	200084d0 	.word	0x200084d0

08014a94 <_read_r>:
 8014a94:	b538      	push	{r3, r4, r5, lr}
 8014a96:	4d07      	ldr	r5, [pc, #28]	@ (8014ab4 <_read_r+0x20>)
 8014a98:	4604      	mov	r4, r0
 8014a9a:	4608      	mov	r0, r1
 8014a9c:	4611      	mov	r1, r2
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	602a      	str	r2, [r5, #0]
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	f7ec fa3d 	bl	8000f22 <_read>
 8014aa8:	1c43      	adds	r3, r0, #1
 8014aaa:	d102      	bne.n	8014ab2 <_read_r+0x1e>
 8014aac:	682b      	ldr	r3, [r5, #0]
 8014aae:	b103      	cbz	r3, 8014ab2 <_read_r+0x1e>
 8014ab0:	6023      	str	r3, [r4, #0]
 8014ab2:	bd38      	pop	{r3, r4, r5, pc}
 8014ab4:	200084d0 	.word	0x200084d0

08014ab8 <_write_r>:
 8014ab8:	b538      	push	{r3, r4, r5, lr}
 8014aba:	4d07      	ldr	r5, [pc, #28]	@ (8014ad8 <_write_r+0x20>)
 8014abc:	4604      	mov	r4, r0
 8014abe:	4608      	mov	r0, r1
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	602a      	str	r2, [r5, #0]
 8014ac6:	461a      	mov	r2, r3
 8014ac8:	f7ec f86c 	bl	8000ba4 <_write>
 8014acc:	1c43      	adds	r3, r0, #1
 8014ace:	d102      	bne.n	8014ad6 <_write_r+0x1e>
 8014ad0:	682b      	ldr	r3, [r5, #0]
 8014ad2:	b103      	cbz	r3, 8014ad6 <_write_r+0x1e>
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	bd38      	pop	{r3, r4, r5, pc}
 8014ad8:	200084d0 	.word	0x200084d0

08014adc <__libc_init_array>:
 8014adc:	b570      	push	{r4, r5, r6, lr}
 8014ade:	4d0d      	ldr	r5, [pc, #52]	@ (8014b14 <__libc_init_array+0x38>)
 8014ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8014b18 <__libc_init_array+0x3c>)
 8014ae2:	1b64      	subs	r4, r4, r5
 8014ae4:	10a4      	asrs	r4, r4, #2
 8014ae6:	2600      	movs	r6, #0
 8014ae8:	42a6      	cmp	r6, r4
 8014aea:	d109      	bne.n	8014b00 <__libc_init_array+0x24>
 8014aec:	4d0b      	ldr	r5, [pc, #44]	@ (8014b1c <__libc_init_array+0x40>)
 8014aee:	4c0c      	ldr	r4, [pc, #48]	@ (8014b20 <__libc_init_array+0x44>)
 8014af0:	f000 fde8 	bl	80156c4 <_init>
 8014af4:	1b64      	subs	r4, r4, r5
 8014af6:	10a4      	asrs	r4, r4, #2
 8014af8:	2600      	movs	r6, #0
 8014afa:	42a6      	cmp	r6, r4
 8014afc:	d105      	bne.n	8014b0a <__libc_init_array+0x2e>
 8014afe:	bd70      	pop	{r4, r5, r6, pc}
 8014b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b04:	4798      	blx	r3
 8014b06:	3601      	adds	r6, #1
 8014b08:	e7ee      	b.n	8014ae8 <__libc_init_array+0xc>
 8014b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b0e:	4798      	blx	r3
 8014b10:	3601      	adds	r6, #1
 8014b12:	e7f2      	b.n	8014afa <__libc_init_array+0x1e>
 8014b14:	08018f08 	.word	0x08018f08
 8014b18:	08018f08 	.word	0x08018f08
 8014b1c:	08018f08 	.word	0x08018f08
 8014b20:	08018f0c 	.word	0x08018f0c

08014b24 <__retarget_lock_init_recursive>:
 8014b24:	4770      	bx	lr

08014b26 <__retarget_lock_acquire_recursive>:
 8014b26:	4770      	bx	lr

08014b28 <__retarget_lock_release_recursive>:
 8014b28:	4770      	bx	lr

08014b2a <memcpy>:
 8014b2a:	440a      	add	r2, r1
 8014b2c:	4291      	cmp	r1, r2
 8014b2e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014b32:	d100      	bne.n	8014b36 <memcpy+0xc>
 8014b34:	4770      	bx	lr
 8014b36:	b510      	push	{r4, lr}
 8014b38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b40:	4291      	cmp	r1, r2
 8014b42:	d1f9      	bne.n	8014b38 <memcpy+0xe>
 8014b44:	bd10      	pop	{r4, pc}
	...

08014b48 <__assert_func>:
 8014b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b4a:	4614      	mov	r4, r2
 8014b4c:	461a      	mov	r2, r3
 8014b4e:	4b09      	ldr	r3, [pc, #36]	@ (8014b74 <__assert_func+0x2c>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	4605      	mov	r5, r0
 8014b54:	68d8      	ldr	r0, [r3, #12]
 8014b56:	b14c      	cbz	r4, 8014b6c <__assert_func+0x24>
 8014b58:	4b07      	ldr	r3, [pc, #28]	@ (8014b78 <__assert_func+0x30>)
 8014b5a:	9100      	str	r1, [sp, #0]
 8014b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b60:	4906      	ldr	r1, [pc, #24]	@ (8014b7c <__assert_func+0x34>)
 8014b62:	462b      	mov	r3, r5
 8014b64:	f000 fc88 	bl	8015478 <fiprintf>
 8014b68:	f000 fd60 	bl	801562c <abort>
 8014b6c:	4b04      	ldr	r3, [pc, #16]	@ (8014b80 <__assert_func+0x38>)
 8014b6e:	461c      	mov	r4, r3
 8014b70:	e7f3      	b.n	8014b5a <__assert_func+0x12>
 8014b72:	bf00      	nop
 8014b74:	2000007c 	.word	0x2000007c
 8014b78:	08018e91 	.word	0x08018e91
 8014b7c:	08018e9e 	.word	0x08018e9e
 8014b80:	08018ecc 	.word	0x08018ecc

08014b84 <_free_r>:
 8014b84:	b538      	push	{r3, r4, r5, lr}
 8014b86:	4605      	mov	r5, r0
 8014b88:	2900      	cmp	r1, #0
 8014b8a:	d041      	beq.n	8014c10 <_free_r+0x8c>
 8014b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b90:	1f0c      	subs	r4, r1, #4
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	bfb8      	it	lt
 8014b96:	18e4      	addlt	r4, r4, r3
 8014b98:	f000 f8e8 	bl	8014d6c <__malloc_lock>
 8014b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8014c14 <_free_r+0x90>)
 8014b9e:	6813      	ldr	r3, [r2, #0]
 8014ba0:	b933      	cbnz	r3, 8014bb0 <_free_r+0x2c>
 8014ba2:	6063      	str	r3, [r4, #4]
 8014ba4:	6014      	str	r4, [r2, #0]
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bac:	f000 b8e4 	b.w	8014d78 <__malloc_unlock>
 8014bb0:	42a3      	cmp	r3, r4
 8014bb2:	d908      	bls.n	8014bc6 <_free_r+0x42>
 8014bb4:	6820      	ldr	r0, [r4, #0]
 8014bb6:	1821      	adds	r1, r4, r0
 8014bb8:	428b      	cmp	r3, r1
 8014bba:	bf01      	itttt	eq
 8014bbc:	6819      	ldreq	r1, [r3, #0]
 8014bbe:	685b      	ldreq	r3, [r3, #4]
 8014bc0:	1809      	addeq	r1, r1, r0
 8014bc2:	6021      	streq	r1, [r4, #0]
 8014bc4:	e7ed      	b.n	8014ba2 <_free_r+0x1e>
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	b10b      	cbz	r3, 8014bd0 <_free_r+0x4c>
 8014bcc:	42a3      	cmp	r3, r4
 8014bce:	d9fa      	bls.n	8014bc6 <_free_r+0x42>
 8014bd0:	6811      	ldr	r1, [r2, #0]
 8014bd2:	1850      	adds	r0, r2, r1
 8014bd4:	42a0      	cmp	r0, r4
 8014bd6:	d10b      	bne.n	8014bf0 <_free_r+0x6c>
 8014bd8:	6820      	ldr	r0, [r4, #0]
 8014bda:	4401      	add	r1, r0
 8014bdc:	1850      	adds	r0, r2, r1
 8014bde:	4283      	cmp	r3, r0
 8014be0:	6011      	str	r1, [r2, #0]
 8014be2:	d1e0      	bne.n	8014ba6 <_free_r+0x22>
 8014be4:	6818      	ldr	r0, [r3, #0]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	6053      	str	r3, [r2, #4]
 8014bea:	4408      	add	r0, r1
 8014bec:	6010      	str	r0, [r2, #0]
 8014bee:	e7da      	b.n	8014ba6 <_free_r+0x22>
 8014bf0:	d902      	bls.n	8014bf8 <_free_r+0x74>
 8014bf2:	230c      	movs	r3, #12
 8014bf4:	602b      	str	r3, [r5, #0]
 8014bf6:	e7d6      	b.n	8014ba6 <_free_r+0x22>
 8014bf8:	6820      	ldr	r0, [r4, #0]
 8014bfa:	1821      	adds	r1, r4, r0
 8014bfc:	428b      	cmp	r3, r1
 8014bfe:	bf04      	itt	eq
 8014c00:	6819      	ldreq	r1, [r3, #0]
 8014c02:	685b      	ldreq	r3, [r3, #4]
 8014c04:	6063      	str	r3, [r4, #4]
 8014c06:	bf04      	itt	eq
 8014c08:	1809      	addeq	r1, r1, r0
 8014c0a:	6021      	streq	r1, [r4, #0]
 8014c0c:	6054      	str	r4, [r2, #4]
 8014c0e:	e7ca      	b.n	8014ba6 <_free_r+0x22>
 8014c10:	bd38      	pop	{r3, r4, r5, pc}
 8014c12:	bf00      	nop
 8014c14:	200084dc 	.word	0x200084dc

08014c18 <malloc>:
 8014c18:	4b02      	ldr	r3, [pc, #8]	@ (8014c24 <malloc+0xc>)
 8014c1a:	4601      	mov	r1, r0
 8014c1c:	6818      	ldr	r0, [r3, #0]
 8014c1e:	f000 b825 	b.w	8014c6c <_malloc_r>
 8014c22:	bf00      	nop
 8014c24:	2000007c 	.word	0x2000007c

08014c28 <sbrk_aligned>:
 8014c28:	b570      	push	{r4, r5, r6, lr}
 8014c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8014c68 <sbrk_aligned+0x40>)
 8014c2c:	460c      	mov	r4, r1
 8014c2e:	6831      	ldr	r1, [r6, #0]
 8014c30:	4605      	mov	r5, r0
 8014c32:	b911      	cbnz	r1, 8014c3a <sbrk_aligned+0x12>
 8014c34:	f000 fcea 	bl	801560c <_sbrk_r>
 8014c38:	6030      	str	r0, [r6, #0]
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	f000 fce5 	bl	801560c <_sbrk_r>
 8014c42:	1c43      	adds	r3, r0, #1
 8014c44:	d103      	bne.n	8014c4e <sbrk_aligned+0x26>
 8014c46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	bd70      	pop	{r4, r5, r6, pc}
 8014c4e:	1cc4      	adds	r4, r0, #3
 8014c50:	f024 0403 	bic.w	r4, r4, #3
 8014c54:	42a0      	cmp	r0, r4
 8014c56:	d0f8      	beq.n	8014c4a <sbrk_aligned+0x22>
 8014c58:	1a21      	subs	r1, r4, r0
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	f000 fcd6 	bl	801560c <_sbrk_r>
 8014c60:	3001      	adds	r0, #1
 8014c62:	d1f2      	bne.n	8014c4a <sbrk_aligned+0x22>
 8014c64:	e7ef      	b.n	8014c46 <sbrk_aligned+0x1e>
 8014c66:	bf00      	nop
 8014c68:	200084d8 	.word	0x200084d8

08014c6c <_malloc_r>:
 8014c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c70:	1ccd      	adds	r5, r1, #3
 8014c72:	f025 0503 	bic.w	r5, r5, #3
 8014c76:	3508      	adds	r5, #8
 8014c78:	2d0c      	cmp	r5, #12
 8014c7a:	bf38      	it	cc
 8014c7c:	250c      	movcc	r5, #12
 8014c7e:	2d00      	cmp	r5, #0
 8014c80:	4606      	mov	r6, r0
 8014c82:	db01      	blt.n	8014c88 <_malloc_r+0x1c>
 8014c84:	42a9      	cmp	r1, r5
 8014c86:	d904      	bls.n	8014c92 <_malloc_r+0x26>
 8014c88:	230c      	movs	r3, #12
 8014c8a:	6033      	str	r3, [r6, #0]
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014d68 <_malloc_r+0xfc>
 8014c96:	f000 f869 	bl	8014d6c <__malloc_lock>
 8014c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8014c9e:	461c      	mov	r4, r3
 8014ca0:	bb44      	cbnz	r4, 8014cf4 <_malloc_r+0x88>
 8014ca2:	4629      	mov	r1, r5
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	f7ff ffbf 	bl	8014c28 <sbrk_aligned>
 8014caa:	1c43      	adds	r3, r0, #1
 8014cac:	4604      	mov	r4, r0
 8014cae:	d158      	bne.n	8014d62 <_malloc_r+0xf6>
 8014cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8014cb4:	4627      	mov	r7, r4
 8014cb6:	2f00      	cmp	r7, #0
 8014cb8:	d143      	bne.n	8014d42 <_malloc_r+0xd6>
 8014cba:	2c00      	cmp	r4, #0
 8014cbc:	d04b      	beq.n	8014d56 <_malloc_r+0xea>
 8014cbe:	6823      	ldr	r3, [r4, #0]
 8014cc0:	4639      	mov	r1, r7
 8014cc2:	4630      	mov	r0, r6
 8014cc4:	eb04 0903 	add.w	r9, r4, r3
 8014cc8:	f000 fca0 	bl	801560c <_sbrk_r>
 8014ccc:	4581      	cmp	r9, r0
 8014cce:	d142      	bne.n	8014d56 <_malloc_r+0xea>
 8014cd0:	6821      	ldr	r1, [r4, #0]
 8014cd2:	1a6d      	subs	r5, r5, r1
 8014cd4:	4629      	mov	r1, r5
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	f7ff ffa6 	bl	8014c28 <sbrk_aligned>
 8014cdc:	3001      	adds	r0, #1
 8014cde:	d03a      	beq.n	8014d56 <_malloc_r+0xea>
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	442b      	add	r3, r5
 8014ce4:	6023      	str	r3, [r4, #0]
 8014ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8014cea:	685a      	ldr	r2, [r3, #4]
 8014cec:	bb62      	cbnz	r2, 8014d48 <_malloc_r+0xdc>
 8014cee:	f8c8 7000 	str.w	r7, [r8]
 8014cf2:	e00f      	b.n	8014d14 <_malloc_r+0xa8>
 8014cf4:	6822      	ldr	r2, [r4, #0]
 8014cf6:	1b52      	subs	r2, r2, r5
 8014cf8:	d420      	bmi.n	8014d3c <_malloc_r+0xd0>
 8014cfa:	2a0b      	cmp	r2, #11
 8014cfc:	d917      	bls.n	8014d2e <_malloc_r+0xc2>
 8014cfe:	1961      	adds	r1, r4, r5
 8014d00:	42a3      	cmp	r3, r4
 8014d02:	6025      	str	r5, [r4, #0]
 8014d04:	bf18      	it	ne
 8014d06:	6059      	strne	r1, [r3, #4]
 8014d08:	6863      	ldr	r3, [r4, #4]
 8014d0a:	bf08      	it	eq
 8014d0c:	f8c8 1000 	streq.w	r1, [r8]
 8014d10:	5162      	str	r2, [r4, r5]
 8014d12:	604b      	str	r3, [r1, #4]
 8014d14:	4630      	mov	r0, r6
 8014d16:	f000 f82f 	bl	8014d78 <__malloc_unlock>
 8014d1a:	f104 000b 	add.w	r0, r4, #11
 8014d1e:	1d23      	adds	r3, r4, #4
 8014d20:	f020 0007 	bic.w	r0, r0, #7
 8014d24:	1ac2      	subs	r2, r0, r3
 8014d26:	bf1c      	itt	ne
 8014d28:	1a1b      	subne	r3, r3, r0
 8014d2a:	50a3      	strne	r3, [r4, r2]
 8014d2c:	e7af      	b.n	8014c8e <_malloc_r+0x22>
 8014d2e:	6862      	ldr	r2, [r4, #4]
 8014d30:	42a3      	cmp	r3, r4
 8014d32:	bf0c      	ite	eq
 8014d34:	f8c8 2000 	streq.w	r2, [r8]
 8014d38:	605a      	strne	r2, [r3, #4]
 8014d3a:	e7eb      	b.n	8014d14 <_malloc_r+0xa8>
 8014d3c:	4623      	mov	r3, r4
 8014d3e:	6864      	ldr	r4, [r4, #4]
 8014d40:	e7ae      	b.n	8014ca0 <_malloc_r+0x34>
 8014d42:	463c      	mov	r4, r7
 8014d44:	687f      	ldr	r7, [r7, #4]
 8014d46:	e7b6      	b.n	8014cb6 <_malloc_r+0x4a>
 8014d48:	461a      	mov	r2, r3
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	42a3      	cmp	r3, r4
 8014d4e:	d1fb      	bne.n	8014d48 <_malloc_r+0xdc>
 8014d50:	2300      	movs	r3, #0
 8014d52:	6053      	str	r3, [r2, #4]
 8014d54:	e7de      	b.n	8014d14 <_malloc_r+0xa8>
 8014d56:	230c      	movs	r3, #12
 8014d58:	6033      	str	r3, [r6, #0]
 8014d5a:	4630      	mov	r0, r6
 8014d5c:	f000 f80c 	bl	8014d78 <__malloc_unlock>
 8014d60:	e794      	b.n	8014c8c <_malloc_r+0x20>
 8014d62:	6005      	str	r5, [r0, #0]
 8014d64:	e7d6      	b.n	8014d14 <_malloc_r+0xa8>
 8014d66:	bf00      	nop
 8014d68:	200084dc 	.word	0x200084dc

08014d6c <__malloc_lock>:
 8014d6c:	4801      	ldr	r0, [pc, #4]	@ (8014d74 <__malloc_lock+0x8>)
 8014d6e:	f7ff beda 	b.w	8014b26 <__retarget_lock_acquire_recursive>
 8014d72:	bf00      	nop
 8014d74:	200084d4 	.word	0x200084d4

08014d78 <__malloc_unlock>:
 8014d78:	4801      	ldr	r0, [pc, #4]	@ (8014d80 <__malloc_unlock+0x8>)
 8014d7a:	f7ff bed5 	b.w	8014b28 <__retarget_lock_release_recursive>
 8014d7e:	bf00      	nop
 8014d80:	200084d4 	.word	0x200084d4

08014d84 <__sfputc_r>:
 8014d84:	6893      	ldr	r3, [r2, #8]
 8014d86:	3b01      	subs	r3, #1
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	b410      	push	{r4}
 8014d8c:	6093      	str	r3, [r2, #8]
 8014d8e:	da08      	bge.n	8014da2 <__sfputc_r+0x1e>
 8014d90:	6994      	ldr	r4, [r2, #24]
 8014d92:	42a3      	cmp	r3, r4
 8014d94:	db01      	blt.n	8014d9a <__sfputc_r+0x16>
 8014d96:	290a      	cmp	r1, #10
 8014d98:	d103      	bne.n	8014da2 <__sfputc_r+0x1e>
 8014d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d9e:	f7ff bdaa 	b.w	80148f6 <__swbuf_r>
 8014da2:	6813      	ldr	r3, [r2, #0]
 8014da4:	1c58      	adds	r0, r3, #1
 8014da6:	6010      	str	r0, [r2, #0]
 8014da8:	7019      	strb	r1, [r3, #0]
 8014daa:	4608      	mov	r0, r1
 8014dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014db0:	4770      	bx	lr

08014db2 <__sfputs_r>:
 8014db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014db4:	4606      	mov	r6, r0
 8014db6:	460f      	mov	r7, r1
 8014db8:	4614      	mov	r4, r2
 8014dba:	18d5      	adds	r5, r2, r3
 8014dbc:	42ac      	cmp	r4, r5
 8014dbe:	d101      	bne.n	8014dc4 <__sfputs_r+0x12>
 8014dc0:	2000      	movs	r0, #0
 8014dc2:	e007      	b.n	8014dd4 <__sfputs_r+0x22>
 8014dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dc8:	463a      	mov	r2, r7
 8014dca:	4630      	mov	r0, r6
 8014dcc:	f7ff ffda 	bl	8014d84 <__sfputc_r>
 8014dd0:	1c43      	adds	r3, r0, #1
 8014dd2:	d1f3      	bne.n	8014dbc <__sfputs_r+0xa>
 8014dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014dd8 <_vfiprintf_r>:
 8014dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ddc:	460d      	mov	r5, r1
 8014dde:	b09d      	sub	sp, #116	@ 0x74
 8014de0:	4614      	mov	r4, r2
 8014de2:	4698      	mov	r8, r3
 8014de4:	4606      	mov	r6, r0
 8014de6:	b118      	cbz	r0, 8014df0 <_vfiprintf_r+0x18>
 8014de8:	6a03      	ldr	r3, [r0, #32]
 8014dea:	b90b      	cbnz	r3, 8014df0 <_vfiprintf_r+0x18>
 8014dec:	f7ff fc92 	bl	8014714 <__sinit>
 8014df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014df2:	07d9      	lsls	r1, r3, #31
 8014df4:	d405      	bmi.n	8014e02 <_vfiprintf_r+0x2a>
 8014df6:	89ab      	ldrh	r3, [r5, #12]
 8014df8:	059a      	lsls	r2, r3, #22
 8014dfa:	d402      	bmi.n	8014e02 <_vfiprintf_r+0x2a>
 8014dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dfe:	f7ff fe92 	bl	8014b26 <__retarget_lock_acquire_recursive>
 8014e02:	89ab      	ldrh	r3, [r5, #12]
 8014e04:	071b      	lsls	r3, r3, #28
 8014e06:	d501      	bpl.n	8014e0c <_vfiprintf_r+0x34>
 8014e08:	692b      	ldr	r3, [r5, #16]
 8014e0a:	b99b      	cbnz	r3, 8014e34 <_vfiprintf_r+0x5c>
 8014e0c:	4629      	mov	r1, r5
 8014e0e:	4630      	mov	r0, r6
 8014e10:	f7ff fdb0 	bl	8014974 <__swsetup_r>
 8014e14:	b170      	cbz	r0, 8014e34 <_vfiprintf_r+0x5c>
 8014e16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014e18:	07dc      	lsls	r4, r3, #31
 8014e1a:	d504      	bpl.n	8014e26 <_vfiprintf_r+0x4e>
 8014e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e20:	b01d      	add	sp, #116	@ 0x74
 8014e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e26:	89ab      	ldrh	r3, [r5, #12]
 8014e28:	0598      	lsls	r0, r3, #22
 8014e2a:	d4f7      	bmi.n	8014e1c <_vfiprintf_r+0x44>
 8014e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e2e:	f7ff fe7b 	bl	8014b28 <__retarget_lock_release_recursive>
 8014e32:	e7f3      	b.n	8014e1c <_vfiprintf_r+0x44>
 8014e34:	2300      	movs	r3, #0
 8014e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e38:	2320      	movs	r3, #32
 8014e3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e42:	2330      	movs	r3, #48	@ 0x30
 8014e44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ff4 <_vfiprintf_r+0x21c>
 8014e48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014e4c:	f04f 0901 	mov.w	r9, #1
 8014e50:	4623      	mov	r3, r4
 8014e52:	469a      	mov	sl, r3
 8014e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e58:	b10a      	cbz	r2, 8014e5e <_vfiprintf_r+0x86>
 8014e5a:	2a25      	cmp	r2, #37	@ 0x25
 8014e5c:	d1f9      	bne.n	8014e52 <_vfiprintf_r+0x7a>
 8014e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8014e62:	d00b      	beq.n	8014e7c <_vfiprintf_r+0xa4>
 8014e64:	465b      	mov	r3, fp
 8014e66:	4622      	mov	r2, r4
 8014e68:	4629      	mov	r1, r5
 8014e6a:	4630      	mov	r0, r6
 8014e6c:	f7ff ffa1 	bl	8014db2 <__sfputs_r>
 8014e70:	3001      	adds	r0, #1
 8014e72:	f000 80a7 	beq.w	8014fc4 <_vfiprintf_r+0x1ec>
 8014e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e78:	445a      	add	r2, fp
 8014e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	f000 809f 	beq.w	8014fc4 <_vfiprintf_r+0x1ec>
 8014e86:	2300      	movs	r3, #0
 8014e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e90:	f10a 0a01 	add.w	sl, sl, #1
 8014e94:	9304      	str	r3, [sp, #16]
 8014e96:	9307      	str	r3, [sp, #28]
 8014e98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e9e:	4654      	mov	r4, sl
 8014ea0:	2205      	movs	r2, #5
 8014ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ea6:	4853      	ldr	r0, [pc, #332]	@ (8014ff4 <_vfiprintf_r+0x21c>)
 8014ea8:	f7eb f9b2 	bl	8000210 <memchr>
 8014eac:	9a04      	ldr	r2, [sp, #16]
 8014eae:	b9d8      	cbnz	r0, 8014ee8 <_vfiprintf_r+0x110>
 8014eb0:	06d1      	lsls	r1, r2, #27
 8014eb2:	bf44      	itt	mi
 8014eb4:	2320      	movmi	r3, #32
 8014eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014eba:	0713      	lsls	r3, r2, #28
 8014ebc:	bf44      	itt	mi
 8014ebe:	232b      	movmi	r3, #43	@ 0x2b
 8014ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8014ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8014eca:	d015      	beq.n	8014ef8 <_vfiprintf_r+0x120>
 8014ecc:	9a07      	ldr	r2, [sp, #28]
 8014ece:	4654      	mov	r4, sl
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	f04f 0c0a 	mov.w	ip, #10
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014edc:	3b30      	subs	r3, #48	@ 0x30
 8014ede:	2b09      	cmp	r3, #9
 8014ee0:	d94b      	bls.n	8014f7a <_vfiprintf_r+0x1a2>
 8014ee2:	b1b0      	cbz	r0, 8014f12 <_vfiprintf_r+0x13a>
 8014ee4:	9207      	str	r2, [sp, #28]
 8014ee6:	e014      	b.n	8014f12 <_vfiprintf_r+0x13a>
 8014ee8:	eba0 0308 	sub.w	r3, r0, r8
 8014eec:	fa09 f303 	lsl.w	r3, r9, r3
 8014ef0:	4313      	orrs	r3, r2
 8014ef2:	9304      	str	r3, [sp, #16]
 8014ef4:	46a2      	mov	sl, r4
 8014ef6:	e7d2      	b.n	8014e9e <_vfiprintf_r+0xc6>
 8014ef8:	9b03      	ldr	r3, [sp, #12]
 8014efa:	1d19      	adds	r1, r3, #4
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	9103      	str	r1, [sp, #12]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	bfbb      	ittet	lt
 8014f04:	425b      	neglt	r3, r3
 8014f06:	f042 0202 	orrlt.w	r2, r2, #2
 8014f0a:	9307      	strge	r3, [sp, #28]
 8014f0c:	9307      	strlt	r3, [sp, #28]
 8014f0e:	bfb8      	it	lt
 8014f10:	9204      	strlt	r2, [sp, #16]
 8014f12:	7823      	ldrb	r3, [r4, #0]
 8014f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8014f16:	d10a      	bne.n	8014f2e <_vfiprintf_r+0x156>
 8014f18:	7863      	ldrb	r3, [r4, #1]
 8014f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f1c:	d132      	bne.n	8014f84 <_vfiprintf_r+0x1ac>
 8014f1e:	9b03      	ldr	r3, [sp, #12]
 8014f20:	1d1a      	adds	r2, r3, #4
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	9203      	str	r2, [sp, #12]
 8014f26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014f2a:	3402      	adds	r4, #2
 8014f2c:	9305      	str	r3, [sp, #20]
 8014f2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015004 <_vfiprintf_r+0x22c>
 8014f32:	7821      	ldrb	r1, [r4, #0]
 8014f34:	2203      	movs	r2, #3
 8014f36:	4650      	mov	r0, sl
 8014f38:	f7eb f96a 	bl	8000210 <memchr>
 8014f3c:	b138      	cbz	r0, 8014f4e <_vfiprintf_r+0x176>
 8014f3e:	9b04      	ldr	r3, [sp, #16]
 8014f40:	eba0 000a 	sub.w	r0, r0, sl
 8014f44:	2240      	movs	r2, #64	@ 0x40
 8014f46:	4082      	lsls	r2, r0
 8014f48:	4313      	orrs	r3, r2
 8014f4a:	3401      	adds	r4, #1
 8014f4c:	9304      	str	r3, [sp, #16]
 8014f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f52:	4829      	ldr	r0, [pc, #164]	@ (8014ff8 <_vfiprintf_r+0x220>)
 8014f54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014f58:	2206      	movs	r2, #6
 8014f5a:	f7eb f959 	bl	8000210 <memchr>
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	d03f      	beq.n	8014fe2 <_vfiprintf_r+0x20a>
 8014f62:	4b26      	ldr	r3, [pc, #152]	@ (8014ffc <_vfiprintf_r+0x224>)
 8014f64:	bb1b      	cbnz	r3, 8014fae <_vfiprintf_r+0x1d6>
 8014f66:	9b03      	ldr	r3, [sp, #12]
 8014f68:	3307      	adds	r3, #7
 8014f6a:	f023 0307 	bic.w	r3, r3, #7
 8014f6e:	3308      	adds	r3, #8
 8014f70:	9303      	str	r3, [sp, #12]
 8014f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f74:	443b      	add	r3, r7
 8014f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f78:	e76a      	b.n	8014e50 <_vfiprintf_r+0x78>
 8014f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f7e:	460c      	mov	r4, r1
 8014f80:	2001      	movs	r0, #1
 8014f82:	e7a8      	b.n	8014ed6 <_vfiprintf_r+0xfe>
 8014f84:	2300      	movs	r3, #0
 8014f86:	3401      	adds	r4, #1
 8014f88:	9305      	str	r3, [sp, #20]
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	f04f 0c0a 	mov.w	ip, #10
 8014f90:	4620      	mov	r0, r4
 8014f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f96:	3a30      	subs	r2, #48	@ 0x30
 8014f98:	2a09      	cmp	r2, #9
 8014f9a:	d903      	bls.n	8014fa4 <_vfiprintf_r+0x1cc>
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d0c6      	beq.n	8014f2e <_vfiprintf_r+0x156>
 8014fa0:	9105      	str	r1, [sp, #20]
 8014fa2:	e7c4      	b.n	8014f2e <_vfiprintf_r+0x156>
 8014fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fa8:	4604      	mov	r4, r0
 8014faa:	2301      	movs	r3, #1
 8014fac:	e7f0      	b.n	8014f90 <_vfiprintf_r+0x1b8>
 8014fae:	ab03      	add	r3, sp, #12
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	462a      	mov	r2, r5
 8014fb4:	4b12      	ldr	r3, [pc, #72]	@ (8015000 <_vfiprintf_r+0x228>)
 8014fb6:	a904      	add	r1, sp, #16
 8014fb8:	4630      	mov	r0, r6
 8014fba:	f3af 8000 	nop.w
 8014fbe:	4607      	mov	r7, r0
 8014fc0:	1c78      	adds	r0, r7, #1
 8014fc2:	d1d6      	bne.n	8014f72 <_vfiprintf_r+0x19a>
 8014fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014fc6:	07d9      	lsls	r1, r3, #31
 8014fc8:	d405      	bmi.n	8014fd6 <_vfiprintf_r+0x1fe>
 8014fca:	89ab      	ldrh	r3, [r5, #12]
 8014fcc:	059a      	lsls	r2, r3, #22
 8014fce:	d402      	bmi.n	8014fd6 <_vfiprintf_r+0x1fe>
 8014fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014fd2:	f7ff fda9 	bl	8014b28 <__retarget_lock_release_recursive>
 8014fd6:	89ab      	ldrh	r3, [r5, #12]
 8014fd8:	065b      	lsls	r3, r3, #25
 8014fda:	f53f af1f 	bmi.w	8014e1c <_vfiprintf_r+0x44>
 8014fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014fe0:	e71e      	b.n	8014e20 <_vfiprintf_r+0x48>
 8014fe2:	ab03      	add	r3, sp, #12
 8014fe4:	9300      	str	r3, [sp, #0]
 8014fe6:	462a      	mov	r2, r5
 8014fe8:	4b05      	ldr	r3, [pc, #20]	@ (8015000 <_vfiprintf_r+0x228>)
 8014fea:	a904      	add	r1, sp, #16
 8014fec:	4630      	mov	r0, r6
 8014fee:	f000 f879 	bl	80150e4 <_printf_i>
 8014ff2:	e7e4      	b.n	8014fbe <_vfiprintf_r+0x1e6>
 8014ff4:	08018ecd 	.word	0x08018ecd
 8014ff8:	08018ed7 	.word	0x08018ed7
 8014ffc:	00000000 	.word	0x00000000
 8015000:	08014db3 	.word	0x08014db3
 8015004:	08018ed3 	.word	0x08018ed3

08015008 <_printf_common>:
 8015008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801500c:	4616      	mov	r6, r2
 801500e:	4698      	mov	r8, r3
 8015010:	688a      	ldr	r2, [r1, #8]
 8015012:	690b      	ldr	r3, [r1, #16]
 8015014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015018:	4293      	cmp	r3, r2
 801501a:	bfb8      	it	lt
 801501c:	4613      	movlt	r3, r2
 801501e:	6033      	str	r3, [r6, #0]
 8015020:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015024:	4607      	mov	r7, r0
 8015026:	460c      	mov	r4, r1
 8015028:	b10a      	cbz	r2, 801502e <_printf_common+0x26>
 801502a:	3301      	adds	r3, #1
 801502c:	6033      	str	r3, [r6, #0]
 801502e:	6823      	ldr	r3, [r4, #0]
 8015030:	0699      	lsls	r1, r3, #26
 8015032:	bf42      	ittt	mi
 8015034:	6833      	ldrmi	r3, [r6, #0]
 8015036:	3302      	addmi	r3, #2
 8015038:	6033      	strmi	r3, [r6, #0]
 801503a:	6825      	ldr	r5, [r4, #0]
 801503c:	f015 0506 	ands.w	r5, r5, #6
 8015040:	d106      	bne.n	8015050 <_printf_common+0x48>
 8015042:	f104 0a19 	add.w	sl, r4, #25
 8015046:	68e3      	ldr	r3, [r4, #12]
 8015048:	6832      	ldr	r2, [r6, #0]
 801504a:	1a9b      	subs	r3, r3, r2
 801504c:	42ab      	cmp	r3, r5
 801504e:	dc26      	bgt.n	801509e <_printf_common+0x96>
 8015050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015054:	6822      	ldr	r2, [r4, #0]
 8015056:	3b00      	subs	r3, #0
 8015058:	bf18      	it	ne
 801505a:	2301      	movne	r3, #1
 801505c:	0692      	lsls	r2, r2, #26
 801505e:	d42b      	bmi.n	80150b8 <_printf_common+0xb0>
 8015060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015064:	4641      	mov	r1, r8
 8015066:	4638      	mov	r0, r7
 8015068:	47c8      	blx	r9
 801506a:	3001      	adds	r0, #1
 801506c:	d01e      	beq.n	80150ac <_printf_common+0xa4>
 801506e:	6823      	ldr	r3, [r4, #0]
 8015070:	6922      	ldr	r2, [r4, #16]
 8015072:	f003 0306 	and.w	r3, r3, #6
 8015076:	2b04      	cmp	r3, #4
 8015078:	bf02      	ittt	eq
 801507a:	68e5      	ldreq	r5, [r4, #12]
 801507c:	6833      	ldreq	r3, [r6, #0]
 801507e:	1aed      	subeq	r5, r5, r3
 8015080:	68a3      	ldr	r3, [r4, #8]
 8015082:	bf0c      	ite	eq
 8015084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015088:	2500      	movne	r5, #0
 801508a:	4293      	cmp	r3, r2
 801508c:	bfc4      	itt	gt
 801508e:	1a9b      	subgt	r3, r3, r2
 8015090:	18ed      	addgt	r5, r5, r3
 8015092:	2600      	movs	r6, #0
 8015094:	341a      	adds	r4, #26
 8015096:	42b5      	cmp	r5, r6
 8015098:	d11a      	bne.n	80150d0 <_printf_common+0xc8>
 801509a:	2000      	movs	r0, #0
 801509c:	e008      	b.n	80150b0 <_printf_common+0xa8>
 801509e:	2301      	movs	r3, #1
 80150a0:	4652      	mov	r2, sl
 80150a2:	4641      	mov	r1, r8
 80150a4:	4638      	mov	r0, r7
 80150a6:	47c8      	blx	r9
 80150a8:	3001      	adds	r0, #1
 80150aa:	d103      	bne.n	80150b4 <_printf_common+0xac>
 80150ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80150b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150b4:	3501      	adds	r5, #1
 80150b6:	e7c6      	b.n	8015046 <_printf_common+0x3e>
 80150b8:	18e1      	adds	r1, r4, r3
 80150ba:	1c5a      	adds	r2, r3, #1
 80150bc:	2030      	movs	r0, #48	@ 0x30
 80150be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80150c2:	4422      	add	r2, r4
 80150c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80150c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80150cc:	3302      	adds	r3, #2
 80150ce:	e7c7      	b.n	8015060 <_printf_common+0x58>
 80150d0:	2301      	movs	r3, #1
 80150d2:	4622      	mov	r2, r4
 80150d4:	4641      	mov	r1, r8
 80150d6:	4638      	mov	r0, r7
 80150d8:	47c8      	blx	r9
 80150da:	3001      	adds	r0, #1
 80150dc:	d0e6      	beq.n	80150ac <_printf_common+0xa4>
 80150de:	3601      	adds	r6, #1
 80150e0:	e7d9      	b.n	8015096 <_printf_common+0x8e>
	...

080150e4 <_printf_i>:
 80150e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80150e8:	7e0f      	ldrb	r7, [r1, #24]
 80150ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80150ec:	2f78      	cmp	r7, #120	@ 0x78
 80150ee:	4691      	mov	r9, r2
 80150f0:	4680      	mov	r8, r0
 80150f2:	460c      	mov	r4, r1
 80150f4:	469a      	mov	sl, r3
 80150f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80150fa:	d807      	bhi.n	801510c <_printf_i+0x28>
 80150fc:	2f62      	cmp	r7, #98	@ 0x62
 80150fe:	d80a      	bhi.n	8015116 <_printf_i+0x32>
 8015100:	2f00      	cmp	r7, #0
 8015102:	f000 80d1 	beq.w	80152a8 <_printf_i+0x1c4>
 8015106:	2f58      	cmp	r7, #88	@ 0x58
 8015108:	f000 80b8 	beq.w	801527c <_printf_i+0x198>
 801510c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015110:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015114:	e03a      	b.n	801518c <_printf_i+0xa8>
 8015116:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801511a:	2b15      	cmp	r3, #21
 801511c:	d8f6      	bhi.n	801510c <_printf_i+0x28>
 801511e:	a101      	add	r1, pc, #4	@ (adr r1, 8015124 <_printf_i+0x40>)
 8015120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015124:	0801517d 	.word	0x0801517d
 8015128:	08015191 	.word	0x08015191
 801512c:	0801510d 	.word	0x0801510d
 8015130:	0801510d 	.word	0x0801510d
 8015134:	0801510d 	.word	0x0801510d
 8015138:	0801510d 	.word	0x0801510d
 801513c:	08015191 	.word	0x08015191
 8015140:	0801510d 	.word	0x0801510d
 8015144:	0801510d 	.word	0x0801510d
 8015148:	0801510d 	.word	0x0801510d
 801514c:	0801510d 	.word	0x0801510d
 8015150:	0801528f 	.word	0x0801528f
 8015154:	080151bb 	.word	0x080151bb
 8015158:	08015249 	.word	0x08015249
 801515c:	0801510d 	.word	0x0801510d
 8015160:	0801510d 	.word	0x0801510d
 8015164:	080152b1 	.word	0x080152b1
 8015168:	0801510d 	.word	0x0801510d
 801516c:	080151bb 	.word	0x080151bb
 8015170:	0801510d 	.word	0x0801510d
 8015174:	0801510d 	.word	0x0801510d
 8015178:	08015251 	.word	0x08015251
 801517c:	6833      	ldr	r3, [r6, #0]
 801517e:	1d1a      	adds	r2, r3, #4
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	6032      	str	r2, [r6, #0]
 8015184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015188:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801518c:	2301      	movs	r3, #1
 801518e:	e09c      	b.n	80152ca <_printf_i+0x1e6>
 8015190:	6833      	ldr	r3, [r6, #0]
 8015192:	6820      	ldr	r0, [r4, #0]
 8015194:	1d19      	adds	r1, r3, #4
 8015196:	6031      	str	r1, [r6, #0]
 8015198:	0606      	lsls	r6, r0, #24
 801519a:	d501      	bpl.n	80151a0 <_printf_i+0xbc>
 801519c:	681d      	ldr	r5, [r3, #0]
 801519e:	e003      	b.n	80151a8 <_printf_i+0xc4>
 80151a0:	0645      	lsls	r5, r0, #25
 80151a2:	d5fb      	bpl.n	801519c <_printf_i+0xb8>
 80151a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80151a8:	2d00      	cmp	r5, #0
 80151aa:	da03      	bge.n	80151b4 <_printf_i+0xd0>
 80151ac:	232d      	movs	r3, #45	@ 0x2d
 80151ae:	426d      	negs	r5, r5
 80151b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80151b4:	4858      	ldr	r0, [pc, #352]	@ (8015318 <_printf_i+0x234>)
 80151b6:	230a      	movs	r3, #10
 80151b8:	e011      	b.n	80151de <_printf_i+0xfa>
 80151ba:	6821      	ldr	r1, [r4, #0]
 80151bc:	6833      	ldr	r3, [r6, #0]
 80151be:	0608      	lsls	r0, r1, #24
 80151c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80151c4:	d402      	bmi.n	80151cc <_printf_i+0xe8>
 80151c6:	0649      	lsls	r1, r1, #25
 80151c8:	bf48      	it	mi
 80151ca:	b2ad      	uxthmi	r5, r5
 80151cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80151ce:	4852      	ldr	r0, [pc, #328]	@ (8015318 <_printf_i+0x234>)
 80151d0:	6033      	str	r3, [r6, #0]
 80151d2:	bf14      	ite	ne
 80151d4:	230a      	movne	r3, #10
 80151d6:	2308      	moveq	r3, #8
 80151d8:	2100      	movs	r1, #0
 80151da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80151de:	6866      	ldr	r6, [r4, #4]
 80151e0:	60a6      	str	r6, [r4, #8]
 80151e2:	2e00      	cmp	r6, #0
 80151e4:	db05      	blt.n	80151f2 <_printf_i+0x10e>
 80151e6:	6821      	ldr	r1, [r4, #0]
 80151e8:	432e      	orrs	r6, r5
 80151ea:	f021 0104 	bic.w	r1, r1, #4
 80151ee:	6021      	str	r1, [r4, #0]
 80151f0:	d04b      	beq.n	801528a <_printf_i+0x1a6>
 80151f2:	4616      	mov	r6, r2
 80151f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80151f8:	fb03 5711 	mls	r7, r3, r1, r5
 80151fc:	5dc7      	ldrb	r7, [r0, r7]
 80151fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015202:	462f      	mov	r7, r5
 8015204:	42bb      	cmp	r3, r7
 8015206:	460d      	mov	r5, r1
 8015208:	d9f4      	bls.n	80151f4 <_printf_i+0x110>
 801520a:	2b08      	cmp	r3, #8
 801520c:	d10b      	bne.n	8015226 <_printf_i+0x142>
 801520e:	6823      	ldr	r3, [r4, #0]
 8015210:	07df      	lsls	r7, r3, #31
 8015212:	d508      	bpl.n	8015226 <_printf_i+0x142>
 8015214:	6923      	ldr	r3, [r4, #16]
 8015216:	6861      	ldr	r1, [r4, #4]
 8015218:	4299      	cmp	r1, r3
 801521a:	bfde      	ittt	le
 801521c:	2330      	movle	r3, #48	@ 0x30
 801521e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015222:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8015226:	1b92      	subs	r2, r2, r6
 8015228:	6122      	str	r2, [r4, #16]
 801522a:	f8cd a000 	str.w	sl, [sp]
 801522e:	464b      	mov	r3, r9
 8015230:	aa03      	add	r2, sp, #12
 8015232:	4621      	mov	r1, r4
 8015234:	4640      	mov	r0, r8
 8015236:	f7ff fee7 	bl	8015008 <_printf_common>
 801523a:	3001      	adds	r0, #1
 801523c:	d14a      	bne.n	80152d4 <_printf_i+0x1f0>
 801523e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015242:	b004      	add	sp, #16
 8015244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015248:	6823      	ldr	r3, [r4, #0]
 801524a:	f043 0320 	orr.w	r3, r3, #32
 801524e:	6023      	str	r3, [r4, #0]
 8015250:	4832      	ldr	r0, [pc, #200]	@ (801531c <_printf_i+0x238>)
 8015252:	2778      	movs	r7, #120	@ 0x78
 8015254:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015258:	6823      	ldr	r3, [r4, #0]
 801525a:	6831      	ldr	r1, [r6, #0]
 801525c:	061f      	lsls	r7, r3, #24
 801525e:	f851 5b04 	ldr.w	r5, [r1], #4
 8015262:	d402      	bmi.n	801526a <_printf_i+0x186>
 8015264:	065f      	lsls	r7, r3, #25
 8015266:	bf48      	it	mi
 8015268:	b2ad      	uxthmi	r5, r5
 801526a:	6031      	str	r1, [r6, #0]
 801526c:	07d9      	lsls	r1, r3, #31
 801526e:	bf44      	itt	mi
 8015270:	f043 0320 	orrmi.w	r3, r3, #32
 8015274:	6023      	strmi	r3, [r4, #0]
 8015276:	b11d      	cbz	r5, 8015280 <_printf_i+0x19c>
 8015278:	2310      	movs	r3, #16
 801527a:	e7ad      	b.n	80151d8 <_printf_i+0xf4>
 801527c:	4826      	ldr	r0, [pc, #152]	@ (8015318 <_printf_i+0x234>)
 801527e:	e7e9      	b.n	8015254 <_printf_i+0x170>
 8015280:	6823      	ldr	r3, [r4, #0]
 8015282:	f023 0320 	bic.w	r3, r3, #32
 8015286:	6023      	str	r3, [r4, #0]
 8015288:	e7f6      	b.n	8015278 <_printf_i+0x194>
 801528a:	4616      	mov	r6, r2
 801528c:	e7bd      	b.n	801520a <_printf_i+0x126>
 801528e:	6833      	ldr	r3, [r6, #0]
 8015290:	6825      	ldr	r5, [r4, #0]
 8015292:	6961      	ldr	r1, [r4, #20]
 8015294:	1d18      	adds	r0, r3, #4
 8015296:	6030      	str	r0, [r6, #0]
 8015298:	062e      	lsls	r6, r5, #24
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	d501      	bpl.n	80152a2 <_printf_i+0x1be>
 801529e:	6019      	str	r1, [r3, #0]
 80152a0:	e002      	b.n	80152a8 <_printf_i+0x1c4>
 80152a2:	0668      	lsls	r0, r5, #25
 80152a4:	d5fb      	bpl.n	801529e <_printf_i+0x1ba>
 80152a6:	8019      	strh	r1, [r3, #0]
 80152a8:	2300      	movs	r3, #0
 80152aa:	6123      	str	r3, [r4, #16]
 80152ac:	4616      	mov	r6, r2
 80152ae:	e7bc      	b.n	801522a <_printf_i+0x146>
 80152b0:	6833      	ldr	r3, [r6, #0]
 80152b2:	1d1a      	adds	r2, r3, #4
 80152b4:	6032      	str	r2, [r6, #0]
 80152b6:	681e      	ldr	r6, [r3, #0]
 80152b8:	6862      	ldr	r2, [r4, #4]
 80152ba:	2100      	movs	r1, #0
 80152bc:	4630      	mov	r0, r6
 80152be:	f7ea ffa7 	bl	8000210 <memchr>
 80152c2:	b108      	cbz	r0, 80152c8 <_printf_i+0x1e4>
 80152c4:	1b80      	subs	r0, r0, r6
 80152c6:	6060      	str	r0, [r4, #4]
 80152c8:	6863      	ldr	r3, [r4, #4]
 80152ca:	6123      	str	r3, [r4, #16]
 80152cc:	2300      	movs	r3, #0
 80152ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80152d2:	e7aa      	b.n	801522a <_printf_i+0x146>
 80152d4:	6923      	ldr	r3, [r4, #16]
 80152d6:	4632      	mov	r2, r6
 80152d8:	4649      	mov	r1, r9
 80152da:	4640      	mov	r0, r8
 80152dc:	47d0      	blx	sl
 80152de:	3001      	adds	r0, #1
 80152e0:	d0ad      	beq.n	801523e <_printf_i+0x15a>
 80152e2:	6823      	ldr	r3, [r4, #0]
 80152e4:	079b      	lsls	r3, r3, #30
 80152e6:	d413      	bmi.n	8015310 <_printf_i+0x22c>
 80152e8:	68e0      	ldr	r0, [r4, #12]
 80152ea:	9b03      	ldr	r3, [sp, #12]
 80152ec:	4298      	cmp	r0, r3
 80152ee:	bfb8      	it	lt
 80152f0:	4618      	movlt	r0, r3
 80152f2:	e7a6      	b.n	8015242 <_printf_i+0x15e>
 80152f4:	2301      	movs	r3, #1
 80152f6:	4632      	mov	r2, r6
 80152f8:	4649      	mov	r1, r9
 80152fa:	4640      	mov	r0, r8
 80152fc:	47d0      	blx	sl
 80152fe:	3001      	adds	r0, #1
 8015300:	d09d      	beq.n	801523e <_printf_i+0x15a>
 8015302:	3501      	adds	r5, #1
 8015304:	68e3      	ldr	r3, [r4, #12]
 8015306:	9903      	ldr	r1, [sp, #12]
 8015308:	1a5b      	subs	r3, r3, r1
 801530a:	42ab      	cmp	r3, r5
 801530c:	dcf2      	bgt.n	80152f4 <_printf_i+0x210>
 801530e:	e7eb      	b.n	80152e8 <_printf_i+0x204>
 8015310:	2500      	movs	r5, #0
 8015312:	f104 0619 	add.w	r6, r4, #25
 8015316:	e7f5      	b.n	8015304 <_printf_i+0x220>
 8015318:	08018ede 	.word	0x08018ede
 801531c:	08018eef 	.word	0x08018eef

08015320 <__sflush_r>:
 8015320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015328:	0716      	lsls	r6, r2, #28
 801532a:	4605      	mov	r5, r0
 801532c:	460c      	mov	r4, r1
 801532e:	d454      	bmi.n	80153da <__sflush_r+0xba>
 8015330:	684b      	ldr	r3, [r1, #4]
 8015332:	2b00      	cmp	r3, #0
 8015334:	dc02      	bgt.n	801533c <__sflush_r+0x1c>
 8015336:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015338:	2b00      	cmp	r3, #0
 801533a:	dd48      	ble.n	80153ce <__sflush_r+0xae>
 801533c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801533e:	2e00      	cmp	r6, #0
 8015340:	d045      	beq.n	80153ce <__sflush_r+0xae>
 8015342:	2300      	movs	r3, #0
 8015344:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015348:	682f      	ldr	r7, [r5, #0]
 801534a:	6a21      	ldr	r1, [r4, #32]
 801534c:	602b      	str	r3, [r5, #0]
 801534e:	d030      	beq.n	80153b2 <__sflush_r+0x92>
 8015350:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015352:	89a3      	ldrh	r3, [r4, #12]
 8015354:	0759      	lsls	r1, r3, #29
 8015356:	d505      	bpl.n	8015364 <__sflush_r+0x44>
 8015358:	6863      	ldr	r3, [r4, #4]
 801535a:	1ad2      	subs	r2, r2, r3
 801535c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801535e:	b10b      	cbz	r3, 8015364 <__sflush_r+0x44>
 8015360:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015362:	1ad2      	subs	r2, r2, r3
 8015364:	2300      	movs	r3, #0
 8015366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015368:	6a21      	ldr	r1, [r4, #32]
 801536a:	4628      	mov	r0, r5
 801536c:	47b0      	blx	r6
 801536e:	1c43      	adds	r3, r0, #1
 8015370:	89a3      	ldrh	r3, [r4, #12]
 8015372:	d106      	bne.n	8015382 <__sflush_r+0x62>
 8015374:	6829      	ldr	r1, [r5, #0]
 8015376:	291d      	cmp	r1, #29
 8015378:	d82b      	bhi.n	80153d2 <__sflush_r+0xb2>
 801537a:	4a2a      	ldr	r2, [pc, #168]	@ (8015424 <__sflush_r+0x104>)
 801537c:	40ca      	lsrs	r2, r1
 801537e:	07d6      	lsls	r6, r2, #31
 8015380:	d527      	bpl.n	80153d2 <__sflush_r+0xb2>
 8015382:	2200      	movs	r2, #0
 8015384:	6062      	str	r2, [r4, #4]
 8015386:	04d9      	lsls	r1, r3, #19
 8015388:	6922      	ldr	r2, [r4, #16]
 801538a:	6022      	str	r2, [r4, #0]
 801538c:	d504      	bpl.n	8015398 <__sflush_r+0x78>
 801538e:	1c42      	adds	r2, r0, #1
 8015390:	d101      	bne.n	8015396 <__sflush_r+0x76>
 8015392:	682b      	ldr	r3, [r5, #0]
 8015394:	b903      	cbnz	r3, 8015398 <__sflush_r+0x78>
 8015396:	6560      	str	r0, [r4, #84]	@ 0x54
 8015398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801539a:	602f      	str	r7, [r5, #0]
 801539c:	b1b9      	cbz	r1, 80153ce <__sflush_r+0xae>
 801539e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80153a2:	4299      	cmp	r1, r3
 80153a4:	d002      	beq.n	80153ac <__sflush_r+0x8c>
 80153a6:	4628      	mov	r0, r5
 80153a8:	f7ff fbec 	bl	8014b84 <_free_r>
 80153ac:	2300      	movs	r3, #0
 80153ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80153b0:	e00d      	b.n	80153ce <__sflush_r+0xae>
 80153b2:	2301      	movs	r3, #1
 80153b4:	4628      	mov	r0, r5
 80153b6:	47b0      	blx	r6
 80153b8:	4602      	mov	r2, r0
 80153ba:	1c50      	adds	r0, r2, #1
 80153bc:	d1c9      	bne.n	8015352 <__sflush_r+0x32>
 80153be:	682b      	ldr	r3, [r5, #0]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d0c6      	beq.n	8015352 <__sflush_r+0x32>
 80153c4:	2b1d      	cmp	r3, #29
 80153c6:	d001      	beq.n	80153cc <__sflush_r+0xac>
 80153c8:	2b16      	cmp	r3, #22
 80153ca:	d11e      	bne.n	801540a <__sflush_r+0xea>
 80153cc:	602f      	str	r7, [r5, #0]
 80153ce:	2000      	movs	r0, #0
 80153d0:	e022      	b.n	8015418 <__sflush_r+0xf8>
 80153d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153d6:	b21b      	sxth	r3, r3
 80153d8:	e01b      	b.n	8015412 <__sflush_r+0xf2>
 80153da:	690f      	ldr	r7, [r1, #16]
 80153dc:	2f00      	cmp	r7, #0
 80153de:	d0f6      	beq.n	80153ce <__sflush_r+0xae>
 80153e0:	0793      	lsls	r3, r2, #30
 80153e2:	680e      	ldr	r6, [r1, #0]
 80153e4:	bf08      	it	eq
 80153e6:	694b      	ldreq	r3, [r1, #20]
 80153e8:	600f      	str	r7, [r1, #0]
 80153ea:	bf18      	it	ne
 80153ec:	2300      	movne	r3, #0
 80153ee:	eba6 0807 	sub.w	r8, r6, r7
 80153f2:	608b      	str	r3, [r1, #8]
 80153f4:	f1b8 0f00 	cmp.w	r8, #0
 80153f8:	dde9      	ble.n	80153ce <__sflush_r+0xae>
 80153fa:	6a21      	ldr	r1, [r4, #32]
 80153fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80153fe:	4643      	mov	r3, r8
 8015400:	463a      	mov	r2, r7
 8015402:	4628      	mov	r0, r5
 8015404:	47b0      	blx	r6
 8015406:	2800      	cmp	r0, #0
 8015408:	dc08      	bgt.n	801541c <__sflush_r+0xfc>
 801540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801540e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015412:	81a3      	strh	r3, [r4, #12]
 8015414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801541c:	4407      	add	r7, r0
 801541e:	eba8 0800 	sub.w	r8, r8, r0
 8015422:	e7e7      	b.n	80153f4 <__sflush_r+0xd4>
 8015424:	20400001 	.word	0x20400001

08015428 <_fflush_r>:
 8015428:	b538      	push	{r3, r4, r5, lr}
 801542a:	690b      	ldr	r3, [r1, #16]
 801542c:	4605      	mov	r5, r0
 801542e:	460c      	mov	r4, r1
 8015430:	b913      	cbnz	r3, 8015438 <_fflush_r+0x10>
 8015432:	2500      	movs	r5, #0
 8015434:	4628      	mov	r0, r5
 8015436:	bd38      	pop	{r3, r4, r5, pc}
 8015438:	b118      	cbz	r0, 8015442 <_fflush_r+0x1a>
 801543a:	6a03      	ldr	r3, [r0, #32]
 801543c:	b90b      	cbnz	r3, 8015442 <_fflush_r+0x1a>
 801543e:	f7ff f969 	bl	8014714 <__sinit>
 8015442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d0f3      	beq.n	8015432 <_fflush_r+0xa>
 801544a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801544c:	07d0      	lsls	r0, r2, #31
 801544e:	d404      	bmi.n	801545a <_fflush_r+0x32>
 8015450:	0599      	lsls	r1, r3, #22
 8015452:	d402      	bmi.n	801545a <_fflush_r+0x32>
 8015454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015456:	f7ff fb66 	bl	8014b26 <__retarget_lock_acquire_recursive>
 801545a:	4628      	mov	r0, r5
 801545c:	4621      	mov	r1, r4
 801545e:	f7ff ff5f 	bl	8015320 <__sflush_r>
 8015462:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015464:	07da      	lsls	r2, r3, #31
 8015466:	4605      	mov	r5, r0
 8015468:	d4e4      	bmi.n	8015434 <_fflush_r+0xc>
 801546a:	89a3      	ldrh	r3, [r4, #12]
 801546c:	059b      	lsls	r3, r3, #22
 801546e:	d4e1      	bmi.n	8015434 <_fflush_r+0xc>
 8015470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015472:	f7ff fb59 	bl	8014b28 <__retarget_lock_release_recursive>
 8015476:	e7dd      	b.n	8015434 <_fflush_r+0xc>

08015478 <fiprintf>:
 8015478:	b40e      	push	{r1, r2, r3}
 801547a:	b503      	push	{r0, r1, lr}
 801547c:	4601      	mov	r1, r0
 801547e:	ab03      	add	r3, sp, #12
 8015480:	4805      	ldr	r0, [pc, #20]	@ (8015498 <fiprintf+0x20>)
 8015482:	f853 2b04 	ldr.w	r2, [r3], #4
 8015486:	6800      	ldr	r0, [r0, #0]
 8015488:	9301      	str	r3, [sp, #4]
 801548a:	f7ff fca5 	bl	8014dd8 <_vfiprintf_r>
 801548e:	b002      	add	sp, #8
 8015490:	f85d eb04 	ldr.w	lr, [sp], #4
 8015494:	b003      	add	sp, #12
 8015496:	4770      	bx	lr
 8015498:	2000007c 	.word	0x2000007c

0801549c <__swhatbuf_r>:
 801549c:	b570      	push	{r4, r5, r6, lr}
 801549e:	460c      	mov	r4, r1
 80154a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154a4:	2900      	cmp	r1, #0
 80154a6:	b096      	sub	sp, #88	@ 0x58
 80154a8:	4615      	mov	r5, r2
 80154aa:	461e      	mov	r6, r3
 80154ac:	da0d      	bge.n	80154ca <__swhatbuf_r+0x2e>
 80154ae:	89a3      	ldrh	r3, [r4, #12]
 80154b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80154b4:	f04f 0100 	mov.w	r1, #0
 80154b8:	bf14      	ite	ne
 80154ba:	2340      	movne	r3, #64	@ 0x40
 80154bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80154c0:	2000      	movs	r0, #0
 80154c2:	6031      	str	r1, [r6, #0]
 80154c4:	602b      	str	r3, [r5, #0]
 80154c6:	b016      	add	sp, #88	@ 0x58
 80154c8:	bd70      	pop	{r4, r5, r6, pc}
 80154ca:	466a      	mov	r2, sp
 80154cc:	f000 f87c 	bl	80155c8 <_fstat_r>
 80154d0:	2800      	cmp	r0, #0
 80154d2:	dbec      	blt.n	80154ae <__swhatbuf_r+0x12>
 80154d4:	9901      	ldr	r1, [sp, #4]
 80154d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80154da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80154de:	4259      	negs	r1, r3
 80154e0:	4159      	adcs	r1, r3
 80154e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80154e6:	e7eb      	b.n	80154c0 <__swhatbuf_r+0x24>

080154e8 <__smakebuf_r>:
 80154e8:	898b      	ldrh	r3, [r1, #12]
 80154ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154ec:	079d      	lsls	r5, r3, #30
 80154ee:	4606      	mov	r6, r0
 80154f0:	460c      	mov	r4, r1
 80154f2:	d507      	bpl.n	8015504 <__smakebuf_r+0x1c>
 80154f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80154f8:	6023      	str	r3, [r4, #0]
 80154fa:	6123      	str	r3, [r4, #16]
 80154fc:	2301      	movs	r3, #1
 80154fe:	6163      	str	r3, [r4, #20]
 8015500:	b003      	add	sp, #12
 8015502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015504:	ab01      	add	r3, sp, #4
 8015506:	466a      	mov	r2, sp
 8015508:	f7ff ffc8 	bl	801549c <__swhatbuf_r>
 801550c:	9f00      	ldr	r7, [sp, #0]
 801550e:	4605      	mov	r5, r0
 8015510:	4639      	mov	r1, r7
 8015512:	4630      	mov	r0, r6
 8015514:	f7ff fbaa 	bl	8014c6c <_malloc_r>
 8015518:	b948      	cbnz	r0, 801552e <__smakebuf_r+0x46>
 801551a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801551e:	059a      	lsls	r2, r3, #22
 8015520:	d4ee      	bmi.n	8015500 <__smakebuf_r+0x18>
 8015522:	f023 0303 	bic.w	r3, r3, #3
 8015526:	f043 0302 	orr.w	r3, r3, #2
 801552a:	81a3      	strh	r3, [r4, #12]
 801552c:	e7e2      	b.n	80154f4 <__smakebuf_r+0xc>
 801552e:	89a3      	ldrh	r3, [r4, #12]
 8015530:	6020      	str	r0, [r4, #0]
 8015532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015536:	81a3      	strh	r3, [r4, #12]
 8015538:	9b01      	ldr	r3, [sp, #4]
 801553a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801553e:	b15b      	cbz	r3, 8015558 <__smakebuf_r+0x70>
 8015540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015544:	4630      	mov	r0, r6
 8015546:	f000 f851 	bl	80155ec <_isatty_r>
 801554a:	b128      	cbz	r0, 8015558 <__smakebuf_r+0x70>
 801554c:	89a3      	ldrh	r3, [r4, #12]
 801554e:	f023 0303 	bic.w	r3, r3, #3
 8015552:	f043 0301 	orr.w	r3, r3, #1
 8015556:	81a3      	strh	r3, [r4, #12]
 8015558:	89a3      	ldrh	r3, [r4, #12]
 801555a:	431d      	orrs	r5, r3
 801555c:	81a5      	strh	r5, [r4, #12]
 801555e:	e7cf      	b.n	8015500 <__smakebuf_r+0x18>

08015560 <_putc_r>:
 8015560:	b570      	push	{r4, r5, r6, lr}
 8015562:	460d      	mov	r5, r1
 8015564:	4614      	mov	r4, r2
 8015566:	4606      	mov	r6, r0
 8015568:	b118      	cbz	r0, 8015572 <_putc_r+0x12>
 801556a:	6a03      	ldr	r3, [r0, #32]
 801556c:	b90b      	cbnz	r3, 8015572 <_putc_r+0x12>
 801556e:	f7ff f8d1 	bl	8014714 <__sinit>
 8015572:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015574:	07d8      	lsls	r0, r3, #31
 8015576:	d405      	bmi.n	8015584 <_putc_r+0x24>
 8015578:	89a3      	ldrh	r3, [r4, #12]
 801557a:	0599      	lsls	r1, r3, #22
 801557c:	d402      	bmi.n	8015584 <_putc_r+0x24>
 801557e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015580:	f7ff fad1 	bl	8014b26 <__retarget_lock_acquire_recursive>
 8015584:	68a3      	ldr	r3, [r4, #8]
 8015586:	3b01      	subs	r3, #1
 8015588:	2b00      	cmp	r3, #0
 801558a:	60a3      	str	r3, [r4, #8]
 801558c:	da05      	bge.n	801559a <_putc_r+0x3a>
 801558e:	69a2      	ldr	r2, [r4, #24]
 8015590:	4293      	cmp	r3, r2
 8015592:	db12      	blt.n	80155ba <_putc_r+0x5a>
 8015594:	b2eb      	uxtb	r3, r5
 8015596:	2b0a      	cmp	r3, #10
 8015598:	d00f      	beq.n	80155ba <_putc_r+0x5a>
 801559a:	6823      	ldr	r3, [r4, #0]
 801559c:	1c5a      	adds	r2, r3, #1
 801559e:	6022      	str	r2, [r4, #0]
 80155a0:	701d      	strb	r5, [r3, #0]
 80155a2:	b2ed      	uxtb	r5, r5
 80155a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80155a6:	07da      	lsls	r2, r3, #31
 80155a8:	d405      	bmi.n	80155b6 <_putc_r+0x56>
 80155aa:	89a3      	ldrh	r3, [r4, #12]
 80155ac:	059b      	lsls	r3, r3, #22
 80155ae:	d402      	bmi.n	80155b6 <_putc_r+0x56>
 80155b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80155b2:	f7ff fab9 	bl	8014b28 <__retarget_lock_release_recursive>
 80155b6:	4628      	mov	r0, r5
 80155b8:	bd70      	pop	{r4, r5, r6, pc}
 80155ba:	4629      	mov	r1, r5
 80155bc:	4622      	mov	r2, r4
 80155be:	4630      	mov	r0, r6
 80155c0:	f7ff f999 	bl	80148f6 <__swbuf_r>
 80155c4:	4605      	mov	r5, r0
 80155c6:	e7ed      	b.n	80155a4 <_putc_r+0x44>

080155c8 <_fstat_r>:
 80155c8:	b538      	push	{r3, r4, r5, lr}
 80155ca:	4d07      	ldr	r5, [pc, #28]	@ (80155e8 <_fstat_r+0x20>)
 80155cc:	2300      	movs	r3, #0
 80155ce:	4604      	mov	r4, r0
 80155d0:	4608      	mov	r0, r1
 80155d2:	4611      	mov	r1, r2
 80155d4:	602b      	str	r3, [r5, #0]
 80155d6:	f7eb fccd 	bl	8000f74 <_fstat>
 80155da:	1c43      	adds	r3, r0, #1
 80155dc:	d102      	bne.n	80155e4 <_fstat_r+0x1c>
 80155de:	682b      	ldr	r3, [r5, #0]
 80155e0:	b103      	cbz	r3, 80155e4 <_fstat_r+0x1c>
 80155e2:	6023      	str	r3, [r4, #0]
 80155e4:	bd38      	pop	{r3, r4, r5, pc}
 80155e6:	bf00      	nop
 80155e8:	200084d0 	.word	0x200084d0

080155ec <_isatty_r>:
 80155ec:	b538      	push	{r3, r4, r5, lr}
 80155ee:	4d06      	ldr	r5, [pc, #24]	@ (8015608 <_isatty_r+0x1c>)
 80155f0:	2300      	movs	r3, #0
 80155f2:	4604      	mov	r4, r0
 80155f4:	4608      	mov	r0, r1
 80155f6:	602b      	str	r3, [r5, #0]
 80155f8:	f7eb fccc 	bl	8000f94 <_isatty>
 80155fc:	1c43      	adds	r3, r0, #1
 80155fe:	d102      	bne.n	8015606 <_isatty_r+0x1a>
 8015600:	682b      	ldr	r3, [r5, #0]
 8015602:	b103      	cbz	r3, 8015606 <_isatty_r+0x1a>
 8015604:	6023      	str	r3, [r4, #0]
 8015606:	bd38      	pop	{r3, r4, r5, pc}
 8015608:	200084d0 	.word	0x200084d0

0801560c <_sbrk_r>:
 801560c:	b538      	push	{r3, r4, r5, lr}
 801560e:	4d06      	ldr	r5, [pc, #24]	@ (8015628 <_sbrk_r+0x1c>)
 8015610:	2300      	movs	r3, #0
 8015612:	4604      	mov	r4, r0
 8015614:	4608      	mov	r0, r1
 8015616:	602b      	str	r3, [r5, #0]
 8015618:	f7eb fcd4 	bl	8000fc4 <_sbrk>
 801561c:	1c43      	adds	r3, r0, #1
 801561e:	d102      	bne.n	8015626 <_sbrk_r+0x1a>
 8015620:	682b      	ldr	r3, [r5, #0]
 8015622:	b103      	cbz	r3, 8015626 <_sbrk_r+0x1a>
 8015624:	6023      	str	r3, [r4, #0]
 8015626:	bd38      	pop	{r3, r4, r5, pc}
 8015628:	200084d0 	.word	0x200084d0

0801562c <abort>:
 801562c:	b508      	push	{r3, lr}
 801562e:	2006      	movs	r0, #6
 8015630:	f000 f82c 	bl	801568c <raise>
 8015634:	2001      	movs	r0, #1
 8015636:	f7eb fc69 	bl	8000f0c <_exit>

0801563a <_raise_r>:
 801563a:	291f      	cmp	r1, #31
 801563c:	b538      	push	{r3, r4, r5, lr}
 801563e:	4605      	mov	r5, r0
 8015640:	460c      	mov	r4, r1
 8015642:	d904      	bls.n	801564e <_raise_r+0x14>
 8015644:	2316      	movs	r3, #22
 8015646:	6003      	str	r3, [r0, #0]
 8015648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801564c:	bd38      	pop	{r3, r4, r5, pc}
 801564e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015650:	b112      	cbz	r2, 8015658 <_raise_r+0x1e>
 8015652:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015656:	b94b      	cbnz	r3, 801566c <_raise_r+0x32>
 8015658:	4628      	mov	r0, r5
 801565a:	f000 f831 	bl	80156c0 <_getpid_r>
 801565e:	4622      	mov	r2, r4
 8015660:	4601      	mov	r1, r0
 8015662:	4628      	mov	r0, r5
 8015664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015668:	f000 b818 	b.w	801569c <_kill_r>
 801566c:	2b01      	cmp	r3, #1
 801566e:	d00a      	beq.n	8015686 <_raise_r+0x4c>
 8015670:	1c59      	adds	r1, r3, #1
 8015672:	d103      	bne.n	801567c <_raise_r+0x42>
 8015674:	2316      	movs	r3, #22
 8015676:	6003      	str	r3, [r0, #0]
 8015678:	2001      	movs	r0, #1
 801567a:	e7e7      	b.n	801564c <_raise_r+0x12>
 801567c:	2100      	movs	r1, #0
 801567e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015682:	4620      	mov	r0, r4
 8015684:	4798      	blx	r3
 8015686:	2000      	movs	r0, #0
 8015688:	e7e0      	b.n	801564c <_raise_r+0x12>
	...

0801568c <raise>:
 801568c:	4b02      	ldr	r3, [pc, #8]	@ (8015698 <raise+0xc>)
 801568e:	4601      	mov	r1, r0
 8015690:	6818      	ldr	r0, [r3, #0]
 8015692:	f7ff bfd2 	b.w	801563a <_raise_r>
 8015696:	bf00      	nop
 8015698:	2000007c 	.word	0x2000007c

0801569c <_kill_r>:
 801569c:	b538      	push	{r3, r4, r5, lr}
 801569e:	4d07      	ldr	r5, [pc, #28]	@ (80156bc <_kill_r+0x20>)
 80156a0:	2300      	movs	r3, #0
 80156a2:	4604      	mov	r4, r0
 80156a4:	4608      	mov	r0, r1
 80156a6:	4611      	mov	r1, r2
 80156a8:	602b      	str	r3, [r5, #0]
 80156aa:	f7eb fc1d 	bl	8000ee8 <_kill>
 80156ae:	1c43      	adds	r3, r0, #1
 80156b0:	d102      	bne.n	80156b8 <_kill_r+0x1c>
 80156b2:	682b      	ldr	r3, [r5, #0]
 80156b4:	b103      	cbz	r3, 80156b8 <_kill_r+0x1c>
 80156b6:	6023      	str	r3, [r4, #0]
 80156b8:	bd38      	pop	{r3, r4, r5, pc}
 80156ba:	bf00      	nop
 80156bc:	200084d0 	.word	0x200084d0

080156c0 <_getpid_r>:
 80156c0:	f7eb bc0a 	b.w	8000ed8 <_getpid>

080156c4 <_init>:
 80156c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156c6:	bf00      	nop
 80156c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ca:	bc08      	pop	{r3}
 80156cc:	469e      	mov	lr, r3
 80156ce:	4770      	bx	lr

080156d0 <_fini>:
 80156d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156d2:	bf00      	nop
 80156d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156d6:	bc08      	pop	{r3}
 80156d8:	469e      	mov	lr, r3
 80156da:	4770      	bx	lr
