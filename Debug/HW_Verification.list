
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037d8  08016e88  08016e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a660  0801a660  0001c20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a660  0801a660  0001b660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a668  0801a668  0001c20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a668  0801a668  0001b668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a66c  0801a66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  0801a670  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  0801a73c  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  0801a7dc  0001c16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008520  2000020c  0801a87c  0001c20c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000872c  0801a87c  0001c72c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001c20c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028aea  00000000  00000000  0001c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000725a  00000000  00000000  00044d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d68  00000000  00000000  0004bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001721  00000000  00000000  0004dce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036834  00000000  00000000  0004f409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003389c  00000000  00000000  00085c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00105f0c  00000000  00000000  000b94d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001bf3e5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007d84  00000000  00000000  001bf428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001c71ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016e70 	.word	0x08016e70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08016e70 	.word	0x08016e70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <MX_CRC_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000606:	f001 fc5f 	bl	8001ec8 <HAL_CRC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 fbae 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000228 	.word	0x20000228
 800061c:	40023000 	.word	0x40023000

08000620 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <HAL_CRC_MspInit+0x38>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023000 	.word	0x40023000
 800065c:	40023800 	.word	0x40023800

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <MX_DMA_Init+0xe0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a35      	ldr	r2, [pc, #212]	@ (8000740 <MX_DMA_Init+0xe0>)
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <MX_DMA_Init+0xe0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <MX_DMA_Init+0xe0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a2f      	ldr	r2, [pc, #188]	@ (8000740 <MX_DMA_Init+0xe0>)
 8000684:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <MX_DMA_Init+0xe0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	200b      	movs	r0, #11
 800069c:	f001 fbdd 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006a0:	200b      	movs	r0, #11
 80006a2:	f001 fbf6 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	200d      	movs	r0, #13
 80006ac:	f001 fbd5 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006b0:	200d      	movs	r0, #13
 80006b2:	f001 fbee 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200e      	movs	r0, #14
 80006bc:	f001 fbcd 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006c0:	200e      	movs	r0, #14
 80006c2:	f001 fbe6 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2010      	movs	r0, #16
 80006cc:	f001 fbc5 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006d0:	2010      	movs	r0, #16
 80006d2:	f001 fbde 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2011      	movs	r0, #17
 80006dc:	f001 fbbd 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006e0:	2011      	movs	r0, #17
 80006e2:	f001 fbd6 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	202f      	movs	r0, #47	@ 0x2f
 80006ec:	f001 fbb5 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006f0:	202f      	movs	r0, #47	@ 0x2f
 80006f2:	f001 fbce 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2038      	movs	r0, #56	@ 0x38
 80006fc:	f001 fbad 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000700:	2038      	movs	r0, #56	@ 0x38
 8000702:	f001 fbc6 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2039      	movs	r0, #57	@ 0x39
 800070c:	f001 fba5 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000710:	2039      	movs	r0, #57	@ 0x39
 8000712:	f001 fbbe 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	203a      	movs	r0, #58	@ 0x3a
 800071c:	f001 fb9d 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000720:	203a      	movs	r0, #58	@ 0x3a
 8000722:	f001 fbb6 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	203b      	movs	r0, #59	@ 0x3b
 800072c:	f001 fb95 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000730:	203b      	movs	r0, #59	@ 0x3b
 8000732:	f001 fbae 	bl	8001e92 <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a26      	ldr	r2, [pc, #152]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a20      	ldr	r2, [pc, #128]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a1a      	ldr	r2, [pc, #104]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

}
 80007da:	bf00      	nop
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_I2C1_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000868 <MX_I2C1_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000828:	f003 fd76 	bl	8004318 <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 fa9d 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4809      	ldr	r0, [pc, #36]	@ (8000860 <MX_I2C1_Init+0x74>)
 800083a:	f005 ff19 	bl	8006670 <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 fa94 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_I2C1_Init+0x74>)
 800084c:	f005 ff5b 	bl	8006706 <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fa8b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000024c 	.word	0x2000024c
 8000864:	40005400 	.word	0x40005400
 8000868:	20404768 	.word	0x20404768

0800086c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <MX_I2C2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <MX_I2C2_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800087e:	2214      	movs	r2, #20
 8000880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008a8:	f003 fd36 	bl	8004318 <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 fa5d 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008ba:	f005 fed9 	bl	8006670 <HAL_I2CEx_ConfigAnalogFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 fa54 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008cc:	f005 ff1b 	bl	8006706 <HAL_I2CEx_ConfigDigitalFilter>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fa4b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200002a0 	.word	0x200002a0
 80008e4:	40005800 	.word	0x40005800
 80008e8:	20404768 	.word	0x20404768

080008ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ac      	sub	sp, #176	@ 0xb0
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	2284      	movs	r2, #132	@ 0x84
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f015 fc6d 	bl	80161ec <memset>
  if(i2cHandle->Instance==I2C1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a57      	ldr	r2, [pc, #348]	@ (8000a74 <HAL_I2C_MspInit+0x188>)
 8000918:	4293      	cmp	r3, r2
 800091a:	f040 80b9 	bne.w	8000a90 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800091e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000922:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000924:	2300      	movs	r3, #0
 8000926:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4618      	mov	r0, r3
 800092e:	f006 fc11 	bl	8007154 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000938:	f000 fa1a 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	4a4d      	ldr	r2, [pc, #308]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	6313      	str	r3, [r2, #48]	@ 0x30
 8000948:	4b4b      	ldr	r3, [pc, #300]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000954:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000962:	2301      	movs	r3, #1
 8000964:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096e:	2304      	movs	r3, #4
 8000970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000978:	4619      	mov	r1, r3
 800097a:	4840      	ldr	r0, [pc, #256]	@ (8000a7c <HAL_I2C_MspInit+0x190>)
 800097c:	f003 fb20 	bl	8003fc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000980:	4b3d      	ldr	r3, [pc, #244]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	4a3c      	ldr	r2, [pc, #240]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 8000986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
 800098c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 800099a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a84 <HAL_I2C_MspInit+0x198>)
 800099c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800099e:	4b38      	ldr	r3, [pc, #224]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009a4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a6:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ac:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009b2:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ba:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80009d8:	4829      	ldr	r0, [pc, #164]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009da:	f001 fc7f 	bl	80022dc <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 80009e4:	f000 f9c4 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009ee:	4a24      	ldr	r2, [pc, #144]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80009f4:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 80009f6:	4a25      	ldr	r2, [pc, #148]	@ (8000a8c <HAL_I2C_MspInit+0x1a0>)
 80009f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80009fa:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 80009fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a00:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a04:	2240      	movs	r2, #64	@ 0x40
 8000a06:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a14:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a34:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a36:	f001 fc51 	bl	80022dc <HAL_DMA_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000a40:	f000 f996 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a48:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	201f      	movs	r0, #31
 8000a56:	f001 fa00 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a5a:	201f      	movs	r0, #31
 8000a5c:	f001 fa19 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2020      	movs	r0, #32
 8000a66:	f001 f9f8 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a6a:	2020      	movs	r0, #32
 8000a6c:	f001 fa11 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a70:	e0be      	b.n	8000bf0 <HAL_I2C_MspInit+0x304>
 8000a72:	bf00      	nop
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	200002f4 	.word	0x200002f4
 8000a84:	40026088 	.word	0x40026088
 8000a88:	20000354 	.word	0x20000354
 8000a8c:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a58      	ldr	r2, [pc, #352]	@ (8000bf8 <HAL_I2C_MspInit+0x30c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 80aa 	bne.w	8000bf0 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f006 fb51 	bl	8007154 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000ab8:	f000 f95a 	bl	8000d70 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b4f      	ldr	r3, [pc, #316]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	4a4e      	ldr	r2, [pc, #312]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ad4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ad8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aee:	2304      	movs	r3, #4
 8000af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af8:	4619      	mov	r1, r3
 8000afa:	4841      	ldr	r0, [pc, #260]	@ (8000c00 <HAL_I2C_MspInit+0x314>)
 8000afc:	f003 fa60 	bl	8003fc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b00:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	4a3d      	ldr	r2, [pc, #244]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000b06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000b18:	4b3a      	ldr	r3, [pc, #232]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c08 <HAL_I2C_MspInit+0x31c>)
 8000b1c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000b1e:	4b39      	ldr	r3, [pc, #228]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b20:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b24:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b26:	4b37      	ldr	r3, [pc, #220]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2c:	4b35      	ldr	r3, [pc, #212]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b32:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b40:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000b58:	482a      	ldr	r0, [pc, #168]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b5a:	f001 fbbf 	bl	80022dc <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000b64:	f000 f904 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a26      	ldr	r2, [pc, #152]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b6e:	4a25      	ldr	r2, [pc, #148]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b76:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <HAL_I2C_MspInit+0x324>)
 8000b78:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b7c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b80:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b84:	2240      	movs	r2, #64	@ 0x40
 8000b86:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b94:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000bb4:	4815      	ldr	r0, [pc, #84]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000bb6:	f001 fb91 	bl	80022dc <HAL_DMA_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8000bc0:	f000 f8d6 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a11      	ldr	r2, [pc, #68]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000bc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2021      	movs	r0, #33	@ 0x21
 8000bd6:	f001 f940 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000bda:	2021      	movs	r0, #33	@ 0x21
 8000bdc:	f001 f959 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2022      	movs	r0, #34	@ 0x22
 8000be6:	f001 f938 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000bea:	2022      	movs	r0, #34	@ 0x22
 8000bec:	f001 f951 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	37b0      	adds	r7, #176	@ 0xb0
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40005800 	.word	0x40005800
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400
 8000c04:	200003b4 	.word	0x200003b4
 8000c08:	40026058 	.word	0x40026058
 8000c0c:	20000414 	.word	0x20000414
 8000c10:	400260b8 	.word	0x400260b8

08000c14 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <_write+0x3c>)
 8000c22:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <_write+0x40>)
 8000c30:	f007 ff96 	bl	8008b60 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8000c34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c38:	2201      	movs	r2, #1
 8000c3a:	6979      	ldr	r1, [r7, #20]
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <_write+0x40>)
 8000c3e:	f007 ff8f 	bl	8008b60 <HAL_UART_Transmit>
	return len + 1;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3301      	adds	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08016e88 	.word	0x08016e88
 8000c54:	200007d0 	.word	0x200007d0

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f000 ffa1 	bl	8001ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f81a 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f7ff fd6e 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c68:	f7ff fcfa 	bl	8000660 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c6c:	f000 fcb0 	bl	80015d0 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000c70:	f009 faca 	bl	800a208 <MX_LWIP_Init>
  MX_CRC_Init();
 8000c74:	f7ff fcb2 	bl	80005dc <MX_CRC_Init>
  MX_UART4_Init();
 8000c78:	f000 fc4a 	bl	8001510 <MX_UART4_Init>
  MX_UART5_Init();
 8000c7c:	f000 fc78 	bl	8001570 <MX_UART5_Init>
  MX_I2C1_Init();
 8000c80:	f7ff fdb4 	bl	80007ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c84:	f7ff fdf2 	bl	800086c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000c88:	f000 f878 	bl	8000d7c <MX_SPI1_Init>
  MX_SPI4_Init();
 8000c8c:	f000 f8b4 	bl	8000df8 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 8000c90:	f014 fbc8 	bl	8015424 <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <main+0x3c>

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	@ 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2230      	movs	r2, #48	@ 0x30
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f015 faa0 	bl	80161ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a29      	ldr	r2, [pc, #164]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc8:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	4b25      	ldr	r3, [pc, #148]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a24      	ldr	r2, [pc, #144]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000cda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d00:	2308      	movs	r3, #8
 8000d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d04:	23d8      	movs	r3, #216	@ 0xd8
 8000d06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	4618      	mov	r0, r3
 8000d16:	f005 fd93 	bl	8006840 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d20:	f000 f826 	bl	8000d70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d24:	f005 fd3c 	bl	80067a0 <HAL_PWREx_EnableOverDrive>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d2e:	f000 f81f 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2302      	movs	r3, #2
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2107      	movs	r1, #7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 f819 	bl	8006d88 <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d5c:	f000 f808 	bl	8000d70 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3750      	adds	r7, #80	@ 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40007000 	.word	0x40007000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <MX_SPI1_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d96:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000daa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000db2:	2218      	movs	r2, #24
 8000db4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dca:	2207      	movs	r2, #7
 8000dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000ddc:	f006 fdaa 	bl	8007934 <HAL_SPI_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f7ff ffc3 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000474 	.word	0x20000474
 8000df4:	40013000 	.word	0x40013000

08000df8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000dfe:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e10:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e14:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_SPI4_Init+0x68>)
 8000e4e:	f006 fd71 	bl	8007934 <HAL_SPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000e58:	f7ff ff8a 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200004d8 	.word	0x200004d8
 8000e64:	40013400 	.word	0x40013400

08000e68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	@ 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4aa1      	ldr	r2, [pc, #644]	@ (800110c <HAL_SPI_MspInit+0x2a4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	f040 80a9 	bne.w	8000fde <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8c:	4ba0      	ldr	r3, [pc, #640]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e90:	4a9f      	ldr	r2, [pc, #636]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000e92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e98:	4b9d      	ldr	r3, [pc, #628]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b9a      	ldr	r3, [pc, #616]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	4a99      	ldr	r2, [pc, #612]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb0:	4b97      	ldr	r3, [pc, #604]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b94      	ldr	r3, [pc, #592]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	4a93      	ldr	r2, [pc, #588]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec8:	4b91      	ldr	r3, [pc, #580]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ed4:	2370      	movs	r3, #112	@ 0x70
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4889      	ldr	r0, [pc, #548]	@ (8001114 <HAL_SPI_MspInit+0x2ac>)
 8000ef0:	f003 f866 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f04:	2305      	movs	r3, #5
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4882      	ldr	r0, [pc, #520]	@ (8001118 <HAL_SPI_MspInit+0x2b0>)
 8000f10:	f003 f856 	bl	8003fc0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000f14:	4b81      	ldr	r3, [pc, #516]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f16:	4a82      	ldr	r2, [pc, #520]	@ (8001120 <HAL_SPI_MspInit+0x2b8>)
 8000f18:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f1a:	4b80      	ldr	r3, [pc, #512]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f1c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f20:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f22:	4b7e      	ldr	r3, [pc, #504]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b7c      	ldr	r3, [pc, #496]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f34:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f36:	4b79      	ldr	r3, [pc, #484]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3c:	4b77      	ldr	r3, [pc, #476]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f42:	4b76      	ldr	r3, [pc, #472]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f48:	4b74      	ldr	r3, [pc, #464]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4e:	4b73      	ldr	r3, [pc, #460]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f54:	4871      	ldr	r0, [pc, #452]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f56:	f001 f9c1 	bl	80022dc <HAL_DMA_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8000f60:	f7ff ff06 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a6d      	ldr	r2, [pc, #436]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f68:	659a      	str	r2, [r3, #88]	@ 0x58
 8000f6a:	4a6c      	ldr	r2, [pc, #432]	@ (800111c <HAL_SPI_MspInit+0x2b4>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f70:	4b6c      	ldr	r3, [pc, #432]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000f72:	4a6d      	ldr	r2, [pc, #436]	@ (8001128 <HAL_SPI_MspInit+0x2c0>)
 8000f74:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f76:	4b6b      	ldr	r3, [pc, #428]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000f78:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f7c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7e:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000f80:	2240      	movs	r2, #64	@ 0x40
 8000f82:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f84:	4b67      	ldr	r3, [pc, #412]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8a:	4b66      	ldr	r3, [pc, #408]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000f8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f90:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f92:	4b64      	ldr	r3, [pc, #400]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f98:	4b62      	ldr	r3, [pc, #392]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f9e:	4b61      	ldr	r3, [pc, #388]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa4:	4b5f      	ldr	r3, [pc, #380]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000faa:	4b5e      	ldr	r3, [pc, #376]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fb0:	485c      	ldr	r0, [pc, #368]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000fb2:	f001 f993 	bl	80022dc <HAL_DMA_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8000fbc:	f7ff fed8 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a58      	ldr	r2, [pc, #352]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000fc4:	655a      	str	r2, [r3, #84]	@ 0x54
 8000fc6:	4a57      	ldr	r2, [pc, #348]	@ (8001124 <HAL_SPI_MspInit+0x2bc>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2023      	movs	r0, #35	@ 0x23
 8000fd2:	f000 ff42 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fd6:	2023      	movs	r0, #35	@ 0x23
 8000fd8:	f000 ff5b 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000fdc:	e091      	b.n	8001102 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_SPI_MspInit+0x2c4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	f040 808c 	bne.w	8001102 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000fea:	4b49      	ldr	r3, [pc, #292]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	4a48      	ldr	r2, [pc, #288]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000ff0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff6:	4b46      	ldr	r3, [pc, #280]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001002:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a42      	ldr	r2, [pc, #264]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b40      	ldr	r3, [pc, #256]	@ (8001110 <HAL_SPI_MspInit+0x2a8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800101a:	2374      	movs	r3, #116	@ 0x74
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800102a:	2305      	movs	r3, #5
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	483e      	ldr	r0, [pc, #248]	@ (8001130 <HAL_SPI_MspInit+0x2c8>)
 8001036:	f002 ffc3 	bl	8003fc0 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800103a:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 800103c:	4a3e      	ldr	r2, [pc, #248]	@ (8001138 <HAL_SPI_MspInit+0x2d0>)
 800103e:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001040:	4b3c      	ldr	r3, [pc, #240]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 8001042:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001046:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001048:	4b3a      	ldr	r3, [pc, #232]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b39      	ldr	r3, [pc, #228]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b37      	ldr	r3, [pc, #220]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 8001056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800105a:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105c:	4b35      	ldr	r3, [pc, #212]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001062:	4b34      	ldr	r3, [pc, #208]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001068:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800106e:	4b31      	ldr	r3, [pc, #196]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001074:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800107a:	482e      	ldr	r0, [pc, #184]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 800107c:	f001 f92e 	bl	80022dc <HAL_DMA_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001086:	f7ff fe73 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a29      	ldr	r2, [pc, #164]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 800108e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001090:	4a28      	ldr	r2, [pc, #160]	@ (8001134 <HAL_SPI_MspInit+0x2cc>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001096:	4b29      	ldr	r3, [pc, #164]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 8001098:	4a29      	ldr	r2, [pc, #164]	@ (8001140 <HAL_SPI_MspInit+0x2d8>)
 800109a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 800109e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010a6:	2240      	movs	r2, #64	@ 0x40
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80010d6:	4819      	ldr	r0, [pc, #100]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010d8:	f001 f900 	bl	80022dc <HAL_DMA_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80010e2:	f7ff fe45 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80010ec:	4a13      	ldr	r2, [pc, #76]	@ (800113c <HAL_SPI_MspInit+0x2d4>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2054      	movs	r0, #84	@ 0x54
 80010f8:	f000 feaf 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80010fc:	2054      	movs	r0, #84	@ 0x54
 80010fe:	f000 fec8 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	@ 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40013000 	.word	0x40013000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400
 800111c:	2000053c 	.word	0x2000053c
 8001120:	40026440 	.word	0x40026440
 8001124:	2000059c 	.word	0x2000059c
 8001128:	40026458 	.word	0x40026458
 800112c:	40013400 	.word	0x40013400
 8001130:	40021000 	.word	0x40021000
 8001134:	200005fc 	.word	0x200005fc
 8001138:	40026410 	.word	0x40026410
 800113c:	2000065c 	.word	0x2000065c
 8001140:	40026428 	.word	0x40026428

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_MspInit+0x44>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	@ 0x40
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_MspInit+0x44>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_MspInit+0x44>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x44>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116c:	6453      	str	r3, [r2, #68]	@ 0x44
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x44>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <NMI_Handler+0x4>

08001194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <MemManage_Handler+0x4>

080011a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e2:	f000 fd1b 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <DMA1_Stream0_IRQHandler+0x10>)
 80011f2:	f001 fa13 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200008b8 	.word	0x200008b8

08001200 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <DMA1_Stream2_IRQHandler+0x10>)
 8001206:	f001 fa09 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000858 	.word	0x20000858

08001214 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <DMA1_Stream3_IRQHandler+0x10>)
 800121a:	f001 f9ff 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200003b4 	.word	0x200003b4

08001228 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <DMA1_Stream5_IRQHandler+0x10>)
 800122e:	f001 f9f5 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002f4 	.word	0x200002f4

0800123c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001240:	4802      	ldr	r0, [pc, #8]	@ (800124c <DMA1_Stream6_IRQHandler+0x10>)
 8001242:	f001 f9eb 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000354 	.word	0x20000354

08001250 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001254:	4802      	ldr	r0, [pc, #8]	@ (8001260 <I2C1_EV_IRQHandler+0x10>)
 8001256:	f003 fca1 	bl	8004b9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000024c 	.word	0x2000024c

08001264 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <I2C1_ER_IRQHandler+0x10>)
 800126a:	f003 fcb1 	bl	8004bd0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000024c 	.word	0x2000024c

08001278 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <I2C2_EV_IRQHandler+0x10>)
 800127e:	f003 fc8d 	bl	8004b9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200002a0 	.word	0x200002a0

0800128c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <I2C2_ER_IRQHandler+0x10>)
 8001292:	f003 fc9d 	bl	8004bd0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002a0 	.word	0x200002a0

080012a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <SPI1_IRQHandler+0x10>)
 80012a6:	f006 ff85 	bl	80081b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000474 	.word	0x20000474

080012b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <USART3_IRQHandler+0x10>)
 80012ba:	f007 fd7d 	bl	8008db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200007d0 	.word	0x200007d0

080012c8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA1_Stream7_IRQHandler+0x10>)
 80012ce:	f001 f9a5 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000414 	.word	0x20000414

080012dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <UART4_IRQHandler+0x10>)
 80012e2:	f007 fd69 	bl	8008db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200006c0 	.word	0x200006c0

080012f0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <UART5_IRQHandler+0x10>)
 80012f6:	f007 fd5f 	bl	8008db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000748 	.word	0x20000748

08001304 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <DMA2_Stream0_IRQHandler+0x10>)
 800130a:	f001 f987 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200005fc 	.word	0x200005fc

08001318 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <DMA2_Stream1_IRQHandler+0x10>)
 800131e:	f001 f97d 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000065c 	.word	0x2000065c

0800132c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <DMA2_Stream2_IRQHandler+0x10>)
 8001332:	f001 f973 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000053c 	.word	0x2000053c

08001340 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <DMA2_Stream3_IRQHandler+0x10>)
 8001346:	f001 f969 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000059c 	.word	0x2000059c

08001354 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <ETH_IRQHandler+0x10>)
 800135a:	f001 ff45 	bl	80031e8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200052f8 	.word	0x200052f8

08001368 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <ETH_WKUP_IRQHandler+0x10>)
 800136e:	f001 ff3b 	bl	80031e8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200052f8 	.word	0x200052f8

0800137c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <SPI4_IRQHandler+0x10>)
 8001382:	f006 ff17 	bl	80081b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200004d8 	.word	0x200004d8

08001390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return 1;
 8001394:	2301      	movs	r3, #1
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_kill>:

int _kill(int pid, int sig)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <_kill+0x20>)
 80013ac:	2216      	movs	r2, #22
 80013ae:	601a      	str	r2, [r3, #0]
  return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2000871c 	.word	0x2000871c

080013c4 <_exit>:

void _exit (int status)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ffe5 	bl	80013a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013d6:	bf00      	nop
 80013d8:	e7fd      	b.n	80013d6 <_exit+0x12>

080013da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e00a      	b.n	8001402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ec:	f3af 8000 	nop.w
 80013f0:	4601      	mov	r1, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf0      	blt.n	80013ec <_read+0x12>
  }

  return len;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800143c:	605a      	str	r2, [r3, #4]
  return 0;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_isatty>:

int _isatty(int file)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	@ (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	@ (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d205      	bcs.n	80014b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <_sbrk+0x6c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014b6:	e009      	b.n	80014cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20050000 	.word	0x20050000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	200006bc 	.word	0x200006bc
 80014e4:	20008730 	.word	0x20008730
 80014e8:	2000871c 	.word	0x2000871c

080014ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_UART4_Init+0x58>)
 8001516:	4a15      	ldr	r2, [pc, #84]	@ (800156c <MX_UART4_Init+0x5c>)
 8001518:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <MX_UART4_Init+0x58>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_UART4_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <MX_UART4_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_UART4_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_UART4_Init+0x58>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_UART4_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_UART4_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_UART4_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_UART4_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_UART4_Init+0x58>)
 8001554:	f007 fab6 	bl	8008ac4 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800155e:	f7ff fc07 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200006c0 	.word	0x200006c0
 800156c:	40004c00 	.word	0x40004c00

08001570 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MX_UART5_Init+0x58>)
 8001576:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <MX_UART5_Init+0x5c>)
 8001578:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <MX_UART5_Init+0x58>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_UART5_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_UART5_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_UART5_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_UART5_Init+0x58>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <MX_UART5_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_UART5_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <MX_UART5_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_UART5_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_UART5_Init+0x58>)
 80015b4:	f007 fa86 	bl	8008ac4 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80015be:	f7ff fbd7 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000748 	.word	0x20000748
 80015cc:	40005000 	.word	0x40005000

080015d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 80015d6:	4a15      	ldr	r2, [pc, #84]	@ (800162c <MX_USART3_UART_Init+0x5c>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART3_UART_Init+0x58>)
 8001614:	f007 fa56 	bl	8008ac4 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800161e:	f7ff fba7 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200007d0 	.word	0x200007d0
 800162c:	40004800 	.word	0x40004800

08001630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0b0      	sub	sp, #192	@ 0xc0
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001648:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164c:	2284      	movs	r2, #132	@ 0x84
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f014 fdcb 	bl	80161ec <memset>
  if(uartHandle->Instance==UART4)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4ab0      	ldr	r2, [pc, #704]	@ (800191c <HAL_UART_MspInit+0x2ec>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d173      	bne.n	8001748 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001666:	2300      	movs	r3, #0
 8001668:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800166e:	4618      	mov	r0, r3
 8001670:	f005 fd70 	bl	8007154 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800167a:	f7ff fb79 	bl	8000d70 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800167e:	4ba8      	ldr	r3, [pc, #672]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	4aa7      	ldr	r2, [pc, #668]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 8001684:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001688:	6413      	str	r3, [r2, #64]	@ 0x40
 800168a:	4ba5      	ldr	r3, [pc, #660]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4ba2      	ldr	r3, [pc, #648]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4aa1      	ldr	r2, [pc, #644]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b9f      	ldr	r3, [pc, #636]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	623b      	str	r3, [r7, #32]
 80016ac:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016c8:	2308      	movs	r3, #8
 80016ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016d2:	4619      	mov	r1, r3
 80016d4:	4893      	ldr	r0, [pc, #588]	@ (8001924 <HAL_UART_MspInit+0x2f4>)
 80016d6:	f002 fc73 	bl	8003fc0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80016da:	4b93      	ldr	r3, [pc, #588]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 80016dc:	4a93      	ldr	r2, [pc, #588]	@ (800192c <HAL_UART_MspInit+0x2fc>)
 80016de:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80016e0:	4b91      	ldr	r3, [pc, #580]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 80016e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016e6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ee:	4b8e      	ldr	r3, [pc, #568]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 80016f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016fa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001708:	4b87      	ldr	r3, [pc, #540]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800170e:	4b86      	ldr	r3, [pc, #536]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001714:	4b84      	ldr	r3, [pc, #528]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800171a:	4883      	ldr	r0, [pc, #524]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 800171c:	f000 fdde 	bl	80022dc <HAL_DMA_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001726:	f7ff fb23 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a7e      	ldr	r2, [pc, #504]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 800172e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001730:	4a7d      	ldr	r2, [pc, #500]	@ (8001928 <HAL_UART_MspInit+0x2f8>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2034      	movs	r0, #52	@ 0x34
 800173c:	f000 fb8d 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001740:	2034      	movs	r0, #52	@ 0x34
 8001742:	f000 fba6 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001746:	e0e4      	b.n	8001912 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a78      	ldr	r2, [pc, #480]	@ (8001930 <HAL_UART_MspInit+0x300>)
 800174e:	4293      	cmp	r3, r2
 8001750:	f040 8095 	bne.w	800187e <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800175a:	2300      	movs	r3, #0
 800175c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001762:	4618      	mov	r0, r3
 8001764:	f005 fcf6 	bl	8007154 <HAL_RCCEx_PeriphCLKConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_UART_MspInit+0x142>
      Error_Handler();
 800176e:	f7ff faff 	bl	8000d70 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001772:	4b6b      	ldr	r3, [pc, #428]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	4a6a      	ldr	r2, [pc, #424]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 8001778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800177c:	6413      	str	r3, [r2, #64]	@ 0x40
 800177e:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	4b65      	ldr	r3, [pc, #404]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a64      	ldr	r2, [pc, #400]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b62      	ldr	r3, [pc, #392]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017d4:	2308      	movs	r3, #8
 80017d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017de:	4619      	mov	r1, r3
 80017e0:	4850      	ldr	r0, [pc, #320]	@ (8001924 <HAL_UART_MspInit+0x2f4>)
 80017e2:	f002 fbed 	bl	8003fc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017e6:	2304      	movs	r3, #4
 80017e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017fe:	2308      	movs	r3, #8
 8001800:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001808:	4619      	mov	r1, r3
 800180a:	484a      	ldr	r0, [pc, #296]	@ (8001934 <HAL_UART_MspInit+0x304>)
 800180c:	f002 fbd8 	bl	8003fc0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001810:	4b49      	ldr	r3, [pc, #292]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001812:	4a4a      	ldr	r2, [pc, #296]	@ (800193c <HAL_UART_MspInit+0x30c>)
 8001814:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001816:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001818:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800181c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181e:	4b46      	ldr	r3, [pc, #280]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001824:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800182a:	4b43      	ldr	r3, [pc, #268]	@ (8001938 <HAL_UART_MspInit+0x308>)
 800182c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001830:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001838:	4b3f      	ldr	r3, [pc, #252]	@ (8001938 <HAL_UART_MspInit+0x308>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800183e:	4b3e      	ldr	r3, [pc, #248]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001844:	4b3c      	ldr	r3, [pc, #240]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <HAL_UART_MspInit+0x308>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001850:	4839      	ldr	r0, [pc, #228]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001852:	f000 fd43 	bl	80022dc <HAL_DMA_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0x230>
      Error_Handler();
 800185c:	f7ff fa88 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a35      	ldr	r2, [pc, #212]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001864:	675a      	str	r2, [r3, #116]	@ 0x74
 8001866:	4a34      	ldr	r2, [pc, #208]	@ (8001938 <HAL_UART_MspInit+0x308>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2035      	movs	r0, #53	@ 0x35
 8001872:	f000 faf2 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001876:	2035      	movs	r0, #53	@ 0x35
 8001878:	f000 fb0b 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 800187c:	e049      	b.n	8001912 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2f      	ldr	r2, [pc, #188]	@ (8001940 <HAL_UART_MspInit+0x310>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d144      	bne.n	8001912 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800188e:	2300      	movs	r3, #0
 8001890:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001892:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fc5c 	bl	8007154 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_UART_MspInit+0x276>
      Error_Handler();
 80018a2:	f7ff fa65 	bl	8000d70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_UART_MspInit+0x2f0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f0:	2307      	movs	r3, #7
 80018f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018fa:	4619      	mov	r1, r3
 80018fc:	480d      	ldr	r0, [pc, #52]	@ (8001934 <HAL_UART_MspInit+0x304>)
 80018fe:	f002 fb5f 	bl	8003fc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2027      	movs	r0, #39	@ 0x27
 8001908:	f000 faa7 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800190c:	2027      	movs	r0, #39	@ 0x27
 800190e:	f000 fac0 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	37c0      	adds	r7, #192	@ 0xc0
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40004c00 	.word	0x40004c00
 8001920:	40023800 	.word	0x40023800
 8001924:	40020800 	.word	0x40020800
 8001928:	20000858 	.word	0x20000858
 800192c:	40026040 	.word	0x40026040
 8001930:	40005000 	.word	0x40005000
 8001934:	40020c00 	.word	0x40020c00
 8001938:	200008b8 	.word	0x200008b8
 800193c:	40026010 	.word	0x40026010
 8001940:	40004800 	.word	0x40004800

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001948:	f7ff fdd0 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	@ (8001984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	@ (8001990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001972:	f014 fc89 	bl	8016288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff f96f 	bl	8000c58 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001988:	0801a670 	.word	0x0801a670
  ldr r2, =_sbss
 800198c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001990:	2000872c 	.word	0x2000872c

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>

08001996 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <LAN8742_RegisterBusIO+0x28>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <LAN8742_RegisterBusIO+0x28>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <LAN8742_RegisterBusIO+0x28>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c2:	e014      	b.n	80019ee <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d139      	bne.n	8001a8a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2220      	movs	r2, #32
 8001a28:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e01c      	b.n	8001a6a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f107 020c 	add.w	r2, r7, #12
 8001a38:	2112      	movs	r1, #18
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	4798      	blx	r3
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da03      	bge.n	8001a4c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001a44:	f06f 0304 	mvn.w	r3, #4
 8001a48:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001a4a:	e00b      	b.n	8001a64 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d105      	bne.n	8001a64 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
         break;
 8001a62:	e005      	b.n	8001a70 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b1f      	cmp	r3, #31
 8001a6e:	d9df      	bls.n	8001a30 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b1f      	cmp	r3, #31
 8001a76:	d902      	bls.n	8001a7e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001a78:	f06f 0302 	mvn.w	r3, #2
 8001a7c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 }
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6810      	ldr	r0, [r2, #0]
 8001aa8:	f107 020c 	add.w	r2, r7, #12
 8001aac:	2101      	movs	r1, #1
 8001aae:	4798      	blx	r3
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da02      	bge.n	8001abc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ab6:	f06f 0304 	mvn.w	r3, #4
 8001aba:	e06e      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6810      	ldr	r0, [r2, #0]
 8001ac4:	f107 020c 	add.w	r2, r7, #12
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4798      	blx	r3
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da02      	bge.n	8001ad8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ad2:	f06f 0304 	mvn.w	r3, #4
 8001ad6:	e060      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e059      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6810      	ldr	r0, [r2, #0]
 8001aee:	f107 020c 	add.w	r2, r7, #12
 8001af2:	2100      	movs	r1, #0
 8001af4:	4798      	blx	r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da02      	bge.n	8001b02 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001afc:	f06f 0304 	mvn.w	r3, #4
 8001b00:	e04b      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d11b      	bne.n	8001b44 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <LAN8742_GetLinkState+0x90>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b20:	2302      	movs	r3, #2
 8001b22:	e03a      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e033      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e02c      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b40:	2305      	movs	r3, #5
 8001b42:	e02a      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6810      	ldr	r0, [r2, #0]
 8001b4c:	f107 020c 	add.w	r2, r7, #12
 8001b50:	211f      	movs	r1, #31
 8001b52:	4798      	blx	r3
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da02      	bge.n	8001b60 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b5a:	f06f 0304 	mvn.w	r3, #4
 8001b5e:	e01c      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001b6a:	2306      	movs	r3, #6
 8001b6c:	e015      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f003 031c 	and.w	r3, r3, #28
 8001b74:	2b18      	cmp	r3, #24
 8001b76:	d101      	bne.n	8001b7c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e00e      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 031c 	and.w	r3, r3, #28
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d101      	bne.n	8001b8a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e007      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 031c 	and.w	r3, r3, #28
 8001b90:	2b14      	cmp	r3, #20
 8001b92:	d101      	bne.n	8001b98 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b94:	2304      	movs	r3, #4
 8001b96:	e000      	b.n	8001b9a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b98:	2305      	movs	r3, #5
    }
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	f000 f94c 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bac:	200f      	movs	r0, #15
 8001bae:	f000 f805 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb2:	f7ff fac7 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f967 	bl	8001eae <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bf8:	f000 f92f 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000918 	.word	0x20000918

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000918 	.word	0x20000918

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00
 8001ce8:	05fa0000 	.word	0x05fa0000

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	@ (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	@ (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	@ 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	@ 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e054      	b.n	8001f84 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7f5b      	ldrb	r3, [r3, #29]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fb98 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a22      	ldr	r2, [pc, #136]	@ (8001f8c <HAL_CRC_Init+0xc4>)
 8001f04:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0218 	bic.w	r2, r2, #24
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	e00c      	b.n	8001f32 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	461a      	mov	r2, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f94c 	bl	80021c0 <HAL_CRCEx_Polynomial_Set>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e028      	b.n	8001f84 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	795b      	ldrb	r3, [r3, #5]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	e004      	b.n	8001f50 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6912      	ldr	r2, [r2, #16]
 8001f4e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	04c11db7 	.word	0x04c11db7

08001f90 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d006      	beq.n	8001fcc <HAL_CRC_Calculate+0x3c>
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d829      	bhi.n	8002016 <HAL_CRC_Calculate+0x86>
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d019      	beq.n	8001ffa <HAL_CRC_Calculate+0x6a>
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d01e      	beq.n	8002008 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001fca:	e024      	b.n	8002016 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e00a      	b.n	8001fe8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	441a      	add	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3f0      	bcc.n	8001fd2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	613b      	str	r3, [r7, #16]
      break;
 8001ff8:	e00e      	b.n	8002018 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f812 	bl	8002028 <CRC_Handle_8>
 8002004:	6138      	str	r0, [r7, #16]
      break;
 8002006:	e007      	b.n	8002018 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f89d 	bl	800214c <CRC_Handle_16>
 8002012:	6138      	str	r0, [r7, #16]
      break;
 8002014:	e000      	b.n	8002018 <HAL_CRC_Calculate+0x88>
      break;
 8002016:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800201e:	693b      	ldr	r3, [r7, #16]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	e023      	b.n	8002082 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3301      	adds	r3, #1
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	440b      	add	r3, r1
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002054:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	440b      	add	r3, r1
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002064:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	3303      	adds	r3, #3
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	440b      	add	r3, r1
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002078:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800207a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3301      	adds	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	429a      	cmp	r2, r3
 800208a:	d3d6      	bcc.n	800203a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d051      	beq.n	800213a <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d108      	bne.n	80020b2 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	4413      	add	r3, r2
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	7013      	strb	r3, [r2, #0]
 80020b0:	e043      	b.n	800213a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d118      	bne.n	80020ee <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	3301      	adds	r3, #1
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	440b      	add	r3, r1
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21b      	sxth	r3, r3
 80020de:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	8b7a      	ldrh	r2, [r7, #26]
 80020ea:	801a      	strh	r2, [r3, #0]
 80020ec:	e025      	b.n	800213a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d120      	bne.n	800213a <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b21b      	sxth	r3, r3
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	b21a      	sxth	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	3301      	adds	r3, #1
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	440b      	add	r3, r1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21b      	sxth	r3, r3
 800211a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	8b7a      	ldrh	r2, [r7, #26]
 8002126:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3724      	adds	r7, #36	@ 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e013      	b.n	8002186 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4413      	add	r3, r2
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	440b      	add	r3, r1
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	d3e6      	bcc.n	800215e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	881a      	ldrh	r2, [r3, #0]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021d0:	231f      	movs	r3, #31
 80021d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
 80021e2:	e063      	b.n	80022ac <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021e4:	bf00      	nop
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	613a      	str	r2, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d009      	beq.n	8002204 <HAL_CRCEx_Polynomial_Set+0x44>
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b18      	cmp	r3, #24
 8002208:	d846      	bhi.n	8002298 <HAL_CRCEx_Polynomial_Set+0xd8>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <HAL_CRCEx_Polynomial_Set+0x50>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	0800229f 	.word	0x0800229f
 8002214:	08002299 	.word	0x08002299
 8002218:	08002299 	.word	0x08002299
 800221c:	08002299 	.word	0x08002299
 8002220:	08002299 	.word	0x08002299
 8002224:	08002299 	.word	0x08002299
 8002228:	08002299 	.word	0x08002299
 800222c:	08002299 	.word	0x08002299
 8002230:	0800228d 	.word	0x0800228d
 8002234:	08002299 	.word	0x08002299
 8002238:	08002299 	.word	0x08002299
 800223c:	08002299 	.word	0x08002299
 8002240:	08002299 	.word	0x08002299
 8002244:	08002299 	.word	0x08002299
 8002248:	08002299 	.word	0x08002299
 800224c:	08002299 	.word	0x08002299
 8002250:	08002281 	.word	0x08002281
 8002254:	08002299 	.word	0x08002299
 8002258:	08002299 	.word	0x08002299
 800225c:	08002299 	.word	0x08002299
 8002260:	08002299 	.word	0x08002299
 8002264:	08002299 	.word	0x08002299
 8002268:	08002299 	.word	0x08002299
 800226c:	08002299 	.word	0x08002299
 8002270:	08002275 	.word	0x08002275
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b06      	cmp	r3, #6
 8002278:	d913      	bls.n	80022a2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800227e:	e010      	b.n	80022a2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b07      	cmp	r3, #7
 8002284:	d90f      	bls.n	80022a6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800228a:	e00c      	b.n	80022a6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	d90b      	bls.n	80022aa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002296:	e008      	b.n	80022aa <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	75fb      	strb	r3, [r7, #23]
        break;
 800229c:	e006      	b.n	80022ac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800229e:	bf00      	nop
 80022a0:	e004      	b.n	80022ac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022a2:	bf00      	nop
 80022a4:	e002      	b.n	80022ac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022a6:	bf00      	nop
 80022a8:	e000      	b.n	80022ac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022aa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 0118 	bic.w	r1, r3, #24
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff fcac 	bl	8001c44 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e099      	b.n	800242c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002318:	e00f      	b.n	800233a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231a:	f7ff fc93 	bl	8001c44 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b05      	cmp	r3, #5
 8002326:	d908      	bls.n	800233a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e078      	b.n	800242c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e8      	bne.n	800231a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <HAL_DMA_Init+0x158>)
 8002354:	4013      	ands	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	2b04      	cmp	r3, #4
 8002392:	d107      	bne.n	80023a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	4313      	orrs	r3, r2
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f023 0307 	bic.w	r3, r3, #7
 80023ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d117      	bne.n	80023fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fb23 	bl	8002a2c <DMA_CheckFifoParam>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2240      	movs	r2, #64	@ 0x40
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023fa:	2301      	movs	r3, #1
 80023fc:	e016      	b.n	800242c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fada 	bl	80029c0 <DMA_CalcBaseAndBitshift>
 800240c:	4603      	mov	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	223f      	movs	r2, #63	@ 0x3f
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	f010803f 	.word	0xf010803f

08002438 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_DMA_Start_IT+0x26>
 800245a:	2302      	movs	r3, #2
 800245c:	e048      	b.n	80024f0 <HAL_DMA_Start_IT+0xb8>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d137      	bne.n	80024e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fa6c 	bl	8002964 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002490:	223f      	movs	r2, #63	@ 0x3f
 8002492:	409a      	lsls	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0216 	orr.w	r2, r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e005      	b.n	80024ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002506:	f7ff fb9d 	bl	8001c44 <HAL_GetTick>
 800250a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d008      	beq.n	800252a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e052      	b.n	80025d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0216 	bic.w	r2, r2, #22
 8002538:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002548:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d103      	bne.n	800255a <HAL_DMA_Abort+0x62>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0208 	bic.w	r2, r2, #8
 8002568:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257a:	e013      	b.n	80025a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257c:	f7ff fb62 	bl	8001c44 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b05      	cmp	r3, #5
 8002588:	d90c      	bls.n	80025a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2203      	movs	r2, #3
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e015      	b.n	80025d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1e4      	bne.n	800257c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b6:	223f      	movs	r2, #63	@ 0x3f
 80025b8:	409a      	lsls	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d004      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2280      	movs	r2, #128	@ 0x80
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00c      	b.n	8002610 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2205      	movs	r2, #5
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002628:	4b8e      	ldr	r3, [pc, #568]	@ (8002864 <HAL_DMA_IRQHandler+0x248>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a8e      	ldr	r2, [pc, #568]	@ (8002868 <HAL_DMA_IRQHandler+0x24c>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2208      	movs	r2, #8
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01a      	beq.n	8002688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	2208      	movs	r2, #8
 8002676:	409a      	lsls	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	2201      	movs	r2, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d012      	beq.n	80026be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	2201      	movs	r2, #1
 80026ac:	409a      	lsls	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c2:	2204      	movs	r2, #4
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	2204      	movs	r2, #4
 80026e2:	409a      	lsls	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f8:	2210      	movs	r2, #16
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d043      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03c      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	2210      	movs	r2, #16
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d018      	beq.n	800275e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d024      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
 800274a:	e01f      	b.n	800278c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
 800275c:	e016      	b.n	800278c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0208 	bic.w	r2, r2, #8
 800277a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	2220      	movs	r2, #32
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 808f 	beq.w	80028bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8087 	beq.w	80028bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	2220      	movs	r2, #32
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d136      	bne.n	8002834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0216 	bic.w	r2, r2, #22
 80027d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x1da>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0208 	bic.w	r2, r2, #8
 8002804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	223f      	movs	r2, #63	@ 0x3f
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002826:	2b00      	cmp	r3, #0
 8002828:	d07e      	beq.n	8002928 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
        }
        return;
 8002832:	e079      	b.n	8002928 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01d      	beq.n	800287e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10d      	bne.n	800286c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	2b00      	cmp	r3, #0
 8002856:	d031      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
 8002860:	e02c      	b.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
 8002862:	bf00      	nop
 8002864:	20000000 	.word	0x20000000
 8002868:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e01e      	b.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0210 	bic.w	r2, r2, #16
 800289a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d032      	beq.n	800292a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2205      	movs	r2, #5
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d307      	bcc.n	8002904 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f2      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x2cc>
 8002902:	e000      	b.n	8002906 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002904:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
 8002926:	e000      	b.n	800292a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002928:	bf00      	nop
    }
  }
}
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800293e:	b2db      	uxtb	r3, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002980:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b40      	cmp	r3, #64	@ 0x40
 8002990:	d108      	bne.n	80029a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029a2:	e007      	b.n	80029b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	60da      	str	r2, [r3, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3b10      	subs	r3, #16
 80029d0:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <DMA_CalcBaseAndBitshift+0x60>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029da:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <DMA_CalcBaseAndBitshift+0x64>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d908      	bls.n	8002a00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <DMA_CalcBaseAndBitshift+0x68>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	1d1a      	adds	r2, r3, #4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80029fe:	e006      	b.n	8002a0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <DMA_CalcBaseAndBitshift+0x68>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	aaaaaaab 	.word	0xaaaaaaab
 8002a24:	0801a464 	.word	0x0801a464
 8002a28:	fffffc00 	.word	0xfffffc00

08002a2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d11f      	bne.n	8002a86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d856      	bhi.n	8002afa <DMA_CheckFifoParam+0xce>
 8002a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <DMA_CheckFifoParam+0x28>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a77 	.word	0x08002a77
 8002a5c:	08002a65 	.word	0x08002a65
 8002a60:	08002afb 	.word	0x08002afb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d046      	beq.n	8002afe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e043      	b.n	8002afe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a7e:	d140      	bne.n	8002b02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a84:	e03d      	b.n	8002b02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a8e:	d121      	bne.n	8002ad4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d837      	bhi.n	8002b06 <DMA_CheckFifoParam+0xda>
 8002a96:	a201      	add	r2, pc, #4	@ (adr r2, 8002a9c <DMA_CheckFifoParam+0x70>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002ab3 	.word	0x08002ab3
 8002aa4:	08002aad 	.word	0x08002aad
 8002aa8:	08002ac5 	.word	0x08002ac5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab0:	e030      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d025      	beq.n	8002b0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac2:	e022      	b.n	8002b0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002acc:	d11f      	bne.n	8002b0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ad2:	e01c      	b.n	8002b0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d903      	bls.n	8002ae2 <DMA_CheckFifoParam+0xb6>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d003      	beq.n	8002ae8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ae0:	e018      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae6:	e015      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00e      	beq.n	8002b12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      break;
 8002af8:	e00b      	b.n	8002b12 <DMA_CheckFifoParam+0xe6>
      break;
 8002afa:	bf00      	nop
 8002afc:	e00a      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002afe:	bf00      	nop
 8002b00:	e008      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e006      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e004      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e002      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
    }
  } 
  
  return status; 
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e086      	b.n	8002c44 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f007 fe8d 	bl	800a868 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c4c <HAL_ETH_Init+0x128>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	4a3e      	ldr	r2, [pc, #248]	@ (8002c4c <HAL_ETH_Init+0x128>)
 8002b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c4c <HAL_ETH_Init+0x128>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b66:	4b3a      	ldr	r3, [pc, #232]	@ (8002c50 <HAL_ETH_Init+0x12c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4a39      	ldr	r2, [pc, #228]	@ (8002c50 <HAL_ETH_Init+0x12c>)
 8002b6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b72:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <HAL_ETH_Init+0x12c>)
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4935      	ldr	r1, [pc, #212]	@ (8002c50 <HAL_ETH_Init+0x12c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002b80:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_ETH_Init+0x12c>)
 8002b82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7ff f852 	bl	8001c44 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ba2:	e011      	b.n	8002bc8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ba4:	f7ff f84e 	bl	8001c44 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bb2:	d909      	bls.n	8002bc8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	22e0      	movs	r2, #224	@ 0xe0
 8002bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e03d      	b.n	8002c44 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e4      	bne.n	8002ba4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 ff34 	bl	8003a48 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 ffdf 	bl	8003ba4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f001 f835 	bl	8003c56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 ff9d 	bl	8003b34 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <HAL_ETH_Init+0x130>)
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002c2e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	00020060 	.word	0x00020060

08002c58 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d15f      	bne.n	8002d2a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa2e 	bl	80030e0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7fe ffe5 	bl	8001c5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cb0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cc8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fd58 	bl	8003780 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0208 	orr.w	r2, r2, #8
 8002cde:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f7fe ffb7 	bl	8001c5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0204 	orr.w	r2, r2, #4
 8002d04:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d0e:	69d9      	ldr	r1, [r3, #28]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <HAL_ETH_Start_IT+0xdc>)
 8002d16:	430b      	orrs	r3, r1
 8002d18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d1c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2240      	movs	r2, #64	@ 0x40
 8002d22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
  }
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	0001a0c1 	.word	0x0001a0c1

08002d38 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d46:	2b40      	cmp	r3, #64	@ 0x40
 8002d48:	d16e      	bne.n	8002e28 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d5a:	69d9      	ldr	r1, [r3, #28]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b34      	ldr	r3, [pc, #208]	@ (8002e34 <HAL_ETH_Stop_IT+0xfc>)
 8002d62:	400b      	ands	r3, r1
 8002d64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d68:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d80:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	f023 0302 	bic.w	r3, r3, #2
 8002d94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d98:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0204 	bic.w	r2, r2, #4
 8002da8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7fe ff52 	bl	8001c5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fcdd 	bl	8003780 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0208 	bic.w	r2, r2, #8
 8002dd4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f7fe ff3c 	bl	8001c5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e00e      	b.n	8002e10 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	3212      	adds	r2, #18
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d9ed      	bls.n	8002df2 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2210      	movs	r2, #16
 8002e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	fffe5f3e 	.word	0xfffe5f3e

08002e38 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e07c      	b.n	8002f58 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d176      	bne.n	8002f56 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 ff61 	bl	8003d34 <ETH_Prepare_Tx_Descriptors>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f043 0202 	orr.w	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e065      	b.n	8002f58 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e8c:	f3bf 8f4f 	dsb	sy
}
 8002e90:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3206      	adds	r2, #6
 8002e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d904      	bls.n	8002ebc <HAL_ETH_Transmit+0x84>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb6:	1f1a      	subs	r2, r3, #4
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3106      	adds	r1, #6
 8002ec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ecc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ed0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002ed2:	f7fe feb7 	bl	8001c44 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002ed8:	e037      	b.n	8002f4a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d011      	beq.n	8002f10 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f043 0208 	orr.w	r2, r3, #8
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e023      	b.n	8002f58 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f16:	d018      	beq.n	8002f4a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f18:	f7fe fe94 	bl	8001c44 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d302      	bcc.n	8002f2e <HAL_ETH_Transmit+0xf6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f34:	f043 0204 	orr.w	r2, r3, #4
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002f44:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e006      	b.n	8002f58 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	dbc3      	blt.n	8002eda <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0a4      	b.n	80030d6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f92:	2b40      	cmp	r3, #64	@ 0x40
 8002f94:	d001      	beq.n	8002f9a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e09d      	b.n	80030d6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	3212      	adds	r2, #18
 8002fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002faa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fb0:	f1c3 0304 	rsb	r3, r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002fb6:	e066      	b.n	8003086 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <HAL_ETH_ReadData+0x88>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d03c      	beq.n	8003062 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800300a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003020:	2301      	movs	r3, #1
 8003022:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f007 fde3 	bl	800ac0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	441a      	add	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2200      	movs	r2, #0
 8003060:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d902      	bls.n	8003074 <HAL_ETH_ReadData+0x114>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3b04      	subs	r3, #4
 8003072:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	3212      	adds	r2, #18
 800307a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800308a:	2b00      	cmp	r3, #0
 800308c:	db06      	blt.n	800309c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	429a      	cmp	r2, r3
 8003094:	d202      	bcs.n	800309c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d08d      	beq.n	8002fb8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	441a      	add	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f815 	bl	80030e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d108      	bne.n	80030d4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80030ec:	2301      	movs	r3, #1
 80030ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	3212      	adds	r2, #18
 80030fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003100:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003106:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003108:	e042      	b.n	8003190 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d112      	bne.n	8003138 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	4618      	mov	r0, r3
 8003118:	f007 fd48 	bl	800abac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	74fb      	strb	r3, [r7, #19]
 8003126:	e007      	b.n	8003138 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	461a      	mov	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	461a      	mov	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d028      	beq.n	8003190 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	4b26      	ldr	r3, [pc, #152]	@ (80031e4 <ETH_UpdateDescriptor+0x104>)
 800314c:	4313      	orrs	r3, r2
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	6053      	str	r3, [r2, #4]
 8003152:	e005      	b.n	8003160 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3301      	adds	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d902      	bls.n	800317e <ETH_UpdateDescriptor+0x9e>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	3b04      	subs	r3, #4
 800317c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	3212      	adds	r2, #18
 8003184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003188:	617b      	str	r3, [r7, #20]
      desccount--;
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3b01      	subs	r3, #1
 800318e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <ETH_UpdateDescriptor+0xbc>
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1b6      	bne.n	800310a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d01a      	beq.n	80031dc <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3303      	adds	r3, #3
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80031b0:	f3bf 8f5f 	dmb	sy
}
 80031b4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6919      	ldr	r1, [r3, #16]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	18ca      	adds	r2, r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ce:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80031dc:	bf00      	nop
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	80004000 	.word	0x80004000

080031e8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003210:	4b4b      	ldr	r3, [pc, #300]	@ (8003340 <HAL_ETH_IRQHandler+0x158>)
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00e      	beq.n	800323e <HAL_ETH_IRQHandler+0x56>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003232:	461a      	mov	r2, r3
 8003234:	4b43      	ldr	r3, [pc, #268]	@ (8003344 <HAL_ETH_IRQHandler+0x15c>)
 8003236:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f891 	bl	8003360 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00f      	beq.n	8003268 <HAL_ETH_IRQHandler+0x80>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325a:	461a      	mov	r2, r3
 800325c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003260:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f872 	bl	800334c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d042      	beq.n	80032f8 <HAL_ETH_IRQHandler+0x110>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d03d      	beq.n	80032f8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01a      	beq.n	80032cc <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <HAL_ETH_IRQHandler+0x160>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80032bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032c0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	22e0      	movs	r2, #224	@ 0xe0
 80032c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80032ca:	e012      	b.n	80032f2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	f248 6380 	movw	r3, #34432	@ 0x8680
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ea:	461a      	mov	r2, r3
 80032ec:	f248 6380 	movw	r3, #34432	@ 0x8680
 80032f0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f83e 	bl	8003374 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00e      	beq.n	8003320 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f838 	bl	8003388 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_ETH_IRQHandler+0x158>)
 800332c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003330:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f832 	bl	800339c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40013c00 	.word	0x40013c00
 8003344:	00010040 	.word	0x00010040
 8003348:	007e2000 	.word	0x007e2000

0800334c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 031c 	and.w	r3, r3, #28
 80033cc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	02db      	lsls	r3, r3, #11
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	019b      	lsls	r3, r3, #6
 80033de:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0302 	bic.w	r3, r3, #2
 80033ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003400:	f7fe fc20 	bl	8001c44 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003406:	e00d      	b.n	8003424 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003408:	f7fe fc1c 	bl	8001c44 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003416:	d301      	bcc.n	800341c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e010      	b.n	800343e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ec      	bne.n	8003408 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f003 031c 	and.w	r3, r3, #28
 8003462:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	02db      	lsls	r3, r3, #11
 8003468:	b29b      	uxth	r3, r3
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	019b      	lsls	r3, r3, #6
 8003474:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a0:	f7fe fbd0 	bl	8001c44 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034a6:	e00d      	b.n	80034c4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80034a8:	f7fe fbcc 	bl	8001c44 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b6:	d301      	bcc.n	80034bc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e009      	b.n	80034d0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ec      	bne.n	80034a8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0e6      	b.n	80036ba <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	b29a      	uxth	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00b      	b.n	80036f2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d105      	bne.n	80036f0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f870 	bl	80037cc <ETH_SetMACConfig>

    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 031c 	bic.w	r3, r3, #28
 8003712:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003714:	f003 fcea 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 8003718:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <HAL_ETH_SetMDIOClockRange+0x74>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d804      	bhi.n	800372c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e019      	b.n	8003760 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4a11      	ldr	r2, [pc, #68]	@ (8003774 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d204      	bcs.n	800373e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f043 030c 	orr.w	r3, r3, #12
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e010      	b.n	8003760 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4a0d      	ldr	r2, [pc, #52]	@ (8003778 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d90c      	bls.n	8003760 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4a0c      	ldr	r2, [pc, #48]	@ (800377c <HAL_ETH_SetMDIOClockRange+0x80>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d804      	bhi.n	8003758 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e003      	b.n	8003760 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f043 0310 	orr.w	r3, r3, #16
 800375e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	611a      	str	r2, [r3, #16]
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	02160ebf 	.word	0x02160ebf
 8003774:	03938700 	.word	0x03938700
 8003778:	05f5e0ff 	.word	0x05f5e0ff
 800377c:	08f0d17f 	.word	0x08f0d17f

08003780 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037a2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037b0:	2001      	movs	r0, #1
 80037b2:	f7fe fa53 	bl	8001c5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037c0:	6193      	str	r3, [r2, #24]
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <ETH_SetMACConfig+0x164>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	7b9b      	ldrb	r3, [r3, #14]
 80037ea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	7c12      	ldrb	r2, [r2, #16]
 80037f0:	2a00      	cmp	r2, #0
 80037f2:	d102      	bne.n	80037fa <ETH_SetMACConfig+0x2e>
 80037f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80037f8:	e000      	b.n	80037fc <ETH_SetMACConfig+0x30>
 80037fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80037fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	7c52      	ldrb	r2, [r2, #17]
 8003802:	2a00      	cmp	r2, #0
 8003804:	d102      	bne.n	800380c <ETH_SetMACConfig+0x40>
 8003806:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800380a:	e000      	b.n	800380e <ETH_SetMACConfig+0x42>
 800380c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800380e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003814:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	7fdb      	ldrb	r3, [r3, #31]
 800381a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800381c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003822:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	7f92      	ldrb	r2, [r2, #30]
 8003828:	2a00      	cmp	r2, #0
 800382a:	d102      	bne.n	8003832 <ETH_SetMACConfig+0x66>
 800382c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003830:	e000      	b.n	8003834 <ETH_SetMACConfig+0x68>
 8003832:	2200      	movs	r2, #0
                        macconf->Speed |
 8003834:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	7f1b      	ldrb	r3, [r3, #28]
 800383a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800383c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003842:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	791b      	ldrb	r3, [r3, #4]
 8003848:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800384a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003852:	2a00      	cmp	r2, #0
 8003854:	d102      	bne.n	800385c <ETH_SetMACConfig+0x90>
 8003856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800385a:	e000      	b.n	800385e <ETH_SetMACConfig+0x92>
 800385c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800385e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	7bdb      	ldrb	r3, [r3, #15]
 8003864:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003866:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800386c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003874:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003876:	4313      	orrs	r3, r2
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800388e:	2001      	movs	r0, #1
 8003890:	f7fe f9e4 	bl	8001c5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80038aa:	4013      	ands	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80038ba:	2a00      	cmp	r2, #0
 80038bc:	d101      	bne.n	80038c2 <ETH_SetMACConfig+0xf6>
 80038be:	2280      	movs	r2, #128	@ 0x80
 80038c0:	e000      	b.n	80038c4 <ETH_SetMACConfig+0xf8>
 80038c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	d101      	bne.n	80038da <ETH_SetMACConfig+0x10e>
 80038d6:	2208      	movs	r2, #8
 80038d8:	e000      	b.n	80038dc <ETH_SetMACConfig+0x110>
 80038da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80038dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80038e4:	2a01      	cmp	r2, #1
 80038e6:	d101      	bne.n	80038ec <ETH_SetMACConfig+0x120>
 80038e8:	2204      	movs	r2, #4
 80038ea:	e000      	b.n	80038ee <ETH_SetMACConfig+0x122>
 80038ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80038f6:	2a01      	cmp	r2, #1
 80038f8:	d101      	bne.n	80038fe <ETH_SetMACConfig+0x132>
 80038fa:	2202      	movs	r2, #2
 80038fc:	e000      	b.n	8003900 <ETH_SetMACConfig+0x134>
 80038fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003900:	4313      	orrs	r3, r2
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003918:	2001      	movs	r0, #1
 800391a:	f7fe f99f 	bl	8001c5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	619a      	str	r2, [r3, #24]
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	fd20810f 	.word	0xfd20810f

08003934 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a44 <ETH_SetDMAConfig+0x110>)
 800394e:	4013      	ands	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	7b1b      	ldrb	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <ETH_SetDMAConfig+0x2c>
 800395a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800395e:	e000      	b.n	8003962 <ETH_SetDMAConfig+0x2e>
 8003960:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	7b5b      	ldrb	r3, [r3, #13]
 8003966:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003968:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	7f52      	ldrb	r2, [r2, #29]
 800396e:	2a00      	cmp	r2, #0
 8003970:	d102      	bne.n	8003978 <ETH_SetDMAConfig+0x44>
 8003972:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003976:	e000      	b.n	800397a <ETH_SetDMAConfig+0x46>
 8003978:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800397a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	7b9b      	ldrb	r3, [r3, #14]
 8003980:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003982:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003988:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	7f1b      	ldrb	r3, [r3, #28]
 800398e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003990:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	7f9b      	ldrb	r3, [r3, #30]
 8003996:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003998:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800399e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039a8:	4313      	orrs	r3, r2
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b8:	461a      	mov	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7fe f946 	bl	8001c5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039d8:	461a      	mov	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	791b      	ldrb	r3, [r3, #4]
 80039e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80039ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80039fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a06:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a0c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a1a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7fe f917 	bl	8001c5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	f8de3f23 	.word	0xf8de3f23

08003a48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b0a6      	sub	sp, #152	@ 0x98
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ab0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ab6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ac2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fe7f 	bl	80037cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003afe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b02:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b08:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b0e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff05 	bl	8003934 <ETH_SetDMAConfig>
}
 8003b2a:	bf00      	nop
 8003b2c:	3798      	adds	r7, #152	@ 0x98
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3305      	adds	r3, #5
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	3204      	adds	r2, #4
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <ETH_MACAddressConfig+0x68>)
 8003b56:	4413      	add	r3, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3303      	adds	r3, #3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	061a      	lsls	r2, r3, #24
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3301      	adds	r3, #1
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <ETH_MACAddressConfig+0x6c>)
 8003b86:	4413      	add	r3, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40028040 	.word	0x40028040
 8003ba0:	40028044 	.word	0x40028044

08003ba4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e03e      	b.n	8003c30 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	3206      	adds	r2, #6
 8003be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d80c      	bhi.n	8003c14 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68d9      	ldr	r1, [r3, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	e004      	b.n	8003c1e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d9bd      	bls.n	8003bb2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c48:	611a      	str	r2, [r3, #16]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e048      	b.n	8003cf6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6919      	ldr	r1, [r3, #16]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	440b      	add	r3, r1
 8003c74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2200      	movs	r2, #0
 8003c92:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2200      	movs	r2, #0
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	3212      	adds	r2, #18
 8003cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d80c      	bhi.n	8003ce6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6919      	ldr	r1, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	440b      	add	r3, r1
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e004      	b.n	8003cf0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d9b3      	bls.n	8003c64 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d26:	60da      	str	r2, [r3, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b091      	sub	sp, #68	@ 0x44
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3318      	adds	r3, #24
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d76:	d007      	beq.n	8003d88 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e111      	b.n	8003fb0 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8e:	3301      	adds	r3, #1
 8003d90:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4b86      	ldr	r3, [pc, #536]	@ (8003fbc <ETH_Prepare_Tx_Descriptors+0x288>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da6:	6852      	ldr	r2, [r2, #4]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003e0e:	e082      	b.n	8003f16 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d006      	beq.n	8003e30 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e005      	b.n	8003e3c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3e:	3301      	adds	r3, #1
 8003e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d902      	bls.n	8003e4e <ETH_Prepare_Tx_Descriptors+0x11a>
 8003e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e56:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e64:	d007      	beq.n	8003e76 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d029      	beq.n	8003eca <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e82:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e88:	e019      	b.n	8003ebe <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003e8a:	f3bf 8f5f 	dmb	sy
}
 8003e8e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d902      	bls.n	8003eae <ETH_Prepare_Tx_Descriptors+0x17a>
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eba:	3301      	adds	r3, #1
 8003ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d3e1      	bcc.n	8003e8a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e072      	b.n	8003fb0 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed8:	3301      	adds	r3, #1
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	4b32      	ldr	r3, [pc, #200]	@ (8003fbc <ETH_Prepare_Tx_Descriptors+0x288>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef6:	6852      	ldr	r2, [r2, #4]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	3301      	adds	r3, #1
 8003f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003f04:	f3bf 8f5f 	dmb	sy
}
 8003f08:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f47f af78 	bne.w	8003e10 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e005      	b.n	8003f40 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	6a3a      	ldr	r2, [r7, #32]
 8003f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f54:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003f56:	f3bf 8f5f 	dmb	sy
}
 8003f5a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f66:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f70:	3304      	adds	r3, #4
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f7c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f82:	613b      	str	r3, [r7, #16]
  return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9a:	4413      	add	r3, r2
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3744      	adds	r7, #68	@ 0x44
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	ffffe000 	.word	0xffffe000

08003fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	@ 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e175      	b.n	80042cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f040 8164 	bne.w	80042c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d005      	beq.n	8004016 <HAL_GPIO_Init+0x56>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d130      	bne.n	8004078 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800404c:	2201      	movs	r2, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0201 	and.w	r2, r3, #1
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d017      	beq.n	80040b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d123      	bne.n	8004108 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	2203      	movs	r2, #3
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80be 	beq.w	80042c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414a:	4b66      	ldr	r3, [pc, #408]	@ (80042e4 <HAL_GPIO_Init+0x324>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	4a65      	ldr	r2, [pc, #404]	@ (80042e4 <HAL_GPIO_Init+0x324>)
 8004150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004154:	6453      	str	r3, [r2, #68]	@ 0x44
 8004156:	4b63      	ldr	r3, [pc, #396]	@ (80042e4 <HAL_GPIO_Init+0x324>)
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004162:	4a61      	ldr	r2, [pc, #388]	@ (80042e8 <HAL_GPIO_Init+0x328>)
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	3302      	adds	r3, #2
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a58      	ldr	r2, [pc, #352]	@ (80042ec <HAL_GPIO_Init+0x32c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d037      	beq.n	80041fe <HAL_GPIO_Init+0x23e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a57      	ldr	r2, [pc, #348]	@ (80042f0 <HAL_GPIO_Init+0x330>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_GPIO_Init+0x23a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a56      	ldr	r2, [pc, #344]	@ (80042f4 <HAL_GPIO_Init+0x334>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <HAL_GPIO_Init+0x236>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a55      	ldr	r2, [pc, #340]	@ (80042f8 <HAL_GPIO_Init+0x338>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d025      	beq.n	80041f2 <HAL_GPIO_Init+0x232>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a54      	ldr	r2, [pc, #336]	@ (80042fc <HAL_GPIO_Init+0x33c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x22e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a53      	ldr	r2, [pc, #332]	@ (8004300 <HAL_GPIO_Init+0x340>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x22a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a52      	ldr	r2, [pc, #328]	@ (8004304 <HAL_GPIO_Init+0x344>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x226>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a51      	ldr	r2, [pc, #324]	@ (8004308 <HAL_GPIO_Init+0x348>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x222>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a50      	ldr	r2, [pc, #320]	@ (800430c <HAL_GPIO_Init+0x34c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x21e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004310 <HAL_GPIO_Init+0x350>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x21a>
 80041d6:	2309      	movs	r3, #9
 80041d8:	e012      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041da:	230a      	movs	r3, #10
 80041dc:	e010      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041de:	2308      	movs	r3, #8
 80041e0:	e00e      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041e2:	2307      	movs	r3, #7
 80041e4:	e00c      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041e6:	2306      	movs	r3, #6
 80041e8:	e00a      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041ea:	2305      	movs	r3, #5
 80041ec:	e008      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041ee:	2304      	movs	r3, #4
 80041f0:	e006      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e004      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e002      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041fe:	2300      	movs	r3, #0
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	f002 0203 	and.w	r2, r2, #3
 8004206:	0092      	lsls	r2, r2, #2
 8004208:	4093      	lsls	r3, r2
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004210:	4935      	ldr	r1, [pc, #212]	@ (80042e8 <HAL_GPIO_Init+0x328>)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	3302      	adds	r3, #2
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800421e:	4b3d      	ldr	r3, [pc, #244]	@ (8004314 <HAL_GPIO_Init+0x354>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004242:	4a34      	ldr	r2, [pc, #208]	@ (8004314 <HAL_GPIO_Init+0x354>)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004248:	4b32      	ldr	r3, [pc, #200]	@ (8004314 <HAL_GPIO_Init+0x354>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800426c:	4a29      	ldr	r2, [pc, #164]	@ (8004314 <HAL_GPIO_Init+0x354>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004272:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <HAL_GPIO_Init+0x354>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004296:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_GPIO_Init+0x354>)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800429c:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_GPIO_Init+0x354>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042c0:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <HAL_GPIO_Init+0x354>)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	f67f ae86 	bls.w	8003fe0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3724      	adds	r7, #36	@ 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40013800 	.word	0x40013800
 80042ec:	40020000 	.word	0x40020000
 80042f0:	40020400 	.word	0x40020400
 80042f4:	40020800 	.word	0x40020800
 80042f8:	40020c00 	.word	0x40020c00
 80042fc:	40021000 	.word	0x40021000
 8004300:	40021400 	.word	0x40021400
 8004304:	40021800 	.word	0x40021800
 8004308:	40021c00 	.word	0x40021c00
 800430c:	40022000 	.word	0x40022000
 8004310:	40022400 	.word	0x40022400
 8004314:	40013c00 	.word	0x40013c00

08004318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e08b      	b.n	8004442 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc fad4 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	@ 0x24
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004368:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004378:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d107      	bne.n	8004392 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	e006      	b.n	80043a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800439e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d108      	bne.n	80043ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	e007      	b.n	80043ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <HAL_I2C_Init+0x134>)
 80043d6:	430b      	orrs	r3, r1
 80043d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69d9      	ldr	r1, [r3, #28]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	02008000 	.word	0x02008000

08004450 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	@ 0x28
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	461a      	mov	r2, r3
 800445c:	460b      	mov	r3, r1
 800445e:	817b      	strh	r3, [r7, #10]
 8004460:	4613      	mov	r3, r2
 8004462:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b20      	cmp	r3, #32
 8004472:	f040 80ef 	bne.w	8004654 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004484:	d101      	bne.n	800448a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
 8004488:	e0e5      	b.n	8004656 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_I2C_Master_Transmit_DMA+0x48>
 8004494:	2302      	movs	r3, #2
 8004496:	e0de      	b.n	8004656 <HAL_I2C_Master_Transmit_DMA+0x206>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2221      	movs	r2, #33	@ 0x21
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2210      	movs	r2, #16
 80044ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	893a      	ldrh	r2, [r7, #8]
 80044c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a66      	ldr	r2, [pc, #408]	@ (8004660 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80044c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a66      	ldr	r2, [pc, #408]	@ (8004664 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80044cc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2bff      	cmp	r3, #255	@ 0xff
 80044d6:	d906      	bls.n	80044e6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	22ff      	movs	r2, #255	@ 0xff
 80044dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80044de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	e007      	b.n	80044f6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80044f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044f4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01a      	beq.n	8004534 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004518:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	d074      	beq.n	8004626 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004548:	4a47      	ldr	r2, [pc, #284]	@ (8004668 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800454a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	4a46      	ldr	r2, [pc, #280]	@ (800466c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004552:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	2200      	movs	r2, #0
 8004562:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004574:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800457a:	f7fd ff5d 	bl	8002438 <HAL_DMA_Start_IT>
 800457e:	4603      	mov	r3, r0
 8004580:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d13a      	bne.n	80045fe <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004588:	e013      	b.n	80045b2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e051      	b.n	8004656 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	8979      	ldrh	r1, [r7, #10]
 80045be:	4b2c      	ldr	r3, [pc, #176]	@ (8004670 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f001 ff3f 	bl	8006448 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80045e4:	2110      	movs	r1, #16
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f001 ff60 	bl	80064ac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e028      	b.n	8004650 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f043 0210 	orr.w	r2, r3, #16
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e017      	b.n	8004656 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a12      	ldr	r2, [pc, #72]	@ (8004674 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800462a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	8979      	ldrh	r1, [r7, #10]
 8004632:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f001 ff04 	bl	8006448 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004648:	2101      	movs	r1, #1
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f001 ff2e 	bl	80064ac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	ffff0000 	.word	0xffff0000
 8004664:	0800519f 	.word	0x0800519f
 8004668:	080061cb 	.word	0x080061cb
 800466c:	08006399 	.word	0x08006399
 8004670:	80002000 	.word	0x80002000
 8004674:	08004d13 	.word	0x08004d13

08004678 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	461a      	mov	r2, r3
 8004684:	460b      	mov	r3, r1
 8004686:	817b      	strh	r3, [r7, #10]
 8004688:	4613      	mov	r3, r2
 800468a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b20      	cmp	r3, #32
 8004696:	f040 80cd 	bne.w	8004834 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a8:	d101      	bne.n	80046ae <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
 80046ac:	e0c3      	b.n	8004836 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_I2C_Master_Receive_DMA+0x44>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e0bc      	b.n	8004836 <HAL_I2C_Master_Receive_DMA+0x1be>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2222      	movs	r2, #34	@ 0x22
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2210      	movs	r2, #16
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	893a      	ldrh	r2, [r7, #8]
 80046e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a55      	ldr	r2, [pc, #340]	@ (8004840 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a55      	ldr	r2, [pc, #340]	@ (8004844 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80046f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2bff      	cmp	r3, #255	@ 0xff
 80046fa:	d906      	bls.n	800470a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004702:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e007      	b.n	800471a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004714:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004718:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d070      	beq.n	8004804 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d020      	beq.n	800476c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472e:	4a46      	ldr	r2, [pc, #280]	@ (8004848 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004730:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004736:	4a45      	ldr	r2, [pc, #276]	@ (800484c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8004738:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473e:	2200      	movs	r2, #0
 8004740:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004746:	2200      	movs	r2, #0
 8004748:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3324      	adds	r3, #36	@ 0x24
 8004754:	4619      	mov	r1, r3
 8004756:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800475c:	f7fd fe6c 	bl	8002438 <HAL_DMA_Start_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d138      	bne.n	80047dc <HAL_I2C_Master_Receive_DMA+0x164>
 800476a:	e013      	b.n	8004794 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004780:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e050      	b.n	8004836 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004798:	b2da      	uxtb	r2, r3
 800479a:	8979      	ldrh	r1, [r7, #10]
 800479c:	4b2c      	ldr	r3, [pc, #176]	@ (8004850 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f001 fe50 	bl	8006448 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80047c2:	2110      	movs	r1, #16
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f001 fe71 	bl	80064ac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e029      	b.n	8004830 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f0:	f043 0210 	orr.w	r2, r3, #16
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e018      	b.n	8004836 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a13      	ldr	r2, [pc, #76]	@ (8004854 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004808:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480e:	b2da      	uxtb	r2, r3
 8004810:	8979      	ldrh	r1, [r7, #10]
 8004812:	4b0f      	ldr	r3, [pc, #60]	@ (8004850 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f001 fe14 	bl	8006448 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004828:	2102      	movs	r1, #2
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f001 fe3e 	bl	80064ac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	e000      	b.n	8004836 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004834:	2302      	movs	r3, #2
  }
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	ffff0000 	.word	0xffff0000
 8004844:	0800519f 	.word	0x0800519f
 8004848:	080062a1 	.word	0x080062a1
 800484c:	08006399 	.word	0x08006399
 8004850:	80002400 	.word	0x80002400
 8004854:	08004d13 	.word	0x08004d13

08004858 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b20      	cmp	r3, #32
 8004870:	f040 80d1 	bne.w	8004a16 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004886:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0c5      	b.n	8004a18 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_I2C_Slave_Transmit_DMA+0x42>
 8004896:	2302      	movs	r3, #2
 8004898:	e0be      	b.n	8004a18 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2221      	movs	r2, #33	@ 0x21
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a53      	ldr	r2, [pc, #332]	@ (8004a20 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80048d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a53      	ldr	r2, [pc, #332]	@ (8004a24 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80048d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048e2:	d117      	bne.n	8004914 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d068      	beq.n	80049f0 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	d022      	beq.n	800496c <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a28 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 800492c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	4a3e      	ldr	r2, [pc, #248]	@ (8004a2c <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8004934:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	2200      	movs	r2, #0
 800493c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	2200      	movs	r2, #0
 8004944:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800494e:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8004956:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800495c:	f7fd fd6c 	bl	8002438 <HAL_DMA_Start_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d12e      	bne.n	80049c8 <HAL_I2C_Slave_Transmit_DMA+0x170>
 800496a:	e013      	b.n	8004994 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2228      	movs	r2, #40	@ 0x28
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004980:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e041      	b.n	8004a18 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049a2:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80049ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f001 fd7b 	bl	80064ac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e024      	b.n	8004a12 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2228      	movs	r2, #40	@ 0x28
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049dc:	f043 0210 	orr.w	r2, r3, #16
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e013      	b.n	8004a18 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049fe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f001 fd4d 	bl	80064ac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	ffff0000 	.word	0xffff0000
 8004a24:	08005641 	.word	0x08005641
 8004a28:	08006261 	.word	0x08006261
 8004a2c:	08006399 	.word	0x08006399

08004a30 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	f040 809b 	bne.w	8004b82 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_I2C_Slave_Receive_DMA+0x28>
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e08f      	b.n	8004b84 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_I2C_Slave_Receive_DMA+0x42>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e088      	b.n	8004b84 <HAL_I2C_Slave_Receive_DMA+0x154>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2222      	movs	r2, #34	@ 0x22
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a38      	ldr	r2, [pc, #224]	@ (8004b8c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8004aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a38      	ldr	r2, [pc, #224]	@ (8004b90 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8004ab0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004abe:	4a35      	ldr	r2, [pc, #212]	@ (8004b94 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8004ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac6:	4a34      	ldr	r2, [pc, #208]	@ (8004b98 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8004ac8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	2200      	movs	r2, #0
 8004ad0:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3324      	adds	r3, #36	@ 0x24
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004aec:	f7fd fca4 	bl	8002438 <HAL_DMA_Start_IT>
 8004af0:	4603      	mov	r3, r0
 8004af2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d12f      	bne.n	8004b5a <HAL_I2C_Slave_Receive_DMA+0x12a>
 8004afa:	e013      	b.n	8004b24 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2228      	movs	r2, #40	@ 0x28
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e02f      	b.n	8004b84 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b32:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f001 fcb3 	bl	80064ac <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b54:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e014      	b.n	8004b84 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2228      	movs	r2, #40	@ 0x28
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	f043 0210 	orr.w	r2, r3, #16
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	ffff0000 	.word	0xffff0000
 8004b90:	08005641 	.word	0x08005641
 8004b94:	08006353 	.word	0x08006353
 8004b98:	08006399 	.word	0x08006399

08004b9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	4798      	blx	r3
  }
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d010      	beq.n	8004c16 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	09db      	lsrs	r3, r3, #7
 8004bf8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c14:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	0a9b      	lsrs	r3, r3, #10
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d010      	beq.n	8004c44 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	09db      	lsrs	r3, r3, #7
 8004c26:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	f043 0208 	orr.w	r2, r3, #8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	0a5b      	lsrs	r3, r3, #9
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d010      	beq.n	8004c72 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	09db      	lsrs	r3, r3, #7
 8004c54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c60:	f043 0202 	orr.w	r2, r3, #2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c70:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 030b 	and.w	r3, r3, #11
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f001 f965 	bl	8005f54 <I2C_ITError>
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	70fb      	strb	r3, [r7, #3]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b088      	sub	sp, #32
 8004d16:	af02      	add	r7, sp, #8
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <I2C_Master_ISR_IT+0x1e>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e12e      	b.n	8004f8e <I2C_Master_ISR_IT+0x27c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00d      	beq.n	8004d6c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2210      	movs	r2, #16
 8004d56:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5c:	f043 0204 	orr.w	r2, r3, #4
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f001 fa0c 	bl	8006182 <I2C_Flush_TXDR>
 8004d6a:	e0fb      	b.n	8004f64 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d023      	beq.n	8004dc0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01d      	beq.n	8004dc0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0304 	bic.w	r3, r3, #4
 8004d8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dbe:	e0d1      	b.n	8004f64 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	099b      	lsrs	r3, r3, #6
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d12a      	bne.n	8004e22 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d024      	beq.n	8004e22 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01e      	beq.n	8004e22 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80ba 	beq.w	8004f64 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004e20:	e0a0      	b.n	8004f64 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	09db      	lsrs	r3, r3, #7
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d06b      	beq.n	8004f06 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	099b      	lsrs	r3, r3, #6
 8004e32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d065      	beq.n	8004f06 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d04e      	beq.n	8004ee2 <I2C_Master_ISR_IT+0x1d0>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d14a      	bne.n	8004ee2 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e58:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2bff      	cmp	r3, #255	@ 0xff
 8004e62:	d91c      	bls.n	8004e9e <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	0c1b      	lsrs	r3, r3, #16
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d103      	bne.n	8004e80 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004e7e:	e002      	b.n	8004e86 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	22ff      	movs	r2, #255	@ 0xff
 8004e84:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	8a79      	ldrh	r1, [r7, #18]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f001 fad6 	bl	8006448 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e9c:	e032      	b.n	8004f04 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004eb0:	d00b      	beq.n	8004eca <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb6:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004ebc:	8a79      	ldrh	r1, [r7, #18]
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	9000      	str	r0, [sp, #0]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f001 fac0 	bl	8006448 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec8:	e01c      	b.n	8004f04 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	8a79      	ldrh	r1, [r7, #18]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f001 fab4 	bl	8006448 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee0:	e010      	b.n	8004f04 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ef0:	d003      	beq.n	8004efa <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fd09 	bl	800590a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ef8:	e034      	b.n	8004f64 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004efa:	2140      	movs	r1, #64	@ 0x40
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f001 f829 	bl	8005f54 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f02:	e02f      	b.n	8004f64 <I2C_Master_ISR_IT+0x252>
 8004f04:	e02e      	b.n	8004f64 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d028      	beq.n	8004f64 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	099b      	lsrs	r3, r3, #6
 8004f16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d022      	beq.n	8004f64 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d119      	bne.n	8004f5c <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f36:	d015      	beq.n	8004f64 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f40:	d108      	bne.n	8004f54 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	e007      	b.n	8004f64 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fcd8 	bl	800590a <I2C_ITMasterSeqCplt>
 8004f5a:	e003      	b.n	8004f64 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004f5c:	2140      	movs	r1, #64	@ 0x40
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fff8 	bl	8005f54 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fd5e 	bl	8005a40 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <I2C_Slave_ISR_IT+0x24>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e0ed      	b.n	8005196 <I2C_Slave_ISR_IT+0x200>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004fda:	6939      	ldr	r1, [r7, #16]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fdf9 	bl	8005bd4 <I2C_ITSlaveCplt>
 8004fe2:	e0d3      	b.n	800518c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d04d      	beq.n	800508c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d047      	beq.n	800508c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d128      	bne.n	8005058 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b28      	cmp	r3, #40	@ 0x28
 8005010:	d108      	bne.n	8005024 <I2C_Slave_ISR_IT+0x8e>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005018:	d104      	bne.n	8005024 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800501a:	6939      	ldr	r1, [r7, #16]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 ff43 	bl	8005ea8 <I2C_ITListenCplt>
 8005022:	e032      	b.n	800508a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b29      	cmp	r3, #41	@ 0x29
 800502e:	d10e      	bne.n	800504e <I2C_Slave_ISR_IT+0xb8>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005036:	d00a      	beq.n	800504e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2210      	movs	r2, #16
 800503e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f001 f89e 	bl	8006182 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fc9c 	bl	8005984 <I2C_ITSlaveSeqCplt>
 800504c:	e01d      	b.n	800508a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2210      	movs	r2, #16
 8005054:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005056:	e096      	b.n	8005186 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2210      	movs	r2, #16
 800505e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005064:	f043 0204 	orr.w	r2, r3, #4
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <I2C_Slave_ISR_IT+0xe6>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005078:	f040 8085 	bne.w	8005186 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005080:	4619      	mov	r1, r3
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 ff66 	bl	8005f54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005088:	e07d      	b.n	8005186 <I2C_Slave_ISR_IT+0x1f0>
 800508a:	e07c      	b.n	8005186 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	089b      	lsrs	r3, r3, #2
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d030      	beq.n	80050fa <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	089b      	lsrs	r3, r3, #2
 800509c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d02a      	beq.n	80050fa <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d018      	beq.n	80050e0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d14f      	bne.n	800518a <I2C_Slave_ISR_IT+0x1f4>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050f0:	d04b      	beq.n	800518a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fc46 	bl	8005984 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80050f8:	e047      	b.n	800518a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	08db      	lsrs	r3, r3, #3
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	08db      	lsrs	r3, r3, #3
 800510a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005112:	6939      	ldr	r1, [r7, #16]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fb74 	bl	8005802 <I2C_ITAddrCplt>
 800511a:	e037      	b.n	800518c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d031      	beq.n	800518c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02b      	beq.n	800518c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d018      	beq.n	8005170 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	781a      	ldrb	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800516e:	e00d      	b.n	800518c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005176:	d002      	beq.n	800517e <I2C_Slave_ISR_IT+0x1e8>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fc00 	bl	8005984 <I2C_ITSlaveSeqCplt>
 8005184:	e002      	b.n	800518c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800518a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b088      	sub	sp, #32
 80051a2:	af02      	add	r7, sp, #8
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <I2C_Master_ISR_DMA+0x1a>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e0f0      	b.n	800539a <I2C_Master_ISR_DMA+0x1fc>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d017      	beq.n	80051fc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d011      	beq.n	80051fc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2210      	movs	r2, #16
 80051de:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e4:	f043 0204 	orr.w	r2, r3, #4
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80051ec:	2120      	movs	r1, #32
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f001 f95c 	bl	80064ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 ffc4 	bl	8006182 <I2C_Flush_TXDR>
 80051fa:	e0c9      	b.n	8005390 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8081 	beq.w	800530c <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	099b      	lsrs	r3, r3, #6
 800520e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005212:	2b00      	cmp	r3, #0
 8005214:	d07a      	beq.n	800530c <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005224:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d05c      	beq.n	80052ea <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800523c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2bff      	cmp	r3, #255	@ 0xff
 8005246:	d914      	bls.n	8005272 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d103      	bne.n	8005264 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005262:	e002      	b.n	800526a <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	22ff      	movs	r2, #255	@ 0xff
 8005268:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800526a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e010      	b.n	8005294 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005284:	d003      	beq.n	800528e <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e002      	b.n	8005294 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800528e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005292:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005298:	b2da      	uxtb	r2, r3
 800529a:	8a79      	ldrh	r1, [r7, #18]
 800529c:	2300      	movs	r3, #0
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f001 f8d0 	bl	8006448 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b22      	cmp	r3, #34	@ 0x22
 80052c4:	d108      	bne.n	80052d8 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80052d6:	e05b      	b.n	8005390 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052e6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80052e8:	e052      	b.n	8005390 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052f8:	d003      	beq.n	8005302 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fb05 	bl	800590a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005300:	e046      	b.n	8005390 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005302:	2140      	movs	r1, #64	@ 0x40
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fe25 	bl	8005f54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800530a:	e041      	b.n	8005390 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	099b      	lsrs	r3, r3, #6
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d029      	beq.n	800536c <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	099b      	lsrs	r3, r3, #6
 800531c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005320:	2b00      	cmp	r3, #0
 8005322:	d023      	beq.n	800536c <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d119      	bne.n	8005362 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005338:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800533c:	d027      	beq.n	800538e <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005346:	d108      	bne.n	800535a <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005356:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005358:	e019      	b.n	800538e <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fad5 	bl	800590a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005360:	e015      	b.n	800538e <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005362:	2140      	movs	r1, #64	@ 0x40
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fdf5 	bl	8005f54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800536a:	e010      	b.n	800538e <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fb5a 	bl	8005a40 <I2C_ITMasterCplt>
 800538c:	e000      	b.n	8005390 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800538e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80053b0:	4b94      	ldr	r3, [pc, #592]	@ (8005604 <I2C_Mem_ISR_DMA+0x260>)
 80053b2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <I2C_Mem_ISR_DMA+0x1e>
 80053be:	2302      	movs	r3, #2
 80053c0:	e139      	b.n	8005636 <I2C_Mem_ISR_DMA+0x292>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d017      	beq.n	8005406 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d011      	beq.n	8005406 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2210      	movs	r2, #16
 80053e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ee:	f043 0204 	orr.w	r2, r3, #4
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80053f6:	2120      	movs	r1, #32
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f001 f857 	bl	80064ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 febf 	bl	8006182 <I2C_Flush_TXDR>
 8005404:	e112      	b.n	800562c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00f      	beq.n	8005432 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005426:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800542e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005430:	e0fc      	b.n	800562c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	09db      	lsrs	r3, r3, #7
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d06e      	beq.n	800551c <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	099b      	lsrs	r3, r3, #6
 8005442:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005446:	2b00      	cmp	r3, #0
 8005448:	d068      	beq.n	800551c <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800544a:	2101      	movs	r1, #1
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f001 f8b1 	bl	80065b4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005452:	2110      	movs	r1, #16
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f001 f829 	bl	80064ac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d056      	beq.n	8005512 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	2bff      	cmp	r3, #255	@ 0xff
 800546c:	d91e      	bls.n	80054ac <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d103      	bne.n	800548a <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005488:	e002      	b.n	8005490 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	22ff      	movs	r2, #255	@ 0xff
 800548e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005494:	b299      	uxth	r1, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800549a:	b2da      	uxtb	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 ffcf 	bl	8006448 <I2C_TransferConfig>
 80054aa:	e011      	b.n	80054d0 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ba:	b299      	uxth	r1, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	2300      	movs	r3, #0
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 ffbc 	bl	8006448 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b22      	cmp	r3, #34	@ 0x22
 80054ec:	d108      	bne.n	8005500 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80054fe:	e095      	b.n	800562c <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800550e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005510:	e08c      	b.n	800562c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005512:	2140      	movs	r1, #64	@ 0x40
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fd1d 	bl	8005f54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800551a:	e087      	b.n	800562c <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d071      	beq.n	800560c <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005530:	2b00      	cmp	r3, #0
 8005532:	d06b      	beq.n	800560c <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005534:	2101      	movs	r1, #1
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f001 f83c 	bl	80065b4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800553c:	2110      	movs	r1, #16
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 ffb4 	bl	80064ac <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b22      	cmp	r3, #34	@ 0x22
 800554e:	d101      	bne.n	8005554 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8005550:	4b2d      	ldr	r3, [pc, #180]	@ (8005608 <I2C_Mem_ISR_DMA+0x264>)
 8005552:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2bff      	cmp	r3, #255	@ 0xff
 800555c:	d91e      	bls.n	800559c <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	0c1b      	lsrs	r3, r3, #16
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d103      	bne.n	800557a <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005578:	e002      	b.n	8005580 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	22ff      	movs	r2, #255	@ 0xff
 800557e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005584:	b299      	uxth	r1, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558a:	b2da      	uxtb	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 ff57 	bl	8006448 <I2C_TransferConfig>
 800559a:	e011      	b.n	80055c0 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055aa:	b299      	uxth	r1, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 ff44 	bl	8006448 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b22      	cmp	r3, #34	@ 0x22
 80055dc:	d108      	bne.n	80055f0 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055ec:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055ee:	e01d      	b.n	800562c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055fe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005600:	e014      	b.n	800562c <I2C_Mem_ISR_DMA+0x288>
 8005602:	bf00      	nop
 8005604:	80002000 	.word	0x80002000
 8005608:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fa0a 	bl	8005a40 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop

08005640 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <I2C_Slave_ISR_DMA+0x24>
 8005660:	2302      	movs	r3, #2
 8005662:	e0ca      	b.n	80057fa <I2C_Slave_ISR_DMA+0x1ba>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 faa4 	bl	8005bd4 <I2C_ITSlaveCplt>
 800568c:	e0b0      	b.n	80057f0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 809a 	beq.w	80057d0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8093 	beq.w	80057d0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	0b9b      	lsrs	r3, r3, #14
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d105      	bne.n	80056c2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	0bdb      	lsrs	r3, r3, #15
 80056ba:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d07f      	beq.n	80057c2 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	0bdb      	lsrs	r3, r3, #15
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80056e2:	2301      	movs	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00d      	beq.n	800570a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	0b9b      	lsrs	r3, r3, #14
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8005706:	2301      	movs	r3, #1
 8005708:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d128      	bne.n	8005762 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b28      	cmp	r3, #40	@ 0x28
 800571a:	d108      	bne.n	800572e <I2C_Slave_ISR_DMA+0xee>
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005722:	d104      	bne.n	800572e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fbbe 	bl	8005ea8 <I2C_ITListenCplt>
 800572c:	e048      	b.n	80057c0 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b29      	cmp	r3, #41	@ 0x29
 8005738:	d10e      	bne.n	8005758 <I2C_Slave_ISR_DMA+0x118>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005740:	d00a      	beq.n	8005758 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2210      	movs	r2, #16
 8005748:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fd19 	bl	8006182 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f917 	bl	8005984 <I2C_ITSlaveSeqCplt>
 8005756:	e033      	b.n	80057c0 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2210      	movs	r2, #16
 800575e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005760:	e034      	b.n	80057cc <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2210      	movs	r2, #16
 8005768:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576e:	f043 0204 	orr.w	r2, r3, #4
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <I2C_Slave_ISR_DMA+0x14c>
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800578a:	d11f      	bne.n	80057cc <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	2b21      	cmp	r3, #33	@ 0x21
 8005790:	d002      	beq.n	8005798 <I2C_Slave_ISR_DMA+0x158>
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	2b29      	cmp	r3, #41	@ 0x29
 8005796:	d103      	bne.n	80057a0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2221      	movs	r2, #33	@ 0x21
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
 800579e:	e008      	b.n	80057b2 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b22      	cmp	r3, #34	@ 0x22
 80057a4:	d002      	beq.n	80057ac <I2C_Slave_ISR_DMA+0x16c>
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80057aa:	d102      	bne.n	80057b2 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2222      	movs	r2, #34	@ 0x22
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b6:	4619      	mov	r1, r3
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fbcb 	bl	8005f54 <I2C_ITError>
      if (treatdmanack == 1U)
 80057be:	e005      	b.n	80057cc <I2C_Slave_ISR_DMA+0x18c>
 80057c0:	e004      	b.n	80057cc <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2210      	movs	r2, #16
 80057c8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057ca:	e011      	b.n	80057f0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80057cc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057ce:	e00f      	b.n	80057f0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	08db      	lsrs	r3, r3, #3
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	08db      	lsrs	r3, r3, #3
 80057e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f809 	bl	8005802 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005818:	2b28      	cmp	r3, #40	@ 0x28
 800581a:	d16a      	bne.n	80058f2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	0c1b      	lsrs	r3, r3, #16
 8005834:	b29b      	uxth	r3, r3
 8005836:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800583a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005848:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005856:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d138      	bne.n	80058d2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005860:	897b      	ldrh	r3, [r7, #10]
 8005862:	09db      	lsrs	r3, r3, #7
 8005864:	b29a      	uxth	r2, r3
 8005866:	89bb      	ldrh	r3, [r7, #12]
 8005868:	4053      	eors	r3, r2
 800586a:	b29b      	uxth	r3, r3
 800586c:	f003 0306 	and.w	r3, r3, #6
 8005870:	2b00      	cmp	r3, #0
 8005872:	d11c      	bne.n	80058ae <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005874:	897b      	ldrh	r3, [r7, #10]
 8005876:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005886:	2b02      	cmp	r3, #2
 8005888:	d13b      	bne.n	8005902 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2208      	movs	r2, #8
 8005896:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058a0:	89ba      	ldrh	r2, [r7, #12]
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff f9f3 	bl	8004c92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058ac:	e029      	b.n	8005902 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80058ae:	893b      	ldrh	r3, [r7, #8]
 80058b0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80058b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fe7c 	bl	80065b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058c4:	89ba      	ldrh	r2, [r7, #12]
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff f9e1 	bl	8004c92 <HAL_I2C_AddrCallback>
}
 80058d0:	e017      	b.n	8005902 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80058d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fe6c 	bl	80065b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058e4:	89ba      	ldrh	r2, [r7, #12]
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff f9d1 	bl	8004c92 <HAL_I2C_AddrCallback>
}
 80058f0:	e007      	b.n	8005902 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2208      	movs	r2, #8
 80058f8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b21      	cmp	r3, #33	@ 0x21
 8005924:	d115      	bne.n	8005952 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2211      	movs	r2, #17
 8005932:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800593a:	2101      	movs	r1, #1
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fe39 	bl	80065b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f00f ff8a 	bl	8015864 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005950:	e014      	b.n	800597c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2212      	movs	r2, #18
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005966:	2102      	movs	r1, #2
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fe23 	bl	80065b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f00f ff8a 	bl	8015890 <HAL_I2C_MasterRxCpltCallback>
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	0b9b      	lsrs	r3, r3, #14
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e00d      	b.n	80059d6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0bdb      	lsrs	r3, r3, #15
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b29      	cmp	r3, #41	@ 0x29
 80059e0:	d112      	bne.n	8005a08 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2228      	movs	r2, #40	@ 0x28
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2221      	movs	r2, #33	@ 0x21
 80059ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80059f0:	2101      	movs	r1, #1
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fdde 	bl	80065b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f00f ff5b 	bl	80158bc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a06:	e017      	b.n	8005a38 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a12:	d111      	bne.n	8005a38 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2228      	movs	r2, #40	@ 0x28
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2222      	movs	r2, #34	@ 0x22
 8005a20:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a22:	2102      	movs	r1, #2
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fdc5 	bl	80065b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f00f ff58 	bl	80158e8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2220      	movs	r2, #32
 8005a54:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b21      	cmp	r3, #33	@ 0x21
 8005a60:	d107      	bne.n	8005a72 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a62:	2101      	movs	r1, #1
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fda5 	bl	80065b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2211      	movs	r2, #17
 8005a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a70:	e00c      	b.n	8005a8c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b22      	cmp	r3, #34	@ 0x22
 8005a7c:	d106      	bne.n	8005a8c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a7e:	2102      	movs	r1, #2
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fd97 	bl	80065b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2212      	movs	r2, #18
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b4d      	ldr	r3, [pc, #308]	@ (8005bcc <I2C_ITMasterCplt+0x18c>)
 8005a98:	400b      	ands	r3, r1
 8005a9a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd0 <I2C_ITMasterCplt+0x190>)
 8005aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2210      	movs	r2, #16
 8005aba:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac0:	f043 0204 	orr.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b60      	cmp	r3, #96	@ 0x60
 8005ad2:	d10b      	bne.n	8005aec <I2C_ITMasterCplt+0xac>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005aea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb48 	bl	8006182 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b60      	cmp	r3, #96	@ 0x60
 8005b02:	d002      	beq.n	8005b0a <I2C_ITMasterCplt+0xca>
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d006      	beq.n	8005b18 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa1f 	bl	8005f54 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b16:	e054      	b.n	8005bc2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b21      	cmp	r3, #33	@ 0x21
 8005b22:	d124      	bne.n	8005b6e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b40      	cmp	r3, #64	@ 0x40
 8005b3c:	d10b      	bne.n	8005b56 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff f8b7 	bl	8004cc2 <HAL_I2C_MemTxCpltCallback>
}
 8005b54:	e035      	b.n	8005bc2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f00f fe7c 	bl	8015864 <HAL_I2C_MasterTxCpltCallback>
}
 8005b6c:	e029      	b.n	8005bc2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b22      	cmp	r3, #34	@ 0x22
 8005b78:	d123      	bne.n	8005bc2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b40      	cmp	r3, #64	@ 0x40
 8005b92:	d10b      	bne.n	8005bac <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff f896 	bl	8004cd6 <HAL_I2C_MemRxCpltCallback>
}
 8005baa:	e00a      	b.n	8005bc2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f00f fe67 	bl	8015890 <HAL_I2C_MasterRxCpltCallback>
}
 8005bc2:	bf00      	nop
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	fe00e800 	.word	0xfe00e800
 8005bd0:	ffff0000 	.word	0xffff0000

08005bd4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c00:	7afb      	ldrb	r3, [r7, #11]
 8005c02:	2b21      	cmp	r3, #33	@ 0x21
 8005c04:	d002      	beq.n	8005c0c <I2C_ITSlaveCplt+0x38>
 8005c06:	7afb      	ldrb	r3, [r7, #11]
 8005c08:	2b29      	cmp	r3, #41	@ 0x29
 8005c0a:	d108      	bne.n	8005c1e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c0c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fccf 	bl	80065b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2221      	movs	r2, #33	@ 0x21
 8005c1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c1c:	e019      	b.n	8005c52 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	2b22      	cmp	r3, #34	@ 0x22
 8005c22:	d002      	beq.n	8005c2a <I2C_ITSlaveCplt+0x56>
 8005c24:	7afb      	ldrb	r3, [r7, #11]
 8005c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c28:	d108      	bne.n	8005c3c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c2a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fcc0 	bl	80065b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2222      	movs	r2, #34	@ 0x22
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c3a:	e00a      	b.n	8005c52 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	2b28      	cmp	r3, #40	@ 0x28
 8005c40:	d107      	bne.n	8005c52 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005c42:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fcb4 	bl	80065b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c60:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea0 <I2C_ITSlaveCplt+0x2cc>)
 8005c6e:	400b      	ands	r3, r1
 8005c70:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fa85 	bl	8006182 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	0b9b      	lsrs	r3, r3, #14
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d013      	beq.n	8005cac <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c92:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d020      	beq.n	8005cde <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005caa:	e018      	b.n	8005cde <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	0bdb      	lsrs	r3, r3, #15
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d012      	beq.n	8005cde <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d006      	beq.n	8005cde <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d020      	beq.n	8005d2c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 0304 	bic.w	r3, r3, #4
 8005cf0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	f043 0204 	orr.w	r2, r3, #4
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d04a      	beq.n	8005de4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d044      	beq.n	8005de4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d128      	bne.n	8005db6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b28      	cmp	r3, #40	@ 0x28
 8005d6e:	d108      	bne.n	8005d82 <I2C_ITSlaveCplt+0x1ae>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d76:	d104      	bne.n	8005d82 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f894 	bl	8005ea8 <I2C_ITListenCplt>
 8005d80:	e030      	b.n	8005de4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b29      	cmp	r3, #41	@ 0x29
 8005d8c:	d10e      	bne.n	8005dac <I2C_ITSlaveCplt+0x1d8>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d94:	d00a      	beq.n	8005dac <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2210      	movs	r2, #16
 8005d9c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9ef 	bl	8006182 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fded 	bl	8005984 <I2C_ITSlaveSeqCplt>
 8005daa:	e01b      	b.n	8005de4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	61da      	str	r2, [r3, #28]
 8005db4:	e016      	b.n	8005de4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2210      	movs	r2, #16
 8005dbc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc2:	f043 0204 	orr.w	r2, r3, #4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <I2C_ITSlaveCplt+0x204>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dd6:	d105      	bne.n	8005de4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8b8 	bl	8005f54 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f8a7 	bl	8005f54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b28      	cmp	r3, #40	@ 0x28
 8005e10:	d141      	bne.n	8005e96 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e12:	6979      	ldr	r1, [r7, #20]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f847 	bl	8005ea8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e1a:	e03c      	b.n	8005e96 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e24:	d014      	beq.n	8005e50 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff fdac 	bl	8005984 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea4 <I2C_ITSlaveCplt+0x2d0>)
 8005e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fe ff30 	bl	8004cae <HAL_I2C_ListenCpltCallback>
}
 8005e4e:	e022      	b.n	8005e96 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b22      	cmp	r3, #34	@ 0x22
 8005e5a:	d10e      	bne.n	8005e7a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f00f fd38 	bl	80158e8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e78:	e00d      	b.n	8005e96 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f00f fd13 	bl	80158bc <HAL_I2C_SlaveTxCpltCallback>
}
 8005e96:	bf00      	nop
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	fe00e800 	.word	0xfe00e800
 8005ea4:	ffff0000 	.word	0xffff0000

08005ea8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a26      	ldr	r2, [pc, #152]	@ (8005f50 <I2C_ITListenCplt+0xa8>)
 8005eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	089b      	lsrs	r3, r3, #2
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d022      	beq.n	8005f26 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d012      	beq.n	8005f26 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f043 0204 	orr.w	r2, r3, #4
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f26:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fb42 	bl	80065b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2210      	movs	r2, #16
 8005f36:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fe feb4 	bl	8004cae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	ffff0000 	.word	0xffff0000

08005f54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f64:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a6d      	ldr	r2, [pc, #436]	@ (8006128 <I2C_ITError+0x1d4>)
 8005f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	2b28      	cmp	r3, #40	@ 0x28
 8005f8a:	d005      	beq.n	8005f98 <I2C_ITError+0x44>
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	2b29      	cmp	r3, #41	@ 0x29
 8005f90:	d002      	beq.n	8005f98 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f96:	d10b      	bne.n	8005fb0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f98:	2103      	movs	r1, #3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fb0a 	bl	80065b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2228      	movs	r2, #40	@ 0x28
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a60      	ldr	r2, [pc, #384]	@ (800612c <I2C_ITError+0x1d8>)
 8005fac:	635a      	str	r2, [r3, #52]	@ 0x34
 8005fae:	e030      	b.n	8006012 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fb0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fafd 	bl	80065b4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f8e1 	bl	8006182 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b60      	cmp	r3, #96	@ 0x60
 8005fca:	d01f      	beq.n	800600c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d114      	bne.n	800600c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	d109      	bne.n	8006004 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffc:	f043 0204 	orr.w	r2, r3, #4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2220      	movs	r2, #32
 800600a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006016:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601c:	2b00      	cmp	r3, #0
 800601e:	d039      	beq.n	8006094 <I2C_ITError+0x140>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b11      	cmp	r3, #17
 8006024:	d002      	beq.n	800602c <I2C_ITError+0xd8>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b21      	cmp	r3, #33	@ 0x21
 800602a:	d133      	bne.n	8006094 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800603a:	d107      	bne.n	800604c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800604a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	4618      	mov	r0, r3
 8006052:	f7fc fc6d 	bl	8002930 <HAL_DMA_GetState>
 8006056:	4603      	mov	r3, r0
 8006058:	2b01      	cmp	r3, #1
 800605a:	d017      	beq.n	800608c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	4a33      	ldr	r2, [pc, #204]	@ (8006130 <I2C_ITError+0x1dc>)
 8006062:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	4618      	mov	r0, r3
 8006072:	f7fc fab1 	bl	80025d8 <HAL_DMA_Abort_IT>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d04d      	beq.n	8006118 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006086:	4610      	mov	r0, r2
 8006088:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800608a:	e045      	b.n	8006118 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f851 	bl	8006134 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006092:	e041      	b.n	8006118 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d039      	beq.n	8006110 <I2C_ITError+0x1bc>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b12      	cmp	r3, #18
 80060a0:	d002      	beq.n	80060a8 <I2C_ITError+0x154>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b22      	cmp	r3, #34	@ 0x22
 80060a6:	d133      	bne.n	8006110 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060b6:	d107      	bne.n	80060c8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fc fc2f 	bl	8002930 <HAL_DMA_GetState>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d017      	beq.n	8006108 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060dc:	4a14      	ldr	r2, [pc, #80]	@ (8006130 <I2C_ITError+0x1dc>)
 80060de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fc fa73 	bl	80025d8 <HAL_DMA_Abort_IT>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d011      	beq.n	800611c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006102:	4610      	mov	r0, r2
 8006104:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006106:	e009      	b.n	800611c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f813 	bl	8006134 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800610e:	e005      	b.n	800611c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f80f 	bl	8006134 <I2C_TreatErrorCallback>
  }
}
 8006116:	e002      	b.n	800611e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800611c:	bf00      	nop
}
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	ffff0000 	.word	0xffff0000
 800612c:	08004f97 	.word	0x08004f97
 8006130:	0800640d 	.word	0x0800640d

08006134 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b60      	cmp	r3, #96	@ 0x60
 8006146:	d10e      	bne.n	8006166 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fe fdcd 	bl	8004cfe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006164:	e009      	b.n	800617a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fe fdb8 	bl	8004cea <HAL_I2C_ErrorCallback>
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b02      	cmp	r3, #2
 8006196:	d103      	bne.n	80061a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2200      	movs	r2, #0
 800619e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d007      	beq.n	80061be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	699a      	ldr	r2, [r3, #24]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0201 	orr.w	r2, r2, #1
 80061bc:	619a      	str	r2, [r3, #24]
  }
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061e6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80061f2:	2120      	movs	r1, #32
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f959 	bl	80064ac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80061fa:	e02d      	b.n	8006258 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620e:	b29b      	uxth	r3, r3
 8006210:	2bff      	cmp	r3, #255	@ 0xff
 8006212:	d903      	bls.n	800621c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	22ff      	movs	r2, #255	@ 0xff
 8006218:	851a      	strh	r2, [r3, #40]	@ 0x28
 800621a:	e004      	b.n	8006226 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	4619      	mov	r1, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3328      	adds	r3, #40	@ 0x28
 8006236:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800623c:	f7fc f8fc 	bl	8002438 <HAL_DMA_Start_IT>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006246:	2110      	movs	r1, #16
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff fe83 	bl	8005f54 <I2C_ITError>
}
 800624e:	e003      	b.n	8006258 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006250:	2140      	movs	r1, #64	@ 0x40
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f92a 	bl	80064ac <I2C_Enable_IRQ>
}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800627a:	d002      	beq.n	8006282 <I2C_DMASlaveTransmitCplt+0x22>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006290:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fb76 	bl	8005984 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006298:	bf00      	nop
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062bc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062c8:	2120      	movs	r1, #32
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f8ee 	bl	80064ac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80062d0:	e03b      	b.n	800634a <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80062da:	441a      	add	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2bff      	cmp	r3, #255	@ 0xff
 80062e8:	d911      	bls.n	800630e <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	0c1b      	lsrs	r3, r3, #16
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d103      	bne.n	8006306 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006304:	e008      	b.n	8006318 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	22ff      	movs	r2, #255	@ 0xff
 800630a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800630c:	e004      	b.n	8006318 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3324      	adds	r3, #36	@ 0x24
 8006322:	4619      	mov	r1, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006328:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800632e:	f7fc f883 	bl	8002438 <HAL_DMA_Start_IT>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006338:	2110      	movs	r1, #16
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fe0a 	bl	8005f54 <I2C_ITError>
}
 8006340:	e003      	b.n	800634a <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006342:	2140      	movs	r1, #64	@ 0x40
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f8b1 	bl	80064ac <I2C_Enable_IRQ>
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10e      	bne.n	8006390 <I2C_DMASlaveReceiveCplt+0x3e>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006378:	d00a      	beq.n	8006390 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006388:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7ff fafa 	bl	8005984 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006390:	bf00      	nop
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80063be:	2301      	movs	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80063d6:	2301      	movs	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fc fab6 	bl	800294c <HAL_DMA_GetError>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d00e      	beq.n	8006404 <I2C_DMAError+0x6c>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063fa:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80063fc:	2110      	movs	r1, #16
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f7ff fda8 	bl	8005f54 <I2C_ITError>
  }
}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006418:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006426:	2200      	movs	r2, #0
 8006428:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006436:	2200      	movs	r2, #0
 8006438:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7ff fe7a 	bl	8006134 <I2C_TreatErrorCallback>
}
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	607b      	str	r3, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	817b      	strh	r3, [r7, #10]
 8006456:	4613      	mov	r3, r2
 8006458:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800645a:	897b      	ldrh	r3, [r7, #10]
 800645c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006460:	7a7b      	ldrb	r3, [r7, #9]
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006468:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	4313      	orrs	r3, r2
 8006472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006476:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	0d5b      	lsrs	r3, r3, #21
 8006482:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006486:	4b08      	ldr	r3, [pc, #32]	@ (80064a8 <I2C_TransferConfig+0x60>)
 8006488:	430b      	orrs	r3, r1
 800648a:	43db      	mvns	r3, r3
 800648c:	ea02 0103 	and.w	r1, r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	03ff63ff 	.word	0x03ff63ff

080064ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c0:	4a39      	ldr	r2, [pc, #228]	@ (80065a8 <I2C_Enable_IRQ+0xfc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d032      	beq.n	800652c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80064ca:	4a38      	ldr	r2, [pc, #224]	@ (80065ac <I2C_Enable_IRQ+0x100>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d02d      	beq.n	800652c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80064d4:	4a36      	ldr	r2, [pc, #216]	@ (80065b0 <I2C_Enable_IRQ+0x104>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d028      	beq.n	800652c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	da03      	bge.n	80064ea <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80064e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064ea:	887b      	ldrh	r3, [r7, #2]
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80064fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80064fc:	887b      	ldrh	r3, [r7, #2]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800650c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800650e:	887b      	ldrh	r3, [r7, #2]
 8006510:	2b10      	cmp	r3, #16
 8006512:	d103      	bne.n	800651c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800651a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800651c:	887b      	ldrh	r3, [r7, #2]
 800651e:	2b20      	cmp	r3, #32
 8006520:	d133      	bne.n	800658a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f043 0320 	orr.w	r3, r3, #32
 8006528:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800652a:	e02e      	b.n	800658a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800652c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006530:	2b00      	cmp	r3, #0
 8006532:	da03      	bge.n	800653c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800653a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800653c:	887b      	ldrh	r3, [r7, #2]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800654c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800654e:	887b      	ldrh	r3, [r7, #2]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800655e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006560:	887b      	ldrh	r3, [r7, #2]
 8006562:	2b10      	cmp	r3, #16
 8006564:	d103      	bne.n	800656e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800656c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	2b20      	cmp	r3, #32
 8006572:	d103      	bne.n	800657c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800657a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800657c:	887b      	ldrh	r3, [r7, #2]
 800657e:	2b40      	cmp	r3, #64	@ 0x40
 8006580:	d103      	bne.n	800658a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006588:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	430a      	orrs	r2, r1
 8006598:	601a      	str	r2, [r3, #0]
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	0800519f 	.word	0x0800519f
 80065ac:	08005641 	.word	0x08005641
 80065b0:	080053a5 	.word	0x080053a5

080065b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065c4:	887b      	ldrh	r3, [r7, #2]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00f      	beq.n	80065ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80065d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065e2:	2b28      	cmp	r3, #40	@ 0x28
 80065e4:	d003      	beq.n	80065ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065ee:	887b      	ldrh	r3, [r7, #2]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00f      	beq.n	8006618 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80065fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800660c:	2b28      	cmp	r3, #40	@ 0x28
 800660e:	d003      	beq.n	8006618 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006616:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800661c:	2b00      	cmp	r3, #0
 800661e:	da03      	bge.n	8006628 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006626:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006628:	887b      	ldrh	r3, [r7, #2]
 800662a:	2b10      	cmp	r3, #16
 800662c:	d103      	bne.n	8006636 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006634:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006636:	887b      	ldrh	r3, [r7, #2]
 8006638:	2b20      	cmp	r3, #32
 800663a:	d103      	bne.n	8006644 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f043 0320 	orr.w	r3, r3, #32
 8006642:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	d103      	bne.n	8006652 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006650:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6819      	ldr	r1, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	43da      	mvns	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	400a      	ands	r2, r1
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b20      	cmp	r3, #32
 8006684:	d138      	bne.n	80066f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006690:	2302      	movs	r3, #2
 8006692:	e032      	b.n	80066fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	@ 0x24
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0201 	bic.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6819      	ldr	r1, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0201 	orr.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b20      	cmp	r3, #32
 800671a:	d139      	bne.n	8006790 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006726:	2302      	movs	r3, #2
 8006728:	e033      	b.n	8006792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2224      	movs	r2, #36	@ 0x24
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006758:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e000      	b.n	8006792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
  }
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067aa:	4b23      	ldr	r3, [pc, #140]	@ (8006838 <HAL_PWREx_EnableOverDrive+0x98>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	4a22      	ldr	r2, [pc, #136]	@ (8006838 <HAL_PWREx_EnableOverDrive+0x98>)
 80067b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80067b6:	4b20      	ldr	r3, [pc, #128]	@ (8006838 <HAL_PWREx_EnableOverDrive+0x98>)
 80067b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067c2:	4b1e      	ldr	r3, [pc, #120]	@ (800683c <HAL_PWREx_EnableOverDrive+0x9c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1d      	ldr	r2, [pc, #116]	@ (800683c <HAL_PWREx_EnableOverDrive+0x9c>)
 80067c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067ce:	f7fb fa39 	bl	8001c44 <HAL_GetTick>
 80067d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067d4:	e009      	b.n	80067ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067d6:	f7fb fa35 	bl	8001c44 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067e4:	d901      	bls.n	80067ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e022      	b.n	8006830 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067ea:	4b14      	ldr	r3, [pc, #80]	@ (800683c <HAL_PWREx_EnableOverDrive+0x9c>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f6:	d1ee      	bne.n	80067d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067f8:	4b10      	ldr	r3, [pc, #64]	@ (800683c <HAL_PWREx_EnableOverDrive+0x9c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a0f      	ldr	r2, [pc, #60]	@ (800683c <HAL_PWREx_EnableOverDrive+0x9c>)
 80067fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006802:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006804:	f7fb fa1e 	bl	8001c44 <HAL_GetTick>
 8006808:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800680a:	e009      	b.n	8006820 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800680c:	f7fb fa1a 	bl	8001c44 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800681a:	d901      	bls.n	8006820 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e007      	b.n	8006830 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006820:	4b06      	ldr	r3, [pc, #24]	@ (800683c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800682c:	d1ee      	bne.n	800680c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40023800 	.word	0x40023800
 800683c:	40007000 	.word	0x40007000

08006840 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006848:	2300      	movs	r3, #0
 800684a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e291      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 8087 	beq.w	8006972 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006864:	4b96      	ldr	r3, [pc, #600]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 030c 	and.w	r3, r3, #12
 800686c:	2b04      	cmp	r3, #4
 800686e:	d00c      	beq.n	800688a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006870:	4b93      	ldr	r3, [pc, #588]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 030c 	and.w	r3, r3, #12
 8006878:	2b08      	cmp	r3, #8
 800687a:	d112      	bne.n	80068a2 <HAL_RCC_OscConfig+0x62>
 800687c:	4b90      	ldr	r3, [pc, #576]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006888:	d10b      	bne.n	80068a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800688a:	4b8d      	ldr	r3, [pc, #564]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d06c      	beq.n	8006970 <HAL_RCC_OscConfig+0x130>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d168      	bne.n	8006970 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e26b      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068aa:	d106      	bne.n	80068ba <HAL_RCC_OscConfig+0x7a>
 80068ac:	4b84      	ldr	r3, [pc, #528]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a83      	ldr	r2, [pc, #524]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e02e      	b.n	8006918 <HAL_RCC_OscConfig+0xd8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10c      	bne.n	80068dc <HAL_RCC_OscConfig+0x9c>
 80068c2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	4b7c      	ldr	r3, [pc, #496]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a7b      	ldr	r2, [pc, #492]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e01d      	b.n	8006918 <HAL_RCC_OscConfig+0xd8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068e4:	d10c      	bne.n	8006900 <HAL_RCC_OscConfig+0xc0>
 80068e6:	4b76      	ldr	r3, [pc, #472]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a75      	ldr	r2, [pc, #468]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	4b73      	ldr	r3, [pc, #460]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a72      	ldr	r2, [pc, #456]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e00b      	b.n	8006918 <HAL_RCC_OscConfig+0xd8>
 8006900:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a6e      	ldr	r2, [pc, #440]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a6b      	ldr	r2, [pc, #428]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d013      	beq.n	8006948 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fb f990 	bl	8001c44 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006928:	f7fb f98c 	bl	8001c44 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b64      	cmp	r3, #100	@ 0x64
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e21f      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693a:	4b61      	ldr	r3, [pc, #388]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0xe8>
 8006946:	e014      	b.n	8006972 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006948:	f7fb f97c 	bl	8001c44 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006950:	f7fb f978 	bl	8001c44 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	@ 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e20b      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006962:	4b57      	ldr	r3, [pc, #348]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f0      	bne.n	8006950 <HAL_RCC_OscConfig+0x110>
 800696e:	e000      	b.n	8006972 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d069      	beq.n	8006a52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800697e:	4b50      	ldr	r3, [pc, #320]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 030c 	and.w	r3, r3, #12
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800698a:	4b4d      	ldr	r3, [pc, #308]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b08      	cmp	r3, #8
 8006994:	d11c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x190>
 8006996:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d116      	bne.n	80069d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a2:	4b47      	ldr	r3, [pc, #284]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_RCC_OscConfig+0x17a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d001      	beq.n	80069ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e1df      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ba:	4b41      	ldr	r3, [pc, #260]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	493d      	ldr	r1, [pc, #244]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ce:	e040      	b.n	8006a52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d023      	beq.n	8006a20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069d8:	4b39      	ldr	r3, [pc, #228]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a38      	ldr	r2, [pc, #224]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e4:	f7fb f92e 	bl	8001c44 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ec:	f7fb f92a 	bl	8001c44 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e1bd      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069fe:	4b30      	ldr	r3, [pc, #192]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	4929      	ldr	r1, [pc, #164]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]
 8006a1e:	e018      	b.n	8006a52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a20:	4b27      	ldr	r3, [pc, #156]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a26      	ldr	r2, [pc, #152]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fb f90a 	bl	8001c44 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a34:	f7fb f906 	bl	8001c44 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e199      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a46:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d038      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d019      	beq.n	8006a9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a66:	4b16      	ldr	r3, [pc, #88]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6a:	4a15      	ldr	r2, [pc, #84]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a72:	f7fb f8e7 	bl	8001c44 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a7a:	f7fb f8e3 	bl	8001c44 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e176      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0f0      	beq.n	8006a7a <HAL_RCC_OscConfig+0x23a>
 8006a98:	e01a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a9e:	4a08      	ldr	r2, [pc, #32]	@ (8006ac0 <HAL_RCC_OscConfig+0x280>)
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fb f8cd 	bl	8001c44 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aac:	e00a      	b.n	8006ac4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aae:	f7fb f8c9 	bl	8001c44 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d903      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e15c      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
 8006ac0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac4:	4b91      	ldr	r3, [pc, #580]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1ee      	bne.n	8006aae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80a4 	beq.w	8006c26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ade:	4b8b      	ldr	r3, [pc, #556]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10d      	bne.n	8006b06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aea:	4b88      	ldr	r3, [pc, #544]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	4a87      	ldr	r2, [pc, #540]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006af6:	4b85      	ldr	r3, [pc, #532]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006afe:	60bb      	str	r3, [r7, #8]
 8006b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b02:	2301      	movs	r3, #1
 8006b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b06:	4b82      	ldr	r3, [pc, #520]	@ (8006d10 <HAL_RCC_OscConfig+0x4d0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d118      	bne.n	8006b44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b12:	4b7f      	ldr	r3, [pc, #508]	@ (8006d10 <HAL_RCC_OscConfig+0x4d0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7e      	ldr	r2, [pc, #504]	@ (8006d10 <HAL_RCC_OscConfig+0x4d0>)
 8006b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b1e:	f7fb f891 	bl	8001c44 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b26:	f7fb f88d 	bl	8001c44 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b64      	cmp	r3, #100	@ 0x64
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e120      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b38:	4b75      	ldr	r3, [pc, #468]	@ (8006d10 <HAL_RCC_OscConfig+0x4d0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0f0      	beq.n	8006b26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d106      	bne.n	8006b5a <HAL_RCC_OscConfig+0x31a>
 8006b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b50:	4a6e      	ldr	r2, [pc, #440]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b58:	e02d      	b.n	8006bb6 <HAL_RCC_OscConfig+0x376>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCC_OscConfig+0x33c>
 8006b62:	4b6a      	ldr	r3, [pc, #424]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b66:	4a69      	ldr	r2, [pc, #420]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b6e:	4b67      	ldr	r3, [pc, #412]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b72:	4a66      	ldr	r2, [pc, #408]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b74:	f023 0304 	bic.w	r3, r3, #4
 8006b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b7a:	e01c      	b.n	8006bb6 <HAL_RCC_OscConfig+0x376>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	d10c      	bne.n	8006b9e <HAL_RCC_OscConfig+0x35e>
 8006b84:	4b61      	ldr	r3, [pc, #388]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b88:	4a60      	ldr	r2, [pc, #384]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b8a:	f043 0304 	orr.w	r3, r3, #4
 8006b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b90:	4b5e      	ldr	r3, [pc, #376]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b94:	4a5d      	ldr	r2, [pc, #372]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b9c:	e00b      	b.n	8006bb6 <HAL_RCC_OscConfig+0x376>
 8006b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba2:	4a5a      	ldr	r2, [pc, #360]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006baa:	4b58      	ldr	r3, [pc, #352]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bae:	4a57      	ldr	r2, [pc, #348]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006bb0:	f023 0304 	bic.w	r3, r3, #4
 8006bb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d015      	beq.n	8006bea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbe:	f7fb f841 	bl	8001c44 <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc4:	e00a      	b.n	8006bdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc6:	f7fb f83d 	bl	8001c44 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e0ce      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0ee      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x386>
 8006be8:	e014      	b.n	8006c14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bea:	f7fb f82b 	bl	8001c44 <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf0:	e00a      	b.n	8006c08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf2:	f7fb f827 	bl	8001c44 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e0b8      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c08:	4b40      	ldr	r3, [pc, #256]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1ee      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d105      	bne.n	8006c26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c24:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 80a4 	beq.w	8006d78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c30:	4b36      	ldr	r3, [pc, #216]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 030c 	and.w	r3, r3, #12
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d06b      	beq.n	8006d14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d149      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c44:	4b31      	ldr	r3, [pc, #196]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a30      	ldr	r2, [pc, #192]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c50:	f7fa fff8 	bl	8001c44 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c58:	f7fa fff4 	bl	8001c44 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e087      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6a:	4b28      	ldr	r3, [pc, #160]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	019b      	lsls	r3, r3, #6
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c98:	061b      	lsls	r3, r3, #24
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006c9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ca2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca4:	4b19      	ldr	r3, [pc, #100]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a18      	ldr	r2, [pc, #96]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb0:	f7fa ffc8 	bl	8001c44 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cb8:	f7fa ffc4 	bl	8001c44 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e057      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cca:	4b10      	ldr	r3, [pc, #64]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0f0      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x478>
 8006cd6:	e04f      	b.n	8006d78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce4:	f7fa ffae 	bl	8001c44 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cec:	f7fa ffaa 	bl	8001c44 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e03d      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cfe:	4b03      	ldr	r3, [pc, #12]	@ (8006d0c <HAL_RCC_OscConfig+0x4cc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f0      	bne.n	8006cec <HAL_RCC_OscConfig+0x4ac>
 8006d0a:	e035      	b.n	8006d78 <HAL_RCC_OscConfig+0x538>
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d14:	4b1b      	ldr	r3, [pc, #108]	@ (8006d84 <HAL_RCC_OscConfig+0x544>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d028      	beq.n	8006d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d121      	bne.n	8006d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d11a      	bne.n	8006d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d44:	4013      	ands	r3, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d111      	bne.n	8006d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d107      	bne.n	8006d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d001      	beq.n	8006d78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40023800 	.word	0x40023800

08006d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0d0      	b.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da0:	4b6a      	ldr	r3, [pc, #424]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d910      	bls.n	8006dd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b67      	ldr	r3, [pc, #412]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 020f 	bic.w	r2, r3, #15
 8006db6:	4965      	ldr	r1, [pc, #404]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c4>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b63      	ldr	r3, [pc, #396]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0b8      	b.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d020      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006de8:	4b59      	ldr	r3, [pc, #356]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4a58      	ldr	r2, [pc, #352]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006dee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e00:	4b53      	ldr	r3, [pc, #332]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	4a52      	ldr	r2, [pc, #328]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e0c:	4b50      	ldr	r3, [pc, #320]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	494d      	ldr	r1, [pc, #308]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d040      	beq.n	8006eac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d107      	bne.n	8006e42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e32:	4b47      	ldr	r3, [pc, #284]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d115      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e07f      	b.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d107      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e4a:	4b41      	ldr	r3, [pc, #260]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e073      	b.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e06b      	b.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e6a:	4b39      	ldr	r3, [pc, #228]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f023 0203 	bic.w	r2, r3, #3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	4936      	ldr	r1, [pc, #216]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7c:	f7fa fee2 	bl	8001c44 <HAL_GetTick>
 8006e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e82:	e00a      	b.n	8006e9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e84:	f7fa fede 	bl	8001c44 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e053      	b.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 020c 	and.w	r2, r3, #12
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d1eb      	bne.n	8006e84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eac:	4b27      	ldr	r3, [pc, #156]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d210      	bcs.n	8006edc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eba:	4b24      	ldr	r3, [pc, #144]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c4>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f023 020f 	bic.w	r2, r3, #15
 8006ec2:	4922      	ldr	r1, [pc, #136]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c4>)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eca:	4b20      	ldr	r3, [pc, #128]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d001      	beq.n	8006edc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e032      	b.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ee8:	4b19      	ldr	r3, [pc, #100]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4916      	ldr	r1, [pc, #88]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f06:	4b12      	ldr	r3, [pc, #72]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	490e      	ldr	r1, [pc, #56]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f1a:	f000 f821 	bl	8006f60 <HAL_RCC_GetSysClockFreq>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c8>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	490a      	ldr	r1, [pc, #40]	@ (8006f54 <HAL_RCC_ClockConfig+0x1cc>)
 8006f2c:	5ccb      	ldrb	r3, [r1, r3]
 8006f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f32:	4a09      	ldr	r2, [pc, #36]	@ (8006f58 <HAL_RCC_ClockConfig+0x1d0>)
 8006f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f36:	4b09      	ldr	r3, [pc, #36]	@ (8006f5c <HAL_RCC_ClockConfig+0x1d4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fa fe3e 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40023c00 	.word	0x40023c00
 8006f50:	40023800 	.word	0x40023800
 8006f54:	0801a44c 	.word	0x0801a44c
 8006f58:	20000000 	.word	0x20000000
 8006f5c:	20000004 	.word	0x20000004

08006f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f64:	b090      	sub	sp, #64	@ 0x40
 8006f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f70:	2300      	movs	r3, #0
 8006f72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f78:	4b59      	ldr	r3, [pc, #356]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 030c 	and.w	r3, r3, #12
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d00d      	beq.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	f200 80a1 	bhi.w	80070cc <HAL_RCC_GetSysClockFreq+0x16c>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_RCC_GetSysClockFreq+0x34>
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d003      	beq.n	8006f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f92:	e09b      	b.n	80070cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f94:	4b53      	ldr	r3, [pc, #332]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f98:	e09b      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f9a:	4b53      	ldr	r3, [pc, #332]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f9e:	e098      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fa8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006faa:	4b4d      	ldr	r3, [pc, #308]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d028      	beq.n	8007008 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	099b      	lsrs	r3, r3, #6
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	623b      	str	r3, [r7, #32]
 8006fc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4b47      	ldr	r3, [pc, #284]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006fcc:	fb03 f201 	mul.w	r2, r3, r1
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	fb00 f303 	mul.w	r3, r0, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	4a43      	ldr	r2, [pc, #268]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006fda:	fba0 1202 	umull	r1, r2, r0, r2
 8006fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fe0:	460a      	mov	r2, r1
 8006fe2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006fe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fe6:	4413      	add	r3, r2
 8006fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fec:	2200      	movs	r2, #0
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	61fa      	str	r2, [r7, #28]
 8006ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ff6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006ffa:	f7f9 f959 	bl	80002b0 <__aeabi_uldivmod>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4613      	mov	r3, r2
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007006:	e053      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007008:	4b35      	ldr	r3, [pc, #212]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	099b      	lsrs	r3, r3, #6
 800700e:	2200      	movs	r2, #0
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	617a      	str	r2, [r7, #20]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800701a:	f04f 0b00 	mov.w	fp, #0
 800701e:	4652      	mov	r2, sl
 8007020:	465b      	mov	r3, fp
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f04f 0100 	mov.w	r1, #0
 800702a:	0159      	lsls	r1, r3, #5
 800702c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007030:	0150      	lsls	r0, r2, #5
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	ebb2 080a 	subs.w	r8, r2, sl
 800703a:	eb63 090b 	sbc.w	r9, r3, fp
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800704a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800704e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007052:	ebb2 0408 	subs.w	r4, r2, r8
 8007056:	eb63 0509 	sbc.w	r5, r3, r9
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	00eb      	lsls	r3, r5, #3
 8007064:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007068:	00e2      	lsls	r2, r4, #3
 800706a:	4614      	mov	r4, r2
 800706c:	461d      	mov	r5, r3
 800706e:	eb14 030a 	adds.w	r3, r4, sl
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	eb45 030b 	adc.w	r3, r5, fp
 8007078:	607b      	str	r3, [r7, #4]
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007086:	4629      	mov	r1, r5
 8007088:	028b      	lsls	r3, r1, #10
 800708a:	4621      	mov	r1, r4
 800708c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007090:	4621      	mov	r1, r4
 8007092:	028a      	lsls	r2, r1, #10
 8007094:	4610      	mov	r0, r2
 8007096:	4619      	mov	r1, r3
 8007098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709a:	2200      	movs	r2, #0
 800709c:	60bb      	str	r3, [r7, #8]
 800709e:	60fa      	str	r2, [r7, #12]
 80070a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070a4:	f7f9 f904 	bl	80002b0 <__aeabi_uldivmod>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4613      	mov	r3, r2
 80070ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	0c1b      	lsrs	r3, r3, #16
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	3301      	adds	r3, #1
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80070c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80070ca:	e002      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070cc:	4b05      	ldr	r3, [pc, #20]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80070ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80070d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3740      	adds	r7, #64	@ 0x40
 80070d8:	46bd      	mov	sp, r7
 80070da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070de:	bf00      	nop
 80070e0:	40023800 	.word	0x40023800
 80070e4:	00f42400 	.word	0x00f42400
 80070e8:	017d7840 	.word	0x017d7840

080070ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f0:	4b03      	ldr	r3, [pc, #12]	@ (8007100 <HAL_RCC_GetHCLKFreq+0x14>)
 80070f2:	681b      	ldr	r3, [r3, #0]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	20000000 	.word	0x20000000

08007104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007108:	f7ff fff0 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 800710c:	4602      	mov	r2, r0
 800710e:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	0a9b      	lsrs	r3, r3, #10
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	4903      	ldr	r1, [pc, #12]	@ (8007128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800711a:	5ccb      	ldrb	r3, [r1, r3]
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007120:	4618      	mov	r0, r3
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40023800 	.word	0x40023800
 8007128:	0801a45c 	.word	0x0801a45c

0800712c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007130:	f7ff ffdc 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 8007134:	4602      	mov	r2, r0
 8007136:	4b05      	ldr	r3, [pc, #20]	@ (800714c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	0b5b      	lsrs	r3, r3, #13
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	4903      	ldr	r1, [pc, #12]	@ (8007150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007142:	5ccb      	ldrb	r3, [r1, r3]
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007148:	4618      	mov	r0, r3
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40023800 	.word	0x40023800
 8007150:	0801a45c 	.word	0x0801a45c

08007154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d012      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800717c:	4b69      	ldr	r3, [pc, #420]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4a68      	ldr	r2, [pc, #416]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007182:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007186:	6093      	str	r3, [r2, #8]
 8007188:	4b66      	ldr	r3, [pc, #408]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007190:	4964      	ldr	r1, [pc, #400]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007192:	4313      	orrs	r3, r2
 8007194:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800719e:	2301      	movs	r3, #1
 80071a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d017      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071ae:	4b5d      	ldr	r3, [pc, #372]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071bc:	4959      	ldr	r1, [pc, #356]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071cc:	d101      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80071ce:	2301      	movs	r3, #1
 80071d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d017      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071ea:	4b4e      	ldr	r3, [pc, #312]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f8:	494a      	ldr	r1, [pc, #296]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007204:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007208:	d101      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800720a:	2301      	movs	r3, #1
 800720c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007216:	2301      	movs	r3, #1
 8007218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007226:	2301      	movs	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 808b 	beq.w	800734e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007238:	4b3a      	ldr	r3, [pc, #232]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723c:	4a39      	ldr	r2, [pc, #228]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007242:	6413      	str	r3, [r2, #64]	@ 0x40
 8007244:	4b37      	ldr	r3, [pc, #220]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007250:	4b35      	ldr	r3, [pc, #212]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a34      	ldr	r2, [pc, #208]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725c:	f7fa fcf2 	bl	8001c44 <HAL_GetTick>
 8007260:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007264:	f7fa fcee 	bl	8001c44 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b64      	cmp	r3, #100	@ 0x64
 8007270:	d901      	bls.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e357      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007276:	4b2c      	ldr	r3, [pc, #176]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007282:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d035      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	429a      	cmp	r2, r3
 800729e:	d02e      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a0:	4b20      	ldr	r3, [pc, #128]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072b4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80072c2:	4a18      	ldr	r2, [pc, #96]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072c8:	4b16      	ldr	r3, [pc, #88]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d114      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d4:	f7fa fcb6 	bl	8001c44 <HAL_GetTick>
 80072d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072da:	e00a      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072dc:	f7fa fcb2 	bl	8001c44 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e319      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0ee      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800730a:	d111      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800730c:	4b05      	ldr	r3, [pc, #20]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007318:	4b04      	ldr	r3, [pc, #16]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800731a:	400b      	ands	r3, r1
 800731c:	4901      	ldr	r1, [pc, #4]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800731e:	4313      	orrs	r3, r2
 8007320:	608b      	str	r3, [r1, #8]
 8007322:	e00b      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007324:	40023800 	.word	0x40023800
 8007328:	40007000 	.word	0x40007000
 800732c:	0ffffcff 	.word	0x0ffffcff
 8007330:	4baa      	ldr	r3, [pc, #680]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4aa9      	ldr	r2, [pc, #676]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007336:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800733a:	6093      	str	r3, [r2, #8]
 800733c:	4ba7      	ldr	r3, [pc, #668]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007348:	49a4      	ldr	r1, [pc, #656]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800734a:	4313      	orrs	r3, r2
 800734c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	d010      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800735a:	4ba0      	ldr	r3, [pc, #640]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007360:	4a9e      	ldr	r2, [pc, #632]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007366:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800736a:	4b9c      	ldr	r3, [pc, #624]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800736c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	4999      	ldr	r1, [pc, #612]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007388:	4b94      	ldr	r3, [pc, #592]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800738a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007396:	4991      	ldr	r1, [pc, #580]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073aa:	4b8c      	ldr	r3, [pc, #560]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073b8:	4988      	ldr	r1, [pc, #544]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073cc:	4b83      	ldr	r3, [pc, #524]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073da:	4980      	ldr	r1, [pc, #512]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073ee:	4b7b      	ldr	r3, [pc, #492]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fc:	4977      	ldr	r1, [pc, #476]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00a      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007410:	4b72      	ldr	r3, [pc, #456]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007416:	f023 0203 	bic.w	r2, r3, #3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800741e:	496f      	ldr	r1, [pc, #444]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007420:	4313      	orrs	r3, r2
 8007422:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007432:	4b6a      	ldr	r3, [pc, #424]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007438:	f023 020c 	bic.w	r2, r3, #12
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007440:	4966      	ldr	r1, [pc, #408]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007442:	4313      	orrs	r3, r2
 8007444:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00a      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007454:	4b61      	ldr	r3, [pc, #388]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007462:	495e      	ldr	r1, [pc, #376]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007464:	4313      	orrs	r3, r2
 8007466:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007476:	4b59      	ldr	r3, [pc, #356]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007484:	4955      	ldr	r1, [pc, #340]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007486:	4313      	orrs	r3, r2
 8007488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007498:	4b50      	ldr	r3, [pc, #320]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a6:	494d      	ldr	r1, [pc, #308]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80074ba:	4b48      	ldr	r3, [pc, #288]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c8:	4944      	ldr	r1, [pc, #272]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00a      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074dc:	4b3f      	ldr	r3, [pc, #252]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ea:	493c      	ldr	r1, [pc, #240]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80074fe:	4b37      	ldr	r3, [pc, #220]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007504:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800750c:	4933      	ldr	r1, [pc, #204]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800750e:	4313      	orrs	r3, r2
 8007510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007520:	4b2e      	ldr	r3, [pc, #184]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007526:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800752e:	492b      	ldr	r1, [pc, #172]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007530:	4313      	orrs	r3, r2
 8007532:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d011      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007542:	4b26      	ldr	r3, [pc, #152]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007548:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007550:	4922      	ldr	r1, [pc, #136]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800755c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007560:	d101      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007562:	2301      	movs	r3, #1
 8007564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007572:	2301      	movs	r3, #1
 8007574:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007582:	4b16      	ldr	r3, [pc, #88]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007588:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007590:	4912      	ldr	r1, [pc, #72]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075a4:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b4:	4909      	ldr	r1, [pc, #36]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d006      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80d9 	beq.w	8007782 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075d0:	4b02      	ldr	r3, [pc, #8]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a01      	ldr	r2, [pc, #4]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075da:	e001      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80075dc:	40023800 	.word	0x40023800
 80075e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e2:	f7fa fb2f 	bl	8001c44 <HAL_GetTick>
 80075e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075e8:	e008      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075ea:	f7fa fb2b 	bl	8001c44 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b64      	cmp	r3, #100	@ 0x64
 80075f6:	d901      	bls.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e194      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075fc:	4b6c      	ldr	r3, [pc, #432]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f0      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d021      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007618:	2b00      	cmp	r3, #0
 800761a:	d11d      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800761c:	4b64      	ldr	r3, [pc, #400]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007622:	0c1b      	lsrs	r3, r3, #16
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800762a:	4b61      	ldr	r3, [pc, #388]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	019a      	lsls	r2, r3, #6
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	041b      	lsls	r3, r3, #16
 8007642:	431a      	orrs	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	061b      	lsls	r3, r3, #24
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	071b      	lsls	r3, r3, #28
 8007650:	4957      	ldr	r1, [pc, #348]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007652:	4313      	orrs	r3, r2
 8007654:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800766c:	d00a      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007676:	2b00      	cmp	r3, #0
 8007678:	d02e      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007682:	d129      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007684:	4b4a      	ldr	r3, [pc, #296]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800768a:	0c1b      	lsrs	r3, r3, #16
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007692:	4b47      	ldr	r3, [pc, #284]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007698:	0f1b      	lsrs	r3, r3, #28
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	019a      	lsls	r2, r3, #6
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	041b      	lsls	r3, r3, #16
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	061b      	lsls	r3, r3, #24
 80076b2:	431a      	orrs	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	071b      	lsls	r3, r3, #28
 80076b8:	493d      	ldr	r1, [pc, #244]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076c0:	4b3b      	ldr	r3, [pc, #236]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076c6:	f023 021f 	bic.w	r2, r3, #31
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ce:	3b01      	subs	r3, #1
 80076d0:	4937      	ldr	r1, [pc, #220]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01d      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076e4:	4b32      	ldr	r3, [pc, #200]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ea:	0e1b      	lsrs	r3, r3, #24
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076f2:	4b2f      	ldr	r3, [pc, #188]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f8:	0f1b      	lsrs	r3, r3, #28
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	019a      	lsls	r2, r3, #6
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	431a      	orrs	r2, r3
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	061b      	lsls	r3, r3, #24
 8007712:	431a      	orrs	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	071b      	lsls	r3, r3, #28
 8007718:	4925      	ldr	r1, [pc, #148]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d011      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	019a      	lsls	r2, r3, #6
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	041b      	lsls	r3, r3, #16
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	061b      	lsls	r3, r3, #24
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	071b      	lsls	r3, r3, #28
 8007748:	4919      	ldr	r1, [pc, #100]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007750:	4b17      	ldr	r3, [pc, #92]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a16      	ldr	r2, [pc, #88]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800775a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775c:	f7fa fa72 	bl	8001c44 <HAL_GetTick>
 8007760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007764:	f7fa fa6e 	bl	8001c44 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	@ 0x64
 8007770:	d901      	bls.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e0d7      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007776:	4b0e      	ldr	r3, [pc, #56]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f0      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2b01      	cmp	r3, #1
 8007786:	f040 80cd 	bne.w	8007924 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800778a:	4b09      	ldr	r3, [pc, #36]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a08      	ldr	r2, [pc, #32]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007796:	f7fa fa55 	bl	8001c44 <HAL_GetTick>
 800779a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800779c:	e00a      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800779e:	f7fa fa51 	bl	8001c44 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b64      	cmp	r3, #100	@ 0x64
 80077aa:	d903      	bls.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e0ba      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077b4:	4b5e      	ldr	r3, [pc, #376]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c0:	d0ed      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d009      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d02e      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d12a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077ea:	4b51      	ldr	r3, [pc, #324]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f0:	0c1b      	lsrs	r3, r3, #16
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fe:	0f1b      	lsrs	r3, r3, #28
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	019a      	lsls	r2, r3, #6
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	041b      	lsls	r3, r3, #16
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	061b      	lsls	r3, r3, #24
 8007818:	431a      	orrs	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	071b      	lsls	r3, r3, #28
 800781e:	4944      	ldr	r1, [pc, #272]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007820:	4313      	orrs	r3, r2
 8007822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007826:	4b42      	ldr	r3, [pc, #264]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800782c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	3b01      	subs	r3, #1
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	493d      	ldr	r1, [pc, #244]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800783a:	4313      	orrs	r3, r2
 800783c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d022      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007854:	d11d      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007856:	4b36      	ldr	r3, [pc, #216]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007864:	4b32      	ldr	r3, [pc, #200]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786a:	0f1b      	lsrs	r3, r3, #28
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	019a      	lsls	r2, r3, #6
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	431a      	orrs	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	431a      	orrs	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	071b      	lsls	r3, r3, #28
 800788a:	4929      	ldr	r1, [pc, #164]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800788c:	4313      	orrs	r3, r2
 800788e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d028      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800789e:	4b24      	ldr	r3, [pc, #144]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a4:	0e1b      	lsrs	r3, r3, #24
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078ac:	4b20      	ldr	r3, [pc, #128]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b2:	0c1b      	lsrs	r3, r3, #16
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	019a      	lsls	r2, r3, #6
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	041b      	lsls	r3, r3, #16
 80078c4:	431a      	orrs	r2, r3
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	061b      	lsls	r3, r3, #24
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	071b      	lsls	r3, r3, #28
 80078d2:	4917      	ldr	r1, [pc, #92]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078da:	4b15      	ldr	r3, [pc, #84]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	4911      	ldr	r1, [pc, #68]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a0e      	ldr	r2, [pc, #56]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078fc:	f7fa f9a2 	bl	8001c44 <HAL_GetTick>
 8007900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007902:	e008      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007904:	f7fa f99e 	bl	8001c44 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b64      	cmp	r3, #100	@ 0x64
 8007910:	d901      	bls.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e007      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007916:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800791e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007922:	d1ef      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3720      	adds	r7, #32
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	40023800 	.word	0x40023800

08007934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e09d      	b.n	8007a82 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794a:	2b00      	cmp	r3, #0
 800794c:	d108      	bne.n	8007960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007956:	d009      	beq.n	800796c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	61da      	str	r2, [r3, #28]
 800795e:	e005      	b.n	800796c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7f9 fa6e 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80079ac:	d902      	bls.n	80079b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	e002      	b.n	80079ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80079c2:	d007      	beq.n	80079d4 <HAL_SPI_Init+0xa0>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80079cc:	d002      	beq.n	80079d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a16:	ea42 0103 	orr.w	r1, r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	0c1b      	lsrs	r3, r3, #16
 8007a30:	f003 0204 	and.w	r2, r3, #4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a38:	f003 0310 	and.w	r3, r3, #16
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007a50:	ea42 0103 	orr.w	r1, r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69da      	ldr	r2, [r3, #28]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d001      	beq.n	8007aaa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e0d4      	b.n	8007c54 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <HAL_SPI_Transmit_DMA+0x2a>
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e0cc      	b.n	8007c54 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_SPI_Transmit_DMA+0x3c>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e0c5      	b.n	8007c54 <HAL_SPI_Transmit_DMA+0x1c8>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	88fa      	ldrh	r2, [r7, #6]
 8007ae8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	88fa      	ldrh	r2, [r7, #6]
 8007aee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b1a:	d10f      	bne.n	8007b3c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b40:	4a46      	ldr	r2, [pc, #280]	@ (8007c5c <HAL_SPI_Transmit_DMA+0x1d0>)
 8007b42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b48:	4a45      	ldr	r2, [pc, #276]	@ (8007c60 <HAL_SPI_Transmit_DMA+0x1d4>)
 8007b4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b50:	4a44      	ldr	r2, [pc, #272]	@ (8007c64 <HAL_SPI_Transmit_DMA+0x1d8>)
 8007b52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b58:	2200      	movs	r2, #0
 8007b5a:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b6a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b74:	d82d      	bhi.n	8007bd2 <HAL_SPI_Transmit_DMA+0x146>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b80:	d127      	bne.n	8007bd2 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10f      	bne.n	8007bb0 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b9e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bae:	e010      	b.n	8007bd2 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bbe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	085b      	lsrs	r3, r3, #1
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3301      	adds	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bda:	4619      	mov	r1, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	330c      	adds	r3, #12
 8007be2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007bea:	f7fa fc25 	bl	8002438 <HAL_DMA_Start_IT>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bf8:	f043 0210 	orr.w	r2, r3, #16
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e023      	b.n	8007c54 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c16:	2b40      	cmp	r3, #64	@ 0x40
 8007c18:	d007      	beq.n	8007c2a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c28:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0220 	orr.w	r2, r2, #32
 8007c40:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0202 	orr.w	r2, r2, #2
 8007c50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	080085fd 	.word	0x080085fd
 8007c60:	08008419 	.word	0x08008419
 8007c64:	08008651 	.word	0x08008651

08007c68 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d001      	beq.n	8007c86 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8007c82:	2302      	movs	r3, #2
 8007c84:	e105      	b.n	8007e92 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <HAL_SPI_Receive_DMA+0x2a>
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e0fd      	b.n	8007e92 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d110      	bne.n	8007cc0 <HAL_SPI_Receive_DMA+0x58>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ca6:	d10b      	bne.n	8007cc0 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2204      	movs	r2, #4
 8007cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f8f6 	bl	8007ea8 <HAL_SPI_TransmitReceive_DMA>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	e0e8      	b.n	8007e92 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d101      	bne.n	8007cce <HAL_SPI_Receive_DMA+0x66>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e0e1      	b.n	8007e92 <HAL_SPI_Receive_DMA+0x22a>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2204      	movs	r2, #4
 8007cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	88fa      	ldrh	r2, [r7, #6]
 8007cee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	88fa      	ldrh	r2, [r7, #6]
 8007cf6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d1a:	d10f      	bne.n	8007d3c <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d4a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d54:	d908      	bls.n	8007d68 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d64:	605a      	str	r2, [r3, #4]
 8007d66:	e042      	b.n	8007dee <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d76:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d82:	d134      	bne.n	8007dee <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d92:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d111      	bne.n	8007dc8 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007db2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007dc6:	e012      	b.n	8007dee <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dd6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	085b      	lsrs	r3, r3, #1
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3301      	adds	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007df2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e9c <HAL_SPI_Receive_DMA+0x234>)
 8007df4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dfa:	4a29      	ldr	r2, [pc, #164]	@ (8007ea0 <HAL_SPI_Receive_DMA+0x238>)
 8007dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e02:	4a28      	ldr	r2, [pc, #160]	@ (8007ea4 <HAL_SPI_Receive_DMA+0x23c>)
 8007e04:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	4619      	mov	r1, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007e28:	f7fa fb06 	bl	8002438 <HAL_DMA_Start_IT>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e36:	f043 0210 	orr.w	r2, r3, #16
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e023      	b.n	8007e92 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e54:	2b40      	cmp	r3, #64	@ 0x40
 8007e56:	d007      	beq.n	8007e68 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e66:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0220 	orr.w	r2, r2, #32
 8007e7e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	08008619 	.word	0x08008619
 8007ea0:	080084c1 	.word	0x080084c1
 8007ea4:	08008651 	.word	0x08008651

08007ea8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ebc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ed0:	d106      	bne.n	8007ee0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d102      	bne.n	8007ee0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d001      	beq.n	8007ee4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e158      	b.n	8008196 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007ef0:	887b      	ldrh	r3, [r7, #2]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e14d      	b.n	8008196 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_SPI_TransmitReceive_DMA+0x60>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e146      	b.n	8008196 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d003      	beq.n	8007f24 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2205      	movs	r2, #5
 8007f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	887a      	ldrh	r2, [r7, #2]
 8007f34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	887a      	ldrh	r2, [r7, #2]
 8007f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	887a      	ldrh	r2, [r7, #2]
 8007f46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	887a      	ldrh	r2, [r7, #2]
 8007f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8007f6c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f76:	d908      	bls.n	8007f8a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f86:	605a      	str	r2, [r3, #4]
 8007f88:	e06f      	b.n	800806a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f98:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa4:	d126      	bne.n	8007ff4 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10f      	bne.n	8007fd2 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007fc0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007fd0:	e010      	b.n	8007ff4 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fe0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	085b      	lsrs	r3, r3, #1
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3301      	adds	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ffe:	d134      	bne.n	800806a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800800e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008016:	b29b      	uxth	r3, r3
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d111      	bne.n	8008044 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800802e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008036:	b29b      	uxth	r3, r3
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008042:	e012      	b.n	800806a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008052:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800805a:	b29b      	uxth	r3, r3
 800805c:	085b      	lsrs	r3, r3, #1
 800805e:	b29b      	uxth	r3, r3
 8008060:	3301      	adds	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b04      	cmp	r3, #4
 8008074:	d108      	bne.n	8008088 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800807a:	4a49      	ldr	r2, [pc, #292]	@ (80081a0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800807c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008082:	4a48      	ldr	r2, [pc, #288]	@ (80081a4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008084:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008086:	e007      	b.n	8008098 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808c:	4a46      	ldr	r2, [pc, #280]	@ (80081a8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800808e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008094:	4a45      	ldr	r2, [pc, #276]	@ (80081ac <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008096:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809c:	4a44      	ldr	r2, [pc, #272]	@ (80081b0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800809e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a4:	2200      	movs	r2, #0
 80080a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	330c      	adds	r3, #12
 80080b2:	4619      	mov	r1, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80080c2:	f7fa f9b9 	bl	8002438 <HAL_DMA_Start_IT>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080d0:	f043 0210 	orr.w	r2, r3, #16
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e058      	b.n	8008196 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0201 	orr.w	r2, r2, #1
 80080f2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f8:	2200      	movs	r2, #0
 80080fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008100:	2200      	movs	r2, #0
 8008102:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008108:	2200      	movs	r2, #0
 800810a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008110:	2200      	movs	r2, #0
 8008112:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	4619      	mov	r1, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	330c      	adds	r3, #12
 8008124:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800812a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800812c:	f7fa f984 	bl	8002438 <HAL_DMA_Start_IT>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800813a:	f043 0210 	orr.w	r2, r3, #16
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e023      	b.n	8008196 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008158:	2b40      	cmp	r3, #64	@ 0x40
 800815a:	d007      	beq.n	800816c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800816a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0220 	orr.w	r2, r2, #32
 8008182:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0202 	orr.w	r2, r2, #2
 8008192:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	08008619 	.word	0x08008619
 80081a4:	080084c1 	.word	0x080084c1
 80081a8:	08008635 	.word	0x08008635
 80081ac:	0800856b 	.word	0x0800856b
 80081b0:	08008651 	.word	0x08008651

080081b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	099b      	lsrs	r3, r3, #6
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10f      	bne.n	80081f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	099b      	lsrs	r3, r3, #6
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d004      	beq.n	80081f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
    return;
 80081f6:	e0d7      	b.n	80083a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <HAL_SPI_IRQHandler+0x66>
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	09db      	lsrs	r3, r3, #7
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
    return;
 8008218:	e0c6      	b.n	80083a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	095b      	lsrs	r3, r3, #5
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10c      	bne.n	8008240 <HAL_SPI_IRQHandler+0x8c>
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	099b      	lsrs	r3, r3, #6
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	0a1b      	lsrs	r3, r3, #8
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80b4 	beq.w	80083a8 <HAL_SPI_IRQHandler+0x1f4>
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 80ad 	beq.w	80083a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	099b      	lsrs	r3, r3, #6
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d023      	beq.n	80082a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b03      	cmp	r3, #3
 8008264:	d011      	beq.n	800828a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800826a:	f043 0204 	orr.w	r2, r3, #4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	e00b      	b.n	80082a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800828a:	2300      	movs	r3, #0
 800828c:	613b      	str	r3, [r7, #16]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	613b      	str	r3, [r7, #16]
 800829e:	693b      	ldr	r3, [r7, #16]
        return;
 80082a0:	e082      	b.n	80083a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	095b      	lsrs	r3, r3, #5
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d014      	beq.n	80082d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082b2:	f043 0201 	orr.w	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	0a1b      	lsrs	r3, r3, #8
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00c      	beq.n	80082fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082e8:	f043 0208 	orr.w	r2, r3, #8
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80082f0:	2300      	movs	r3, #0
 80082f2:	60bb      	str	r3, [r7, #8]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	60bb      	str	r3, [r7, #8]
 80082fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008302:	2b00      	cmp	r3, #0
 8008304:	d04f      	beq.n	80083a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008314:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d104      	bne.n	8008332 <HAL_SPI_IRQHandler+0x17e>
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d034      	beq.n	800839c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0203 	bic.w	r2, r2, #3
 8008340:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008346:	2b00      	cmp	r3, #0
 8008348:	d011      	beq.n	800836e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800834e:	4a18      	ldr	r2, [pc, #96]	@ (80083b0 <HAL_SPI_IRQHandler+0x1fc>)
 8008350:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008356:	4618      	mov	r0, r3
 8008358:	f7fa f93e 	bl	80025d8 <HAL_DMA_Abort_IT>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d005      	beq.n	800836e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008366:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008372:	2b00      	cmp	r3, #0
 8008374:	d016      	beq.n	80083a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837a:	4a0d      	ldr	r2, [pc, #52]	@ (80083b0 <HAL_SPI_IRQHandler+0x1fc>)
 800837c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008382:	4618      	mov	r0, r3
 8008384:	f7fa f928 	bl	80025d8 <HAL_DMA_Abort_IT>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008392:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800839a:	e003      	b.n	80083a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f831 	bl	8008404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80083a2:	e000      	b.n	80083a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80083a4:	bf00      	nop
    return;
 80083a6:	bf00      	nop
  }
}
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	08008691 	.word	0x08008691

080083b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008426:	f7f9 fc0d 	bl	8001c44 <HAL_GetTick>
 800842a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843a:	d03b      	beq.n	80084b4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0220 	bic.w	r2, r2, #32
 800844a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0202 	bic.w	r2, r2, #2
 800845a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	2164      	movs	r1, #100	@ 0x64
 8008460:	6978      	ldr	r0, [r7, #20]
 8008462:	f000 fac5 	bl	80089f0 <SPI_EndRxTxTransaction>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008470:	f043 0220 	orr.w	r2, r3, #32
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2200      	movs	r2, #0
 800849a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80084ac:	6978      	ldr	r0, [r7, #20]
 80084ae:	f7ff ffa9 	bl	8008404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80084b2:	e002      	b.n	80084ba <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80084b4:	6978      	ldr	r0, [r7, #20]
 80084b6:	f00d fafb 	bl	8015ab0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084cc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084ce:	f7f9 fbb9 	bl	8001c44 <HAL_GetTick>
 80084d2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084e2:	d03c      	beq.n	800855e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0220 	bic.w	r2, r2, #32
 80084f2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10d      	bne.n	8008518 <SPI_DMAReceiveCplt+0x58>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008504:	d108      	bne.n	8008518 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0203 	bic.w	r2, r2, #3
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	e007      	b.n	8008528 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0201 	bic.w	r2, r2, #1
 8008526:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	2164      	movs	r1, #100	@ 0x64
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f9e3 	bl	80088f8 <SPI_EndRxTransaction>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2220      	movs	r2, #32
 800853c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff ff54 	bl	8008404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800855c:	e002      	b.n	8008564 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f00d fac6 	bl	8015af0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008576:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008578:	f7f9 fb64 	bl	8001c44 <HAL_GetTick>
 800857c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800858c:	d030      	beq.n	80085f0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0220 	bic.w	r2, r2, #32
 800859c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	2164      	movs	r1, #100	@ 0x64
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 fa24 	bl	80089f0 <SPI_EndRxTxTransaction>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d005      	beq.n	80085ba <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085b2:	f043 0220 	orr.w	r2, r3, #32
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0203 	bic.w	r2, r2, #3
 80085c8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7ff ff0b 	bl	8008404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80085ee:	e002      	b.n	80085f6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff fedf 	bl	80083b4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008608:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff fedc 	bl	80083c8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008610:	bf00      	nop
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008624:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f7ff fed8 	bl	80083dc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800862c:	bf00      	nop
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f7ff fed4 	bl	80083f0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0203 	bic.w	r2, r2, #3
 800866c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008672:	f043 0210 	orr.w	r2, r3, #16
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff febe 	bl	8008404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008688:	bf00      	nop
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fea9 	bl	8008404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	4613      	mov	r3, r2
 80086ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086cc:	f7f9 faba 	bl	8001c44 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d4:	1a9b      	subs	r3, r3, r2
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	4413      	add	r3, r2
 80086da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086dc:	f7f9 fab2 	bl	8001c44 <HAL_GetTick>
 80086e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086e2:	4b39      	ldr	r3, [pc, #228]	@ (80087c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	015b      	lsls	r3, r3, #5
 80086e8:	0d1b      	lsrs	r3, r3, #20
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	fb02 f303 	mul.w	r3, r2, r3
 80086f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086f2:	e055      	b.n	80087a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086fa:	d051      	beq.n	80087a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086fc:	f7f9 faa2 	bl	8001c44 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	429a      	cmp	r2, r3
 800870a:	d902      	bls.n	8008712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d13d      	bne.n	800878e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800872a:	d111      	bne.n	8008750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008734:	d004      	beq.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800873e:	d107      	bne.n	8008750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800874e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008758:	d10f      	bne.n	800877a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e018      	b.n	80087c0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	e002      	b.n	80087a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	3b01      	subs	r3, #1
 800879e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	4013      	ands	r3, r2
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	bf0c      	ite	eq
 80087b0:	2301      	moveq	r3, #1
 80087b2:	2300      	movne	r3, #0
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d19a      	bne.n	80086f4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20000000 	.word	0x20000000

080087cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08a      	sub	sp, #40	@ 0x28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087de:	f7f9 fa31 	bl	8001c44 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e6:	1a9b      	subs	r3, r3, r2
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	4413      	add	r3, r2
 80087ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80087ee:	f7f9 fa29 	bl	8001c44 <HAL_GetTick>
 80087f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330c      	adds	r3, #12
 80087fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80087fc:	4b3d      	ldr	r3, [pc, #244]	@ (80088f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	00da      	lsls	r2, r3, #3
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	0d1b      	lsrs	r3, r3, #20
 800880c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800880e:	fb02 f303 	mul.w	r3, r2, r3
 8008812:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008814:	e061      	b.n	80088da <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800881c:	d107      	bne.n	800882e <SPI_WaitFifoStateUntilTimeout+0x62>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800882c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008834:	d051      	beq.n	80088da <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008836:	f7f9 fa05 	bl	8001c44 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008842:	429a      	cmp	r2, r3
 8008844:	d902      	bls.n	800884c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d13d      	bne.n	80088c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685a      	ldr	r2, [r3, #4]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800885a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008864:	d111      	bne.n	800888a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800886e:	d004      	beq.n	800887a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008878:	d107      	bne.n	800888a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008888:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008892:	d10f      	bne.n	80088b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e011      	b.n	80088ec <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d102      	bne.n	80088d4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80088d2:	e002      	b.n	80088da <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4013      	ands	r3, r2
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d195      	bne.n	8008816 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3728      	adds	r7, #40	@ 0x28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20000000 	.word	0x20000000

080088f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800890c:	d111      	bne.n	8008932 <SPI_EndRxTransaction+0x3a>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008916:	d004      	beq.n	8008922 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008920:	d107      	bne.n	8008932 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008930:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800893a:	d112      	bne.n	8008962 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2200      	movs	r2, #0
 8008944:	2180      	movs	r1, #128	@ 0x80
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff feb8 	bl	80086bc <SPI_WaitFlagStateUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d021      	beq.n	8008996 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008956:	f043 0220 	orr.w	r2, r3, #32
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e03d      	b.n	80089de <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008962:	4b21      	ldr	r3, [pc, #132]	@ (80089e8 <SPI_EndRxTransaction+0xf0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a21      	ldr	r2, [pc, #132]	@ (80089ec <SPI_EndRxTransaction+0xf4>)
 8008968:	fba2 2303 	umull	r2, r3, r2, r3
 800896c:	0d5b      	lsrs	r3, r3, #21
 800896e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	3b01      	subs	r3, #1
 8008982:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800898e:	2b80      	cmp	r3, #128	@ 0x80
 8008990:	d0f2      	beq.n	8008978 <SPI_EndRxTransaction+0x80>
 8008992:	e000      	b.n	8008996 <SPI_EndRxTransaction+0x9e>
        break;
 8008994:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800899e:	d11d      	bne.n	80089dc <SPI_EndRxTransaction+0xe4>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089a8:	d004      	beq.n	80089b4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b2:	d113      	bne.n	80089dc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f7ff ff03 	bl	80087cc <SPI_WaitFifoStateUntilTimeout>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089d0:	f043 0220 	orr.w	r2, r3, #32
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e000      	b.n	80089de <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20000000 	.word	0x20000000
 80089ec:	165e9f81 	.word	0x165e9f81

080089f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff fedf 	bl	80087cc <SPI_WaitFifoStateUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e046      	b.n	8008ab2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a24:	4b25      	ldr	r3, [pc, #148]	@ (8008abc <SPI_EndRxTxTransaction+0xcc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a25      	ldr	r2, [pc, #148]	@ (8008ac0 <SPI_EndRxTxTransaction+0xd0>)
 8008a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2e:	0d5b      	lsrs	r3, r3, #21
 8008a30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008a34:	fb02 f303 	mul.w	r3, r2, r3
 8008a38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a42:	d112      	bne.n	8008a6a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2180      	movs	r1, #128	@ 0x80
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff fe34 	bl	80086bc <SPI_WaitFlagStateUntilTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d016      	beq.n	8008a88 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a5e:	f043 0220 	orr.w	r2, r3, #32
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e023      	b.n	8008ab2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a80:	2b80      	cmp	r3, #128	@ 0x80
 8008a82:	d0f2      	beq.n	8008a6a <SPI_EndRxTxTransaction+0x7a>
 8008a84:	e000      	b.n	8008a88 <SPI_EndRxTxTransaction+0x98>
        break;
 8008a86:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7ff fe99 	bl	80087cc <SPI_WaitFifoStateUntilTimeout>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008aa4:	f043 0220 	orr.w	r2, r3, #32
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e000      	b.n	8008ab2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000000 	.word	0x20000000
 8008ac0:	165e9f81 	.word	0x165e9f81

08008ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e040      	b.n	8008b58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7f8 fda2 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2224      	movs	r2, #36	@ 0x24
 8008af0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fece 	bl	80098ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fc67 	bl	80093e4 <UART_SetConfig>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e01b      	b.n	8008b58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0201 	orr.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 ff4d 	bl	80099f0 <UART_CheckIdleState>
 8008b56:	4603      	mov	r3, r0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	@ 0x28
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d177      	bne.n	8008c68 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <HAL_UART_Transmit+0x24>
 8008b7e:	88fb      	ldrh	r3, [r7, #6]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e070      	b.n	8008c6a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2221      	movs	r2, #33	@ 0x21
 8008b94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b96:	f7f9 f855 	bl	8001c44 <HAL_GetTick>
 8008b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	88fa      	ldrh	r2, [r7, #6]
 8008ba0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	88fa      	ldrh	r2, [r7, #6]
 8008ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bb4:	d108      	bne.n	8008bc8 <HAL_UART_Transmit+0x68>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d104      	bne.n	8008bc8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	61bb      	str	r3, [r7, #24]
 8008bc6:	e003      	b.n	8008bd0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bd0:	e02f      	b.n	8008c32 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2180      	movs	r1, #128	@ 0x80
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 ff5e 	bl	8009a9e <UART_WaitOnFlagUntilTimeout>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2220      	movs	r2, #32
 8008bec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e03b      	b.n	8008c6a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10b      	bne.n	8008c10 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	61bb      	str	r3, [r7, #24]
 8008c0e:	e007      	b.n	8008c20 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1c9      	bne.n	8008bd2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2200      	movs	r2, #0
 8008c46:	2140      	movs	r1, #64	@ 0x40
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 ff28 	bl	8009a9e <UART_WaitOnFlagUntilTimeout>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2220      	movs	r2, #32
 8008c58:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e005      	b.n	8008c6a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2220      	movs	r2, #32
 8008c62:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e000      	b.n	8008c6a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008c68:	2302      	movs	r3, #2
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b08b      	sub	sp, #44	@ 0x2c
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	d147      	bne.n	8008d1a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <HAL_UART_Transmit_IT+0x22>
 8008c90:	88fb      	ldrh	r3, [r7, #6]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e040      	b.n	8008d1c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	88fa      	ldrh	r2, [r7, #6]
 8008ca4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	88fa      	ldrh	r2, [r7, #6]
 8008cac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2221      	movs	r2, #33	@ 0x21
 8008cc2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ccc:	d107      	bne.n	8008cde <HAL_UART_Transmit_IT+0x6a>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d103      	bne.n	8008cde <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4a13      	ldr	r2, [pc, #76]	@ (8008d28 <HAL_UART_Transmit_IT+0xb4>)
 8008cda:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008cdc:	e002      	b.n	8008ce4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4a12      	ldr	r2, [pc, #72]	@ (8008d2c <HAL_UART_Transmit_IT+0xb8>)
 8008ce2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d02:	623b      	str	r3, [r7, #32]
 8008d04:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	69f9      	ldr	r1, [r7, #28]
 8008d08:	6a3a      	ldr	r2, [r7, #32]
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e6      	bne.n	8008ce4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e000      	b.n	8008d1c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008d1a:	2302      	movs	r3, #2
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	372c      	adds	r7, #44	@ 0x2c
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	0800a0f5 	.word	0x0800a0f5
 8008d2c:	0800a03f 	.word	0x0800a03f

08008d30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	@ 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d44:	2b20      	cmp	r3, #32
 8008d46:	d132      	bne.n	8008dae <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <HAL_UART_Receive_DMA+0x24>
 8008d4e:	88fb      	ldrh	r3, [r7, #6]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e02b      	b.n	8008db0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d018      	beq.n	8008d9e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	613b      	str	r3, [r7, #16]
   return(result);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	623b      	str	r3, [r7, #32]
 8008d8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	69f9      	ldr	r1, [r7, #28]
 8008d90:	6a3a      	ldr	r2, [r7, #32]
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e6      	bne.n	8008d6c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d9e:	88fb      	ldrh	r3, [r7, #6]
 8008da0:	461a      	mov	r2, r3
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 fee7 	bl	8009b78 <UART_Start_Receive_DMA>
 8008daa:	4603      	mov	r3, r0
 8008dac:	e000      	b.n	8008db0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008dae:	2302      	movs	r3, #2
  }
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3728      	adds	r7, #40	@ 0x28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b0ba      	sub	sp, #232	@ 0xe8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008de2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008de6:	4013      	ands	r3, r2
 8008de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d115      	bne.n	8008e20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df8:	f003 0320 	and.w	r3, r3, #32
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00f      	beq.n	8008e20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e04:	f003 0320 	and.w	r3, r3, #32
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d009      	beq.n	8008e20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 82b1 	beq.w	8009378 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	4798      	blx	r3
      }
      return;
 8008e1e:	e2ab      	b.n	8009378 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 8117 	beq.w	8009058 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d106      	bne.n	8008e44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008e36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008e3a:	4b85      	ldr	r3, [pc, #532]	@ (8009050 <HAL_UART_IRQHandler+0x298>)
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 810a 	beq.w	8009058 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d011      	beq.n	8008e74 <HAL_UART_IRQHandler+0xbc>
 8008e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2201      	movs	r2, #1
 8008e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e6a:	f043 0201 	orr.w	r2, r3, #1
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d011      	beq.n	8008ea4 <HAL_UART_IRQHandler+0xec>
 8008e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2202      	movs	r2, #2
 8008e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e9a:	f043 0204 	orr.w	r2, r3, #4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d011      	beq.n	8008ed4 <HAL_UART_IRQHandler+0x11c>
 8008eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eca:	f043 0202 	orr.w	r2, r3, #2
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed8:	f003 0308 	and.w	r3, r3, #8
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d017      	beq.n	8008f10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d105      	bne.n	8008ef8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ef0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2208      	movs	r2, #8
 8008efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f06:	f043 0208 	orr.w	r2, r3, #8
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d012      	beq.n	8008f42 <HAL_UART_IRQHandler+0x18a>
 8008f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00c      	beq.n	8008f42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f38:	f043 0220 	orr.w	r2, r3, #32
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8217 	beq.w	800937c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00d      	beq.n	8008f76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d007      	beq.n	8008f76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8a:	2b40      	cmp	r3, #64	@ 0x40
 8008f8c:	d005      	beq.n	8008f9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d04f      	beq.n	800903a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 feb2 	bl	8009d04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008faa:	2b40      	cmp	r3, #64	@ 0x40
 8008fac:	d141      	bne.n	8009032 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1d9      	bne.n	8008fae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d013      	beq.n	800902a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009006:	4a13      	ldr	r2, [pc, #76]	@ (8009054 <HAL_UART_IRQHandler+0x29c>)
 8009008:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800900e:	4618      	mov	r0, r3
 8009010:	f7f9 fae2 	bl	80025d8 <HAL_DMA_Abort_IT>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d017      	beq.n	800904a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800901e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009024:	4610      	mov	r0, r2
 8009026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009028:	e00f      	b.n	800904a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f9c4 	bl	80093b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009030:	e00b      	b.n	800904a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f9c0 	bl	80093b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009038:	e007      	b.n	800904a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f9bc 	bl	80093b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009048:	e198      	b.n	800937c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800904a:	bf00      	nop
    return;
 800904c:	e196      	b.n	800937c <HAL_UART_IRQHandler+0x5c4>
 800904e:	bf00      	nop
 8009050:	04000120 	.word	0x04000120
 8009054:	0800a01b 	.word	0x0800a01b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800905c:	2b01      	cmp	r3, #1
 800905e:	f040 8166 	bne.w	800932e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009066:	f003 0310 	and.w	r3, r3, #16
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 815f 	beq.w	800932e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009074:	f003 0310 	and.w	r3, r3, #16
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8158 	beq.w	800932e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2210      	movs	r2, #16
 8009084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009090:	2b40      	cmp	r3, #64	@ 0x40
 8009092:	f040 80d0 	bne.w	8009236 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 80ab 	beq.w	8009202 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80090b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090b6:	429a      	cmp	r2, r3
 80090b8:	f080 80a3 	bcs.w	8009202 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d0:	f000 8086 	beq.w	80091e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	461a      	mov	r2, r3
 80090fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009102:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800910a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1da      	bne.n	80090d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800912e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009130:	f023 0301 	bic.w	r3, r3, #1
 8009134:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3308      	adds	r3, #8
 800913e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009142:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009146:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800914a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e1      	bne.n	800911e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3308      	adds	r3, #8
 8009160:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009162:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009164:	e853 3f00 	ldrex	r3, [r3]
 8009168:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800916a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800916c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009170:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800917e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009180:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009184:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800918c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e3      	bne.n	800915a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091b0:	f023 0310 	bic.w	r3, r3, #16
 80091b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	461a      	mov	r2, r3
 80091be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e4      	bne.n	80091a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091da:	4618      	mov	r0, r3
 80091dc:	f7f9 f98c 	bl	80024f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2202      	movs	r2, #2
 80091e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f8e6 	bl	80093cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009200:	e0be      	b.n	8009380 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800920c:	429a      	cmp	r2, r3
 800920e:	f040 80b7 	bne.w	8009380 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800921c:	f040 80b0 	bne.w	8009380 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8cc 	bl	80093cc <HAL_UARTEx_RxEventCallback>
      return;
 8009234:	e0a4      	b.n	8009380 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009242:	b29b      	uxth	r3, r3
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 8096 	beq.w	8009384 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8009258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8091 	beq.w	8009384 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009276:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009284:	647b      	str	r3, [r7, #68]	@ 0x44
 8009286:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800928a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e4      	bne.n	8009262 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3308      	adds	r3, #8
 800929e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	623b      	str	r3, [r7, #32]
   return(result);
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	f023 0301 	bic.w	r3, r3, #1
 80092ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3308      	adds	r3, #8
 80092b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80092be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092c4:	e841 2300 	strex	r3, r2, [r1]
 80092c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1e3      	bne.n	8009298 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2220      	movs	r2, #32
 80092d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f023 0310 	bic.w	r3, r3, #16
 80092f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	69b9      	ldr	r1, [r7, #24]
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	617b      	str	r3, [r7, #20]
   return(result);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e4      	bne.n	80092e4 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f850 	bl	80093cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800932c:	e02a      	b.n	8009384 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800932e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00e      	beq.n	8009358 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800933a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800933e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009342:	2b00      	cmp	r3, #0
 8009344:	d008      	beq.n	8009358 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01c      	beq.n	8009388 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
    }
    return;
 8009356:	e017      	b.n	8009388 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800935c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	d012      	beq.n	800938a <HAL_UART_IRQHandler+0x5d2>
 8009364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00c      	beq.n	800938a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 ff1f 	bl	800a1b4 <UART_EndTransmit_IT>
    return;
 8009376:	e008      	b.n	800938a <HAL_UART_IRQHandler+0x5d2>
      return;
 8009378:	bf00      	nop
 800937a:	e006      	b.n	800938a <HAL_UART_IRQHandler+0x5d2>
    return;
 800937c:	bf00      	nop
 800937e:	e004      	b.n	800938a <HAL_UART_IRQHandler+0x5d2>
      return;
 8009380:	bf00      	nop
 8009382:	e002      	b.n	800938a <HAL_UART_IRQHandler+0x5d2>
      return;
 8009384:	bf00      	nop
 8009386:	e000      	b.n	800938a <HAL_UART_IRQHandler+0x5d2>
    return;
 8009388:	bf00      	nop
  }

}
 800938a:	37e8      	adds	r7, #232	@ 0xe8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	431a      	orrs	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	4ba6      	ldr	r3, [pc, #664]	@ (80096a8 <UART_SetConfig+0x2c4>)
 8009410:	4013      	ands	r3, r2
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	6979      	ldr	r1, [r7, #20]
 8009418:	430b      	orrs	r3, r1
 800941a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	4313      	orrs	r3, r2
 8009440:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	430a      	orrs	r2, r1
 8009454:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a94      	ldr	r2, [pc, #592]	@ (80096ac <UART_SetConfig+0x2c8>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d120      	bne.n	80094a2 <UART_SetConfig+0xbe>
 8009460:	4b93      	ldr	r3, [pc, #588]	@ (80096b0 <UART_SetConfig+0x2cc>)
 8009462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	2b03      	cmp	r3, #3
 800946c:	d816      	bhi.n	800949c <UART_SetConfig+0xb8>
 800946e:	a201      	add	r2, pc, #4	@ (adr r2, 8009474 <UART_SetConfig+0x90>)
 8009470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009474:	08009485 	.word	0x08009485
 8009478:	08009491 	.word	0x08009491
 800947c:	0800948b 	.word	0x0800948b
 8009480:	08009497 	.word	0x08009497
 8009484:	2301      	movs	r3, #1
 8009486:	77fb      	strb	r3, [r7, #31]
 8009488:	e150      	b.n	800972c <UART_SetConfig+0x348>
 800948a:	2302      	movs	r3, #2
 800948c:	77fb      	strb	r3, [r7, #31]
 800948e:	e14d      	b.n	800972c <UART_SetConfig+0x348>
 8009490:	2304      	movs	r3, #4
 8009492:	77fb      	strb	r3, [r7, #31]
 8009494:	e14a      	b.n	800972c <UART_SetConfig+0x348>
 8009496:	2308      	movs	r3, #8
 8009498:	77fb      	strb	r3, [r7, #31]
 800949a:	e147      	b.n	800972c <UART_SetConfig+0x348>
 800949c:	2310      	movs	r3, #16
 800949e:	77fb      	strb	r3, [r7, #31]
 80094a0:	e144      	b.n	800972c <UART_SetConfig+0x348>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a83      	ldr	r2, [pc, #524]	@ (80096b4 <UART_SetConfig+0x2d0>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d132      	bne.n	8009512 <UART_SetConfig+0x12e>
 80094ac:	4b80      	ldr	r3, [pc, #512]	@ (80096b0 <UART_SetConfig+0x2cc>)
 80094ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094b2:	f003 030c 	and.w	r3, r3, #12
 80094b6:	2b0c      	cmp	r3, #12
 80094b8:	d828      	bhi.n	800950c <UART_SetConfig+0x128>
 80094ba:	a201      	add	r2, pc, #4	@ (adr r2, 80094c0 <UART_SetConfig+0xdc>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	080094f5 	.word	0x080094f5
 80094c4:	0800950d 	.word	0x0800950d
 80094c8:	0800950d 	.word	0x0800950d
 80094cc:	0800950d 	.word	0x0800950d
 80094d0:	08009501 	.word	0x08009501
 80094d4:	0800950d 	.word	0x0800950d
 80094d8:	0800950d 	.word	0x0800950d
 80094dc:	0800950d 	.word	0x0800950d
 80094e0:	080094fb 	.word	0x080094fb
 80094e4:	0800950d 	.word	0x0800950d
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	0800950d 	.word	0x0800950d
 80094f0:	08009507 	.word	0x08009507
 80094f4:	2300      	movs	r3, #0
 80094f6:	77fb      	strb	r3, [r7, #31]
 80094f8:	e118      	b.n	800972c <UART_SetConfig+0x348>
 80094fa:	2302      	movs	r3, #2
 80094fc:	77fb      	strb	r3, [r7, #31]
 80094fe:	e115      	b.n	800972c <UART_SetConfig+0x348>
 8009500:	2304      	movs	r3, #4
 8009502:	77fb      	strb	r3, [r7, #31]
 8009504:	e112      	b.n	800972c <UART_SetConfig+0x348>
 8009506:	2308      	movs	r3, #8
 8009508:	77fb      	strb	r3, [r7, #31]
 800950a:	e10f      	b.n	800972c <UART_SetConfig+0x348>
 800950c:	2310      	movs	r3, #16
 800950e:	77fb      	strb	r3, [r7, #31]
 8009510:	e10c      	b.n	800972c <UART_SetConfig+0x348>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a68      	ldr	r2, [pc, #416]	@ (80096b8 <UART_SetConfig+0x2d4>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d120      	bne.n	800955e <UART_SetConfig+0x17a>
 800951c:	4b64      	ldr	r3, [pc, #400]	@ (80096b0 <UART_SetConfig+0x2cc>)
 800951e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009522:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009526:	2b30      	cmp	r3, #48	@ 0x30
 8009528:	d013      	beq.n	8009552 <UART_SetConfig+0x16e>
 800952a:	2b30      	cmp	r3, #48	@ 0x30
 800952c:	d814      	bhi.n	8009558 <UART_SetConfig+0x174>
 800952e:	2b20      	cmp	r3, #32
 8009530:	d009      	beq.n	8009546 <UART_SetConfig+0x162>
 8009532:	2b20      	cmp	r3, #32
 8009534:	d810      	bhi.n	8009558 <UART_SetConfig+0x174>
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <UART_SetConfig+0x15c>
 800953a:	2b10      	cmp	r3, #16
 800953c:	d006      	beq.n	800954c <UART_SetConfig+0x168>
 800953e:	e00b      	b.n	8009558 <UART_SetConfig+0x174>
 8009540:	2300      	movs	r3, #0
 8009542:	77fb      	strb	r3, [r7, #31]
 8009544:	e0f2      	b.n	800972c <UART_SetConfig+0x348>
 8009546:	2302      	movs	r3, #2
 8009548:	77fb      	strb	r3, [r7, #31]
 800954a:	e0ef      	b.n	800972c <UART_SetConfig+0x348>
 800954c:	2304      	movs	r3, #4
 800954e:	77fb      	strb	r3, [r7, #31]
 8009550:	e0ec      	b.n	800972c <UART_SetConfig+0x348>
 8009552:	2308      	movs	r3, #8
 8009554:	77fb      	strb	r3, [r7, #31]
 8009556:	e0e9      	b.n	800972c <UART_SetConfig+0x348>
 8009558:	2310      	movs	r3, #16
 800955a:	77fb      	strb	r3, [r7, #31]
 800955c:	e0e6      	b.n	800972c <UART_SetConfig+0x348>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a56      	ldr	r2, [pc, #344]	@ (80096bc <UART_SetConfig+0x2d8>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d120      	bne.n	80095aa <UART_SetConfig+0x1c6>
 8009568:	4b51      	ldr	r3, [pc, #324]	@ (80096b0 <UART_SetConfig+0x2cc>)
 800956a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009572:	2bc0      	cmp	r3, #192	@ 0xc0
 8009574:	d013      	beq.n	800959e <UART_SetConfig+0x1ba>
 8009576:	2bc0      	cmp	r3, #192	@ 0xc0
 8009578:	d814      	bhi.n	80095a4 <UART_SetConfig+0x1c0>
 800957a:	2b80      	cmp	r3, #128	@ 0x80
 800957c:	d009      	beq.n	8009592 <UART_SetConfig+0x1ae>
 800957e:	2b80      	cmp	r3, #128	@ 0x80
 8009580:	d810      	bhi.n	80095a4 <UART_SetConfig+0x1c0>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <UART_SetConfig+0x1a8>
 8009586:	2b40      	cmp	r3, #64	@ 0x40
 8009588:	d006      	beq.n	8009598 <UART_SetConfig+0x1b4>
 800958a:	e00b      	b.n	80095a4 <UART_SetConfig+0x1c0>
 800958c:	2300      	movs	r3, #0
 800958e:	77fb      	strb	r3, [r7, #31]
 8009590:	e0cc      	b.n	800972c <UART_SetConfig+0x348>
 8009592:	2302      	movs	r3, #2
 8009594:	77fb      	strb	r3, [r7, #31]
 8009596:	e0c9      	b.n	800972c <UART_SetConfig+0x348>
 8009598:	2304      	movs	r3, #4
 800959a:	77fb      	strb	r3, [r7, #31]
 800959c:	e0c6      	b.n	800972c <UART_SetConfig+0x348>
 800959e:	2308      	movs	r3, #8
 80095a0:	77fb      	strb	r3, [r7, #31]
 80095a2:	e0c3      	b.n	800972c <UART_SetConfig+0x348>
 80095a4:	2310      	movs	r3, #16
 80095a6:	77fb      	strb	r3, [r7, #31]
 80095a8:	e0c0      	b.n	800972c <UART_SetConfig+0x348>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a44      	ldr	r2, [pc, #272]	@ (80096c0 <UART_SetConfig+0x2dc>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d125      	bne.n	8009600 <UART_SetConfig+0x21c>
 80095b4:	4b3e      	ldr	r3, [pc, #248]	@ (80096b0 <UART_SetConfig+0x2cc>)
 80095b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095c2:	d017      	beq.n	80095f4 <UART_SetConfig+0x210>
 80095c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095c8:	d817      	bhi.n	80095fa <UART_SetConfig+0x216>
 80095ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095ce:	d00b      	beq.n	80095e8 <UART_SetConfig+0x204>
 80095d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095d4:	d811      	bhi.n	80095fa <UART_SetConfig+0x216>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <UART_SetConfig+0x1fe>
 80095da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095de:	d006      	beq.n	80095ee <UART_SetConfig+0x20a>
 80095e0:	e00b      	b.n	80095fa <UART_SetConfig+0x216>
 80095e2:	2300      	movs	r3, #0
 80095e4:	77fb      	strb	r3, [r7, #31]
 80095e6:	e0a1      	b.n	800972c <UART_SetConfig+0x348>
 80095e8:	2302      	movs	r3, #2
 80095ea:	77fb      	strb	r3, [r7, #31]
 80095ec:	e09e      	b.n	800972c <UART_SetConfig+0x348>
 80095ee:	2304      	movs	r3, #4
 80095f0:	77fb      	strb	r3, [r7, #31]
 80095f2:	e09b      	b.n	800972c <UART_SetConfig+0x348>
 80095f4:	2308      	movs	r3, #8
 80095f6:	77fb      	strb	r3, [r7, #31]
 80095f8:	e098      	b.n	800972c <UART_SetConfig+0x348>
 80095fa:	2310      	movs	r3, #16
 80095fc:	77fb      	strb	r3, [r7, #31]
 80095fe:	e095      	b.n	800972c <UART_SetConfig+0x348>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a2f      	ldr	r2, [pc, #188]	@ (80096c4 <UART_SetConfig+0x2e0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d125      	bne.n	8009656 <UART_SetConfig+0x272>
 800960a:	4b29      	ldr	r3, [pc, #164]	@ (80096b0 <UART_SetConfig+0x2cc>)
 800960c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009610:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009614:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009618:	d017      	beq.n	800964a <UART_SetConfig+0x266>
 800961a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800961e:	d817      	bhi.n	8009650 <UART_SetConfig+0x26c>
 8009620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009624:	d00b      	beq.n	800963e <UART_SetConfig+0x25a>
 8009626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800962a:	d811      	bhi.n	8009650 <UART_SetConfig+0x26c>
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <UART_SetConfig+0x254>
 8009630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009634:	d006      	beq.n	8009644 <UART_SetConfig+0x260>
 8009636:	e00b      	b.n	8009650 <UART_SetConfig+0x26c>
 8009638:	2301      	movs	r3, #1
 800963a:	77fb      	strb	r3, [r7, #31]
 800963c:	e076      	b.n	800972c <UART_SetConfig+0x348>
 800963e:	2302      	movs	r3, #2
 8009640:	77fb      	strb	r3, [r7, #31]
 8009642:	e073      	b.n	800972c <UART_SetConfig+0x348>
 8009644:	2304      	movs	r3, #4
 8009646:	77fb      	strb	r3, [r7, #31]
 8009648:	e070      	b.n	800972c <UART_SetConfig+0x348>
 800964a:	2308      	movs	r3, #8
 800964c:	77fb      	strb	r3, [r7, #31]
 800964e:	e06d      	b.n	800972c <UART_SetConfig+0x348>
 8009650:	2310      	movs	r3, #16
 8009652:	77fb      	strb	r3, [r7, #31]
 8009654:	e06a      	b.n	800972c <UART_SetConfig+0x348>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1b      	ldr	r2, [pc, #108]	@ (80096c8 <UART_SetConfig+0x2e4>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d138      	bne.n	80096d2 <UART_SetConfig+0x2ee>
 8009660:	4b13      	ldr	r3, [pc, #76]	@ (80096b0 <UART_SetConfig+0x2cc>)
 8009662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009666:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800966a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800966e:	d017      	beq.n	80096a0 <UART_SetConfig+0x2bc>
 8009670:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009674:	d82a      	bhi.n	80096cc <UART_SetConfig+0x2e8>
 8009676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800967a:	d00b      	beq.n	8009694 <UART_SetConfig+0x2b0>
 800967c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009680:	d824      	bhi.n	80096cc <UART_SetConfig+0x2e8>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <UART_SetConfig+0x2aa>
 8009686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800968a:	d006      	beq.n	800969a <UART_SetConfig+0x2b6>
 800968c:	e01e      	b.n	80096cc <UART_SetConfig+0x2e8>
 800968e:	2300      	movs	r3, #0
 8009690:	77fb      	strb	r3, [r7, #31]
 8009692:	e04b      	b.n	800972c <UART_SetConfig+0x348>
 8009694:	2302      	movs	r3, #2
 8009696:	77fb      	strb	r3, [r7, #31]
 8009698:	e048      	b.n	800972c <UART_SetConfig+0x348>
 800969a:	2304      	movs	r3, #4
 800969c:	77fb      	strb	r3, [r7, #31]
 800969e:	e045      	b.n	800972c <UART_SetConfig+0x348>
 80096a0:	2308      	movs	r3, #8
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	e042      	b.n	800972c <UART_SetConfig+0x348>
 80096a6:	bf00      	nop
 80096a8:	efff69f3 	.word	0xefff69f3
 80096ac:	40011000 	.word	0x40011000
 80096b0:	40023800 	.word	0x40023800
 80096b4:	40004400 	.word	0x40004400
 80096b8:	40004800 	.word	0x40004800
 80096bc:	40004c00 	.word	0x40004c00
 80096c0:	40005000 	.word	0x40005000
 80096c4:	40011400 	.word	0x40011400
 80096c8:	40007800 	.word	0x40007800
 80096cc:	2310      	movs	r3, #16
 80096ce:	77fb      	strb	r3, [r7, #31]
 80096d0:	e02c      	b.n	800972c <UART_SetConfig+0x348>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a72      	ldr	r2, [pc, #456]	@ (80098a0 <UART_SetConfig+0x4bc>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d125      	bne.n	8009728 <UART_SetConfig+0x344>
 80096dc:	4b71      	ldr	r3, [pc, #452]	@ (80098a4 <UART_SetConfig+0x4c0>)
 80096de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80096e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096ea:	d017      	beq.n	800971c <UART_SetConfig+0x338>
 80096ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096f0:	d817      	bhi.n	8009722 <UART_SetConfig+0x33e>
 80096f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096f6:	d00b      	beq.n	8009710 <UART_SetConfig+0x32c>
 80096f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096fc:	d811      	bhi.n	8009722 <UART_SetConfig+0x33e>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <UART_SetConfig+0x326>
 8009702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009706:	d006      	beq.n	8009716 <UART_SetConfig+0x332>
 8009708:	e00b      	b.n	8009722 <UART_SetConfig+0x33e>
 800970a:	2300      	movs	r3, #0
 800970c:	77fb      	strb	r3, [r7, #31]
 800970e:	e00d      	b.n	800972c <UART_SetConfig+0x348>
 8009710:	2302      	movs	r3, #2
 8009712:	77fb      	strb	r3, [r7, #31]
 8009714:	e00a      	b.n	800972c <UART_SetConfig+0x348>
 8009716:	2304      	movs	r3, #4
 8009718:	77fb      	strb	r3, [r7, #31]
 800971a:	e007      	b.n	800972c <UART_SetConfig+0x348>
 800971c:	2308      	movs	r3, #8
 800971e:	77fb      	strb	r3, [r7, #31]
 8009720:	e004      	b.n	800972c <UART_SetConfig+0x348>
 8009722:	2310      	movs	r3, #16
 8009724:	77fb      	strb	r3, [r7, #31]
 8009726:	e001      	b.n	800972c <UART_SetConfig+0x348>
 8009728:	2310      	movs	r3, #16
 800972a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009734:	d15b      	bne.n	80097ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009736:	7ffb      	ldrb	r3, [r7, #31]
 8009738:	2b08      	cmp	r3, #8
 800973a:	d828      	bhi.n	800978e <UART_SetConfig+0x3aa>
 800973c:	a201      	add	r2, pc, #4	@ (adr r2, 8009744 <UART_SetConfig+0x360>)
 800973e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009742:	bf00      	nop
 8009744:	08009769 	.word	0x08009769
 8009748:	08009771 	.word	0x08009771
 800974c:	08009779 	.word	0x08009779
 8009750:	0800978f 	.word	0x0800978f
 8009754:	0800977f 	.word	0x0800977f
 8009758:	0800978f 	.word	0x0800978f
 800975c:	0800978f 	.word	0x0800978f
 8009760:	0800978f 	.word	0x0800978f
 8009764:	08009787 	.word	0x08009787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009768:	f7fd fccc 	bl	8007104 <HAL_RCC_GetPCLK1Freq>
 800976c:	61b8      	str	r0, [r7, #24]
        break;
 800976e:	e013      	b.n	8009798 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009770:	f7fd fcdc 	bl	800712c <HAL_RCC_GetPCLK2Freq>
 8009774:	61b8      	str	r0, [r7, #24]
        break;
 8009776:	e00f      	b.n	8009798 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009778:	4b4b      	ldr	r3, [pc, #300]	@ (80098a8 <UART_SetConfig+0x4c4>)
 800977a:	61bb      	str	r3, [r7, #24]
        break;
 800977c:	e00c      	b.n	8009798 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800977e:	f7fd fbef 	bl	8006f60 <HAL_RCC_GetSysClockFreq>
 8009782:	61b8      	str	r0, [r7, #24]
        break;
 8009784:	e008      	b.n	8009798 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800978a:	61bb      	str	r3, [r7, #24]
        break;
 800978c:	e004      	b.n	8009798 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	77bb      	strb	r3, [r7, #30]
        break;
 8009796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d074      	beq.n	8009888 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	005a      	lsls	r2, r3, #1
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	085b      	lsrs	r3, r3, #1
 80097a8:	441a      	add	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	2b0f      	cmp	r3, #15
 80097b8:	d916      	bls.n	80097e8 <UART_SetConfig+0x404>
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097c0:	d212      	bcs.n	80097e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f023 030f 	bic.w	r3, r3, #15
 80097ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	085b      	lsrs	r3, r3, #1
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	89fb      	ldrh	r3, [r7, #14]
 80097da:	4313      	orrs	r3, r2
 80097dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	89fa      	ldrh	r2, [r7, #14]
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	e04f      	b.n	8009888 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	77bb      	strb	r3, [r7, #30]
 80097ec:	e04c      	b.n	8009888 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097ee:	7ffb      	ldrb	r3, [r7, #31]
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	d828      	bhi.n	8009846 <UART_SetConfig+0x462>
 80097f4:	a201      	add	r2, pc, #4	@ (adr r2, 80097fc <UART_SetConfig+0x418>)
 80097f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fa:	bf00      	nop
 80097fc:	08009821 	.word	0x08009821
 8009800:	08009829 	.word	0x08009829
 8009804:	08009831 	.word	0x08009831
 8009808:	08009847 	.word	0x08009847
 800980c:	08009837 	.word	0x08009837
 8009810:	08009847 	.word	0x08009847
 8009814:	08009847 	.word	0x08009847
 8009818:	08009847 	.word	0x08009847
 800981c:	0800983f 	.word	0x0800983f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009820:	f7fd fc70 	bl	8007104 <HAL_RCC_GetPCLK1Freq>
 8009824:	61b8      	str	r0, [r7, #24]
        break;
 8009826:	e013      	b.n	8009850 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009828:	f7fd fc80 	bl	800712c <HAL_RCC_GetPCLK2Freq>
 800982c:	61b8      	str	r0, [r7, #24]
        break;
 800982e:	e00f      	b.n	8009850 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009830:	4b1d      	ldr	r3, [pc, #116]	@ (80098a8 <UART_SetConfig+0x4c4>)
 8009832:	61bb      	str	r3, [r7, #24]
        break;
 8009834:	e00c      	b.n	8009850 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009836:	f7fd fb93 	bl	8006f60 <HAL_RCC_GetSysClockFreq>
 800983a:	61b8      	str	r0, [r7, #24]
        break;
 800983c:	e008      	b.n	8009850 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800983e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009842:	61bb      	str	r3, [r7, #24]
        break;
 8009844:	e004      	b.n	8009850 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	77bb      	strb	r3, [r7, #30]
        break;
 800984e:	bf00      	nop
    }

    if (pclk != 0U)
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d018      	beq.n	8009888 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	085a      	lsrs	r2, r3, #1
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	441a      	add	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	fbb2 f3f3 	udiv	r3, r2, r3
 8009868:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b0f      	cmp	r3, #15
 800986e:	d909      	bls.n	8009884 <UART_SetConfig+0x4a0>
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009876:	d205      	bcs.n	8009884 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60da      	str	r2, [r3, #12]
 8009882:	e001      	b.n	8009888 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009894:	7fbb      	ldrb	r3, [r7, #30]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	40007c00 	.word	0x40007c00
 80098a4:	40023800 	.word	0x40023800
 80098a8:	00f42400 	.word	0x00f42400

080098ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01a      	beq.n	80099c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099aa:	d10a      	bne.n	80099c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00a      	beq.n	80099e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	605a      	str	r2, [r3, #4]
  }
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08c      	sub	sp, #48	@ 0x30
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a00:	f7f8 f920 	bl	8001c44 <HAL_GetTick>
 8009a04:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b08      	cmp	r3, #8
 8009a12:	d12e      	bne.n	8009a72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f83b 	bl	8009a9e <UART_WaitOnFlagUntilTimeout>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d021      	beq.n	8009a72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a42:	623b      	str	r3, [r7, #32]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	69b9      	ldr	r1, [r7, #24]
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	617b      	str	r3, [r7, #20]
   return(result);
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e6      	bne.n	8009a2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2220      	movs	r2, #32
 8009a64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e011      	b.n	8009a96 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2220      	movs	r2, #32
 8009a76:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3728      	adds	r7, #40	@ 0x28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	60f8      	str	r0, [r7, #12]
 8009aa6:	60b9      	str	r1, [r7, #8]
 8009aa8:	603b      	str	r3, [r7, #0]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aae:	e04f      	b.n	8009b50 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ab6:	d04b      	beq.n	8009b50 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ab8:	f7f8 f8c4 	bl	8001c44 <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d302      	bcc.n	8009ace <UART_WaitOnFlagUntilTimeout+0x30>
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e04e      	b.n	8009b70 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d037      	beq.n	8009b50 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b80      	cmp	r3, #128	@ 0x80
 8009ae4:	d034      	beq.n	8009b50 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b40      	cmp	r3, #64	@ 0x40
 8009aea:	d031      	beq.n	8009b50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b08      	cmp	r3, #8
 8009af8:	d110      	bne.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2208      	movs	r2, #8
 8009b00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f8fe 	bl	8009d04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2208      	movs	r2, #8
 8009b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e029      	b.n	8009b70 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b2a:	d111      	bne.n	8009b50 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 f8e4 	bl	8009d04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e00f      	b.n	8009b70 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	69da      	ldr	r2, [r3, #28]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	bf0c      	ite	eq
 8009b60:	2301      	moveq	r3, #1
 8009b62:	2300      	movne	r3, #0
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d0a0      	beq.n	8009ab0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b096      	sub	sp, #88	@ 0x58
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	4613      	mov	r3, r2
 8009b84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	88fa      	ldrh	r2, [r7, #6]
 8009b90:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2222      	movs	r2, #34	@ 0x22
 8009ba0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d028      	beq.n	8009bfe <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8009cac <UART_Start_Receive_DMA+0x134>)
 8009bb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8009cb0 <UART_Start_Receive_DMA+0x138>)
 8009bba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8009cb4 <UART_Start_Receive_DMA+0x13c>)
 8009bc2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bc8:	2200      	movs	r2, #0
 8009bca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3324      	adds	r3, #36	@ 0x24
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bdc:	461a      	mov	r2, r3
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	f7f8 fc2a 	bl	8002438 <HAL_DMA_Start_IT>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2210      	movs	r2, #16
 8009bee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e051      	b.n	8009ca2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d018      	beq.n	8009c38 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0e:	e853 3f00 	ldrex	r3, [r3]
 8009c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	461a      	mov	r2, r3
 8009c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c26:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c2c:	e841 2300 	strex	r3, r2, [r1]
 8009c30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e6      	bne.n	8009c06 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	f043 0301 	orr.w	r3, r3, #1
 8009c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3308      	adds	r3, #8
 8009c56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c58:	637a      	str	r2, [r7, #52]	@ 0x34
 8009c5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e5      	bne.n	8009c38 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3308      	adds	r3, #8
 8009c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3308      	adds	r3, #8
 8009c8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c8c:	623a      	str	r2, [r7, #32]
 8009c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c90:	69f9      	ldr	r1, [r7, #28]
 8009c92:	6a3a      	ldr	r2, [r7, #32]
 8009c94:	e841 2300 	strex	r3, r2, [r1]
 8009c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1e5      	bne.n	8009c6c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3758      	adds	r7, #88	@ 0x58
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	08009dcd 	.word	0x08009dcd
 8009cb0:	08009f2b 	.word	0x08009f2b
 8009cb4:	08009f9d 	.word	0x08009f9d

08009cb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b089      	sub	sp, #36	@ 0x24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009cd4:	61fb      	str	r3, [r7, #28]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6979      	ldr	r1, [r7, #20]
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	613b      	str	r3, [r7, #16]
   return(result);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e6      	bne.n	8009cc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009cf8:	bf00      	nop
 8009cfa:	3724      	adds	r7, #36	@ 0x24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b095      	sub	sp, #84	@ 0x54
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1e6      	bne.n	8009d0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3308      	adds	r3, #8
 8009d44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	e853 3f00 	ldrex	r3, [r3]
 8009d4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	f023 0301 	bic.w	r3, r3, #1
 8009d54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e5      	bne.n	8009d3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d118      	bne.n	8009dac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f023 0310 	bic.w	r3, r3, #16
 8009d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	461a      	mov	r2, r3
 8009d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d98:	61bb      	str	r3, [r7, #24]
 8009d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	6979      	ldr	r1, [r7, #20]
 8009d9e:	69ba      	ldr	r2, [r7, #24]
 8009da0:	e841 2300 	strex	r3, r2, [r1]
 8009da4:	613b      	str	r3, [r7, #16]
   return(result);
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e6      	bne.n	8009d7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009dc0:	bf00      	nop
 8009dc2:	3754      	adds	r7, #84	@ 0x54
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b09c      	sub	sp, #112	@ 0x70
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009de2:	d071      	beq.n	8009ec8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e0c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e6      	bne.n	8009dec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3308      	adds	r3, #8
 8009e24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	f023 0301 	bic.w	r3, r3, #1
 8009e34:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e5      	bne.n	8009e1e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3308      	adds	r3, #8
 8009e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e68:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e5      	bne.n	8009e52 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d118      	bne.n	8009ec8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f023 0310 	bic.w	r3, r3, #16
 8009eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009eb4:	61bb      	str	r3, [r7, #24]
 8009eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	6979      	ldr	r1, [r7, #20]
 8009eba:	69ba      	ldr	r2, [r7, #24]
 8009ebc:	e841 2300 	strex	r3, r2, [r1]
 8009ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e6      	bne.n	8009e96 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eca:	2200      	movs	r2, #0
 8009ecc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d122      	bne.n	8009f1c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8009ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8009ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009eee:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d204      	bcs.n	8009f00 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8009ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ef8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8009efc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	4619      	mov	r1, r3
 8009f14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f16:	f7ff fa59 	bl	80093cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f1a:	e002      	b.n	8009f22 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8009f1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f1e:	f00b fee5 	bl	8015cec <HAL_UART_RxCpltCallback>
}
 8009f22:	bf00      	nop
 8009f24:	3770      	adds	r7, #112	@ 0x70
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d123      	bne.n	8009f8e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009f4c:	085b      	lsrs	r3, r3, #1
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009f64:	897a      	ldrh	r2, [r7, #10]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d803      	bhi.n	8009f72 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	897a      	ldrh	r2, [r7, #10]
 8009f6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	4619      	mov	r1, r3
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f7ff fa20 	bl	80093cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f8c:	e002      	b.n	8009f94 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fa08 	bl	80093a4 <HAL_UART_RxHalfCpltCallback>
}
 8009f94:	bf00      	nop
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc2:	2b80      	cmp	r3, #128	@ 0x80
 8009fc4:	d109      	bne.n	8009fda <UART_DMAError+0x3e>
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	2b21      	cmp	r3, #33	@ 0x21
 8009fca:	d106      	bne.n	8009fda <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009fd4:	6978      	ldr	r0, [r7, #20]
 8009fd6:	f7ff fe6f 	bl	8009cb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe4:	2b40      	cmp	r3, #64	@ 0x40
 8009fe6:	d109      	bne.n	8009ffc <UART_DMAError+0x60>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b22      	cmp	r3, #34	@ 0x22
 8009fec:	d106      	bne.n	8009ffc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009ff6:	6978      	ldr	r0, [r7, #20]
 8009ff8:	f7ff fe84 	bl	8009d04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a002:	f043 0210 	orr.w	r2, r3, #16
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a00c:	6978      	ldr	r0, [r7, #20]
 800a00e:	f7ff f9d3 	bl	80093b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a012:	bf00      	nop
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7ff f9c1 	bl	80093b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a03e:	b480      	push	{r7}
 800a040:	b08f      	sub	sp, #60	@ 0x3c
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a04a:	2b21      	cmp	r3, #33	@ 0x21
 800a04c:	d14c      	bne.n	800a0e8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a054:	b29b      	uxth	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d132      	bne.n	800a0c0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	61fb      	str	r3, [r7, #28]
   return(result);
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a06e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a07a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a07e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a080:	e841 2300 	strex	r3, r2, [r1]
 800a084:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e6      	bne.n	800a05a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	60bb      	str	r3, [r7, #8]
   return(result);
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	61bb      	str	r3, [r7, #24]
 800a0ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6979      	ldr	r1, [r7, #20]
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e6      	bne.n	800a08c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a0be:	e013      	b.n	800a0e8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0c4:	781a      	ldrb	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800a0e8:	bf00      	nop
 800a0ea:	373c      	adds	r7, #60	@ 0x3c
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b091      	sub	sp, #68	@ 0x44
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a100:	2b21      	cmp	r3, #33	@ 0x21
 800a102:	d151      	bne.n	800a1a8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d132      	bne.n	800a176 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	623b      	str	r3, [r7, #32]
   return(result);
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a124:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a130:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e6      	bne.n	800a110 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a156:	637b      	str	r3, [r7, #52]	@ 0x34
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a160:	61fb      	str	r3, [r7, #28]
 800a162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	69b9      	ldr	r1, [r7, #24]
 800a166:	69fa      	ldr	r2, [r7, #28]
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	617b      	str	r3, [r7, #20]
   return(result);
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e6      	bne.n	800a142 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a174:	e018      	b.n	800a1a8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a17c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a18a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a190:	1c9a      	adds	r2, r3, #2
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800a1a8:	bf00      	nop
 800a1aa:	3744      	adds	r7, #68	@ 0x44
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1d0:	61fb      	str	r3, [r7, #28]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	61bb      	str	r3, [r7, #24]
 800a1dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6979      	ldr	r1, [r7, #20]
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e6      	bne.n	800a1bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff f8c8 	bl	8009390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a200:	bf00      	nop
 800a202:	3720      	adds	r7, #32
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800a20e:	4b87      	ldr	r3, [pc, #540]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a210:	220a      	movs	r2, #10
 800a212:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800a214:	4b85      	ldr	r3, [pc, #532]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a216:	2200      	movs	r2, #0
 800a218:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a21a:	4b84      	ldr	r3, [pc, #528]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a21c:	2201      	movs	r2, #1
 800a21e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800a220:	4b82      	ldr	r3, [pc, #520]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a222:	2264      	movs	r2, #100	@ 0x64
 800a224:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a226:	4b82      	ldr	r3, [pc, #520]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a228:	22ff      	movs	r2, #255	@ 0xff
 800a22a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a22c:	4b80      	ldr	r3, [pc, #512]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a22e:	22ff      	movs	r2, #255	@ 0xff
 800a230:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a232:	4b7f      	ldr	r3, [pc, #508]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a234:	22ff      	movs	r2, #255	@ 0xff
 800a236:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a238:	4b7d      	ldr	r3, [pc, #500]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800a23e:	4b7d      	ldr	r3, [pc, #500]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a240:	220a      	movs	r2, #10
 800a242:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800a244:	4b7b      	ldr	r3, [pc, #492]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a246:	2200      	movs	r2, #0
 800a248:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a24a:	4b7a      	ldr	r3, [pc, #488]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a24c:	2201      	movs	r2, #1
 800a24e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800a250:	4b78      	ldr	r3, [pc, #480]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a252:	2265      	movs	r2, #101	@ 0x65
 800a254:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800a256:	f000 fd6a 	bl	800ad2e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a25a:	4b74      	ldr	r3, [pc, #464]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	061a      	lsls	r2, r3, #24
 800a260:	4b72      	ldr	r3, [pc, #456]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	041b      	lsls	r3, r3, #16
 800a266:	431a      	orrs	r2, r3
 800a268:	4b70      	ldr	r3, [pc, #448]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a26a:	789b      	ldrb	r3, [r3, #2]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	4313      	orrs	r3, r2
 800a270:	4a6e      	ldr	r2, [pc, #440]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a272:	78d2      	ldrb	r2, [r2, #3]
 800a274:	4313      	orrs	r3, r2
 800a276:	061a      	lsls	r2, r3, #24
 800a278:	4b6c      	ldr	r3, [pc, #432]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	0619      	lsls	r1, r3, #24
 800a27e:	4b6b      	ldr	r3, [pc, #428]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a280:	785b      	ldrb	r3, [r3, #1]
 800a282:	041b      	lsls	r3, r3, #16
 800a284:	4319      	orrs	r1, r3
 800a286:	4b69      	ldr	r3, [pc, #420]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a288:	789b      	ldrb	r3, [r3, #2]
 800a28a:	021b      	lsls	r3, r3, #8
 800a28c:	430b      	orrs	r3, r1
 800a28e:	4967      	ldr	r1, [pc, #412]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a290:	78c9      	ldrb	r1, [r1, #3]
 800a292:	430b      	orrs	r3, r1
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a29a:	431a      	orrs	r2, r3
 800a29c:	4b63      	ldr	r3, [pc, #396]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	0619      	lsls	r1, r3, #24
 800a2a2:	4b62      	ldr	r3, [pc, #392]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	4319      	orrs	r1, r3
 800a2aa:	4b60      	ldr	r3, [pc, #384]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	495e      	ldr	r1, [pc, #376]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a2b4:	78c9      	ldrb	r1, [r1, #3]
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	0a1b      	lsrs	r3, r3, #8
 800a2ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	4b5a      	ldr	r3, [pc, #360]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	0619      	lsls	r1, r3, #24
 800a2c6:	4b59      	ldr	r3, [pc, #356]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	041b      	lsls	r3, r3, #16
 800a2cc:	4319      	orrs	r1, r3
 800a2ce:	4b57      	ldr	r3, [pc, #348]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a2d0:	789b      	ldrb	r3, [r3, #2]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	4955      	ldr	r1, [pc, #340]	@ (800a42c <MX_LWIP_Init+0x224>)
 800a2d8:	78c9      	ldrb	r1, [r1, #3]
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	0e1b      	lsrs	r3, r3, #24
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	4a55      	ldr	r2, [pc, #340]	@ (800a438 <MX_LWIP_Init+0x230>)
 800a2e2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a2e4:	4b52      	ldr	r3, [pc, #328]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	061a      	lsls	r2, r3, #24
 800a2ea:	4b51      	ldr	r3, [pc, #324]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	041b      	lsls	r3, r3, #16
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	4b4f      	ldr	r3, [pc, #316]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a2f4:	789b      	ldrb	r3, [r3, #2]
 800a2f6:	021b      	lsls	r3, r3, #8
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	4a4d      	ldr	r2, [pc, #308]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a2fc:	78d2      	ldrb	r2, [r2, #3]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	061a      	lsls	r2, r3, #24
 800a302:	4b4b      	ldr	r3, [pc, #300]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	0619      	lsls	r1, r3, #24
 800a308:	4b49      	ldr	r3, [pc, #292]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a30a:	785b      	ldrb	r3, [r3, #1]
 800a30c:	041b      	lsls	r3, r3, #16
 800a30e:	4319      	orrs	r1, r3
 800a310:	4b47      	ldr	r3, [pc, #284]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a312:	789b      	ldrb	r3, [r3, #2]
 800a314:	021b      	lsls	r3, r3, #8
 800a316:	430b      	orrs	r3, r1
 800a318:	4945      	ldr	r1, [pc, #276]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a31a:	78c9      	ldrb	r1, [r1, #3]
 800a31c:	430b      	orrs	r3, r1
 800a31e:	021b      	lsls	r3, r3, #8
 800a320:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a324:	431a      	orrs	r2, r3
 800a326:	4b42      	ldr	r3, [pc, #264]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	0619      	lsls	r1, r3, #24
 800a32c:	4b40      	ldr	r3, [pc, #256]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	041b      	lsls	r3, r3, #16
 800a332:	4319      	orrs	r1, r3
 800a334:	4b3e      	ldr	r3, [pc, #248]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a336:	789b      	ldrb	r3, [r3, #2]
 800a338:	021b      	lsls	r3, r3, #8
 800a33a:	430b      	orrs	r3, r1
 800a33c:	493c      	ldr	r1, [pc, #240]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a33e:	78c9      	ldrb	r1, [r1, #3]
 800a340:	430b      	orrs	r3, r1
 800a342:	0a1b      	lsrs	r3, r3, #8
 800a344:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a348:	431a      	orrs	r2, r3
 800a34a:	4b39      	ldr	r3, [pc, #228]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	0619      	lsls	r1, r3, #24
 800a350:	4b37      	ldr	r3, [pc, #220]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	041b      	lsls	r3, r3, #16
 800a356:	4319      	orrs	r1, r3
 800a358:	4b35      	ldr	r3, [pc, #212]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a35a:	789b      	ldrb	r3, [r3, #2]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	430b      	orrs	r3, r1
 800a360:	4933      	ldr	r1, [pc, #204]	@ (800a430 <MX_LWIP_Init+0x228>)
 800a362:	78c9      	ldrb	r1, [r1, #3]
 800a364:	430b      	orrs	r3, r1
 800a366:	0e1b      	lsrs	r3, r3, #24
 800a368:	4313      	orrs	r3, r2
 800a36a:	4a34      	ldr	r2, [pc, #208]	@ (800a43c <MX_LWIP_Init+0x234>)
 800a36c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a36e:	4b31      	ldr	r3, [pc, #196]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	061a      	lsls	r2, r3, #24
 800a374:	4b2f      	ldr	r3, [pc, #188]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a376:	785b      	ldrb	r3, [r3, #1]
 800a378:	041b      	lsls	r3, r3, #16
 800a37a:	431a      	orrs	r2, r3
 800a37c:	4b2d      	ldr	r3, [pc, #180]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a37e:	789b      	ldrb	r3, [r3, #2]
 800a380:	021b      	lsls	r3, r3, #8
 800a382:	4313      	orrs	r3, r2
 800a384:	4a2b      	ldr	r2, [pc, #172]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a386:	78d2      	ldrb	r2, [r2, #3]
 800a388:	4313      	orrs	r3, r2
 800a38a:	061a      	lsls	r2, r3, #24
 800a38c:	4b29      	ldr	r3, [pc, #164]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	0619      	lsls	r1, r3, #24
 800a392:	4b28      	ldr	r3, [pc, #160]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	041b      	lsls	r3, r3, #16
 800a398:	4319      	orrs	r1, r3
 800a39a:	4b26      	ldr	r3, [pc, #152]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a39c:	789b      	ldrb	r3, [r3, #2]
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	4924      	ldr	r1, [pc, #144]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3a4:	78c9      	ldrb	r1, [r1, #3]
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	4b20      	ldr	r3, [pc, #128]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	0619      	lsls	r1, r3, #24
 800a3b6:	4b1f      	ldr	r3, [pc, #124]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3b8:	785b      	ldrb	r3, [r3, #1]
 800a3ba:	041b      	lsls	r3, r3, #16
 800a3bc:	4319      	orrs	r1, r3
 800a3be:	4b1d      	ldr	r3, [pc, #116]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3c0:	789b      	ldrb	r3, [r3, #2]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	430b      	orrs	r3, r1
 800a3c6:	491b      	ldr	r1, [pc, #108]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3c8:	78c9      	ldrb	r1, [r1, #3]
 800a3ca:	430b      	orrs	r3, r1
 800a3cc:	0a1b      	lsrs	r3, r3, #8
 800a3ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3d2:	431a      	orrs	r2, r3
 800a3d4:	4b17      	ldr	r3, [pc, #92]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	0619      	lsls	r1, r3, #24
 800a3da:	4b16      	ldr	r3, [pc, #88]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	4319      	orrs	r1, r3
 800a3e2:	4b14      	ldr	r3, [pc, #80]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3e4:	789b      	ldrb	r3, [r3, #2]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	4912      	ldr	r1, [pc, #72]	@ (800a434 <MX_LWIP_Init+0x22c>)
 800a3ec:	78c9      	ldrb	r1, [r1, #3]
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	0e1b      	lsrs	r3, r3, #24
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	4a12      	ldr	r2, [pc, #72]	@ (800a440 <MX_LWIP_Init+0x238>)
 800a3f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a3f8:	4b12      	ldr	r3, [pc, #72]	@ (800a444 <MX_LWIP_Init+0x23c>)
 800a3fa:	9302      	str	r3, [sp, #8]
 800a3fc:	4b12      	ldr	r3, [pc, #72]	@ (800a448 <MX_LWIP_Init+0x240>)
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	2300      	movs	r3, #0
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	4b0e      	ldr	r3, [pc, #56]	@ (800a440 <MX_LWIP_Init+0x238>)
 800a406:	4a0d      	ldr	r2, [pc, #52]	@ (800a43c <MX_LWIP_Init+0x234>)
 800a408:	490b      	ldr	r1, [pc, #44]	@ (800a438 <MX_LWIP_Init+0x230>)
 800a40a:	4810      	ldr	r0, [pc, #64]	@ (800a44c <MX_LWIP_Init+0x244>)
 800a40c:	f001 f976 	bl	800b6fc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a410:	480e      	ldr	r0, [pc, #56]	@ (800a44c <MX_LWIP_Init+0x244>)
 800a412:	f001 fc07 	bl	800bc24 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a416:	480d      	ldr	r0, [pc, #52]	@ (800a44c <MX_LWIP_Init+0x244>)
 800a418:	f001 fc28 	bl	800bc6c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a41c:	490c      	ldr	r1, [pc, #48]	@ (800a450 <MX_LWIP_Init+0x248>)
 800a41e:	480b      	ldr	r0, [pc, #44]	@ (800a44c <MX_LWIP_Init+0x244>)
 800a420:	f001 fd26 	bl	800be70 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a424:	bf00      	nop
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20000960 	.word	0x20000960
 800a430:	20000964 	.word	0x20000964
 800a434:	20000968 	.word	0x20000968
 800a438:	20000954 	.word	0x20000954
 800a43c:	20000958 	.word	0x20000958
 800a440:	2000095c 	.word	0x2000095c
 800a444:	08015279 	.word	0x08015279
 800a448:	0800a7c9 	.word	0x0800a7c9
 800a44c:	20000920 	.word	0x20000920
 800a450:	0800a4a5 	.word	0x0800a4a5

0800a454 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800a45c:	f7f7 fbf2 	bl	8001c44 <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	4b08      	ldr	r3, [pc, #32]	@ (800a484 <Ethernet_Link_Periodic_Handle+0x30>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b63      	cmp	r3, #99	@ 0x63
 800a46a:	d907      	bls.n	800a47c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800a46c:	f7f7 fbea 	bl	8001c44 <HAL_GetTick>
 800a470:	4603      	mov	r3, r0
 800a472:	4a04      	ldr	r2, [pc, #16]	@ (800a484 <Ethernet_Link_Periodic_Handle+0x30>)
 800a474:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fb0c 	bl	800aa94 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	2000091c 	.word	0x2000091c

0800a488 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a48c:	4804      	ldr	r0, [pc, #16]	@ (800a4a0 <MX_LWIP_Process+0x18>)
 800a48e:	f000 f97b 	bl	800a788 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800a492:	f007 fd85 	bl	8011fa0 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800a496:	4802      	ldr	r0, [pc, #8]	@ (800a4a0 <MX_LWIP_Process+0x18>)
 800a498:	f7ff ffdc 	bl	800a454 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a49c:	bf00      	nop
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20000920 	.word	0x20000920

0800a4a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <SCB_InvalidateDCache_by_Addr>:
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a4ca:	2320      	movs	r3, #32
 800a4cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a4ce:	f3bf 8f4f 	dsb	sy
}
 800a4d2:	bf00      	nop
    while (op_size > 0) {
 800a4d4:	e00b      	b.n	800a4ee <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a4d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a50c <SCB_InvalidateDCache_by_Addr+0x54>)
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	dcf0      	bgt.n	800a4d6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a4f4:	f3bf 8f4f 	dsb	sy
}
 800a4f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a4fa:	f3bf 8f6f 	isb	sy
}
 800a4fe:	bf00      	nop
}
 800a500:	bf00      	nop
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	e000ed00 	.word	0xe000ed00

0800a510 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a51c:	4b44      	ldr	r3, [pc, #272]	@ (800a630 <low_level_init+0x120>)
 800a51e:	4a45      	ldr	r2, [pc, #276]	@ (800a634 <low_level_init+0x124>)
 800a520:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a522:	2300      	movs	r3, #0
 800a524:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a526:	2380      	movs	r3, #128	@ 0x80
 800a528:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a52a:	23e1      	movs	r3, #225	@ 0xe1
 800a52c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a52e:	2300      	movs	r3, #0
 800a530:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a532:	2300      	movs	r3, #0
 800a534:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a536:	2300      	movs	r3, #0
 800a538:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a53a:	4a3d      	ldr	r2, [pc, #244]	@ (800a630 <low_level_init+0x120>)
 800a53c:	f107 0308 	add.w	r3, r7, #8
 800a540:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a542:	4b3b      	ldr	r3, [pc, #236]	@ (800a630 <low_level_init+0x120>)
 800a544:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a548:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a54a:	4b39      	ldr	r3, [pc, #228]	@ (800a630 <low_level_init+0x120>)
 800a54c:	4a3a      	ldr	r2, [pc, #232]	@ (800a638 <low_level_init+0x128>)
 800a54e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a550:	4b37      	ldr	r3, [pc, #220]	@ (800a630 <low_level_init+0x120>)
 800a552:	4a3a      	ldr	r2, [pc, #232]	@ (800a63c <low_level_init+0x12c>)
 800a554:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a556:	4b36      	ldr	r3, [pc, #216]	@ (800a630 <low_level_init+0x120>)
 800a558:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a55c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a55e:	4834      	ldr	r0, [pc, #208]	@ (800a630 <low_level_init+0x120>)
 800a560:	f7f8 fae0 	bl	8002b24 <HAL_ETH_Init>
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a568:	2238      	movs	r2, #56	@ 0x38
 800a56a:	2100      	movs	r1, #0
 800a56c:	4834      	ldr	r0, [pc, #208]	@ (800a640 <low_level_init+0x130>)
 800a56e:	f00b fe3d 	bl	80161ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a572:	4b33      	ldr	r3, [pc, #204]	@ (800a640 <low_level_init+0x130>)
 800a574:	2221      	movs	r2, #33	@ 0x21
 800a576:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a578:	4b31      	ldr	r3, [pc, #196]	@ (800a640 <low_level_init+0x130>)
 800a57a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a57e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a580:	4b2f      	ldr	r3, [pc, #188]	@ (800a640 <low_level_init+0x130>)
 800a582:	2200      	movs	r2, #0
 800a584:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a586:	482f      	ldr	r0, [pc, #188]	@ (800a644 <low_level_init+0x134>)
 800a588:	f000 ff80 	bl	800b48c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2206      	movs	r2, #6
 800a590:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a594:	4b26      	ldr	r3, [pc, #152]	@ (800a630 <low_level_init+0x120>)
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	781a      	ldrb	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a5a0:	4b23      	ldr	r3, [pc, #140]	@ (800a630 <low_level_init+0x120>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	785a      	ldrb	r2, [r3, #1]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a5ac:	4b20      	ldr	r3, [pc, #128]	@ (800a630 <low_level_init+0x120>)
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	789a      	ldrb	r2, [r3, #2]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a5b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a630 <low_level_init+0x120>)
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	78da      	ldrb	r2, [r3, #3]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a5c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a630 <low_level_init+0x120>)
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	791a      	ldrb	r2, [r3, #4]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a5d0:	4b17      	ldr	r3, [pc, #92]	@ (800a630 <low_level_init+0x120>)
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	795a      	ldrb	r2, [r3, #5]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a5e2:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a5ea:	f043 030a 	orr.w	r3, r3, #10
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a5f6:	4914      	ldr	r1, [pc, #80]	@ (800a648 <low_level_init+0x138>)
 800a5f8:	4814      	ldr	r0, [pc, #80]	@ (800a64c <low_level_init+0x13c>)
 800a5fa:	f7f7 f9cc 	bl	8001996 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800a5fe:	4813      	ldr	r0, [pc, #76]	@ (800a64c <low_level_init+0x13c>)
 800a600:	f7f7 f9fb 	bl	80019fa <LAN8742_Init>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d006      	beq.n	800a618 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fc00 	bl	800be10 <netif_set_link_down>
    netif_set_down(netif);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 fb97 	bl	800bd44 <netif_set_down>
 800a616:	e008      	b.n	800a62a <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800a618:	7bfb      	ldrb	r3, [r7, #15]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d103      	bne.n	800a626 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fa38 	bl	800aa94 <ethernet_link_check_state>
 800a624:	e001      	b.n	800a62a <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800a626:	f7f6 fba3 	bl	8000d70 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	200052f8 	.word	0x200052f8
 800a634:	40028000 	.word	0x40028000
 800a638:	2000016c 	.word	0x2000016c
 800a63c:	200000cc 	.word	0x200000cc
 800a640:	200053a8 	.word	0x200053a8
 800a644:	0801a46c 	.word	0x0801a46c
 800a648:	2000000c 	.word	0x2000000c
 800a64c:	200053e0 	.word	0x200053e0

0800a650 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b092      	sub	sp, #72	@ 0x48
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a65a:	2300      	movs	r3, #0
 800a65c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a668:	f107 030c 	add.w	r3, r7, #12
 800a66c:	2230      	movs	r2, #48	@ 0x30
 800a66e:	2100      	movs	r1, #0
 800a670:	4618      	mov	r0, r3
 800a672:	f00b fdbb 	bl	80161ec <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a676:	f107 030c 	add.w	r3, r7, #12
 800a67a:	2230      	movs	r2, #48	@ 0x30
 800a67c:	2100      	movs	r1, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f00b fdb4 	bl	80161ec <memset>

  for(q = p; q != NULL; q = q->next)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	643b      	str	r3, [r7, #64]	@ 0x40
 800a688:	e045      	b.n	800a716 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a68a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d902      	bls.n	800a696 <low_level_output+0x46>
      return ERR_IF;
 800a690:	f06f 030b 	mvn.w	r3, #11
 800a694:	e055      	b.n	800a742 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a698:	6859      	ldr	r1, [r3, #4]
 800a69a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a69c:	4613      	mov	r3, r2
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	4413      	add	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	3348      	adds	r3, #72	@ 0x48
 800a6a6:	443b      	add	r3, r7
 800a6a8:	3b3c      	subs	r3, #60	@ 0x3c
 800a6aa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a6ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ae:	895b      	ldrh	r3, [r3, #10]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	3348      	adds	r3, #72	@ 0x48
 800a6be:	443b      	add	r3, r7
 800a6c0:	3b38      	subs	r3, #56	@ 0x38
 800a6c2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a6c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d011      	beq.n	800a6ee <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a6ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6cc:	1e5a      	subs	r2, r3, #1
 800a6ce:	f107 000c 	add.w	r0, r7, #12
 800a6d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	440b      	add	r3, r1
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	18c1      	adds	r1, r0, r3
 800a6de:	4613      	mov	r3, r2
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	3348      	adds	r3, #72	@ 0x48
 800a6e8:	443b      	add	r3, r7
 800a6ea:	3b34      	subs	r3, #52	@ 0x34
 800a6ec:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a6ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d109      	bne.n	800a70a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a6f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	3348      	adds	r3, #72	@ 0x48
 800a702:	443b      	add	r3, r7
 800a704:	3b34      	subs	r3, #52	@ 0x34
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a70a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a70c:	3301      	adds	r3, #1
 800a70e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	643b      	str	r3, [r7, #64]	@ 0x40
 800a716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1b6      	bne.n	800a68a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	891b      	ldrh	r3, [r3, #8]
 800a720:	461a      	mov	r2, r3
 800a722:	4b0a      	ldr	r3, [pc, #40]	@ (800a74c <low_level_output+0xfc>)
 800a724:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a726:	4a09      	ldr	r2, [pc, #36]	@ (800a74c <low_level_output+0xfc>)
 800a728:	f107 030c 	add.w	r3, r7, #12
 800a72c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a72e:	4a07      	ldr	r2, [pc, #28]	@ (800a74c <low_level_output+0xfc>)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a734:	2214      	movs	r2, #20
 800a736:	4905      	ldr	r1, [pc, #20]	@ (800a74c <low_level_output+0xfc>)
 800a738:	4805      	ldr	r0, [pc, #20]	@ (800a750 <low_level_output+0x100>)
 800a73a:	f7f8 fb7d 	bl	8002e38 <HAL_ETH_Transmit>

  return errval;
 800a73e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a742:	4618      	mov	r0, r3
 800a744:	3748      	adds	r7, #72	@ 0x48
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	200053a8 	.word	0x200053a8
 800a750:	200052f8 	.word	0x200052f8

0800a754 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a760:	4b07      	ldr	r3, [pc, #28]	@ (800a780 <low_level_input+0x2c>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d105      	bne.n	800a774 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a768:	f107 030c 	add.w	r3, r7, #12
 800a76c:	4619      	mov	r1, r3
 800a76e:	4805      	ldr	r0, [pc, #20]	@ (800a784 <low_level_input+0x30>)
 800a770:	f7f8 fbf6 	bl	8002f60 <HAL_ETH_ReadData>
  }

  return p;
 800a774:	68fb      	ldr	r3, [r7, #12]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	200052f4 	.word	0x200052f4
 800a784:	200052f8 	.word	0x200052f8

0800a788 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff ffdd 	bl	800a754 <low_level_input>
 800a79a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00a      	beq.n	800a7b8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	4798      	blx	r3
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f001 fedc 	bl	800c570 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1ea      	bne.n	800a794 <ethernetif_input+0xc>
}
 800a7be:	bf00      	nop
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <ethernetif_init+0x1c>
 800a7d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a810 <ethernetif_init+0x48>)
 800a7d8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800a7dc:	490d      	ldr	r1, [pc, #52]	@ (800a814 <ethernetif_init+0x4c>)
 800a7de:	480e      	ldr	r0, [pc, #56]	@ (800a818 <ethernetif_init+0x50>)
 800a7e0:	f00b fba4 	bl	8015f2c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2273      	movs	r2, #115	@ 0x73
 800a7e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2274      	movs	r2, #116	@ 0x74
 800a7f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a09      	ldr	r2, [pc, #36]	@ (800a81c <ethernetif_init+0x54>)
 800a7f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a08      	ldr	r2, [pc, #32]	@ (800a820 <ethernetif_init+0x58>)
 800a7fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff fe85 	bl	800a510 <low_level_init>

  return ERR_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	08016ea4 	.word	0x08016ea4
 800a814:	08016ec0 	.word	0x08016ec0
 800a818:	08016ed0 	.word	0x08016ed0
 800a81c:	0801360d 	.word	0x0801360d
 800a820:	0800a651 	.word	0x0800a651

0800a824 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a830:	68f9      	ldr	r1, [r7, #12]
 800a832:	4807      	ldr	r0, [pc, #28]	@ (800a850 <pbuf_free_custom+0x2c>)
 800a834:	f000 ff0c 	bl	800b650 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a838:	4b06      	ldr	r3, [pc, #24]	@ (800a854 <pbuf_free_custom+0x30>)
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d102      	bne.n	800a846 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a840:	4b04      	ldr	r3, [pc, #16]	@ (800a854 <pbuf_free_custom+0x30>)
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
  }
}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	0801a46c 	.word	0x0801a46c
 800a854:	200052f4 	.word	0x200052f4

0800a858 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a85c:	f7f7 f9f2 	bl	8001c44 <HAL_GetTick>
 800a860:	4603      	mov	r3, r0
}
 800a862:	4618      	mov	r0, r3
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08e      	sub	sp, #56	@ 0x38
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a874:	2200      	movs	r2, #0
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	605a      	str	r2, [r3, #4]
 800a87a:	609a      	str	r2, [r3, #8]
 800a87c:	60da      	str	r2, [r3, #12]
 800a87e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a56      	ldr	r2, [pc, #344]	@ (800a9e0 <HAL_ETH_MspInit+0x178>)
 800a886:	4293      	cmp	r3, r2
 800a888:	f040 80a6 	bne.w	800a9d8 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a88c:	4b55      	ldr	r3, [pc, #340]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a88e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a890:	4a54      	ldr	r2, [pc, #336]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a896:	6313      	str	r3, [r2, #48]	@ 0x30
 800a898:	4b52      	ldr	r3, [pc, #328]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a89a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a89c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8a0:	623b      	str	r3, [r7, #32]
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	4b4f      	ldr	r3, [pc, #316]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8a8:	4a4e      	ldr	r2, [pc, #312]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a8ae:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8b0:	4b4c      	ldr	r3, [pc, #304]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8b8:	61fb      	str	r3, [r7, #28]
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	4b49      	ldr	r3, [pc, #292]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8c0:	4a48      	ldr	r2, [pc, #288]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8c6:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8c8:	4b46      	ldr	r3, [pc, #280]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8d0:	61bb      	str	r3, [r7, #24]
 800a8d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8d4:	4b43      	ldr	r3, [pc, #268]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d8:	4a42      	ldr	r2, [pc, #264]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8da:	f043 0304 	orr.w	r3, r3, #4
 800a8de:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8e0:	4b40      	ldr	r3, [pc, #256]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e4:	f003 0304 	and.w	r3, r3, #4
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8ec:	4b3d      	ldr	r3, [pc, #244]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f0:	4a3c      	ldr	r2, [pc, #240]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8f2:	f043 0301 	orr.w	r3, r3, #1
 800a8f6:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8f8:	4b3a      	ldr	r3, [pc, #232]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	613b      	str	r3, [r7, #16]
 800a902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a904:	4b37      	ldr	r3, [pc, #220]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a908:	4a36      	ldr	r2, [pc, #216]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a90a:	f043 0302 	orr.w	r3, r3, #2
 800a90e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a910:	4b34      	ldr	r3, [pc, #208]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	60fb      	str	r3, [r7, #12]
 800a91a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a91c:	4b31      	ldr	r3, [pc, #196]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a920:	4a30      	ldr	r2, [pc, #192]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a926:	6313      	str	r3, [r2, #48]	@ 0x30
 800a928:	4b2e      	ldr	r3, [pc, #184]	@ (800a9e4 <HAL_ETH_MspInit+0x17c>)
 800a92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a930:	60bb      	str	r3, [r7, #8]
 800a932:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a934:	2332      	movs	r3, #50	@ 0x32
 800a936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a938:	2302      	movs	r3, #2
 800a93a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a93c:	2300      	movs	r3, #0
 800a93e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a940:	2303      	movs	r3, #3
 800a942:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a944:	230b      	movs	r3, #11
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a94c:	4619      	mov	r1, r3
 800a94e:	4826      	ldr	r0, [pc, #152]	@ (800a9e8 <HAL_ETH_MspInit+0x180>)
 800a950:	f7f9 fb36 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a954:	2386      	movs	r3, #134	@ 0x86
 800a956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a958:	2302      	movs	r3, #2
 800a95a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a95c:	2300      	movs	r3, #0
 800a95e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a960:	2303      	movs	r3, #3
 800a962:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a964:	230b      	movs	r3, #11
 800a966:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a96c:	4619      	mov	r1, r3
 800a96e:	481f      	ldr	r0, [pc, #124]	@ (800a9ec <HAL_ETH_MspInit+0x184>)
 800a970:	f7f9 fb26 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a974:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a978:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a97a:	2302      	movs	r3, #2
 800a97c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a982:	2303      	movs	r3, #3
 800a984:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a986:	230b      	movs	r3, #11
 800a988:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a98a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a98e:	4619      	mov	r1, r3
 800a990:	4817      	ldr	r0, [pc, #92]	@ (800a9f0 <HAL_ETH_MspInit+0x188>)
 800a992:	f7f9 fb15 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800a996:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800a99a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a99c:	2302      	movs	r3, #2
 800a99e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a9a8:	230b      	movs	r3, #11
 800a9aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a9ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4810      	ldr	r0, [pc, #64]	@ (800a9f4 <HAL_ETH_MspInit+0x18c>)
 800a9b4:	f7f9 fb04 	bl	8003fc0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	203d      	movs	r0, #61	@ 0x3d
 800a9be:	f7f7 fa4c 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a9c2:	203d      	movs	r0, #61	@ 0x3d
 800a9c4:	f7f7 fa65 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	203e      	movs	r0, #62	@ 0x3e
 800a9ce:	f7f7 fa44 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800a9d2:	203e      	movs	r0, #62	@ 0x3e
 800a9d4:	f7f7 fa5d 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a9d8:	bf00      	nop
 800a9da:	3738      	adds	r7, #56	@ 0x38
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	40028000 	.word	0x40028000
 800a9e4:	40023800 	.word	0x40023800
 800a9e8:	40020800 	.word	0x40020800
 800a9ec:	40020000 	.word	0x40020000
 800a9f0:	40020400 	.word	0x40020400
 800a9f4:	40021800 	.word	0x40021800

0800a9f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a9fc:	4802      	ldr	r0, [pc, #8]	@ (800aa08 <ETH_PHY_IO_Init+0x10>)
 800a9fe:	f7f8 fe7d 	bl	80036fc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	200052f8 	.word	0x200052f8

0800aa0c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  return 0;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	68f9      	ldr	r1, [r7, #12]
 800aa2e:	4807      	ldr	r0, [pc, #28]	@ (800aa4c <ETH_PHY_IO_ReadReg+0x30>)
 800aa30:	f7f8 fcbe 	bl	80033b0 <HAL_ETH_ReadPHYRegister>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d002      	beq.n	800aa40 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800aa3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa3e:	e000      	b.n	800aa42 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	200052f8 	.word	0x200052f8

0800aa50 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	68f9      	ldr	r1, [r7, #12]
 800aa62:	4807      	ldr	r0, [pc, #28]	@ (800aa80 <ETH_PHY_IO_WriteReg+0x30>)
 800aa64:	f7f8 fcef 	bl	8003446 <HAL_ETH_WritePHYRegister>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d002      	beq.n	800aa74 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800aa6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa72:	e000      	b.n	800aa76 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	200052f8 	.word	0x200052f8

0800aa84 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aa88:	f7f7 f8dc 	bl	8001c44 <HAL_GetTick>
 800aa8c:	4603      	mov	r3, r0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b0a0      	sub	sp, #128	@ 0x80
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800aa9c:	f107 030c 	add.w	r3, r7, #12
 800aaa0:	2264      	movs	r2, #100	@ 0x64
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f00b fba1 	bl	80161ec <memset>
  int32_t PHYLinkState = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aab2:	2300      	movs	r3, #0
 800aab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aab6:	2300      	movs	r3, #0
 800aab8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aaba:	483a      	ldr	r0, [pc, #232]	@ (800aba4 <ethernet_link_check_state+0x110>)
 800aabc:	f7f6 ffea 	bl	8001a94 <LAN8742_GetLinkState>
 800aac0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aac8:	089b      	lsrs	r3, r3, #2
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00c      	beq.n	800aaee <ethernet_link_check_state+0x5a>
 800aad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	dc09      	bgt.n	800aaee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 800aada:	4833      	ldr	r0, [pc, #204]	@ (800aba8 <ethernet_link_check_state+0x114>)
 800aadc:	f7f8 f92c 	bl	8002d38 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 f92f 	bl	800bd44 <netif_set_down>
    netif_set_link_down(netif);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f001 f992 	bl	800be10 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800aaec:	e055      	b.n	800ab9a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d14e      	bne.n	800ab9a <ethernet_link_check_state+0x106>
 800aafc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	dd4b      	ble.n	800ab9a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800ab02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab04:	3b02      	subs	r3, #2
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d82a      	bhi.n	800ab60 <ethernet_link_check_state+0xcc>
 800ab0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab10 <ethernet_link_check_state+0x7c>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab21 	.word	0x0800ab21
 800ab14:	0800ab33 	.word	0x0800ab33
 800ab18:	0800ab43 	.word	0x0800ab43
 800ab1c:	0800ab53 	.word	0x0800ab53
      duplex = ETH_FULLDUPLEX_MODE;
 800ab20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab24:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ab26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab2a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ab30:	e017      	b.n	800ab62 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ab32:	2300      	movs	r3, #0
 800ab34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ab36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ab40:	e00f      	b.n	800ab62 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800ab42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab46:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ab50:	e007      	b.n	800ab62 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ab56:	2300      	movs	r3, #0
 800ab58:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ab5e:	e000      	b.n	800ab62 <ethernet_link_check_state+0xce>
      break;
 800ab60:	bf00      	nop
    if(linkchanged)
 800ab62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d018      	beq.n	800ab9a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ab68:	f107 030c 	add.w	r3, r7, #12
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	480e      	ldr	r0, [pc, #56]	@ (800aba8 <ethernet_link_check_state+0x114>)
 800ab70:	f7f8 fcb2 	bl	80034d8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ab74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab76:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800ab78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab7a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ab7c:	f107 030c 	add.w	r3, r7, #12
 800ab80:	4619      	mov	r1, r3
 800ab82:	4809      	ldr	r0, [pc, #36]	@ (800aba8 <ethernet_link_check_state+0x114>)
 800ab84:	f7f8 fd9f 	bl	80036c6 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800ab88:	4807      	ldr	r0, [pc, #28]	@ (800aba8 <ethernet_link_check_state+0x114>)
 800ab8a:	f7f8 f865 	bl	8002c58 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f001 f86c 	bl	800bc6c <netif_set_up>
      netif_set_link_up(netif);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 f907 	bl	800bda8 <netif_set_link_up>
}
 800ab9a:	bf00      	nop
 800ab9c:	3780      	adds	r7, #128	@ 0x80
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	200053e0 	.word	0x200053e0
 800aba8:	200052f8 	.word	0x200052f8

0800abac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af02      	add	r7, sp, #8
 800abb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800abb4:	4812      	ldr	r0, [pc, #72]	@ (800ac00 <HAL_ETH_RxAllocateCallback+0x54>)
 800abb6:	f000 fcdd 	bl	800b574 <memp_malloc_pool>
 800abba:	60f8      	str	r0, [r7, #12]
  if (p)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d014      	beq.n	800abec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f103 0220 	add.w	r2, r3, #32
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4a0d      	ldr	r2, [pc, #52]	@ (800ac04 <HAL_ETH_RxAllocateCallback+0x58>)
 800abd0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800abda:	9201      	str	r2, [sp, #4]
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2241      	movs	r2, #65	@ 0x41
 800abe2:	2100      	movs	r1, #0
 800abe4:	2000      	movs	r0, #0
 800abe6:	f001 fb09 	bl	800c1fc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800abea:	e005      	b.n	800abf8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800abec:	4b06      	ldr	r3, [pc, #24]	@ (800ac08 <HAL_ETH_RxAllocateCallback+0x5c>)
 800abee:	2201      	movs	r2, #1
 800abf0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]
}
 800abf8:	bf00      	nop
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	0801a46c 	.word	0x0801a46c
 800ac04:	0800a825 	.word	0x0800a825
 800ac08:	200052f4 	.word	0x200052f4

0800ac0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3b20      	subs	r3, #32
 800ac2a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	2200      	movs	r2, #0
 800ac36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	887a      	ldrh	r2, [r7, #2]
 800ac3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d103      	bne.n	800ac4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	69fa      	ldr	r2, [r7, #28]
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	e003      	b.n	800ac56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	69fa      	ldr	r2, [r7, #28]
 800ac54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	69fa      	ldr	r2, [r7, #28]
 800ac5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	61fb      	str	r3, [r7, #28]
 800ac62:	e009      	b.n	800ac78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	891a      	ldrh	r2, [r3, #8]
 800ac68:	887b      	ldrh	r3, [r7, #2]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	61fb      	str	r3, [r7, #28]
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1f2      	bne.n	800ac64 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800ac7e:	887b      	ldrh	r3, [r7, #2]
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff fc18 	bl	800a4b8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800ac88:	bf00      	nop
 800ac8a:	3720      	adds	r7, #32
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 800ac9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	dc04      	bgt.n	800acac <lwip_strerr+0x1c>
 800aca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aca6:	f113 0f10 	cmn.w	r3, #16
 800acaa:	da01      	bge.n	800acb0 <lwip_strerr+0x20>
    return "Unknown error.";
 800acac:	4b06      	ldr	r3, [pc, #24]	@ (800acc8 <lwip_strerr+0x38>)
 800acae:	e005      	b.n	800acbc <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 800acb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acb4:	425b      	negs	r3, r3
 800acb6:	4a05      	ldr	r2, [pc, #20]	@ (800accc <lwip_strerr+0x3c>)
 800acb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	08017034 	.word	0x08017034
 800accc:	20000020 	.word	0x20000020

0800acd0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	4603      	mov	r3, r0
 800acd8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800acda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	b21a      	sxth	r2, r3
 800ace2:	88fb      	ldrh	r3, [r7, #6]
 800ace4:	0a1b      	lsrs	r3, r3, #8
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	b21b      	sxth	r3, r3
 800acea:	4313      	orrs	r3, r2
 800acec:	b21b      	sxth	r3, r3
 800acee:	b29b      	uxth	r3, r3
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	061a      	lsls	r2, r3, #24
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	021b      	lsls	r3, r3, #8
 800ad0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ad10:	431a      	orrs	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	0a1b      	lsrs	r3, r3, #8
 800ad16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	0e1b      	lsrs	r3, r3, #24
 800ad20:	4313      	orrs	r3, r2
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ad38:	f000 f8d4 	bl	800aee4 <mem_init>
  memp_init();
 800ad3c:	f000 fbd6 	bl	800b4ec <memp_init>
  pbuf_init();
  netif_init();
 800ad40:	f000 fcd4 	bl	800b6ec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ad44:	f007 f96e 	bl	8012024 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ad48:	f001 feb0 	bl	800caac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ad4c:	f007 f8e0 	bl	8011f10 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad62:	4b05      	ldr	r3, [pc, #20]	@ (800ad78 <ptr_to_mem+0x20>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	88fb      	ldrh	r3, [r7, #6]
 800ad68:	4413      	add	r3, r2
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	20005418 	.word	0x20005418

0800ad7c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad84:	4b05      	ldr	r3, [pc, #20]	@ (800ad9c <mem_to_ptr+0x20>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	b29b      	uxth	r3, r3
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	20005418 	.word	0x20005418

0800ada0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ada0:	b590      	push	{r4, r7, lr}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ada8:	4b45      	ldr	r3, [pc, #276]	@ (800aec0 <plug_holes+0x120>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d206      	bcs.n	800adc0 <plug_holes+0x20>
 800adb2:	4b44      	ldr	r3, [pc, #272]	@ (800aec4 <plug_holes+0x124>)
 800adb4:	f240 12df 	movw	r2, #479	@ 0x1df
 800adb8:	4943      	ldr	r1, [pc, #268]	@ (800aec8 <plug_holes+0x128>)
 800adba:	4844      	ldr	r0, [pc, #272]	@ (800aecc <plug_holes+0x12c>)
 800adbc:	f00b f8b6 	bl	8015f2c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800adc0:	4b43      	ldr	r3, [pc, #268]	@ (800aed0 <plug_holes+0x130>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d306      	bcc.n	800add8 <plug_holes+0x38>
 800adca:	4b3e      	ldr	r3, [pc, #248]	@ (800aec4 <plug_holes+0x124>)
 800adcc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800add0:	4940      	ldr	r1, [pc, #256]	@ (800aed4 <plug_holes+0x134>)
 800add2:	483e      	ldr	r0, [pc, #248]	@ (800aecc <plug_holes+0x12c>)
 800add4:	f00b f8aa 	bl	8015f2c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	791b      	ldrb	r3, [r3, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d006      	beq.n	800adee <plug_holes+0x4e>
 800ade0:	4b38      	ldr	r3, [pc, #224]	@ (800aec4 <plug_holes+0x124>)
 800ade2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ade6:	493c      	ldr	r1, [pc, #240]	@ (800aed8 <plug_holes+0x138>)
 800ade8:	4838      	ldr	r0, [pc, #224]	@ (800aecc <plug_holes+0x12c>)
 800adea:	f00b f89f 	bl	8015f2c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800adf6:	d906      	bls.n	800ae06 <plug_holes+0x66>
 800adf8:	4b32      	ldr	r3, [pc, #200]	@ (800aec4 <plug_holes+0x124>)
 800adfa:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800adfe:	4937      	ldr	r1, [pc, #220]	@ (800aedc <plug_holes+0x13c>)
 800ae00:	4832      	ldr	r0, [pc, #200]	@ (800aecc <plug_holes+0x12c>)
 800ae02:	f00b f893 	bl	8015f2c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff ffa4 	bl	800ad58 <ptr_to_mem>
 800ae10:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d024      	beq.n	800ae64 <plug_holes+0xc4>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	791b      	ldrb	r3, [r3, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d120      	bne.n	800ae64 <plug_holes+0xc4>
 800ae22:	4b2b      	ldr	r3, [pc, #172]	@ (800aed0 <plug_holes+0x130>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d01b      	beq.n	800ae64 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ae2c:	4b2c      	ldr	r3, [pc, #176]	@ (800aee0 <plug_holes+0x140>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d102      	bne.n	800ae3c <plug_holes+0x9c>
      lfree = mem;
 800ae36:	4a2a      	ldr	r2, [pc, #168]	@ (800aee0 <plug_holes+0x140>)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	881a      	ldrh	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ae4c:	d00a      	beq.n	800ae64 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff ff80 	bl	800ad58 <ptr_to_mem>
 800ae58:	4604      	mov	r4, r0
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff ff8e 	bl	800ad7c <mem_to_ptr>
 800ae60:	4603      	mov	r3, r0
 800ae62:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	885b      	ldrh	r3, [r3, #2]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff ff75 	bl	800ad58 <ptr_to_mem>
 800ae6e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d01f      	beq.n	800aeb8 <plug_holes+0x118>
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	791b      	ldrb	r3, [r3, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d11b      	bne.n	800aeb8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae80:	4b17      	ldr	r3, [pc, #92]	@ (800aee0 <plug_holes+0x140>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d102      	bne.n	800ae90 <plug_holes+0xf0>
      lfree = pmem;
 800ae8a:	4a15      	ldr	r2, [pc, #84]	@ (800aee0 <plug_holes+0x140>)
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	881a      	ldrh	r2, [r3, #0]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aea0:	d00a      	beq.n	800aeb8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff ff56 	bl	800ad58 <ptr_to_mem>
 800aeac:	4604      	mov	r4, r0
 800aeae:	68b8      	ldr	r0, [r7, #8]
 800aeb0:	f7ff ff64 	bl	800ad7c <mem_to_ptr>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800aeb8:	bf00      	nop
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd90      	pop	{r4, r7, pc}
 800aec0:	20005418 	.word	0x20005418
 800aec4:	08017044 	.word	0x08017044
 800aec8:	08017074 	.word	0x08017074
 800aecc:	0801708c 	.word	0x0801708c
 800aed0:	2000541c 	.word	0x2000541c
 800aed4:	080170b4 	.word	0x080170b4
 800aed8:	080170d0 	.word	0x080170d0
 800aedc:	080170ec 	.word	0x080170ec
 800aee0:	20005420 	.word	0x20005420

0800aee4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aeea:	4b16      	ldr	r3, [pc, #88]	@ (800af44 <mem_init+0x60>)
 800aeec:	4a16      	ldr	r2, [pc, #88]	@ (800af48 <mem_init+0x64>)
 800aeee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aef0:	4b14      	ldr	r3, [pc, #80]	@ (800af44 <mem_init+0x60>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800aefc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800af0a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800af0e:	f7ff ff23 	bl	800ad58 <ptr_to_mem>
 800af12:	4603      	mov	r3, r0
 800af14:	4a0d      	ldr	r2, [pc, #52]	@ (800af4c <mem_init+0x68>)
 800af16:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800af18:	4b0c      	ldr	r3, [pc, #48]	@ (800af4c <mem_init+0x68>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2201      	movs	r2, #1
 800af1e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800af20:	4b0a      	ldr	r3, [pc, #40]	@ (800af4c <mem_init+0x68>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800af28:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800af2a:	4b08      	ldr	r3, [pc, #32]	@ (800af4c <mem_init+0x68>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800af32:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800af34:	4b03      	ldr	r3, [pc, #12]	@ (800af44 <mem_init+0x60>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a05      	ldr	r2, [pc, #20]	@ (800af50 <mem_init+0x6c>)
 800af3a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	20005418 	.word	0x20005418
 800af48:	20048000 	.word	0x20048000
 800af4c:	2000541c 	.word	0x2000541c
 800af50:	20005420 	.word	0x20005420

0800af54 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ff0d 	bl	800ad7c <mem_to_ptr>
 800af62:	4603      	mov	r3, r0
 800af64:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fef4 	bl	800ad58 <ptr_to_mem>
 800af70:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	885b      	ldrh	r3, [r3, #2]
 800af76:	4618      	mov	r0, r3
 800af78:	f7ff feee 	bl	800ad58 <ptr_to_mem>
 800af7c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800af86:	d818      	bhi.n	800afba <mem_link_valid+0x66>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	885b      	ldrh	r3, [r3, #2]
 800af8c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800af90:	d813      	bhi.n	800afba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af96:	8afa      	ldrh	r2, [r7, #22]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d004      	beq.n	800afa6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	8afa      	ldrh	r2, [r7, #22]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d109      	bne.n	800afba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afa6:	4b08      	ldr	r3, [pc, #32]	@ (800afc8 <mem_link_valid+0x74>)
 800afa8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	429a      	cmp	r2, r3
 800afae:	d006      	beq.n	800afbe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	885b      	ldrh	r3, [r3, #2]
 800afb4:	8afa      	ldrh	r2, [r7, #22]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d001      	beq.n	800afbe <mem_link_valid+0x6a>
    return 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	e000      	b.n	800afc0 <mem_link_valid+0x6c>
  }
  return 1;
 800afbe:	2301      	movs	r3, #1
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3718      	adds	r7, #24
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	2000541c 	.word	0x2000541c

0800afcc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d04c      	beq.n	800b074 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f003 0303 	and.w	r3, r3, #3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d007      	beq.n	800aff4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800afe4:	4b25      	ldr	r3, [pc, #148]	@ (800b07c <mem_free+0xb0>)
 800afe6:	f240 2273 	movw	r2, #627	@ 0x273
 800afea:	4925      	ldr	r1, [pc, #148]	@ (800b080 <mem_free+0xb4>)
 800afec:	4825      	ldr	r0, [pc, #148]	@ (800b084 <mem_free+0xb8>)
 800afee:	f00a ff9d 	bl	8015f2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800aff2:	e040      	b.n	800b076 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3b08      	subs	r3, #8
 800aff8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800affa:	4b23      	ldr	r3, [pc, #140]	@ (800b088 <mem_free+0xbc>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	429a      	cmp	r2, r3
 800b002:	d306      	bcc.n	800b012 <mem_free+0x46>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f103 020c 	add.w	r2, r3, #12
 800b00a:	4b20      	ldr	r3, [pc, #128]	@ (800b08c <mem_free+0xc0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d907      	bls.n	800b022 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b012:	4b1a      	ldr	r3, [pc, #104]	@ (800b07c <mem_free+0xb0>)
 800b014:	f240 227f 	movw	r2, #639	@ 0x27f
 800b018:	491d      	ldr	r1, [pc, #116]	@ (800b090 <mem_free+0xc4>)
 800b01a:	481a      	ldr	r0, [pc, #104]	@ (800b084 <mem_free+0xb8>)
 800b01c:	f00a ff86 	bl	8015f2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b020:	e029      	b.n	800b076 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	791b      	ldrb	r3, [r3, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d107      	bne.n	800b03a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b02a:	4b14      	ldr	r3, [pc, #80]	@ (800b07c <mem_free+0xb0>)
 800b02c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b030:	4918      	ldr	r1, [pc, #96]	@ (800b094 <mem_free+0xc8>)
 800b032:	4814      	ldr	r0, [pc, #80]	@ (800b084 <mem_free+0xb8>)
 800b034:	f00a ff7a 	bl	8015f2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b038:	e01d      	b.n	800b076 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff ff8a 	bl	800af54 <mem_link_valid>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d107      	bne.n	800b056 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b046:	4b0d      	ldr	r3, [pc, #52]	@ (800b07c <mem_free+0xb0>)
 800b048:	f240 2295 	movw	r2, #661	@ 0x295
 800b04c:	4912      	ldr	r1, [pc, #72]	@ (800b098 <mem_free+0xcc>)
 800b04e:	480d      	ldr	r0, [pc, #52]	@ (800b084 <mem_free+0xb8>)
 800b050:	f00a ff6c 	bl	8015f2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b054:	e00f      	b.n	800b076 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b05c:	4b0f      	ldr	r3, [pc, #60]	@ (800b09c <mem_free+0xd0>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	429a      	cmp	r2, r3
 800b064:	d202      	bcs.n	800b06c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b066:	4a0d      	ldr	r2, [pc, #52]	@ (800b09c <mem_free+0xd0>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7ff fe97 	bl	800ada0 <plug_holes>
 800b072:	e000      	b.n	800b076 <mem_free+0xaa>
    return;
 800b074:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	08017044 	.word	0x08017044
 800b080:	08017118 	.word	0x08017118
 800b084:	0801708c 	.word	0x0801708c
 800b088:	20005418 	.word	0x20005418
 800b08c:	2000541c 	.word	0x2000541c
 800b090:	0801713c 	.word	0x0801713c
 800b094:	08017158 	.word	0x08017158
 800b098:	08017180 	.word	0x08017180
 800b09c:	20005420 	.word	0x20005420

0800b0a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b0ac:	887b      	ldrh	r3, [r7, #2]
 800b0ae:	3303      	adds	r3, #3
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	f023 0303 	bic.w	r3, r3, #3
 800b0b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b0b8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ba:	2b0b      	cmp	r3, #11
 800b0bc:	d801      	bhi.n	800b0c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b0be:	230c      	movs	r3, #12
 800b0c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b0c2:	8bfb      	ldrh	r3, [r7, #30]
 800b0c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b0c8:	d803      	bhi.n	800b0d2 <mem_trim+0x32>
 800b0ca:	8bfa      	ldrh	r2, [r7, #30]
 800b0cc:	887b      	ldrh	r3, [r7, #2]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d201      	bcs.n	800b0d6 <mem_trim+0x36>
    return NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e0cc      	b.n	800b270 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b0d6:	4b68      	ldr	r3, [pc, #416]	@ (800b278 <mem_trim+0x1d8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d304      	bcc.n	800b0ea <mem_trim+0x4a>
 800b0e0:	4b66      	ldr	r3, [pc, #408]	@ (800b27c <mem_trim+0x1dc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d306      	bcc.n	800b0f8 <mem_trim+0x58>
 800b0ea:	4b65      	ldr	r3, [pc, #404]	@ (800b280 <mem_trim+0x1e0>)
 800b0ec:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b0f0:	4964      	ldr	r1, [pc, #400]	@ (800b284 <mem_trim+0x1e4>)
 800b0f2:	4865      	ldr	r0, [pc, #404]	@ (800b288 <mem_trim+0x1e8>)
 800b0f4:	f00a ff1a 	bl	8015f2c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b0f8:	4b5f      	ldr	r3, [pc, #380]	@ (800b278 <mem_trim+0x1d8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d304      	bcc.n	800b10c <mem_trim+0x6c>
 800b102:	4b5e      	ldr	r3, [pc, #376]	@ (800b27c <mem_trim+0x1dc>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d301      	bcc.n	800b110 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	e0af      	b.n	800b270 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3b08      	subs	r3, #8
 800b114:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b116:	69b8      	ldr	r0, [r7, #24]
 800b118:	f7ff fe30 	bl	800ad7c <mem_to_ptr>
 800b11c:	4603      	mov	r3, r0
 800b11e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	881a      	ldrh	r2, [r3, #0]
 800b124:	8afb      	ldrh	r3, [r7, #22]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	b29b      	uxth	r3, r3
 800b12a:	3b08      	subs	r3, #8
 800b12c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b12e:	8bfa      	ldrh	r2, [r7, #30]
 800b130:	8abb      	ldrh	r3, [r7, #20]
 800b132:	429a      	cmp	r2, r3
 800b134:	d906      	bls.n	800b144 <mem_trim+0xa4>
 800b136:	4b52      	ldr	r3, [pc, #328]	@ (800b280 <mem_trim+0x1e0>)
 800b138:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b13c:	4953      	ldr	r1, [pc, #332]	@ (800b28c <mem_trim+0x1ec>)
 800b13e:	4852      	ldr	r0, [pc, #328]	@ (800b288 <mem_trim+0x1e8>)
 800b140:	f00a fef4 	bl	8015f2c <iprintf>
  if (newsize > size) {
 800b144:	8bfa      	ldrh	r2, [r7, #30]
 800b146:	8abb      	ldrh	r3, [r7, #20]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d901      	bls.n	800b150 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e08f      	b.n	800b270 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b150:	8bfa      	ldrh	r2, [r7, #30]
 800b152:	8abb      	ldrh	r3, [r7, #20]
 800b154:	429a      	cmp	r2, r3
 800b156:	d101      	bne.n	800b15c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	e089      	b.n	800b270 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff fdf9 	bl	800ad58 <ptr_to_mem>
 800b166:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	791b      	ldrb	r3, [r3, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d13f      	bne.n	800b1f0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b178:	d106      	bne.n	800b188 <mem_trim+0xe8>
 800b17a:	4b41      	ldr	r3, [pc, #260]	@ (800b280 <mem_trim+0x1e0>)
 800b17c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b180:	4943      	ldr	r1, [pc, #268]	@ (800b290 <mem_trim+0x1f0>)
 800b182:	4841      	ldr	r0, [pc, #260]	@ (800b288 <mem_trim+0x1e8>)
 800b184:	f00a fed2 	bl	8015f2c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b18e:	8afa      	ldrh	r2, [r7, #22]
 800b190:	8bfb      	ldrh	r3, [r7, #30]
 800b192:	4413      	add	r3, r2
 800b194:	b29b      	uxth	r3, r3
 800b196:	3308      	adds	r3, #8
 800b198:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b19a:	4b3e      	ldr	r3, [pc, #248]	@ (800b294 <mem_trim+0x1f4>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d106      	bne.n	800b1b2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b1a4:	89fb      	ldrh	r3, [r7, #14]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff fdd6 	bl	800ad58 <ptr_to_mem>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	4a39      	ldr	r2, [pc, #228]	@ (800b294 <mem_trim+0x1f4>)
 800b1b0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b1b2:	89fb      	ldrh	r3, [r7, #14]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff fdcf 	bl	800ad58 <ptr_to_mem>
 800b1ba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	89ba      	ldrh	r2, [r7, #12]
 800b1c6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	8afa      	ldrh	r2, [r7, #22]
 800b1cc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	89fa      	ldrh	r2, [r7, #14]
 800b1d2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b1dc:	d047      	beq.n	800b26e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7ff fdb8 	bl	800ad58 <ptr_to_mem>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	89fb      	ldrh	r3, [r7, #14]
 800b1ec:	8053      	strh	r3, [r2, #2]
 800b1ee:	e03e      	b.n	800b26e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b1f0:	8bfb      	ldrh	r3, [r7, #30]
 800b1f2:	f103 0214 	add.w	r2, r3, #20
 800b1f6:	8abb      	ldrh	r3, [r7, #20]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d838      	bhi.n	800b26e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b1fc:	8afa      	ldrh	r2, [r7, #22]
 800b1fe:	8bfb      	ldrh	r3, [r7, #30]
 800b200:	4413      	add	r3, r2
 800b202:	b29b      	uxth	r3, r3
 800b204:	3308      	adds	r3, #8
 800b206:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b210:	d106      	bne.n	800b220 <mem_trim+0x180>
 800b212:	4b1b      	ldr	r3, [pc, #108]	@ (800b280 <mem_trim+0x1e0>)
 800b214:	f240 3216 	movw	r2, #790	@ 0x316
 800b218:	491d      	ldr	r1, [pc, #116]	@ (800b290 <mem_trim+0x1f0>)
 800b21a:	481b      	ldr	r0, [pc, #108]	@ (800b288 <mem_trim+0x1e8>)
 800b21c:	f00a fe86 	bl	8015f2c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b220:	89fb      	ldrh	r3, [r7, #14]
 800b222:	4618      	mov	r0, r3
 800b224:	f7ff fd98 	bl	800ad58 <ptr_to_mem>
 800b228:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b22a:	4b1a      	ldr	r3, [pc, #104]	@ (800b294 <mem_trim+0x1f4>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	429a      	cmp	r2, r3
 800b232:	d202      	bcs.n	800b23a <mem_trim+0x19a>
      lfree = mem2;
 800b234:	4a17      	ldr	r2, [pc, #92]	@ (800b294 <mem_trim+0x1f4>)
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	2200      	movs	r2, #0
 800b23e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	881a      	ldrh	r2, [r3, #0]
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	8afa      	ldrh	r2, [r7, #22]
 800b24c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	89fa      	ldrh	r2, [r7, #14]
 800b252:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b25c:	d007      	beq.n	800b26e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff fd78 	bl	800ad58 <ptr_to_mem>
 800b268:	4602      	mov	r2, r0
 800b26a:	89fb      	ldrh	r3, [r7, #14]
 800b26c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b26e:	687b      	ldr	r3, [r7, #4]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3720      	adds	r7, #32
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	20005418 	.word	0x20005418
 800b27c:	2000541c 	.word	0x2000541c
 800b280:	08017044 	.word	0x08017044
 800b284:	080171b4 	.word	0x080171b4
 800b288:	0801708c 	.word	0x0801708c
 800b28c:	080171cc 	.word	0x080171cc
 800b290:	080171ec 	.word	0x080171ec
 800b294:	20005420 	.word	0x20005420

0800b298 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b2a2:	88fb      	ldrh	r3, [r7, #6]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <mem_malloc+0x14>
    return NULL;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e0d9      	b.n	800b460 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b2ac:	88fb      	ldrh	r3, [r7, #6]
 800b2ae:	3303      	adds	r3, #3
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b2b8:	8bbb      	ldrh	r3, [r7, #28]
 800b2ba:	2b0b      	cmp	r3, #11
 800b2bc:	d801      	bhi.n	800b2c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b2be:	230c      	movs	r3, #12
 800b2c0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b2c2:	8bbb      	ldrh	r3, [r7, #28]
 800b2c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b2c8:	d803      	bhi.n	800b2d2 <mem_malloc+0x3a>
 800b2ca:	8bba      	ldrh	r2, [r7, #28]
 800b2cc:	88fb      	ldrh	r3, [r7, #6]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d201      	bcs.n	800b2d6 <mem_malloc+0x3e>
    return NULL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e0c4      	b.n	800b460 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b2d6:	4b64      	ldr	r3, [pc, #400]	@ (800b468 <mem_malloc+0x1d0>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff fd4e 	bl	800ad7c <mem_to_ptr>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	83fb      	strh	r3, [r7, #30]
 800b2e4:	e0b4      	b.n	800b450 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b2e6:	8bfb      	ldrh	r3, [r7, #30]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff fd35 	bl	800ad58 <ptr_to_mem>
 800b2ee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	791b      	ldrb	r3, [r3, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f040 80a4 	bne.w	800b442 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	8bfb      	ldrh	r3, [r7, #30]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	f1a3 0208 	sub.w	r2, r3, #8
 800b308:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b30a:	429a      	cmp	r2, r3
 800b30c:	f0c0 8099 	bcc.w	800b442 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	8bfb      	ldrh	r3, [r7, #30]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	f1a3 0208 	sub.w	r2, r3, #8
 800b31e:	8bbb      	ldrh	r3, [r7, #28]
 800b320:	3314      	adds	r3, #20
 800b322:	429a      	cmp	r2, r3
 800b324:	d333      	bcc.n	800b38e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b326:	8bfa      	ldrh	r2, [r7, #30]
 800b328:	8bbb      	ldrh	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	3308      	adds	r3, #8
 800b330:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b332:	8a7b      	ldrh	r3, [r7, #18]
 800b334:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b338:	d106      	bne.n	800b348 <mem_malloc+0xb0>
 800b33a:	4b4c      	ldr	r3, [pc, #304]	@ (800b46c <mem_malloc+0x1d4>)
 800b33c:	f240 3287 	movw	r2, #903	@ 0x387
 800b340:	494b      	ldr	r1, [pc, #300]	@ (800b470 <mem_malloc+0x1d8>)
 800b342:	484c      	ldr	r0, [pc, #304]	@ (800b474 <mem_malloc+0x1dc>)
 800b344:	f00a fdf2 	bl	8015f2c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b348:	8a7b      	ldrh	r3, [r7, #18]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff fd04 	bl	800ad58 <ptr_to_mem>
 800b350:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	881a      	ldrh	r2, [r3, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8bfa      	ldrh	r2, [r7, #30]
 800b364:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	8a7a      	ldrh	r2, [r7, #18]
 800b36a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2201      	movs	r2, #1
 800b370:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b37a:	d00b      	beq.n	800b394 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	881b      	ldrh	r3, [r3, #0]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fce9 	bl	800ad58 <ptr_to_mem>
 800b386:	4602      	mov	r2, r0
 800b388:	8a7b      	ldrh	r3, [r7, #18]
 800b38a:	8053      	strh	r3, [r2, #2]
 800b38c:	e002      	b.n	800b394 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2201      	movs	r2, #1
 800b392:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b394:	4b34      	ldr	r3, [pc, #208]	@ (800b468 <mem_malloc+0x1d0>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d127      	bne.n	800b3ee <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b39e:	4b32      	ldr	r3, [pc, #200]	@ (800b468 <mem_malloc+0x1d0>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b3a4:	e005      	b.n	800b3b2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fcd4 	bl	800ad58 <ptr_to_mem>
 800b3b0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	791b      	ldrb	r3, [r3, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <mem_malloc+0x12c>
 800b3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b478 <mem_malloc+0x1e0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69ba      	ldr	r2, [r7, #24]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d1f0      	bne.n	800b3a6 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b3c4:	4a28      	ldr	r2, [pc, #160]	@ (800b468 <mem_malloc+0x1d0>)
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b3ca:	4b27      	ldr	r3, [pc, #156]	@ (800b468 <mem_malloc+0x1d0>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	4b2a      	ldr	r3, [pc, #168]	@ (800b478 <mem_malloc+0x1e0>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d00b      	beq.n	800b3ee <mem_malloc+0x156>
 800b3d6:	4b24      	ldr	r3, [pc, #144]	@ (800b468 <mem_malloc+0x1d0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	791b      	ldrb	r3, [r3, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d006      	beq.n	800b3ee <mem_malloc+0x156>
 800b3e0:	4b22      	ldr	r3, [pc, #136]	@ (800b46c <mem_malloc+0x1d4>)
 800b3e2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b3e6:	4925      	ldr	r1, [pc, #148]	@ (800b47c <mem_malloc+0x1e4>)
 800b3e8:	4822      	ldr	r0, [pc, #136]	@ (800b474 <mem_malloc+0x1dc>)
 800b3ea:	f00a fd9f 	bl	8015f2c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b3ee:	8bba      	ldrh	r2, [r7, #28]
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	4a20      	ldr	r2, [pc, #128]	@ (800b478 <mem_malloc+0x1e0>)
 800b3f8:	6812      	ldr	r2, [r2, #0]
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d906      	bls.n	800b40c <mem_malloc+0x174>
 800b3fe:	4b1b      	ldr	r3, [pc, #108]	@ (800b46c <mem_malloc+0x1d4>)
 800b400:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b404:	491e      	ldr	r1, [pc, #120]	@ (800b480 <mem_malloc+0x1e8>)
 800b406:	481b      	ldr	r0, [pc, #108]	@ (800b474 <mem_malloc+0x1dc>)
 800b408:	f00a fd90 	bl	8015f2c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f003 0303 	and.w	r3, r3, #3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d006      	beq.n	800b424 <mem_malloc+0x18c>
 800b416:	4b15      	ldr	r3, [pc, #84]	@ (800b46c <mem_malloc+0x1d4>)
 800b418:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b41c:	4919      	ldr	r1, [pc, #100]	@ (800b484 <mem_malloc+0x1ec>)
 800b41e:	4815      	ldr	r0, [pc, #84]	@ (800b474 <mem_malloc+0x1dc>)
 800b420:	f00a fd84 	bl	8015f2c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d006      	beq.n	800b43c <mem_malloc+0x1a4>
 800b42e:	4b0f      	ldr	r3, [pc, #60]	@ (800b46c <mem_malloc+0x1d4>)
 800b430:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b434:	4914      	ldr	r1, [pc, #80]	@ (800b488 <mem_malloc+0x1f0>)
 800b436:	480f      	ldr	r0, [pc, #60]	@ (800b474 <mem_malloc+0x1dc>)
 800b438:	f00a fd78 	bl	8015f2c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	3308      	adds	r3, #8
 800b440:	e00e      	b.n	800b460 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b442:	8bfb      	ldrh	r3, [r7, #30]
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff fc87 	bl	800ad58 <ptr_to_mem>
 800b44a:	4603      	mov	r3, r0
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b450:	8bfa      	ldrh	r2, [r7, #30]
 800b452:	8bbb      	ldrh	r3, [r7, #28]
 800b454:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800b458:	429a      	cmp	r2, r3
 800b45a:	f4ff af44 	bcc.w	800b2e6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	20005420 	.word	0x20005420
 800b46c:	08017044 	.word	0x08017044
 800b470:	080171ec 	.word	0x080171ec
 800b474:	0801708c 	.word	0x0801708c
 800b478:	2000541c 	.word	0x2000541c
 800b47c:	08017200 	.word	0x08017200
 800b480:	0801721c 	.word	0x0801721c
 800b484:	0801724c 	.word	0x0801724c
 800b488:	0801727c 	.word	0x0801727c

0800b48c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	3303      	adds	r3, #3
 800b4a2:	f023 0303 	bic.w	r3, r3, #3
 800b4a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e011      	b.n	800b4d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	889b      	ldrh	r3, [r3, #4]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	88db      	ldrh	r3, [r3, #6]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	dbe7      	blt.n	800b4ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b4de:	bf00      	nop
 800b4e0:	bf00      	nop
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	80fb      	strh	r3, [r7, #6]
 800b4f6:	e009      	b.n	800b50c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b4f8:	88fb      	ldrh	r3, [r7, #6]
 800b4fa:	4a08      	ldr	r2, [pc, #32]	@ (800b51c <memp_init+0x30>)
 800b4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff ffc3 	bl	800b48c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b506:	88fb      	ldrh	r3, [r7, #6]
 800b508:	3301      	adds	r3, #1
 800b50a:	80fb      	strh	r3, [r7, #6]
 800b50c:	88fb      	ldrh	r3, [r7, #6]
 800b50e:	2b08      	cmp	r3, #8
 800b510:	d9f2      	bls.n	800b4f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b512:	bf00      	nop
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	0801a50c 	.word	0x0801a50c

0800b520 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d012      	beq.n	800b55c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f003 0303 	and.w	r3, r3, #3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d006      	beq.n	800b558 <do_memp_malloc_pool+0x38>
 800b54a:	4b07      	ldr	r3, [pc, #28]	@ (800b568 <do_memp_malloc_pool+0x48>)
 800b54c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b550:	4906      	ldr	r1, [pc, #24]	@ (800b56c <do_memp_malloc_pool+0x4c>)
 800b552:	4807      	ldr	r0, [pc, #28]	@ (800b570 <do_memp_malloc_pool+0x50>)
 800b554:	f00a fcea 	bl	8015f2c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	e000      	b.n	800b55e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	08017308 	.word	0x08017308
 800b56c:	08017338 	.word	0x08017338
 800b570:	0801735c 	.word	0x0801735c

0800b574 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <memp_malloc_pool+0x1c>
 800b582:	4b0a      	ldr	r3, [pc, #40]	@ (800b5ac <memp_malloc_pool+0x38>)
 800b584:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b588:	4909      	ldr	r1, [pc, #36]	@ (800b5b0 <memp_malloc_pool+0x3c>)
 800b58a:	480a      	ldr	r0, [pc, #40]	@ (800b5b4 <memp_malloc_pool+0x40>)
 800b58c:	f00a fcce 	bl	8015f2c <iprintf>
  if (desc == NULL) {
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d101      	bne.n	800b59a <memp_malloc_pool+0x26>
    return NULL;
 800b596:	2300      	movs	r3, #0
 800b598:	e003      	b.n	800b5a2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff ffc0 	bl	800b520 <do_memp_malloc_pool>
 800b5a0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	08017308 	.word	0x08017308
 800b5b0:	08017384 	.word	0x08017384
 800b5b4:	0801735c 	.word	0x0801735c

0800b5b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b5c2:	79fb      	ldrb	r3, [r7, #7]
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d908      	bls.n	800b5da <memp_malloc+0x22>
 800b5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b5f4 <memp_malloc+0x3c>)
 800b5ca:	f240 1257 	movw	r2, #343	@ 0x157
 800b5ce:	490a      	ldr	r1, [pc, #40]	@ (800b5f8 <memp_malloc+0x40>)
 800b5d0:	480a      	ldr	r0, [pc, #40]	@ (800b5fc <memp_malloc+0x44>)
 800b5d2:	f00a fcab 	bl	8015f2c <iprintf>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e008      	b.n	800b5ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	4a08      	ldr	r2, [pc, #32]	@ (800b600 <memp_malloc+0x48>)
 800b5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7ff ff9c 	bl	800b520 <do_memp_malloc_pool>
 800b5e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	08017308 	.word	0x08017308
 800b5f8:	08017398 	.word	0x08017398
 800b5fc:	0801735c 	.word	0x0801735c
 800b600:	0801a50c 	.word	0x0801a50c

0800b604 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	f003 0303 	and.w	r3, r3, #3
 800b614:	2b00      	cmp	r3, #0
 800b616:	d006      	beq.n	800b626 <do_memp_free_pool+0x22>
 800b618:	4b0a      	ldr	r3, [pc, #40]	@ (800b644 <do_memp_free_pool+0x40>)
 800b61a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b61e:	490a      	ldr	r1, [pc, #40]	@ (800b648 <do_memp_free_pool+0x44>)
 800b620:	480a      	ldr	r0, [pc, #40]	@ (800b64c <do_memp_free_pool+0x48>)
 800b622:	f00a fc83 	bl	8015f2c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b63c:	bf00      	nop
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	08017308 	.word	0x08017308
 800b648:	080173b8 	.word	0x080173b8
 800b64c:	0801735c 	.word	0x0801735c

0800b650 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d106      	bne.n	800b66e <memp_free_pool+0x1e>
 800b660:	4b0a      	ldr	r3, [pc, #40]	@ (800b68c <memp_free_pool+0x3c>)
 800b662:	f240 1295 	movw	r2, #405	@ 0x195
 800b666:	490a      	ldr	r1, [pc, #40]	@ (800b690 <memp_free_pool+0x40>)
 800b668:	480a      	ldr	r0, [pc, #40]	@ (800b694 <memp_free_pool+0x44>)
 800b66a:	f00a fc5f 	bl	8015f2c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d007      	beq.n	800b684 <memp_free_pool+0x34>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d004      	beq.n	800b684 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff ffc1 	bl	800b604 <do_memp_free_pool>
 800b682:	e000      	b.n	800b686 <memp_free_pool+0x36>
    return;
 800b684:	bf00      	nop
}
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	08017308 	.word	0x08017308
 800b690:	08017384 	.word	0x08017384
 800b694:	0801735c 	.word	0x0801735c

0800b698 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	6039      	str	r1, [r7, #0]
 800b6a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	2b08      	cmp	r3, #8
 800b6a8:	d907      	bls.n	800b6ba <memp_free+0x22>
 800b6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b6dc <memp_free+0x44>)
 800b6ac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b6b0:	490b      	ldr	r1, [pc, #44]	@ (800b6e0 <memp_free+0x48>)
 800b6b2:	480c      	ldr	r0, [pc, #48]	@ (800b6e4 <memp_free+0x4c>)
 800b6b4:	f00a fc3a 	bl	8015f2c <iprintf>
 800b6b8:	e00c      	b.n	800b6d4 <memp_free+0x3c>

  if (mem == NULL) {
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d008      	beq.n	800b6d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	4a09      	ldr	r2, [pc, #36]	@ (800b6e8 <memp_free+0x50>)
 800b6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff ff9a 	bl	800b604 <do_memp_free_pool>
 800b6d0:	e000      	b.n	800b6d4 <memp_free+0x3c>
    return;
 800b6d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08017308 	.word	0x08017308
 800b6e0:	080173d8 	.word	0x080173d8
 800b6e4:	0801735c 	.word	0x0801735c
 800b6e8:	0801a50c 	.word	0x0801a50c

0800b6ec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b6f0:	bf00      	nop
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
	...

0800b6fc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af02      	add	r7, sp, #8
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
 800b708:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d108      	bne.n	800b722 <netif_add+0x26>
 800b710:	4b96      	ldr	r3, [pc, #600]	@ (800b96c <netif_add+0x270>)
 800b712:	f240 1227 	movw	r2, #295	@ 0x127
 800b716:	4996      	ldr	r1, [pc, #600]	@ (800b970 <netif_add+0x274>)
 800b718:	4896      	ldr	r0, [pc, #600]	@ (800b974 <netif_add+0x278>)
 800b71a:	f00a fc07 	bl	8015f2c <iprintf>
 800b71e:	2300      	movs	r3, #0
 800b720:	e14c      	b.n	800b9bc <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b724:	2b00      	cmp	r3, #0
 800b726:	d108      	bne.n	800b73a <netif_add+0x3e>
 800b728:	4b90      	ldr	r3, [pc, #576]	@ (800b96c <netif_add+0x270>)
 800b72a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b72e:	4992      	ldr	r1, [pc, #584]	@ (800b978 <netif_add+0x27c>)
 800b730:	4890      	ldr	r0, [pc, #576]	@ (800b974 <netif_add+0x278>)
 800b732:	f00a fbfb 	bl	8015f2c <iprintf>
 800b736:	2300      	movs	r3, #0
 800b738:	e140      	b.n	800b9bc <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b740:	4b8e      	ldr	r3, [pc, #568]	@ (800b97c <netif_add+0x280>)
 800b742:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d101      	bne.n	800b74e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b74a:	4b8c      	ldr	r3, [pc, #560]	@ (800b97c <netif_add+0x280>)
 800b74c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b754:	4b89      	ldr	r3, [pc, #548]	@ (800b97c <netif_add+0x280>)
 800b756:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4a84      	ldr	r2, [pc, #528]	@ (800b980 <netif_add+0x284>)
 800b76e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2200      	movs	r2, #0
 800b782:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a3a      	ldr	r2, [r7, #32]
 800b788:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b78a:	4b7e      	ldr	r3, [pc, #504]	@ (800b984 <netif_add+0x288>)
 800b78c:	781a      	ldrb	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b798:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f9f5 	bl	800bb90 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	4798      	blx	r3
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <netif_add+0xba>
    return NULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e102      	b.n	800b9bc <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7bc:	2bff      	cmp	r3, #255	@ 0xff
 800b7be:	d103      	bne.n	800b7c8 <netif_add+0xcc>
        netif->num = 0;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b7cc:	4b6e      	ldr	r3, [pc, #440]	@ (800b988 <netif_add+0x28c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e02b      	b.n	800b82c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d106      	bne.n	800b7ea <netif_add+0xee>
 800b7dc:	4b63      	ldr	r3, [pc, #396]	@ (800b96c <netif_add+0x270>)
 800b7de:	f240 128b 	movw	r2, #395	@ 0x18b
 800b7e2:	496a      	ldr	r1, [pc, #424]	@ (800b98c <netif_add+0x290>)
 800b7e4:	4863      	ldr	r0, [pc, #396]	@ (800b974 <netif_add+0x278>)
 800b7e6:	f00a fba1 	bl	8015f2c <iprintf>
        num_netifs++;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2bff      	cmp	r3, #255	@ 0xff
 800b7f4:	dd06      	ble.n	800b804 <netif_add+0x108>
 800b7f6:	4b5d      	ldr	r3, [pc, #372]	@ (800b96c <netif_add+0x270>)
 800b7f8:	f240 128d 	movw	r2, #397	@ 0x18d
 800b7fc:	4964      	ldr	r1, [pc, #400]	@ (800b990 <netif_add+0x294>)
 800b7fe:	485d      	ldr	r0, [pc, #372]	@ (800b974 <netif_add+0x278>)
 800b800:	f00a fb94 	bl	8015f2c <iprintf>
        if (netif2->num == netif->num) {
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b810:	429a      	cmp	r2, r3
 800b812:	d108      	bne.n	800b826 <netif_add+0x12a>
          netif->num++;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b81a:	3301      	adds	r3, #1
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b824:	e005      	b.n	800b832 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d1d0      	bne.n	800b7d4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1be      	bne.n	800b7b6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b83e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b840:	d103      	bne.n	800b84a <netif_add+0x14e>
    netif_num = 0;
 800b842:	4b50      	ldr	r3, [pc, #320]	@ (800b984 <netif_add+0x288>)
 800b844:	2200      	movs	r2, #0
 800b846:	701a      	strb	r2, [r3, #0]
 800b848:	e006      	b.n	800b858 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b850:	3301      	adds	r3, #1
 800b852:	b2da      	uxtb	r2, r3
 800b854:	4b4b      	ldr	r3, [pc, #300]	@ (800b984 <netif_add+0x288>)
 800b856:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b858:	4b4b      	ldr	r3, [pc, #300]	@ (800b988 <netif_add+0x28c>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b860:	4a49      	ldr	r2, [pc, #292]	@ (800b988 <netif_add+0x28c>)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800b86c:	4619      	mov	r1, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b874:	461a      	mov	r2, r3
 800b876:	4847      	ldr	r0, [pc, #284]	@ (800b994 <netif_add+0x298>)
 800b878:	f00a fb58 	bl	8015f2c <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800b87c:	4846      	ldr	r0, [pc, #280]	@ (800b998 <netif_add+0x29c>)
 800b87e:	f00a fb55 	bl	8015f2c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d003      	beq.n	800b890 <netif_add+0x194>
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	4619      	mov	r1, r3
 800b88e:	e000      	b.n	800b892 <netif_add+0x196>
 800b890:	2100      	movs	r1, #0
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <netif_add+0x1a6>
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	3301      	adds	r3, #1
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	e000      	b.n	800b8a4 <netif_add+0x1a8>
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d004      	beq.n	800b8b4 <netif_add+0x1b8>
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	3302      	adds	r3, #2
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	e000      	b.n	800b8b6 <netif_add+0x1ba>
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <netif_add+0x1c8>
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3303      	adds	r3, #3
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	e000      	b.n	800b8c6 <netif_add+0x1ca>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	4834      	ldr	r0, [pc, #208]	@ (800b99c <netif_add+0x2a0>)
 800b8cc:	f00a fb2e 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800b8d0:	4833      	ldr	r0, [pc, #204]	@ (800b9a0 <netif_add+0x2a4>)
 800b8d2:	f00a fb2b 	bl	8015f2c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <netif_add+0x1e8>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	e000      	b.n	800b8e6 <netif_add+0x1ea>
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d004      	beq.n	800b8f6 <netif_add+0x1fa>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	e000      	b.n	800b8f8 <netif_add+0x1fc>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d004      	beq.n	800b908 <netif_add+0x20c>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3302      	adds	r3, #2
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	e000      	b.n	800b90a <netif_add+0x20e>
 800b908:	2000      	movs	r0, #0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d003      	beq.n	800b918 <netif_add+0x21c>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	3303      	adds	r3, #3
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	e000      	b.n	800b91a <netif_add+0x21e>
 800b918:	2300      	movs	r3, #0
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	4603      	mov	r3, r0
 800b91e:	481f      	ldr	r0, [pc, #124]	@ (800b99c <netif_add+0x2a0>)
 800b920:	f00a fb04 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800b924:	481f      	ldr	r0, [pc, #124]	@ (800b9a4 <netif_add+0x2a8>)
 800b926:	f00a fb01 	bl	8015f2c <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d003      	beq.n	800b938 <netif_add+0x23c>
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	4619      	mov	r1, r3
 800b936:	e000      	b.n	800b93a <netif_add+0x23e>
 800b938:	2100      	movs	r1, #0
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <netif_add+0x24e>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	3301      	adds	r3, #1
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	e000      	b.n	800b94c <netif_add+0x250>
 800b94a:	2200      	movs	r2, #0
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d004      	beq.n	800b95c <netif_add+0x260>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	3302      	adds	r3, #2
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	4618      	mov	r0, r3
 800b95a:	e000      	b.n	800b95e <netif_add+0x262>
 800b95c:	2000      	movs	r0, #0
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d021      	beq.n	800b9a8 <netif_add+0x2ac>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	3303      	adds	r3, #3
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	e01e      	b.n	800b9aa <netif_add+0x2ae>
 800b96c:	080173f4 	.word	0x080173f4
 800b970:	08017488 	.word	0x08017488
 800b974:	08017444 	.word	0x08017444
 800b978:	080174a4 	.word	0x080174a4
 800b97c:	0801a570 	.word	0x0801a570
 800b980:	0800be93 	.word	0x0800be93
 800b984:	20008358 	.word	0x20008358
 800b988:	20008350 	.word	0x20008350
 800b98c:	080174c8 	.word	0x080174c8
 800b990:	080174dc 	.word	0x080174dc
 800b994:	0801750c 	.word	0x0801750c
 800b998:	0801752c 	.word	0x0801752c
 800b99c:	08017534 	.word	0x08017534
 800b9a0:	08017544 	.word	0x08017544
 800b9a4:	08017550 	.word	0x08017550
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	4805      	ldr	r0, [pc, #20]	@ (800b9c4 <netif_add+0x2c8>)
 800b9b0:	f00a fabc 	bl	8015f2c <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800b9b4:	200a      	movs	r0, #10
 800b9b6:	f00a facb 	bl	8015f50 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	08017534 	.word	0x08017534

0800b9c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f002 fbb9 	bl	800e14c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f007 f927 	bl	8012c30 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
	...

0800b9ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d106      	bne.n	800ba0c <netif_do_set_ipaddr+0x20>
 800b9fe:	4b1e      	ldr	r3, [pc, #120]	@ (800ba78 <netif_do_set_ipaddr+0x8c>)
 800ba00:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ba04:	491d      	ldr	r1, [pc, #116]	@ (800ba7c <netif_do_set_ipaddr+0x90>)
 800ba06:	481e      	ldr	r0, [pc, #120]	@ (800ba80 <netif_do_set_ipaddr+0x94>)
 800ba08:	f00a fa90 	bl	8015f2c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <netif_do_set_ipaddr+0x34>
 800ba12:	4b19      	ldr	r3, [pc, #100]	@ (800ba78 <netif_do_set_ipaddr+0x8c>)
 800ba14:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ba18:	4918      	ldr	r1, [pc, #96]	@ (800ba7c <netif_do_set_ipaddr+0x90>)
 800ba1a:	4819      	ldr	r0, [pc, #100]	@ (800ba80 <netif_do_set_ipaddr+0x94>)
 800ba1c:	f00a fa86 	bl	8015f2c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3304      	adds	r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d01f      	beq.n	800ba6e <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3304      	adds	r3, #4
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800ba3e:	4811      	ldr	r0, [pc, #68]	@ (800ba84 <netif_do_set_ipaddr+0x98>)
 800ba40:	f00a fae4 	bl	801600c <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ba44:	f107 0314 	add.w	r3, r7, #20
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff ffbc 	bl	800b9c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <netif_do_set_ipaddr+0x70>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	e000      	b.n	800ba5e <netif_do_set_ipaddr+0x72>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ba62:	2101      	movs	r1, #1
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 f92d 	bl	800bcc4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e000      	b.n	800ba70 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	080173f4 	.word	0x080173f4
 800ba7c:	08017558 	.word	0x08017558
 800ba80:	08017444 	.word	0x08017444
 800ba84:	08017568 	.word	0x08017568

0800ba88 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ba88:	b5b0      	push	{r4, r5, r7, lr}
 800ba8a:	b088      	sub	sp, #32
 800ba8c:	af04      	add	r7, sp, #16
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d02d      	beq.n	800bafe <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <netif_do_set_netmask+0x26>
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	e000      	b.n	800bab0 <netif_do_set_netmask+0x28>
 800baae:	2300      	movs	r3, #0
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800baba:	4618      	mov	r0, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bac2:	461c      	mov	r4, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3308      	adds	r3, #8
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	461d      	mov	r5, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	3308      	adds	r3, #8
 800bad0:	3301      	adds	r3, #1
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	461a      	mov	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3308      	adds	r3, #8
 800bada:	3302      	adds	r3, #2
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	4619      	mov	r1, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	3308      	adds	r3, #8
 800bae4:	3303      	adds	r3, #3
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	9302      	str	r3, [sp, #8]
 800baea:	9101      	str	r1, [sp, #4]
 800baec:	9200      	str	r2, [sp, #0]
 800baee:	462b      	mov	r3, r5
 800baf0:	4622      	mov	r2, r4
 800baf2:	4601      	mov	r1, r0
 800baf4:	4804      	ldr	r0, [pc, #16]	@ (800bb08 <netif_do_set_netmask+0x80>)
 800baf6:	f00a fa19 	bl	8015f2c <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bafa:	2301      	movs	r3, #1
 800bafc:	e000      	b.n	800bb00 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bdb0      	pop	{r4, r5, r7, pc}
 800bb08:	080175b8 	.word	0x080175b8

0800bb0c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bb0c:	b5b0      	push	{r4, r5, r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af04      	add	r7, sp, #16
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	330c      	adds	r3, #12
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d02d      	beq.n	800bb82 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <netif_do_set_gw+0x26>
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	e000      	b.n	800bb34 <netif_do_set_gw+0x28>
 800bb32:	2300      	movs	r3, #0
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800bb3e:	4618      	mov	r0, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb46:	461c      	mov	r4, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	461d      	mov	r5, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	330c      	adds	r3, #12
 800bb54:	3301      	adds	r3, #1
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	330c      	adds	r3, #12
 800bb5e:	3302      	adds	r3, #2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	4619      	mov	r1, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	330c      	adds	r3, #12
 800bb68:	3303      	adds	r3, #3
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	9302      	str	r3, [sp, #8]
 800bb6e:	9101      	str	r1, [sp, #4]
 800bb70:	9200      	str	r2, [sp, #0]
 800bb72:	462b      	mov	r3, r5
 800bb74:	4622      	mov	r2, r4
 800bb76:	4601      	mov	r1, r0
 800bb78:	4804      	ldr	r0, [pc, #16]	@ (800bb8c <netif_do_set_gw+0x80>)
 800bb7a:	f00a f9d7 	bl	8015f2c <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e000      	b.n	800bb84 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb8c:	08017618 	.word	0x08017618

0800bb90 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bbac:	4b1c      	ldr	r3, [pc, #112]	@ (800bc20 <netif_set_addr+0x90>)
 800bbae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d101      	bne.n	800bbba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bbb6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc20 <netif_set_addr+0x90>)
 800bbb8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bbc0:	4b17      	ldr	r3, [pc, #92]	@ (800bc20 <netif_set_addr+0x90>)
 800bbc2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <netif_set_addr+0x42>
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d101      	bne.n	800bbd6 <netif_set_addr+0x46>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e000      	b.n	800bbd8 <netif_set_addr+0x48>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d006      	beq.n	800bbee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bbe0:	f107 0310 	add.w	r3, r7, #16
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	68b9      	ldr	r1, [r7, #8]
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f7ff feff 	bl	800b9ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	6879      	ldr	r1, [r7, #4]
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7ff ff48 	bl	800ba88 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bbf8:	69ba      	ldr	r2, [r7, #24]
 800bbfa:	6839      	ldr	r1, [r7, #0]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f7ff ff85 	bl	800bb0c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d106      	bne.n	800bc16 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bc08:	f107 0310 	add.w	r3, r7, #16
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	68b9      	ldr	r1, [r7, #8]
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f7ff feeb 	bl	800b9ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bc16:	bf00      	nop
 800bc18:	3720      	adds	r7, #32
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	0801a570 	.word	0x0801a570

0800bc24 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bc2c:	4a0d      	ldr	r2, [pc, #52]	@ (800bc64 <netif_set_default+0x40>)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <netif_set_default+0x1e>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800bc3e:	4619      	mov	r1, r3
 800bc40:	e000      	b.n	800bc44 <netif_set_default+0x20>
 800bc42:	2127      	movs	r1, #39	@ 0x27
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <netif_set_default+0x2e>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bc50:	e000      	b.n	800bc54 <netif_set_default+0x30>
 800bc52:	2327      	movs	r3, #39	@ 0x27
 800bc54:	461a      	mov	r2, r3
 800bc56:	4804      	ldr	r0, [pc, #16]	@ (800bc68 <netif_set_default+0x44>)
 800bc58:	f00a f968 	bl	8015f2c <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bc5c:	bf00      	nop
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	20008354 	.word	0x20008354
 800bc68:	0801768c 	.word	0x0801768c

0800bc6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d107      	bne.n	800bc8a <netif_set_up+0x1e>
 800bc7a:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb8 <netif_set_up+0x4c>)
 800bc7c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800bc80:	490e      	ldr	r1, [pc, #56]	@ (800bcbc <netif_set_up+0x50>)
 800bc82:	480f      	ldr	r0, [pc, #60]	@ (800bcc0 <netif_set_up+0x54>)
 800bc84:	f00a f952 	bl	8015f2c <iprintf>
 800bc88:	e013      	b.n	800bcb2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10c      	bne.n	800bcb2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc9e:	f043 0301 	orr.w	r3, r3, #1
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bcaa:	2103      	movs	r1, #3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f809 	bl	800bcc4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	080173f4 	.word	0x080173f4
 800bcbc:	080176b4 	.word	0x080176b4
 800bcc0:	08017444 	.word	0x08017444

0800bcc4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d106      	bne.n	800bce4 <netif_issue_reports+0x20>
 800bcd6:	4b18      	ldr	r3, [pc, #96]	@ (800bd38 <netif_issue_reports+0x74>)
 800bcd8:	f240 326d 	movw	r2, #877	@ 0x36d
 800bcdc:	4917      	ldr	r1, [pc, #92]	@ (800bd3c <netif_issue_reports+0x78>)
 800bcde:	4818      	ldr	r0, [pc, #96]	@ (800bd40 <netif_issue_reports+0x7c>)
 800bce0:	f00a f924 	bl	8015f2c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bcea:	f003 0304 	and.w	r3, r3, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d01e      	beq.n	800bd30 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bcf8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d017      	beq.n	800bd30 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d013      	beq.n	800bd32 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00e      	beq.n	800bd32 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd1a:	f003 0308 	and.w	r3, r3, #8
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d007      	beq.n	800bd32 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f007 ff5d 	bl	8013be8 <etharp_request>
 800bd2e:	e000      	b.n	800bd32 <netif_issue_reports+0x6e>
    return;
 800bd30:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	080173f4 	.word	0x080173f4
 800bd3c:	080176d0 	.word	0x080176d0
 800bd40:	08017444 	.word	0x08017444

0800bd44 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d107      	bne.n	800bd62 <netif_set_down+0x1e>
 800bd52:	4b12      	ldr	r3, [pc, #72]	@ (800bd9c <netif_set_down+0x58>)
 800bd54:	f240 329b 	movw	r2, #923	@ 0x39b
 800bd58:	4911      	ldr	r1, [pc, #68]	@ (800bda0 <netif_set_down+0x5c>)
 800bd5a:	4812      	ldr	r0, [pc, #72]	@ (800bda4 <netif_set_down+0x60>)
 800bd5c:	f00a f8e6 	bl	8015f2c <iprintf>
 800bd60:	e019      	b.n	800bd96 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d012      	beq.n	800bd96 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd76:	f023 0301 	bic.w	r3, r3, #1
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd88:	f003 0308 	and.w	r3, r3, #8
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d002      	beq.n	800bd96 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f007 fae7 	bl	8013364 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	080173f4 	.word	0x080173f4
 800bda0:	080176f4 	.word	0x080176f4
 800bda4:	08017444 	.word	0x08017444

0800bda8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d107      	bne.n	800bdc6 <netif_set_link_up+0x1e>
 800bdb6:	4b13      	ldr	r3, [pc, #76]	@ (800be04 <netif_set_link_up+0x5c>)
 800bdb8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800bdbc:	4912      	ldr	r1, [pc, #72]	@ (800be08 <netif_set_link_up+0x60>)
 800bdbe:	4813      	ldr	r0, [pc, #76]	@ (800be0c <netif_set_link_up+0x64>)
 800bdc0:	f00a f8b4 	bl	8015f2c <iprintf>
 800bdc4:	e01b      	b.n	800bdfe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d114      	bne.n	800bdfe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bdda:	f043 0304 	orr.w	r3, r3, #4
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bde6:	2103      	movs	r1, #3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7ff ff6b 	bl	800bcc4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d003      	beq.n	800bdfe <netif_set_link_up+0x56>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	080173f4 	.word	0x080173f4
 800be08:	08017714 	.word	0x08017714
 800be0c:	08017444 	.word	0x08017444

0800be10 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d107      	bne.n	800be2e <netif_set_link_down+0x1e>
 800be1e:	4b11      	ldr	r3, [pc, #68]	@ (800be64 <netif_set_link_down+0x54>)
 800be20:	f240 4206 	movw	r2, #1030	@ 0x406
 800be24:	4910      	ldr	r1, [pc, #64]	@ (800be68 <netif_set_link_down+0x58>)
 800be26:	4811      	ldr	r0, [pc, #68]	@ (800be6c <netif_set_link_down+0x5c>)
 800be28:	f00a f880 	bl	8015f2c <iprintf>
 800be2c:	e017      	b.n	800be5e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be34:	f003 0304 	and.w	r3, r3, #4
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d010      	beq.n	800be5e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be42:	f023 0304 	bic.w	r3, r3, #4
 800be46:	b2da      	uxtb	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d003      	beq.n	800be5e <netif_set_link_down+0x4e>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	080173f4 	.word	0x080173f4
 800be68:	08017738 	.word	0x08017738
 800be6c:	08017444 	.word	0x08017444

0800be70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	61da      	str	r2, [r3, #28]
  }
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800be92:	b480      	push	{r7}
 800be94:	b085      	sub	sp, #20
 800be96:	af00      	add	r7, sp, #0
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	60b9      	str	r1, [r7, #8]
 800be9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800be9e:	f06f 030b 	mvn.w	r3, #11
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
	...

0800beb0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	4603      	mov	r3, r0
 800beb8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800beba:	79fb      	ldrb	r3, [r7, #7]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d013      	beq.n	800bee8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bec0:	4b0d      	ldr	r3, [pc, #52]	@ (800bef8 <netif_get_by_index+0x48>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	60fb      	str	r3, [r7, #12]
 800bec6:	e00c      	b.n	800bee2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bece:	3301      	adds	r3, #1
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	79fa      	ldrb	r2, [r7, #7]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d101      	bne.n	800bedc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	e006      	b.n	800beea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	60fb      	str	r3, [r7, #12]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1ef      	bne.n	800bec8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	20008350 	.word	0x20008350

0800befc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bf02:	4b0c      	ldr	r3, [pc, #48]	@ (800bf34 <pbuf_free_ooseq+0x38>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bf08:	4b0b      	ldr	r3, [pc, #44]	@ (800bf38 <pbuf_free_ooseq+0x3c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	607b      	str	r3, [r7, #4]
 800bf0e:	e00a      	b.n	800bf26 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d003      	beq.n	800bf20 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f002 f955 	bl	800e1c8 <tcp_free_ooseq>
      return;
 800bf1e:	e005      	b.n	800bf2c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	607b      	str	r3, [r7, #4]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1f1      	bne.n	800bf10 <pbuf_free_ooseq+0x14>
    }
  }
}
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20008359 	.word	0x20008359
 800bf38:	20008368 	.word	0x20008368

0800bf3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bf40:	4b03      	ldr	r3, [pc, #12]	@ (800bf50 <pbuf_pool_is_empty+0x14>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bf46:	bf00      	nop
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	20008359 	.word	0x20008359

0800bf54 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4611      	mov	r1, r2
 800bf60:	461a      	mov	r2, r3
 800bf62:	460b      	mov	r3, r1
 800bf64:	80fb      	strh	r3, [r7, #6]
 800bf66:	4613      	mov	r3, r2
 800bf68:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	88fa      	ldrh	r2, [r7, #6]
 800bf7a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	88ba      	ldrh	r2, [r7, #4]
 800bf80:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bf82:	8b3b      	ldrh	r3, [r7, #24]
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	7f3a      	ldrb	r2, [r7, #28]
 800bf8e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2201      	movs	r2, #1
 800bf94:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	73da      	strb	r2, [r3, #15]
}
 800bf9c:	bf00      	nop
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08c      	sub	sp, #48	@ 0x30
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	4603      	mov	r3, r0
 800bfb0:	71fb      	strb	r3, [r7, #7]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	80bb      	strh	r3, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bfba:	79fb      	ldrb	r3, [r7, #7]
 800bfbc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bfbe:	887b      	ldrh	r3, [r7, #2]
 800bfc0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bfc4:	d07f      	beq.n	800c0c6 <pbuf_alloc+0x11e>
 800bfc6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bfca:	f300 80c8 	bgt.w	800c15e <pbuf_alloc+0x1b6>
 800bfce:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bfd2:	d010      	beq.n	800bff6 <pbuf_alloc+0x4e>
 800bfd4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bfd8:	f300 80c1 	bgt.w	800c15e <pbuf_alloc+0x1b6>
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d002      	beq.n	800bfe6 <pbuf_alloc+0x3e>
 800bfe0:	2b41      	cmp	r3, #65	@ 0x41
 800bfe2:	f040 80bc 	bne.w	800c15e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bfe6:	887a      	ldrh	r2, [r7, #2]
 800bfe8:	88bb      	ldrh	r3, [r7, #4]
 800bfea:	4619      	mov	r1, r3
 800bfec:	2000      	movs	r0, #0
 800bfee:	f000 f8d1 	bl	800c194 <pbuf_alloc_reference>
 800bff2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800bff4:	e0bd      	b.n	800c172 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bffe:	88bb      	ldrh	r3, [r7, #4]
 800c000:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c002:	2008      	movs	r0, #8
 800c004:	f7ff fad8 	bl	800b5b8 <memp_malloc>
 800c008:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d109      	bne.n	800c024 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c010:	f7ff ff94 	bl	800bf3c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	2b00      	cmp	r3, #0
 800c018:	d002      	beq.n	800c020 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c01a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c01c:	f000 faa8 	bl	800c570 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c020:	2300      	movs	r3, #0
 800c022:	e0a7      	b.n	800c174 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c024:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c026:	3303      	adds	r3, #3
 800c028:	b29b      	uxth	r3, r3
 800c02a:	f023 0303 	bic.w	r3, r3, #3
 800c02e:	b29b      	uxth	r3, r3
 800c030:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c034:	b29b      	uxth	r3, r3
 800c036:	8b7a      	ldrh	r2, [r7, #26]
 800c038:	4293      	cmp	r3, r2
 800c03a:	bf28      	it	cs
 800c03c:	4613      	movcs	r3, r2
 800c03e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c040:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c042:	3310      	adds	r3, #16
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	4413      	add	r3, r2
 800c048:	3303      	adds	r3, #3
 800c04a:	f023 0303 	bic.w	r3, r3, #3
 800c04e:	4618      	mov	r0, r3
 800c050:	89f9      	ldrh	r1, [r7, #14]
 800c052:	8b7a      	ldrh	r2, [r7, #26]
 800c054:	2300      	movs	r3, #0
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	887b      	ldrh	r3, [r7, #2]
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	460b      	mov	r3, r1
 800c05e:	4601      	mov	r1, r0
 800c060:	6938      	ldr	r0, [r7, #16]
 800c062:	f7ff ff77 	bl	800bf54 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	f003 0303 	and.w	r3, r3, #3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d006      	beq.n	800c080 <pbuf_alloc+0xd8>
 800c072:	4b42      	ldr	r3, [pc, #264]	@ (800c17c <pbuf_alloc+0x1d4>)
 800c074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c078:	4941      	ldr	r1, [pc, #260]	@ (800c180 <pbuf_alloc+0x1d8>)
 800c07a:	4842      	ldr	r0, [pc, #264]	@ (800c184 <pbuf_alloc+0x1dc>)
 800c07c:	f009 ff56 	bl	8015f2c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c080:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c082:	3303      	adds	r3, #3
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c08c:	d106      	bne.n	800c09c <pbuf_alloc+0xf4>
 800c08e:	4b3b      	ldr	r3, [pc, #236]	@ (800c17c <pbuf_alloc+0x1d4>)
 800c090:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c094:	493c      	ldr	r1, [pc, #240]	@ (800c188 <pbuf_alloc+0x1e0>)
 800c096:	483b      	ldr	r0, [pc, #236]	@ (800c184 <pbuf_alloc+0x1dc>)
 800c098:	f009 ff48 	bl	8015f2c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d102      	bne.n	800c0a8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0a6:	e002      	b.n	800c0ae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c0b2:	8b7a      	ldrh	r2, [r7, #26]
 800c0b4:	89fb      	ldrh	r3, [r7, #14]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c0be:	8b7b      	ldrh	r3, [r7, #26]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d19e      	bne.n	800c002 <pbuf_alloc+0x5a>
      break;
 800c0c4:	e055      	b.n	800c172 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c0c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0c8:	3303      	adds	r3, #3
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	f023 0303 	bic.w	r3, r3, #3
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	88bb      	ldrh	r3, [r7, #4]
 800c0d4:	3303      	adds	r3, #3
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	f023 0303 	bic.w	r3, r3, #3
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	4413      	add	r3, r2
 800c0e0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c0e2:	8b3b      	ldrh	r3, [r7, #24]
 800c0e4:	3310      	adds	r3, #16
 800c0e6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c0e8:	8b3a      	ldrh	r2, [r7, #24]
 800c0ea:	88bb      	ldrh	r3, [r7, #4]
 800c0ec:	3303      	adds	r3, #3
 800c0ee:	f023 0303 	bic.w	r3, r3, #3
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d306      	bcc.n	800c104 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c0f6:	8afa      	ldrh	r2, [r7, #22]
 800c0f8:	88bb      	ldrh	r3, [r7, #4]
 800c0fa:	3303      	adds	r3, #3
 800c0fc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c100:	429a      	cmp	r2, r3
 800c102:	d201      	bcs.n	800c108 <pbuf_alloc+0x160>
        return NULL;
 800c104:	2300      	movs	r3, #0
 800c106:	e035      	b.n	800c174 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c108:	8afb      	ldrh	r3, [r7, #22]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff f8c4 	bl	800b298 <mem_malloc>
 800c110:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <pbuf_alloc+0x174>
        return NULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	e02b      	b.n	800c174 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c11c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c11e:	3310      	adds	r3, #16
 800c120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c122:	4413      	add	r3, r2
 800c124:	3303      	adds	r3, #3
 800c126:	f023 0303 	bic.w	r3, r3, #3
 800c12a:	4618      	mov	r0, r3
 800c12c:	88b9      	ldrh	r1, [r7, #4]
 800c12e:	88ba      	ldrh	r2, [r7, #4]
 800c130:	2300      	movs	r3, #0
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	887b      	ldrh	r3, [r7, #2]
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	460b      	mov	r3, r1
 800c13a:	4601      	mov	r1, r0
 800c13c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c13e:	f7ff ff09 	bl	800bf54 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f003 0303 	and.w	r3, r3, #3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d010      	beq.n	800c170 <pbuf_alloc+0x1c8>
 800c14e:	4b0b      	ldr	r3, [pc, #44]	@ (800c17c <pbuf_alloc+0x1d4>)
 800c150:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c154:	490d      	ldr	r1, [pc, #52]	@ (800c18c <pbuf_alloc+0x1e4>)
 800c156:	480b      	ldr	r0, [pc, #44]	@ (800c184 <pbuf_alloc+0x1dc>)
 800c158:	f009 fee8 	bl	8015f2c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c15c:	e008      	b.n	800c170 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c15e:	4b07      	ldr	r3, [pc, #28]	@ (800c17c <pbuf_alloc+0x1d4>)
 800c160:	f240 1227 	movw	r2, #295	@ 0x127
 800c164:	490a      	ldr	r1, [pc, #40]	@ (800c190 <pbuf_alloc+0x1e8>)
 800c166:	4807      	ldr	r0, [pc, #28]	@ (800c184 <pbuf_alloc+0x1dc>)
 800c168:	f009 fee0 	bl	8015f2c <iprintf>
      return NULL;
 800c16c:	2300      	movs	r3, #0
 800c16e:	e001      	b.n	800c174 <pbuf_alloc+0x1cc>
      break;
 800c170:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c174:	4618      	mov	r0, r3
 800c176:	3728      	adds	r7, #40	@ 0x28
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	08017794 	.word	0x08017794
 800c180:	080177c4 	.word	0x080177c4
 800c184:	080177f4 	.word	0x080177f4
 800c188:	0801781c 	.word	0x0801781c
 800c18c:	08017850 	.word	0x08017850
 800c190:	0801787c 	.word	0x0801787c

0800c194 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af02      	add	r7, sp, #8
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	807b      	strh	r3, [r7, #2]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c1a4:	883b      	ldrh	r3, [r7, #0]
 800c1a6:	2b41      	cmp	r3, #65	@ 0x41
 800c1a8:	d009      	beq.n	800c1be <pbuf_alloc_reference+0x2a>
 800c1aa:	883b      	ldrh	r3, [r7, #0]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d006      	beq.n	800c1be <pbuf_alloc_reference+0x2a>
 800c1b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f0 <pbuf_alloc_reference+0x5c>)
 800c1b2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c1b6:	490f      	ldr	r1, [pc, #60]	@ (800c1f4 <pbuf_alloc_reference+0x60>)
 800c1b8:	480f      	ldr	r0, [pc, #60]	@ (800c1f8 <pbuf_alloc_reference+0x64>)
 800c1ba:	f009 feb7 	bl	8015f2c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c1be:	2007      	movs	r0, #7
 800c1c0:	f7ff f9fa 	bl	800b5b8 <memp_malloc>
 800c1c4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	e00b      	b.n	800c1e8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c1d0:	8879      	ldrh	r1, [r7, #2]
 800c1d2:	887a      	ldrh	r2, [r7, #2]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9301      	str	r3, [sp, #4]
 800c1d8:	883b      	ldrh	r3, [r7, #0]
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f7ff feb7 	bl	800bf54 <pbuf_init_alloced_pbuf>
  return p;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	08017794 	.word	0x08017794
 800c1f4:	08017898 	.word	0x08017898
 800c1f8:	080177f4 	.word	0x080177f4

0800c1fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af02      	add	r7, sp, #8
 800c202:	607b      	str	r3, [r7, #4]
 800c204:	4603      	mov	r3, r0
 800c206:	73fb      	strb	r3, [r7, #15]
 800c208:	460b      	mov	r3, r1
 800c20a:	81bb      	strh	r3, [r7, #12]
 800c20c:	4613      	mov	r3, r2
 800c20e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c214:	8a7b      	ldrh	r3, [r7, #18]
 800c216:	3303      	adds	r3, #3
 800c218:	f023 0203 	bic.w	r2, r3, #3
 800c21c:	89bb      	ldrh	r3, [r7, #12]
 800c21e:	441a      	add	r2, r3
 800c220:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c222:	429a      	cmp	r2, r3
 800c224:	d901      	bls.n	800c22a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	e018      	b.n	800c25c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d007      	beq.n	800c240 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c230:	8a7b      	ldrh	r3, [r7, #18]
 800c232:	3303      	adds	r3, #3
 800c234:	f023 0303 	bic.w	r3, r3, #3
 800c238:	6a3a      	ldr	r2, [r7, #32]
 800c23a:	4413      	add	r3, r2
 800c23c:	617b      	str	r3, [r7, #20]
 800c23e:	e001      	b.n	800c244 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c240:	2300      	movs	r3, #0
 800c242:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	89b9      	ldrh	r1, [r7, #12]
 800c248:	89ba      	ldrh	r2, [r7, #12]
 800c24a:	2302      	movs	r3, #2
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	897b      	ldrh	r3, [r7, #10]
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	460b      	mov	r3, r1
 800c254:	6979      	ldr	r1, [r7, #20]
 800c256:	f7ff fe7d 	bl	800bf54 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c25a:	687b      	ldr	r3, [r7, #4]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <pbuf_realloc+0x20>
 800c276:	4b3a      	ldr	r3, [pc, #232]	@ (800c360 <pbuf_realloc+0xfc>)
 800c278:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c27c:	4939      	ldr	r1, [pc, #228]	@ (800c364 <pbuf_realloc+0x100>)
 800c27e:	483a      	ldr	r0, [pc, #232]	@ (800c368 <pbuf_realloc+0x104>)
 800c280:	f009 fe54 	bl	8015f2c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	891b      	ldrh	r3, [r3, #8]
 800c288:	887a      	ldrh	r2, [r7, #2]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d263      	bcs.n	800c356 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	891a      	ldrh	r2, [r3, #8]
 800c292:	887b      	ldrh	r3, [r7, #2]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c298:	887b      	ldrh	r3, [r7, #2]
 800c29a:	817b      	strh	r3, [r7, #10]
  q = p;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c2a0:	e018      	b.n	800c2d4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	895b      	ldrh	r3, [r3, #10]
 800c2a6:	897a      	ldrh	r2, [r7, #10]
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	891a      	ldrh	r2, [r3, #8]
 800c2b0:	893b      	ldrh	r3, [r7, #8]
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d106      	bne.n	800c2d4 <pbuf_realloc+0x70>
 800c2c6:	4b26      	ldr	r3, [pc, #152]	@ (800c360 <pbuf_realloc+0xfc>)
 800c2c8:	f240 12af 	movw	r2, #431	@ 0x1af
 800c2cc:	4927      	ldr	r1, [pc, #156]	@ (800c36c <pbuf_realloc+0x108>)
 800c2ce:	4826      	ldr	r0, [pc, #152]	@ (800c368 <pbuf_realloc+0x104>)
 800c2d0:	f009 fe2c 	bl	8015f2c <iprintf>
  while (rem_len > q->len) {
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	895b      	ldrh	r3, [r3, #10]
 800c2d8:	897a      	ldrh	r2, [r7, #10]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d8e1      	bhi.n	800c2a2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	7b1b      	ldrb	r3, [r3, #12]
 800c2e2:	f003 030f 	and.w	r3, r3, #15
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d121      	bne.n	800c32e <pbuf_realloc+0xca>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	895b      	ldrh	r3, [r3, #10]
 800c2ee:	897a      	ldrh	r2, [r7, #10]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d01c      	beq.n	800c32e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	7b5b      	ldrb	r3, [r3, #13]
 800c2f8:	f003 0302 	and.w	r3, r3, #2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d116      	bne.n	800c32e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	b29a      	uxth	r2, r3
 800c30a:	897b      	ldrh	r3, [r7, #10]
 800c30c:	4413      	add	r3, r2
 800c30e:	b29b      	uxth	r3, r3
 800c310:	4619      	mov	r1, r3
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f7fe fec4 	bl	800b0a0 <mem_trim>
 800c318:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d106      	bne.n	800c32e <pbuf_realloc+0xca>
 800c320:	4b0f      	ldr	r3, [pc, #60]	@ (800c360 <pbuf_realloc+0xfc>)
 800c322:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c326:	4912      	ldr	r1, [pc, #72]	@ (800c370 <pbuf_realloc+0x10c>)
 800c328:	480f      	ldr	r0, [pc, #60]	@ (800c368 <pbuf_realloc+0x104>)
 800c32a:	f009 fdff 	bl	8015f2c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	897a      	ldrh	r2, [r7, #10]
 800c332:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	895a      	ldrh	r2, [r3, #10]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d004      	beq.n	800c34e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 f911 	bl	800c570 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	e000      	b.n	800c358 <pbuf_realloc+0xf4>
    return;
 800c356:	bf00      	nop

}
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	08017794 	.word	0x08017794
 800c364:	080178ac 	.word	0x080178ac
 800c368:	080177f4 	.word	0x080177f4
 800c36c:	080178c4 	.word	0x080178c4
 800c370:	080178dc 	.word	0x080178dc

0800c374 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d106      	bne.n	800c396 <pbuf_add_header_impl+0x22>
 800c388:	4b2b      	ldr	r3, [pc, #172]	@ (800c438 <pbuf_add_header_impl+0xc4>)
 800c38a:	f240 12df 	movw	r2, #479	@ 0x1df
 800c38e:	492b      	ldr	r1, [pc, #172]	@ (800c43c <pbuf_add_header_impl+0xc8>)
 800c390:	482b      	ldr	r0, [pc, #172]	@ (800c440 <pbuf_add_header_impl+0xcc>)
 800c392:	f009 fdcb 	bl	8015f2c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d003      	beq.n	800c3a4 <pbuf_add_header_impl+0x30>
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3a2:	d301      	bcc.n	800c3a8 <pbuf_add_header_impl+0x34>
    return 1;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e043      	b.n	800c430 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d101      	bne.n	800c3b2 <pbuf_add_header_impl+0x3e>
    return 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e03e      	b.n	800c430 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	891a      	ldrh	r2, [r3, #8]
 800c3ba:	8a7b      	ldrh	r3, [r7, #18]
 800c3bc:	4413      	add	r3, r2
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	8a7a      	ldrh	r2, [r7, #18]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d901      	bls.n	800c3ca <pbuf_add_header_impl+0x56>
    return 1;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e032      	b.n	800c430 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	7b1b      	ldrb	r3, [r3, #12]
 800c3ce:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c3d0:	8a3b      	ldrh	r3, [r7, #16]
 800c3d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00c      	beq.n	800c3f4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	425b      	negs	r3, r3
 800c3e2:	4413      	add	r3, r2
 800c3e4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3310      	adds	r3, #16
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d20d      	bcs.n	800c40c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e01d      	b.n	800c430 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c3f4:	79fb      	ldrb	r3, [r7, #7]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d006      	beq.n	800c408 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	425b      	negs	r3, r3
 800c402:	4413      	add	r3, r2
 800c404:	617b      	str	r3, [r7, #20]
 800c406:	e001      	b.n	800c40c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c408:	2301      	movs	r3, #1
 800c40a:	e011      	b.n	800c430 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	895a      	ldrh	r2, [r3, #10]
 800c416:	8a7b      	ldrh	r3, [r7, #18]
 800c418:	4413      	add	r3, r2
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	891a      	ldrh	r2, [r3, #8]
 800c424:	8a7b      	ldrh	r3, [r7, #18]
 800c426:	4413      	add	r3, r2
 800c428:	b29a      	uxth	r2, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	08017794 	.word	0x08017794
 800c43c:	080178f8 	.word	0x080178f8
 800c440:	080177f4 	.word	0x080177f4

0800c444 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c44e:	2200      	movs	r2, #0
 800c450:	6839      	ldr	r1, [r7, #0]
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7ff ff8e 	bl	800c374 <pbuf_add_header_impl>
 800c458:	4603      	mov	r3, r0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
	...

0800c464 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d106      	bne.n	800c482 <pbuf_remove_header+0x1e>
 800c474:	4b20      	ldr	r3, [pc, #128]	@ (800c4f8 <pbuf_remove_header+0x94>)
 800c476:	f240 224b 	movw	r2, #587	@ 0x24b
 800c47a:	4920      	ldr	r1, [pc, #128]	@ (800c4fc <pbuf_remove_header+0x98>)
 800c47c:	4820      	ldr	r0, [pc, #128]	@ (800c500 <pbuf_remove_header+0x9c>)
 800c47e:	f009 fd55 	bl	8015f2c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d003      	beq.n	800c490 <pbuf_remove_header+0x2c>
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c48e:	d301      	bcc.n	800c494 <pbuf_remove_header+0x30>
    return 1;
 800c490:	2301      	movs	r3, #1
 800c492:	e02c      	b.n	800c4ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <pbuf_remove_header+0x3a>
    return 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	e027      	b.n	800c4ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	895b      	ldrh	r3, [r3, #10]
 800c4a6:	89fa      	ldrh	r2, [r7, #14]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d908      	bls.n	800c4be <pbuf_remove_header+0x5a>
 800c4ac:	4b12      	ldr	r3, [pc, #72]	@ (800c4f8 <pbuf_remove_header+0x94>)
 800c4ae:	f240 2255 	movw	r2, #597	@ 0x255
 800c4b2:	4914      	ldr	r1, [pc, #80]	@ (800c504 <pbuf_remove_header+0xa0>)
 800c4b4:	4812      	ldr	r0, [pc, #72]	@ (800c500 <pbuf_remove_header+0x9c>)
 800c4b6:	f009 fd39 	bl	8015f2c <iprintf>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e017      	b.n	800c4ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685a      	ldr	r2, [r3, #4]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	441a      	add	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	895a      	ldrh	r2, [r3, #10]
 800c4d4:	89fb      	ldrh	r3, [r7, #14]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	891a      	ldrh	r2, [r3, #8]
 800c4e2:	89fb      	ldrh	r3, [r7, #14]
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	08017794 	.word	0x08017794
 800c4fc:	080178f8 	.word	0x080178f8
 800c500:	080177f4 	.word	0x080177f4
 800c504:	08017904 	.word	0x08017904

0800c508 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	460b      	mov	r3, r1
 800c512:	807b      	strh	r3, [r7, #2]
 800c514:	4613      	mov	r3, r2
 800c516:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	da08      	bge.n	800c532 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c520:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c524:	425b      	negs	r3, r3
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7ff ff9b 	bl	800c464 <pbuf_remove_header>
 800c52e:	4603      	mov	r3, r0
 800c530:	e007      	b.n	800c542 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c532:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c536:	787a      	ldrb	r2, [r7, #1]
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff ff1a 	bl	800c374 <pbuf_add_header_impl>
 800c540:	4603      	mov	r3, r0
  }
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	460b      	mov	r3, r1
 800c554:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c556:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c55a:	2201      	movs	r2, #1
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff ffd2 	bl	800c508 <pbuf_header_impl>
 800c564:	4603      	mov	r3, r0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
	...

0800c570 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10b      	bne.n	800c596 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d106      	bne.n	800c592 <pbuf_free+0x22>
 800c584:	4b38      	ldr	r3, [pc, #224]	@ (800c668 <pbuf_free+0xf8>)
 800c586:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c58a:	4938      	ldr	r1, [pc, #224]	@ (800c66c <pbuf_free+0xfc>)
 800c58c:	4838      	ldr	r0, [pc, #224]	@ (800c670 <pbuf_free+0x100>)
 800c58e:	f009 fccd 	bl	8015f2c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c592:	2300      	movs	r3, #0
 800c594:	e063      	b.n	800c65e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c59a:	e05c      	b.n	800c656 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	7b9b      	ldrb	r3, [r3, #14]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <pbuf_free+0x42>
 800c5a4:	4b30      	ldr	r3, [pc, #192]	@ (800c668 <pbuf_free+0xf8>)
 800c5a6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c5aa:	4932      	ldr	r1, [pc, #200]	@ (800c674 <pbuf_free+0x104>)
 800c5ac:	4830      	ldr	r0, [pc, #192]	@ (800c670 <pbuf_free+0x100>)
 800c5ae:	f009 fcbd 	bl	8015f2c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	7b9b      	ldrb	r3, [r3, #14]
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	739a      	strb	r2, [r3, #14]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7b9b      	ldrb	r3, [r3, #14]
 800c5c2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c5c4:	7dbb      	ldrb	r3, [r7, #22]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d143      	bne.n	800c652 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	7b1b      	ldrb	r3, [r3, #12]
 800c5d4:	f003 030f 	and.w	r3, r3, #15
 800c5d8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	7b5b      	ldrb	r3, [r3, #13]
 800c5de:	f003 0302 	and.w	r3, r3, #2
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d011      	beq.n	800c60a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d106      	bne.n	800c600 <pbuf_free+0x90>
 800c5f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c668 <pbuf_free+0xf8>)
 800c5f4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c5f8:	491f      	ldr	r1, [pc, #124]	@ (800c678 <pbuf_free+0x108>)
 800c5fa:	481d      	ldr	r0, [pc, #116]	@ (800c670 <pbuf_free+0x100>)
 800c5fc:	f009 fc96 	bl	8015f2c <iprintf>
        pc->custom_free_function(p);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	4798      	blx	r3
 800c608:	e01d      	b.n	800c646 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d104      	bne.n	800c61a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c610:	6879      	ldr	r1, [r7, #4]
 800c612:	2008      	movs	r0, #8
 800c614:	f7ff f840 	bl	800b698 <memp_free>
 800c618:	e015      	b.n	800c646 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d104      	bne.n	800c62a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c620:	6879      	ldr	r1, [r7, #4]
 800c622:	2007      	movs	r0, #7
 800c624:	f7ff f838 	bl	800b698 <memp_free>
 800c628:	e00d      	b.n	800c646 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d103      	bne.n	800c638 <pbuf_free+0xc8>
          mem_free(p);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7fe fccb 	bl	800afcc <mem_free>
 800c636:	e006      	b.n	800c646 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c638:	4b0b      	ldr	r3, [pc, #44]	@ (800c668 <pbuf_free+0xf8>)
 800c63a:	f240 320f 	movw	r2, #783	@ 0x30f
 800c63e:	490f      	ldr	r1, [pc, #60]	@ (800c67c <pbuf_free+0x10c>)
 800c640:	480b      	ldr	r0, [pc, #44]	@ (800c670 <pbuf_free+0x100>)
 800c642:	f009 fc73 	bl	8015f2c <iprintf>
        }
      }
      count++;
 800c646:	7dfb      	ldrb	r3, [r7, #23]
 800c648:	3301      	adds	r3, #1
 800c64a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	607b      	str	r3, [r7, #4]
 800c650:	e001      	b.n	800c656 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d19f      	bne.n	800c59c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c65c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	08017794 	.word	0x08017794
 800c66c:	080178f8 	.word	0x080178f8
 800c670:	080177f4 	.word	0x080177f4
 800c674:	08017924 	.word	0x08017924
 800c678:	0801793c 	.word	0x0801793c
 800c67c:	08017960 	.word	0x08017960

0800c680 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c68c:	e005      	b.n	800c69a <pbuf_clen+0x1a>
    ++len;
 800c68e:	89fb      	ldrh	r3, [r7, #14]
 800c690:	3301      	adds	r3, #1
 800c692:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1f6      	bne.n	800c68e <pbuf_clen+0xe>
  }
  return len;
 800c6a0:	89fb      	ldrh	r3, [r7, #14]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3714      	adds	r7, #20
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
	...

0800c6b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d010      	beq.n	800c6e0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	7b9b      	ldrb	r3, [r3, #14]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	7b9b      	ldrb	r3, [r3, #14]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d106      	bne.n	800c6e0 <pbuf_ref+0x30>
 800c6d2:	4b05      	ldr	r3, [pc, #20]	@ (800c6e8 <pbuf_ref+0x38>)
 800c6d4:	f240 3242 	movw	r2, #834	@ 0x342
 800c6d8:	4904      	ldr	r1, [pc, #16]	@ (800c6ec <pbuf_ref+0x3c>)
 800c6da:	4805      	ldr	r0, [pc, #20]	@ (800c6f0 <pbuf_ref+0x40>)
 800c6dc:	f009 fc26 	bl	8015f2c <iprintf>
  }
}
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	08017794 	.word	0x08017794
 800c6ec:	08017974 	.word	0x08017974
 800c6f0:	080177f4 	.word	0x080177f4

0800c6f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <pbuf_cat+0x16>
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d107      	bne.n	800c71a <pbuf_cat+0x26>
 800c70a:	4b20      	ldr	r3, [pc, #128]	@ (800c78c <pbuf_cat+0x98>)
 800c70c:	f240 3259 	movw	r2, #857	@ 0x359
 800c710:	491f      	ldr	r1, [pc, #124]	@ (800c790 <pbuf_cat+0x9c>)
 800c712:	4820      	ldr	r0, [pc, #128]	@ (800c794 <pbuf_cat+0xa0>)
 800c714:	f009 fc0a 	bl	8015f2c <iprintf>
 800c718:	e034      	b.n	800c784 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	60fb      	str	r3, [r7, #12]
 800c71e:	e00a      	b.n	800c736 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	891a      	ldrh	r2, [r3, #8]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	891b      	ldrh	r3, [r3, #8]
 800c728:	4413      	add	r3, r2
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1f0      	bne.n	800c720 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	891a      	ldrh	r2, [r3, #8]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	895b      	ldrh	r3, [r3, #10]
 800c746:	429a      	cmp	r2, r3
 800c748:	d006      	beq.n	800c758 <pbuf_cat+0x64>
 800c74a:	4b10      	ldr	r3, [pc, #64]	@ (800c78c <pbuf_cat+0x98>)
 800c74c:	f240 3262 	movw	r2, #866	@ 0x362
 800c750:	4911      	ldr	r1, [pc, #68]	@ (800c798 <pbuf_cat+0xa4>)
 800c752:	4810      	ldr	r0, [pc, #64]	@ (800c794 <pbuf_cat+0xa0>)
 800c754:	f009 fbea 	bl	8015f2c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d006      	beq.n	800c76e <pbuf_cat+0x7a>
 800c760:	4b0a      	ldr	r3, [pc, #40]	@ (800c78c <pbuf_cat+0x98>)
 800c762:	f240 3263 	movw	r2, #867	@ 0x363
 800c766:	490d      	ldr	r1, [pc, #52]	@ (800c79c <pbuf_cat+0xa8>)
 800c768:	480a      	ldr	r0, [pc, #40]	@ (800c794 <pbuf_cat+0xa0>)
 800c76a:	f009 fbdf 	bl	8015f2c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	891a      	ldrh	r2, [r3, #8]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	891b      	ldrh	r3, [r3, #8]
 800c776:	4413      	add	r3, r2
 800c778:	b29a      	uxth	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08017794 	.word	0x08017794
 800c790:	08017988 	.word	0x08017988
 800c794:	080177f4 	.word	0x080177f4
 800c798:	080179c0 	.word	0x080179c0
 800c79c:	080179f0 	.word	0x080179f0

0800c7a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff ffa1 	bl	800c6f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c7b2:	6838      	ldr	r0, [r7, #0]
 800c7b4:	f7ff ff7c 	bl	800c6b0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	617b      	str	r3, [r7, #20]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d008      	beq.n	800c7ea <pbuf_copy+0x2a>
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d005      	beq.n	800c7ea <pbuf_copy+0x2a>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	891a      	ldrh	r2, [r3, #8]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	891b      	ldrh	r3, [r3, #8]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d209      	bcs.n	800c7fe <pbuf_copy+0x3e>
 800c7ea:	4b57      	ldr	r3, [pc, #348]	@ (800c948 <pbuf_copy+0x188>)
 800c7ec:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c7f0:	4956      	ldr	r1, [pc, #344]	@ (800c94c <pbuf_copy+0x18c>)
 800c7f2:	4857      	ldr	r0, [pc, #348]	@ (800c950 <pbuf_copy+0x190>)
 800c7f4:	f009 fb9a 	bl	8015f2c <iprintf>
 800c7f8:	f06f 030f 	mvn.w	r3, #15
 800c7fc:	e09f      	b.n	800c93e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	895b      	ldrh	r3, [r3, #10]
 800c802:	461a      	mov	r2, r3
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	1ad2      	subs	r2, r2, r3
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	895b      	ldrh	r3, [r3, #10]
 800c80c:	4619      	mov	r1, r3
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	1acb      	subs	r3, r1, r3
 800c812:	429a      	cmp	r2, r3
 800c814:	d306      	bcc.n	800c824 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	895b      	ldrh	r3, [r3, #10]
 800c81a:	461a      	mov	r2, r3
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	e005      	b.n	800c830 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	895b      	ldrh	r3, [r3, #10]
 800c828:	461a      	mov	r2, r3
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	18d0      	adds	r0, r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	4413      	add	r3, r2
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	4619      	mov	r1, r3
 800c844:	f009 fd47 	bl	80162d6 <memcpy>
    offset_to += len;
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	4413      	add	r3, r2
 800c84e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4413      	add	r3, r2
 800c856:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	895b      	ldrh	r3, [r3, #10]
 800c85c:	461a      	mov	r2, r3
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	4293      	cmp	r3, r2
 800c862:	d906      	bls.n	800c872 <pbuf_copy+0xb2>
 800c864:	4b38      	ldr	r3, [pc, #224]	@ (800c948 <pbuf_copy+0x188>)
 800c866:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c86a:	493a      	ldr	r1, [pc, #232]	@ (800c954 <pbuf_copy+0x194>)
 800c86c:	4838      	ldr	r0, [pc, #224]	@ (800c950 <pbuf_copy+0x190>)
 800c86e:	f009 fb5d 	bl	8015f2c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	895b      	ldrh	r3, [r3, #10]
 800c876:	461a      	mov	r2, r3
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d906      	bls.n	800c88c <pbuf_copy+0xcc>
 800c87e:	4b32      	ldr	r3, [pc, #200]	@ (800c948 <pbuf_copy+0x188>)
 800c880:	f240 32da 	movw	r2, #986	@ 0x3da
 800c884:	4934      	ldr	r1, [pc, #208]	@ (800c958 <pbuf_copy+0x198>)
 800c886:	4832      	ldr	r0, [pc, #200]	@ (800c950 <pbuf_copy+0x190>)
 800c888:	f009 fb50 	bl	8015f2c <iprintf>
    if (offset_from >= p_from->len) {
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	895b      	ldrh	r3, [r3, #10]
 800c890:	461a      	mov	r2, r3
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	4293      	cmp	r3, r2
 800c896:	d304      	bcc.n	800c8a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	895b      	ldrh	r3, [r3, #10]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d114      	bne.n	800c8d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10c      	bne.n	800c8d8 <pbuf_copy+0x118>
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d009      	beq.n	800c8d8 <pbuf_copy+0x118>
 800c8c4:	4b20      	ldr	r3, [pc, #128]	@ (800c948 <pbuf_copy+0x188>)
 800c8c6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c8ca:	4924      	ldr	r1, [pc, #144]	@ (800c95c <pbuf_copy+0x19c>)
 800c8cc:	4820      	ldr	r0, [pc, #128]	@ (800c950 <pbuf_copy+0x190>)
 800c8ce:	f009 fb2d 	bl	8015f2c <iprintf>
 800c8d2:	f06f 030f 	mvn.w	r3, #15
 800c8d6:	e032      	b.n	800c93e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d013      	beq.n	800c906 <pbuf_copy+0x146>
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	895a      	ldrh	r2, [r3, #10]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	891b      	ldrh	r3, [r3, #8]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d10d      	bne.n	800c906 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d009      	beq.n	800c906 <pbuf_copy+0x146>
 800c8f2:	4b15      	ldr	r3, [pc, #84]	@ (800c948 <pbuf_copy+0x188>)
 800c8f4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c8f8:	4919      	ldr	r1, [pc, #100]	@ (800c960 <pbuf_copy+0x1a0>)
 800c8fa:	4815      	ldr	r0, [pc, #84]	@ (800c950 <pbuf_copy+0x190>)
 800c8fc:	f009 fb16 	bl	8015f2c <iprintf>
 800c900:	f06f 0305 	mvn.w	r3, #5
 800c904:	e01b      	b.n	800c93e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d013      	beq.n	800c934 <pbuf_copy+0x174>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	895a      	ldrh	r2, [r3, #10]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	891b      	ldrh	r3, [r3, #8]
 800c914:	429a      	cmp	r2, r3
 800c916:	d10d      	bne.n	800c934 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d009      	beq.n	800c934 <pbuf_copy+0x174>
 800c920:	4b09      	ldr	r3, [pc, #36]	@ (800c948 <pbuf_copy+0x188>)
 800c922:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c926:	490e      	ldr	r1, [pc, #56]	@ (800c960 <pbuf_copy+0x1a0>)
 800c928:	4809      	ldr	r0, [pc, #36]	@ (800c950 <pbuf_copy+0x190>)
 800c92a:	f009 faff 	bl	8015f2c <iprintf>
 800c92e:	f06f 0305 	mvn.w	r3, #5
 800c932:	e004      	b.n	800c93e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	f47f af61 	bne.w	800c7fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	08017794 	.word	0x08017794
 800c94c:	08017a3c 	.word	0x08017a3c
 800c950:	080177f4 	.word	0x080177f4
 800c954:	08017a6c 	.word	0x08017a6c
 800c958:	08017a84 	.word	0x08017a84
 800c95c:	08017aa0 	.word	0x08017aa0
 800c960:	08017ab0 	.word	0x08017ab0

0800c964 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	4611      	mov	r1, r2
 800c970:	461a      	mov	r2, r3
 800c972:	460b      	mov	r3, r1
 800c974:	80fb      	strh	r3, [r7, #6]
 800c976:	4613      	mov	r3, r2
 800c978:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d108      	bne.n	800c99a <pbuf_copy_partial+0x36>
 800c988:	4b2b      	ldr	r3, [pc, #172]	@ (800ca38 <pbuf_copy_partial+0xd4>)
 800c98a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c98e:	492b      	ldr	r1, [pc, #172]	@ (800ca3c <pbuf_copy_partial+0xd8>)
 800c990:	482b      	ldr	r0, [pc, #172]	@ (800ca40 <pbuf_copy_partial+0xdc>)
 800c992:	f009 facb 	bl	8015f2c <iprintf>
 800c996:	2300      	movs	r3, #0
 800c998:	e04a      	b.n	800ca30 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d108      	bne.n	800c9b2 <pbuf_copy_partial+0x4e>
 800c9a0:	4b25      	ldr	r3, [pc, #148]	@ (800ca38 <pbuf_copy_partial+0xd4>)
 800c9a2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c9a6:	4927      	ldr	r1, [pc, #156]	@ (800ca44 <pbuf_copy_partial+0xe0>)
 800c9a8:	4825      	ldr	r0, [pc, #148]	@ (800ca40 <pbuf_copy_partial+0xdc>)
 800c9aa:	f009 fabf 	bl	8015f2c <iprintf>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e03e      	b.n	800ca30 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	61fb      	str	r3, [r7, #28]
 800c9b6:	e034      	b.n	800ca22 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c9b8:	88bb      	ldrh	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00a      	beq.n	800c9d4 <pbuf_copy_partial+0x70>
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	895b      	ldrh	r3, [r3, #10]
 800c9c2:	88ba      	ldrh	r2, [r7, #4]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d305      	bcc.n	800c9d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	895b      	ldrh	r3, [r3, #10]
 800c9cc:	88ba      	ldrh	r2, [r7, #4]
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	80bb      	strh	r3, [r7, #4]
 800c9d2:	e023      	b.n	800ca1c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	895a      	ldrh	r2, [r3, #10]
 800c9d8:	88bb      	ldrh	r3, [r7, #4]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c9de:	8b3a      	ldrh	r2, [r7, #24]
 800c9e0:	88fb      	ldrh	r3, [r7, #6]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d901      	bls.n	800c9ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c9e6:	88fb      	ldrh	r3, [r7, #6]
 800c9e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c9ea:	8b7b      	ldrh	r3, [r7, #26]
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	18d0      	adds	r0, r2, r3
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	88bb      	ldrh	r3, [r7, #4]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	8b3a      	ldrh	r2, [r7, #24]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	f009 fc6b 	bl	80162d6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ca00:	8afa      	ldrh	r2, [r7, #22]
 800ca02:	8b3b      	ldrh	r3, [r7, #24]
 800ca04:	4413      	add	r3, r2
 800ca06:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ca08:	8b7a      	ldrh	r2, [r7, #26]
 800ca0a:	8b3b      	ldrh	r3, [r7, #24]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ca10:	88fa      	ldrh	r2, [r7, #6]
 800ca12:	8b3b      	ldrh	r3, [r7, #24]
 800ca14:	1ad3      	subs	r3, r2, r3
 800ca16:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	61fb      	str	r3, [r7, #28]
 800ca22:	88fb      	ldrh	r3, [r7, #6]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <pbuf_copy_partial+0xca>
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1c4      	bne.n	800c9b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ca2e:	8afb      	ldrh	r3, [r7, #22]
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3720      	adds	r7, #32
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	08017794 	.word	0x08017794
 800ca3c:	08017adc 	.word	0x08017adc
 800ca40:	080177f4 	.word	0x080177f4
 800ca44:	08017afc 	.word	0x08017afc

0800ca48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	603a      	str	r2, [r7, #0]
 800ca52:	71fb      	strb	r3, [r7, #7]
 800ca54:	460b      	mov	r3, r1
 800ca56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	8919      	ldrh	r1, [r3, #8]
 800ca5c:	88ba      	ldrh	r2, [r7, #4]
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7ff faa1 	bl	800bfa8 <pbuf_alloc>
 800ca66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d101      	bne.n	800ca72 <pbuf_clone+0x2a>
    return NULL;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	e011      	b.n	800ca96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f7ff fea3 	bl	800c7c0 <pbuf_copy>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ca7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d006      	beq.n	800ca94 <pbuf_clone+0x4c>
 800ca86:	4b06      	ldr	r3, [pc, #24]	@ (800caa0 <pbuf_clone+0x58>)
 800ca88:	f240 5224 	movw	r2, #1316	@ 0x524
 800ca8c:	4905      	ldr	r1, [pc, #20]	@ (800caa4 <pbuf_clone+0x5c>)
 800ca8e:	4806      	ldr	r0, [pc, #24]	@ (800caa8 <pbuf_clone+0x60>)
 800ca90:	f009 fa4c 	bl	8015f2c <iprintf>
  return q;
 800ca94:	68fb      	ldr	r3, [r7, #12]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	08017794 	.word	0x08017794
 800caa4:	08017c08 	.word	0x08017c08
 800caa8:	080177f4 	.word	0x080177f4

0800caac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cab0:	f009 f93c 	bl	8015d2c <rand>
 800cab4:	4603      	mov	r3, r0
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	4b01      	ldr	r3, [pc, #4]	@ (800cacc <tcp_init+0x20>)
 800cac6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cac8:	bf00      	nop
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	20000064 	.word	0x20000064

0800cad0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7d1b      	ldrb	r3, [r3, #20]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d105      	bne.n	800caec <tcp_free+0x1c>
 800cae0:	4b06      	ldr	r3, [pc, #24]	@ (800cafc <tcp_free+0x2c>)
 800cae2:	22d4      	movs	r2, #212	@ 0xd4
 800cae4:	4906      	ldr	r1, [pc, #24]	@ (800cb00 <tcp_free+0x30>)
 800cae6:	4807      	ldr	r0, [pc, #28]	@ (800cb04 <tcp_free+0x34>)
 800cae8:	f009 fa20 	bl	8015f2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800caec:	6879      	ldr	r1, [r7, #4]
 800caee:	2001      	movs	r0, #1
 800caf0:	f7fe fdd2 	bl	800b698 <memp_free>
}
 800caf4:	bf00      	nop
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	08017c94 	.word	0x08017c94
 800cb00:	08017cc4 	.word	0x08017cc4
 800cb04:	08017cd8 	.word	0x08017cd8

0800cb08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7d1b      	ldrb	r3, [r3, #20]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d105      	bne.n	800cb24 <tcp_free_listen+0x1c>
 800cb18:	4b06      	ldr	r3, [pc, #24]	@ (800cb34 <tcp_free_listen+0x2c>)
 800cb1a:	22df      	movs	r2, #223	@ 0xdf
 800cb1c:	4906      	ldr	r1, [pc, #24]	@ (800cb38 <tcp_free_listen+0x30>)
 800cb1e:	4807      	ldr	r0, [pc, #28]	@ (800cb3c <tcp_free_listen+0x34>)
 800cb20:	f009 fa04 	bl	8015f2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	2002      	movs	r0, #2
 800cb28:	f7fe fdb6 	bl	800b698 <memp_free>
}
 800cb2c:	bf00      	nop
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	08017c94 	.word	0x08017c94
 800cb38:	08017d00 	.word	0x08017d00
 800cb3c:	08017cd8 	.word	0x08017cd8

0800cb40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cb44:	f000 fea4 	bl	800d890 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cb48:	4b07      	ldr	r3, [pc, #28]	@ (800cb68 <tcp_tmr+0x28>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	4b05      	ldr	r3, [pc, #20]	@ (800cb68 <tcp_tmr+0x28>)
 800cb52:	701a      	strb	r2, [r3, #0]
 800cb54:	4b04      	ldr	r3, [pc, #16]	@ (800cb68 <tcp_tmr+0x28>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	f003 0301 	and.w	r3, r3, #1
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cb60:	f000 fb54 	bl	800d20c <tcp_slowtmr>
  }
}
 800cb64:	bf00      	nop
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	20008371 	.word	0x20008371

0800cb6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d105      	bne.n	800cb88 <tcp_remove_listener+0x1c>
 800cb7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb4 <tcp_remove_listener+0x48>)
 800cb7e:	22ff      	movs	r2, #255	@ 0xff
 800cb80:	490d      	ldr	r1, [pc, #52]	@ (800cbb8 <tcp_remove_listener+0x4c>)
 800cb82:	480e      	ldr	r0, [pc, #56]	@ (800cbbc <tcp_remove_listener+0x50>)
 800cb84:	f009 f9d2 	bl	8015f2c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	e00a      	b.n	800cba4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d102      	bne.n	800cb9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1f1      	bne.n	800cb8e <tcp_remove_listener+0x22>
    }
  }
}
 800cbaa:	bf00      	nop
 800cbac:	bf00      	nop
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	08017c94 	.word	0x08017c94
 800cbb8:	08017d1c 	.word	0x08017d1c
 800cbbc:	08017cd8 	.word	0x08017cd8

0800cbc0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d106      	bne.n	800cbdc <tcp_listen_closed+0x1c>
 800cbce:	4b14      	ldr	r3, [pc, #80]	@ (800cc20 <tcp_listen_closed+0x60>)
 800cbd0:	f240 1211 	movw	r2, #273	@ 0x111
 800cbd4:	4913      	ldr	r1, [pc, #76]	@ (800cc24 <tcp_listen_closed+0x64>)
 800cbd6:	4814      	ldr	r0, [pc, #80]	@ (800cc28 <tcp_listen_closed+0x68>)
 800cbd8:	f009 f9a8 	bl	8015f2c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	7d1b      	ldrb	r3, [r3, #20]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d006      	beq.n	800cbf2 <tcp_listen_closed+0x32>
 800cbe4:	4b0e      	ldr	r3, [pc, #56]	@ (800cc20 <tcp_listen_closed+0x60>)
 800cbe6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800cbea:	4910      	ldr	r1, [pc, #64]	@ (800cc2c <tcp_listen_closed+0x6c>)
 800cbec:	480e      	ldr	r0, [pc, #56]	@ (800cc28 <tcp_listen_closed+0x68>)
 800cbee:	f009 f99d 	bl	8015f2c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	60fb      	str	r3, [r7, #12]
 800cbf6:	e00b      	b.n	800cc10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cbf8:	4a0d      	ldr	r2, [pc, #52]	@ (800cc30 <tcp_listen_closed+0x70>)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6879      	ldr	r1, [r7, #4]
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff ffb1 	bl	800cb6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d9f0      	bls.n	800cbf8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cc16:	bf00      	nop
 800cc18:	bf00      	nop
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	08017c94 	.word	0x08017c94
 800cc24:	08017d44 	.word	0x08017d44
 800cc28:	08017cd8 	.word	0x08017cd8
 800cc2c:	08017d50 	.word	0x08017d50
 800cc30:	0801a548 	.word	0x0801a548

0800cc34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cc34:	b5b0      	push	{r4, r5, r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af04      	add	r7, sp, #16
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d106      	bne.n	800cc54 <tcp_close_shutdown+0x20>
 800cc46:	4b63      	ldr	r3, [pc, #396]	@ (800cdd4 <tcp_close_shutdown+0x1a0>)
 800cc48:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800cc4c:	4962      	ldr	r1, [pc, #392]	@ (800cdd8 <tcp_close_shutdown+0x1a4>)
 800cc4e:	4863      	ldr	r0, [pc, #396]	@ (800cddc <tcp_close_shutdown+0x1a8>)
 800cc50:	f009 f96c 	bl	8015f2c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d066      	beq.n	800cd28 <tcp_close_shutdown+0xf4>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	7d1b      	ldrb	r3, [r3, #20]
 800cc5e:	2b04      	cmp	r3, #4
 800cc60:	d003      	beq.n	800cc6a <tcp_close_shutdown+0x36>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	7d1b      	ldrb	r3, [r3, #20]
 800cc66:	2b07      	cmp	r3, #7
 800cc68:	d15e      	bne.n	800cd28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d104      	bne.n	800cc7c <tcp_close_shutdown+0x48>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc76:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cc7a:	d055      	beq.n	800cd28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	8b5b      	ldrh	r3, [r3, #26]
 800cc80:	f003 0310 	and.w	r3, r3, #16
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d106      	bne.n	800cc96 <tcp_close_shutdown+0x62>
 800cc88:	4b52      	ldr	r3, [pc, #328]	@ (800cdd4 <tcp_close_shutdown+0x1a0>)
 800cc8a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800cc8e:	4954      	ldr	r1, [pc, #336]	@ (800cde0 <tcp_close_shutdown+0x1ac>)
 800cc90:	4852      	ldr	r0, [pc, #328]	@ (800cddc <tcp_close_shutdown+0x1a8>)
 800cc92:	f009 f94b 	bl	8015f2c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cc9e:	687d      	ldr	r5, [r7, #4]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3304      	adds	r3, #4
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	8ad2      	ldrh	r2, [r2, #22]
 800cca8:	6879      	ldr	r1, [r7, #4]
 800ccaa:	8b09      	ldrh	r1, [r1, #24]
 800ccac:	9102      	str	r1, [sp, #8]
 800ccae:	9201      	str	r2, [sp, #4]
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	462b      	mov	r3, r5
 800ccb4:	4622      	mov	r2, r4
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f004 fea7 	bl	8011a0c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f001 f8c8 	bl	800de54 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ccc4:	4b47      	ldr	r3, [pc, #284]	@ (800cde4 <tcp_close_shutdown+0x1b0>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d105      	bne.n	800ccda <tcp_close_shutdown+0xa6>
 800ccce:	4b45      	ldr	r3, [pc, #276]	@ (800cde4 <tcp_close_shutdown+0x1b0>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	4a43      	ldr	r2, [pc, #268]	@ (800cde4 <tcp_close_shutdown+0x1b0>)
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	e013      	b.n	800cd02 <tcp_close_shutdown+0xce>
 800ccda:	4b42      	ldr	r3, [pc, #264]	@ (800cde4 <tcp_close_shutdown+0x1b0>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	60fb      	str	r3, [r7, #12]
 800cce0:	e00c      	b.n	800ccfc <tcp_close_shutdown+0xc8>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d104      	bne.n	800ccf6 <tcp_close_shutdown+0xc2>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	68da      	ldr	r2, [r3, #12]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	60da      	str	r2, [r3, #12]
 800ccf4:	e005      	b.n	800cd02 <tcp_close_shutdown+0xce>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1ef      	bne.n	800cce2 <tcp_close_shutdown+0xae>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	60da      	str	r2, [r3, #12]
 800cd08:	4b37      	ldr	r3, [pc, #220]	@ (800cde8 <tcp_close_shutdown+0x1b4>)
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cd0e:	4b37      	ldr	r3, [pc, #220]	@ (800cdec <tcp_close_shutdown+0x1b8>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d102      	bne.n	800cd1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cd18:	f003 fd62 	bl	80107e0 <tcp_trigger_input_pcb_close>
 800cd1c:	e002      	b.n	800cd24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fed6 	bl	800cad0 <tcp_free>
      }
      return ERR_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	e050      	b.n	800cdca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	7d1b      	ldrb	r3, [r3, #20]
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d03b      	beq.n	800cda8 <tcp_close_shutdown+0x174>
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	dc44      	bgt.n	800cdbe <tcp_close_shutdown+0x18a>
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <tcp_close_shutdown+0x10a>
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d02a      	beq.n	800cd92 <tcp_close_shutdown+0x15e>
 800cd3c:	e03f      	b.n	800cdbe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	8adb      	ldrh	r3, [r3, #22]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d021      	beq.n	800cd8a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd46:	4b2a      	ldr	r3, [pc, #168]	@ (800cdf0 <tcp_close_shutdown+0x1bc>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d105      	bne.n	800cd5c <tcp_close_shutdown+0x128>
 800cd50:	4b27      	ldr	r3, [pc, #156]	@ (800cdf0 <tcp_close_shutdown+0x1bc>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	4a26      	ldr	r2, [pc, #152]	@ (800cdf0 <tcp_close_shutdown+0x1bc>)
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	e013      	b.n	800cd84 <tcp_close_shutdown+0x150>
 800cd5c:	4b24      	ldr	r3, [pc, #144]	@ (800cdf0 <tcp_close_shutdown+0x1bc>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	60bb      	str	r3, [r7, #8]
 800cd62:	e00c      	b.n	800cd7e <tcp_close_shutdown+0x14a>
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d104      	bne.n	800cd78 <tcp_close_shutdown+0x144>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	68da      	ldr	r2, [r3, #12]
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	60da      	str	r2, [r3, #12]
 800cd76:	e005      	b.n	800cd84 <tcp_close_shutdown+0x150>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	60bb      	str	r3, [r7, #8]
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1ef      	bne.n	800cd64 <tcp_close_shutdown+0x130>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff fea0 	bl	800cad0 <tcp_free>
      break;
 800cd90:	e01a      	b.n	800cdc8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff ff14 	bl	800cbc0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cd98:	6879      	ldr	r1, [r7, #4]
 800cd9a:	4816      	ldr	r0, [pc, #88]	@ (800cdf4 <tcp_close_shutdown+0x1c0>)
 800cd9c:	f001 f8aa 	bl	800def4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7ff feb1 	bl	800cb08 <tcp_free_listen>
      break;
 800cda6:	e00f      	b.n	800cdc8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	480e      	ldr	r0, [pc, #56]	@ (800cde4 <tcp_close_shutdown+0x1b0>)
 800cdac:	f001 f8a2 	bl	800def4 <tcp_pcb_remove>
 800cdb0:	4b0d      	ldr	r3, [pc, #52]	@ (800cde8 <tcp_close_shutdown+0x1b4>)
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff fe8a 	bl	800cad0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cdbc:	e004      	b.n	800cdc8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f81a 	bl	800cdf8 <tcp_close_shutdown_fin>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	e000      	b.n	800cdca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	08017c94 	.word	0x08017c94
 800cdd8:	08017d68 	.word	0x08017d68
 800cddc:	08017cd8 	.word	0x08017cd8
 800cde0:	08017d88 	.word	0x08017d88
 800cde4:	20008368 	.word	0x20008368
 800cde8:	20008370 	.word	0x20008370
 800cdec:	200083ac 	.word	0x200083ac
 800cdf0:	20008360 	.word	0x20008360
 800cdf4:	20008364 	.word	0x20008364

0800cdf8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <tcp_close_shutdown_fin+0x1c>
 800ce06:	4b2e      	ldr	r3, [pc, #184]	@ (800cec0 <tcp_close_shutdown_fin+0xc8>)
 800ce08:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ce0c:	492d      	ldr	r1, [pc, #180]	@ (800cec4 <tcp_close_shutdown_fin+0xcc>)
 800ce0e:	482e      	ldr	r0, [pc, #184]	@ (800cec8 <tcp_close_shutdown_fin+0xd0>)
 800ce10:	f009 f88c 	bl	8015f2c <iprintf>

  switch (pcb->state) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7d1b      	ldrb	r3, [r3, #20]
 800ce18:	2b07      	cmp	r3, #7
 800ce1a:	d020      	beq.n	800ce5e <tcp_close_shutdown_fin+0x66>
 800ce1c:	2b07      	cmp	r3, #7
 800ce1e:	dc2b      	bgt.n	800ce78 <tcp_close_shutdown_fin+0x80>
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d002      	beq.n	800ce2a <tcp_close_shutdown_fin+0x32>
 800ce24:	2b04      	cmp	r3, #4
 800ce26:	d00d      	beq.n	800ce44 <tcp_close_shutdown_fin+0x4c>
 800ce28:	e026      	b.n	800ce78 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f003 fef0 	bl	8010c10 <tcp_send_fin>
 800ce30:	4603      	mov	r3, r0
 800ce32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d11f      	bne.n	800ce7c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2205      	movs	r2, #5
 800ce40:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce42:	e01b      	b.n	800ce7c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f003 fee3 	bl	8010c10 <tcp_send_fin>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d114      	bne.n	800ce80 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2205      	movs	r2, #5
 800ce5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce5c:	e010      	b.n	800ce80 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f003 fed6 	bl	8010c10 <tcp_send_fin>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d109      	bne.n	800ce84 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2209      	movs	r2, #9
 800ce74:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce76:	e005      	b.n	800ce84 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e01c      	b.n	800ceb6 <tcp_close_shutdown_fin+0xbe>
      break;
 800ce7c:	bf00      	nop
 800ce7e:	e002      	b.n	800ce86 <tcp_close_shutdown_fin+0x8e>
      break;
 800ce80:	bf00      	nop
 800ce82:	e000      	b.n	800ce86 <tcp_close_shutdown_fin+0x8e>
      break;
 800ce84:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ce86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d103      	bne.n	800ce96 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f003 fffc 	bl	8010e8c <tcp_output>
 800ce94:	e00d      	b.n	800ceb2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ce96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce9e:	d108      	bne.n	800ceb2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	8b5b      	ldrh	r3, [r3, #26]
 800cea4:	f043 0308 	orr.w	r3, r3, #8
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e001      	b.n	800ceb6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ceb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	08017c94 	.word	0x08017c94
 800cec4:	08017d44 	.word	0x08017d44
 800cec8:	08017cd8 	.word	0x08017cd8

0800cecc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d109      	bne.n	800ceee <tcp_close+0x22>
 800ceda:	4b0f      	ldr	r3, [pc, #60]	@ (800cf18 <tcp_close+0x4c>)
 800cedc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800cee0:	490e      	ldr	r1, [pc, #56]	@ (800cf1c <tcp_close+0x50>)
 800cee2:	480f      	ldr	r0, [pc, #60]	@ (800cf20 <tcp_close+0x54>)
 800cee4:	f009 f822 	bl	8015f2c <iprintf>
 800cee8:	f06f 030f 	mvn.w	r3, #15
 800ceec:	e00f      	b.n	800cf0e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	7d1b      	ldrb	r3, [r3, #20]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d006      	beq.n	800cf04 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8b5b      	ldrh	r3, [r3, #26]
 800cefa:	f043 0310 	orr.w	r3, r3, #16
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cf04:	2101      	movs	r1, #1
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7ff fe94 	bl	800cc34 <tcp_close_shutdown>
 800cf0c:	4603      	mov	r3, r0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	08017c94 	.word	0x08017c94
 800cf1c:	08017da4 	.word	0x08017da4
 800cf20:	08017cd8 	.word	0x08017cd8

0800cf24 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08e      	sub	sp, #56	@ 0x38
 800cf28:	af04      	add	r7, sp, #16
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d107      	bne.n	800cf44 <tcp_abandon+0x20>
 800cf34:	4b52      	ldr	r3, [pc, #328]	@ (800d080 <tcp_abandon+0x15c>)
 800cf36:	f240 223d 	movw	r2, #573	@ 0x23d
 800cf3a:	4952      	ldr	r1, [pc, #328]	@ (800d084 <tcp_abandon+0x160>)
 800cf3c:	4852      	ldr	r0, [pc, #328]	@ (800d088 <tcp_abandon+0x164>)
 800cf3e:	f008 fff5 	bl	8015f2c <iprintf>
 800cf42:	e099      	b.n	800d078 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	7d1b      	ldrb	r3, [r3, #20]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d106      	bne.n	800cf5a <tcp_abandon+0x36>
 800cf4c:	4b4c      	ldr	r3, [pc, #304]	@ (800d080 <tcp_abandon+0x15c>)
 800cf4e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800cf52:	494e      	ldr	r1, [pc, #312]	@ (800d08c <tcp_abandon+0x168>)
 800cf54:	484c      	ldr	r0, [pc, #304]	@ (800d088 <tcp_abandon+0x164>)
 800cf56:	f008 ffe9 	bl	8015f2c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	7d1b      	ldrb	r3, [r3, #20]
 800cf5e:	2b0a      	cmp	r3, #10
 800cf60:	d107      	bne.n	800cf72 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	484a      	ldr	r0, [pc, #296]	@ (800d090 <tcp_abandon+0x16c>)
 800cf66:	f000 ffc5 	bl	800def4 <tcp_pcb_remove>
    tcp_free(pcb);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7ff fdb0 	bl	800cad0 <tcp_free>
 800cf70:	e082      	b.n	800d078 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf7e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf84:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf8c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7d1b      	ldrb	r3, [r3, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d126      	bne.n	800cfea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	8adb      	ldrh	r3, [r3, #22]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d02e      	beq.n	800d002 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cfa4:	4b3b      	ldr	r3, [pc, #236]	@ (800d094 <tcp_abandon+0x170>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d105      	bne.n	800cfba <tcp_abandon+0x96>
 800cfae:	4b39      	ldr	r3, [pc, #228]	@ (800d094 <tcp_abandon+0x170>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	4a37      	ldr	r2, [pc, #220]	@ (800d094 <tcp_abandon+0x170>)
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	e013      	b.n	800cfe2 <tcp_abandon+0xbe>
 800cfba:	4b36      	ldr	r3, [pc, #216]	@ (800d094 <tcp_abandon+0x170>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	61fb      	str	r3, [r7, #28]
 800cfc0:	e00c      	b.n	800cfdc <tcp_abandon+0xb8>
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d104      	bne.n	800cfd6 <tcp_abandon+0xb2>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68da      	ldr	r2, [r3, #12]
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	60da      	str	r2, [r3, #12]
 800cfd4:	e005      	b.n	800cfe2 <tcp_abandon+0xbe>
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	61fb      	str	r3, [r7, #28]
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1ef      	bne.n	800cfc2 <tcp_abandon+0x9e>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	60da      	str	r2, [r3, #12]
 800cfe8:	e00b      	b.n	800d002 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	8adb      	ldrh	r3, [r3, #22]
 800cff2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cff4:	6879      	ldr	r1, [r7, #4]
 800cff6:	4828      	ldr	r0, [pc, #160]	@ (800d098 <tcp_abandon+0x174>)
 800cff8:	f000 ff7c 	bl	800def4 <tcp_pcb_remove>
 800cffc:	4b27      	ldr	r3, [pc, #156]	@ (800d09c <tcp_abandon+0x178>)
 800cffe:	2201      	movs	r2, #1
 800d000:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d006:	2b00      	cmp	r3, #0
 800d008:	d004      	beq.n	800d014 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 fd1e 	bl	800da50 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d004      	beq.n	800d026 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d020:	4618      	mov	r0, r3
 800d022:	f000 fd15 	bl	800da50 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d004      	beq.n	800d038 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d032:	4618      	mov	r0, r3
 800d034:	f000 fd0c 	bl	800da50 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00e      	beq.n	800d05c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	3304      	adds	r3, #4
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	8b12      	ldrh	r2, [r2, #24]
 800d048:	9202      	str	r2, [sp, #8]
 800d04a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d04c:	9201      	str	r2, [sp, #4]
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	460b      	mov	r3, r1
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	69b9      	ldr	r1, [r7, #24]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f004 fcd8 	bl	8011a0c <tcp_rst>
    }
    last_state = pcb->state;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	7d1b      	ldrb	r3, [r3, #20]
 800d060:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff fd34 	bl	800cad0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d004      	beq.n	800d078 <tcp_abandon+0x154>
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	f06f 010c 	mvn.w	r1, #12
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	4798      	blx	r3
  }
}
 800d078:	3728      	adds	r7, #40	@ 0x28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	08017c94 	.word	0x08017c94
 800d084:	08017dd8 	.word	0x08017dd8
 800d088:	08017cd8 	.word	0x08017cd8
 800d08c:	08017df4 	.word	0x08017df4
 800d090:	2000836c 	.word	0x2000836c
 800d094:	20008360 	.word	0x20008360
 800d098:	20008368 	.word	0x20008368
 800d09c:	20008370 	.word	0x20008370

0800d0a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7ff ff3a 	bl	800cf24 <tcp_abandon>
}
 800d0b0:	bf00      	nop
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <tcp_update_rcv_ann_wnd+0x1c>
 800d0c6:	4b25      	ldr	r3, [pc, #148]	@ (800d15c <tcp_update_rcv_ann_wnd+0xa4>)
 800d0c8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d0cc:	4924      	ldr	r1, [pc, #144]	@ (800d160 <tcp_update_rcv_ann_wnd+0xa8>)
 800d0ce:	4825      	ldr	r0, [pc, #148]	@ (800d164 <tcp_update_rcv_ann_wnd+0xac>)
 800d0d0:	f008 ff2c 	bl	8015f2c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d0dc:	4413      	add	r3, r2
 800d0de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d0e8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d0ec:	bf28      	it	cs
 800d0ee:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800d0f2:	b292      	uxth	r2, r2
 800d0f4:	4413      	add	r3, r2
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	db08      	blt.n	800d110 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	1ad3      	subs	r3, r2, r3
 800d10e:	e020      	b.n	800d152 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d118:	1ad3      	subs	r3, r2, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	dd03      	ble.n	800d126 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d124:	e014      	b.n	800d150 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d138:	d306      	bcc.n	800d148 <tcp_update_rcv_ann_wnd+0x90>
 800d13a:	4b08      	ldr	r3, [pc, #32]	@ (800d15c <tcp_update_rcv_ann_wnd+0xa4>)
 800d13c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d140:	4909      	ldr	r1, [pc, #36]	@ (800d168 <tcp_update_rcv_ann_wnd+0xb0>)
 800d142:	4808      	ldr	r0, [pc, #32]	@ (800d164 <tcp_update_rcv_ann_wnd+0xac>)
 800d144:	f008 fef2 	bl	8015f2c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d150:	2300      	movs	r3, #0
  }
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	08017c94 	.word	0x08017c94
 800d160:	08017ef0 	.word	0x08017ef0
 800d164:	08017cd8 	.word	0x08017cd8
 800d168:	08017f14 	.word	0x08017f14

0800d16c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d107      	bne.n	800d18e <tcp_recved+0x22>
 800d17e:	4b1f      	ldr	r3, [pc, #124]	@ (800d1fc <tcp_recved+0x90>)
 800d180:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d184:	491e      	ldr	r1, [pc, #120]	@ (800d200 <tcp_recved+0x94>)
 800d186:	481f      	ldr	r0, [pc, #124]	@ (800d204 <tcp_recved+0x98>)
 800d188:	f008 fed0 	bl	8015f2c <iprintf>
 800d18c:	e032      	b.n	800d1f4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	7d1b      	ldrb	r3, [r3, #20]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d106      	bne.n	800d1a4 <tcp_recved+0x38>
 800d196:	4b19      	ldr	r3, [pc, #100]	@ (800d1fc <tcp_recved+0x90>)
 800d198:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d19c:	491a      	ldr	r1, [pc, #104]	@ (800d208 <tcp_recved+0x9c>)
 800d19e:	4819      	ldr	r0, [pc, #100]	@ (800d204 <tcp_recved+0x98>)
 800d1a0:	f008 fec4 	bl	8015f2c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d1a8:	887b      	ldrh	r3, [r7, #2]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d1ae:	89fb      	ldrh	r3, [r7, #14]
 800d1b0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d1b4:	d804      	bhi.n	800d1c0 <tcp_recved+0x54>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1ba:	89fa      	ldrh	r2, [r7, #14]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d204      	bcs.n	800d1ca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d1c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d1c8:	e002      	b.n	800d1d0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	89fa      	ldrh	r2, [r7, #14]
 800d1ce:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff ff71 	bl	800d0b8 <tcp_update_rcv_ann_wnd>
 800d1d6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d1de:	d309      	bcc.n	800d1f4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	8b5b      	ldrh	r3, [r3, #26]
 800d1e4:	f043 0302 	orr.w	r3, r3, #2
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f003 fe4c 	bl	8010e8c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	08017c94 	.word	0x08017c94
 800d200:	08017f30 	.word	0x08017f30
 800d204:	08017cd8 	.word	0x08017cd8
 800d208:	08017f48 	.word	0x08017f48

0800d20c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d20c:	b5b0      	push	{r4, r5, r7, lr}
 800d20e:	b090      	sub	sp, #64	@ 0x40
 800d210:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d218:	4b95      	ldr	r3, [pc, #596]	@ (800d470 <tcp_slowtmr+0x264>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3301      	adds	r3, #1
 800d21e:	4a94      	ldr	r2, [pc, #592]	@ (800d470 <tcp_slowtmr+0x264>)
 800d220:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d222:	4b94      	ldr	r3, [pc, #592]	@ (800d474 <tcp_slowtmr+0x268>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b92      	ldr	r3, [pc, #584]	@ (800d474 <tcp_slowtmr+0x268>)
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	e000      	b.n	800d232 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d230:	bf00      	nop
  prev = NULL;
 800d232:	2300      	movs	r3, #0
 800d234:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d236:	4b90      	ldr	r3, [pc, #576]	@ (800d478 <tcp_slowtmr+0x26c>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d23c:	e29d      	b.n	800d77a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d240:	7d1b      	ldrb	r3, [r3, #20]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d106      	bne.n	800d254 <tcp_slowtmr+0x48>
 800d246:	4b8d      	ldr	r3, [pc, #564]	@ (800d47c <tcp_slowtmr+0x270>)
 800d248:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d24c:	498c      	ldr	r1, [pc, #560]	@ (800d480 <tcp_slowtmr+0x274>)
 800d24e:	488d      	ldr	r0, [pc, #564]	@ (800d484 <tcp_slowtmr+0x278>)
 800d250:	f008 fe6c 	bl	8015f2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d256:	7d1b      	ldrb	r3, [r3, #20]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d106      	bne.n	800d26a <tcp_slowtmr+0x5e>
 800d25c:	4b87      	ldr	r3, [pc, #540]	@ (800d47c <tcp_slowtmr+0x270>)
 800d25e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d262:	4989      	ldr	r1, [pc, #548]	@ (800d488 <tcp_slowtmr+0x27c>)
 800d264:	4887      	ldr	r0, [pc, #540]	@ (800d484 <tcp_slowtmr+0x278>)
 800d266:	f008 fe61 	bl	8015f2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26c:	7d1b      	ldrb	r3, [r3, #20]
 800d26e:	2b0a      	cmp	r3, #10
 800d270:	d106      	bne.n	800d280 <tcp_slowtmr+0x74>
 800d272:	4b82      	ldr	r3, [pc, #520]	@ (800d47c <tcp_slowtmr+0x270>)
 800d274:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d278:	4984      	ldr	r1, [pc, #528]	@ (800d48c <tcp_slowtmr+0x280>)
 800d27a:	4882      	ldr	r0, [pc, #520]	@ (800d484 <tcp_slowtmr+0x278>)
 800d27c:	f008 fe56 	bl	8015f2c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d282:	7f9a      	ldrb	r2, [r3, #30]
 800d284:	4b7b      	ldr	r3, [pc, #492]	@ (800d474 <tcp_slowtmr+0x268>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d105      	bne.n	800d298 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d296:	e270      	b.n	800d77a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800d298:	4b76      	ldr	r3, [pc, #472]	@ (800d474 <tcp_slowtmr+0x268>)
 800d29a:	781a      	ldrb	r2, [r3, #0]
 800d29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ae:	7d1b      	ldrb	r3, [r3, #20]
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d10a      	bne.n	800d2ca <tcp_slowtmr+0xbe>
 800d2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2ba:	2b05      	cmp	r3, #5
 800d2bc:	d905      	bls.n	800d2ca <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d2be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800d2c8:	e11e      	b.n	800d508 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2d0:	2b0b      	cmp	r3, #11
 800d2d2:	d905      	bls.n	800d2e0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2d8:	3301      	adds	r3, #1
 800d2da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d2de:	e113      	b.n	800d508 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d075      	beq.n	800d3d6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d006      	beq.n	800d300 <tcp_slowtmr+0xf4>
 800d2f2:	4b62      	ldr	r3, [pc, #392]	@ (800d47c <tcp_slowtmr+0x270>)
 800d2f4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d2f8:	4965      	ldr	r1, [pc, #404]	@ (800d490 <tcp_slowtmr+0x284>)
 800d2fa:	4862      	ldr	r0, [pc, #392]	@ (800d484 <tcp_slowtmr+0x278>)
 800d2fc:	f008 fe16 	bl	8015f2c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d304:	2b00      	cmp	r3, #0
 800d306:	d106      	bne.n	800d316 <tcp_slowtmr+0x10a>
 800d308:	4b5c      	ldr	r3, [pc, #368]	@ (800d47c <tcp_slowtmr+0x270>)
 800d30a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d30e:	4961      	ldr	r1, [pc, #388]	@ (800d494 <tcp_slowtmr+0x288>)
 800d310:	485c      	ldr	r0, [pc, #368]	@ (800d484 <tcp_slowtmr+0x278>)
 800d312:	f008 fe0b 	bl	8015f2c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d31c:	2b0b      	cmp	r3, #11
 800d31e:	d905      	bls.n	800d32c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d324:	3301      	adds	r3, #1
 800d326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d32a:	e0ed      	b.n	800d508 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d332:	3b01      	subs	r3, #1
 800d334:	4a58      	ldr	r2, [pc, #352]	@ (800d498 <tcp_slowtmr+0x28c>)
 800d336:	5cd3      	ldrb	r3, [r2, r3]
 800d338:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d33c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d340:	7c7a      	ldrb	r2, [r7, #17]
 800d342:	429a      	cmp	r2, r3
 800d344:	d907      	bls.n	800d356 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d348:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d34c:	3301      	adds	r3, #1
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d352:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d358:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d35c:	7c7a      	ldrb	r2, [r7, #17]
 800d35e:	429a      	cmp	r2, r3
 800d360:	f200 80d2 	bhi.w	800d508 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d364:	2301      	movs	r3, #1
 800d366:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d108      	bne.n	800d384 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d372:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d374:	f004 fc3e 	bl	8011bf4 <tcp_zero_window_probe>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d014      	beq.n	800d3a8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d37e:	2300      	movs	r3, #0
 800d380:	623b      	str	r3, [r7, #32]
 800d382:	e011      	b.n	800d3a8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d38a:	4619      	mov	r1, r3
 800d38c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d38e:	f003 faf3 	bl	8010978 <tcp_split_unsent_seg>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d107      	bne.n	800d3a8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d398:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d39a:	f003 fd77 	bl	8010e8c <tcp_output>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f000 80ac 	beq.w	800d508 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d3be:	2b06      	cmp	r3, #6
 800d3c0:	f200 80a2 	bhi.w	800d508 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d3d4:	e098      	b.n	800d508 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	db0f      	blt.n	800d400 <tcp_slowtmr+0x1f4>
 800d3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d3e6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d008      	beq.n	800d400 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	b21a      	sxth	r2, r3
 800d3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3fe:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d402:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d408:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d40c:	429a      	cmp	r2, r3
 800d40e:	db7b      	blt.n	800d508 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d410:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d412:	f004 f831 	bl	8011478 <tcp_rexmit_rto_prepare>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d007      	beq.n	800d42c <tcp_slowtmr+0x220>
 800d41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d420:	2b00      	cmp	r3, #0
 800d422:	d171      	bne.n	800d508 <tcp_slowtmr+0x2fc>
 800d424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d06d      	beq.n	800d508 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42e:	7d1b      	ldrb	r3, [r3, #20]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d03a      	beq.n	800d4aa <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d436:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d43a:	2b0c      	cmp	r3, #12
 800d43c:	bf28      	it	cs
 800d43e:	230c      	movcs	r3, #12
 800d440:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d444:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d448:	10db      	asrs	r3, r3, #3
 800d44a:	b21b      	sxth	r3, r3
 800d44c:	461a      	mov	r2, r3
 800d44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d450:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d454:	4413      	add	r3, r2
 800d456:	7efa      	ldrb	r2, [r7, #27]
 800d458:	4910      	ldr	r1, [pc, #64]	@ (800d49c <tcp_slowtmr+0x290>)
 800d45a:	5c8a      	ldrb	r2, [r1, r2]
 800d45c:	4093      	lsls	r3, r2
 800d45e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d466:	4293      	cmp	r3, r2
 800d468:	dc1a      	bgt.n	800d4a0 <tcp_slowtmr+0x294>
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	b21a      	sxth	r2, r3
 800d46e:	e019      	b.n	800d4a4 <tcp_slowtmr+0x298>
 800d470:	2000835c 	.word	0x2000835c
 800d474:	20008372 	.word	0x20008372
 800d478:	20008368 	.word	0x20008368
 800d47c:	08017c94 	.word	0x08017c94
 800d480:	08017fd8 	.word	0x08017fd8
 800d484:	08017cd8 	.word	0x08017cd8
 800d488:	08018004 	.word	0x08018004
 800d48c:	08018030 	.word	0x08018030
 800d490:	08018060 	.word	0x08018060
 800d494:	08018094 	.word	0x08018094
 800d498:	0801a540 	.word	0x0801a540
 800d49c:	0801a530 	.word	0x0801a530
 800d4a0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	bf28      	it	cs
 800d4c0:	4613      	movcs	r3, r2
 800d4c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d4c4:	8a7b      	ldrh	r3, [r7, #18]
 800d4c6:	085b      	lsrs	r3, r3, #1
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d4da:	005b      	lsls	r3, r3, #1
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d206      	bcs.n	800d4f0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d502:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d504:	f004 f832 	bl	801156c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d50a:	7d1b      	ldrb	r3, [r3, #20]
 800d50c:	2b06      	cmp	r3, #6
 800d50e:	d111      	bne.n	800d534 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d512:	8b5b      	ldrh	r3, [r3, #26]
 800d514:	f003 0310 	and.w	r3, r3, #16
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00b      	beq.n	800d534 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d51c:	4b9c      	ldr	r3, [pc, #624]	@ (800d790 <tcp_slowtmr+0x584>)
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d522:	6a1b      	ldr	r3, [r3, #32]
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	2b28      	cmp	r3, #40	@ 0x28
 800d528:	d904      	bls.n	800d534 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d52a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d52e:	3301      	adds	r3, #1
 800d530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	7a5b      	ldrb	r3, [r3, #9]
 800d538:	f003 0308 	and.w	r3, r3, #8
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d04a      	beq.n	800d5d6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d542:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d544:	2b04      	cmp	r3, #4
 800d546:	d003      	beq.n	800d550 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d54c:	2b07      	cmp	r3, #7
 800d54e:	d142      	bne.n	800d5d6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d550:	4b8f      	ldr	r3, [pc, #572]	@ (800d790 <tcp_slowtmr+0x584>)
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d556:	6a1b      	ldr	r3, [r3, #32]
 800d558:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d560:	4b8c      	ldr	r3, [pc, #560]	@ (800d794 <tcp_slowtmr+0x588>)
 800d562:	440b      	add	r3, r1
 800d564:	498c      	ldr	r1, [pc, #560]	@ (800d798 <tcp_slowtmr+0x58c>)
 800d566:	fba1 1303 	umull	r1, r3, r1, r3
 800d56a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d90a      	bls.n	800d586 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800d570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d574:	3301      	adds	r3, #1
 800d576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d57a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d57e:	3301      	adds	r3, #1
 800d580:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d584:	e027      	b.n	800d5d6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d586:	4b82      	ldr	r3, [pc, #520]	@ (800d790 <tcp_slowtmr+0x584>)
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d592:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d598:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d59c:	4618      	mov	r0, r3
 800d59e:	4b7f      	ldr	r3, [pc, #508]	@ (800d79c <tcp_slowtmr+0x590>)
 800d5a0:	fb00 f303 	mul.w	r3, r0, r3
 800d5a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d5a6:	497c      	ldr	r1, [pc, #496]	@ (800d798 <tcp_slowtmr+0x58c>)
 800d5a8:	fba1 1303 	umull	r1, r3, r1, r3
 800d5ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d911      	bls.n	800d5d6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d5b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5b4:	f004 fade 	bl	8011b74 <tcp_keepalive>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d5be:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d107      	bne.n	800d5d6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d011      	beq.n	800d602 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d5de:	4b6c      	ldr	r3, [pc, #432]	@ (800d790 <tcp_slowtmr+0x584>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e4:	6a1b      	ldr	r3, [r3, #32]
 800d5e6:	1ad2      	subs	r2, r2, r3
 800d5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	005b      	lsls	r3, r3, #1
 800d5f4:	440b      	add	r3, r1
 800d5f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d302      	bcc.n	800d602 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800d5fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5fe:	f000 fde3 	bl	800e1c8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d604:	7d1b      	ldrb	r3, [r3, #20]
 800d606:	2b03      	cmp	r3, #3
 800d608:	d10b      	bne.n	800d622 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d60a:	4b61      	ldr	r3, [pc, #388]	@ (800d790 <tcp_slowtmr+0x584>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	2b28      	cmp	r3, #40	@ 0x28
 800d616:	d904      	bls.n	800d622 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800d618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d61c:	3301      	adds	r3, #1
 800d61e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d624:	7d1b      	ldrb	r3, [r3, #20]
 800d626:	2b09      	cmp	r3, #9
 800d628:	d10b      	bne.n	800d642 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d62a:	4b59      	ldr	r3, [pc, #356]	@ (800d790 <tcp_slowtmr+0x584>)
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	1ad3      	subs	r3, r2, r3
 800d634:	2bf0      	cmp	r3, #240	@ 0xf0
 800d636:	d904      	bls.n	800d642 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d63c:	3301      	adds	r3, #1
 800d63e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d646:	2b00      	cmp	r3, #0
 800d648:	d060      	beq.n	800d70c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800d64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d650:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d654:	f000 fbfe 	bl	800de54 <tcp_pcb_purge>
      if (prev != NULL) {
 800d658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d010      	beq.n	800d680 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d65e:	4b50      	ldr	r3, [pc, #320]	@ (800d7a0 <tcp_slowtmr+0x594>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d664:	429a      	cmp	r2, r3
 800d666:	d106      	bne.n	800d676 <tcp_slowtmr+0x46a>
 800d668:	4b4e      	ldr	r3, [pc, #312]	@ (800d7a4 <tcp_slowtmr+0x598>)
 800d66a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d66e:	494e      	ldr	r1, [pc, #312]	@ (800d7a8 <tcp_slowtmr+0x59c>)
 800d670:	484e      	ldr	r0, [pc, #312]	@ (800d7ac <tcp_slowtmr+0x5a0>)
 800d672:	f008 fc5b 	bl	8015f2c <iprintf>
        prev->next = pcb->next;
 800d676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d678:	68da      	ldr	r2, [r3, #12]
 800d67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d67c:	60da      	str	r2, [r3, #12]
 800d67e:	e00f      	b.n	800d6a0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d680:	4b47      	ldr	r3, [pc, #284]	@ (800d7a0 <tcp_slowtmr+0x594>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d686:	429a      	cmp	r2, r3
 800d688:	d006      	beq.n	800d698 <tcp_slowtmr+0x48c>
 800d68a:	4b46      	ldr	r3, [pc, #280]	@ (800d7a4 <tcp_slowtmr+0x598>)
 800d68c:	f240 5271 	movw	r2, #1393	@ 0x571
 800d690:	4947      	ldr	r1, [pc, #284]	@ (800d7b0 <tcp_slowtmr+0x5a4>)
 800d692:	4846      	ldr	r0, [pc, #280]	@ (800d7ac <tcp_slowtmr+0x5a0>)
 800d694:	f008 fc4a 	bl	8015f2c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	4a40      	ldr	r2, [pc, #256]	@ (800d7a0 <tcp_slowtmr+0x594>)
 800d69e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d6a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d013      	beq.n	800d6d0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6aa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d6b0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6b8:	8ad2      	ldrh	r2, [r2, #22]
 800d6ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6bc:	8b09      	ldrh	r1, [r1, #24]
 800d6be:	9102      	str	r1, [sp, #8]
 800d6c0:	9201      	str	r2, [sp, #4]
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	462b      	mov	r3, r5
 800d6c6:	4622      	mov	r2, r4
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6cc:	f004 f99e 	bl	8011a0c <tcp_rst>
      err_arg = pcb->callback_arg;
 800d6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d8:	7d1b      	ldrb	r3, [r3, #20]
 800d6da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d6e6:	6838      	ldr	r0, [r7, #0]
 800d6e8:	f7ff f9f2 	bl	800cad0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d6ec:	4b31      	ldr	r3, [pc, #196]	@ (800d7b4 <tcp_slowtmr+0x5a8>)
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <tcp_slowtmr+0x4f6>
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f06f 010c 	mvn.w	r1, #12
 800d6fe:	68b8      	ldr	r0, [r7, #8]
 800d700:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d702:	4b2c      	ldr	r3, [pc, #176]	@ (800d7b4 <tcp_slowtmr+0x5a8>)
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d037      	beq.n	800d77a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d70a:	e592      	b.n	800d232 <tcp_slowtmr+0x26>
      prev = pcb;
 800d70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d718:	7f1b      	ldrb	r3, [r3, #28]
 800d71a:	3301      	adds	r3, #1
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d720:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d724:	7f1a      	ldrb	r2, [r3, #28]
 800d726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d728:	7f5b      	ldrb	r3, [r3, #29]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d325      	bcc.n	800d77a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d730:	2200      	movs	r2, #0
 800d732:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d734:	4b1f      	ldr	r3, [pc, #124]	@ (800d7b4 <tcp_slowtmr+0x5a8>)
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00b      	beq.n	800d75c <tcp_slowtmr+0x550>
 800d744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d74a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d74c:	6912      	ldr	r2, [r2, #16]
 800d74e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d750:	4610      	mov	r0, r2
 800d752:	4798      	blx	r3
 800d754:	4603      	mov	r3, r0
 800d756:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d75a:	e002      	b.n	800d762 <tcp_slowtmr+0x556>
 800d75c:	2300      	movs	r3, #0
 800d75e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d762:	4b14      	ldr	r3, [pc, #80]	@ (800d7b4 <tcp_slowtmr+0x5a8>)
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f47f ad62 	bne.w	800d230 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d76c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d770:	2b00      	cmp	r3, #0
 800d772:	d102      	bne.n	800d77a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d776:	f003 fb89 	bl	8010e8c <tcp_output>
  while (pcb != NULL) {
 800d77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f47f ad5e 	bne.w	800d23e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d782:	2300      	movs	r3, #0
 800d784:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d786:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b8 <tcp_slowtmr+0x5ac>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d78c:	e069      	b.n	800d862 <tcp_slowtmr+0x656>
 800d78e:	bf00      	nop
 800d790:	2000835c 	.word	0x2000835c
 800d794:	000a4cb8 	.word	0x000a4cb8
 800d798:	10624dd3 	.word	0x10624dd3
 800d79c:	000124f8 	.word	0x000124f8
 800d7a0:	20008368 	.word	0x20008368
 800d7a4:	08017c94 	.word	0x08017c94
 800d7a8:	080180cc 	.word	0x080180cc
 800d7ac:	08017cd8 	.word	0x08017cd8
 800d7b0:	080180f8 	.word	0x080180f8
 800d7b4:	20008370 	.word	0x20008370
 800d7b8:	2000836c 	.word	0x2000836c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7be:	7d1b      	ldrb	r3, [r3, #20]
 800d7c0:	2b0a      	cmp	r3, #10
 800d7c2:	d006      	beq.n	800d7d2 <tcp_slowtmr+0x5c6>
 800d7c4:	4b2b      	ldr	r3, [pc, #172]	@ (800d874 <tcp_slowtmr+0x668>)
 800d7c6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d7ca:	492b      	ldr	r1, [pc, #172]	@ (800d878 <tcp_slowtmr+0x66c>)
 800d7cc:	482b      	ldr	r0, [pc, #172]	@ (800d87c <tcp_slowtmr+0x670>)
 800d7ce:	f008 fbad 	bl	8015f2c <iprintf>
    pcb_remove = 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d7d8:	4b29      	ldr	r3, [pc, #164]	@ (800d880 <tcp_slowtmr+0x674>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7de:	6a1b      	ldr	r3, [r3, #32]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	2bf0      	cmp	r3, #240	@ 0xf0
 800d7e4:	d904      	bls.n	800d7f0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d02f      	beq.n	800d858 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d7f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7fa:	f000 fb2b 	bl	800de54 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d800:	2b00      	cmp	r3, #0
 800d802:	d010      	beq.n	800d826 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d804:	4b1f      	ldr	r3, [pc, #124]	@ (800d884 <tcp_slowtmr+0x678>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d106      	bne.n	800d81c <tcp_slowtmr+0x610>
 800d80e:	4b19      	ldr	r3, [pc, #100]	@ (800d874 <tcp_slowtmr+0x668>)
 800d810:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d814:	491c      	ldr	r1, [pc, #112]	@ (800d888 <tcp_slowtmr+0x67c>)
 800d816:	4819      	ldr	r0, [pc, #100]	@ (800d87c <tcp_slowtmr+0x670>)
 800d818:	f008 fb88 	bl	8015f2c <iprintf>
        prev->next = pcb->next;
 800d81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81e:	68da      	ldr	r2, [r3, #12]
 800d820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d822:	60da      	str	r2, [r3, #12]
 800d824:	e00f      	b.n	800d846 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d826:	4b17      	ldr	r3, [pc, #92]	@ (800d884 <tcp_slowtmr+0x678>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d006      	beq.n	800d83e <tcp_slowtmr+0x632>
 800d830:	4b10      	ldr	r3, [pc, #64]	@ (800d874 <tcp_slowtmr+0x668>)
 800d832:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d836:	4915      	ldr	r1, [pc, #84]	@ (800d88c <tcp_slowtmr+0x680>)
 800d838:	4810      	ldr	r0, [pc, #64]	@ (800d87c <tcp_slowtmr+0x670>)
 800d83a:	f008 fb77 	bl	8015f2c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	4a10      	ldr	r2, [pc, #64]	@ (800d884 <tcp_slowtmr+0x678>)
 800d844:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d848:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d850:	69f8      	ldr	r0, [r7, #28]
 800d852:	f7ff f93d 	bl	800cad0 <tcp_free>
 800d856:	e004      	b.n	800d862 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1a9      	bne.n	800d7bc <tcp_slowtmr+0x5b0>
    }
  }
}
 800d868:	bf00      	nop
 800d86a:	bf00      	nop
 800d86c:	3730      	adds	r7, #48	@ 0x30
 800d86e:	46bd      	mov	sp, r7
 800d870:	bdb0      	pop	{r4, r5, r7, pc}
 800d872:	bf00      	nop
 800d874:	08017c94 	.word	0x08017c94
 800d878:	08018124 	.word	0x08018124
 800d87c:	08017cd8 	.word	0x08017cd8
 800d880:	2000835c 	.word	0x2000835c
 800d884:	2000836c 	.word	0x2000836c
 800d888:	08018154 	.word	0x08018154
 800d88c:	0801817c 	.word	0x0801817c

0800d890 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d896:	4b2d      	ldr	r3, [pc, #180]	@ (800d94c <tcp_fasttmr+0xbc>)
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	3301      	adds	r3, #1
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	4b2b      	ldr	r3, [pc, #172]	@ (800d94c <tcp_fasttmr+0xbc>)
 800d8a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d8a2:	4b2b      	ldr	r3, [pc, #172]	@ (800d950 <tcp_fasttmr+0xc0>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d8a8:	e048      	b.n	800d93c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	7f9a      	ldrb	r2, [r3, #30]
 800d8ae:	4b27      	ldr	r3, [pc, #156]	@ (800d94c <tcp_fasttmr+0xbc>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d03f      	beq.n	800d936 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d8b6:	4b25      	ldr	r3, [pc, #148]	@ (800d94c <tcp_fasttmr+0xbc>)
 800d8b8:	781a      	ldrb	r2, [r3, #0]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	8b5b      	ldrh	r3, [r3, #26]
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d010      	beq.n	800d8ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	8b5b      	ldrh	r3, [r3, #26]
 800d8ce:	f043 0302 	orr.w	r3, r3, #2
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f003 fad7 	bl	8010e8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	8b5b      	ldrh	r3, [r3, #26]
 800d8e2:	f023 0303 	bic.w	r3, r3, #3
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	8b5b      	ldrh	r3, [r3, #26]
 800d8f0:	f003 0308 	and.w	r3, r3, #8
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d009      	beq.n	800d90c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	8b5b      	ldrh	r3, [r3, #26]
 800d8fc:	f023 0308 	bic.w	r3, r3, #8
 800d900:	b29a      	uxth	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7ff fa76 	bl	800cdf8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00a      	beq.n	800d930 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d91a:	4b0e      	ldr	r3, [pc, #56]	@ (800d954 <tcp_fasttmr+0xc4>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f819 	bl	800d958 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d926:	4b0b      	ldr	r3, [pc, #44]	@ (800d954 <tcp_fasttmr+0xc4>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d000      	beq.n	800d930 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d92e:	e7b8      	b.n	800d8a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	607b      	str	r3, [r7, #4]
 800d934:	e002      	b.n	800d93c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d1b3      	bne.n	800d8aa <tcp_fasttmr+0x1a>
    }
  }
}
 800d942:	bf00      	nop
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	20008372 	.word	0x20008372
 800d950:	20008368 	.word	0x20008368
 800d954:	20008370 	.word	0x20008370

0800d958 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d958:	b590      	push	{r4, r7, lr}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d109      	bne.n	800d97a <tcp_process_refused_data+0x22>
 800d966:	4b37      	ldr	r3, [pc, #220]	@ (800da44 <tcp_process_refused_data+0xec>)
 800d968:	f240 6209 	movw	r2, #1545	@ 0x609
 800d96c:	4936      	ldr	r1, [pc, #216]	@ (800da48 <tcp_process_refused_data+0xf0>)
 800d96e:	4837      	ldr	r0, [pc, #220]	@ (800da4c <tcp_process_refused_data+0xf4>)
 800d970:	f008 fadc 	bl	8015f2c <iprintf>
 800d974:	f06f 030f 	mvn.w	r3, #15
 800d978:	e060      	b.n	800da3c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d97e:	7b5b      	ldrb	r3, [r3, #13]
 800d980:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d986:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00b      	beq.n	800d9b0 <tcp_process_refused_data+0x58>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6918      	ldr	r0, [r3, #16]
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	6879      	ldr	r1, [r7, #4]
 800d9a8:	47a0      	blx	r4
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	73fb      	strb	r3, [r7, #15]
 800d9ae:	e007      	b.n	800d9c0 <tcp_process_refused_data+0x68>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	6879      	ldr	r1, [r7, #4]
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	f000 f8a4 	bl	800db04 <tcp_recv_null>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d12a      	bne.n	800da1e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d9c8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ca:	f003 0320 	and.w	r3, r3, #32
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d033      	beq.n	800da3a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d9da:	d005      	beq.n	800d9e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00b      	beq.n	800da0a <tcp_process_refused_data+0xb2>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6918      	ldr	r0, [r3, #16]
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	2200      	movs	r2, #0
 800da00:	6879      	ldr	r1, [r7, #4]
 800da02:	47a0      	blx	r4
 800da04:	4603      	mov	r3, r0
 800da06:	73fb      	strb	r3, [r7, #15]
 800da08:	e001      	b.n	800da0e <tcp_process_refused_data+0xb6>
 800da0a:	2300      	movs	r3, #0
 800da0c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800da0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da12:	f113 0f0d 	cmn.w	r3, #13
 800da16:	d110      	bne.n	800da3a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800da18:	f06f 030c 	mvn.w	r3, #12
 800da1c:	e00e      	b.n	800da3c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800da1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da22:	f113 0f0d 	cmn.w	r3, #13
 800da26:	d102      	bne.n	800da2e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800da28:	f06f 030c 	mvn.w	r3, #12
 800da2c:	e006      	b.n	800da3c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800da34:	f06f 0304 	mvn.w	r3, #4
 800da38:	e000      	b.n	800da3c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	bd90      	pop	{r4, r7, pc}
 800da44:	08017c94 	.word	0x08017c94
 800da48:	080181a4 	.word	0x080181a4
 800da4c:	08017cd8 	.word	0x08017cd8

0800da50 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800da58:	e007      	b.n	800da6a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f80a 	bl	800da7a <tcp_seg_free>
    seg = next;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1f4      	bne.n	800da5a <tcp_segs_free+0xa>
  }
}
 800da70:	bf00      	nop
 800da72:	bf00      	nop
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00c      	beq.n	800daa2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d004      	beq.n	800da9a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	4618      	mov	r0, r3
 800da96:	f7fe fd6b 	bl	800c570 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	2003      	movs	r0, #3
 800da9e:	f7fd fdfb 	bl	800b698 <memp_free>
  }
}
 800daa2:	bf00      	nop
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
	...

0800daac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d106      	bne.n	800dac8 <tcp_seg_copy+0x1c>
 800daba:	4b0f      	ldr	r3, [pc, #60]	@ (800daf8 <tcp_seg_copy+0x4c>)
 800dabc:	f240 6282 	movw	r2, #1666	@ 0x682
 800dac0:	490e      	ldr	r1, [pc, #56]	@ (800dafc <tcp_seg_copy+0x50>)
 800dac2:	480f      	ldr	r0, [pc, #60]	@ (800db00 <tcp_seg_copy+0x54>)
 800dac4:	f008 fa32 	bl	8015f2c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dac8:	2003      	movs	r0, #3
 800daca:	f7fd fd75 	bl	800b5b8 <memp_malloc>
 800dace:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <tcp_seg_copy+0x2e>
    return NULL;
 800dad6:	2300      	movs	r3, #0
 800dad8:	e00a      	b.n	800daf0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dada:	2214      	movs	r2, #20
 800dadc:	6879      	ldr	r1, [r7, #4]
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f008 fbf9 	bl	80162d6 <memcpy>
  pbuf_ref(cseg->p);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe fde1 	bl	800c6b0 <pbuf_ref>
  return cseg;
 800daee:	68fb      	ldr	r3, [r7, #12]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3710      	adds	r7, #16
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	08017c94 	.word	0x08017c94
 800dafc:	080181e8 	.word	0x080181e8
 800db00:	08017cd8 	.word	0x08017cd8

0800db04 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
 800db10:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d109      	bne.n	800db2c <tcp_recv_null+0x28>
 800db18:	4b12      	ldr	r3, [pc, #72]	@ (800db64 <tcp_recv_null+0x60>)
 800db1a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800db1e:	4912      	ldr	r1, [pc, #72]	@ (800db68 <tcp_recv_null+0x64>)
 800db20:	4812      	ldr	r0, [pc, #72]	@ (800db6c <tcp_recv_null+0x68>)
 800db22:	f008 fa03 	bl	8015f2c <iprintf>
 800db26:	f06f 030f 	mvn.w	r3, #15
 800db2a:	e016      	b.n	800db5a <tcp_recv_null+0x56>

  if (p != NULL) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d009      	beq.n	800db46 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	891b      	ldrh	r3, [r3, #8]
 800db36:	4619      	mov	r1, r3
 800db38:	68b8      	ldr	r0, [r7, #8]
 800db3a:	f7ff fb17 	bl	800d16c <tcp_recved>
    pbuf_free(p);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7fe fd16 	bl	800c570 <pbuf_free>
 800db44:	e008      	b.n	800db58 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800db46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d104      	bne.n	800db58 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800db4e:	68b8      	ldr	r0, [r7, #8]
 800db50:	f7ff f9bc 	bl	800cecc <tcp_close>
 800db54:	4603      	mov	r3, r0
 800db56:	e000      	b.n	800db5a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	08017c94 	.word	0x08017c94
 800db68:	08018204 	.word	0x08018204
 800db6c:	08017cd8 	.word	0x08017cd8

0800db70 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	4603      	mov	r3, r0
 800db78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800db7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	db01      	blt.n	800db86 <tcp_kill_prio+0x16>
 800db82:	79fb      	ldrb	r3, [r7, #7]
 800db84:	e000      	b.n	800db88 <tcp_kill_prio+0x18>
 800db86:	237f      	movs	r3, #127	@ 0x7f
 800db88:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800db8a:	7afb      	ldrb	r3, [r7, #11]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d034      	beq.n	800dbfa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800db90:	7afb      	ldrb	r3, [r7, #11]
 800db92:	3b01      	subs	r3, #1
 800db94:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800db96:	2300      	movs	r3, #0
 800db98:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db9a:	2300      	movs	r3, #0
 800db9c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db9e:	4b19      	ldr	r3, [pc, #100]	@ (800dc04 <tcp_kill_prio+0x94>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	617b      	str	r3, [r7, #20]
 800dba4:	e01f      	b.n	800dbe6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	7d5b      	ldrb	r3, [r3, #21]
 800dbaa:	7afa      	ldrb	r2, [r7, #11]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d80c      	bhi.n	800dbca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dbb4:	7afa      	ldrb	r2, [r7, #11]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d112      	bne.n	800dbe0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dbba:	4b13      	ldr	r3, [pc, #76]	@ (800dc08 <tcp_kill_prio+0x98>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	6a1b      	ldr	r3, [r3, #32]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d80a      	bhi.n	800dbe0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dbca:	4b0f      	ldr	r3, [pc, #60]	@ (800dc08 <tcp_kill_prio+0x98>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	7d5b      	ldrb	r3, [r3, #21]
 800dbde:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	617b      	str	r3, [r7, #20]
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1dc      	bne.n	800dba6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dbf2:	6938      	ldr	r0, [r7, #16]
 800dbf4:	f7ff fa54 	bl	800d0a0 <tcp_abort>
 800dbf8:	e000      	b.n	800dbfc <tcp_kill_prio+0x8c>
    return;
 800dbfa:	bf00      	nop
  }
}
 800dbfc:	3718      	adds	r7, #24
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	20008368 	.word	0x20008368
 800dc08:	2000835c 	.word	0x2000835c

0800dc0c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dc16:	79fb      	ldrb	r3, [r7, #7]
 800dc18:	2b08      	cmp	r3, #8
 800dc1a:	d009      	beq.n	800dc30 <tcp_kill_state+0x24>
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	2b09      	cmp	r3, #9
 800dc20:	d006      	beq.n	800dc30 <tcp_kill_state+0x24>
 800dc22:	4b1a      	ldr	r3, [pc, #104]	@ (800dc8c <tcp_kill_state+0x80>)
 800dc24:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800dc28:	4919      	ldr	r1, [pc, #100]	@ (800dc90 <tcp_kill_state+0x84>)
 800dc2a:	481a      	ldr	r0, [pc, #104]	@ (800dc94 <tcp_kill_state+0x88>)
 800dc2c:	f008 f97e 	bl	8015f2c <iprintf>

  inactivity = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dc34:	2300      	movs	r3, #0
 800dc36:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc38:	4b17      	ldr	r3, [pc, #92]	@ (800dc98 <tcp_kill_state+0x8c>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	617b      	str	r3, [r7, #20]
 800dc3e:	e017      	b.n	800dc70 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	7d1b      	ldrb	r3, [r3, #20]
 800dc44:	79fa      	ldrb	r2, [r7, #7]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d10f      	bne.n	800dc6a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dc4a:	4b14      	ldr	r3, [pc, #80]	@ (800dc9c <tcp_kill_state+0x90>)
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	6a1b      	ldr	r3, [r3, #32]
 800dc52:	1ad3      	subs	r3, r2, r3
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d807      	bhi.n	800dc6a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dc5a:	4b10      	ldr	r3, [pc, #64]	@ (800dc9c <tcp_kill_state+0x90>)
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1e4      	bne.n	800dc40 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d003      	beq.n	800dc84 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	6938      	ldr	r0, [r7, #16]
 800dc80:	f7ff f950 	bl	800cf24 <tcp_abandon>
  }
}
 800dc84:	bf00      	nop
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	08017c94 	.word	0x08017c94
 800dc90:	08018220 	.word	0x08018220
 800dc94:	08017cd8 	.word	0x08017cd8
 800dc98:	20008368 	.word	0x20008368
 800dc9c:	2000835c 	.word	0x2000835c

0800dca0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcae:	4b12      	ldr	r3, [pc, #72]	@ (800dcf8 <tcp_kill_timewait+0x58>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	e012      	b.n	800dcdc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dcb6:	4b11      	ldr	r3, [pc, #68]	@ (800dcfc <tcp_kill_timewait+0x5c>)
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	1ad3      	subs	r3, r2, r3
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d807      	bhi.n	800dcd6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dcc6:	4b0d      	ldr	r3, [pc, #52]	@ (800dcfc <tcp_kill_timewait+0x5c>)
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6a1b      	ldr	r3, [r3, #32]
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1e9      	bne.n	800dcb6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dce8:	68b8      	ldr	r0, [r7, #8]
 800dcea:	f7ff f9d9 	bl	800d0a0 <tcp_abort>
  }
}
 800dcee:	bf00      	nop
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	2000836c 	.word	0x2000836c
 800dcfc:	2000835c 	.word	0x2000835c

0800dd00 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dd06:	4b10      	ldr	r3, [pc, #64]	@ (800dd48 <tcp_handle_closepend+0x48>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dd0c:	e014      	b.n	800dd38 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	8b5b      	ldrh	r3, [r3, #26]
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d009      	beq.n	800dd34 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	8b5b      	ldrh	r3, [r3, #26]
 800dd24:	f023 0308 	bic.w	r3, r3, #8
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff f862 	bl	800cdf8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1e7      	bne.n	800dd0e <tcp_handle_closepend+0xe>
  }
}
 800dd3e:	bf00      	nop
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	20008368 	.word	0x20008368

0800dd4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd56:	2001      	movs	r0, #1
 800dd58:	f7fd fc2e 	bl	800b5b8 <memp_malloc>
 800dd5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d126      	bne.n	800ddb2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dd64:	f7ff ffcc 	bl	800dd00 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dd68:	f7ff ff9a 	bl	800dca0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd6c:	2001      	movs	r0, #1
 800dd6e:	f7fd fc23 	bl	800b5b8 <memp_malloc>
 800dd72:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d11b      	bne.n	800ddb2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dd7a:	2009      	movs	r0, #9
 800dd7c:	f7ff ff46 	bl	800dc0c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd80:	2001      	movs	r0, #1
 800dd82:	f7fd fc19 	bl	800b5b8 <memp_malloc>
 800dd86:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d111      	bne.n	800ddb2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dd8e:	2008      	movs	r0, #8
 800dd90:	f7ff ff3c 	bl	800dc0c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd94:	2001      	movs	r0, #1
 800dd96:	f7fd fc0f 	bl	800b5b8 <memp_malloc>
 800dd9a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d107      	bne.n	800ddb2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dda2:	79fb      	ldrb	r3, [r7, #7]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7ff fee3 	bl	800db70 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddaa:	2001      	movs	r0, #1
 800ddac:	f7fd fc04 	bl	800b5b8 <memp_malloc>
 800ddb0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d03f      	beq.n	800de38 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ddb8:	229c      	movs	r2, #156	@ 0x9c
 800ddba:	2100      	movs	r1, #0
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f008 fa15 	bl	80161ec <memset>
    pcb->prio = prio;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	79fa      	ldrb	r2, [r7, #7]
 800ddc6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ddce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ddd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	22ff      	movs	r2, #255	@ 0xff
 800dde6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ddee:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2206      	movs	r2, #6
 800ddf4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2206      	movs	r2, #6
 800ddfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800de04:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2201      	movs	r2, #1
 800de0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800de0e:	4b0d      	ldr	r3, [pc, #52]	@ (800de44 <tcp_alloc+0xf8>)
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800de16:	4b0c      	ldr	r3, [pc, #48]	@ (800de48 <tcp_alloc+0xfc>)
 800de18:	781a      	ldrb	r2, [r3, #0]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800de24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	4a08      	ldr	r2, [pc, #32]	@ (800de4c <tcp_alloc+0x100>)
 800de2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	4a07      	ldr	r2, [pc, #28]	@ (800de50 <tcp_alloc+0x104>)
 800de34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800de38:	68fb      	ldr	r3, [r7, #12]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	2000835c 	.word	0x2000835c
 800de48:	20008372 	.word	0x20008372
 800de4c:	0800db05 	.word	0x0800db05
 800de50:	006ddd00 	.word	0x006ddd00

0800de54 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d107      	bne.n	800de72 <tcp_pcb_purge+0x1e>
 800de62:	4b21      	ldr	r3, [pc, #132]	@ (800dee8 <tcp_pcb_purge+0x94>)
 800de64:	f640 0251 	movw	r2, #2129	@ 0x851
 800de68:	4920      	ldr	r1, [pc, #128]	@ (800deec <tcp_pcb_purge+0x98>)
 800de6a:	4821      	ldr	r0, [pc, #132]	@ (800def0 <tcp_pcb_purge+0x9c>)
 800de6c:	f008 f85e 	bl	8015f2c <iprintf>
 800de70:	e037      	b.n	800dee2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	7d1b      	ldrb	r3, [r3, #20]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d033      	beq.n	800dee2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800de7e:	2b0a      	cmp	r3, #10
 800de80:	d02f      	beq.n	800dee2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800de86:	2b01      	cmp	r3, #1
 800de88:	d02b      	beq.n	800dee2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d007      	beq.n	800dea2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de96:	4618      	mov	r0, r3
 800de98:	f7fe fb6a 	bl	800c570 <pbuf_free>
      pcb->refused_data = NULL;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d002      	beq.n	800deb0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f98c 	bl	800e1c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800deb6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800debc:	4618      	mov	r0, r3
 800debe:	f7ff fdc7 	bl	800da50 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7ff fdc2 	bl	800da50 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	08017c94 	.word	0x08017c94
 800deec:	080182e0 	.word	0x080182e0
 800def0:	08017cd8 	.word	0x08017cd8

0800def4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d106      	bne.n	800df12 <tcp_pcb_remove+0x1e>
 800df04:	4b3e      	ldr	r3, [pc, #248]	@ (800e000 <tcp_pcb_remove+0x10c>)
 800df06:	f640 0283 	movw	r2, #2179	@ 0x883
 800df0a:	493e      	ldr	r1, [pc, #248]	@ (800e004 <tcp_pcb_remove+0x110>)
 800df0c:	483e      	ldr	r0, [pc, #248]	@ (800e008 <tcp_pcb_remove+0x114>)
 800df0e:	f008 f80d 	bl	8015f2c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d106      	bne.n	800df26 <tcp_pcb_remove+0x32>
 800df18:	4b39      	ldr	r3, [pc, #228]	@ (800e000 <tcp_pcb_remove+0x10c>)
 800df1a:	f640 0284 	movw	r2, #2180	@ 0x884
 800df1e:	493b      	ldr	r1, [pc, #236]	@ (800e00c <tcp_pcb_remove+0x118>)
 800df20:	4839      	ldr	r0, [pc, #228]	@ (800e008 <tcp_pcb_remove+0x114>)
 800df22:	f008 f803 	bl	8015f2c <iprintf>

  TCP_RMV(pcblist, pcb);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	683a      	ldr	r2, [r7, #0]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d105      	bne.n	800df3c <tcp_pcb_remove+0x48>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68da      	ldr	r2, [r3, #12]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	e013      	b.n	800df64 <tcp_pcb_remove+0x70>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	60fb      	str	r3, [r7, #12]
 800df42:	e00c      	b.n	800df5e <tcp_pcb_remove+0x6a>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	683a      	ldr	r2, [r7, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d104      	bne.n	800df58 <tcp_pcb_remove+0x64>
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	68da      	ldr	r2, [r3, #12]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	60da      	str	r2, [r3, #12]
 800df56:	e005      	b.n	800df64 <tcp_pcb_remove+0x70>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1ef      	bne.n	800df44 <tcp_pcb_remove+0x50>
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	2200      	movs	r2, #0
 800df68:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800df6a:	6838      	ldr	r0, [r7, #0]
 800df6c:	f7ff ff72 	bl	800de54 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	7d1b      	ldrb	r3, [r3, #20]
 800df74:	2b0a      	cmp	r3, #10
 800df76:	d013      	beq.n	800dfa0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d00f      	beq.n	800dfa0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	8b5b      	ldrh	r3, [r3, #26]
 800df84:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d009      	beq.n	800dfa0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	8b5b      	ldrh	r3, [r3, #26]
 800df90:	f043 0302 	orr.w	r3, r3, #2
 800df94:	b29a      	uxth	r2, r3
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800df9a:	6838      	ldr	r0, [r7, #0]
 800df9c:	f002 ff76 	bl	8010e8c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	7d1b      	ldrb	r3, [r3, #20]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d020      	beq.n	800dfea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d006      	beq.n	800dfbe <tcp_pcb_remove+0xca>
 800dfb0:	4b13      	ldr	r3, [pc, #76]	@ (800e000 <tcp_pcb_remove+0x10c>)
 800dfb2:	f640 0293 	movw	r2, #2195	@ 0x893
 800dfb6:	4916      	ldr	r1, [pc, #88]	@ (800e010 <tcp_pcb_remove+0x11c>)
 800dfb8:	4813      	ldr	r0, [pc, #76]	@ (800e008 <tcp_pcb_remove+0x114>)
 800dfba:	f007 ffb7 	bl	8015f2c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d006      	beq.n	800dfd4 <tcp_pcb_remove+0xe0>
 800dfc6:	4b0e      	ldr	r3, [pc, #56]	@ (800e000 <tcp_pcb_remove+0x10c>)
 800dfc8:	f640 0294 	movw	r2, #2196	@ 0x894
 800dfcc:	4911      	ldr	r1, [pc, #68]	@ (800e014 <tcp_pcb_remove+0x120>)
 800dfce:	480e      	ldr	r0, [pc, #56]	@ (800e008 <tcp_pcb_remove+0x114>)
 800dfd0:	f007 ffac 	bl	8015f2c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d006      	beq.n	800dfea <tcp_pcb_remove+0xf6>
 800dfdc:	4b08      	ldr	r3, [pc, #32]	@ (800e000 <tcp_pcb_remove+0x10c>)
 800dfde:	f640 0296 	movw	r2, #2198	@ 0x896
 800dfe2:	490d      	ldr	r1, [pc, #52]	@ (800e018 <tcp_pcb_remove+0x124>)
 800dfe4:	4808      	ldr	r0, [pc, #32]	@ (800e008 <tcp_pcb_remove+0x114>)
 800dfe6:	f007 ffa1 	bl	8015f2c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2200      	movs	r2, #0
 800dfee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	2200      	movs	r2, #0
 800dff4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dff6:	bf00      	nop
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	08017c94 	.word	0x08017c94
 800e004:	080182fc 	.word	0x080182fc
 800e008:	08017cd8 	.word	0x08017cd8
 800e00c:	08018318 	.word	0x08018318
 800e010:	08018338 	.word	0x08018338
 800e014:	08018350 	.word	0x08018350
 800e018:	0801836c 	.word	0x0801836c

0800e01c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <tcp_next_iss+0x1c>
 800e02a:	4b0a      	ldr	r3, [pc, #40]	@ (800e054 <tcp_next_iss+0x38>)
 800e02c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e030:	4909      	ldr	r1, [pc, #36]	@ (800e058 <tcp_next_iss+0x3c>)
 800e032:	480a      	ldr	r0, [pc, #40]	@ (800e05c <tcp_next_iss+0x40>)
 800e034:	f007 ff7a 	bl	8015f2c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e038:	4b09      	ldr	r3, [pc, #36]	@ (800e060 <tcp_next_iss+0x44>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	4b09      	ldr	r3, [pc, #36]	@ (800e064 <tcp_next_iss+0x48>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4413      	add	r3, r2
 800e042:	4a07      	ldr	r2, [pc, #28]	@ (800e060 <tcp_next_iss+0x44>)
 800e044:	6013      	str	r3, [r2, #0]
  return iss;
 800e046:	4b06      	ldr	r3, [pc, #24]	@ (800e060 <tcp_next_iss+0x44>)
 800e048:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	08017c94 	.word	0x08017c94
 800e058:	08018384 	.word	0x08018384
 800e05c:	08017cd8 	.word	0x08017cd8
 800e060:	20000068 	.word	0x20000068
 800e064:	2000835c 	.word	0x2000835c

0800e068 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	4603      	mov	r3, r0
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d106      	bne.n	800e08a <tcp_eff_send_mss_netif+0x22>
 800e07c:	4b14      	ldr	r3, [pc, #80]	@ (800e0d0 <tcp_eff_send_mss_netif+0x68>)
 800e07e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e082:	4914      	ldr	r1, [pc, #80]	@ (800e0d4 <tcp_eff_send_mss_netif+0x6c>)
 800e084:	4814      	ldr	r0, [pc, #80]	@ (800e0d8 <tcp_eff_send_mss_netif+0x70>)
 800e086:	f007 ff51 	bl	8015f2c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d101      	bne.n	800e094 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e090:	89fb      	ldrh	r3, [r7, #14]
 800e092:	e019      	b.n	800e0c8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e098:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e09a:	8afb      	ldrh	r3, [r7, #22]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d012      	beq.n	800e0c6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e0a0:	2328      	movs	r3, #40	@ 0x28
 800e0a2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e0a4:	8afa      	ldrh	r2, [r7, #22]
 800e0a6:	8abb      	ldrh	r3, [r7, #20]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d904      	bls.n	800e0b6 <tcp_eff_send_mss_netif+0x4e>
 800e0ac:	8afa      	ldrh	r2, [r7, #22]
 800e0ae:	8abb      	ldrh	r3, [r7, #20]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	e000      	b.n	800e0b8 <tcp_eff_send_mss_netif+0x50>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e0ba:	8a7a      	ldrh	r2, [r7, #18]
 800e0bc:	89fb      	ldrh	r3, [r7, #14]
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	bf28      	it	cs
 800e0c2:	4613      	movcs	r3, r2
 800e0c4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e0c6:	89fb      	ldrh	r3, [r7, #14]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	08017c94 	.word	0x08017c94
 800e0d4:	080183a0 	.word	0x080183a0
 800e0d8:	08017cd8 	.word	0x08017cd8

0800e0dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d11d      	bne.n	800e12c <tcp_netif_ip_addr_changed_pcblist+0x50>
 800e0f0:	4b12      	ldr	r3, [pc, #72]	@ (800e13c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e0f2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800e0f6:	4912      	ldr	r1, [pc, #72]	@ (800e140 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 800e0f8:	4812      	ldr	r0, [pc, #72]	@ (800e144 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800e0fa:	f007 ff17 	bl	8015f2c <iprintf>

  while (pcb != NULL) {
 800e0fe:	e015      	b.n	800e12c <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d10c      	bne.n	800e126 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800e112:	68f9      	ldr	r1, [r7, #12]
 800e114:	480c      	ldr	r0, [pc, #48]	@ (800e148 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800e116:	f007 ff09 	bl	8015f2c <iprintf>
      tcp_abort(pcb);
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7fe ffc0 	bl	800d0a0 <tcp_abort>
      pcb = next;
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	e002      	b.n	800e12c <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1e6      	bne.n	800e100 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e132:	bf00      	nop
 800e134:	bf00      	nop
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	08017c94 	.word	0x08017c94
 800e140:	080183c8 	.word	0x080183c8
 800e144:	08017cd8 	.word	0x08017cd8
 800e148:	080183fc 	.word	0x080183fc

0800e14c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d02a      	beq.n	800e1b2 <tcp_netif_ip_addr_changed+0x66>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d026      	beq.n	800e1b2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e164:	4b15      	ldr	r3, [pc, #84]	@ (800e1bc <tcp_netif_ip_addr_changed+0x70>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7ff ffb6 	bl	800e0dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e170:	4b13      	ldr	r3, [pc, #76]	@ (800e1c0 <tcp_netif_ip_addr_changed+0x74>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7ff ffb0 	bl	800e0dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d017      	beq.n	800e1b2 <tcp_netif_ip_addr_changed+0x66>
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d013      	beq.n	800e1b2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e18a:	4b0e      	ldr	r3, [pc, #56]	@ (800e1c4 <tcp_netif_ip_addr_changed+0x78>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	e00c      	b.n	800e1ac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d103      	bne.n	800e1a6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	60fb      	str	r3, [r7, #12]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1ef      	bne.n	800e192 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e1b2:	bf00      	nop
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20008368 	.word	0x20008368
 800e1c0:	20008360 	.word	0x20008360
 800e1c4:	20008364 	.word	0x20008364

0800e1c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d007      	beq.n	800e1e8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff fc37 	bl	800da50 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e1f0:	b590      	push	{r4, r7, lr}
 800e1f2:	b08d      	sub	sp, #52	@ 0x34
 800e1f4:	af04      	add	r7, sp, #16
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d105      	bne.n	800e20c <tcp_input+0x1c>
 800e200:	4b9b      	ldr	r3, [pc, #620]	@ (800e470 <tcp_input+0x280>)
 800e202:	2283      	movs	r2, #131	@ 0x83
 800e204:	499b      	ldr	r1, [pc, #620]	@ (800e474 <tcp_input+0x284>)
 800e206:	489c      	ldr	r0, [pc, #624]	@ (800e478 <tcp_input+0x288>)
 800e208:	f007 fe90 	bl	8015f2c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	4a9a      	ldr	r2, [pc, #616]	@ (800e47c <tcp_input+0x28c>)
 800e212:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	895b      	ldrh	r3, [r3, #10]
 800e218:	2b13      	cmp	r3, #19
 800e21a:	f240 83d1 	bls.w	800e9c0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e21e:	4b98      	ldr	r3, [pc, #608]	@ (800e480 <tcp_input+0x290>)
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	4a97      	ldr	r2, [pc, #604]	@ (800e480 <tcp_input+0x290>)
 800e224:	6812      	ldr	r2, [r2, #0]
 800e226:	4611      	mov	r1, r2
 800e228:	4618      	mov	r0, r3
 800e22a:	f006 f9a5 	bl	8014578 <ip4_addr_isbroadcast_u32>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	f040 83c7 	bne.w	800e9c4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e236:	4b92      	ldr	r3, [pc, #584]	@ (800e480 <tcp_input+0x290>)
 800e238:	695b      	ldr	r3, [r3, #20]
 800e23a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e23e:	2be0      	cmp	r3, #224	@ 0xe0
 800e240:	f000 83c0 	beq.w	800e9c4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e244:	4b8d      	ldr	r3, [pc, #564]	@ (800e47c <tcp_input+0x28c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	899b      	ldrh	r3, [r3, #12]
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fc fd3f 	bl	800acd0 <lwip_htons>
 800e252:	4603      	mov	r3, r0
 800e254:	0b1b      	lsrs	r3, r3, #12
 800e256:	b29b      	uxth	r3, r3
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e25e:	7cbb      	ldrb	r3, [r7, #18]
 800e260:	2b13      	cmp	r3, #19
 800e262:	f240 83b1 	bls.w	800e9c8 <tcp_input+0x7d8>
 800e266:	7cbb      	ldrb	r3, [r7, #18]
 800e268:	b29a      	uxth	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	891b      	ldrh	r3, [r3, #8]
 800e26e:	429a      	cmp	r2, r3
 800e270:	f200 83aa 	bhi.w	800e9c8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e274:	7cbb      	ldrb	r3, [r7, #18]
 800e276:	b29b      	uxth	r3, r3
 800e278:	3b14      	subs	r3, #20
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	4b81      	ldr	r3, [pc, #516]	@ (800e484 <tcp_input+0x294>)
 800e27e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e280:	4b81      	ldr	r3, [pc, #516]	@ (800e488 <tcp_input+0x298>)
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	895a      	ldrh	r2, [r3, #10]
 800e28a:	7cbb      	ldrb	r3, [r7, #18]
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	429a      	cmp	r2, r3
 800e290:	d309      	bcc.n	800e2a6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e292:	4b7c      	ldr	r3, [pc, #496]	@ (800e484 <tcp_input+0x294>)
 800e294:	881a      	ldrh	r2, [r3, #0]
 800e296:	4b7d      	ldr	r3, [pc, #500]	@ (800e48c <tcp_input+0x29c>)
 800e298:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e29a:	7cbb      	ldrb	r3, [r7, #18]
 800e29c:	4619      	mov	r1, r3
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7fe f8e0 	bl	800c464 <pbuf_remove_header>
 800e2a4:	e04e      	b.n	800e344 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d105      	bne.n	800e2ba <tcp_input+0xca>
 800e2ae:	4b70      	ldr	r3, [pc, #448]	@ (800e470 <tcp_input+0x280>)
 800e2b0:	22c2      	movs	r2, #194	@ 0xc2
 800e2b2:	4977      	ldr	r1, [pc, #476]	@ (800e490 <tcp_input+0x2a0>)
 800e2b4:	4870      	ldr	r0, [pc, #448]	@ (800e478 <tcp_input+0x288>)
 800e2b6:	f007 fe39 	bl	8015f2c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e2ba:	2114      	movs	r1, #20
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7fe f8d1 	bl	800c464 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	895a      	ldrh	r2, [r3, #10]
 800e2c6:	4b71      	ldr	r3, [pc, #452]	@ (800e48c <tcp_input+0x29c>)
 800e2c8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e2ca:	4b6e      	ldr	r3, [pc, #440]	@ (800e484 <tcp_input+0x294>)
 800e2cc:	881a      	ldrh	r2, [r3, #0]
 800e2ce:	4b6f      	ldr	r3, [pc, #444]	@ (800e48c <tcp_input+0x29c>)
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e2d6:	4b6d      	ldr	r3, [pc, #436]	@ (800e48c <tcp_input+0x29c>)
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7fe f8c1 	bl	800c464 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	895b      	ldrh	r3, [r3, #10]
 800e2e8:	8a3a      	ldrh	r2, [r7, #16]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	f200 836e 	bhi.w	800e9cc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	4a64      	ldr	r2, [pc, #400]	@ (800e488 <tcp_input+0x298>)
 800e2f8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	8a3a      	ldrh	r2, [r7, #16]
 800e300:	4611      	mov	r1, r2
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe f8ae 	bl	800c464 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	891a      	ldrh	r2, [r3, #8]
 800e30c:	8a3b      	ldrh	r3, [r7, #16]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	b29a      	uxth	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	895b      	ldrh	r3, [r3, #10]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d005      	beq.n	800e32a <tcp_input+0x13a>
 800e31e:	4b54      	ldr	r3, [pc, #336]	@ (800e470 <tcp_input+0x280>)
 800e320:	22df      	movs	r2, #223	@ 0xdf
 800e322:	495c      	ldr	r1, [pc, #368]	@ (800e494 <tcp_input+0x2a4>)
 800e324:	4854      	ldr	r0, [pc, #336]	@ (800e478 <tcp_input+0x288>)
 800e326:	f007 fe01 	bl	8015f2c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	891a      	ldrh	r2, [r3, #8]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	891b      	ldrh	r3, [r3, #8]
 800e334:	429a      	cmp	r2, r3
 800e336:	d005      	beq.n	800e344 <tcp_input+0x154>
 800e338:	4b4d      	ldr	r3, [pc, #308]	@ (800e470 <tcp_input+0x280>)
 800e33a:	22e0      	movs	r2, #224	@ 0xe0
 800e33c:	4956      	ldr	r1, [pc, #344]	@ (800e498 <tcp_input+0x2a8>)
 800e33e:	484e      	ldr	r0, [pc, #312]	@ (800e478 <tcp_input+0x288>)
 800e340:	f007 fdf4 	bl	8015f2c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e344:	4b4d      	ldr	r3, [pc, #308]	@ (800e47c <tcp_input+0x28c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	881b      	ldrh	r3, [r3, #0]
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	4a4b      	ldr	r2, [pc, #300]	@ (800e47c <tcp_input+0x28c>)
 800e34e:	6814      	ldr	r4, [r2, #0]
 800e350:	4618      	mov	r0, r3
 800e352:	f7fc fcbd 	bl	800acd0 <lwip_htons>
 800e356:	4603      	mov	r3, r0
 800e358:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e35a:	4b48      	ldr	r3, [pc, #288]	@ (800e47c <tcp_input+0x28c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	885b      	ldrh	r3, [r3, #2]
 800e360:	b29b      	uxth	r3, r3
 800e362:	4a46      	ldr	r2, [pc, #280]	@ (800e47c <tcp_input+0x28c>)
 800e364:	6814      	ldr	r4, [r2, #0]
 800e366:	4618      	mov	r0, r3
 800e368:	f7fc fcb2 	bl	800acd0 <lwip_htons>
 800e36c:	4603      	mov	r3, r0
 800e36e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e370:	4b42      	ldr	r3, [pc, #264]	@ (800e47c <tcp_input+0x28c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	4a41      	ldr	r2, [pc, #260]	@ (800e47c <tcp_input+0x28c>)
 800e378:	6814      	ldr	r4, [r2, #0]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fc fcbe 	bl	800acfc <lwip_htonl>
 800e380:	4603      	mov	r3, r0
 800e382:	6063      	str	r3, [r4, #4]
 800e384:	6863      	ldr	r3, [r4, #4]
 800e386:	4a45      	ldr	r2, [pc, #276]	@ (800e49c <tcp_input+0x2ac>)
 800e388:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e38a:	4b3c      	ldr	r3, [pc, #240]	@ (800e47c <tcp_input+0x28c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	4a3a      	ldr	r2, [pc, #232]	@ (800e47c <tcp_input+0x28c>)
 800e392:	6814      	ldr	r4, [r2, #0]
 800e394:	4618      	mov	r0, r3
 800e396:	f7fc fcb1 	bl	800acfc <lwip_htonl>
 800e39a:	4603      	mov	r3, r0
 800e39c:	60a3      	str	r3, [r4, #8]
 800e39e:	68a3      	ldr	r3, [r4, #8]
 800e3a0:	4a3f      	ldr	r2, [pc, #252]	@ (800e4a0 <tcp_input+0x2b0>)
 800e3a2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e3a4:	4b35      	ldr	r3, [pc, #212]	@ (800e47c <tcp_input+0x28c>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	89db      	ldrh	r3, [r3, #14]
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	4a33      	ldr	r2, [pc, #204]	@ (800e47c <tcp_input+0x28c>)
 800e3ae:	6814      	ldr	r4, [r2, #0]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fc fc8d 	bl	800acd0 <lwip_htons>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e3ba:	4b30      	ldr	r3, [pc, #192]	@ (800e47c <tcp_input+0x28c>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	899b      	ldrh	r3, [r3, #12]
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fc fc84 	bl	800acd0 <lwip_htons>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	4b34      	ldr	r3, [pc, #208]	@ (800e4a4 <tcp_input+0x2b4>)
 800e3d4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	891a      	ldrh	r2, [r3, #8]
 800e3da:	4b33      	ldr	r3, [pc, #204]	@ (800e4a8 <tcp_input+0x2b8>)
 800e3dc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e3de:	4b31      	ldr	r3, [pc, #196]	@ (800e4a4 <tcp_input+0x2b4>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	f003 0303 	and.w	r3, r3, #3
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00c      	beq.n	800e404 <tcp_input+0x214>
    tcplen++;
 800e3ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e4a8 <tcp_input+0x2b8>)
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	4b2d      	ldr	r3, [pc, #180]	@ (800e4a8 <tcp_input+0x2b8>)
 800e3f4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	891a      	ldrh	r2, [r3, #8]
 800e3fa:	4b2b      	ldr	r3, [pc, #172]	@ (800e4a8 <tcp_input+0x2b8>)
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	f200 82e6 	bhi.w	800e9d0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e404:	2300      	movs	r3, #0
 800e406:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e408:	4b28      	ldr	r3, [pc, #160]	@ (800e4ac <tcp_input+0x2bc>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	61bb      	str	r3, [r7, #24]
 800e40e:	e09d      	b.n	800e54c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	7d1b      	ldrb	r3, [r3, #20]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d105      	bne.n	800e424 <tcp_input+0x234>
 800e418:	4b15      	ldr	r3, [pc, #84]	@ (800e470 <tcp_input+0x280>)
 800e41a:	22fb      	movs	r2, #251	@ 0xfb
 800e41c:	4924      	ldr	r1, [pc, #144]	@ (800e4b0 <tcp_input+0x2c0>)
 800e41e:	4816      	ldr	r0, [pc, #88]	@ (800e478 <tcp_input+0x288>)
 800e420:	f007 fd84 	bl	8015f2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	7d1b      	ldrb	r3, [r3, #20]
 800e428:	2b0a      	cmp	r3, #10
 800e42a:	d105      	bne.n	800e438 <tcp_input+0x248>
 800e42c:	4b10      	ldr	r3, [pc, #64]	@ (800e470 <tcp_input+0x280>)
 800e42e:	22fc      	movs	r2, #252	@ 0xfc
 800e430:	4920      	ldr	r1, [pc, #128]	@ (800e4b4 <tcp_input+0x2c4>)
 800e432:	4811      	ldr	r0, [pc, #68]	@ (800e478 <tcp_input+0x288>)
 800e434:	f007 fd7a 	bl	8015f2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	7d1b      	ldrb	r3, [r3, #20]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d105      	bne.n	800e44c <tcp_input+0x25c>
 800e440:	4b0b      	ldr	r3, [pc, #44]	@ (800e470 <tcp_input+0x280>)
 800e442:	22fd      	movs	r2, #253	@ 0xfd
 800e444:	491c      	ldr	r1, [pc, #112]	@ (800e4b8 <tcp_input+0x2c8>)
 800e446:	480c      	ldr	r0, [pc, #48]	@ (800e478 <tcp_input+0x288>)
 800e448:	f007 fd70 	bl	8015f2c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	7a1b      	ldrb	r3, [r3, #8]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d033      	beq.n	800e4bc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	7a1a      	ldrb	r2, [r3, #8]
 800e458:	4b09      	ldr	r3, [pc, #36]	@ (800e480 <tcp_input+0x290>)
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e460:	3301      	adds	r3, #1
 800e462:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e464:	429a      	cmp	r2, r3
 800e466:	d029      	beq.n	800e4bc <tcp_input+0x2cc>
      prev = pcb;
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	61fb      	str	r3, [r7, #28]
      continue;
 800e46c:	e06b      	b.n	800e546 <tcp_input+0x356>
 800e46e:	bf00      	nop
 800e470:	08018424 	.word	0x08018424
 800e474:	08018458 	.word	0x08018458
 800e478:	08018470 	.word	0x08018470
 800e47c:	20008388 	.word	0x20008388
 800e480:	20005400 	.word	0x20005400
 800e484:	2000838c 	.word	0x2000838c
 800e488:	20008390 	.word	0x20008390
 800e48c:	2000838e 	.word	0x2000838e
 800e490:	08018498 	.word	0x08018498
 800e494:	080184a8 	.word	0x080184a8
 800e498:	080184b4 	.word	0x080184b4
 800e49c:	20008398 	.word	0x20008398
 800e4a0:	2000839c 	.word	0x2000839c
 800e4a4:	200083a4 	.word	0x200083a4
 800e4a8:	200083a2 	.word	0x200083a2
 800e4ac:	20008368 	.word	0x20008368
 800e4b0:	080184d4 	.word	0x080184d4
 800e4b4:	080184fc 	.word	0x080184fc
 800e4b8:	08018528 	.word	0x08018528
    }

    if (pcb->remote_port == tcphdr->src &&
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	8b1a      	ldrh	r2, [r3, #24]
 800e4c0:	4b72      	ldr	r3, [pc, #456]	@ (800e68c <tcp_input+0x49c>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d13a      	bne.n	800e542 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	8ada      	ldrh	r2, [r3, #22]
 800e4d0:	4b6e      	ldr	r3, [pc, #440]	@ (800e68c <tcp_input+0x49c>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	885b      	ldrh	r3, [r3, #2]
 800e4d6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d132      	bne.n	800e542 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	4b6b      	ldr	r3, [pc, #428]	@ (800e690 <tcp_input+0x4a0>)
 800e4e2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d12c      	bne.n	800e542 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	4b68      	ldr	r3, [pc, #416]	@ (800e690 <tcp_input+0x4a0>)
 800e4ee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d126      	bne.n	800e542 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	69ba      	ldr	r2, [r7, #24]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d106      	bne.n	800e50c <tcp_input+0x31c>
 800e4fe:	4b65      	ldr	r3, [pc, #404]	@ (800e694 <tcp_input+0x4a4>)
 800e500:	f240 120d 	movw	r2, #269	@ 0x10d
 800e504:	4964      	ldr	r1, [pc, #400]	@ (800e698 <tcp_input+0x4a8>)
 800e506:	4865      	ldr	r0, [pc, #404]	@ (800e69c <tcp_input+0x4ac>)
 800e508:	f007 fd10 	bl	8015f2c <iprintf>
      if (prev != NULL) {
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00a      	beq.n	800e528 <tcp_input+0x338>
        prev->next = pcb->next;
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	68da      	ldr	r2, [r3, #12]
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e51a:	4b61      	ldr	r3, [pc, #388]	@ (800e6a0 <tcp_input+0x4b0>)
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e522:	4a5f      	ldr	r2, [pc, #380]	@ (800e6a0 <tcp_input+0x4b0>)
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	68db      	ldr	r3, [r3, #12]
 800e52c:	69ba      	ldr	r2, [r7, #24]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d111      	bne.n	800e556 <tcp_input+0x366>
 800e532:	4b58      	ldr	r3, [pc, #352]	@ (800e694 <tcp_input+0x4a4>)
 800e534:	f240 1215 	movw	r2, #277	@ 0x115
 800e538:	495a      	ldr	r1, [pc, #360]	@ (800e6a4 <tcp_input+0x4b4>)
 800e53a:	4858      	ldr	r0, [pc, #352]	@ (800e69c <tcp_input+0x4ac>)
 800e53c:	f007 fcf6 	bl	8015f2c <iprintf>
      break;
 800e540:	e009      	b.n	800e556 <tcp_input+0x366>
    }
    prev = pcb;
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	61bb      	str	r3, [r7, #24]
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f47f af5e 	bne.w	800e410 <tcp_input+0x220>
 800e554:	e000      	b.n	800e558 <tcp_input+0x368>
      break;
 800e556:	bf00      	nop
  }

  if (pcb == NULL) {
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f040 80aa 	bne.w	800e6b4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e560:	4b51      	ldr	r3, [pc, #324]	@ (800e6a8 <tcp_input+0x4b8>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	61bb      	str	r3, [r7, #24]
 800e566:	e03f      	b.n	800e5e8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	7d1b      	ldrb	r3, [r3, #20]
 800e56c:	2b0a      	cmp	r3, #10
 800e56e:	d006      	beq.n	800e57e <tcp_input+0x38e>
 800e570:	4b48      	ldr	r3, [pc, #288]	@ (800e694 <tcp_input+0x4a4>)
 800e572:	f240 121f 	movw	r2, #287	@ 0x11f
 800e576:	494d      	ldr	r1, [pc, #308]	@ (800e6ac <tcp_input+0x4bc>)
 800e578:	4848      	ldr	r0, [pc, #288]	@ (800e69c <tcp_input+0x4ac>)
 800e57a:	f007 fcd7 	bl	8015f2c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	7a1b      	ldrb	r3, [r3, #8]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d009      	beq.n	800e59a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	7a1a      	ldrb	r2, [r3, #8]
 800e58a:	4b41      	ldr	r3, [pc, #260]	@ (800e690 <tcp_input+0x4a0>)
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e592:	3301      	adds	r3, #1
 800e594:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e596:	429a      	cmp	r2, r3
 800e598:	d122      	bne.n	800e5e0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	8b1a      	ldrh	r2, [r3, #24]
 800e59e:	4b3b      	ldr	r3, [pc, #236]	@ (800e68c <tcp_input+0x49c>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	881b      	ldrh	r3, [r3, #0]
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d11b      	bne.n	800e5e2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	8ada      	ldrh	r2, [r3, #22]
 800e5ae:	4b37      	ldr	r3, [pc, #220]	@ (800e68c <tcp_input+0x49c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	885b      	ldrh	r3, [r3, #2]
 800e5b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d113      	bne.n	800e5e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	4b34      	ldr	r3, [pc, #208]	@ (800e690 <tcp_input+0x4a0>)
 800e5c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d10d      	bne.n	800e5e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	4b31      	ldr	r3, [pc, #196]	@ (800e690 <tcp_input+0x4a0>)
 800e5cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d107      	bne.n	800e5e2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e5d2:	69b8      	ldr	r0, [r7, #24]
 800e5d4:	f000 fb56 	bl	800ec84 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7fd ffc9 	bl	800c570 <pbuf_free>
        return;
 800e5de:	e1fd      	b.n	800e9dc <tcp_input+0x7ec>
        continue;
 800e5e0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	61bb      	str	r3, [r7, #24]
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1bc      	bne.n	800e568 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e5f2:	4b2f      	ldr	r3, [pc, #188]	@ (800e6b0 <tcp_input+0x4c0>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	617b      	str	r3, [r7, #20]
 800e5f8:	e02a      	b.n	800e650 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	7a1b      	ldrb	r3, [r3, #8]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00c      	beq.n	800e61c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	7a1a      	ldrb	r2, [r3, #8]
 800e606:	4b22      	ldr	r3, [pc, #136]	@ (800e690 <tcp_input+0x4a0>)
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e60e:	3301      	adds	r3, #1
 800e610:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e612:	429a      	cmp	r2, r3
 800e614:	d002      	beq.n	800e61c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	61fb      	str	r3, [r7, #28]
        continue;
 800e61a:	e016      	b.n	800e64a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	8ada      	ldrh	r2, [r3, #22]
 800e620:	4b1a      	ldr	r3, [pc, #104]	@ (800e68c <tcp_input+0x49c>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	885b      	ldrh	r3, [r3, #2]
 800e626:	b29b      	uxth	r3, r3
 800e628:	429a      	cmp	r2, r3
 800e62a:	d10c      	bne.n	800e646 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	4b17      	ldr	r3, [pc, #92]	@ (800e690 <tcp_input+0x4a0>)
 800e632:	695b      	ldr	r3, [r3, #20]
 800e634:	429a      	cmp	r2, r3
 800e636:	d00f      	beq.n	800e658 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00d      	beq.n	800e65a <tcp_input+0x46a>
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d009      	beq.n	800e65a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	617b      	str	r3, [r7, #20]
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1d1      	bne.n	800e5fa <tcp_input+0x40a>
 800e656:	e000      	b.n	800e65a <tcp_input+0x46a>
            break;
 800e658:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d029      	beq.n	800e6b4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00a      	beq.n	800e67c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	68da      	ldr	r2, [r3, #12]
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e66e:	4b10      	ldr	r3, [pc, #64]	@ (800e6b0 <tcp_input+0x4c0>)
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e676:	4a0e      	ldr	r2, [pc, #56]	@ (800e6b0 <tcp_input+0x4c0>)
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e67c:	6978      	ldr	r0, [r7, #20]
 800e67e:	f000 fa03 	bl	800ea88 <tcp_listen_input>
      }
      pbuf_free(p);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7fd ff74 	bl	800c570 <pbuf_free>
      return;
 800e688:	e1a8      	b.n	800e9dc <tcp_input+0x7ec>
 800e68a:	bf00      	nop
 800e68c:	20008388 	.word	0x20008388
 800e690:	20005400 	.word	0x20005400
 800e694:	08018424 	.word	0x08018424
 800e698:	08018550 	.word	0x08018550
 800e69c:	08018470 	.word	0x08018470
 800e6a0:	20008368 	.word	0x20008368
 800e6a4:	0801857c 	.word	0x0801857c
 800e6a8:	2000836c 	.word	0x2000836c
 800e6ac:	080185a8 	.word	0x080185a8
 800e6b0:	20008364 	.word	0x20008364
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f000 8158 	beq.w	800e96c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e6bc:	4b95      	ldr	r3, [pc, #596]	@ (800e914 <tcp_input+0x724>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	891a      	ldrh	r2, [r3, #8]
 800e6c6:	4b93      	ldr	r3, [pc, #588]	@ (800e914 <tcp_input+0x724>)
 800e6c8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e6ca:	4a92      	ldr	r2, [pc, #584]	@ (800e914 <tcp_input+0x724>)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e6d0:	4b91      	ldr	r3, [pc, #580]	@ (800e918 <tcp_input+0x728>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a8f      	ldr	r2, [pc, #572]	@ (800e914 <tcp_input+0x724>)
 800e6d6:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800e6d8:	4b90      	ldr	r3, [pc, #576]	@ (800e91c <tcp_input+0x72c>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e6de:	4b90      	ldr	r3, [pc, #576]	@ (800e920 <tcp_input+0x730>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e6e4:	4b8f      	ldr	r3, [pc, #572]	@ (800e924 <tcp_input+0x734>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e6ea:	4b8f      	ldr	r3, [pc, #572]	@ (800e928 <tcp_input+0x738>)
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	f003 0308 	and.w	r3, r3, #8
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d006      	beq.n	800e704 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	7b5b      	ldrb	r3, [r3, #13]
 800e6fa:	f043 0301 	orr.w	r3, r3, #1
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d017      	beq.n	800e73c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e70c:	69b8      	ldr	r0, [r7, #24]
 800e70e:	f7ff f923 	bl	800d958 <tcp_process_refused_data>
 800e712:	4603      	mov	r3, r0
 800e714:	f113 0f0d 	cmn.w	r3, #13
 800e718:	d007      	beq.n	800e72a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00c      	beq.n	800e73c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e722:	4b82      	ldr	r3, [pc, #520]	@ (800e92c <tcp_input+0x73c>)
 800e724:	881b      	ldrh	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d008      	beq.n	800e73c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f040 80e3 	bne.w	800e8fa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e734:	69b8      	ldr	r0, [r7, #24]
 800e736:	f003 f9bb 	bl	8011ab0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e73a:	e0de      	b.n	800e8fa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e73c:	4a7c      	ldr	r2, [pc, #496]	@ (800e930 <tcp_input+0x740>)
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e742:	69b8      	ldr	r0, [r7, #24]
 800e744:	f000 fb18 	bl	800ed78 <tcp_process>
 800e748:	4603      	mov	r3, r0
 800e74a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e74c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e750:	f113 0f0d 	cmn.w	r3, #13
 800e754:	f000 80d3 	beq.w	800e8fe <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e758:	4b71      	ldr	r3, [pc, #452]	@ (800e920 <tcp_input+0x730>)
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	f003 0308 	and.w	r3, r3, #8
 800e760:	2b00      	cmp	r3, #0
 800e762:	d015      	beq.n	800e790 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d008      	beq.n	800e780 <tcp_input+0x590>
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e774:	69ba      	ldr	r2, [r7, #24]
 800e776:	6912      	ldr	r2, [r2, #16]
 800e778:	f06f 010d 	mvn.w	r1, #13
 800e77c:	4610      	mov	r0, r2
 800e77e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e780:	69b9      	ldr	r1, [r7, #24]
 800e782:	486c      	ldr	r0, [pc, #432]	@ (800e934 <tcp_input+0x744>)
 800e784:	f7ff fbb6 	bl	800def4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e788:	69b8      	ldr	r0, [r7, #24]
 800e78a:	f7fe f9a1 	bl	800cad0 <tcp_free>
 800e78e:	e0da      	b.n	800e946 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e790:	2300      	movs	r3, #0
 800e792:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e794:	4b63      	ldr	r3, [pc, #396]	@ (800e924 <tcp_input+0x734>)
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d01d      	beq.n	800e7d8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e79c:	4b61      	ldr	r3, [pc, #388]	@ (800e924 <tcp_input+0x734>)
 800e79e:	881b      	ldrh	r3, [r3, #0]
 800e7a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00a      	beq.n	800e7c2 <tcp_input+0x5d2>
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7b2:	69ba      	ldr	r2, [r7, #24]
 800e7b4:	6910      	ldr	r0, [r2, #16]
 800e7b6:	89fa      	ldrh	r2, [r7, #14]
 800e7b8:	69b9      	ldr	r1, [r7, #24]
 800e7ba:	4798      	blx	r3
 800e7bc:	4603      	mov	r3, r0
 800e7be:	74fb      	strb	r3, [r7, #19]
 800e7c0:	e001      	b.n	800e7c6 <tcp_input+0x5d6>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e7c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7ca:	f113 0f0d 	cmn.w	r3, #13
 800e7ce:	f000 8098 	beq.w	800e902 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e7d2:	4b54      	ldr	r3, [pc, #336]	@ (800e924 <tcp_input+0x734>)
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e7d8:	69b8      	ldr	r0, [r7, #24]
 800e7da:	f000 f915 	bl	800ea08 <tcp_input_delayed_close>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f040 8090 	bne.w	800e906 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e7e6:	4b4d      	ldr	r3, [pc, #308]	@ (800e91c <tcp_input+0x72c>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d041      	beq.n	800e872 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d006      	beq.n	800e804 <tcp_input+0x614>
 800e7f6:	4b50      	ldr	r3, [pc, #320]	@ (800e938 <tcp_input+0x748>)
 800e7f8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e7fc:	494f      	ldr	r1, [pc, #316]	@ (800e93c <tcp_input+0x74c>)
 800e7fe:	4850      	ldr	r0, [pc, #320]	@ (800e940 <tcp_input+0x750>)
 800e800:	f007 fb94 	bl	8015f2c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	8b5b      	ldrh	r3, [r3, #26]
 800e808:	f003 0310 	and.w	r3, r3, #16
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d008      	beq.n	800e822 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e810:	4b42      	ldr	r3, [pc, #264]	@ (800e91c <tcp_input+0x72c>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4618      	mov	r0, r3
 800e816:	f7fd feab 	bl	800c570 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e81a:	69b8      	ldr	r0, [r7, #24]
 800e81c:	f7fe fc40 	bl	800d0a0 <tcp_abort>
            goto aborted;
 800e820:	e091      	b.n	800e946 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00c      	beq.n	800e846 <tcp_input+0x656>
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	6918      	ldr	r0, [r3, #16]
 800e836:	4b39      	ldr	r3, [pc, #228]	@ (800e91c <tcp_input+0x72c>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	2300      	movs	r3, #0
 800e83c:	69b9      	ldr	r1, [r7, #24]
 800e83e:	47a0      	blx	r4
 800e840:	4603      	mov	r3, r0
 800e842:	74fb      	strb	r3, [r7, #19]
 800e844:	e008      	b.n	800e858 <tcp_input+0x668>
 800e846:	4b35      	ldr	r3, [pc, #212]	@ (800e91c <tcp_input+0x72c>)
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	2300      	movs	r3, #0
 800e84c:	69b9      	ldr	r1, [r7, #24]
 800e84e:	2000      	movs	r0, #0
 800e850:	f7ff f958 	bl	800db04 <tcp_recv_null>
 800e854:	4603      	mov	r3, r0
 800e856:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e858:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e85c:	f113 0f0d 	cmn.w	r3, #13
 800e860:	d053      	beq.n	800e90a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e862:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d003      	beq.n	800e872 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e86a:	4b2c      	ldr	r3, [pc, #176]	@ (800e91c <tcp_input+0x72c>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e872:	4b2b      	ldr	r3, [pc, #172]	@ (800e920 <tcp_input+0x730>)
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	f003 0320 	and.w	r3, r3, #32
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d030      	beq.n	800e8e0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e882:	2b00      	cmp	r3, #0
 800e884:	d009      	beq.n	800e89a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e88a:	7b5a      	ldrb	r2, [r3, #13]
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e890:	f042 0220 	orr.w	r2, r2, #32
 800e894:	b2d2      	uxtb	r2, r2
 800e896:	735a      	strb	r2, [r3, #13]
 800e898:	e022      	b.n	800e8e0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e89e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e8a2:	d005      	beq.n	800e8b0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00b      	beq.n	800e8d2 <tcp_input+0x6e2>
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	6918      	ldr	r0, [r3, #16]
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	69b9      	ldr	r1, [r7, #24]
 800e8ca:	47a0      	blx	r4
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	74fb      	strb	r3, [r7, #19]
 800e8d0:	e001      	b.n	800e8d6 <tcp_input+0x6e6>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e8d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8da:	f113 0f0d 	cmn.w	r3, #13
 800e8de:	d016      	beq.n	800e90e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e8e0:	4b13      	ldr	r3, [pc, #76]	@ (800e930 <tcp_input+0x740>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e8e6:	69b8      	ldr	r0, [r7, #24]
 800e8e8:	f000 f88e 	bl	800ea08 <tcp_input_delayed_close>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d128      	bne.n	800e944 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e8f2:	69b8      	ldr	r0, [r7, #24]
 800e8f4:	f002 faca 	bl	8010e8c <tcp_output>
 800e8f8:	e025      	b.n	800e946 <tcp_input+0x756>
        goto aborted;
 800e8fa:	bf00      	nop
 800e8fc:	e023      	b.n	800e946 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e8fe:	bf00      	nop
 800e900:	e021      	b.n	800e946 <tcp_input+0x756>
              goto aborted;
 800e902:	bf00      	nop
 800e904:	e01f      	b.n	800e946 <tcp_input+0x756>
          goto aborted;
 800e906:	bf00      	nop
 800e908:	e01d      	b.n	800e946 <tcp_input+0x756>
            goto aborted;
 800e90a:	bf00      	nop
 800e90c:	e01b      	b.n	800e946 <tcp_input+0x756>
              goto aborted;
 800e90e:	bf00      	nop
 800e910:	e019      	b.n	800e946 <tcp_input+0x756>
 800e912:	bf00      	nop
 800e914:	20008374 	.word	0x20008374
 800e918:	20008388 	.word	0x20008388
 800e91c:	200083a8 	.word	0x200083a8
 800e920:	200083a5 	.word	0x200083a5
 800e924:	200083a0 	.word	0x200083a0
 800e928:	200083a4 	.word	0x200083a4
 800e92c:	200083a2 	.word	0x200083a2
 800e930:	200083ac 	.word	0x200083ac
 800e934:	20008368 	.word	0x20008368
 800e938:	08018424 	.word	0x08018424
 800e93c:	080185d8 	.word	0x080185d8
 800e940:	08018470 	.word	0x08018470
          goto aborted;
 800e944:	bf00      	nop
    tcp_input_pcb = NULL;
 800e946:	4b27      	ldr	r3, [pc, #156]	@ (800e9e4 <tcp_input+0x7f4>)
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e94c:	4b26      	ldr	r3, [pc, #152]	@ (800e9e8 <tcp_input+0x7f8>)
 800e94e:	2200      	movs	r2, #0
 800e950:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e952:	4b26      	ldr	r3, [pc, #152]	@ (800e9ec <tcp_input+0x7fc>)
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d03f      	beq.n	800e9da <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e95a:	4b24      	ldr	r3, [pc, #144]	@ (800e9ec <tcp_input+0x7fc>)
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fd fe06 	bl	800c570 <pbuf_free>
      inseg.p = NULL;
 800e964:	4b21      	ldr	r3, [pc, #132]	@ (800e9ec <tcp_input+0x7fc>)
 800e966:	2200      	movs	r2, #0
 800e968:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e96a:	e036      	b.n	800e9da <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e96c:	4b20      	ldr	r3, [pc, #128]	@ (800e9f0 <tcp_input+0x800>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	899b      	ldrh	r3, [r3, #12]
 800e972:	b29b      	uxth	r3, r3
 800e974:	4618      	mov	r0, r3
 800e976:	f7fc f9ab 	bl	800acd0 <lwip_htons>
 800e97a:	4603      	mov	r3, r0
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	f003 0304 	and.w	r3, r3, #4
 800e982:	2b00      	cmp	r3, #0
 800e984:	d118      	bne.n	800e9b8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e986:	4b1b      	ldr	r3, [pc, #108]	@ (800e9f4 <tcp_input+0x804>)
 800e988:	6819      	ldr	r1, [r3, #0]
 800e98a:	4b1b      	ldr	r3, [pc, #108]	@ (800e9f8 <tcp_input+0x808>)
 800e98c:	881b      	ldrh	r3, [r3, #0]
 800e98e:	461a      	mov	r2, r3
 800e990:	4b1a      	ldr	r3, [pc, #104]	@ (800e9fc <tcp_input+0x80c>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e996:	4b16      	ldr	r3, [pc, #88]	@ (800e9f0 <tcp_input+0x800>)
 800e998:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e99a:	885b      	ldrh	r3, [r3, #2]
 800e99c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e99e:	4a14      	ldr	r2, [pc, #80]	@ (800e9f0 <tcp_input+0x800>)
 800e9a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9a2:	8812      	ldrh	r2, [r2, #0]
 800e9a4:	b292      	uxth	r2, r2
 800e9a6:	9202      	str	r2, [sp, #8]
 800e9a8:	9301      	str	r3, [sp, #4]
 800e9aa:	4b15      	ldr	r3, [pc, #84]	@ (800ea00 <tcp_input+0x810>)
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	4b15      	ldr	r3, [pc, #84]	@ (800ea04 <tcp_input+0x814>)
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	f003 f82a 	bl	8011a0c <tcp_rst>
    pbuf_free(p);
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7fd fdd9 	bl	800c570 <pbuf_free>
  return;
 800e9be:	e00c      	b.n	800e9da <tcp_input+0x7ea>
    goto dropped;
 800e9c0:	bf00      	nop
 800e9c2:	e006      	b.n	800e9d2 <tcp_input+0x7e2>
    goto dropped;
 800e9c4:	bf00      	nop
 800e9c6:	e004      	b.n	800e9d2 <tcp_input+0x7e2>
    goto dropped;
 800e9c8:	bf00      	nop
 800e9ca:	e002      	b.n	800e9d2 <tcp_input+0x7e2>
      goto dropped;
 800e9cc:	bf00      	nop
 800e9ce:	e000      	b.n	800e9d2 <tcp_input+0x7e2>
      goto dropped;
 800e9d0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7fd fdcc 	bl	800c570 <pbuf_free>
 800e9d8:	e000      	b.n	800e9dc <tcp_input+0x7ec>
  return;
 800e9da:	bf00      	nop
}
 800e9dc:	3724      	adds	r7, #36	@ 0x24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd90      	pop	{r4, r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	200083ac 	.word	0x200083ac
 800e9e8:	200083a8 	.word	0x200083a8
 800e9ec:	20008374 	.word	0x20008374
 800e9f0:	20008388 	.word	0x20008388
 800e9f4:	2000839c 	.word	0x2000839c
 800e9f8:	200083a2 	.word	0x200083a2
 800e9fc:	20008398 	.word	0x20008398
 800ea00:	20005410 	.word	0x20005410
 800ea04:	20005414 	.word	0x20005414

0800ea08 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d106      	bne.n	800ea24 <tcp_input_delayed_close+0x1c>
 800ea16:	4b17      	ldr	r3, [pc, #92]	@ (800ea74 <tcp_input_delayed_close+0x6c>)
 800ea18:	f240 225a 	movw	r2, #602	@ 0x25a
 800ea1c:	4916      	ldr	r1, [pc, #88]	@ (800ea78 <tcp_input_delayed_close+0x70>)
 800ea1e:	4817      	ldr	r0, [pc, #92]	@ (800ea7c <tcp_input_delayed_close+0x74>)
 800ea20:	f007 fa84 	bl	8015f2c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ea24:	4b16      	ldr	r3, [pc, #88]	@ (800ea80 <tcp_input_delayed_close+0x78>)
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	f003 0310 	and.w	r3, r3, #16
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d01c      	beq.n	800ea6a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	8b5b      	ldrh	r3, [r3, #26]
 800ea34:	f003 0310 	and.w	r3, r3, #16
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d10d      	bne.n	800ea58 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d008      	beq.n	800ea58 <tcp_input_delayed_close+0x50>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	6912      	ldr	r2, [r2, #16]
 800ea50:	f06f 010e 	mvn.w	r1, #14
 800ea54:	4610      	mov	r0, r2
 800ea56:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	480a      	ldr	r0, [pc, #40]	@ (800ea84 <tcp_input_delayed_close+0x7c>)
 800ea5c:	f7ff fa4a 	bl	800def4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7fe f835 	bl	800cad0 <tcp_free>
    return 1;
 800ea66:	2301      	movs	r3, #1
 800ea68:	e000      	b.n	800ea6c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	08018424 	.word	0x08018424
 800ea78:	080185f4 	.word	0x080185f4
 800ea7c:	08018470 	.word	0x08018470
 800ea80:	200083a5 	.word	0x200083a5
 800ea84:	20008368 	.word	0x20008368

0800ea88 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b08b      	sub	sp, #44	@ 0x2c
 800ea8c:	af04      	add	r7, sp, #16
 800ea8e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ea90:	4b6f      	ldr	r3, [pc, #444]	@ (800ec50 <tcp_listen_input+0x1c8>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f003 0304 	and.w	r3, r3, #4
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f040 80d2 	bne.w	800ec42 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d106      	bne.n	800eab2 <tcp_listen_input+0x2a>
 800eaa4:	4b6b      	ldr	r3, [pc, #428]	@ (800ec54 <tcp_listen_input+0x1cc>)
 800eaa6:	f240 2281 	movw	r2, #641	@ 0x281
 800eaaa:	496b      	ldr	r1, [pc, #428]	@ (800ec58 <tcp_listen_input+0x1d0>)
 800eaac:	486b      	ldr	r0, [pc, #428]	@ (800ec5c <tcp_listen_input+0x1d4>)
 800eaae:	f007 fa3d 	bl	8015f2c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eab2:	4b67      	ldr	r3, [pc, #412]	@ (800ec50 <tcp_listen_input+0x1c8>)
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	f003 0310 	and.w	r3, r3, #16
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d019      	beq.n	800eaf2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eabe:	4b68      	ldr	r3, [pc, #416]	@ (800ec60 <tcp_listen_input+0x1d8>)
 800eac0:	6819      	ldr	r1, [r3, #0]
 800eac2:	4b68      	ldr	r3, [pc, #416]	@ (800ec64 <tcp_listen_input+0x1dc>)
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	461a      	mov	r2, r3
 800eac8:	4b67      	ldr	r3, [pc, #412]	@ (800ec68 <tcp_listen_input+0x1e0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eace:	4b67      	ldr	r3, [pc, #412]	@ (800ec6c <tcp_listen_input+0x1e4>)
 800ead0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ead2:	885b      	ldrh	r3, [r3, #2]
 800ead4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ead6:	4a65      	ldr	r2, [pc, #404]	@ (800ec6c <tcp_listen_input+0x1e4>)
 800ead8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eada:	8812      	ldrh	r2, [r2, #0]
 800eadc:	b292      	uxth	r2, r2
 800eade:	9202      	str	r2, [sp, #8]
 800eae0:	9301      	str	r3, [sp, #4]
 800eae2:	4b63      	ldr	r3, [pc, #396]	@ (800ec70 <tcp_listen_input+0x1e8>)
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	4b63      	ldr	r3, [pc, #396]	@ (800ec74 <tcp_listen_input+0x1ec>)
 800eae8:	4602      	mov	r2, r0
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f002 ff8e 	bl	8011a0c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eaf0:	e0a9      	b.n	800ec46 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800eaf2:	4b57      	ldr	r3, [pc, #348]	@ (800ec50 <tcp_listen_input+0x1c8>)
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	f003 0302 	and.w	r3, r3, #2
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 80a3 	beq.w	800ec46 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7d5b      	ldrb	r3, [r3, #21]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff f921 	bl	800dd4c <tcp_alloc>
 800eb0a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d111      	bne.n	800eb36 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	699b      	ldr	r3, [r3, #24]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00a      	beq.n	800eb30 <tcp_listen_input+0xa8>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	699b      	ldr	r3, [r3, #24]
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	6910      	ldr	r0, [r2, #16]
 800eb22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb26:	2100      	movs	r1, #0
 800eb28:	4798      	blx	r3
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	73bb      	strb	r3, [r7, #14]
      return;
 800eb2e:	e08b      	b.n	800ec48 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eb30:	23f0      	movs	r3, #240	@ 0xf0
 800eb32:	73bb      	strb	r3, [r7, #14]
      return;
 800eb34:	e088      	b.n	800ec48 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800eb36:	4b50      	ldr	r3, [pc, #320]	@ (800ec78 <tcp_listen_input+0x1f0>)
 800eb38:	695a      	ldr	r2, [r3, #20]
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800eb3e:	4b4e      	ldr	r3, [pc, #312]	@ (800ec78 <tcp_listen_input+0x1f0>)
 800eb40:	691a      	ldr	r2, [r3, #16]
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	8ada      	ldrh	r2, [r3, #22]
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800eb4e:	4b47      	ldr	r3, [pc, #284]	@ (800ec6c <tcp_listen_input+0x1e4>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	881b      	ldrh	r3, [r3, #0]
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	2203      	movs	r2, #3
 800eb5e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800eb60:	4b41      	ldr	r3, [pc, #260]	@ (800ec68 <tcp_listen_input+0x1e0>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	1c5a      	adds	r2, r3, #1
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800eb72:	6978      	ldr	r0, [r7, #20]
 800eb74:	f7ff fa52 	bl	800e01c <tcp_next_iss>
 800eb78:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	693a      	ldr	r2, [r7, #16]
 800eb7e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	693a      	ldr	r2, [r7, #16]
 800eb84:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	693a      	ldr	r2, [r7, #16]
 800eb8a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800eb92:	4b35      	ldr	r3, [pc, #212]	@ (800ec68 <tcp_listen_input+0x1e0>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	1e5a      	subs	r2, r3, #1
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	691a      	ldr	r2, [r3, #16]
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	7a5b      	ldrb	r3, [r3, #9]
 800ebae:	f003 030c 	and.w	r3, r3, #12
 800ebb2:	b2da      	uxtb	r2, r3
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	7a1a      	ldrb	r2, [r3, #8]
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ebc0:	4b2e      	ldr	r3, [pc, #184]	@ (800ec7c <tcp_listen_input+0x1f4>)
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	60da      	str	r2, [r3, #12]
 800ebc8:	4a2c      	ldr	r2, [pc, #176]	@ (800ec7c <tcp_listen_input+0x1f4>)
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	6013      	str	r3, [r2, #0]
 800ebce:	f003 f8df 	bl	8011d90 <tcp_timer_needed>
 800ebd2:	4b2b      	ldr	r3, [pc, #172]	@ (800ec80 <tcp_listen_input+0x1f8>)
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ebd8:	6978      	ldr	r0, [r7, #20]
 800ebda:	f001 fd8b 	bl	80106f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ebde:	4b23      	ldr	r3, [pc, #140]	@ (800ec6c <tcp_listen_input+0x1e4>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	89db      	ldrh	r3, [r3, #14]
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	3304      	adds	r3, #4
 800ec00:	4618      	mov	r0, r3
 800ec02:	f005 fa23 	bl	801404c <ip4_route>
 800ec06:	4601      	mov	r1, r0
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f7ff fa2a 	bl	800e068 <tcp_eff_send_mss_netif>
 800ec14:	4603      	mov	r3, r0
 800ec16:	461a      	mov	r2, r3
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ec1c:	2112      	movs	r1, #18
 800ec1e:	6978      	ldr	r0, [r7, #20]
 800ec20:	f002 f846 	bl	8010cb0 <tcp_enqueue_flags>
 800ec24:	4603      	mov	r3, r0
 800ec26:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ec28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d004      	beq.n	800ec3a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ec30:	2100      	movs	r1, #0
 800ec32:	6978      	ldr	r0, [r7, #20]
 800ec34:	f7fe f976 	bl	800cf24 <tcp_abandon>
      return;
 800ec38:	e006      	b.n	800ec48 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ec3a:	6978      	ldr	r0, [r7, #20]
 800ec3c:	f002 f926 	bl	8010e8c <tcp_output>
  return;
 800ec40:	e001      	b.n	800ec46 <tcp_listen_input+0x1be>
    return;
 800ec42:	bf00      	nop
 800ec44:	e000      	b.n	800ec48 <tcp_listen_input+0x1c0>
  return;
 800ec46:	bf00      	nop
}
 800ec48:	371c      	adds	r7, #28
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd90      	pop	{r4, r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	200083a4 	.word	0x200083a4
 800ec54:	08018424 	.word	0x08018424
 800ec58:	0801861c 	.word	0x0801861c
 800ec5c:	08018470 	.word	0x08018470
 800ec60:	2000839c 	.word	0x2000839c
 800ec64:	200083a2 	.word	0x200083a2
 800ec68:	20008398 	.word	0x20008398
 800ec6c:	20008388 	.word	0x20008388
 800ec70:	20005410 	.word	0x20005410
 800ec74:	20005414 	.word	0x20005414
 800ec78:	20005400 	.word	0x20005400
 800ec7c:	20008368 	.word	0x20008368
 800ec80:	20008370 	.word	0x20008370

0800ec84 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af04      	add	r7, sp, #16
 800ec8a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ec8c:	4b2f      	ldr	r3, [pc, #188]	@ (800ed4c <tcp_timewait_input+0xc8>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	f003 0304 	and.w	r3, r3, #4
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d153      	bne.n	800ed40 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d106      	bne.n	800ecac <tcp_timewait_input+0x28>
 800ec9e:	4b2c      	ldr	r3, [pc, #176]	@ (800ed50 <tcp_timewait_input+0xcc>)
 800eca0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800eca4:	492b      	ldr	r1, [pc, #172]	@ (800ed54 <tcp_timewait_input+0xd0>)
 800eca6:	482c      	ldr	r0, [pc, #176]	@ (800ed58 <tcp_timewait_input+0xd4>)
 800eca8:	f007 f940 	bl	8015f2c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ecac:	4b27      	ldr	r3, [pc, #156]	@ (800ed4c <tcp_timewait_input+0xc8>)
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	f003 0302 	and.w	r3, r3, #2
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d02a      	beq.n	800ed0e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ecb8:	4b28      	ldr	r3, [pc, #160]	@ (800ed5c <tcp_timewait_input+0xd8>)
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	db2d      	blt.n	800ed22 <tcp_timewait_input+0x9e>
 800ecc6:	4b25      	ldr	r3, [pc, #148]	@ (800ed5c <tcp_timewait_input+0xd8>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecce:	6879      	ldr	r1, [r7, #4]
 800ecd0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ecd2:	440b      	add	r3, r1
 800ecd4:	1ad3      	subs	r3, r2, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	dc23      	bgt.n	800ed22 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecda:	4b21      	ldr	r3, [pc, #132]	@ (800ed60 <tcp_timewait_input+0xdc>)
 800ecdc:	6819      	ldr	r1, [r3, #0]
 800ecde:	4b21      	ldr	r3, [pc, #132]	@ (800ed64 <tcp_timewait_input+0xe0>)
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	461a      	mov	r2, r3
 800ece4:	4b1d      	ldr	r3, [pc, #116]	@ (800ed5c <tcp_timewait_input+0xd8>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecea:	4b1f      	ldr	r3, [pc, #124]	@ (800ed68 <tcp_timewait_input+0xe4>)
 800ecec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecee:	885b      	ldrh	r3, [r3, #2]
 800ecf0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecf2:	4a1d      	ldr	r2, [pc, #116]	@ (800ed68 <tcp_timewait_input+0xe4>)
 800ecf4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecf6:	8812      	ldrh	r2, [r2, #0]
 800ecf8:	b292      	uxth	r2, r2
 800ecfa:	9202      	str	r2, [sp, #8]
 800ecfc:	9301      	str	r3, [sp, #4]
 800ecfe:	4b1b      	ldr	r3, [pc, #108]	@ (800ed6c <tcp_timewait_input+0xe8>)
 800ed00:	9300      	str	r3, [sp, #0]
 800ed02:	4b1b      	ldr	r3, [pc, #108]	@ (800ed70 <tcp_timewait_input+0xec>)
 800ed04:	4602      	mov	r2, r0
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f002 fe80 	bl	8011a0c <tcp_rst>
      return;
 800ed0c:	e01b      	b.n	800ed46 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ed0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ed4c <tcp_timewait_input+0xc8>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	f003 0301 	and.w	r3, r3, #1
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d003      	beq.n	800ed22 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ed1a:	4b16      	ldr	r3, [pc, #88]	@ (800ed74 <tcp_timewait_input+0xf0>)
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ed22:	4b10      	ldr	r3, [pc, #64]	@ (800ed64 <tcp_timewait_input+0xe0>)
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00c      	beq.n	800ed44 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	8b5b      	ldrh	r3, [r3, #26]
 800ed2e:	f043 0302 	orr.w	r3, r3, #2
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f002 f8a7 	bl	8010e8c <tcp_output>
  }
  return;
 800ed3e:	e001      	b.n	800ed44 <tcp_timewait_input+0xc0>
    return;
 800ed40:	bf00      	nop
 800ed42:	e000      	b.n	800ed46 <tcp_timewait_input+0xc2>
  return;
 800ed44:	bf00      	nop
}
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	200083a4 	.word	0x200083a4
 800ed50:	08018424 	.word	0x08018424
 800ed54:	0801863c 	.word	0x0801863c
 800ed58:	08018470 	.word	0x08018470
 800ed5c:	20008398 	.word	0x20008398
 800ed60:	2000839c 	.word	0x2000839c
 800ed64:	200083a2 	.word	0x200083a2
 800ed68:	20008388 	.word	0x20008388
 800ed6c:	20005410 	.word	0x20005410
 800ed70:	20005414 	.word	0x20005414
 800ed74:	2000835c 	.word	0x2000835c

0800ed78 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ed78:	b590      	push	{r4, r7, lr}
 800ed7a:	b08d      	sub	sp, #52	@ 0x34
 800ed7c:	af04      	add	r7, sp, #16
 800ed7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d106      	bne.n	800ed9c <tcp_process+0x24>
 800ed8e:	4b9d      	ldr	r3, [pc, #628]	@ (800f004 <tcp_process+0x28c>)
 800ed90:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ed94:	499c      	ldr	r1, [pc, #624]	@ (800f008 <tcp_process+0x290>)
 800ed96:	489d      	ldr	r0, [pc, #628]	@ (800f00c <tcp_process+0x294>)
 800ed98:	f007 f8c8 	bl	8015f2c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ed9c:	4b9c      	ldr	r3, [pc, #624]	@ (800f010 <tcp_process+0x298>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	f003 0304 	and.w	r3, r3, #4
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d04e      	beq.n	800ee46 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7d1b      	ldrb	r3, [r3, #20]
 800edac:	2b02      	cmp	r3, #2
 800edae:	d108      	bne.n	800edc2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edb4:	4b97      	ldr	r3, [pc, #604]	@ (800f014 <tcp_process+0x29c>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d123      	bne.n	800ee04 <tcp_process+0x8c>
        acceptable = 1;
 800edbc:	2301      	movs	r3, #1
 800edbe:	77fb      	strb	r3, [r7, #31]
 800edc0:	e020      	b.n	800ee04 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800edc6:	4b94      	ldr	r3, [pc, #592]	@ (800f018 <tcp_process+0x2a0>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d102      	bne.n	800edd4 <tcp_process+0x5c>
        acceptable = 1;
 800edce:	2301      	movs	r3, #1
 800edd0:	77fb      	strb	r3, [r7, #31]
 800edd2:	e017      	b.n	800ee04 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800edd4:	4b90      	ldr	r3, [pc, #576]	@ (800f018 <tcp_process+0x2a0>)
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eddc:	1ad3      	subs	r3, r2, r3
 800edde:	2b00      	cmp	r3, #0
 800ede0:	db10      	blt.n	800ee04 <tcp_process+0x8c>
 800ede2:	4b8d      	ldr	r3, [pc, #564]	@ (800f018 <tcp_process+0x2a0>)
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edea:	6879      	ldr	r1, [r7, #4]
 800edec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800edee:	440b      	add	r3, r1
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	dc06      	bgt.n	800ee04 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	8b5b      	ldrh	r3, [r3, #26]
 800edfa:	f043 0302 	orr.w	r3, r3, #2
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ee04:	7ffb      	ldrb	r3, [r7, #31]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d01b      	beq.n	800ee42 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	7d1b      	ldrb	r3, [r3, #20]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d106      	bne.n	800ee20 <tcp_process+0xa8>
 800ee12:	4b7c      	ldr	r3, [pc, #496]	@ (800f004 <tcp_process+0x28c>)
 800ee14:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ee18:	4980      	ldr	r1, [pc, #512]	@ (800f01c <tcp_process+0x2a4>)
 800ee1a:	487c      	ldr	r0, [pc, #496]	@ (800f00c <tcp_process+0x294>)
 800ee1c:	f007 f886 	bl	8015f2c <iprintf>
      recv_flags |= TF_RESET;
 800ee20:	4b7f      	ldr	r3, [pc, #508]	@ (800f020 <tcp_process+0x2a8>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	f043 0308 	orr.w	r3, r3, #8
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	4b7d      	ldr	r3, [pc, #500]	@ (800f020 <tcp_process+0x2a8>)
 800ee2c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	8b5b      	ldrh	r3, [r3, #26]
 800ee32:	f023 0301 	bic.w	r3, r3, #1
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ee3c:	f06f 030d 	mvn.w	r3, #13
 800ee40:	e37a      	b.n	800f538 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ee42:	2300      	movs	r3, #0
 800ee44:	e378      	b.n	800f538 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ee46:	4b72      	ldr	r3, [pc, #456]	@ (800f010 <tcp_process+0x298>)
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	f003 0302 	and.w	r3, r3, #2
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d010      	beq.n	800ee74 <tcp_process+0xfc>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	7d1b      	ldrb	r3, [r3, #20]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d00c      	beq.n	800ee74 <tcp_process+0xfc>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	7d1b      	ldrb	r3, [r3, #20]
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d008      	beq.n	800ee74 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	8b5b      	ldrh	r3, [r3, #26]
 800ee66:	f043 0302 	orr.w	r3, r3, #2
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ee70:	2300      	movs	r3, #0
 800ee72:	e361      	b.n	800f538 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	8b5b      	ldrh	r3, [r3, #26]
 800ee78:	f003 0310 	and.w	r3, r3, #16
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d103      	bne.n	800ee88 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ee80:	4b68      	ldr	r3, [pc, #416]	@ (800f024 <tcp_process+0x2ac>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f001 fc2b 	bl	80106f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	7d1b      	ldrb	r3, [r3, #20]
 800eea2:	3b02      	subs	r3, #2
 800eea4:	2b07      	cmp	r3, #7
 800eea6:	f200 8337 	bhi.w	800f518 <tcp_process+0x7a0>
 800eeaa:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb0 <tcp_process+0x138>)
 800eeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb0:	0800eed1 	.word	0x0800eed1
 800eeb4:	0800f101 	.word	0x0800f101
 800eeb8:	0800f279 	.word	0x0800f279
 800eebc:	0800f2a3 	.word	0x0800f2a3
 800eec0:	0800f3c7 	.word	0x0800f3c7
 800eec4:	0800f279 	.word	0x0800f279
 800eec8:	0800f453 	.word	0x0800f453
 800eecc:	0800f4e3 	.word	0x0800f4e3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800eed0:	4b4f      	ldr	r3, [pc, #316]	@ (800f010 <tcp_process+0x298>)
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	f003 0310 	and.w	r3, r3, #16
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f000 80e4 	beq.w	800f0a6 <tcp_process+0x32e>
 800eede:	4b4c      	ldr	r3, [pc, #304]	@ (800f010 <tcp_process+0x298>)
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	f003 0302 	and.w	r3, r3, #2
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 80dd 	beq.w	800f0a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eef0:	1c5a      	adds	r2, r3, #1
 800eef2:	4b48      	ldr	r3, [pc, #288]	@ (800f014 <tcp_process+0x29c>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	f040 80d5 	bne.w	800f0a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eefc:	4b46      	ldr	r3, [pc, #280]	@ (800f018 <tcp_process+0x2a0>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	1c5a      	adds	r2, r3, #1
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ef0e:	4b41      	ldr	r3, [pc, #260]	@ (800f014 <tcp_process+0x29c>)
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ef16:	4b44      	ldr	r3, [pc, #272]	@ (800f028 <tcp_process+0x2b0>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	89db      	ldrh	r3, [r3, #14]
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ef30:	4b39      	ldr	r3, [pc, #228]	@ (800f018 <tcp_process+0x2a0>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	1e5a      	subs	r2, r3, #1
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2204      	movs	r2, #4
 800ef3e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3304      	adds	r3, #4
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f005 f87f 	bl	801404c <ip4_route>
 800ef4e:	4601      	mov	r1, r0
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3304      	adds	r3, #4
 800ef54:	461a      	mov	r2, r3
 800ef56:	4620      	mov	r0, r4
 800ef58:	f7ff f886 	bl	800e068 <tcp_eff_send_mss_netif>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	461a      	mov	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef68:	009a      	lsls	r2, r3, #2
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef6e:	005b      	lsls	r3, r3, #1
 800ef70:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ef74:	428b      	cmp	r3, r1
 800ef76:	bf38      	it	cc
 800ef78:	460b      	movcc	r3, r1
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d204      	bcs.n	800ef88 <tcp_process+0x210>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	e00d      	b.n	800efa4 <tcp_process+0x22c>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d904      	bls.n	800efa0 <tcp_process+0x228>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef9a:	005b      	lsls	r3, r3, #1
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	e001      	b.n	800efa4 <tcp_process+0x22c>
 800efa0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d106      	bne.n	800efc2 <tcp_process+0x24a>
 800efb4:	4b13      	ldr	r3, [pc, #76]	@ (800f004 <tcp_process+0x28c>)
 800efb6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800efba:	491c      	ldr	r1, [pc, #112]	@ (800f02c <tcp_process+0x2b4>)
 800efbc:	4813      	ldr	r0, [pc, #76]	@ (800f00c <tcp_process+0x294>)
 800efbe:	f006 ffb5 	bl	8015f2c <iprintf>
        --pcb->snd_queuelen;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800efc8:	3b01      	subs	r3, #1
 800efca:	b29a      	uxth	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efd6:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d12a      	bne.n	800f034 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efe2:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d106      	bne.n	800eff8 <tcp_process+0x280>
 800efea:	4b06      	ldr	r3, [pc, #24]	@ (800f004 <tcp_process+0x28c>)
 800efec:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800eff0:	490f      	ldr	r1, [pc, #60]	@ (800f030 <tcp_process+0x2b8>)
 800eff2:	4806      	ldr	r0, [pc, #24]	@ (800f00c <tcp_process+0x294>)
 800eff4:	f006 ff9a 	bl	8015f2c <iprintf>
          pcb->unsent = rseg->next;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f000:	e01c      	b.n	800f03c <tcp_process+0x2c4>
 800f002:	bf00      	nop
 800f004:	08018424 	.word	0x08018424
 800f008:	0801865c 	.word	0x0801865c
 800f00c:	08018470 	.word	0x08018470
 800f010:	200083a4 	.word	0x200083a4
 800f014:	2000839c 	.word	0x2000839c
 800f018:	20008398 	.word	0x20008398
 800f01c:	08018678 	.word	0x08018678
 800f020:	200083a5 	.word	0x200083a5
 800f024:	2000835c 	.word	0x2000835c
 800f028:	20008388 	.word	0x20008388
 800f02c:	08018698 	.word	0x08018698
 800f030:	080186b0 	.word	0x080186b0
        } else {
          pcb->unacked = rseg->next;
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800f03c:	6978      	ldr	r0, [r7, #20]
 800f03e:	f7fe fd1c 	bl	800da7a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f046:	2b00      	cmp	r3, #0
 800f048:	d104      	bne.n	800f054 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f050:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f052:	e006      	b.n	800f062 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00a      	beq.n	800f082 <tcp_process+0x30a>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f072:	687a      	ldr	r2, [r7, #4]
 800f074:	6910      	ldr	r0, [r2, #16]
 800f076:	2200      	movs	r2, #0
 800f078:	6879      	ldr	r1, [r7, #4]
 800f07a:	4798      	blx	r3
 800f07c:	4603      	mov	r3, r0
 800f07e:	77bb      	strb	r3, [r7, #30]
 800f080:	e001      	b.n	800f086 <tcp_process+0x30e>
 800f082:	2300      	movs	r3, #0
 800f084:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800f086:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f08a:	f113 0f0d 	cmn.w	r3, #13
 800f08e:	d102      	bne.n	800f096 <tcp_process+0x31e>
          return ERR_ABRT;
 800f090:	f06f 030c 	mvn.w	r3, #12
 800f094:	e250      	b.n	800f538 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	8b5b      	ldrh	r3, [r3, #26]
 800f09a:	f043 0302 	orr.w	r3, r3, #2
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f0a4:	e23a      	b.n	800f51c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f0a6:	4b98      	ldr	r3, [pc, #608]	@ (800f308 <tcp_process+0x590>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	f003 0310 	and.w	r3, r3, #16
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 8234 	beq.w	800f51c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0b4:	4b95      	ldr	r3, [pc, #596]	@ (800f30c <tcp_process+0x594>)
 800f0b6:	6819      	ldr	r1, [r3, #0]
 800f0b8:	4b95      	ldr	r3, [pc, #596]	@ (800f310 <tcp_process+0x598>)
 800f0ba:	881b      	ldrh	r3, [r3, #0]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	4b95      	ldr	r3, [pc, #596]	@ (800f314 <tcp_process+0x59c>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0c4:	4b94      	ldr	r3, [pc, #592]	@ (800f318 <tcp_process+0x5a0>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0c8:	885b      	ldrh	r3, [r3, #2]
 800f0ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0cc:	4a92      	ldr	r2, [pc, #584]	@ (800f318 <tcp_process+0x5a0>)
 800f0ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0d0:	8812      	ldrh	r2, [r2, #0]
 800f0d2:	b292      	uxth	r2, r2
 800f0d4:	9202      	str	r2, [sp, #8]
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	4b90      	ldr	r3, [pc, #576]	@ (800f31c <tcp_process+0x5a4>)
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	4b90      	ldr	r3, [pc, #576]	@ (800f320 <tcp_process+0x5a8>)
 800f0de:	4602      	mov	r2, r0
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f002 fc93 	bl	8011a0c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f0ec:	2b05      	cmp	r3, #5
 800f0ee:	f200 8215 	bhi.w	800f51c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f002 fa5f 	bl	80115bc <tcp_rexmit_rto>
      break;
 800f0fe:	e20d      	b.n	800f51c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f100:	4b81      	ldr	r3, [pc, #516]	@ (800f308 <tcp_process+0x590>)
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	f003 0310 	and.w	r3, r3, #16
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f000 80a1 	beq.w	800f250 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f10e:	4b7f      	ldr	r3, [pc, #508]	@ (800f30c <tcp_process+0x594>)
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	3b01      	subs	r3, #1
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	db7e      	blt.n	800f21c <tcp_process+0x4a4>
 800f11e:	4b7b      	ldr	r3, [pc, #492]	@ (800f30c <tcp_process+0x594>)
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f126:	1ad3      	subs	r3, r2, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	dc77      	bgt.n	800f21c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2204      	movs	r2, #4
 800f130:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f136:	2b00      	cmp	r3, #0
 800f138:	d102      	bne.n	800f140 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f13a:	23fa      	movs	r3, #250	@ 0xfa
 800f13c:	77bb      	strb	r3, [r7, #30]
 800f13e:	e01d      	b.n	800f17c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d106      	bne.n	800f158 <tcp_process+0x3e0>
 800f14a:	4b76      	ldr	r3, [pc, #472]	@ (800f324 <tcp_process+0x5ac>)
 800f14c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f150:	4975      	ldr	r1, [pc, #468]	@ (800f328 <tcp_process+0x5b0>)
 800f152:	4876      	ldr	r0, [pc, #472]	@ (800f32c <tcp_process+0x5b4>)
 800f154:	f006 feea 	bl	8015f2c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f15c:	699b      	ldr	r3, [r3, #24]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00a      	beq.n	800f178 <tcp_process+0x400>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f166:	699b      	ldr	r3, [r3, #24]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	6910      	ldr	r0, [r2, #16]
 800f16c:	2200      	movs	r2, #0
 800f16e:	6879      	ldr	r1, [r7, #4]
 800f170:	4798      	blx	r3
 800f172:	4603      	mov	r3, r0
 800f174:	77bb      	strb	r3, [r7, #30]
 800f176:	e001      	b.n	800f17c <tcp_process+0x404>
 800f178:	23f0      	movs	r3, #240	@ 0xf0
 800f17a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800f17c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00a      	beq.n	800f19a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f184:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f188:	f113 0f0d 	cmn.w	r3, #13
 800f18c:	d002      	beq.n	800f194 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7fd ff86 	bl	800d0a0 <tcp_abort>
            }
            return ERR_ABRT;
 800f194:	f06f 030c 	mvn.w	r3, #12
 800f198:	e1ce      	b.n	800f538 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fae0 	bl	800f760 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f1a0:	4b63      	ldr	r3, [pc, #396]	@ (800f330 <tcp_process+0x5b8>)
 800f1a2:	881b      	ldrh	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d005      	beq.n	800f1b4 <tcp_process+0x43c>
            recv_acked--;
 800f1a8:	4b61      	ldr	r3, [pc, #388]	@ (800f330 <tcp_process+0x5b8>)
 800f1aa:	881b      	ldrh	r3, [r3, #0]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	4b5f      	ldr	r3, [pc, #380]	@ (800f330 <tcp_process+0x5b8>)
 800f1b2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1b8:	009a      	lsls	r2, r3, #2
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1be:	005b      	lsls	r3, r3, #1
 800f1c0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f1c4:	428b      	cmp	r3, r1
 800f1c6:	bf38      	it	cc
 800f1c8:	460b      	movcc	r3, r1
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d204      	bcs.n	800f1d8 <tcp_process+0x460>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	e00d      	b.n	800f1f4 <tcp_process+0x47c>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d904      	bls.n	800f1f0 <tcp_process+0x478>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1ea:	005b      	lsls	r3, r3, #1
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	e001      	b.n	800f1f4 <tcp_process+0x47c>
 800f1f0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f1fa:	4b4e      	ldr	r3, [pc, #312]	@ (800f334 <tcp_process+0x5bc>)
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	f003 0320 	and.w	r3, r3, #32
 800f202:	2b00      	cmp	r3, #0
 800f204:	d037      	beq.n	800f276 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	8b5b      	ldrh	r3, [r3, #26]
 800f20a:	f043 0302 	orr.w	r3, r3, #2
 800f20e:	b29a      	uxth	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2207      	movs	r2, #7
 800f218:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f21a:	e02c      	b.n	800f276 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f21c:	4b3b      	ldr	r3, [pc, #236]	@ (800f30c <tcp_process+0x594>)
 800f21e:	6819      	ldr	r1, [r3, #0]
 800f220:	4b3b      	ldr	r3, [pc, #236]	@ (800f310 <tcp_process+0x598>)
 800f222:	881b      	ldrh	r3, [r3, #0]
 800f224:	461a      	mov	r2, r3
 800f226:	4b3b      	ldr	r3, [pc, #236]	@ (800f314 <tcp_process+0x59c>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f22c:	4b3a      	ldr	r3, [pc, #232]	@ (800f318 <tcp_process+0x5a0>)
 800f22e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f230:	885b      	ldrh	r3, [r3, #2]
 800f232:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f234:	4a38      	ldr	r2, [pc, #224]	@ (800f318 <tcp_process+0x5a0>)
 800f236:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f238:	8812      	ldrh	r2, [r2, #0]
 800f23a:	b292      	uxth	r2, r2
 800f23c:	9202      	str	r2, [sp, #8]
 800f23e:	9301      	str	r3, [sp, #4]
 800f240:	4b36      	ldr	r3, [pc, #216]	@ (800f31c <tcp_process+0x5a4>)
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	4b36      	ldr	r3, [pc, #216]	@ (800f320 <tcp_process+0x5a8>)
 800f246:	4602      	mov	r2, r0
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f002 fbdf 	bl	8011a0c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f24e:	e167      	b.n	800f520 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f250:	4b2d      	ldr	r3, [pc, #180]	@ (800f308 <tcp_process+0x590>)
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	f003 0302 	and.w	r3, r3, #2
 800f258:	2b00      	cmp	r3, #0
 800f25a:	f000 8161 	beq.w	800f520 <tcp_process+0x7a8>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f262:	1e5a      	subs	r2, r3, #1
 800f264:	4b2b      	ldr	r3, [pc, #172]	@ (800f314 <tcp_process+0x59c>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	429a      	cmp	r2, r3
 800f26a:	f040 8159 	bne.w	800f520 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f002 f9c6 	bl	8011600 <tcp_rexmit>
      break;
 800f274:	e154      	b.n	800f520 <tcp_process+0x7a8>
 800f276:	e153      	b.n	800f520 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fa71 	bl	800f760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f27e:	4b2d      	ldr	r3, [pc, #180]	@ (800f334 <tcp_process+0x5bc>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	f003 0320 	and.w	r3, r3, #32
 800f286:	2b00      	cmp	r3, #0
 800f288:	f000 814c 	beq.w	800f524 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	8b5b      	ldrh	r3, [r3, #26]
 800f290:	f043 0302 	orr.w	r3, r3, #2
 800f294:	b29a      	uxth	r2, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2207      	movs	r2, #7
 800f29e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f2a0:	e140      	b.n	800f524 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fa5c 	bl	800f760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f2a8:	4b22      	ldr	r3, [pc, #136]	@ (800f334 <tcp_process+0x5bc>)
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	f003 0320 	and.w	r3, r3, #32
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d071      	beq.n	800f398 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f2b4:	4b14      	ldr	r3, [pc, #80]	@ (800f308 <tcp_process+0x590>)
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	f003 0310 	and.w	r3, r3, #16
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d060      	beq.n	800f382 <tcp_process+0x60a>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f2c4:	4b11      	ldr	r3, [pc, #68]	@ (800f30c <tcp_process+0x594>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d15a      	bne.n	800f382 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d156      	bne.n	800f382 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	8b5b      	ldrh	r3, [r3, #26]
 800f2d8:	f043 0302 	orr.w	r3, r3, #2
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7fe fdb6 	bl	800de54 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f2e8:	4b13      	ldr	r3, [pc, #76]	@ (800f338 <tcp_process+0x5c0>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d105      	bne.n	800f2fe <tcp_process+0x586>
 800f2f2:	4b11      	ldr	r3, [pc, #68]	@ (800f338 <tcp_process+0x5c0>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	4a0f      	ldr	r2, [pc, #60]	@ (800f338 <tcp_process+0x5c0>)
 800f2fa:	6013      	str	r3, [r2, #0]
 800f2fc:	e02e      	b.n	800f35c <tcp_process+0x5e4>
 800f2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f338 <tcp_process+0x5c0>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	613b      	str	r3, [r7, #16]
 800f304:	e027      	b.n	800f356 <tcp_process+0x5de>
 800f306:	bf00      	nop
 800f308:	200083a4 	.word	0x200083a4
 800f30c:	2000839c 	.word	0x2000839c
 800f310:	200083a2 	.word	0x200083a2
 800f314:	20008398 	.word	0x20008398
 800f318:	20008388 	.word	0x20008388
 800f31c:	20005410 	.word	0x20005410
 800f320:	20005414 	.word	0x20005414
 800f324:	08018424 	.word	0x08018424
 800f328:	080186c4 	.word	0x080186c4
 800f32c:	08018470 	.word	0x08018470
 800f330:	200083a0 	.word	0x200083a0
 800f334:	200083a5 	.word	0x200083a5
 800f338:	20008368 	.word	0x20008368
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	429a      	cmp	r2, r3
 800f344:	d104      	bne.n	800f350 <tcp_process+0x5d8>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	68da      	ldr	r2, [r3, #12]
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	60da      	str	r2, [r3, #12]
 800f34e:	e005      	b.n	800f35c <tcp_process+0x5e4>
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	613b      	str	r3, [r7, #16]
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1ef      	bne.n	800f33c <tcp_process+0x5c4>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	60da      	str	r2, [r3, #12]
 800f362:	4b77      	ldr	r3, [pc, #476]	@ (800f540 <tcp_process+0x7c8>)
 800f364:	2201      	movs	r2, #1
 800f366:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	220a      	movs	r2, #10
 800f36c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f36e:	4b75      	ldr	r3, [pc, #468]	@ (800f544 <tcp_process+0x7cc>)
 800f370:	681a      	ldr	r2, [r3, #0]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	60da      	str	r2, [r3, #12]
 800f376:	4a73      	ldr	r2, [pc, #460]	@ (800f544 <tcp_process+0x7cc>)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6013      	str	r3, [r2, #0]
 800f37c:	f002 fd08 	bl	8011d90 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f380:	e0d2      	b.n	800f528 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	8b5b      	ldrh	r3, [r3, #26]
 800f386:	f043 0302 	orr.w	r3, r3, #2
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2208      	movs	r2, #8
 800f394:	751a      	strb	r2, [r3, #20]
      break;
 800f396:	e0c7      	b.n	800f528 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f398:	4b6b      	ldr	r3, [pc, #428]	@ (800f548 <tcp_process+0x7d0>)
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	f003 0310 	and.w	r3, r3, #16
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f000 80c1 	beq.w	800f528 <tcp_process+0x7b0>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3aa:	4b68      	ldr	r3, [pc, #416]	@ (800f54c <tcp_process+0x7d4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	f040 80ba 	bne.w	800f528 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f040 80b5 	bne.w	800f528 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2206      	movs	r2, #6
 800f3c2:	751a      	strb	r2, [r3, #20]
      break;
 800f3c4:	e0b0      	b.n	800f528 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 f9ca 	bl	800f760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f3cc:	4b60      	ldr	r3, [pc, #384]	@ (800f550 <tcp_process+0x7d8>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	f003 0320 	and.w	r3, r3, #32
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f000 80a9 	beq.w	800f52c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	8b5b      	ldrh	r3, [r3, #26]
 800f3de:	f043 0302 	orr.w	r3, r3, #2
 800f3e2:	b29a      	uxth	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7fe fd33 	bl	800de54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f3ee:	4b59      	ldr	r3, [pc, #356]	@ (800f554 <tcp_process+0x7dc>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d105      	bne.n	800f404 <tcp_process+0x68c>
 800f3f8:	4b56      	ldr	r3, [pc, #344]	@ (800f554 <tcp_process+0x7dc>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	4a55      	ldr	r2, [pc, #340]	@ (800f554 <tcp_process+0x7dc>)
 800f400:	6013      	str	r3, [r2, #0]
 800f402:	e013      	b.n	800f42c <tcp_process+0x6b4>
 800f404:	4b53      	ldr	r3, [pc, #332]	@ (800f554 <tcp_process+0x7dc>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	60fb      	str	r3, [r7, #12]
 800f40a:	e00c      	b.n	800f426 <tcp_process+0x6ae>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	429a      	cmp	r2, r3
 800f414:	d104      	bne.n	800f420 <tcp_process+0x6a8>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68da      	ldr	r2, [r3, #12]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	60da      	str	r2, [r3, #12]
 800f41e:	e005      	b.n	800f42c <tcp_process+0x6b4>
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	60fb      	str	r3, [r7, #12]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1ef      	bne.n	800f40c <tcp_process+0x694>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	60da      	str	r2, [r3, #12]
 800f432:	4b43      	ldr	r3, [pc, #268]	@ (800f540 <tcp_process+0x7c8>)
 800f434:	2201      	movs	r2, #1
 800f436:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	220a      	movs	r2, #10
 800f43c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f43e:	4b41      	ldr	r3, [pc, #260]	@ (800f544 <tcp_process+0x7cc>)
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	60da      	str	r2, [r3, #12]
 800f446:	4a3f      	ldr	r2, [pc, #252]	@ (800f544 <tcp_process+0x7cc>)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6013      	str	r3, [r2, #0]
 800f44c:	f002 fca0 	bl	8011d90 <tcp_timer_needed>
      }
      break;
 800f450:	e06c      	b.n	800f52c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 f984 	bl	800f760 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f458:	4b3b      	ldr	r3, [pc, #236]	@ (800f548 <tcp_process+0x7d0>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	f003 0310 	and.w	r3, r3, #16
 800f460:	2b00      	cmp	r3, #0
 800f462:	d065      	beq.n	800f530 <tcp_process+0x7b8>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f468:	4b38      	ldr	r3, [pc, #224]	@ (800f54c <tcp_process+0x7d4>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d15f      	bne.n	800f530 <tcp_process+0x7b8>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d15b      	bne.n	800f530 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7fe fceb 	bl	800de54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f47e:	4b35      	ldr	r3, [pc, #212]	@ (800f554 <tcp_process+0x7dc>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	429a      	cmp	r2, r3
 800f486:	d105      	bne.n	800f494 <tcp_process+0x71c>
 800f488:	4b32      	ldr	r3, [pc, #200]	@ (800f554 <tcp_process+0x7dc>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	4a31      	ldr	r2, [pc, #196]	@ (800f554 <tcp_process+0x7dc>)
 800f490:	6013      	str	r3, [r2, #0]
 800f492:	e013      	b.n	800f4bc <tcp_process+0x744>
 800f494:	4b2f      	ldr	r3, [pc, #188]	@ (800f554 <tcp_process+0x7dc>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	61bb      	str	r3, [r7, #24]
 800f49a:	e00c      	b.n	800f4b6 <tcp_process+0x73e>
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d104      	bne.n	800f4b0 <tcp_process+0x738>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68da      	ldr	r2, [r3, #12]
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	60da      	str	r2, [r3, #12]
 800f4ae:	e005      	b.n	800f4bc <tcp_process+0x744>
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	61bb      	str	r3, [r7, #24]
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1ef      	bne.n	800f49c <tcp_process+0x724>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	60da      	str	r2, [r3, #12]
 800f4c2:	4b1f      	ldr	r3, [pc, #124]	@ (800f540 <tcp_process+0x7c8>)
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	220a      	movs	r2, #10
 800f4cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f4ce:	4b1d      	ldr	r3, [pc, #116]	@ (800f544 <tcp_process+0x7cc>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	60da      	str	r2, [r3, #12]
 800f4d6:	4a1b      	ldr	r2, [pc, #108]	@ (800f544 <tcp_process+0x7cc>)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	f002 fc58 	bl	8011d90 <tcp_timer_needed>
      }
      break;
 800f4e0:	e026      	b.n	800f530 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 f93c 	bl	800f760 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f4e8:	4b17      	ldr	r3, [pc, #92]	@ (800f548 <tcp_process+0x7d0>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 0310 	and.w	r3, r3, #16
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d01f      	beq.n	800f534 <tcp_process+0x7bc>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f4f8:	4b14      	ldr	r3, [pc, #80]	@ (800f54c <tcp_process+0x7d4>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d119      	bne.n	800f534 <tcp_process+0x7bc>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d115      	bne.n	800f534 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f508:	4b11      	ldr	r3, [pc, #68]	@ (800f550 <tcp_process+0x7d8>)
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	f043 0310 	orr.w	r3, r3, #16
 800f510:	b2da      	uxtb	r2, r3
 800f512:	4b0f      	ldr	r3, [pc, #60]	@ (800f550 <tcp_process+0x7d8>)
 800f514:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f516:	e00d      	b.n	800f534 <tcp_process+0x7bc>
    default:
      break;
 800f518:	bf00      	nop
 800f51a:	e00c      	b.n	800f536 <tcp_process+0x7be>
      break;
 800f51c:	bf00      	nop
 800f51e:	e00a      	b.n	800f536 <tcp_process+0x7be>
      break;
 800f520:	bf00      	nop
 800f522:	e008      	b.n	800f536 <tcp_process+0x7be>
      break;
 800f524:	bf00      	nop
 800f526:	e006      	b.n	800f536 <tcp_process+0x7be>
      break;
 800f528:	bf00      	nop
 800f52a:	e004      	b.n	800f536 <tcp_process+0x7be>
      break;
 800f52c:	bf00      	nop
 800f52e:	e002      	b.n	800f536 <tcp_process+0x7be>
      break;
 800f530:	bf00      	nop
 800f532:	e000      	b.n	800f536 <tcp_process+0x7be>
      break;
 800f534:	bf00      	nop
  }
  return ERR_OK;
 800f536:	2300      	movs	r3, #0
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3724      	adds	r7, #36	@ 0x24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd90      	pop	{r4, r7, pc}
 800f540:	20008370 	.word	0x20008370
 800f544:	2000836c 	.word	0x2000836c
 800f548:	200083a4 	.word	0x200083a4
 800f54c:	2000839c 	.word	0x2000839c
 800f550:	200083a5 	.word	0x200083a5
 800f554:	20008368 	.word	0x20008368

0800f558 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f558:	b590      	push	{r4, r7, lr}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d106      	bne.n	800f576 <tcp_oos_insert_segment+0x1e>
 800f568:	4b3b      	ldr	r3, [pc, #236]	@ (800f658 <tcp_oos_insert_segment+0x100>)
 800f56a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f56e:	493b      	ldr	r1, [pc, #236]	@ (800f65c <tcp_oos_insert_segment+0x104>)
 800f570:	483b      	ldr	r0, [pc, #236]	@ (800f660 <tcp_oos_insert_segment+0x108>)
 800f572:	f006 fcdb 	bl	8015f2c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	691b      	ldr	r3, [r3, #16]
 800f57a:	899b      	ldrh	r3, [r3, #12]
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fb fba6 	bl	800acd0 <lwip_htons>
 800f584:	4603      	mov	r3, r0
 800f586:	b2db      	uxtb	r3, r3
 800f588:	f003 0301 	and.w	r3, r3, #1
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d028      	beq.n	800f5e2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f590:	6838      	ldr	r0, [r7, #0]
 800f592:	f7fe fa5d 	bl	800da50 <tcp_segs_free>
    next = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	603b      	str	r3, [r7, #0]
 800f59a:	e056      	b.n	800f64a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	691b      	ldr	r3, [r3, #16]
 800f5a0:	899b      	ldrh	r3, [r3, #12]
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fb fb93 	bl	800acd0 <lwip_htons>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	f003 0301 	and.w	r3, r3, #1
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00d      	beq.n	800f5d2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	899b      	ldrh	r3, [r3, #12]
 800f5bc:	b29c      	uxth	r4, r3
 800f5be:	2001      	movs	r0, #1
 800f5c0:	f7fb fb86 	bl	800acd0 <lwip_htons>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	4322      	orrs	r2, r4
 800f5ce:	b292      	uxth	r2, r2
 800f5d0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7fe fa4c 	bl	800da7a <tcp_seg_free>
    while (next &&
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d00e      	beq.n	800f606 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	891b      	ldrh	r3, [r3, #8]
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	4b1d      	ldr	r3, [pc, #116]	@ (800f664 <tcp_oos_insert_segment+0x10c>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	441a      	add	r2, r3
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	6839      	ldr	r1, [r7, #0]
 800f5fc:	8909      	ldrh	r1, [r1, #8]
 800f5fe:	440b      	add	r3, r1
 800f600:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f602:	2b00      	cmp	r3, #0
 800f604:	daca      	bge.n	800f59c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01e      	beq.n	800f64a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	891b      	ldrh	r3, [r3, #8]
 800f610:	461a      	mov	r2, r3
 800f612:	4b14      	ldr	r3, [pc, #80]	@ (800f664 <tcp_oos_insert_segment+0x10c>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	441a      	add	r2, r3
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	691b      	ldr	r3, [r3, #16]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f620:	2b00      	cmp	r3, #0
 800f622:	dd12      	ble.n	800f64a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	691b      	ldr	r3, [r3, #16]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	4b0d      	ldr	r3, [pc, #52]	@ (800f664 <tcp_oos_insert_segment+0x10c>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	b29b      	uxth	r3, r3
 800f632:	1ad3      	subs	r3, r2, r3
 800f634:	b29a      	uxth	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	891b      	ldrh	r3, [r3, #8]
 800f642:	4619      	mov	r1, r3
 800f644:	4610      	mov	r0, r2
 800f646:	f7fc fe0d 	bl	800c264 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	683a      	ldr	r2, [r7, #0]
 800f64e:	601a      	str	r2, [r3, #0]
}
 800f650:	bf00      	nop
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	bd90      	pop	{r4, r7, pc}
 800f658:	08018424 	.word	0x08018424
 800f65c:	080186e4 	.word	0x080186e4
 800f660:	08018470 	.word	0x08018470
 800f664:	20008398 	.word	0x20008398

0800f668 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f668:	b5b0      	push	{r4, r5, r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f676:	e03e      	b.n	800f6f6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	4618      	mov	r0, r3
 800f688:	f7fc fffa 	bl	800c680 <pbuf_clen>
 800f68c:	4603      	mov	r3, r0
 800f68e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f696:	8a7a      	ldrh	r2, [r7, #18]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d906      	bls.n	800f6aa <tcp_free_acked_segments+0x42>
 800f69c:	4b2a      	ldr	r3, [pc, #168]	@ (800f748 <tcp_free_acked_segments+0xe0>)
 800f69e:	f240 4257 	movw	r2, #1111	@ 0x457
 800f6a2:	492a      	ldr	r1, [pc, #168]	@ (800f74c <tcp_free_acked_segments+0xe4>)
 800f6a4:	482a      	ldr	r0, [pc, #168]	@ (800f750 <tcp_free_acked_segments+0xe8>)
 800f6a6:	f006 fc41 	bl	8015f2c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f6b0:	8a7b      	ldrh	r3, [r7, #18]
 800f6b2:	1ad3      	subs	r3, r2, r3
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	891a      	ldrh	r2, [r3, #8]
 800f6c0:	4b24      	ldr	r3, [pc, #144]	@ (800f754 <tcp_free_acked_segments+0xec>)
 800f6c2:	881b      	ldrh	r3, [r3, #0]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	b29a      	uxth	r2, r3
 800f6c8:	4b22      	ldr	r3, [pc, #136]	@ (800f754 <tcp_free_acked_segments+0xec>)
 800f6ca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f6cc:	6978      	ldr	r0, [r7, #20]
 800f6ce:	f7fe f9d4 	bl	800da7a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00c      	beq.n	800f6f6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d109      	bne.n	800f6f6 <tcp_free_acked_segments+0x8e>
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d106      	bne.n	800f6f6 <tcp_free_acked_segments+0x8e>
 800f6e8:	4b17      	ldr	r3, [pc, #92]	@ (800f748 <tcp_free_acked_segments+0xe0>)
 800f6ea:	f240 4261 	movw	r2, #1121	@ 0x461
 800f6ee:	491a      	ldr	r1, [pc, #104]	@ (800f758 <tcp_free_acked_segments+0xf0>)
 800f6f0:	4817      	ldr	r0, [pc, #92]	@ (800f750 <tcp_free_acked_segments+0xe8>)
 800f6f2:	f006 fc1b 	bl	8015f2c <iprintf>
  while (seg_list != NULL &&
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d020      	beq.n	800f73e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	4618      	mov	r0, r3
 800f704:	f7fb fafa 	bl	800acfc <lwip_htonl>
 800f708:	4604      	mov	r4, r0
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	891b      	ldrh	r3, [r3, #8]
 800f70e:	461d      	mov	r5, r3
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	899b      	ldrh	r3, [r3, #12]
 800f716:	b29b      	uxth	r3, r3
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fb fad9 	bl	800acd0 <lwip_htons>
 800f71e:	4603      	mov	r3, r0
 800f720:	b2db      	uxtb	r3, r3
 800f722:	f003 0303 	and.w	r3, r3, #3
 800f726:	2b00      	cmp	r3, #0
 800f728:	d001      	beq.n	800f72e <tcp_free_acked_segments+0xc6>
 800f72a:	2301      	movs	r3, #1
 800f72c:	e000      	b.n	800f730 <tcp_free_acked_segments+0xc8>
 800f72e:	2300      	movs	r3, #0
 800f730:	442b      	add	r3, r5
 800f732:	18e2      	adds	r2, r4, r3
 800f734:	4b09      	ldr	r3, [pc, #36]	@ (800f75c <tcp_free_acked_segments+0xf4>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	dd9c      	ble.n	800f678 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f73e:	68bb      	ldr	r3, [r7, #8]
}
 800f740:	4618      	mov	r0, r3
 800f742:	3718      	adds	r7, #24
 800f744:	46bd      	mov	sp, r7
 800f746:	bdb0      	pop	{r4, r5, r7, pc}
 800f748:	08018424 	.word	0x08018424
 800f74c:	0801870c 	.word	0x0801870c
 800f750:	08018470 	.word	0x08018470
 800f754:	200083a0 	.word	0x200083a0
 800f758:	08018734 	.word	0x08018734
 800f75c:	2000839c 	.word	0x2000839c

0800f760 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f760:	b5b0      	push	{r4, r5, r7, lr}
 800f762:	b094      	sub	sp, #80	@ 0x50
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f768:	2300      	movs	r3, #0
 800f76a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d106      	bne.n	800f780 <tcp_receive+0x20>
 800f772:	4b91      	ldr	r3, [pc, #580]	@ (800f9b8 <tcp_receive+0x258>)
 800f774:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f778:	4990      	ldr	r1, [pc, #576]	@ (800f9bc <tcp_receive+0x25c>)
 800f77a:	4891      	ldr	r0, [pc, #580]	@ (800f9c0 <tcp_receive+0x260>)
 800f77c:	f006 fbd6 	bl	8015f2c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	7d1b      	ldrb	r3, [r3, #20]
 800f784:	2b03      	cmp	r3, #3
 800f786:	d806      	bhi.n	800f796 <tcp_receive+0x36>
 800f788:	4b8b      	ldr	r3, [pc, #556]	@ (800f9b8 <tcp_receive+0x258>)
 800f78a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f78e:	498d      	ldr	r1, [pc, #564]	@ (800f9c4 <tcp_receive+0x264>)
 800f790:	488b      	ldr	r0, [pc, #556]	@ (800f9c0 <tcp_receive+0x260>)
 800f792:	f006 fbcb 	bl	8015f2c <iprintf>

  if (flags & TCP_ACK) {
 800f796:	4b8c      	ldr	r3, [pc, #560]	@ (800f9c8 <tcp_receive+0x268>)
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	f003 0310 	and.w	r3, r3, #16
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f000 8264 	beq.w	800fc6c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7b0:	4413      	add	r3, r2
 800f7b2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7b8:	4b84      	ldr	r3, [pc, #528]	@ (800f9cc <tcp_receive+0x26c>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	db1b      	blt.n	800f7fa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7c6:	4b81      	ldr	r3, [pc, #516]	@ (800f9cc <tcp_receive+0x26c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d106      	bne.n	800f7dc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f7d2:	4b7f      	ldr	r3, [pc, #508]	@ (800f9d0 <tcp_receive+0x270>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	1ad3      	subs	r3, r2, r3
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	db0e      	blt.n	800f7fa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f7e0:	4b7b      	ldr	r3, [pc, #492]	@ (800f9d0 <tcp_receive+0x270>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d125      	bne.n	800f834 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f7e8:	4b7a      	ldr	r3, [pc, #488]	@ (800f9d4 <tcp_receive+0x274>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	89db      	ldrh	r3, [r3, #14]
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d91c      	bls.n	800f834 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f7fa:	4b76      	ldr	r3, [pc, #472]	@ (800f9d4 <tcp_receive+0x274>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	89db      	ldrh	r3, [r3, #14]
 800f800:	b29a      	uxth	r2, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f814:	429a      	cmp	r2, r3
 800f816:	d205      	bcs.n	800f824 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f824:	4b69      	ldr	r3, [pc, #420]	@ (800f9cc <tcp_receive+0x26c>)
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f82c:	4b68      	ldr	r3, [pc, #416]	@ (800f9d0 <tcp_receive+0x270>)
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f834:	4b66      	ldr	r3, [pc, #408]	@ (800f9d0 <tcp_receive+0x270>)
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	dc58      	bgt.n	800f8f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f842:	4b65      	ldr	r3, [pc, #404]	@ (800f9d8 <tcp_receive+0x278>)
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d14b      	bne.n	800f8e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f854:	4413      	add	r3, r2
 800f856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f858:	429a      	cmp	r2, r3
 800f85a:	d142      	bne.n	800f8e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f862:	2b00      	cmp	r3, #0
 800f864:	db3d      	blt.n	800f8e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f86a:	4b59      	ldr	r3, [pc, #356]	@ (800f9d0 <tcp_receive+0x270>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d137      	bne.n	800f8e2 <tcp_receive+0x182>
              found_dupack = 1;
 800f872:	2301      	movs	r3, #1
 800f874:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f87c:	2bff      	cmp	r3, #255	@ 0xff
 800f87e:	d007      	beq.n	800f890 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f886:	3301      	adds	r3, #1
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f896:	2b03      	cmp	r3, #3
 800f898:	d91b      	bls.n	800f8d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f8a4:	4413      	add	r3, r2
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d30a      	bcc.n	800f8c8 <tcp_receive+0x168>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f8bc:	4413      	add	r3, r2
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f8c6:	e004      	b.n	800f8d2 <tcp_receive+0x172>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f8ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f8d8:	2b02      	cmp	r3, #2
 800f8da:	d902      	bls.n	800f8e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f001 fefb 	bl	80116d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f8e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f040 8161 	bne.w	800fbac <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f8f2:	e15b      	b.n	800fbac <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f8f4:	4b36      	ldr	r3, [pc, #216]	@ (800f9d0 <tcp_receive+0x270>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	3b01      	subs	r3, #1
 800f900:	2b00      	cmp	r3, #0
 800f902:	f2c0 814e 	blt.w	800fba2 <tcp_receive+0x442>
 800f906:	4b32      	ldr	r3, [pc, #200]	@ (800f9d0 <tcp_receive+0x270>)
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	2b00      	cmp	r3, #0
 800f912:	f300 8146 	bgt.w	800fba2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	8b5b      	ldrh	r3, [r3, #26]
 800f91a:	f003 0304 	and.w	r3, r3, #4
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d010      	beq.n	800f944 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	8b5b      	ldrh	r3, [r3, #26]
 800f926:	f023 0304 	bic.w	r3, r3, #4
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f952:	10db      	asrs	r3, r3, #3
 800f954:	b21b      	sxth	r3, r3
 800f956:	b29a      	uxth	r2, r3
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f95e:	b29b      	uxth	r3, r3
 800f960:	4413      	add	r3, r2
 800f962:	b29b      	uxth	r3, r3
 800f964:	b21a      	sxth	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f96c:	4b18      	ldr	r3, [pc, #96]	@ (800f9d0 <tcp_receive+0x270>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	b29a      	uxth	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f976:	b29b      	uxth	r3, r3
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f984:	4b12      	ldr	r3, [pc, #72]	@ (800f9d0 <tcp_receive+0x270>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	7d1b      	ldrb	r3, [r3, #20]
 800f990:	2b03      	cmp	r3, #3
 800f992:	f240 8097 	bls.w	800fac4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d245      	bcs.n	800fa32 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	8b5b      	ldrh	r3, [r3, #26]
 800f9aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d014      	beq.n	800f9dc <tcp_receive+0x27c>
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e013      	b.n	800f9de <tcp_receive+0x27e>
 800f9b6:	bf00      	nop
 800f9b8:	08018424 	.word	0x08018424
 800f9bc:	08018754 	.word	0x08018754
 800f9c0:	08018470 	.word	0x08018470
 800f9c4:	08018770 	.word	0x08018770
 800f9c8:	200083a4 	.word	0x200083a4
 800f9cc:	20008398 	.word	0x20008398
 800f9d0:	2000839c 	.word	0x2000839c
 800f9d4:	20008388 	.word	0x20008388
 800f9d8:	200083a2 	.word	0x200083a2
 800f9dc:	2302      	movs	r3, #2
 800f9de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f9e2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f9ec:	fb12 f303 	smulbb	r3, r2, r3
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	bf28      	it	cs
 800f9f8:	4613      	movcs	r3, r2
 800f9fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fa02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fa04:	4413      	add	r3, r2
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d309      	bcc.n	800fa26 <tcp_receive+0x2c6>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fa18:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fa1a:	4413      	add	r3, r2
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fa24:	e04e      	b.n	800fac4 <tcp_receive+0x364>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa2c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fa30:	e048      	b.n	800fac4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fa38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fa3a:	4413      	add	r3, r2
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d309      	bcc.n	800fa5c <tcp_receive+0x2fc>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fa4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fa50:	4413      	add	r3, r2
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fa5a:	e004      	b.n	800fa66 <tcp_receive+0x306>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d326      	bcc.n	800fac4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fa82:	1ad3      	subs	r3, r2, r3
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa96:	4413      	add	r3, r2
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d30a      	bcc.n	800faba <tcp_receive+0x35a>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800faae:	4413      	add	r3, r2
 800fab0:	b29a      	uxth	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fab8:	e004      	b.n	800fac4 <tcp_receive+0x364>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fac0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800facc:	4a98      	ldr	r2, [pc, #608]	@ (800fd30 <tcp_receive+0x5d0>)
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f7ff fdca 	bl	800f668 <tcp_free_acked_segments>
 800fad4:	4602      	mov	r2, r0
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fae2:	4a94      	ldr	r2, [pc, #592]	@ (800fd34 <tcp_receive+0x5d4>)
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7ff fdbf 	bl	800f668 <tcp_free_acked_segments>
 800faea:	4602      	mov	r2, r0
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d104      	bne.n	800fb02 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fafe:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fb00:	e002      	b.n	800fb08 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d103      	bne.n	800fb1e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800fb24:	4b84      	ldr	r3, [pc, #528]	@ (800fd38 <tcp_receive+0x5d8>)
 800fb26:	881b      	ldrh	r3, [r3, #0]
 800fb28:	4413      	add	r3, r2
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	8b5b      	ldrh	r3, [r3, #26]
 800fb36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d035      	beq.n	800fbaa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d118      	bne.n	800fb78 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00c      	beq.n	800fb68 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fb f8ce 	bl	800acfc <lwip_htonl>
 800fb60:	4603      	mov	r3, r0
 800fb62:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	dc20      	bgt.n	800fbaa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	8b5b      	ldrh	r3, [r3, #26]
 800fb6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fb76:	e018      	b.n	800fbaa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fb f8b9 	bl	800acfc <lwip_htonl>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	1ae3      	subs	r3, r4, r3
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	dc0b      	bgt.n	800fbaa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	8b5b      	ldrh	r3, [r3, #26]
 800fb96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fba0:	e003      	b.n	800fbaa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f001 ff84 	bl	8011ab0 <tcp_send_empty_ack>
 800fba8:	e000      	b.n	800fbac <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fbaa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d05b      	beq.n	800fc6c <tcp_receive+0x50c>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fbb8:	4b60      	ldr	r3, [pc, #384]	@ (800fd3c <tcp_receive+0x5dc>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	da54      	bge.n	800fc6c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fbc2:	4b5f      	ldr	r3, [pc, #380]	@ (800fd40 <tcp_receive+0x5e0>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fbd6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fbe0:	10db      	asrs	r3, r3, #3
 800fbe2:	b21b      	sxth	r3, r3
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fbfa:	4413      	add	r3, r2
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	b21a      	sxth	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800fc04:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	da05      	bge.n	800fc18 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fc0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fc10:	425b      	negs	r3, r3
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fc18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fc22:	109b      	asrs	r3, r3, #2
 800fc24:	b21b      	sxth	r3, r3
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fc3c:	4413      	add	r3, r2
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	b21a      	sxth	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fc4c:	10db      	asrs	r3, r3, #3
 800fc4e:	b21b      	sxth	r3, r3
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	4413      	add	r3, r2
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	b21a      	sxth	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fc6c:	4b35      	ldr	r3, [pc, #212]	@ (800fd44 <tcp_receive+0x5e4>)
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f000 84df 	beq.w	8010634 <tcp_receive+0xed4>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	7d1b      	ldrb	r3, [r3, #20]
 800fc7a:	2b06      	cmp	r3, #6
 800fc7c:	f200 84da 	bhi.w	8010634 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc84:	4b30      	ldr	r3, [pc, #192]	@ (800fd48 <tcp_receive+0x5e8>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	1ad3      	subs	r3, r2, r3
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f2c0 808f 	blt.w	800fdb0 <tcp_receive+0x650>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc96:	4b2b      	ldr	r3, [pc, #172]	@ (800fd44 <tcp_receive+0x5e4>)
 800fc98:	881b      	ldrh	r3, [r3, #0]
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	4b2a      	ldr	r3, [pc, #168]	@ (800fd48 <tcp_receive+0x5e8>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	440b      	add	r3, r1
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	3301      	adds	r3, #1
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f300 8082 	bgt.w	800fdb0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fcac:	4b27      	ldr	r3, [pc, #156]	@ (800fd4c <tcp_receive+0x5ec>)
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcb6:	4b24      	ldr	r3, [pc, #144]	@ (800fd48 <tcp_receive+0x5e8>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	1ad3      	subs	r3, r2, r3
 800fcbc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fcbe:	4b23      	ldr	r3, [pc, #140]	@ (800fd4c <tcp_receive+0x5ec>)
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <tcp_receive+0x574>
 800fcc6:	4b22      	ldr	r3, [pc, #136]	@ (800fd50 <tcp_receive+0x5f0>)
 800fcc8:	f240 5294 	movw	r2, #1428	@ 0x594
 800fccc:	4921      	ldr	r1, [pc, #132]	@ (800fd54 <tcp_receive+0x5f4>)
 800fcce:	4822      	ldr	r0, [pc, #136]	@ (800fd58 <tcp_receive+0x5f8>)
 800fcd0:	f006 f92c 	bl	8015f2c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d906      	bls.n	800fcec <tcp_receive+0x58c>
 800fcde:	4b1c      	ldr	r3, [pc, #112]	@ (800fd50 <tcp_receive+0x5f0>)
 800fce0:	f240 5295 	movw	r2, #1429	@ 0x595
 800fce4:	491d      	ldr	r1, [pc, #116]	@ (800fd5c <tcp_receive+0x5fc>)
 800fce6:	481c      	ldr	r0, [pc, #112]	@ (800fd58 <tcp_receive+0x5f8>)
 800fce8:	f006 f920 	bl	8015f2c <iprintf>
      off = (u16_t)off32;
 800fcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fcf2:	4b16      	ldr	r3, [pc, #88]	@ (800fd4c <tcp_receive+0x5ec>)
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	891b      	ldrh	r3, [r3, #8]
 800fcf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d906      	bls.n	800fd0e <tcp_receive+0x5ae>
 800fd00:	4b13      	ldr	r3, [pc, #76]	@ (800fd50 <tcp_receive+0x5f0>)
 800fd02:	f240 5297 	movw	r2, #1431	@ 0x597
 800fd06:	4916      	ldr	r1, [pc, #88]	@ (800fd60 <tcp_receive+0x600>)
 800fd08:	4813      	ldr	r0, [pc, #76]	@ (800fd58 <tcp_receive+0x5f8>)
 800fd0a:	f006 f90f 	bl	8015f2c <iprintf>
      inseg.len -= off;
 800fd0e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd4c <tcp_receive+0x5ec>)
 800fd10:	891a      	ldrh	r2, [r3, #8]
 800fd12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	4b0c      	ldr	r3, [pc, #48]	@ (800fd4c <tcp_receive+0x5ec>)
 800fd1c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fd1e:	4b0b      	ldr	r3, [pc, #44]	@ (800fd4c <tcp_receive+0x5ec>)
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	891a      	ldrh	r2, [r3, #8]
 800fd24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800fd2c:	e02a      	b.n	800fd84 <tcp_receive+0x624>
 800fd2e:	bf00      	nop
 800fd30:	0801878c 	.word	0x0801878c
 800fd34:	08018794 	.word	0x08018794
 800fd38:	200083a0 	.word	0x200083a0
 800fd3c:	2000839c 	.word	0x2000839c
 800fd40:	2000835c 	.word	0x2000835c
 800fd44:	200083a2 	.word	0x200083a2
 800fd48:	20008398 	.word	0x20008398
 800fd4c:	20008374 	.word	0x20008374
 800fd50:	08018424 	.word	0x08018424
 800fd54:	0801879c 	.word	0x0801879c
 800fd58:	08018470 	.word	0x08018470
 800fd5c:	080187ac 	.word	0x080187ac
 800fd60:	080187bc 	.word	0x080187bc
        off -= p->len;
 800fd64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd66:	895b      	ldrh	r3, [r3, #10]
 800fd68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fd72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd74:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fd76:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fd78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fd7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800fd84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd86:	895b      	ldrh	r3, [r3, #10]
 800fd88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d8e9      	bhi.n	800fd64 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fd90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fd94:	4619      	mov	r1, r3
 800fd96:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fd98:	f7fc fb64 	bl	800c464 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fda0:	4a90      	ldr	r2, [pc, #576]	@ (800ffe4 <tcp_receive+0x884>)
 800fda2:	6013      	str	r3, [r2, #0]
 800fda4:	4b90      	ldr	r3, [pc, #576]	@ (800ffe8 <tcp_receive+0x888>)
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	4a8e      	ldr	r2, [pc, #568]	@ (800ffe4 <tcp_receive+0x884>)
 800fdaa:	6812      	ldr	r2, [r2, #0]
 800fdac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fdae:	e00d      	b.n	800fdcc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fdb0:	4b8c      	ldr	r3, [pc, #560]	@ (800ffe4 <tcp_receive+0x884>)
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	da06      	bge.n	800fdcc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	8b5b      	ldrh	r3, [r3, #26]
 800fdc2:	f043 0302 	orr.w	r3, r3, #2
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fdcc:	4b85      	ldr	r3, [pc, #532]	@ (800ffe4 <tcp_receive+0x884>)
 800fdce:	681a      	ldr	r2, [r3, #0]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f2c0 8427 	blt.w	801062a <tcp_receive+0xeca>
 800fddc:	4b81      	ldr	r3, [pc, #516]	@ (800ffe4 <tcp_receive+0x884>)
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fde4:	6879      	ldr	r1, [r7, #4]
 800fde6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fde8:	440b      	add	r3, r1
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	3301      	adds	r3, #1
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f300 841b 	bgt.w	801062a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fdf8:	4b7a      	ldr	r3, [pc, #488]	@ (800ffe4 <tcp_receive+0x884>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	f040 8298 	bne.w	8010332 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fe02:	4b79      	ldr	r3, [pc, #484]	@ (800ffe8 <tcp_receive+0x888>)
 800fe04:	891c      	ldrh	r4, [r3, #8]
 800fe06:	4b78      	ldr	r3, [pc, #480]	@ (800ffe8 <tcp_receive+0x888>)
 800fe08:	691b      	ldr	r3, [r3, #16]
 800fe0a:	899b      	ldrh	r3, [r3, #12]
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fa ff5e 	bl	800acd0 <lwip_htons>
 800fe14:	4603      	mov	r3, r0
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	f003 0303 	and.w	r3, r3, #3
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d001      	beq.n	800fe24 <tcp_receive+0x6c4>
 800fe20:	2301      	movs	r3, #1
 800fe22:	e000      	b.n	800fe26 <tcp_receive+0x6c6>
 800fe24:	2300      	movs	r3, #0
 800fe26:	4423      	add	r3, r4
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	4b70      	ldr	r3, [pc, #448]	@ (800ffec <tcp_receive+0x88c>)
 800fe2c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fe32:	4b6e      	ldr	r3, [pc, #440]	@ (800ffec <tcp_receive+0x88c>)
 800fe34:	881b      	ldrh	r3, [r3, #0]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d274      	bcs.n	800ff24 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe3a:	4b6b      	ldr	r3, [pc, #428]	@ (800ffe8 <tcp_receive+0x888>)
 800fe3c:	691b      	ldr	r3, [r3, #16]
 800fe3e:	899b      	ldrh	r3, [r3, #12]
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fa ff44 	bl	800acd0 <lwip_htons>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	f003 0301 	and.w	r3, r3, #1
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d01e      	beq.n	800fe92 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fe54:	4b64      	ldr	r3, [pc, #400]	@ (800ffe8 <tcp_receive+0x888>)
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	899b      	ldrh	r3, [r3, #12]
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	b21b      	sxth	r3, r3
 800fe5e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fe62:	b21c      	sxth	r4, r3
 800fe64:	4b60      	ldr	r3, [pc, #384]	@ (800ffe8 <tcp_receive+0x888>)
 800fe66:	691b      	ldr	r3, [r3, #16]
 800fe68:	899b      	ldrh	r3, [r3, #12]
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fa ff2f 	bl	800acd0 <lwip_htons>
 800fe72:	4603      	mov	r3, r0
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7fa ff27 	bl	800acd0 <lwip_htons>
 800fe82:	4603      	mov	r3, r0
 800fe84:	b21b      	sxth	r3, r3
 800fe86:	4323      	orrs	r3, r4
 800fe88:	b21a      	sxth	r2, r3
 800fe8a:	4b57      	ldr	r3, [pc, #348]	@ (800ffe8 <tcp_receive+0x888>)
 800fe8c:	691b      	ldr	r3, [r3, #16]
 800fe8e:	b292      	uxth	r2, r2
 800fe90:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fe96:	4b54      	ldr	r3, [pc, #336]	@ (800ffe8 <tcp_receive+0x888>)
 800fe98:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fe9a:	4b53      	ldr	r3, [pc, #332]	@ (800ffe8 <tcp_receive+0x888>)
 800fe9c:	691b      	ldr	r3, [r3, #16]
 800fe9e:	899b      	ldrh	r3, [r3, #12]
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fa ff14 	bl	800acd0 <lwip_htons>
 800fea8:	4603      	mov	r3, r0
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	f003 0302 	and.w	r3, r3, #2
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d005      	beq.n	800fec0 <tcp_receive+0x760>
            inseg.len -= 1;
 800feb4:	4b4c      	ldr	r3, [pc, #304]	@ (800ffe8 <tcp_receive+0x888>)
 800feb6:	891b      	ldrh	r3, [r3, #8]
 800feb8:	3b01      	subs	r3, #1
 800feba:	b29a      	uxth	r2, r3
 800febc:	4b4a      	ldr	r3, [pc, #296]	@ (800ffe8 <tcp_receive+0x888>)
 800febe:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fec0:	4b49      	ldr	r3, [pc, #292]	@ (800ffe8 <tcp_receive+0x888>)
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	4a48      	ldr	r2, [pc, #288]	@ (800ffe8 <tcp_receive+0x888>)
 800fec6:	8912      	ldrh	r2, [r2, #8]
 800fec8:	4611      	mov	r1, r2
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fc f9ca 	bl	800c264 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fed0:	4b45      	ldr	r3, [pc, #276]	@ (800ffe8 <tcp_receive+0x888>)
 800fed2:	891c      	ldrh	r4, [r3, #8]
 800fed4:	4b44      	ldr	r3, [pc, #272]	@ (800ffe8 <tcp_receive+0x888>)
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	899b      	ldrh	r3, [r3, #12]
 800feda:	b29b      	uxth	r3, r3
 800fedc:	4618      	mov	r0, r3
 800fede:	f7fa fef7 	bl	800acd0 <lwip_htons>
 800fee2:	4603      	mov	r3, r0
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	f003 0303 	and.w	r3, r3, #3
 800feea:	2b00      	cmp	r3, #0
 800feec:	d001      	beq.n	800fef2 <tcp_receive+0x792>
 800feee:	2301      	movs	r3, #1
 800fef0:	e000      	b.n	800fef4 <tcp_receive+0x794>
 800fef2:	2300      	movs	r3, #0
 800fef4:	4423      	add	r3, r4
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	4b3c      	ldr	r3, [pc, #240]	@ (800ffec <tcp_receive+0x88c>)
 800fefa:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fefc:	4b3b      	ldr	r3, [pc, #236]	@ (800ffec <tcp_receive+0x88c>)
 800fefe:	881b      	ldrh	r3, [r3, #0]
 800ff00:	461a      	mov	r2, r3
 800ff02:	4b38      	ldr	r3, [pc, #224]	@ (800ffe4 <tcp_receive+0x884>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	441a      	add	r2, r3
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff0c:	6879      	ldr	r1, [r7, #4]
 800ff0e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ff10:	440b      	add	r3, r1
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d006      	beq.n	800ff24 <tcp_receive+0x7c4>
 800ff16:	4b36      	ldr	r3, [pc, #216]	@ (800fff0 <tcp_receive+0x890>)
 800ff18:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800ff1c:	4935      	ldr	r1, [pc, #212]	@ (800fff4 <tcp_receive+0x894>)
 800ff1e:	4836      	ldr	r0, [pc, #216]	@ (800fff8 <tcp_receive+0x898>)
 800ff20:	f006 f804 	bl	8015f2c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 80e6 	beq.w	80100fa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ff2e:	4b2e      	ldr	r3, [pc, #184]	@ (800ffe8 <tcp_receive+0x888>)
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	899b      	ldrh	r3, [r3, #12]
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fa feca 	bl	800acd0 <lwip_htons>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	f003 0301 	and.w	r3, r3, #1
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d010      	beq.n	800ff6a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ff48:	e00a      	b.n	800ff60 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff4e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f7fd fd8d 	bl	800da7a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1f0      	bne.n	800ff4a <tcp_receive+0x7ea>
 800ff68:	e0c7      	b.n	80100fa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ff70:	e051      	b.n	8010016 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ff72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	899b      	ldrh	r3, [r3, #12]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fa fea8 	bl	800acd0 <lwip_htons>
 800ff80:	4603      	mov	r3, r0
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	f003 0301 	and.w	r3, r3, #1
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d03c      	beq.n	8010006 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ff8c:	4b16      	ldr	r3, [pc, #88]	@ (800ffe8 <tcp_receive+0x888>)
 800ff8e:	691b      	ldr	r3, [r3, #16]
 800ff90:	899b      	ldrh	r3, [r3, #12]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fa fe9b 	bl	800acd0 <lwip_htons>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d12f      	bne.n	8010006 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ffa6:	4b10      	ldr	r3, [pc, #64]	@ (800ffe8 <tcp_receive+0x888>)
 800ffa8:	691b      	ldr	r3, [r3, #16]
 800ffaa:	899b      	ldrh	r3, [r3, #12]
 800ffac:	b29c      	uxth	r4, r3
 800ffae:	2001      	movs	r0, #1
 800ffb0:	f7fa fe8e 	bl	800acd0 <lwip_htons>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	4b0b      	ldr	r3, [pc, #44]	@ (800ffe8 <tcp_receive+0x888>)
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	4322      	orrs	r2, r4
 800ffbe:	b292      	uxth	r2, r2
 800ffc0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ffc2:	4b09      	ldr	r3, [pc, #36]	@ (800ffe8 <tcp_receive+0x888>)
 800ffc4:	891c      	ldrh	r4, [r3, #8]
 800ffc6:	4b08      	ldr	r3, [pc, #32]	@ (800ffe8 <tcp_receive+0x888>)
 800ffc8:	691b      	ldr	r3, [r3, #16]
 800ffca:	899b      	ldrh	r3, [r3, #12]
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7fa fe7e 	bl	800acd0 <lwip_htons>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	f003 0303 	and.w	r3, r3, #3
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00d      	beq.n	800fffc <tcp_receive+0x89c>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e00c      	b.n	800fffe <tcp_receive+0x89e>
 800ffe4:	20008398 	.word	0x20008398
 800ffe8:	20008374 	.word	0x20008374
 800ffec:	200083a2 	.word	0x200083a2
 800fff0:	08018424 	.word	0x08018424
 800fff4:	080187cc 	.word	0x080187cc
 800fff8:	08018470 	.word	0x08018470
 800fffc:	2300      	movs	r3, #0
 800fffe:	4423      	add	r3, r4
 8010000:	b29a      	uxth	r2, r3
 8010002:	4b98      	ldr	r3, [pc, #608]	@ (8010264 <tcp_receive+0xb04>)
 8010004:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010008:	613b      	str	r3, [r7, #16]
              next = next->next;
 801000a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010010:	6938      	ldr	r0, [r7, #16]
 8010012:	f7fd fd32 	bl	800da7a <tcp_seg_free>
            while (next &&
 8010016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00e      	beq.n	801003a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801001c:	4b91      	ldr	r3, [pc, #580]	@ (8010264 <tcp_receive+0xb04>)
 801001e:	881b      	ldrh	r3, [r3, #0]
 8010020:	461a      	mov	r2, r3
 8010022:	4b91      	ldr	r3, [pc, #580]	@ (8010268 <tcp_receive+0xb08>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	441a      	add	r2, r3
 8010028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801002a:	691b      	ldr	r3, [r3, #16]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010030:	8909      	ldrh	r1, [r1, #8]
 8010032:	440b      	add	r3, r1
 8010034:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010036:	2b00      	cmp	r3, #0
 8010038:	da9b      	bge.n	800ff72 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801003a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801003c:	2b00      	cmp	r3, #0
 801003e:	d059      	beq.n	80100f4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010040:	4b88      	ldr	r3, [pc, #544]	@ (8010264 <tcp_receive+0xb04>)
 8010042:	881b      	ldrh	r3, [r3, #0]
 8010044:	461a      	mov	r2, r3
 8010046:	4b88      	ldr	r3, [pc, #544]	@ (8010268 <tcp_receive+0xb08>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	441a      	add	r2, r3
 801004c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010054:	2b00      	cmp	r3, #0
 8010056:	dd4d      	ble.n	80100f4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	b29a      	uxth	r2, r3
 8010060:	4b81      	ldr	r3, [pc, #516]	@ (8010268 <tcp_receive+0xb08>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	b29b      	uxth	r3, r3
 8010066:	1ad3      	subs	r3, r2, r3
 8010068:	b29a      	uxth	r2, r3
 801006a:	4b80      	ldr	r3, [pc, #512]	@ (801026c <tcp_receive+0xb0c>)
 801006c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801006e:	4b7f      	ldr	r3, [pc, #508]	@ (801026c <tcp_receive+0xb0c>)
 8010070:	691b      	ldr	r3, [r3, #16]
 8010072:	899b      	ldrh	r3, [r3, #12]
 8010074:	b29b      	uxth	r3, r3
 8010076:	4618      	mov	r0, r3
 8010078:	f7fa fe2a 	bl	800acd0 <lwip_htons>
 801007c:	4603      	mov	r3, r0
 801007e:	b2db      	uxtb	r3, r3
 8010080:	f003 0302 	and.w	r3, r3, #2
 8010084:	2b00      	cmp	r3, #0
 8010086:	d005      	beq.n	8010094 <tcp_receive+0x934>
                inseg.len -= 1;
 8010088:	4b78      	ldr	r3, [pc, #480]	@ (801026c <tcp_receive+0xb0c>)
 801008a:	891b      	ldrh	r3, [r3, #8]
 801008c:	3b01      	subs	r3, #1
 801008e:	b29a      	uxth	r2, r3
 8010090:	4b76      	ldr	r3, [pc, #472]	@ (801026c <tcp_receive+0xb0c>)
 8010092:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010094:	4b75      	ldr	r3, [pc, #468]	@ (801026c <tcp_receive+0xb0c>)
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	4a74      	ldr	r2, [pc, #464]	@ (801026c <tcp_receive+0xb0c>)
 801009a:	8912      	ldrh	r2, [r2, #8]
 801009c:	4611      	mov	r1, r2
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fc f8e0 	bl	800c264 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80100a4:	4b71      	ldr	r3, [pc, #452]	@ (801026c <tcp_receive+0xb0c>)
 80100a6:	891c      	ldrh	r4, [r3, #8]
 80100a8:	4b70      	ldr	r3, [pc, #448]	@ (801026c <tcp_receive+0xb0c>)
 80100aa:	691b      	ldr	r3, [r3, #16]
 80100ac:	899b      	ldrh	r3, [r3, #12]
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fa fe0d 	bl	800acd0 <lwip_htons>
 80100b6:	4603      	mov	r3, r0
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	f003 0303 	and.w	r3, r3, #3
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <tcp_receive+0x966>
 80100c2:	2301      	movs	r3, #1
 80100c4:	e000      	b.n	80100c8 <tcp_receive+0x968>
 80100c6:	2300      	movs	r3, #0
 80100c8:	4423      	add	r3, r4
 80100ca:	b29a      	uxth	r2, r3
 80100cc:	4b65      	ldr	r3, [pc, #404]	@ (8010264 <tcp_receive+0xb04>)
 80100ce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80100d0:	4b64      	ldr	r3, [pc, #400]	@ (8010264 <tcp_receive+0xb04>)
 80100d2:	881b      	ldrh	r3, [r3, #0]
 80100d4:	461a      	mov	r2, r3
 80100d6:	4b64      	ldr	r3, [pc, #400]	@ (8010268 <tcp_receive+0xb08>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	441a      	add	r2, r3
 80100dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100de:	691b      	ldr	r3, [r3, #16]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d006      	beq.n	80100f4 <tcp_receive+0x994>
 80100e6:	4b62      	ldr	r3, [pc, #392]	@ (8010270 <tcp_receive+0xb10>)
 80100e8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80100ec:	4961      	ldr	r1, [pc, #388]	@ (8010274 <tcp_receive+0xb14>)
 80100ee:	4862      	ldr	r0, [pc, #392]	@ (8010278 <tcp_receive+0xb18>)
 80100f0:	f005 ff1c 	bl	8015f2c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80100f8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80100fa:	4b5a      	ldr	r3, [pc, #360]	@ (8010264 <tcp_receive+0xb04>)
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	461a      	mov	r2, r3
 8010100:	4b59      	ldr	r3, [pc, #356]	@ (8010268 <tcp_receive+0xb08>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	441a      	add	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801010e:	4b55      	ldr	r3, [pc, #340]	@ (8010264 <tcp_receive+0xb04>)
 8010110:	881b      	ldrh	r3, [r3, #0]
 8010112:	429a      	cmp	r2, r3
 8010114:	d206      	bcs.n	8010124 <tcp_receive+0x9c4>
 8010116:	4b56      	ldr	r3, [pc, #344]	@ (8010270 <tcp_receive+0xb10>)
 8010118:	f240 6207 	movw	r2, #1543	@ 0x607
 801011c:	4957      	ldr	r1, [pc, #348]	@ (801027c <tcp_receive+0xb1c>)
 801011e:	4856      	ldr	r0, [pc, #344]	@ (8010278 <tcp_receive+0xb18>)
 8010120:	f005 ff04 	bl	8015f2c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010128:	4b4e      	ldr	r3, [pc, #312]	@ (8010264 <tcp_receive+0xb04>)
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	1ad3      	subs	r3, r2, r3
 801012e:	b29a      	uxth	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7fc ffbf 	bl	800d0b8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801013a:	4b4c      	ldr	r3, [pc, #304]	@ (801026c <tcp_receive+0xb0c>)
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	891b      	ldrh	r3, [r3, #8]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d006      	beq.n	8010152 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010144:	4b49      	ldr	r3, [pc, #292]	@ (801026c <tcp_receive+0xb0c>)
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	4a4d      	ldr	r2, [pc, #308]	@ (8010280 <tcp_receive+0xb20>)
 801014a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801014c:	4b47      	ldr	r3, [pc, #284]	@ (801026c <tcp_receive+0xb0c>)
 801014e:	2200      	movs	r2, #0
 8010150:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010152:	4b46      	ldr	r3, [pc, #280]	@ (801026c <tcp_receive+0xb0c>)
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	899b      	ldrh	r3, [r3, #12]
 8010158:	b29b      	uxth	r3, r3
 801015a:	4618      	mov	r0, r3
 801015c:	f7fa fdb8 	bl	800acd0 <lwip_htons>
 8010160:	4603      	mov	r3, r0
 8010162:	b2db      	uxtb	r3, r3
 8010164:	f003 0301 	and.w	r3, r3, #1
 8010168:	2b00      	cmp	r3, #0
 801016a:	f000 80b8 	beq.w	80102de <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801016e:	4b45      	ldr	r3, [pc, #276]	@ (8010284 <tcp_receive+0xb24>)
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	f043 0320 	orr.w	r3, r3, #32
 8010176:	b2da      	uxtb	r2, r3
 8010178:	4b42      	ldr	r3, [pc, #264]	@ (8010284 <tcp_receive+0xb24>)
 801017a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801017c:	e0af      	b.n	80102de <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010182:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010188:	691b      	ldr	r3, [r3, #16]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	4a36      	ldr	r2, [pc, #216]	@ (8010268 <tcp_receive+0xb08>)
 801018e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	891b      	ldrh	r3, [r3, #8]
 8010194:	461c      	mov	r4, r3
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	899b      	ldrh	r3, [r3, #12]
 801019c:	b29b      	uxth	r3, r3
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fa fd96 	bl	800acd0 <lwip_htons>
 80101a4:	4603      	mov	r3, r0
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	f003 0303 	and.w	r3, r3, #3
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d001      	beq.n	80101b4 <tcp_receive+0xa54>
 80101b0:	2301      	movs	r3, #1
 80101b2:	e000      	b.n	80101b6 <tcp_receive+0xa56>
 80101b4:	2300      	movs	r3, #0
 80101b6:	191a      	adds	r2, r3, r4
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101bc:	441a      	add	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101c6:	461c      	mov	r4, r3
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	891b      	ldrh	r3, [r3, #8]
 80101cc:	461d      	mov	r5, r3
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	691b      	ldr	r3, [r3, #16]
 80101d2:	899b      	ldrh	r3, [r3, #12]
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fa fd7a 	bl	800acd0 <lwip_htons>
 80101dc:	4603      	mov	r3, r0
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	f003 0303 	and.w	r3, r3, #3
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d001      	beq.n	80101ec <tcp_receive+0xa8c>
 80101e8:	2301      	movs	r3, #1
 80101ea:	e000      	b.n	80101ee <tcp_receive+0xa8e>
 80101ec:	2300      	movs	r3, #0
 80101ee:	442b      	add	r3, r5
 80101f0:	429c      	cmp	r4, r3
 80101f2:	d206      	bcs.n	8010202 <tcp_receive+0xaa2>
 80101f4:	4b1e      	ldr	r3, [pc, #120]	@ (8010270 <tcp_receive+0xb10>)
 80101f6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80101fa:	4923      	ldr	r1, [pc, #140]	@ (8010288 <tcp_receive+0xb28>)
 80101fc:	481e      	ldr	r0, [pc, #120]	@ (8010278 <tcp_receive+0xb18>)
 80101fe:	f005 fe95 	bl	8015f2c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	891b      	ldrh	r3, [r3, #8]
 8010206:	461c      	mov	r4, r3
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	899b      	ldrh	r3, [r3, #12]
 801020e:	b29b      	uxth	r3, r3
 8010210:	4618      	mov	r0, r3
 8010212:	f7fa fd5d 	bl	800acd0 <lwip_htons>
 8010216:	4603      	mov	r3, r0
 8010218:	b2db      	uxtb	r3, r3
 801021a:	f003 0303 	and.w	r3, r3, #3
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <tcp_receive+0xac6>
 8010222:	2301      	movs	r3, #1
 8010224:	e000      	b.n	8010228 <tcp_receive+0xac8>
 8010226:	2300      	movs	r3, #0
 8010228:	1919      	adds	r1, r3, r4
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801022e:	b28b      	uxth	r3, r1
 8010230:	1ad3      	subs	r3, r2, r3
 8010232:	b29a      	uxth	r2, r3
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7fc ff3d 	bl	800d0b8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	891b      	ldrh	r3, [r3, #8]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d028      	beq.n	801029a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010248:	4b0d      	ldr	r3, [pc, #52]	@ (8010280 <tcp_receive+0xb20>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d01d      	beq.n	801028c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010250:	4b0b      	ldr	r3, [pc, #44]	@ (8010280 <tcp_receive+0xb20>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	4619      	mov	r1, r3
 801025a:	4610      	mov	r0, r2
 801025c:	f7fc fa4a 	bl	800c6f4 <pbuf_cat>
 8010260:	e018      	b.n	8010294 <tcp_receive+0xb34>
 8010262:	bf00      	nop
 8010264:	200083a2 	.word	0x200083a2
 8010268:	20008398 	.word	0x20008398
 801026c:	20008374 	.word	0x20008374
 8010270:	08018424 	.word	0x08018424
 8010274:	08018804 	.word	0x08018804
 8010278:	08018470 	.word	0x08018470
 801027c:	08018840 	.word	0x08018840
 8010280:	200083a8 	.word	0x200083a8
 8010284:	200083a5 	.word	0x200083a5
 8010288:	08018860 	.word	0x08018860
            } else {
              recv_data = cseg->p;
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	4a70      	ldr	r2, [pc, #448]	@ (8010454 <tcp_receive+0xcf4>)
 8010292:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	2200      	movs	r2, #0
 8010298:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	899b      	ldrh	r3, [r3, #12]
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fa fd14 	bl	800acd0 <lwip_htons>
 80102a8:	4603      	mov	r3, r0
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	f003 0301 	and.w	r3, r3, #1
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d00d      	beq.n	80102d0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80102b4:	4b68      	ldr	r3, [pc, #416]	@ (8010458 <tcp_receive+0xcf8>)
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	f043 0320 	orr.w	r3, r3, #32
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	4b66      	ldr	r3, [pc, #408]	@ (8010458 <tcp_receive+0xcf8>)
 80102c0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	7d1b      	ldrb	r3, [r3, #20]
 80102c6:	2b04      	cmp	r3, #4
 80102c8:	d102      	bne.n	80102d0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2207      	movs	r2, #7
 80102ce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80102d8:	68b8      	ldr	r0, [r7, #8]
 80102da:	f7fd fbce 	bl	800da7a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d008      	beq.n	80102f8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	685a      	ldr	r2, [r3, #4]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80102f2:	429a      	cmp	r2, r3
 80102f4:	f43f af43 	beq.w	801017e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	8b5b      	ldrh	r3, [r3, #26]
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	d00e      	beq.n	8010322 <tcp_receive+0xbc2>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	8b5b      	ldrh	r3, [r3, #26]
 8010308:	f023 0301 	bic.w	r3, r3, #1
 801030c:	b29a      	uxth	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	835a      	strh	r2, [r3, #26]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	8b5b      	ldrh	r3, [r3, #26]
 8010316:	f043 0302 	orr.w	r3, r3, #2
 801031a:	b29a      	uxth	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010320:	e187      	b.n	8010632 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	8b5b      	ldrh	r3, [r3, #26]
 8010326:	f043 0301 	orr.w	r3, r3, #1
 801032a:	b29a      	uxth	r2, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010330:	e17f      	b.n	8010632 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010336:	2b00      	cmp	r3, #0
 8010338:	d106      	bne.n	8010348 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801033a:	4848      	ldr	r0, [pc, #288]	@ (801045c <tcp_receive+0xcfc>)
 801033c:	f7fd fbb6 	bl	800daac <tcp_seg_copy>
 8010340:	4602      	mov	r2, r0
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	675a      	str	r2, [r3, #116]	@ 0x74
 8010346:	e16c      	b.n	8010622 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010348:	2300      	movs	r3, #0
 801034a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010350:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010352:	e156      	b.n	8010602 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	685a      	ldr	r2, [r3, #4]
 801035a:	4b41      	ldr	r3, [pc, #260]	@ (8010460 <tcp_receive+0xd00>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	429a      	cmp	r2, r3
 8010360:	d11d      	bne.n	801039e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010362:	4b3e      	ldr	r3, [pc, #248]	@ (801045c <tcp_receive+0xcfc>)
 8010364:	891a      	ldrh	r2, [r3, #8]
 8010366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010368:	891b      	ldrh	r3, [r3, #8]
 801036a:	429a      	cmp	r2, r3
 801036c:	f240 814e 	bls.w	801060c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010370:	483a      	ldr	r0, [pc, #232]	@ (801045c <tcp_receive+0xcfc>)
 8010372:	f7fd fb9b 	bl	800daac <tcp_seg_copy>
 8010376:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	2b00      	cmp	r3, #0
 801037c:	f000 8148 	beq.w	8010610 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010382:	2b00      	cmp	r3, #0
 8010384:	d003      	beq.n	801038e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010388:	697a      	ldr	r2, [r7, #20]
 801038a:	601a      	str	r2, [r3, #0]
 801038c:	e002      	b.n	8010394 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	697a      	ldr	r2, [r7, #20]
 8010392:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010394:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010396:	6978      	ldr	r0, [r7, #20]
 8010398:	f7ff f8de 	bl	800f558 <tcp_oos_insert_segment>
                }
                break;
 801039c:	e138      	b.n	8010610 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801039e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d117      	bne.n	80103d4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80103a4:	4b2e      	ldr	r3, [pc, #184]	@ (8010460 <tcp_receive+0xd00>)
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	1ad3      	subs	r3, r2, r3
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	da57      	bge.n	8010464 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80103b4:	4829      	ldr	r0, [pc, #164]	@ (801045c <tcp_receive+0xcfc>)
 80103b6:	f7fd fb79 	bl	800daac <tcp_seg_copy>
 80103ba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f000 8128 	beq.w	8010614 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	69ba      	ldr	r2, [r7, #24]
 80103c8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80103ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80103cc:	69b8      	ldr	r0, [r7, #24]
 80103ce:	f7ff f8c3 	bl	800f558 <tcp_oos_insert_segment>
                  }
                  break;
 80103d2:	e11f      	b.n	8010614 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80103d4:	4b22      	ldr	r3, [pc, #136]	@ (8010460 <tcp_receive+0xd00>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	3b01      	subs	r3, #1
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	db3e      	blt.n	8010464 <tcp_receive+0xd04>
 80103e6:	4b1e      	ldr	r3, [pc, #120]	@ (8010460 <tcp_receive+0xd00>)
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ec:	691b      	ldr	r3, [r3, #16]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	1ad3      	subs	r3, r2, r3
 80103f2:	3301      	adds	r3, #1
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	dc35      	bgt.n	8010464 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80103f8:	4818      	ldr	r0, [pc, #96]	@ (801045c <tcp_receive+0xcfc>)
 80103fa:	f7fd fb57 	bl	800daac <tcp_seg_copy>
 80103fe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	2b00      	cmp	r3, #0
 8010404:	f000 8108 	beq.w	8010618 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010410:	8912      	ldrh	r2, [r2, #8]
 8010412:	441a      	add	r2, r3
 8010414:	4b12      	ldr	r3, [pc, #72]	@ (8010460 <tcp_receive+0xd00>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	1ad3      	subs	r3, r2, r3
 801041a:	2b00      	cmp	r3, #0
 801041c:	dd12      	ble.n	8010444 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801041e:	4b10      	ldr	r3, [pc, #64]	@ (8010460 <tcp_receive+0xd00>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	b29a      	uxth	r2, r3
 8010424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010426:	691b      	ldr	r3, [r3, #16]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	b29b      	uxth	r3, r3
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	b29a      	uxth	r2, r3
 8010430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010432:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010436:	685a      	ldr	r2, [r3, #4]
 8010438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043a:	891b      	ldrh	r3, [r3, #8]
 801043c:	4619      	mov	r1, r3
 801043e:	4610      	mov	r0, r2
 8010440:	f7fb ff10 	bl	800c264 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010446:	69fa      	ldr	r2, [r7, #28]
 8010448:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801044a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801044c:	69f8      	ldr	r0, [r7, #28]
 801044e:	f7ff f883 	bl	800f558 <tcp_oos_insert_segment>
                  }
                  break;
 8010452:	e0e1      	b.n	8010618 <tcp_receive+0xeb8>
 8010454:	200083a8 	.word	0x200083a8
 8010458:	200083a5 	.word	0x200083a5
 801045c:	20008374 	.word	0x20008374
 8010460:	20008398 	.word	0x20008398
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010466:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	f040 80c5 	bne.w	80105fc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010472:	4b7f      	ldr	r3, [pc, #508]	@ (8010670 <tcp_receive+0xf10>)
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010478:	691b      	ldr	r3, [r3, #16]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801047e:	2b00      	cmp	r3, #0
 8010480:	f340 80bc 	ble.w	80105fc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010486:	691b      	ldr	r3, [r3, #16]
 8010488:	899b      	ldrh	r3, [r3, #12]
 801048a:	b29b      	uxth	r3, r3
 801048c:	4618      	mov	r0, r3
 801048e:	f7fa fc1f 	bl	800acd0 <lwip_htons>
 8010492:	4603      	mov	r3, r0
 8010494:	b2db      	uxtb	r3, r3
 8010496:	f003 0301 	and.w	r3, r3, #1
 801049a:	2b00      	cmp	r3, #0
 801049c:	f040 80be 	bne.w	801061c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80104a0:	4874      	ldr	r0, [pc, #464]	@ (8010674 <tcp_receive+0xf14>)
 80104a2:	f7fd fb03 	bl	800daac <tcp_seg_copy>
 80104a6:	4602      	mov	r2, r0
 80104a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104aa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80104ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f000 80b5 	beq.w	8010620 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80104b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80104be:	8912      	ldrh	r2, [r2, #8]
 80104c0:	441a      	add	r2, r3
 80104c2:	4b6b      	ldr	r3, [pc, #428]	@ (8010670 <tcp_receive+0xf10>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	dd12      	ble.n	80104f2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80104cc:	4b68      	ldr	r3, [pc, #416]	@ (8010670 <tcp_receive+0xf10>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d4:	691b      	ldr	r3, [r3, #16]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	b29b      	uxth	r3, r3
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	b29a      	uxth	r2, r3
 80104de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80104e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e4:	685a      	ldr	r2, [r3, #4]
 80104e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e8:	891b      	ldrh	r3, [r3, #8]
 80104ea:	4619      	mov	r1, r3
 80104ec:	4610      	mov	r0, r2
 80104ee:	f7fb feb9 	bl	800c264 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80104f2:	4b61      	ldr	r3, [pc, #388]	@ (8010678 <tcp_receive+0xf18>)
 80104f4:	881b      	ldrh	r3, [r3, #0]
 80104f6:	461a      	mov	r2, r3
 80104f8:	4b5d      	ldr	r3, [pc, #372]	@ (8010670 <tcp_receive+0xf10>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	441a      	add	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010502:	6879      	ldr	r1, [r7, #4]
 8010504:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010506:	440b      	add	r3, r1
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	2b00      	cmp	r3, #0
 801050c:	f340 8088 	ble.w	8010620 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	691b      	ldr	r3, [r3, #16]
 8010516:	899b      	ldrh	r3, [r3, #12]
 8010518:	b29b      	uxth	r3, r3
 801051a:	4618      	mov	r0, r3
 801051c:	f7fa fbd8 	bl	800acd0 <lwip_htons>
 8010520:	4603      	mov	r3, r0
 8010522:	b2db      	uxtb	r3, r3
 8010524:	f003 0301 	and.w	r3, r3, #1
 8010528:	2b00      	cmp	r3, #0
 801052a:	d021      	beq.n	8010570 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801052c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	899b      	ldrh	r3, [r3, #12]
 8010534:	b29b      	uxth	r3, r3
 8010536:	b21b      	sxth	r3, r3
 8010538:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801053c:	b21c      	sxth	r4, r3
 801053e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	691b      	ldr	r3, [r3, #16]
 8010544:	899b      	ldrh	r3, [r3, #12]
 8010546:	b29b      	uxth	r3, r3
 8010548:	4618      	mov	r0, r3
 801054a:	f7fa fbc1 	bl	800acd0 <lwip_htons>
 801054e:	4603      	mov	r3, r0
 8010550:	b2db      	uxtb	r3, r3
 8010552:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010556:	b29b      	uxth	r3, r3
 8010558:	4618      	mov	r0, r3
 801055a:	f7fa fbb9 	bl	800acd0 <lwip_htons>
 801055e:	4603      	mov	r3, r0
 8010560:	b21b      	sxth	r3, r3
 8010562:	4323      	orrs	r3, r4
 8010564:	b21a      	sxth	r2, r3
 8010566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	691b      	ldr	r3, [r3, #16]
 801056c:	b292      	uxth	r2, r2
 801056e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010574:	b29a      	uxth	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801057a:	4413      	add	r3, r2
 801057c:	b299      	uxth	r1, r3
 801057e:	4b3c      	ldr	r3, [pc, #240]	@ (8010670 <tcp_receive+0xf10>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	b29a      	uxth	r2, r3
 8010584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	1a8a      	subs	r2, r1, r2
 801058a:	b292      	uxth	r2, r2
 801058c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801058e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	685a      	ldr	r2, [r3, #4]
 8010594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	891b      	ldrh	r3, [r3, #8]
 801059a:	4619      	mov	r1, r3
 801059c:	4610      	mov	r0, r2
 801059e:	f7fb fe61 	bl	800c264 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80105a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	891c      	ldrh	r4, [r3, #8]
 80105a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	691b      	ldr	r3, [r3, #16]
 80105ae:	899b      	ldrh	r3, [r3, #12]
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7fa fb8c 	bl	800acd0 <lwip_htons>
 80105b8:	4603      	mov	r3, r0
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	f003 0303 	and.w	r3, r3, #3
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d001      	beq.n	80105c8 <tcp_receive+0xe68>
 80105c4:	2301      	movs	r3, #1
 80105c6:	e000      	b.n	80105ca <tcp_receive+0xe6a>
 80105c8:	2300      	movs	r3, #0
 80105ca:	4423      	add	r3, r4
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	4b2a      	ldr	r3, [pc, #168]	@ (8010678 <tcp_receive+0xf18>)
 80105d0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80105d2:	4b29      	ldr	r3, [pc, #164]	@ (8010678 <tcp_receive+0xf18>)
 80105d4:	881b      	ldrh	r3, [r3, #0]
 80105d6:	461a      	mov	r2, r3
 80105d8:	4b25      	ldr	r3, [pc, #148]	@ (8010670 <tcp_receive+0xf10>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	441a      	add	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105e2:	6879      	ldr	r1, [r7, #4]
 80105e4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80105e6:	440b      	add	r3, r1
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d019      	beq.n	8010620 <tcp_receive+0xec0>
 80105ec:	4b23      	ldr	r3, [pc, #140]	@ (801067c <tcp_receive+0xf1c>)
 80105ee:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80105f2:	4923      	ldr	r1, [pc, #140]	@ (8010680 <tcp_receive+0xf20>)
 80105f4:	4823      	ldr	r0, [pc, #140]	@ (8010684 <tcp_receive+0xf24>)
 80105f6:	f005 fc99 	bl	8015f2c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80105fa:	e011      	b.n	8010620 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80105fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010604:	2b00      	cmp	r3, #0
 8010606:	f47f aea5 	bne.w	8010354 <tcp_receive+0xbf4>
 801060a:	e00a      	b.n	8010622 <tcp_receive+0xec2>
                break;
 801060c:	bf00      	nop
 801060e:	e008      	b.n	8010622 <tcp_receive+0xec2>
                break;
 8010610:	bf00      	nop
 8010612:	e006      	b.n	8010622 <tcp_receive+0xec2>
                  break;
 8010614:	bf00      	nop
 8010616:	e004      	b.n	8010622 <tcp_receive+0xec2>
                  break;
 8010618:	bf00      	nop
 801061a:	e002      	b.n	8010622 <tcp_receive+0xec2>
                  break;
 801061c:	bf00      	nop
 801061e:	e000      	b.n	8010622 <tcp_receive+0xec2>
                break;
 8010620:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f001 fa44 	bl	8011ab0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010628:	e003      	b.n	8010632 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f001 fa40 	bl	8011ab0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010630:	e01a      	b.n	8010668 <tcp_receive+0xf08>
 8010632:	e019      	b.n	8010668 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010634:	4b0e      	ldr	r3, [pc, #56]	@ (8010670 <tcp_receive+0xf10>)
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801063c:	1ad3      	subs	r3, r2, r3
 801063e:	2b00      	cmp	r3, #0
 8010640:	db0a      	blt.n	8010658 <tcp_receive+0xef8>
 8010642:	4b0b      	ldr	r3, [pc, #44]	@ (8010670 <tcp_receive+0xf10>)
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801064a:	6879      	ldr	r1, [r7, #4]
 801064c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801064e:	440b      	add	r3, r1
 8010650:	1ad3      	subs	r3, r2, r3
 8010652:	3301      	adds	r3, #1
 8010654:	2b00      	cmp	r3, #0
 8010656:	dd07      	ble.n	8010668 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	8b5b      	ldrh	r3, [r3, #26]
 801065c:	f043 0302 	orr.w	r3, r3, #2
 8010660:	b29a      	uxth	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010666:	e7ff      	b.n	8010668 <tcp_receive+0xf08>
 8010668:	bf00      	nop
 801066a:	3750      	adds	r7, #80	@ 0x50
 801066c:	46bd      	mov	sp, r7
 801066e:	bdb0      	pop	{r4, r5, r7, pc}
 8010670:	20008398 	.word	0x20008398
 8010674:	20008374 	.word	0x20008374
 8010678:	200083a2 	.word	0x200083a2
 801067c:	08018424 	.word	0x08018424
 8010680:	080187cc 	.word	0x080187cc
 8010684:	08018470 	.word	0x08018470

08010688 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801068e:	4b15      	ldr	r3, [pc, #84]	@ (80106e4 <tcp_get_next_optbyte+0x5c>)
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	1c5a      	adds	r2, r3, #1
 8010694:	b291      	uxth	r1, r2
 8010696:	4a13      	ldr	r2, [pc, #76]	@ (80106e4 <tcp_get_next_optbyte+0x5c>)
 8010698:	8011      	strh	r1, [r2, #0]
 801069a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801069c:	4b12      	ldr	r3, [pc, #72]	@ (80106e8 <tcp_get_next_optbyte+0x60>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d004      	beq.n	80106ae <tcp_get_next_optbyte+0x26>
 80106a4:	4b11      	ldr	r3, [pc, #68]	@ (80106ec <tcp_get_next_optbyte+0x64>)
 80106a6:	881b      	ldrh	r3, [r3, #0]
 80106a8:	88fa      	ldrh	r2, [r7, #6]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d208      	bcs.n	80106c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80106ae:	4b10      	ldr	r3, [pc, #64]	@ (80106f0 <tcp_get_next_optbyte+0x68>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	3314      	adds	r3, #20
 80106b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80106b6:	88fb      	ldrh	r3, [r7, #6]
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	4413      	add	r3, r2
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	e00b      	b.n	80106d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80106c0:	88fb      	ldrh	r3, [r7, #6]
 80106c2:	b2da      	uxtb	r2, r3
 80106c4:	4b09      	ldr	r3, [pc, #36]	@ (80106ec <tcp_get_next_optbyte+0x64>)
 80106c6:	881b      	ldrh	r3, [r3, #0]
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80106ce:	4b06      	ldr	r3, [pc, #24]	@ (80106e8 <tcp_get_next_optbyte+0x60>)
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	797b      	ldrb	r3, [r7, #5]
 80106d4:	4413      	add	r3, r2
 80106d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80106d8:	4618      	mov	r0, r3
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr
 80106e4:	20008394 	.word	0x20008394
 80106e8:	20008390 	.word	0x20008390
 80106ec:	2000838e 	.word	0x2000838e
 80106f0:	20008388 	.word	0x20008388

080106f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d106      	bne.n	8010710 <tcp_parseopt+0x1c>
 8010702:	4b32      	ldr	r3, [pc, #200]	@ (80107cc <tcp_parseopt+0xd8>)
 8010704:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010708:	4931      	ldr	r1, [pc, #196]	@ (80107d0 <tcp_parseopt+0xdc>)
 801070a:	4832      	ldr	r0, [pc, #200]	@ (80107d4 <tcp_parseopt+0xe0>)
 801070c:	f005 fc0e 	bl	8015f2c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010710:	4b31      	ldr	r3, [pc, #196]	@ (80107d8 <tcp_parseopt+0xe4>)
 8010712:	881b      	ldrh	r3, [r3, #0]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d056      	beq.n	80107c6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010718:	4b30      	ldr	r3, [pc, #192]	@ (80107dc <tcp_parseopt+0xe8>)
 801071a:	2200      	movs	r2, #0
 801071c:	801a      	strh	r2, [r3, #0]
 801071e:	e046      	b.n	80107ae <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8010720:	f7ff ffb2 	bl	8010688 <tcp_get_next_optbyte>
 8010724:	4603      	mov	r3, r0
 8010726:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	2b02      	cmp	r3, #2
 801072c:	d006      	beq.n	801073c <tcp_parseopt+0x48>
 801072e:	2b02      	cmp	r3, #2
 8010730:	dc2a      	bgt.n	8010788 <tcp_parseopt+0x94>
 8010732:	2b00      	cmp	r3, #0
 8010734:	d042      	beq.n	80107bc <tcp_parseopt+0xc8>
 8010736:	2b01      	cmp	r3, #1
 8010738:	d038      	beq.n	80107ac <tcp_parseopt+0xb8>
 801073a:	e025      	b.n	8010788 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801073c:	f7ff ffa4 	bl	8010688 <tcp_get_next_optbyte>
 8010740:	4603      	mov	r3, r0
 8010742:	2b04      	cmp	r3, #4
 8010744:	d13c      	bne.n	80107c0 <tcp_parseopt+0xcc>
 8010746:	4b25      	ldr	r3, [pc, #148]	@ (80107dc <tcp_parseopt+0xe8>)
 8010748:	881b      	ldrh	r3, [r3, #0]
 801074a:	3301      	adds	r3, #1
 801074c:	4a22      	ldr	r2, [pc, #136]	@ (80107d8 <tcp_parseopt+0xe4>)
 801074e:	8812      	ldrh	r2, [r2, #0]
 8010750:	4293      	cmp	r3, r2
 8010752:	da35      	bge.n	80107c0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010754:	f7ff ff98 	bl	8010688 <tcp_get_next_optbyte>
 8010758:	4603      	mov	r3, r0
 801075a:	021b      	lsls	r3, r3, #8
 801075c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801075e:	f7ff ff93 	bl	8010688 <tcp_get_next_optbyte>
 8010762:	4603      	mov	r3, r0
 8010764:	461a      	mov	r2, r3
 8010766:	89bb      	ldrh	r3, [r7, #12]
 8010768:	4313      	orrs	r3, r2
 801076a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801076c:	89bb      	ldrh	r3, [r7, #12]
 801076e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010772:	d804      	bhi.n	801077e <tcp_parseopt+0x8a>
 8010774:	89bb      	ldrh	r3, [r7, #12]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d001      	beq.n	801077e <tcp_parseopt+0x8a>
 801077a:	89ba      	ldrh	r2, [r7, #12]
 801077c:	e001      	b.n	8010782 <tcp_parseopt+0x8e>
 801077e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010786:	e012      	b.n	80107ae <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010788:	f7ff ff7e 	bl	8010688 <tcp_get_next_optbyte>
 801078c:	4603      	mov	r3, r0
 801078e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010790:	7afb      	ldrb	r3, [r7, #11]
 8010792:	2b01      	cmp	r3, #1
 8010794:	d916      	bls.n	80107c4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010796:	7afb      	ldrb	r3, [r7, #11]
 8010798:	b29a      	uxth	r2, r3
 801079a:	4b10      	ldr	r3, [pc, #64]	@ (80107dc <tcp_parseopt+0xe8>)
 801079c:	881b      	ldrh	r3, [r3, #0]
 801079e:	4413      	add	r3, r2
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	3b02      	subs	r3, #2
 80107a4:	b29a      	uxth	r2, r3
 80107a6:	4b0d      	ldr	r3, [pc, #52]	@ (80107dc <tcp_parseopt+0xe8>)
 80107a8:	801a      	strh	r2, [r3, #0]
 80107aa:	e000      	b.n	80107ae <tcp_parseopt+0xba>
          break;
 80107ac:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80107ae:	4b0b      	ldr	r3, [pc, #44]	@ (80107dc <tcp_parseopt+0xe8>)
 80107b0:	881a      	ldrh	r2, [r3, #0]
 80107b2:	4b09      	ldr	r3, [pc, #36]	@ (80107d8 <tcp_parseopt+0xe4>)
 80107b4:	881b      	ldrh	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d3b2      	bcc.n	8010720 <tcp_parseopt+0x2c>
 80107ba:	e004      	b.n	80107c6 <tcp_parseopt+0xd2>
          return;
 80107bc:	bf00      	nop
 80107be:	e002      	b.n	80107c6 <tcp_parseopt+0xd2>
            return;
 80107c0:	bf00      	nop
 80107c2:	e000      	b.n	80107c6 <tcp_parseopt+0xd2>
            return;
 80107c4:	bf00      	nop
      }
    }
  }
}
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	08018424 	.word	0x08018424
 80107d0:	08018888 	.word	0x08018888
 80107d4:	08018470 	.word	0x08018470
 80107d8:	2000838c 	.word	0x2000838c
 80107dc:	20008394 	.word	0x20008394

080107e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80107e0:	b480      	push	{r7}
 80107e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80107e4:	4b05      	ldr	r3, [pc, #20]	@ (80107fc <tcp_trigger_input_pcb_close+0x1c>)
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	f043 0310 	orr.w	r3, r3, #16
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	4b03      	ldr	r3, [pc, #12]	@ (80107fc <tcp_trigger_input_pcb_close+0x1c>)
 80107f0:	701a      	strb	r2, [r3, #0]
}
 80107f2:	bf00      	nop
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr
 80107fc:	200083a5 	.word	0x200083a5

08010800 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d00a      	beq.n	8010828 <tcp_route+0x28>
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	7a1b      	ldrb	r3, [r3, #8]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d006      	beq.n	8010828 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	7a1b      	ldrb	r3, [r3, #8]
 801081e:	4618      	mov	r0, r3
 8010820:	f7fb fb46 	bl	800beb0 <netif_get_by_index>
 8010824:	4603      	mov	r3, r0
 8010826:	e003      	b.n	8010830 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f003 fc0f 	bl	801404c <ip4_route>
 801082e:	4603      	mov	r3, r0
  }
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010838:	b590      	push	{r4, r7, lr}
 801083a:	b087      	sub	sp, #28
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	603b      	str	r3, [r7, #0]
 8010844:	4613      	mov	r3, r2
 8010846:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d105      	bne.n	801085a <tcp_create_segment+0x22>
 801084e:	4b45      	ldr	r3, [pc, #276]	@ (8010964 <tcp_create_segment+0x12c>)
 8010850:	22a3      	movs	r2, #163	@ 0xa3
 8010852:	4945      	ldr	r1, [pc, #276]	@ (8010968 <tcp_create_segment+0x130>)
 8010854:	4845      	ldr	r0, [pc, #276]	@ (801096c <tcp_create_segment+0x134>)
 8010856:	f005 fb69 	bl	8015f2c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d105      	bne.n	801086c <tcp_create_segment+0x34>
 8010860:	4b40      	ldr	r3, [pc, #256]	@ (8010964 <tcp_create_segment+0x12c>)
 8010862:	22a4      	movs	r2, #164	@ 0xa4
 8010864:	4942      	ldr	r1, [pc, #264]	@ (8010970 <tcp_create_segment+0x138>)
 8010866:	4841      	ldr	r0, [pc, #260]	@ (801096c <tcp_create_segment+0x134>)
 8010868:	f005 fb60 	bl	8015f2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801086c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	b2db      	uxtb	r3, r3
 8010874:	f003 0304 	and.w	r3, r3, #4
 8010878:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801087a:	2003      	movs	r0, #3
 801087c:	f7fa fe9c 	bl	800b5b8 <memp_malloc>
 8010880:	6138      	str	r0, [r7, #16]
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d104      	bne.n	8010892 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010888:	68b8      	ldr	r0, [r7, #8]
 801088a:	f7fb fe71 	bl	800c570 <pbuf_free>
    return NULL;
 801088e:	2300      	movs	r3, #0
 8010890:	e063      	b.n	801095a <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010898:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	2200      	movs	r2, #0
 801089e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	68ba      	ldr	r2, [r7, #8]
 80108a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	891a      	ldrh	r2, [r3, #8]
 80108aa:	7dfb      	ldrb	r3, [r7, #23]
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d205      	bcs.n	80108be <tcp_create_segment+0x86>
 80108b2:	4b2c      	ldr	r3, [pc, #176]	@ (8010964 <tcp_create_segment+0x12c>)
 80108b4:	22b0      	movs	r2, #176	@ 0xb0
 80108b6:	492f      	ldr	r1, [pc, #188]	@ (8010974 <tcp_create_segment+0x13c>)
 80108b8:	482c      	ldr	r0, [pc, #176]	@ (801096c <tcp_create_segment+0x134>)
 80108ba:	f005 fb37 	bl	8015f2c <iprintf>
  seg->len = p->tot_len - optlen;
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	891a      	ldrh	r2, [r3, #8]
 80108c2:	7dfb      	ldrb	r3, [r7, #23]
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	1ad3      	subs	r3, r2, r3
 80108c8:	b29a      	uxth	r2, r3
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	2200      	movs	r2, #0
 80108d2:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80108d4:	2114      	movs	r1, #20
 80108d6:	68b8      	ldr	r0, [r7, #8]
 80108d8:	f7fb fdb4 	bl	800c444 <pbuf_add_header>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d004      	beq.n	80108ec <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80108e2:	6938      	ldr	r0, [r7, #16]
 80108e4:	f7fd f8c9 	bl	800da7a <tcp_seg_free>
    return NULL;
 80108e8:	2300      	movs	r3, #0
 80108ea:	e036      	b.n	801095a <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	685a      	ldr	r2, [r3, #4]
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	8ada      	ldrh	r2, [r3, #22]
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	691c      	ldr	r4, [r3, #16]
 80108fe:	4610      	mov	r0, r2
 8010900:	f7fa f9e6 	bl	800acd0 <lwip_htons>
 8010904:	4603      	mov	r3, r0
 8010906:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	8b1a      	ldrh	r2, [r3, #24]
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	691c      	ldr	r4, [r3, #16]
 8010910:	4610      	mov	r0, r2
 8010912:	f7fa f9dd 	bl	800acd0 <lwip_htons>
 8010916:	4603      	mov	r3, r0
 8010918:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	691c      	ldr	r4, [r3, #16]
 801091e:	6838      	ldr	r0, [r7, #0]
 8010920:	f7fa f9ec 	bl	800acfc <lwip_htonl>
 8010924:	4603      	mov	r3, r0
 8010926:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010928:	7dfb      	ldrb	r3, [r7, #23]
 801092a:	089b      	lsrs	r3, r3, #2
 801092c:	b2db      	uxtb	r3, r3
 801092e:	3305      	adds	r3, #5
 8010930:	b29b      	uxth	r3, r3
 8010932:	031b      	lsls	r3, r3, #12
 8010934:	b29a      	uxth	r2, r3
 8010936:	79fb      	ldrb	r3, [r7, #7]
 8010938:	b29b      	uxth	r3, r3
 801093a:	4313      	orrs	r3, r2
 801093c:	b29a      	uxth	r2, r3
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	691c      	ldr	r4, [r3, #16]
 8010942:	4610      	mov	r0, r2
 8010944:	f7fa f9c4 	bl	800acd0 <lwip_htons>
 8010948:	4603      	mov	r3, r0
 801094a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	691b      	ldr	r3, [r3, #16]
 8010950:	2200      	movs	r2, #0
 8010952:	749a      	strb	r2, [r3, #18]
 8010954:	2200      	movs	r2, #0
 8010956:	74da      	strb	r2, [r3, #19]
  return seg;
 8010958:	693b      	ldr	r3, [r7, #16]
}
 801095a:	4618      	mov	r0, r3
 801095c:	371c      	adds	r7, #28
 801095e:	46bd      	mov	sp, r7
 8010960:	bd90      	pop	{r4, r7, pc}
 8010962:	bf00      	nop
 8010964:	080188a4 	.word	0x080188a4
 8010968:	080188d8 	.word	0x080188d8
 801096c:	080188f8 	.word	0x080188f8
 8010970:	08018920 	.word	0x08018920
 8010974:	08018944 	.word	0x08018944

08010978 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010978:	b590      	push	{r4, r7, lr}
 801097a:	b08b      	sub	sp, #44	@ 0x2c
 801097c:	af02      	add	r7, sp, #8
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	460b      	mov	r3, r1
 8010982:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010984:	2300      	movs	r3, #0
 8010986:	61bb      	str	r3, [r7, #24]
 8010988:	2300      	movs	r3, #0
 801098a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801098c:	2300      	movs	r3, #0
 801098e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d106      	bne.n	80109a4 <tcp_split_unsent_seg+0x2c>
 8010996:	4b97      	ldr	r3, [pc, #604]	@ (8010bf4 <tcp_split_unsent_seg+0x27c>)
 8010998:	f240 324b 	movw	r2, #843	@ 0x34b
 801099c:	4996      	ldr	r1, [pc, #600]	@ (8010bf8 <tcp_split_unsent_seg+0x280>)
 801099e:	4897      	ldr	r0, [pc, #604]	@ (8010bfc <tcp_split_unsent_seg+0x284>)
 80109a0:	f005 fac4 	bl	8015f2c <iprintf>

  useg = pcb->unsent;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d102      	bne.n	80109b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80109b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80109b4:	e119      	b.n	8010bea <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 80109b6:	887b      	ldrh	r3, [r7, #2]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d109      	bne.n	80109d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80109bc:	4b8d      	ldr	r3, [pc, #564]	@ (8010bf4 <tcp_split_unsent_seg+0x27c>)
 80109be:	f240 3253 	movw	r2, #851	@ 0x353
 80109c2:	498f      	ldr	r1, [pc, #572]	@ (8010c00 <tcp_split_unsent_seg+0x288>)
 80109c4:	488d      	ldr	r0, [pc, #564]	@ (8010bfc <tcp_split_unsent_seg+0x284>)
 80109c6:	f005 fab1 	bl	8015f2c <iprintf>
    return ERR_VAL;
 80109ca:	f06f 0305 	mvn.w	r3, #5
 80109ce:	e10c      	b.n	8010bea <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	891b      	ldrh	r3, [r3, #8]
 80109d4:	887a      	ldrh	r2, [r7, #2]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d301      	bcc.n	80109de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80109da:	2300      	movs	r3, #0
 80109dc:	e105      	b.n	8010bea <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109e2:	887a      	ldrh	r2, [r7, #2]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d906      	bls.n	80109f6 <tcp_split_unsent_seg+0x7e>
 80109e8:	4b82      	ldr	r3, [pc, #520]	@ (8010bf4 <tcp_split_unsent_seg+0x27c>)
 80109ea:	f240 325b 	movw	r2, #859	@ 0x35b
 80109ee:	4985      	ldr	r1, [pc, #532]	@ (8010c04 <tcp_split_unsent_seg+0x28c>)
 80109f0:	4882      	ldr	r0, [pc, #520]	@ (8010bfc <tcp_split_unsent_seg+0x284>)
 80109f2:	f005 fa9b 	bl	8015f2c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	891b      	ldrh	r3, [r3, #8]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d106      	bne.n	8010a0c <tcp_split_unsent_seg+0x94>
 80109fe:	4b7d      	ldr	r3, [pc, #500]	@ (8010bf4 <tcp_split_unsent_seg+0x27c>)
 8010a00:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010a04:	4980      	ldr	r1, [pc, #512]	@ (8010c08 <tcp_split_unsent_seg+0x290>)
 8010a06:	487d      	ldr	r0, [pc, #500]	@ (8010bfc <tcp_split_unsent_seg+0x284>)
 8010a08:	f005 fa90 	bl	8015f2c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	7b1b      	ldrb	r3, [r3, #12]
 8010a10:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010a12:	7bfb      	ldrb	r3, [r7, #15]
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	f003 0304 	and.w	r3, r3, #4
 8010a1c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	891a      	ldrh	r2, [r3, #8]
 8010a22:	887b      	ldrh	r3, [r7, #2]
 8010a24:	1ad3      	subs	r3, r2, r3
 8010a26:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010a28:	7bbb      	ldrb	r3, [r7, #14]
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	89bb      	ldrh	r3, [r7, #12]
 8010a2e:	4413      	add	r3, r2
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010a36:	4619      	mov	r1, r3
 8010a38:	2036      	movs	r0, #54	@ 0x36
 8010a3a:	f7fb fab5 	bl	800bfa8 <pbuf_alloc>
 8010a3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f000 80ba 	beq.w	8010bbc <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	891a      	ldrh	r2, [r3, #8]
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	891b      	ldrh	r3, [r3, #8]
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	b29a      	uxth	r2, r3
 8010a56:	887b      	ldrh	r3, [r7, #2]
 8010a58:	4413      	add	r3, r2
 8010a5a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	6858      	ldr	r0, [r3, #4]
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	685a      	ldr	r2, [r3, #4]
 8010a64:	7bbb      	ldrb	r3, [r7, #14]
 8010a66:	18d1      	adds	r1, r2, r3
 8010a68:	897b      	ldrh	r3, [r7, #10]
 8010a6a:	89ba      	ldrh	r2, [r7, #12]
 8010a6c:	f7fb ff7a 	bl	800c964 <pbuf_copy_partial>
 8010a70:	4603      	mov	r3, r0
 8010a72:	461a      	mov	r2, r3
 8010a74:	89bb      	ldrh	r3, [r7, #12]
 8010a76:	4293      	cmp	r3, r2
 8010a78:	f040 80a2 	bne.w	8010bc0 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	691b      	ldr	r3, [r3, #16]
 8010a80:	899b      	ldrh	r3, [r3, #12]
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7fa f923 	bl	800acd0 <lwip_htons>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a92:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010a94:	2300      	movs	r3, #0
 8010a96:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8010a98:	7ffb      	ldrb	r3, [r7, #31]
 8010a9a:	f003 0308 	and.w	r3, r3, #8
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d007      	beq.n	8010ab2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010aa2:	7ffb      	ldrb	r3, [r7, #31]
 8010aa4:	f023 0308 	bic.w	r3, r3, #8
 8010aa8:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8010aaa:	7fbb      	ldrb	r3, [r7, #30]
 8010aac:	f043 0308 	orr.w	r3, r3, #8
 8010ab0:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8010ab2:	7ffb      	ldrb	r3, [r7, #31]
 8010ab4:	f003 0301 	and.w	r3, r3, #1
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d007      	beq.n	8010acc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010abc:	7ffb      	ldrb	r3, [r7, #31]
 8010abe:	f023 0301 	bic.w	r3, r3, #1
 8010ac2:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8010ac4:	7fbb      	ldrb	r3, [r7, #30]
 8010ac6:	f043 0301 	orr.w	r3, r3, #1
 8010aca:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	691b      	ldr	r3, [r3, #16]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fa f912 	bl	800acfc <lwip_htonl>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	887b      	ldrh	r3, [r7, #2]
 8010adc:	18d1      	adds	r1, r2, r3
 8010ade:	7fba      	ldrb	r2, [r7, #30]
 8010ae0:	7bfb      	ldrb	r3, [r7, #15]
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	6939      	ldr	r1, [r7, #16]
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7ff fea5 	bl	8010838 <tcp_create_segment>
 8010aee:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d066      	beq.n	8010bc4 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fb fdc0 	bl	800c680 <pbuf_clen>
 8010b00:	4603      	mov	r3, r0
 8010b02:	461a      	mov	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b0a:	1a9b      	subs	r3, r3, r2
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	6858      	ldr	r0, [r3, #4]
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	891a      	ldrh	r2, [r3, #8]
 8010b1e:	89bb      	ldrh	r3, [r7, #12]
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	4619      	mov	r1, r3
 8010b26:	f7fb fb9d 	bl	800c264 <pbuf_realloc>
  useg->len -= remainder;
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	891a      	ldrh	r2, [r3, #8]
 8010b2e:	89bb      	ldrh	r3, [r7, #12]
 8010b30:	1ad3      	subs	r3, r2, r3
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	691b      	ldr	r3, [r3, #16]
 8010b3c:	899b      	ldrh	r3, [r3, #12]
 8010b3e:	b29c      	uxth	r4, r3
 8010b40:	7ffb      	ldrb	r3, [r7, #31]
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7fa f8c3 	bl	800acd0 <lwip_htons>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	691b      	ldr	r3, [r3, #16]
 8010b52:	4322      	orrs	r2, r4
 8010b54:	b292      	uxth	r2, r2
 8010b56:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7fb fd8c 	bl	800c680 <pbuf_clen>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b72:	4413      	add	r3, r2
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fb fd7d 	bl	800c680 <pbuf_clen>
 8010b86:	4603      	mov	r3, r0
 8010b88:	461a      	mov	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b90:	4413      	add	r3, r2
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	69bb      	ldr	r3, [r7, #24]
 8010ba0:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	69ba      	ldr	r2, [r7, #24]
 8010ba6:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d103      	bne.n	8010bb8 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	e016      	b.n	8010bea <tcp_split_unsent_seg+0x272>
    goto memerr;
 8010bbc:	bf00      	nop
 8010bbe:	e002      	b.n	8010bc6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8010bc0:	bf00      	nop
 8010bc2:	e000      	b.n	8010bc6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8010bc4:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d006      	beq.n	8010bda <tcp_split_unsent_seg+0x262>
 8010bcc:	4b09      	ldr	r3, [pc, #36]	@ (8010bf4 <tcp_split_unsent_seg+0x27c>)
 8010bce:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010bd2:	490e      	ldr	r1, [pc, #56]	@ (8010c0c <tcp_split_unsent_seg+0x294>)
 8010bd4:	4809      	ldr	r0, [pc, #36]	@ (8010bfc <tcp_split_unsent_seg+0x284>)
 8010bd6:	f005 f9a9 	bl	8015f2c <iprintf>
  if (p != NULL) {
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d002      	beq.n	8010be6 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8010be0:	6938      	ldr	r0, [r7, #16]
 8010be2:	f7fb fcc5 	bl	800c570 <pbuf_free>
  }

  return ERR_MEM;
 8010be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3724      	adds	r7, #36	@ 0x24
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd90      	pop	{r4, r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	080188a4 	.word	0x080188a4
 8010bf8:	08018c94 	.word	0x08018c94
 8010bfc:	080188f8 	.word	0x080188f8
 8010c00:	08018cb8 	.word	0x08018cb8
 8010c04:	08018cdc 	.word	0x08018cdc
 8010c08:	08018cec 	.word	0x08018cec
 8010c0c:	08018cfc 	.word	0x08018cfc

08010c10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010c10:	b590      	push	{r4, r7, lr}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <tcp_send_fin+0x1c>
 8010c1e:	4b21      	ldr	r3, [pc, #132]	@ (8010ca4 <tcp_send_fin+0x94>)
 8010c20:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010c24:	4920      	ldr	r1, [pc, #128]	@ (8010ca8 <tcp_send_fin+0x98>)
 8010c26:	4821      	ldr	r0, [pc, #132]	@ (8010cac <tcp_send_fin+0x9c>)
 8010c28:	f005 f980 	bl	8015f2c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d02e      	beq.n	8010c92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c38:	60fb      	str	r3, [r7, #12]
 8010c3a:	e002      	b.n	8010c42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1f8      	bne.n	8010c3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	691b      	ldr	r3, [r3, #16]
 8010c4e:	899b      	ldrh	r3, [r3, #12]
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7fa f83c 	bl	800acd0 <lwip_htons>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	f003 0307 	and.w	r3, r3, #7
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d116      	bne.n	8010c92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	899b      	ldrh	r3, [r3, #12]
 8010c6a:	b29c      	uxth	r4, r3
 8010c6c:	2001      	movs	r0, #1
 8010c6e:	f7fa f82f 	bl	800acd0 <lwip_htons>
 8010c72:	4603      	mov	r3, r0
 8010c74:	461a      	mov	r2, r3
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	691b      	ldr	r3, [r3, #16]
 8010c7a:	4322      	orrs	r2, r4
 8010c7c:	b292      	uxth	r2, r2
 8010c7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	8b5b      	ldrh	r3, [r3, #26]
 8010c84:	f043 0320 	orr.w	r3, r3, #32
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	e004      	b.n	8010c9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010c92:	2101      	movs	r1, #1
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 f80b 	bl	8010cb0 <tcp_enqueue_flags>
 8010c9a:	4603      	mov	r3, r0
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3714      	adds	r7, #20
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd90      	pop	{r4, r7, pc}
 8010ca4:	080188a4 	.word	0x080188a4
 8010ca8:	08018d08 	.word	0x08018d08
 8010cac:	080188f8 	.word	0x080188f8

08010cb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b088      	sub	sp, #32
 8010cb4:	af02      	add	r7, sp, #8
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010cc4:	78fb      	ldrb	r3, [r7, #3]
 8010cc6:	f003 0303 	and.w	r3, r3, #3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d106      	bne.n	8010cdc <tcp_enqueue_flags+0x2c>
 8010cce:	4b67      	ldr	r3, [pc, #412]	@ (8010e6c <tcp_enqueue_flags+0x1bc>)
 8010cd0:	f240 4211 	movw	r2, #1041	@ 0x411
 8010cd4:	4966      	ldr	r1, [pc, #408]	@ (8010e70 <tcp_enqueue_flags+0x1c0>)
 8010cd6:	4867      	ldr	r0, [pc, #412]	@ (8010e74 <tcp_enqueue_flags+0x1c4>)
 8010cd8:	f005 f928 	bl	8015f2c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d106      	bne.n	8010cf0 <tcp_enqueue_flags+0x40>
 8010ce2:	4b62      	ldr	r3, [pc, #392]	@ (8010e6c <tcp_enqueue_flags+0x1bc>)
 8010ce4:	f240 4213 	movw	r2, #1043	@ 0x413
 8010ce8:	4963      	ldr	r1, [pc, #396]	@ (8010e78 <tcp_enqueue_flags+0x1c8>)
 8010cea:	4862      	ldr	r0, [pc, #392]	@ (8010e74 <tcp_enqueue_flags+0x1c4>)
 8010cec:	f005 f91e 	bl	8015f2c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010cf0:	78fb      	ldrb	r3, [r7, #3]
 8010cf2:	f003 0302 	and.w	r3, r3, #2
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d001      	beq.n	8010cfe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010cfe:	7dfb      	ldrb	r3, [r7, #23]
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	f003 0304 	and.w	r3, r3, #4
 8010d08:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010d0a:	7dbb      	ldrb	r3, [r7, #22]
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010d12:	4619      	mov	r1, r3
 8010d14:	2036      	movs	r0, #54	@ 0x36
 8010d16:	f7fb f947 	bl	800bfa8 <pbuf_alloc>
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d109      	bne.n	8010d36 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	8b5b      	ldrh	r3, [r3, #26]
 8010d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010d34:	e095      	b.n	8010e62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	895a      	ldrh	r2, [r3, #10]
 8010d3a:	7dbb      	ldrb	r3, [r7, #22]
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d206      	bcs.n	8010d50 <tcp_enqueue_flags+0xa0>
 8010d42:	4b4a      	ldr	r3, [pc, #296]	@ (8010e6c <tcp_enqueue_flags+0x1bc>)
 8010d44:	f240 4239 	movw	r2, #1081	@ 0x439
 8010d48:	494c      	ldr	r1, [pc, #304]	@ (8010e7c <tcp_enqueue_flags+0x1cc>)
 8010d4a:	484a      	ldr	r0, [pc, #296]	@ (8010e74 <tcp_enqueue_flags+0x1c4>)
 8010d4c:	f005 f8ee 	bl	8015f2c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010d54:	78fa      	ldrb	r2, [r7, #3]
 8010d56:	7dfb      	ldrb	r3, [r7, #23]
 8010d58:	9300      	str	r3, [sp, #0]
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	68f9      	ldr	r1, [r7, #12]
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ff fd6a 	bl	8010838 <tcp_create_segment>
 8010d64:	60b8      	str	r0, [r7, #8]
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d109      	bne.n	8010d80 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	8b5b      	ldrh	r3, [r3, #26]
 8010d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d74:	b29a      	uxth	r2, r3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010d7e:	e070      	b.n	8010e62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	691b      	ldr	r3, [r3, #16]
 8010d84:	f003 0303 	and.w	r3, r3, #3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d006      	beq.n	8010d9a <tcp_enqueue_flags+0xea>
 8010d8c:	4b37      	ldr	r3, [pc, #220]	@ (8010e6c <tcp_enqueue_flags+0x1bc>)
 8010d8e:	f240 4242 	movw	r2, #1090	@ 0x442
 8010d92:	493b      	ldr	r1, [pc, #236]	@ (8010e80 <tcp_enqueue_flags+0x1d0>)
 8010d94:	4837      	ldr	r0, [pc, #220]	@ (8010e74 <tcp_enqueue_flags+0x1c4>)
 8010d96:	f005 f8c9 	bl	8015f2c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	891b      	ldrh	r3, [r3, #8]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d006      	beq.n	8010db0 <tcp_enqueue_flags+0x100>
 8010da2:	4b32      	ldr	r3, [pc, #200]	@ (8010e6c <tcp_enqueue_flags+0x1bc>)
 8010da4:	f240 4243 	movw	r2, #1091	@ 0x443
 8010da8:	4936      	ldr	r1, [pc, #216]	@ (8010e84 <tcp_enqueue_flags+0x1d4>)
 8010daa:	4832      	ldr	r0, [pc, #200]	@ (8010e74 <tcp_enqueue_flags+0x1c4>)
 8010dac:	f005 f8be 	bl	8015f2c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d103      	bne.n	8010dc0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	68ba      	ldr	r2, [r7, #8]
 8010dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010dbe:	e00d      	b.n	8010ddc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dc4:	613b      	str	r3, [r7, #16]
 8010dc6:	e002      	b.n	8010dce <tcp_enqueue_flags+0x11e>
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	613b      	str	r3, [r7, #16]
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1f8      	bne.n	8010dc8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	68ba      	ldr	r2, [r7, #8]
 8010dda:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2200      	movs	r2, #0
 8010de0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010de4:	78fb      	ldrb	r3, [r7, #3]
 8010de6:	f003 0302 	and.w	r3, r3, #2
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d104      	bne.n	8010df8 <tcp_enqueue_flags+0x148>
 8010dee:	78fb      	ldrb	r3, [r7, #3]
 8010df0:	f003 0301 	and.w	r3, r3, #1
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d004      	beq.n	8010e02 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010dfc:	1c5a      	adds	r2, r3, #1
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010e02:	78fb      	ldrb	r3, [r7, #3]
 8010e04:	f003 0301 	and.w	r3, r3, #1
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d006      	beq.n	8010e1a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	8b5b      	ldrh	r3, [r3, #26]
 8010e10:	f043 0320 	orr.w	r3, r3, #32
 8010e14:	b29a      	uxth	r2, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fb fc2e 	bl	800c680 <pbuf_clen>
 8010e24:	4603      	mov	r3, r0
 8010e26:	461a      	mov	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010e2e:	4413      	add	r3, r2
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00e      	beq.n	8010e60 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d10a      	bne.n	8010e60 <tcp_enqueue_flags+0x1b0>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d106      	bne.n	8010e60 <tcp_enqueue_flags+0x1b0>
 8010e52:	4b06      	ldr	r3, [pc, #24]	@ (8010e6c <tcp_enqueue_flags+0x1bc>)
 8010e54:	f240 4265 	movw	r2, #1125	@ 0x465
 8010e58:	490b      	ldr	r1, [pc, #44]	@ (8010e88 <tcp_enqueue_flags+0x1d8>)
 8010e5a:	4806      	ldr	r0, [pc, #24]	@ (8010e74 <tcp_enqueue_flags+0x1c4>)
 8010e5c:	f005 f866 	bl	8015f2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010e60:	2300      	movs	r3, #0
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3718      	adds	r7, #24
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	080188a4 	.word	0x080188a4
 8010e70:	08018d24 	.word	0x08018d24
 8010e74:	080188f8 	.word	0x080188f8
 8010e78:	08018d7c 	.word	0x08018d7c
 8010e7c:	08018d9c 	.word	0x08018d9c
 8010e80:	08018dd8 	.word	0x08018dd8
 8010e84:	08018df0 	.word	0x08018df0
 8010e88:	08018e1c 	.word	0x08018e1c

08010e8c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010e8c:	b5b0      	push	{r4, r5, r7, lr}
 8010e8e:	b08a      	sub	sp, #40	@ 0x28
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d106      	bne.n	8010ea8 <tcp_output+0x1c>
 8010e9a:	4b8a      	ldr	r3, [pc, #552]	@ (80110c4 <tcp_output+0x238>)
 8010e9c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010ea0:	4989      	ldr	r1, [pc, #548]	@ (80110c8 <tcp_output+0x23c>)
 8010ea2:	488a      	ldr	r0, [pc, #552]	@ (80110cc <tcp_output+0x240>)
 8010ea4:	f005 f842 	bl	8015f2c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	7d1b      	ldrb	r3, [r3, #20]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d106      	bne.n	8010ebe <tcp_output+0x32>
 8010eb0:	4b84      	ldr	r3, [pc, #528]	@ (80110c4 <tcp_output+0x238>)
 8010eb2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010eb6:	4986      	ldr	r1, [pc, #536]	@ (80110d0 <tcp_output+0x244>)
 8010eb8:	4884      	ldr	r0, [pc, #528]	@ (80110cc <tcp_output+0x240>)
 8010eba:	f005 f837 	bl	8015f2c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010ebe:	4b85      	ldr	r3, [pc, #532]	@ (80110d4 <tcp_output+0x248>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d101      	bne.n	8010ecc <tcp_output+0x40>
    return ERR_OK;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	e1d1      	b.n	8011270 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	bf28      	it	cs
 8010edc:	4613      	movcs	r3, r2
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ee6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d10b      	bne.n	8010f06 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	8b5b      	ldrh	r3, [r3, #26]
 8010ef2:	f003 0302 	and.w	r3, r3, #2
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	f000 81ad 	beq.w	8011256 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 fdd7 	bl	8011ab0 <tcp_send_empty_ack>
 8010f02:	4603      	mov	r3, r0
 8010f04:	e1b4      	b.n	8011270 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010f06:	6879      	ldr	r1, [r7, #4]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	3304      	adds	r3, #4
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f7ff fc76 	bl	8010800 <tcp_route>
 8010f14:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d102      	bne.n	8010f22 <tcp_output+0x96>
    return ERR_RTE;
 8010f1c:	f06f 0303 	mvn.w	r3, #3
 8010f20:	e1a6      	b.n	8011270 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d003      	beq.n	8010f30 <tcp_output+0xa4>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d111      	bne.n	8010f54 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d002      	beq.n	8010f3c <tcp_output+0xb0>
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	3304      	adds	r3, #4
 8010f3a:	e000      	b.n	8010f3e <tcp_output+0xb2>
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d102      	bne.n	8010f4c <tcp_output+0xc0>
      return ERR_RTE;
 8010f46:	f06f 0303 	mvn.w	r3, #3
 8010f4a:	e191      	b.n	8011270 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f56:	691b      	ldr	r3, [r3, #16]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7f9 fece 	bl	800acfc <lwip_htonl>
 8010f60:	4602      	mov	r2, r0
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f66:	1ad3      	subs	r3, r2, r3
 8010f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f6a:	8912      	ldrh	r2, [r2, #8]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	69ba      	ldr	r2, [r7, #24]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d227      	bcs.n	8010fc4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d114      	bne.n	8010fac <tcp_output+0x120>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d110      	bne.n	8010fac <tcp_output+0x120>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d10b      	bne.n	8010fac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	8b5b      	ldrh	r3, [r3, #26]
 8010fb0:	f003 0302 	and.w	r3, r3, #2
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f000 8150 	beq.w	801125a <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 fd78 	bl	8011ab0 <tcp_send_empty_ack>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	e155      	b.n	8011270 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010fd0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010fd2:	6a3b      	ldr	r3, [r7, #32]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f000 811f 	beq.w	8011218 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8010fda:	e002      	b.n	8010fe2 <tcp_output+0x156>
 8010fdc:	6a3b      	ldr	r3, [r7, #32]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	623b      	str	r3, [r7, #32]
 8010fe2:	6a3b      	ldr	r3, [r7, #32]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1f8      	bne.n	8010fdc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010fea:	e115      	b.n	8011218 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fee:	691b      	ldr	r3, [r3, #16]
 8010ff0:	899b      	ldrh	r3, [r3, #12]
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7f9 fe6b 	bl	800acd0 <lwip_htons>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	f003 0304 	and.w	r3, r3, #4
 8011002:	2b00      	cmp	r3, #0
 8011004:	d006      	beq.n	8011014 <tcp_output+0x188>
 8011006:	4b2f      	ldr	r3, [pc, #188]	@ (80110c4 <tcp_output+0x238>)
 8011008:	f240 5236 	movw	r2, #1334	@ 0x536
 801100c:	4932      	ldr	r1, [pc, #200]	@ (80110d8 <tcp_output+0x24c>)
 801100e:	482f      	ldr	r0, [pc, #188]	@ (80110cc <tcp_output+0x240>)
 8011010:	f004 ff8c 	bl	8015f2c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011018:	2b00      	cmp	r3, #0
 801101a:	d01f      	beq.n	801105c <tcp_output+0x1d0>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	8b5b      	ldrh	r3, [r3, #26]
 8011020:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011024:	2b00      	cmp	r3, #0
 8011026:	d119      	bne.n	801105c <tcp_output+0x1d0>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801102c:	2b00      	cmp	r3, #0
 801102e:	d00b      	beq.n	8011048 <tcp_output+0x1bc>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d110      	bne.n	801105c <tcp_output+0x1d0>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801103e:	891a      	ldrh	r2, [r3, #8]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011044:	429a      	cmp	r2, r3
 8011046:	d209      	bcs.n	801105c <tcp_output+0x1d0>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801104e:	2b00      	cmp	r3, #0
 8011050:	d004      	beq.n	801105c <tcp_output+0x1d0>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011058:	2b08      	cmp	r3, #8
 801105a:	d901      	bls.n	8011060 <tcp_output+0x1d4>
 801105c:	2301      	movs	r3, #1
 801105e:	e000      	b.n	8011062 <tcp_output+0x1d6>
 8011060:	2300      	movs	r3, #0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	8b5b      	ldrh	r3, [r3, #26]
 801106a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801106e:	2b00      	cmp	r3, #0
 8011070:	f000 80e7 	beq.w	8011242 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	7d1b      	ldrb	r3, [r3, #20]
 8011078:	2b02      	cmp	r3, #2
 801107a:	d00d      	beq.n	8011098 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107e:	691b      	ldr	r3, [r3, #16]
 8011080:	899b      	ldrh	r3, [r3, #12]
 8011082:	b29c      	uxth	r4, r3
 8011084:	2010      	movs	r0, #16
 8011086:	f7f9 fe23 	bl	800acd0 <lwip_htons>
 801108a:	4603      	mov	r3, r0
 801108c:	461a      	mov	r2, r3
 801108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011090:	691b      	ldr	r3, [r3, #16]
 8011092:	4322      	orrs	r2, r4
 8011094:	b292      	uxth	r2, r2
 8011096:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011098:	697a      	ldr	r2, [r7, #20]
 801109a:	6879      	ldr	r1, [r7, #4]
 801109c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801109e:	f000 f90b 	bl	80112b8 <tcp_output_segment>
 80110a2:	4603      	mov	r3, r0
 80110a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80110a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d016      	beq.n	80110dc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	8b5b      	ldrh	r3, [r3, #26]
 80110b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	835a      	strh	r2, [r3, #26]
      return err;
 80110bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110c0:	e0d6      	b.n	8011270 <tcp_output+0x3e4>
 80110c2:	bf00      	nop
 80110c4:	080188a4 	.word	0x080188a4
 80110c8:	08018e44 	.word	0x08018e44
 80110cc:	080188f8 	.word	0x080188f8
 80110d0:	08018e5c 	.word	0x08018e5c
 80110d4:	200083ac 	.word	0x200083ac
 80110d8:	08018e84 	.word	0x08018e84
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80110dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110de:	2200      	movs	r2, #0
 80110e0:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80110e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	7d1b      	ldrb	r3, [r3, #20]
 80110ee:	2b02      	cmp	r3, #2
 80110f0:	d006      	beq.n	8011100 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	8b5b      	ldrh	r3, [r3, #26]
 80110f6:	f023 0303 	bic.w	r3, r3, #3
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011102:	691b      	ldr	r3, [r3, #16]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	4618      	mov	r0, r3
 8011108:	f7f9 fdf8 	bl	800acfc <lwip_htonl>
 801110c:	4604      	mov	r4, r0
 801110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011110:	891b      	ldrh	r3, [r3, #8]
 8011112:	461d      	mov	r5, r3
 8011114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011116:	691b      	ldr	r3, [r3, #16]
 8011118:	899b      	ldrh	r3, [r3, #12]
 801111a:	b29b      	uxth	r3, r3
 801111c:	4618      	mov	r0, r3
 801111e:	f7f9 fdd7 	bl	800acd0 <lwip_htons>
 8011122:	4603      	mov	r3, r0
 8011124:	b2db      	uxtb	r3, r3
 8011126:	f003 0303 	and.w	r3, r3, #3
 801112a:	2b00      	cmp	r3, #0
 801112c:	d001      	beq.n	8011132 <tcp_output+0x2a6>
 801112e:	2301      	movs	r3, #1
 8011130:	e000      	b.n	8011134 <tcp_output+0x2a8>
 8011132:	2300      	movs	r3, #0
 8011134:	442b      	add	r3, r5
 8011136:	4423      	add	r3, r4
 8011138:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	1ad3      	subs	r3, r2, r3
 8011142:	2b00      	cmp	r3, #0
 8011144:	da02      	bge.n	801114c <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	68ba      	ldr	r2, [r7, #8]
 801114a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801114e:	891b      	ldrh	r3, [r3, #8]
 8011150:	461c      	mov	r4, r3
 8011152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011154:	691b      	ldr	r3, [r3, #16]
 8011156:	899b      	ldrh	r3, [r3, #12]
 8011158:	b29b      	uxth	r3, r3
 801115a:	4618      	mov	r0, r3
 801115c:	f7f9 fdb8 	bl	800acd0 <lwip_htons>
 8011160:	4603      	mov	r3, r0
 8011162:	b2db      	uxtb	r3, r3
 8011164:	f003 0303 	and.w	r3, r3, #3
 8011168:	2b00      	cmp	r3, #0
 801116a:	d001      	beq.n	8011170 <tcp_output+0x2e4>
 801116c:	2301      	movs	r3, #1
 801116e:	e000      	b.n	8011172 <tcp_output+0x2e6>
 8011170:	2300      	movs	r3, #0
 8011172:	4423      	add	r3, r4
 8011174:	2b00      	cmp	r3, #0
 8011176:	d049      	beq.n	801120c <tcp_output+0x380>
      seg->next = NULL;
 8011178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801117a:	2200      	movs	r2, #0
 801117c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011182:	2b00      	cmp	r3, #0
 8011184:	d105      	bne.n	8011192 <tcp_output+0x306>
        pcb->unacked = seg;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801118a:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118e:	623b      	str	r3, [r7, #32]
 8011190:	e03f      	b.n	8011212 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011194:	691b      	ldr	r3, [r3, #16]
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	4618      	mov	r0, r3
 801119a:	f7f9 fdaf 	bl	800acfc <lwip_htonl>
 801119e:	4604      	mov	r4, r0
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	691b      	ldr	r3, [r3, #16]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7f9 fda8 	bl	800acfc <lwip_htonl>
 80111ac:	4603      	mov	r3, r0
 80111ae:	1ae3      	subs	r3, r4, r3
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	da24      	bge.n	80111fe <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	3370      	adds	r3, #112	@ 0x70
 80111b8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80111ba:	e002      	b.n	80111c2 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80111bc:	69fb      	ldr	r3, [r7, #28]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80111c2:	69fb      	ldr	r3, [r7, #28]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d011      	beq.n	80111ee <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	691b      	ldr	r3, [r3, #16]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7f9 fd92 	bl	800acfc <lwip_htonl>
 80111d8:	4604      	mov	r4, r0
 80111da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111dc:	691b      	ldr	r3, [r3, #16]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7f9 fd8b 	bl	800acfc <lwip_htonl>
 80111e6:	4603      	mov	r3, r0
 80111e8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	dbe6      	blt.n	80111bc <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	681a      	ldr	r2, [r3, #0]
 80111f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111fa:	601a      	str	r2, [r3, #0]
 80111fc:	e009      	b.n	8011212 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80111fe:	6a3b      	ldr	r3, [r7, #32]
 8011200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011202:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011204:	6a3b      	ldr	r3, [r7, #32]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	623b      	str	r3, [r7, #32]
 801120a:	e002      	b.n	8011212 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801120c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801120e:	f7fc fc34 	bl	800da7a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011216:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8011218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801121a:	2b00      	cmp	r3, #0
 801121c:	d012      	beq.n	8011244 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011220:	691b      	ldr	r3, [r3, #16]
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	4618      	mov	r0, r3
 8011226:	f7f9 fd69 	bl	800acfc <lwip_htonl>
 801122a:	4602      	mov	r2, r0
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011234:	8912      	ldrh	r2, [r2, #8]
 8011236:	4413      	add	r3, r2
  while (seg != NULL &&
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	429a      	cmp	r2, r3
 801123c:	f4bf aed6 	bcs.w	8010fec <tcp_output+0x160>
 8011240:	e000      	b.n	8011244 <tcp_output+0x3b8>
      break;
 8011242:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011248:	2b00      	cmp	r3, #0
 801124a:	d108      	bne.n	801125e <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011254:	e004      	b.n	8011260 <tcp_output+0x3d4>
    goto output_done;
 8011256:	bf00      	nop
 8011258:	e002      	b.n	8011260 <tcp_output+0x3d4>
    goto output_done;
 801125a:	bf00      	nop
 801125c:	e000      	b.n	8011260 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801125e:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	8b5b      	ldrh	r3, [r3, #26]
 8011264:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011268:	b29a      	uxth	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801126e:	2300      	movs	r3, #0
}
 8011270:	4618      	mov	r0, r3
 8011272:	3728      	adds	r7, #40	@ 0x28
 8011274:	46bd      	mov	sp, r7
 8011276:	bdb0      	pop	{r4, r5, r7, pc}

08011278 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d106      	bne.n	8011294 <tcp_output_segment_busy+0x1c>
 8011286:	4b09      	ldr	r3, [pc, #36]	@ (80112ac <tcp_output_segment_busy+0x34>)
 8011288:	f240 529a 	movw	r2, #1434	@ 0x59a
 801128c:	4908      	ldr	r1, [pc, #32]	@ (80112b0 <tcp_output_segment_busy+0x38>)
 801128e:	4809      	ldr	r0, [pc, #36]	@ (80112b4 <tcp_output_segment_busy+0x3c>)
 8011290:	f004 fe4c 	bl	8015f2c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	7b9b      	ldrb	r3, [r3, #14]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d001      	beq.n	80112a2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801129e:	2301      	movs	r3, #1
 80112a0:	e000      	b.n	80112a4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80112a2:	2300      	movs	r3, #0
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3708      	adds	r7, #8
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	080188a4 	.word	0x080188a4
 80112b0:	08018e9c 	.word	0x08018e9c
 80112b4:	080188f8 	.word	0x080188f8

080112b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80112b8:	b5b0      	push	{r4, r5, r7, lr}
 80112ba:	b08c      	sub	sp, #48	@ 0x30
 80112bc:	af04      	add	r7, sp, #16
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d106      	bne.n	80112d8 <tcp_output_segment+0x20>
 80112ca:	4b64      	ldr	r3, [pc, #400]	@ (801145c <tcp_output_segment+0x1a4>)
 80112cc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80112d0:	4963      	ldr	r1, [pc, #396]	@ (8011460 <tcp_output_segment+0x1a8>)
 80112d2:	4864      	ldr	r0, [pc, #400]	@ (8011464 <tcp_output_segment+0x1ac>)
 80112d4:	f004 fe2a 	bl	8015f2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <tcp_output_segment+0x34>
 80112de:	4b5f      	ldr	r3, [pc, #380]	@ (801145c <tcp_output_segment+0x1a4>)
 80112e0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80112e4:	4960      	ldr	r1, [pc, #384]	@ (8011468 <tcp_output_segment+0x1b0>)
 80112e6:	485f      	ldr	r0, [pc, #380]	@ (8011464 <tcp_output_segment+0x1ac>)
 80112e8:	f004 fe20 	bl	8015f2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d106      	bne.n	8011300 <tcp_output_segment+0x48>
 80112f2:	4b5a      	ldr	r3, [pc, #360]	@ (801145c <tcp_output_segment+0x1a4>)
 80112f4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80112f8:	495c      	ldr	r1, [pc, #368]	@ (801146c <tcp_output_segment+0x1b4>)
 80112fa:	485a      	ldr	r0, [pc, #360]	@ (8011464 <tcp_output_segment+0x1ac>)
 80112fc:	f004 fe16 	bl	8015f2c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f7ff ffb9 	bl	8011278 <tcp_output_segment_busy>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	d001      	beq.n	8011310 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	e0a1      	b.n	8011454 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	691c      	ldr	r4, [r3, #16]
 8011318:	4610      	mov	r0, r2
 801131a:	f7f9 fcef 	bl	800acfc <lwip_htonl>
 801131e:	4603      	mov	r3, r0
 8011320:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	691c      	ldr	r4, [r3, #16]
 801132a:	4610      	mov	r0, r2
 801132c:	f7f9 fcd0 	bl	800acd0 <lwip_htons>
 8011330:	4603      	mov	r3, r0
 8011332:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011338:	68ba      	ldr	r2, [r7, #8]
 801133a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801133c:	441a      	add	r2, r3
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	691b      	ldr	r3, [r3, #16]
 8011346:	3314      	adds	r3, #20
 8011348:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	7b1b      	ldrb	r3, [r3, #12]
 801134e:	f003 0301 	and.w	r3, r3, #1
 8011352:	2b00      	cmp	r3, #0
 8011354:	d015      	beq.n	8011382 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	3304      	adds	r3, #4
 801135a:	461a      	mov	r2, r3
 801135c:	6879      	ldr	r1, [r7, #4]
 801135e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8011362:	f7fc fe81 	bl	800e068 <tcp_eff_send_mss_netif>
 8011366:	4603      	mov	r3, r0
 8011368:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801136a:	8b7b      	ldrh	r3, [r7, #26]
 801136c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011370:	4618      	mov	r0, r3
 8011372:	f7f9 fcc3 	bl	800acfc <lwip_htonl>
 8011376:	4602      	mov	r2, r0
 8011378:	69fb      	ldr	r3, [r7, #28]
 801137a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	3304      	adds	r3, #4
 8011380:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011388:	2b00      	cmp	r3, #0
 801138a:	da02      	bge.n	8011392 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	2200      	movs	r2, #0
 8011390:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10c      	bne.n	80113b4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801139a:	4b35      	ldr	r3, [pc, #212]	@ (8011470 <tcp_output_segment+0x1b8>)
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	691b      	ldr	r3, [r3, #16]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7f9 fca7 	bl	800acfc <lwip_htonl>
 80113ae:	4602      	mov	r2, r0
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	691a      	ldr	r2, [r3, #16]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	8959      	ldrh	r1, [r3, #10]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	8b3a      	ldrh	r2, [r7, #24]
 80113ce:	1a8a      	subs	r2, r1, r2
 80113d0:	b292      	uxth	r2, r2
 80113d2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	8919      	ldrh	r1, [r3, #8]
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	8b3a      	ldrh	r2, [r7, #24]
 80113e0:	1a8a      	subs	r2, r1, r2
 80113e2:	b292      	uxth	r2, r2
 80113e4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	68fa      	ldr	r2, [r7, #12]
 80113ec:	6912      	ldr	r2, [r2, #16]
 80113ee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	691b      	ldr	r3, [r3, #16]
 80113f4:	2200      	movs	r2, #0
 80113f6:	741a      	strb	r2, [r3, #16]
 80113f8:	2200      	movs	r2, #0
 80113fa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	691a      	ldr	r2, [r3, #16]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	7b1b      	ldrb	r3, [r3, #12]
 8011404:	f003 0301 	and.w	r3, r3, #1
 8011408:	2b00      	cmp	r3, #0
 801140a:	d001      	beq.n	8011410 <tcp_output_segment+0x158>
 801140c:	2318      	movs	r3, #24
 801140e:	e000      	b.n	8011412 <tcp_output_segment+0x15a>
 8011410:	2314      	movs	r3, #20
 8011412:	4413      	add	r3, r2
 8011414:	69fa      	ldr	r2, [r7, #28]
 8011416:	429a      	cmp	r2, r3
 8011418:	d006      	beq.n	8011428 <tcp_output_segment+0x170>
 801141a:	4b10      	ldr	r3, [pc, #64]	@ (801145c <tcp_output_segment+0x1a4>)
 801141c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011420:	4914      	ldr	r1, [pc, #80]	@ (8011474 <tcp_output_segment+0x1bc>)
 8011422:	4810      	ldr	r0, [pc, #64]	@ (8011464 <tcp_output_segment+0x1ac>)
 8011424:	f004 fd82 	bl	8015f2c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6858      	ldr	r0, [r3, #4]
 801142c:	68b9      	ldr	r1, [r7, #8]
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	1d1c      	adds	r4, r3, #4
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	7add      	ldrb	r5, [r3, #11]
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	7a9b      	ldrb	r3, [r3, #10]
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	9202      	str	r2, [sp, #8]
 801143e:	2206      	movs	r2, #6
 8011440:	9201      	str	r2, [sp, #4]
 8011442:	9300      	str	r3, [sp, #0]
 8011444:	462b      	mov	r3, r5
 8011446:	4622      	mov	r2, r4
 8011448:	f002 ffbe 	bl	80143c8 <ip4_output_if>
 801144c:	4603      	mov	r3, r0
 801144e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011450:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011454:	4618      	mov	r0, r3
 8011456:	3720      	adds	r7, #32
 8011458:	46bd      	mov	sp, r7
 801145a:	bdb0      	pop	{r4, r5, r7, pc}
 801145c:	080188a4 	.word	0x080188a4
 8011460:	08018ec4 	.word	0x08018ec4
 8011464:	080188f8 	.word	0x080188f8
 8011468:	08018ee4 	.word	0x08018ee4
 801146c:	08018f04 	.word	0x08018f04
 8011470:	2000835c 	.word	0x2000835c
 8011474:	08018f28 	.word	0x08018f28

08011478 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011478:	b5b0      	push	{r4, r5, r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d106      	bne.n	8011494 <tcp_rexmit_rto_prepare+0x1c>
 8011486:	4b36      	ldr	r3, [pc, #216]	@ (8011560 <tcp_rexmit_rto_prepare+0xe8>)
 8011488:	f240 6263 	movw	r2, #1635	@ 0x663
 801148c:	4935      	ldr	r1, [pc, #212]	@ (8011564 <tcp_rexmit_rto_prepare+0xec>)
 801148e:	4836      	ldr	r0, [pc, #216]	@ (8011568 <tcp_rexmit_rto_prepare+0xf0>)
 8011490:	f004 fd4c 	bl	8015f2c <iprintf>

  if (pcb->unacked == NULL) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011498:	2b00      	cmp	r3, #0
 801149a:	d102      	bne.n	80114a2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801149c:	f06f 0305 	mvn.w	r3, #5
 80114a0:	e059      	b.n	8011556 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114a6:	60fb      	str	r3, [r7, #12]
 80114a8:	e00b      	b.n	80114c2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	f7ff fee4 	bl	8011278 <tcp_output_segment_busy>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d002      	beq.n	80114bc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80114b6:	f06f 0305 	mvn.w	r3, #5
 80114ba:	e04c      	b.n	8011556 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	60fb      	str	r3, [r7, #12]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d1ef      	bne.n	80114aa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	f7ff fed4 	bl	8011278 <tcp_output_segment_busy>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d002      	beq.n	80114dc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80114d6:	f06f 0305 	mvn.w	r3, #5
 80114da:	e03c      	b.n	8011556 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d104      	bne.n	80114f6 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	895a      	ldrh	r2, [r3, #10]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2200      	movs	r2, #0
 8011502:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	8b5b      	ldrh	r3, [r3, #26]
 8011508:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801150c:	b29a      	uxth	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	691b      	ldr	r3, [r3, #16]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	4618      	mov	r0, r3
 801151a:	f7f9 fbef 	bl	800acfc <lwip_htonl>
 801151e:	4604      	mov	r4, r0
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	891b      	ldrh	r3, [r3, #8]
 8011524:	461d      	mov	r5, r3
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	899b      	ldrh	r3, [r3, #12]
 801152c:	b29b      	uxth	r3, r3
 801152e:	4618      	mov	r0, r3
 8011530:	f7f9 fbce 	bl	800acd0 <lwip_htons>
 8011534:	4603      	mov	r3, r0
 8011536:	b2db      	uxtb	r3, r3
 8011538:	f003 0303 	and.w	r3, r3, #3
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <tcp_rexmit_rto_prepare+0xcc>
 8011540:	2301      	movs	r3, #1
 8011542:	e000      	b.n	8011546 <tcp_rexmit_rto_prepare+0xce>
 8011544:	2300      	movs	r3, #0
 8011546:	442b      	add	r3, r5
 8011548:	18e2      	adds	r2, r4, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2200      	movs	r2, #0
 8011552:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8011554:	2300      	movs	r3, #0
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bdb0      	pop	{r4, r5, r7, pc}
 801155e:	bf00      	nop
 8011560:	080188a4 	.word	0x080188a4
 8011564:	08018f3c 	.word	0x08018f3c
 8011568:	080188f8 	.word	0x080188f8

0801156c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d106      	bne.n	8011588 <tcp_rexmit_rto_commit+0x1c>
 801157a:	4b0d      	ldr	r3, [pc, #52]	@ (80115b0 <tcp_rexmit_rto_commit+0x44>)
 801157c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011580:	490c      	ldr	r1, [pc, #48]	@ (80115b4 <tcp_rexmit_rto_commit+0x48>)
 8011582:	480d      	ldr	r0, [pc, #52]	@ (80115b8 <tcp_rexmit_rto_commit+0x4c>)
 8011584:	f004 fcd2 	bl	8015f2c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801158e:	2bff      	cmp	r3, #255	@ 0xff
 8011590:	d007      	beq.n	80115a2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011598:	3301      	adds	r3, #1
 801159a:	b2da      	uxtb	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7ff fc72 	bl	8010e8c <tcp_output>
}
 80115a8:	bf00      	nop
 80115aa:	3708      	adds	r7, #8
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	080188a4 	.word	0x080188a4
 80115b4:	08018f60 	.word	0x08018f60
 80115b8:	080188f8 	.word	0x080188f8

080115bc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d106      	bne.n	80115d8 <tcp_rexmit_rto+0x1c>
 80115ca:	4b0a      	ldr	r3, [pc, #40]	@ (80115f4 <tcp_rexmit_rto+0x38>)
 80115cc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80115d0:	4909      	ldr	r1, [pc, #36]	@ (80115f8 <tcp_rexmit_rto+0x3c>)
 80115d2:	480a      	ldr	r0, [pc, #40]	@ (80115fc <tcp_rexmit_rto+0x40>)
 80115d4:	f004 fcaa 	bl	8015f2c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7ff ff4d 	bl	8011478 <tcp_rexmit_rto_prepare>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d102      	bne.n	80115ea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7ff ffc1 	bl	801156c <tcp_rexmit_rto_commit>
  }
}
 80115ea:	bf00      	nop
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	080188a4 	.word	0x080188a4
 80115f8:	08018f84 	.word	0x08018f84
 80115fc:	080188f8 	.word	0x080188f8

08011600 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011600:	b590      	push	{r4, r7, lr}
 8011602:	b085      	sub	sp, #20
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d106      	bne.n	801161c <tcp_rexmit+0x1c>
 801160e:	4b2f      	ldr	r3, [pc, #188]	@ (80116cc <tcp_rexmit+0xcc>)
 8011610:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8011614:	492e      	ldr	r1, [pc, #184]	@ (80116d0 <tcp_rexmit+0xd0>)
 8011616:	482f      	ldr	r0, [pc, #188]	@ (80116d4 <tcp_rexmit+0xd4>)
 8011618:	f004 fc88 	bl	8015f2c <iprintf>

  if (pcb->unacked == NULL) {
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011620:	2b00      	cmp	r3, #0
 8011622:	d102      	bne.n	801162a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011624:	f06f 0305 	mvn.w	r3, #5
 8011628:	e04c      	b.n	80116c4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801162e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011630:	68b8      	ldr	r0, [r7, #8]
 8011632:	f7ff fe21 	bl	8011278 <tcp_output_segment_busy>
 8011636:	4603      	mov	r3, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	d002      	beq.n	8011642 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801163c:	f06f 0305 	mvn.w	r3, #5
 8011640:	e040      	b.n	80116c4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	336c      	adds	r3, #108	@ 0x6c
 801164e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011650:	e002      	b.n	8011658 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d011      	beq.n	8011684 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	691b      	ldr	r3, [r3, #16]
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	4618      	mov	r0, r3
 801166a:	f7f9 fb47 	bl	800acfc <lwip_htonl>
 801166e:	4604      	mov	r4, r0
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	691b      	ldr	r3, [r3, #16]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	4618      	mov	r0, r3
 8011678:	f7f9 fb40 	bl	800acfc <lwip_htonl>
 801167c:	4603      	mov	r3, r0
 801167e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011680:	2b00      	cmp	r3, #0
 8011682:	dbe6      	blt.n	8011652 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	68ba      	ldr	r2, [r7, #8]
 8011690:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d103      	bne.n	80116a2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2200      	movs	r2, #0
 801169e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80116a8:	2bff      	cmp	r3, #255	@ 0xff
 80116aa:	d007      	beq.n	80116bc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80116b2:	3301      	adds	r3, #1
 80116b4:	b2da      	uxtb	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2200      	movs	r2, #0
 80116c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80116c2:	2300      	movs	r3, #0
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3714      	adds	r7, #20
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd90      	pop	{r4, r7, pc}
 80116cc:	080188a4 	.word	0x080188a4
 80116d0:	08018fa0 	.word	0x08018fa0
 80116d4:	080188f8 	.word	0x080188f8

080116d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d106      	bne.n	80116f4 <tcp_rexmit_fast+0x1c>
 80116e6:	4b2a      	ldr	r3, [pc, #168]	@ (8011790 <tcp_rexmit_fast+0xb8>)
 80116e8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80116ec:	4929      	ldr	r1, [pc, #164]	@ (8011794 <tcp_rexmit_fast+0xbc>)
 80116ee:	482a      	ldr	r0, [pc, #168]	@ (8011798 <tcp_rexmit_fast+0xc0>)
 80116f0:	f004 fc1c 	bl	8015f2c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d045      	beq.n	8011788 <tcp_rexmit_fast+0xb0>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	8b5b      	ldrh	r3, [r3, #26]
 8011700:	f003 0304 	and.w	r3, r3, #4
 8011704:	2b00      	cmp	r3, #0
 8011706:	d13f      	bne.n	8011788 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f7ff ff79 	bl	8011600 <tcp_rexmit>
 801170e:	4603      	mov	r3, r0
 8011710:	2b00      	cmp	r3, #0
 8011712:	d139      	bne.n	8011788 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011720:	4293      	cmp	r3, r2
 8011722:	bf28      	it	cs
 8011724:	4613      	movcs	r3, r2
 8011726:	b29b      	uxth	r3, r3
 8011728:	2b00      	cmp	r3, #0
 801172a:	da00      	bge.n	801172e <tcp_rexmit_fast+0x56>
 801172c:	3301      	adds	r3, #1
 801172e:	105b      	asrs	r3, r3, #1
 8011730:	b29a      	uxth	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801173e:	461a      	mov	r2, r3
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011744:	005b      	lsls	r3, r3, #1
 8011746:	429a      	cmp	r2, r3
 8011748:	d206      	bcs.n	8011758 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	b29a      	uxth	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011762:	4619      	mov	r1, r3
 8011764:	0049      	lsls	r1, r1, #1
 8011766:	440b      	add	r3, r1
 8011768:	b29b      	uxth	r3, r3
 801176a:	4413      	add	r3, r2
 801176c:	b29a      	uxth	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	8b5b      	ldrh	r3, [r3, #26]
 8011778:	f043 0304 	orr.w	r3, r3, #4
 801177c:	b29a      	uxth	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011788:	bf00      	nop
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	080188a4 	.word	0x080188a4
 8011794:	08018fb8 	.word	0x08018fb8
 8011798:	080188f8 	.word	0x080188f8

0801179c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	607b      	str	r3, [r7, #4]
 80117a6:	460b      	mov	r3, r1
 80117a8:	817b      	strh	r3, [r7, #10]
 80117aa:	4613      	mov	r3, r2
 80117ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80117ae:	897a      	ldrh	r2, [r7, #10]
 80117b0:	893b      	ldrh	r3, [r7, #8]
 80117b2:	4413      	add	r3, r2
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	3314      	adds	r3, #20
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80117be:	4619      	mov	r1, r3
 80117c0:	2022      	movs	r0, #34	@ 0x22
 80117c2:	f7fa fbf1 	bl	800bfa8 <pbuf_alloc>
 80117c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d04d      	beq.n	801186a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80117ce:	897b      	ldrh	r3, [r7, #10]
 80117d0:	3313      	adds	r3, #19
 80117d2:	697a      	ldr	r2, [r7, #20]
 80117d4:	8952      	ldrh	r2, [r2, #10]
 80117d6:	4293      	cmp	r3, r2
 80117d8:	db06      	blt.n	80117e8 <tcp_output_alloc_header_common+0x4c>
 80117da:	4b26      	ldr	r3, [pc, #152]	@ (8011874 <tcp_output_alloc_header_common+0xd8>)
 80117dc:	f240 7223 	movw	r2, #1827	@ 0x723
 80117e0:	4925      	ldr	r1, [pc, #148]	@ (8011878 <tcp_output_alloc_header_common+0xdc>)
 80117e2:	4826      	ldr	r0, [pc, #152]	@ (801187c <tcp_output_alloc_header_common+0xe0>)
 80117e4:	f004 fba2 	bl	8015f2c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80117ee:	8c3b      	ldrh	r3, [r7, #32]
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7f9 fa6d 	bl	800acd0 <lwip_htons>
 80117f6:	4603      	mov	r3, r0
 80117f8:	461a      	mov	r2, r3
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80117fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011800:	4618      	mov	r0, r3
 8011802:	f7f9 fa65 	bl	800acd0 <lwip_htons>
 8011806:	4603      	mov	r3, r0
 8011808:	461a      	mov	r2, r3
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f7f9 fa71 	bl	800acfc <lwip_htonl>
 801181a:	4602      	mov	r2, r0
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011820:	897b      	ldrh	r3, [r7, #10]
 8011822:	089b      	lsrs	r3, r3, #2
 8011824:	b29b      	uxth	r3, r3
 8011826:	3305      	adds	r3, #5
 8011828:	b29b      	uxth	r3, r3
 801182a:	031b      	lsls	r3, r3, #12
 801182c:	b29a      	uxth	r2, r3
 801182e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011832:	b29b      	uxth	r3, r3
 8011834:	4313      	orrs	r3, r2
 8011836:	b29b      	uxth	r3, r3
 8011838:	4618      	mov	r0, r3
 801183a:	f7f9 fa49 	bl	800acd0 <lwip_htons>
 801183e:	4603      	mov	r3, r0
 8011840:	461a      	mov	r2, r3
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011846:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011848:	4618      	mov	r0, r3
 801184a:	f7f9 fa41 	bl	800acd0 <lwip_htons>
 801184e:	4603      	mov	r3, r0
 8011850:	461a      	mov	r2, r3
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	2200      	movs	r2, #0
 801185a:	741a      	strb	r2, [r3, #16]
 801185c:	2200      	movs	r2, #0
 801185e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	2200      	movs	r2, #0
 8011864:	749a      	strb	r2, [r3, #18]
 8011866:	2200      	movs	r2, #0
 8011868:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801186a:	697b      	ldr	r3, [r7, #20]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3718      	adds	r7, #24
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}
 8011874:	080188a4 	.word	0x080188a4
 8011878:	08018fd8 	.word	0x08018fd8
 801187c:	080188f8 	.word	0x080188f8

08011880 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011880:	b5b0      	push	{r4, r5, r7, lr}
 8011882:	b08a      	sub	sp, #40	@ 0x28
 8011884:	af04      	add	r7, sp, #16
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	607b      	str	r3, [r7, #4]
 801188a:	460b      	mov	r3, r1
 801188c:	817b      	strh	r3, [r7, #10]
 801188e:	4613      	mov	r3, r2
 8011890:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d106      	bne.n	80118a6 <tcp_output_alloc_header+0x26>
 8011898:	4b15      	ldr	r3, [pc, #84]	@ (80118f0 <tcp_output_alloc_header+0x70>)
 801189a:	f240 7242 	movw	r2, #1858	@ 0x742
 801189e:	4915      	ldr	r1, [pc, #84]	@ (80118f4 <tcp_output_alloc_header+0x74>)
 80118a0:	4815      	ldr	r0, [pc, #84]	@ (80118f8 <tcp_output_alloc_header+0x78>)
 80118a2:	f004 fb43 	bl	8015f2c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	8adb      	ldrh	r3, [r3, #22]
 80118ae:	68fa      	ldr	r2, [r7, #12]
 80118b0:	8b12      	ldrh	r2, [r2, #24]
 80118b2:	68f9      	ldr	r1, [r7, #12]
 80118b4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80118b6:	893d      	ldrh	r5, [r7, #8]
 80118b8:	897c      	ldrh	r4, [r7, #10]
 80118ba:	9103      	str	r1, [sp, #12]
 80118bc:	2110      	movs	r1, #16
 80118be:	9102      	str	r1, [sp, #8]
 80118c0:	9201      	str	r2, [sp, #4]
 80118c2:	9300      	str	r3, [sp, #0]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	462a      	mov	r2, r5
 80118c8:	4621      	mov	r1, r4
 80118ca:	f7ff ff67 	bl	801179c <tcp_output_alloc_header_common>
 80118ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d006      	beq.n	80118e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80118de:	441a      	add	r2, r3
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80118e4:	697b      	ldr	r3, [r7, #20]
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3718      	adds	r7, #24
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bdb0      	pop	{r4, r5, r7, pc}
 80118ee:	bf00      	nop
 80118f0:	080188a4 	.word	0x080188a4
 80118f4:	08019008 	.word	0x08019008
 80118f8:	080188f8 	.word	0x080188f8

080118fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b088      	sub	sp, #32
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	4611      	mov	r1, r2
 8011908:	461a      	mov	r2, r3
 801190a:	460b      	mov	r3, r1
 801190c:	71fb      	strb	r3, [r7, #7]
 801190e:	4613      	mov	r3, r2
 8011910:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011912:	2300      	movs	r3, #0
 8011914:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d106      	bne.n	801192a <tcp_output_fill_options+0x2e>
 801191c:	4b12      	ldr	r3, [pc, #72]	@ (8011968 <tcp_output_fill_options+0x6c>)
 801191e:	f240 7256 	movw	r2, #1878	@ 0x756
 8011922:	4912      	ldr	r1, [pc, #72]	@ (801196c <tcp_output_fill_options+0x70>)
 8011924:	4812      	ldr	r0, [pc, #72]	@ (8011970 <tcp_output_fill_options+0x74>)
 8011926:	f004 fb01 	bl	8015f2c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	3314      	adds	r3, #20
 8011934:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011936:	8bfb      	ldrh	r3, [r7, #30]
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	461a      	mov	r2, r3
 801193c:	79fb      	ldrb	r3, [r7, #7]
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	f003 0304 	and.w	r3, r3, #4
 8011944:	4413      	add	r3, r2
 8011946:	3314      	adds	r3, #20
 8011948:	69ba      	ldr	r2, [r7, #24]
 801194a:	4413      	add	r3, r2
 801194c:	697a      	ldr	r2, [r7, #20]
 801194e:	429a      	cmp	r2, r3
 8011950:	d006      	beq.n	8011960 <tcp_output_fill_options+0x64>
 8011952:	4b05      	ldr	r3, [pc, #20]	@ (8011968 <tcp_output_fill_options+0x6c>)
 8011954:	f240 7275 	movw	r2, #1909	@ 0x775
 8011958:	4906      	ldr	r1, [pc, #24]	@ (8011974 <tcp_output_fill_options+0x78>)
 801195a:	4805      	ldr	r0, [pc, #20]	@ (8011970 <tcp_output_fill_options+0x74>)
 801195c:	f004 fae6 	bl	8015f2c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011960:	bf00      	nop
 8011962:	3720      	adds	r7, #32
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	080188a4 	.word	0x080188a4
 801196c:	08019030 	.word	0x08019030
 8011970:	080188f8 	.word	0x080188f8
 8011974:	08018f28 	.word	0x08018f28

08011978 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b08a      	sub	sp, #40	@ 0x28
 801197c:	af04      	add	r7, sp, #16
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	607a      	str	r2, [r7, #4]
 8011984:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d106      	bne.n	801199a <tcp_output_control_segment+0x22>
 801198c:	4b1c      	ldr	r3, [pc, #112]	@ (8011a00 <tcp_output_control_segment+0x88>)
 801198e:	f240 7287 	movw	r2, #1927	@ 0x787
 8011992:	491c      	ldr	r1, [pc, #112]	@ (8011a04 <tcp_output_control_segment+0x8c>)
 8011994:	481c      	ldr	r0, [pc, #112]	@ (8011a08 <tcp_output_control_segment+0x90>)
 8011996:	f004 fac9 	bl	8015f2c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801199a:	683a      	ldr	r2, [r7, #0]
 801199c:	6879      	ldr	r1, [r7, #4]
 801199e:	68f8      	ldr	r0, [r7, #12]
 80119a0:	f7fe ff2e 	bl	8010800 <tcp_route>
 80119a4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d102      	bne.n	80119b2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80119ac:	23fc      	movs	r3, #252	@ 0xfc
 80119ae:	75fb      	strb	r3, [r7, #23]
 80119b0:	e01c      	b.n	80119ec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d006      	beq.n	80119c6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	7adb      	ldrb	r3, [r3, #11]
 80119bc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	7a9b      	ldrb	r3, [r3, #10]
 80119c2:	757b      	strb	r3, [r7, #21]
 80119c4:	e003      	b.n	80119ce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80119c6:	23ff      	movs	r3, #255	@ 0xff
 80119c8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80119ca:	2300      	movs	r3, #0
 80119cc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80119ce:	7dba      	ldrb	r2, [r7, #22]
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	9302      	str	r3, [sp, #8]
 80119d4:	2306      	movs	r3, #6
 80119d6:	9301      	str	r3, [sp, #4]
 80119d8:	7d7b      	ldrb	r3, [r7, #21]
 80119da:	9300      	str	r3, [sp, #0]
 80119dc:	4613      	mov	r3, r2
 80119de:	683a      	ldr	r2, [r7, #0]
 80119e0:	6879      	ldr	r1, [r7, #4]
 80119e2:	68b8      	ldr	r0, [r7, #8]
 80119e4:	f002 fcf0 	bl	80143c8 <ip4_output_if>
 80119e8:	4603      	mov	r3, r0
 80119ea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80119ec:	68b8      	ldr	r0, [r7, #8]
 80119ee:	f7fa fdbf 	bl	800c570 <pbuf_free>
  return err;
 80119f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3718      	adds	r7, #24
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	080188a4 	.word	0x080188a4
 8011a04:	08019058 	.word	0x08019058
 8011a08:	080188f8 	.word	0x080188f8

08011a0c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011a0c:	b590      	push	{r4, r7, lr}
 8011a0e:	b08b      	sub	sp, #44	@ 0x2c
 8011a10:	af04      	add	r7, sp, #16
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	607a      	str	r2, [r7, #4]
 8011a18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d106      	bne.n	8011a2e <tcp_rst+0x22>
 8011a20:	4b1f      	ldr	r3, [pc, #124]	@ (8011aa0 <tcp_rst+0x94>)
 8011a22:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011a26:	491f      	ldr	r1, [pc, #124]	@ (8011aa4 <tcp_rst+0x98>)
 8011a28:	481f      	ldr	r0, [pc, #124]	@ (8011aa8 <tcp_rst+0x9c>)
 8011a2a:	f004 fa7f 	bl	8015f2c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d106      	bne.n	8011a42 <tcp_rst+0x36>
 8011a34:	4b1a      	ldr	r3, [pc, #104]	@ (8011aa0 <tcp_rst+0x94>)
 8011a36:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011a3a:	491c      	ldr	r1, [pc, #112]	@ (8011aac <tcp_rst+0xa0>)
 8011a3c:	481a      	ldr	r0, [pc, #104]	@ (8011aa8 <tcp_rst+0x9c>)
 8011a3e:	f004 fa75 	bl	8015f2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a42:	2300      	movs	r3, #0
 8011a44:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011a46:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011a4a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011a4c:	7dfb      	ldrb	r3, [r7, #23]
 8011a4e:	b29c      	uxth	r4, r3
 8011a50:	68b8      	ldr	r0, [r7, #8]
 8011a52:	f7f9 f953 	bl	800acfc <lwip_htonl>
 8011a56:	4602      	mov	r2, r0
 8011a58:	8abb      	ldrh	r3, [r7, #20]
 8011a5a:	9303      	str	r3, [sp, #12]
 8011a5c:	2314      	movs	r3, #20
 8011a5e:	9302      	str	r3, [sp, #8]
 8011a60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011a62:	9301      	str	r3, [sp, #4]
 8011a64:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	4613      	mov	r3, r2
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	4621      	mov	r1, r4
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f7ff fe94 	bl	801179c <tcp_output_alloc_header_common>
 8011a74:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d00c      	beq.n	8011a96 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a7c:	7dfb      	ldrb	r3, [r7, #23]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	6939      	ldr	r1, [r7, #16]
 8011a82:	68f8      	ldr	r0, [r7, #12]
 8011a84:	f7ff ff3a 	bl	80118fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a8a:	683a      	ldr	r2, [r7, #0]
 8011a8c:	6939      	ldr	r1, [r7, #16]
 8011a8e:	68f8      	ldr	r0, [r7, #12]
 8011a90:	f7ff ff72 	bl	8011978 <tcp_output_control_segment>
 8011a94:	e000      	b.n	8011a98 <tcp_rst+0x8c>
    return;
 8011a96:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011a98:	371c      	adds	r7, #28
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd90      	pop	{r4, r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	080188a4 	.word	0x080188a4
 8011aa4:	08019084 	.word	0x08019084
 8011aa8:	080188f8 	.word	0x080188f8
 8011aac:	080190a0 	.word	0x080190a0

08011ab0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011ab0:	b590      	push	{r4, r7, lr}
 8011ab2:	b087      	sub	sp, #28
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011abc:	2300      	movs	r3, #0
 8011abe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d106      	bne.n	8011ad4 <tcp_send_empty_ack+0x24>
 8011ac6:	4b28      	ldr	r3, [pc, #160]	@ (8011b68 <tcp_send_empty_ack+0xb8>)
 8011ac8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011acc:	4927      	ldr	r1, [pc, #156]	@ (8011b6c <tcp_send_empty_ack+0xbc>)
 8011ace:	4828      	ldr	r0, [pc, #160]	@ (8011b70 <tcp_send_empty_ack+0xc0>)
 8011ad0:	f004 fa2c 	bl	8015f2c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ad4:	7dfb      	ldrb	r3, [r7, #23]
 8011ad6:	009b      	lsls	r3, r3, #2
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	f003 0304 	and.w	r3, r3, #4
 8011ade:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011ae0:	7d7b      	ldrb	r3, [r7, #21]
 8011ae2:	b29c      	uxth	r4, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7f9 f907 	bl	800acfc <lwip_htonl>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2200      	movs	r2, #0
 8011af2:	4621      	mov	r1, r4
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f7ff fec3 	bl	8011880 <tcp_output_alloc_header>
 8011afa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d109      	bne.n	8011b16 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	8b5b      	ldrh	r3, [r3, #26]
 8011b06:	f043 0303 	orr.w	r3, r3, #3
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011b10:	f06f 0301 	mvn.w	r3, #1
 8011b14:	e023      	b.n	8011b5e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011b16:	7dbb      	ldrb	r3, [r7, #22]
 8011b18:	7dfa      	ldrb	r2, [r7, #23]
 8011b1a:	6939      	ldr	r1, [r7, #16]
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f7ff feed 	bl	80118fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	3304      	adds	r3, #4
 8011b28:	6939      	ldr	r1, [r7, #16]
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7ff ff24 	bl	8011978 <tcp_output_control_segment>
 8011b30:	4603      	mov	r3, r0
 8011b32:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d007      	beq.n	8011b4c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	8b5b      	ldrh	r3, [r3, #26]
 8011b40:	f043 0303 	orr.w	r3, r3, #3
 8011b44:	b29a      	uxth	r2, r3
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	835a      	strh	r2, [r3, #26]
 8011b4a:	e006      	b.n	8011b5a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	8b5b      	ldrh	r3, [r3, #26]
 8011b50:	f023 0303 	bic.w	r3, r3, #3
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	371c      	adds	r7, #28
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd90      	pop	{r4, r7, pc}
 8011b66:	bf00      	nop
 8011b68:	080188a4 	.word	0x080188a4
 8011b6c:	080190bc 	.word	0x080190bc
 8011b70:	080188f8 	.word	0x080188f8

08011b74 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011b74:	b590      	push	{r4, r7, lr}
 8011b76:	b085      	sub	sp, #20
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d106      	bne.n	8011b94 <tcp_keepalive+0x20>
 8011b86:	4b18      	ldr	r3, [pc, #96]	@ (8011be8 <tcp_keepalive+0x74>)
 8011b88:	f640 0224 	movw	r2, #2084	@ 0x824
 8011b8c:	4917      	ldr	r1, [pc, #92]	@ (8011bec <tcp_keepalive+0x78>)
 8011b8e:	4818      	ldr	r0, [pc, #96]	@ (8011bf0 <tcp_keepalive+0x7c>)
 8011b90:	f004 f9cc 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011b94:	7abb      	ldrb	r3, [r7, #10]
 8011b96:	b29c      	uxth	r4, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7f9 f8ac 	bl	800acfc <lwip_htonl>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	4621      	mov	r1, r4
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f7ff fe68 	bl	8011880 <tcp_output_alloc_header>
 8011bb0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d102      	bne.n	8011bbe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011bb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011bbc:	e010      	b.n	8011be0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011bbe:	7abb      	ldrb	r3, [r7, #10]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	68f9      	ldr	r1, [r7, #12]
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f7ff fe99 	bl	80118fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bca:	687a      	ldr	r2, [r7, #4]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	3304      	adds	r3, #4
 8011bd0:	68f9      	ldr	r1, [r7, #12]
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7ff fed0 	bl	8011978 <tcp_output_control_segment>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011bdc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3714      	adds	r7, #20
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd90      	pop	{r4, r7, pc}
 8011be8:	080188a4 	.word	0x080188a4
 8011bec:	080190dc 	.word	0x080190dc
 8011bf0:	080188f8 	.word	0x080188f8

08011bf4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011bf4:	b590      	push	{r4, r7, lr}
 8011bf6:	b08b      	sub	sp, #44	@ 0x2c
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <tcp_zero_window_probe+0x20>
 8011c06:	4b4d      	ldr	r3, [pc, #308]	@ (8011d3c <tcp_zero_window_probe+0x148>)
 8011c08:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011c0c:	494c      	ldr	r1, [pc, #304]	@ (8011d40 <tcp_zero_window_probe+0x14c>)
 8011c0e:	484d      	ldr	r0, [pc, #308]	@ (8011d44 <tcp_zero_window_probe+0x150>)
 8011c10:	f004 f98c 	bl	8015f2c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d101      	bne.n	8011c24 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011c20:	2300      	movs	r3, #0
 8011c22:	e087      	b.n	8011d34 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011c2a:	2bff      	cmp	r3, #255	@ 0xff
 8011c2c:	d007      	beq.n	8011c3e <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011c34:	3301      	adds	r3, #1
 8011c36:	b2da      	uxtb	r2, r3
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c40:	691b      	ldr	r3, [r3, #16]
 8011c42:	899b      	ldrh	r3, [r3, #12]
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7f9 f842 	bl	800acd0 <lwip_htons>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	f003 0301 	and.w	r3, r3, #1
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d005      	beq.n	8011c64 <tcp_zero_window_probe+0x70>
 8011c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c5a:	891b      	ldrh	r3, [r3, #8]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d101      	bne.n	8011c64 <tcp_zero_window_probe+0x70>
 8011c60:	2301      	movs	r3, #1
 8011c62:	e000      	b.n	8011c66 <tcp_zero_window_probe+0x72>
 8011c64:	2300      	movs	r3, #0
 8011c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	bf0c      	ite	eq
 8011c72:	2301      	moveq	r3, #1
 8011c74:	2300      	movne	r3, #0
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011c7a:	7cfb      	ldrb	r3, [r7, #19]
 8011c7c:	b299      	uxth	r1, r3
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c80:	691b      	ldr	r3, [r3, #16]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	8c3a      	ldrh	r2, [r7, #32]
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f7ff fdfa 	bl	8011880 <tcp_output_alloc_header>
 8011c8c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d102      	bne.n	8011c9a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011c94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011c98:	e04c      	b.n	8011d34 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011c9a:	69fb      	ldr	r3, [r7, #28]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8011ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d011      	beq.n	8011ccc <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011ca8:	69bb      	ldr	r3, [r7, #24]
 8011caa:	899b      	ldrh	r3, [r3, #12]
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	b21b      	sxth	r3, r3
 8011cb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011cb4:	b21c      	sxth	r4, r3
 8011cb6:	2011      	movs	r0, #17
 8011cb8:	f7f9 f80a 	bl	800acd0 <lwip_htons>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	b21b      	sxth	r3, r3
 8011cc0:	4323      	orrs	r3, r4
 8011cc2:	b21b      	sxth	r3, r3
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	819a      	strh	r2, [r3, #12]
 8011cca:	e010      	b.n	8011cee <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	3314      	adds	r3, #20
 8011cd2:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd6:	6858      	ldr	r0, [r3, #4]
 8011cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	891a      	ldrh	r2, [r3, #8]
 8011cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce0:	891b      	ldrh	r3, [r3, #8]
 8011ce2:	1ad3      	subs	r3, r2, r3
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	6979      	ldr	r1, [r7, #20]
 8011cea:	f7fa fe3b 	bl	800c964 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf0:	691b      	ldr	r3, [r3, #16]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7f9 f801 	bl	800acfc <lwip_htonl>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	1ad3      	subs	r3, r2, r3
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	da02      	bge.n	8011d12 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d12:	7cfb      	ldrb	r3, [r7, #19]
 8011d14:	2200      	movs	r2, #0
 8011d16:	69f9      	ldr	r1, [r7, #28]
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7ff fdef 	bl	80118fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	3304      	adds	r3, #4
 8011d24:	69f9      	ldr	r1, [r7, #28]
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f7ff fe26 	bl	8011978 <tcp_output_control_segment>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011d30:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	372c      	adds	r7, #44	@ 0x2c
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd90      	pop	{r4, r7, pc}
 8011d3c:	080188a4 	.word	0x080188a4
 8011d40:	080190f8 	.word	0x080190f8
 8011d44:	080188f8 	.word	0x080188f8

08011d48 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011d50:	f7fa fef6 	bl	800cb40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011d54:	4b0a      	ldr	r3, [pc, #40]	@ (8011d80 <tcpip_tcp_timer+0x38>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d103      	bne.n	8011d64 <tcpip_tcp_timer+0x1c>
 8011d5c:	4b09      	ldr	r3, [pc, #36]	@ (8011d84 <tcpip_tcp_timer+0x3c>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d005      	beq.n	8011d70 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011d64:	2200      	movs	r2, #0
 8011d66:	4908      	ldr	r1, [pc, #32]	@ (8011d88 <tcpip_tcp_timer+0x40>)
 8011d68:	20fa      	movs	r0, #250	@ 0xfa
 8011d6a:	f000 f8f3 	bl	8011f54 <sys_timeout>
 8011d6e:	e003      	b.n	8011d78 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011d70:	4b06      	ldr	r3, [pc, #24]	@ (8011d8c <tcpip_tcp_timer+0x44>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	601a      	str	r2, [r3, #0]
  }
}
 8011d76:	bf00      	nop
 8011d78:	bf00      	nop
 8011d7a:	3708      	adds	r7, #8
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	20008368 	.word	0x20008368
 8011d84:	2000836c 	.word	0x2000836c
 8011d88:	08011d49 	.word	0x08011d49
 8011d8c:	200083b8 	.word	0x200083b8

08011d90 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011d94:	4b0a      	ldr	r3, [pc, #40]	@ (8011dc0 <tcp_timer_needed+0x30>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d10f      	bne.n	8011dbc <tcp_timer_needed+0x2c>
 8011d9c:	4b09      	ldr	r3, [pc, #36]	@ (8011dc4 <tcp_timer_needed+0x34>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d103      	bne.n	8011dac <tcp_timer_needed+0x1c>
 8011da4:	4b08      	ldr	r3, [pc, #32]	@ (8011dc8 <tcp_timer_needed+0x38>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d007      	beq.n	8011dbc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011dac:	4b04      	ldr	r3, [pc, #16]	@ (8011dc0 <tcp_timer_needed+0x30>)
 8011dae:	2201      	movs	r2, #1
 8011db0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011db2:	2200      	movs	r2, #0
 8011db4:	4905      	ldr	r1, [pc, #20]	@ (8011dcc <tcp_timer_needed+0x3c>)
 8011db6:	20fa      	movs	r0, #250	@ 0xfa
 8011db8:	f000 f8cc 	bl	8011f54 <sys_timeout>
  }
}
 8011dbc:	bf00      	nop
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	200083b8 	.word	0x200083b8
 8011dc4:	20008368 	.word	0x20008368
 8011dc8:	2000836c 	.word	0x2000836c
 8011dcc:	08011d49 	.word	0x08011d49

08011dd0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b086      	sub	sp, #24
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	60b9      	str	r1, [r7, #8]
 8011dda:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011ddc:	2006      	movs	r0, #6
 8011dde:	f7f9 fbeb 	bl	800b5b8 <memp_malloc>
 8011de2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d109      	bne.n	8011dfe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d151      	bne.n	8011e94 <sys_timeout_abs+0xc4>
 8011df0:	4b2a      	ldr	r3, [pc, #168]	@ (8011e9c <sys_timeout_abs+0xcc>)
 8011df2:	22be      	movs	r2, #190	@ 0xbe
 8011df4:	492a      	ldr	r1, [pc, #168]	@ (8011ea0 <sys_timeout_abs+0xd0>)
 8011df6:	482b      	ldr	r0, [pc, #172]	@ (8011ea4 <sys_timeout_abs+0xd4>)
 8011df8:	f004 f898 	bl	8015f2c <iprintf>
    return;
 8011dfc:	e04a      	b.n	8011e94 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	2200      	movs	r2, #0
 8011e02:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	68ba      	ldr	r2, [r7, #8]
 8011e08:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	687a      	ldr	r2, [r7, #4]
 8011e0e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011e16:	4b24      	ldr	r3, [pc, #144]	@ (8011ea8 <sys_timeout_abs+0xd8>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d103      	bne.n	8011e26 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011e1e:	4a22      	ldr	r2, [pc, #136]	@ (8011ea8 <sys_timeout_abs+0xd8>)
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	6013      	str	r3, [r2, #0]
    return;
 8011e24:	e037      	b.n	8011e96 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	685a      	ldr	r2, [r3, #4]
 8011e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8011ea8 <sys_timeout_abs+0xd8>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	0fdb      	lsrs	r3, r3, #31
 8011e34:	f003 0301 	and.w	r3, r3, #1
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d007      	beq.n	8011e4e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8011ea8 <sys_timeout_abs+0xd8>)
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011e46:	4a18      	ldr	r2, [pc, #96]	@ (8011ea8 <sys_timeout_abs+0xd8>)
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	6013      	str	r3, [r2, #0]
 8011e4c:	e023      	b.n	8011e96 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011e4e:	4b16      	ldr	r3, [pc, #88]	@ (8011ea8 <sys_timeout_abs+0xd8>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	617b      	str	r3, [r7, #20]
 8011e54:	e01a      	b.n	8011e8c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d00b      	beq.n	8011e76 <sys_timeout_abs+0xa6>
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	685a      	ldr	r2, [r3, #4]
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	0fdb      	lsrs	r3, r3, #31
 8011e6c:	f003 0301 	and.w	r3, r3, #1
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d007      	beq.n	8011e86 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	693a      	ldr	r2, [r7, #16]
 8011e82:	601a      	str	r2, [r3, #0]
        break;
 8011e84:	e007      	b.n	8011e96 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	617b      	str	r3, [r7, #20]
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1e1      	bne.n	8011e56 <sys_timeout_abs+0x86>
 8011e92:	e000      	b.n	8011e96 <sys_timeout_abs+0xc6>
    return;
 8011e94:	bf00      	nop
      }
    }
  }
}
 8011e96:	3718      	adds	r7, #24
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	0801911c 	.word	0x0801911c
 8011ea0:	08019150 	.word	0x08019150
 8011ea4:	08019190 	.word	0x08019190
 8011ea8:	200083b0 	.word	0x200083b0

08011eac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b086      	sub	sp, #24
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	4798      	blx	r3

  now = sys_now();
 8011ebe:	f7f8 fccb 	bl	800a858 <sys_now>
 8011ec2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8011f08 <lwip_cyclic_timer+0x5c>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	4413      	add	r3, r2
 8011ece:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	1ad3      	subs	r3, r2, r3
 8011ed6:	0fdb      	lsrs	r3, r3, #31
 8011ed8:	f003 0301 	and.w	r3, r3, #1
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d009      	beq.n	8011ef6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	4413      	add	r3, r2
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	4907      	ldr	r1, [pc, #28]	@ (8011f0c <lwip_cyclic_timer+0x60>)
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7ff ff6e 	bl	8011dd0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011ef4:	e004      	b.n	8011f00 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	4904      	ldr	r1, [pc, #16]	@ (8011f0c <lwip_cyclic_timer+0x60>)
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	f7ff ff68 	bl	8011dd0 <sys_timeout_abs>
}
 8011f00:	bf00      	nop
 8011f02:	3718      	adds	r7, #24
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	200083b4 	.word	0x200083b4
 8011f0c:	08011ead 	.word	0x08011ead

08011f10 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011f16:	2301      	movs	r3, #1
 8011f18:	607b      	str	r3, [r7, #4]
 8011f1a:	e00e      	b.n	8011f3a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8011f4c <sys_timeouts_init+0x3c>)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	00db      	lsls	r3, r3, #3
 8011f28:	4a08      	ldr	r2, [pc, #32]	@ (8011f4c <sys_timeouts_init+0x3c>)
 8011f2a:	4413      	add	r3, r2
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	4908      	ldr	r1, [pc, #32]	@ (8011f50 <sys_timeouts_init+0x40>)
 8011f30:	f000 f810 	bl	8011f54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	3301      	adds	r3, #1
 8011f38:	607b      	str	r3, [r7, #4]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b02      	cmp	r3, #2
 8011f3e:	d9ed      	bls.n	8011f1c <sys_timeouts_init+0xc>
  }
}
 8011f40:	bf00      	nop
 8011f42:	bf00      	nop
 8011f44:	3708      	adds	r7, #8
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	0801a558 	.word	0x0801a558
 8011f50:	08011ead 	.word	0x08011ead

08011f54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b086      	sub	sp, #24
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f66:	d306      	bcc.n	8011f76 <sys_timeout+0x22>
 8011f68:	4b0a      	ldr	r3, [pc, #40]	@ (8011f94 <sys_timeout+0x40>)
 8011f6a:	f240 1229 	movw	r2, #297	@ 0x129
 8011f6e:	490a      	ldr	r1, [pc, #40]	@ (8011f98 <sys_timeout+0x44>)
 8011f70:	480a      	ldr	r0, [pc, #40]	@ (8011f9c <sys_timeout+0x48>)
 8011f72:	f003 ffdb 	bl	8015f2c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011f76:	f7f8 fc6f 	bl	800a858 <sys_now>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	4413      	add	r3, r2
 8011f80:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	68b9      	ldr	r1, [r7, #8]
 8011f86:	6978      	ldr	r0, [r7, #20]
 8011f88:	f7ff ff22 	bl	8011dd0 <sys_timeout_abs>
#endif
}
 8011f8c:	bf00      	nop
 8011f8e:	3718      	adds	r7, #24
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	0801911c 	.word	0x0801911c
 8011f98:	080191b8 	.word	0x080191b8
 8011f9c:	08019190 	.word	0x08019190

08011fa0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011fa6:	f7f8 fc57 	bl	800a858 <sys_now>
 8011faa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011fac:	4b1a      	ldr	r3, [pc, #104]	@ (8012018 <sys_check_timeouts+0x78>)
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d001      	beq.n	8011fba <sys_check_timeouts+0x1a>
 8011fb6:	f7f9 ffa1 	bl	800befc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011fba:	4b18      	ldr	r3, [pc, #96]	@ (801201c <sys_check_timeouts+0x7c>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d022      	beq.n	801200c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	68fa      	ldr	r2, [r7, #12]
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	0fdb      	lsrs	r3, r3, #31
 8011fd0:	f003 0301 	and.w	r3, r3, #1
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d11a      	bne.n	8012010 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	4a0f      	ldr	r2, [pc, #60]	@ (801201c <sys_check_timeouts+0x7c>)
 8011fe0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	685b      	ldr	r3, [r3, #4]
 8011ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8012020 <sys_check_timeouts+0x80>)
 8011ff4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011ff6:	68b9      	ldr	r1, [r7, #8]
 8011ff8:	2006      	movs	r0, #6
 8011ffa:	f7f9 fb4d 	bl	800b698 <memp_free>
    if (handler != NULL) {
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d0d3      	beq.n	8011fac <sys_check_timeouts+0xc>
      handler(arg);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6838      	ldr	r0, [r7, #0]
 8012008:	4798      	blx	r3
  do {
 801200a:	e7cf      	b.n	8011fac <sys_check_timeouts+0xc>
      return;
 801200c:	bf00      	nop
 801200e:	e000      	b.n	8012012 <sys_check_timeouts+0x72>
      return;
 8012010:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012012:	3710      	adds	r7, #16
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}
 8012018:	20008359 	.word	0x20008359
 801201c:	200083b0 	.word	0x200083b0
 8012020:	200083b4 	.word	0x200083b4

08012024 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012028:	f003 fe80 	bl	8015d2c <rand>
 801202c:	4603      	mov	r3, r0
 801202e:	b29b      	uxth	r3, r3
 8012030:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012034:	b29b      	uxth	r3, r3
 8012036:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801203a:	b29a      	uxth	r2, r3
 801203c:	4b01      	ldr	r3, [pc, #4]	@ (8012044 <udp_init+0x20>)
 801203e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012040:	bf00      	nop
 8012042:	bd80      	pop	{r7, pc}
 8012044:	2000006c 	.word	0x2000006c

08012048 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801204e:	2300      	movs	r3, #0
 8012050:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012052:	4b17      	ldr	r3, [pc, #92]	@ (80120b0 <udp_new_port+0x68>)
 8012054:	881b      	ldrh	r3, [r3, #0]
 8012056:	1c5a      	adds	r2, r3, #1
 8012058:	b291      	uxth	r1, r2
 801205a:	4a15      	ldr	r2, [pc, #84]	@ (80120b0 <udp_new_port+0x68>)
 801205c:	8011      	strh	r1, [r2, #0]
 801205e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012062:	4293      	cmp	r3, r2
 8012064:	d103      	bne.n	801206e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012066:	4b12      	ldr	r3, [pc, #72]	@ (80120b0 <udp_new_port+0x68>)
 8012068:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801206c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801206e:	4b11      	ldr	r3, [pc, #68]	@ (80120b4 <udp_new_port+0x6c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	603b      	str	r3, [r7, #0]
 8012074:	e011      	b.n	801209a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	8a5a      	ldrh	r2, [r3, #18]
 801207a:	4b0d      	ldr	r3, [pc, #52]	@ (80120b0 <udp_new_port+0x68>)
 801207c:	881b      	ldrh	r3, [r3, #0]
 801207e:	429a      	cmp	r2, r3
 8012080:	d108      	bne.n	8012094 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012082:	88fb      	ldrh	r3, [r7, #6]
 8012084:	3301      	adds	r3, #1
 8012086:	80fb      	strh	r3, [r7, #6]
 8012088:	88fb      	ldrh	r3, [r7, #6]
 801208a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801208e:	d3e0      	bcc.n	8012052 <udp_new_port+0xa>
        return 0;
 8012090:	2300      	movs	r3, #0
 8012092:	e007      	b.n	80120a4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	603b      	str	r3, [r7, #0]
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d1ea      	bne.n	8012076 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80120a0:	4b03      	ldr	r3, [pc, #12]	@ (80120b0 <udp_new_port+0x68>)
 80120a2:	881b      	ldrh	r3, [r3, #0]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	370c      	adds	r7, #12
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr
 80120b0:	2000006c 	.word	0x2000006c
 80120b4:	200083bc 	.word	0x200083bc

080120b8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	4613      	mov	r3, r2
 80120c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d105      	bne.n	80120d8 <udp_input_local_match+0x20>
 80120cc:	4b27      	ldr	r3, [pc, #156]	@ (801216c <udp_input_local_match+0xb4>)
 80120ce:	2287      	movs	r2, #135	@ 0x87
 80120d0:	4927      	ldr	r1, [pc, #156]	@ (8012170 <udp_input_local_match+0xb8>)
 80120d2:	4828      	ldr	r0, [pc, #160]	@ (8012174 <udp_input_local_match+0xbc>)
 80120d4:	f003 ff2a 	bl	8015f2c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d105      	bne.n	80120ea <udp_input_local_match+0x32>
 80120de:	4b23      	ldr	r3, [pc, #140]	@ (801216c <udp_input_local_match+0xb4>)
 80120e0:	2288      	movs	r2, #136	@ 0x88
 80120e2:	4925      	ldr	r1, [pc, #148]	@ (8012178 <udp_input_local_match+0xc0>)
 80120e4:	4823      	ldr	r0, [pc, #140]	@ (8012174 <udp_input_local_match+0xbc>)
 80120e6:	f003 ff21 	bl	8015f2c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	7a1b      	ldrb	r3, [r3, #8]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d00b      	beq.n	801210a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	7a1a      	ldrb	r2, [r3, #8]
 80120f6:	4b21      	ldr	r3, [pc, #132]	@ (801217c <udp_input_local_match+0xc4>)
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120fe:	3301      	adds	r3, #1
 8012100:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012102:	429a      	cmp	r2, r3
 8012104:	d001      	beq.n	801210a <udp_input_local_match+0x52>
    return 0;
 8012106:	2300      	movs	r3, #0
 8012108:	e02b      	b.n	8012162 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801210a:	79fb      	ldrb	r3, [r7, #7]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d018      	beq.n	8012142 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d013      	beq.n	801213e <udp_input_local_match+0x86>
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00f      	beq.n	801213e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801211e:	4b17      	ldr	r3, [pc, #92]	@ (801217c <udp_input_local_match+0xc4>)
 8012120:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012126:	d00a      	beq.n	801213e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681a      	ldr	r2, [r3, #0]
 801212c:	4b13      	ldr	r3, [pc, #76]	@ (801217c <udp_input_local_match+0xc4>)
 801212e:	695b      	ldr	r3, [r3, #20]
 8012130:	405a      	eors	r2, r3
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	3308      	adds	r3, #8
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801213a:	2b00      	cmp	r3, #0
 801213c:	d110      	bne.n	8012160 <udp_input_local_match+0xa8>
          return 1;
 801213e:	2301      	movs	r3, #1
 8012140:	e00f      	b.n	8012162 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d009      	beq.n	801215c <udp_input_local_match+0xa4>
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d005      	beq.n	801215c <udp_input_local_match+0xa4>
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	4b09      	ldr	r3, [pc, #36]	@ (801217c <udp_input_local_match+0xc4>)
 8012156:	695b      	ldr	r3, [r3, #20]
 8012158:	429a      	cmp	r2, r3
 801215a:	d101      	bne.n	8012160 <udp_input_local_match+0xa8>
        return 1;
 801215c:	2301      	movs	r3, #1
 801215e:	e000      	b.n	8012162 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012160:	2300      	movs	r3, #0
}
 8012162:	4618      	mov	r0, r3
 8012164:	3710      	adds	r7, #16
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop
 801216c:	08019204 	.word	0x08019204
 8012170:	08019234 	.word	0x08019234
 8012174:	08019258 	.word	0x08019258
 8012178:	08019280 	.word	0x08019280
 801217c:	20005400 	.word	0x20005400

08012180 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012180:	b590      	push	{r4, r7, lr}
 8012182:	b08d      	sub	sp, #52	@ 0x34
 8012184:	af02      	add	r7, sp, #8
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801218a:	2300      	movs	r3, #0
 801218c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d105      	bne.n	80121a0 <udp_input+0x20>
 8012194:	4b95      	ldr	r3, [pc, #596]	@ (80123ec <udp_input+0x26c>)
 8012196:	22cf      	movs	r2, #207	@ 0xcf
 8012198:	4995      	ldr	r1, [pc, #596]	@ (80123f0 <udp_input+0x270>)
 801219a:	4896      	ldr	r0, [pc, #600]	@ (80123f4 <udp_input+0x274>)
 801219c:	f003 fec6 	bl	8015f2c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d105      	bne.n	80121b2 <udp_input+0x32>
 80121a6:	4b91      	ldr	r3, [pc, #580]	@ (80123ec <udp_input+0x26c>)
 80121a8:	22d0      	movs	r2, #208	@ 0xd0
 80121aa:	4993      	ldr	r1, [pc, #588]	@ (80123f8 <udp_input+0x278>)
 80121ac:	4891      	ldr	r0, [pc, #580]	@ (80123f4 <udp_input+0x274>)
 80121ae:	f003 febd 	bl	8015f2c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	895b      	ldrh	r3, [r3, #10]
 80121b6:	2b07      	cmp	r3, #7
 80121b8:	d809      	bhi.n	80121ce <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	891b      	ldrh	r3, [r3, #8]
 80121be:	4619      	mov	r1, r3
 80121c0:	488e      	ldr	r0, [pc, #568]	@ (80123fc <udp_input+0x27c>)
 80121c2:	f003 feb3 	bl	8015f2c <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f7fa f9d2 	bl	800c570 <pbuf_free>
    goto end;
 80121cc:	e18d      	b.n	80124ea <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80121d4:	4b8a      	ldr	r3, [pc, #552]	@ (8012400 <udp_input+0x280>)
 80121d6:	695b      	ldr	r3, [r3, #20]
 80121d8:	4a89      	ldr	r2, [pc, #548]	@ (8012400 <udp_input+0x280>)
 80121da:	6812      	ldr	r2, [r2, #0]
 80121dc:	4611      	mov	r1, r2
 80121de:	4618      	mov	r0, r3
 80121e0:	f002 f9ca 	bl	8014578 <ip4_addr_isbroadcast_u32>
 80121e4:	4603      	mov	r3, r0
 80121e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	891b      	ldrh	r3, [r3, #8]
 80121ec:	4619      	mov	r1, r3
 80121ee:	4885      	ldr	r0, [pc, #532]	@ (8012404 <udp_input+0x284>)
 80121f0:	f003 fe9c 	bl	8015f2c <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	881b      	ldrh	r3, [r3, #0]
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7f8 fd68 	bl	800acd0 <lwip_htons>
 8012200:	4603      	mov	r3, r0
 8012202:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	885b      	ldrh	r3, [r3, #2]
 8012208:	b29b      	uxth	r3, r3
 801220a:	4618      	mov	r0, r3
 801220c:	f7f8 fd60 	bl	800acd0 <lwip_htons>
 8012210:	4603      	mov	r3, r0
 8012212:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8012214:	6978      	ldr	r0, [r7, #20]
 8012216:	f000 fd3b 	bl	8012c90 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801221a:	487b      	ldr	r0, [pc, #492]	@ (8012408 <udp_input+0x288>)
 801221c:	f003 fe86 	bl	8015f2c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8012220:	4b77      	ldr	r3, [pc, #476]	@ (8012400 <udp_input+0x280>)
 8012222:	695b      	ldr	r3, [r3, #20]
 8012224:	b2db      	uxtb	r3, r3
 8012226:	4619      	mov	r1, r3
 8012228:	4b75      	ldr	r3, [pc, #468]	@ (8012400 <udp_input+0x280>)
 801222a:	695b      	ldr	r3, [r3, #20]
 801222c:	0a1b      	lsrs	r3, r3, #8
 801222e:	b2db      	uxtb	r3, r3
 8012230:	461a      	mov	r2, r3
 8012232:	4b73      	ldr	r3, [pc, #460]	@ (8012400 <udp_input+0x280>)
 8012234:	695b      	ldr	r3, [r3, #20]
 8012236:	0c1b      	lsrs	r3, r3, #16
 8012238:	b2db      	uxtb	r3, r3
 801223a:	4618      	mov	r0, r3
 801223c:	4b70      	ldr	r3, [pc, #448]	@ (8012400 <udp_input+0x280>)
 801223e:	695b      	ldr	r3, [r3, #20]
 8012240:	0e1b      	lsrs	r3, r3, #24
 8012242:	b2db      	uxtb	r3, r3
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	4603      	mov	r3, r0
 8012248:	4870      	ldr	r0, [pc, #448]	@ (801240c <udp_input+0x28c>)
 801224a:	f003 fe6f 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	885b      	ldrh	r3, [r3, #2]
 8012252:	b29b      	uxth	r3, r3
 8012254:	4618      	mov	r0, r3
 8012256:	f7f8 fd3b 	bl	800acd0 <lwip_htons>
 801225a:	4603      	mov	r3, r0
 801225c:	4619      	mov	r1, r3
 801225e:	486c      	ldr	r0, [pc, #432]	@ (8012410 <udp_input+0x290>)
 8012260:	f003 fe64 	bl	8015f2c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 8012264:	4b66      	ldr	r3, [pc, #408]	@ (8012400 <udp_input+0x280>)
 8012266:	691b      	ldr	r3, [r3, #16]
 8012268:	b2db      	uxtb	r3, r3
 801226a:	4619      	mov	r1, r3
 801226c:	4b64      	ldr	r3, [pc, #400]	@ (8012400 <udp_input+0x280>)
 801226e:	691b      	ldr	r3, [r3, #16]
 8012270:	0a1b      	lsrs	r3, r3, #8
 8012272:	b2db      	uxtb	r3, r3
 8012274:	461a      	mov	r2, r3
 8012276:	4b62      	ldr	r3, [pc, #392]	@ (8012400 <udp_input+0x280>)
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	0c1b      	lsrs	r3, r3, #16
 801227c:	b2db      	uxtb	r3, r3
 801227e:	4618      	mov	r0, r3
 8012280:	4b5f      	ldr	r3, [pc, #380]	@ (8012400 <udp_input+0x280>)
 8012282:	691b      	ldr	r3, [r3, #16]
 8012284:	0e1b      	lsrs	r3, r3, #24
 8012286:	b2db      	uxtb	r3, r3
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	4603      	mov	r3, r0
 801228c:	485f      	ldr	r0, [pc, #380]	@ (801240c <udp_input+0x28c>)
 801228e:	f003 fe4d 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	881b      	ldrh	r3, [r3, #0]
 8012296:	b29b      	uxth	r3, r3
 8012298:	4618      	mov	r0, r3
 801229a:	f7f8 fd19 	bl	800acd0 <lwip_htons>
 801229e:	4603      	mov	r3, r0
 80122a0:	4619      	mov	r1, r3
 80122a2:	485c      	ldr	r0, [pc, #368]	@ (8012414 <udp_input+0x294>)
 80122a4:	f003 fe42 	bl	8015f2c <iprintf>

  pcb = NULL;
 80122a8:	2300      	movs	r3, #0
 80122aa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80122ac:	2300      	movs	r3, #0
 80122ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80122b0:	2300      	movs	r3, #0
 80122b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122b4:	4b58      	ldr	r3, [pc, #352]	@ (8012418 <udp_input+0x298>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80122ba:	e091      	b.n	80123e0 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 80122bc:	4857      	ldr	r0, [pc, #348]	@ (801241c <udp_input+0x29c>)
 80122be:	f003 fe35 	bl	8015f2c <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 80122c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	b2db      	uxtb	r3, r3
 80122c8:	4619      	mov	r1, r3
 80122ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	0a1b      	lsrs	r3, r3, #8
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	461a      	mov	r2, r3
 80122d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	0c1b      	lsrs	r3, r3, #16
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	4618      	mov	r0, r3
 80122de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	0e1b      	lsrs	r3, r3, #24
 80122e4:	b2db      	uxtb	r3, r3
 80122e6:	9300      	str	r3, [sp, #0]
 80122e8:	4603      	mov	r3, r0
 80122ea:	4848      	ldr	r0, [pc, #288]	@ (801240c <udp_input+0x28c>)
 80122ec:	f003 fe1e 	bl	8015f2c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 80122f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f2:	8a5b      	ldrh	r3, [r3, #18]
 80122f4:	4619      	mov	r1, r3
 80122f6:	4846      	ldr	r0, [pc, #280]	@ (8012410 <udp_input+0x290>)
 80122f8:	f003 fe18 	bl	8015f2c <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 80122fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	b2db      	uxtb	r3, r3
 8012302:	4619      	mov	r1, r3
 8012304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	0a1b      	lsrs	r3, r3, #8
 801230a:	b2db      	uxtb	r3, r3
 801230c:	461a      	mov	r2, r3
 801230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	0c1b      	lsrs	r3, r3, #16
 8012314:	b2db      	uxtb	r3, r3
 8012316:	4618      	mov	r0, r3
 8012318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801231a:	685b      	ldr	r3, [r3, #4]
 801231c:	0e1b      	lsrs	r3, r3, #24
 801231e:	b2db      	uxtb	r3, r3
 8012320:	9300      	str	r3, [sp, #0]
 8012322:	4603      	mov	r3, r0
 8012324:	4839      	ldr	r0, [pc, #228]	@ (801240c <udp_input+0x28c>)
 8012326:	f003 fe01 	bl	8015f2c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232c:	8a9b      	ldrh	r3, [r3, #20]
 801232e:	4619      	mov	r1, r3
 8012330:	4838      	ldr	r0, [pc, #224]	@ (8012414 <udp_input+0x294>)
 8012332:	f003 fdfb 	bl	8015f2c <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012338:	8a5b      	ldrh	r3, [r3, #18]
 801233a:	89fa      	ldrh	r2, [r7, #14]
 801233c:	429a      	cmp	r2, r3
 801233e:	d14a      	bne.n	80123d6 <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012340:	7cfb      	ldrb	r3, [r7, #19]
 8012342:	461a      	mov	r2, r3
 8012344:	6839      	ldr	r1, [r7, #0]
 8012346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012348:	f7ff feb6 	bl	80120b8 <udp_input_local_match>
 801234c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801234e:	2b00      	cmp	r3, #0
 8012350:	d041      	beq.n	80123d6 <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012354:	7c1b      	ldrb	r3, [r3, #16]
 8012356:	f003 0304 	and.w	r3, r3, #4
 801235a:	2b00      	cmp	r3, #0
 801235c:	d11d      	bne.n	801239a <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d102      	bne.n	801236a <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012366:	61fb      	str	r3, [r7, #28]
 8012368:	e017      	b.n	801239a <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801236a:	7cfb      	ldrb	r3, [r7, #19]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d014      	beq.n	801239a <udp_input+0x21a>
 8012370:	4b23      	ldr	r3, [pc, #140]	@ (8012400 <udp_input+0x280>)
 8012372:	695b      	ldr	r3, [r3, #20]
 8012374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012378:	d10f      	bne.n	801239a <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	681a      	ldr	r2, [r3, #0]
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	3304      	adds	r3, #4
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	429a      	cmp	r2, r3
 8012386:	d008      	beq.n	801239a <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801238a:	681a      	ldr	r2, [r3, #0]
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	3304      	adds	r3, #4
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	429a      	cmp	r2, r3
 8012394:	d101      	bne.n	801239a <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 8012396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012398:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239c:	8a9b      	ldrh	r3, [r3, #20]
 801239e:	8a3a      	ldrh	r2, [r7, #16]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d118      	bne.n	80123d6 <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d005      	beq.n	80123b8 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80123ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ae:	685a      	ldr	r2, [r3, #4]
 80123b0:	4b13      	ldr	r3, [pc, #76]	@ (8012400 <udp_input+0x280>)
 80123b2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d10e      	bne.n	80123d6 <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80123b8:	6a3b      	ldr	r3, [r7, #32]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d030      	beq.n	8012420 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80123be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123c0:	68da      	ldr	r2, [r3, #12]
 80123c2:	6a3b      	ldr	r3, [r7, #32]
 80123c4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80123c6:	4b14      	ldr	r3, [pc, #80]	@ (8012418 <udp_input+0x298>)
 80123c8:	681a      	ldr	r2, [r3, #0]
 80123ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123cc:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80123ce:	4a12      	ldr	r2, [pc, #72]	@ (8012418 <udp_input+0x298>)
 80123d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80123d4:	e024      	b.n	8012420 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 80123d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d8:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80123da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	627b      	str	r3, [r7, #36]	@ 0x24
 80123e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f47f af6a 	bne.w	80122bc <udp_input+0x13c>
 80123e8:	e01b      	b.n	8012422 <udp_input+0x2a2>
 80123ea:	bf00      	nop
 80123ec:	08019204 	.word	0x08019204
 80123f0:	080192a8 	.word	0x080192a8
 80123f4:	08019258 	.word	0x08019258
 80123f8:	080192c0 	.word	0x080192c0
 80123fc:	080192dc 	.word	0x080192dc
 8012400:	20005400 	.word	0x20005400
 8012404:	08019314 	.word	0x08019314
 8012408:	08019340 	.word	0x08019340
 801240c:	08019348 	.word	0x08019348
 8012410:	08019358 	.word	0x08019358
 8012414:	08019368 	.word	0x08019368
 8012418:	200083bc 	.word	0x200083bc
 801241c:	08019370 	.word	0x08019370
        break;
 8012420:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012424:	2b00      	cmp	r3, #0
 8012426:	d101      	bne.n	801242c <udp_input+0x2ac>
    pcb = uncon_pcb;
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801242e:	2b00      	cmp	r3, #0
 8012430:	d002      	beq.n	8012438 <udp_input+0x2b8>
    for_us = 1;
 8012432:	2301      	movs	r3, #1
 8012434:	76fb      	strb	r3, [r7, #27]
 8012436:	e00a      	b.n	801244e <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	3304      	adds	r3, #4
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	4b2d      	ldr	r3, [pc, #180]	@ (80124f4 <udp_input+0x374>)
 8012440:	695b      	ldr	r3, [r3, #20]
 8012442:	429a      	cmp	r2, r3
 8012444:	bf0c      	ite	eq
 8012446:	2301      	moveq	r3, #1
 8012448:	2300      	movne	r3, #0
 801244a:	b2db      	uxtb	r3, r3
 801244c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801244e:	7efb      	ldrb	r3, [r7, #27]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d047      	beq.n	80124e4 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8012454:	4828      	ldr	r0, [pc, #160]	@ (80124f8 <udp_input+0x378>)
 8012456:	f003 fdd9 	bl	801600c <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801245a:	2108      	movs	r1, #8
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f7fa f801 	bl	800c464 <pbuf_remove_header>
 8012462:	4603      	mov	r3, r0
 8012464:	2b00      	cmp	r3, #0
 8012466:	d00a      	beq.n	801247e <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012468:	4b24      	ldr	r3, [pc, #144]	@ (80124fc <udp_input+0x37c>)
 801246a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801246e:	4924      	ldr	r1, [pc, #144]	@ (8012500 <udp_input+0x380>)
 8012470:	4824      	ldr	r0, [pc, #144]	@ (8012504 <udp_input+0x384>)
 8012472:	f003 fd5b 	bl	8015f2c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f7fa f87a 	bl	800c570 <pbuf_free>
      goto end;
 801247c:	e035      	b.n	80124ea <udp_input+0x36a>
    }

    if (pcb != NULL) {
 801247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012480:	2b00      	cmp	r3, #0
 8012482:	d012      	beq.n	80124aa <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012486:	699b      	ldr	r3, [r3, #24]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d00a      	beq.n	80124a2 <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801248e:	699c      	ldr	r4, [r3, #24]
 8012490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012492:	69d8      	ldr	r0, [r3, #28]
 8012494:	8a3b      	ldrh	r3, [r7, #16]
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	4b1b      	ldr	r3, [pc, #108]	@ (8012508 <udp_input+0x388>)
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801249e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80124a0:	e024      	b.n	80124ec <udp_input+0x36c>
        pbuf_free(p);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7fa f864 	bl	800c570 <pbuf_free>
        goto end;
 80124a8:	e01f      	b.n	80124ea <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 80124aa:	4818      	ldr	r0, [pc, #96]	@ (801250c <udp_input+0x38c>)
 80124ac:	f003 fdae 	bl	801600c <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80124b0:	7cfb      	ldrb	r3, [r7, #19]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d112      	bne.n	80124dc <udp_input+0x35c>
 80124b6:	4b0f      	ldr	r3, [pc, #60]	@ (80124f4 <udp_input+0x374>)
 80124b8:	695b      	ldr	r3, [r3, #20]
 80124ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80124be:	2be0      	cmp	r3, #224	@ 0xe0
 80124c0:	d00c      	beq.n	80124dc <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80124c2:	4b0c      	ldr	r3, [pc, #48]	@ (80124f4 <udp_input+0x374>)
 80124c4:	899b      	ldrh	r3, [r3, #12]
 80124c6:	3308      	adds	r3, #8
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	b21b      	sxth	r3, r3
 80124cc:	4619      	mov	r1, r3
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7fa f83b 	bl	800c54a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80124d4:	2103      	movs	r1, #3
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f001 fcee 	bl	8013eb8 <icmp_dest_unreach>
      pbuf_free(p);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7fa f847 	bl	800c570 <pbuf_free>
  return;
 80124e2:	e003      	b.n	80124ec <udp_input+0x36c>
    pbuf_free(p);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7fa f843 	bl	800c570 <pbuf_free>
  return;
 80124ea:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80124ec:	372c      	adds	r7, #44	@ 0x2c
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd90      	pop	{r4, r7, pc}
 80124f2:	bf00      	nop
 80124f4:	20005400 	.word	0x20005400
 80124f8:	08019378 	.word	0x08019378
 80124fc:	08019204 	.word	0x08019204
 8012500:	08019398 	.word	0x08019398
 8012504:	08019258 	.word	0x08019258
 8012508:	20005410 	.word	0x20005410
 801250c:	080193b4 	.word	0x080193b4

08012510 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b088      	sub	sp, #32
 8012514:	af02      	add	r7, sp, #8
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
 801251c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d109      	bne.n	8012538 <udp_sendto+0x28>
 8012524:	4b3b      	ldr	r3, [pc, #236]	@ (8012614 <udp_sendto+0x104>)
 8012526:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801252a:	493b      	ldr	r1, [pc, #236]	@ (8012618 <udp_sendto+0x108>)
 801252c:	483b      	ldr	r0, [pc, #236]	@ (801261c <udp_sendto+0x10c>)
 801252e:	f003 fcfd 	bl	8015f2c <iprintf>
 8012532:	f06f 030f 	mvn.w	r3, #15
 8012536:	e068      	b.n	801260a <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d109      	bne.n	8012552 <udp_sendto+0x42>
 801253e:	4b35      	ldr	r3, [pc, #212]	@ (8012614 <udp_sendto+0x104>)
 8012540:	f240 2219 	movw	r2, #537	@ 0x219
 8012544:	4936      	ldr	r1, [pc, #216]	@ (8012620 <udp_sendto+0x110>)
 8012546:	4835      	ldr	r0, [pc, #212]	@ (801261c <udp_sendto+0x10c>)
 8012548:	f003 fcf0 	bl	8015f2c <iprintf>
 801254c:	f06f 030f 	mvn.w	r3, #15
 8012550:	e05b      	b.n	801260a <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d109      	bne.n	801256c <udp_sendto+0x5c>
 8012558:	4b2e      	ldr	r3, [pc, #184]	@ (8012614 <udp_sendto+0x104>)
 801255a:	f240 221a 	movw	r2, #538	@ 0x21a
 801255e:	4931      	ldr	r1, [pc, #196]	@ (8012624 <udp_sendto+0x114>)
 8012560:	482e      	ldr	r0, [pc, #184]	@ (801261c <udp_sendto+0x10c>)
 8012562:	f003 fce3 	bl	8015f2c <iprintf>
 8012566:	f06f 030f 	mvn.w	r3, #15
 801256a:	e04e      	b.n	801260a <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801256c:	482e      	ldr	r0, [pc, #184]	@ (8012628 <udp_sendto+0x118>)
 801256e:	f003 fd4d 	bl	801600c <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	7a1b      	ldrb	r3, [r3, #8]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d006      	beq.n	8012588 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	7a1b      	ldrb	r3, [r3, #8]
 801257e:	4618      	mov	r0, r3
 8012580:	f7f9 fc96 	bl	800beb0 <netif_get_by_index>
 8012584:	6178      	str	r0, [r7, #20]
 8012586:	e003      	b.n	8012590 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f001 fd5f 	bl	801404c <ip4_route>
 801258e:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d12f      	bne.n	80125f6 <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 8012596:	4825      	ldr	r0, [pc, #148]	@ (801262c <udp_sendto+0x11c>)
 8012598:	f003 fcc8 	bl	8015f2c <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d003      	beq.n	80125aa <udp_sendto+0x9a>
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	4619      	mov	r1, r3
 80125a8:	e000      	b.n	80125ac <udp_sendto+0x9c>
 80125aa:	2100      	movs	r1, #0
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d004      	beq.n	80125bc <udp_sendto+0xac>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	3301      	adds	r3, #1
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	461a      	mov	r2, r3
 80125ba:	e000      	b.n	80125be <udp_sendto+0xae>
 80125bc:	2200      	movs	r2, #0
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d004      	beq.n	80125ce <udp_sendto+0xbe>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	3302      	adds	r3, #2
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	4618      	mov	r0, r3
 80125cc:	e000      	b.n	80125d0 <udp_sendto+0xc0>
 80125ce:	2000      	movs	r0, #0
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d003      	beq.n	80125de <udp_sendto+0xce>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	3303      	adds	r3, #3
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	e000      	b.n	80125e0 <udp_sendto+0xd0>
 80125de:	2300      	movs	r3, #0
 80125e0:	9300      	str	r3, [sp, #0]
 80125e2:	4603      	mov	r3, r0
 80125e4:	4812      	ldr	r0, [pc, #72]	@ (8012630 <udp_sendto+0x120>)
 80125e6:	f003 fca1 	bl	8015f2c <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 80125ea:	200a      	movs	r0, #10
 80125ec:	f003 fcb0 	bl	8015f50 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80125f0:	f06f 0303 	mvn.w	r3, #3
 80125f4:	e009      	b.n	801260a <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80125f6:	887a      	ldrh	r2, [r7, #2]
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	9300      	str	r3, [sp, #0]
 80125fc:	4613      	mov	r3, r2
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	68b9      	ldr	r1, [r7, #8]
 8012602:	68f8      	ldr	r0, [r7, #12]
 8012604:	f000 f816 	bl	8012634 <udp_sendto_if>
 8012608:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801260a:	4618      	mov	r0, r3
 801260c:	3718      	adds	r7, #24
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	08019204 	.word	0x08019204
 8012618:	080193fc 	.word	0x080193fc
 801261c:	08019258 	.word	0x08019258
 8012620:	08019414 	.word	0x08019414
 8012624:	08019430 	.word	0x08019430
 8012628:	0801944c 	.word	0x0801944c
 801262c:	08019458 	.word	0x08019458
 8012630:	08019348 	.word	0x08019348

08012634 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b088      	sub	sp, #32
 8012638:	af02      	add	r7, sp, #8
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	60b9      	str	r1, [r7, #8]
 801263e:	607a      	str	r2, [r7, #4]
 8012640:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d109      	bne.n	801265c <udp_sendto_if+0x28>
 8012648:	4b2e      	ldr	r3, [pc, #184]	@ (8012704 <udp_sendto_if+0xd0>)
 801264a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801264e:	492e      	ldr	r1, [pc, #184]	@ (8012708 <udp_sendto_if+0xd4>)
 8012650:	482e      	ldr	r0, [pc, #184]	@ (801270c <udp_sendto_if+0xd8>)
 8012652:	f003 fc6b 	bl	8015f2c <iprintf>
 8012656:	f06f 030f 	mvn.w	r3, #15
 801265a:	e04f      	b.n	80126fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d109      	bne.n	8012676 <udp_sendto_if+0x42>
 8012662:	4b28      	ldr	r3, [pc, #160]	@ (8012704 <udp_sendto_if+0xd0>)
 8012664:	f240 2281 	movw	r2, #641	@ 0x281
 8012668:	4929      	ldr	r1, [pc, #164]	@ (8012710 <udp_sendto_if+0xdc>)
 801266a:	4828      	ldr	r0, [pc, #160]	@ (801270c <udp_sendto_if+0xd8>)
 801266c:	f003 fc5e 	bl	8015f2c <iprintf>
 8012670:	f06f 030f 	mvn.w	r3, #15
 8012674:	e042      	b.n	80126fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d109      	bne.n	8012690 <udp_sendto_if+0x5c>
 801267c:	4b21      	ldr	r3, [pc, #132]	@ (8012704 <udp_sendto_if+0xd0>)
 801267e:	f240 2282 	movw	r2, #642	@ 0x282
 8012682:	4924      	ldr	r1, [pc, #144]	@ (8012714 <udp_sendto_if+0xe0>)
 8012684:	4821      	ldr	r0, [pc, #132]	@ (801270c <udp_sendto_if+0xd8>)
 8012686:	f003 fc51 	bl	8015f2c <iprintf>
 801268a:	f06f 030f 	mvn.w	r3, #15
 801268e:	e035      	b.n	80126fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012690:	6a3b      	ldr	r3, [r7, #32]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d109      	bne.n	80126aa <udp_sendto_if+0x76>
 8012696:	4b1b      	ldr	r3, [pc, #108]	@ (8012704 <udp_sendto_if+0xd0>)
 8012698:	f240 2283 	movw	r2, #643	@ 0x283
 801269c:	491e      	ldr	r1, [pc, #120]	@ (8012718 <udp_sendto_if+0xe4>)
 801269e:	481b      	ldr	r0, [pc, #108]	@ (801270c <udp_sendto_if+0xd8>)
 80126a0:	f003 fc44 	bl	8015f2c <iprintf>
 80126a4:	f06f 030f 	mvn.w	r3, #15
 80126a8:	e028      	b.n	80126fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d009      	beq.n	80126c4 <udp_sendto_if+0x90>
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d005      	beq.n	80126c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80126c0:	2be0      	cmp	r3, #224	@ 0xe0
 80126c2:	d103      	bne.n	80126cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80126c4:	6a3b      	ldr	r3, [r7, #32]
 80126c6:	3304      	adds	r3, #4
 80126c8:	617b      	str	r3, [r7, #20]
 80126ca:	e00b      	b.n	80126e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	6a3b      	ldr	r3, [r7, #32]
 80126d2:	3304      	adds	r3, #4
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d002      	beq.n	80126e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80126da:	f06f 0303 	mvn.w	r3, #3
 80126de:	e00d      	b.n	80126fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80126e4:	887a      	ldrh	r2, [r7, #2]
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	9301      	str	r3, [sp, #4]
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	9300      	str	r3, [sp, #0]
 80126ee:	4613      	mov	r3, r2
 80126f0:	687a      	ldr	r2, [r7, #4]
 80126f2:	68b9      	ldr	r1, [r7, #8]
 80126f4:	68f8      	ldr	r0, [r7, #12]
 80126f6:	f000 f811 	bl	801271c <udp_sendto_if_src>
 80126fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3718      	adds	r7, #24
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	08019204 	.word	0x08019204
 8012708:	08019470 	.word	0x08019470
 801270c:	08019258 	.word	0x08019258
 8012710:	0801948c 	.word	0x0801948c
 8012714:	080194a8 	.word	0x080194a8
 8012718:	080194c8 	.word	0x080194c8

0801271c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b08c      	sub	sp, #48	@ 0x30
 8012720:	af04      	add	r7, sp, #16
 8012722:	60f8      	str	r0, [r7, #12]
 8012724:	60b9      	str	r1, [r7, #8]
 8012726:	607a      	str	r2, [r7, #4]
 8012728:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d109      	bne.n	8012744 <udp_sendto_if_src+0x28>
 8012730:	4b7a      	ldr	r3, [pc, #488]	@ (801291c <udp_sendto_if_src+0x200>)
 8012732:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012736:	497a      	ldr	r1, [pc, #488]	@ (8012920 <udp_sendto_if_src+0x204>)
 8012738:	487a      	ldr	r0, [pc, #488]	@ (8012924 <udp_sendto_if_src+0x208>)
 801273a:	f003 fbf7 	bl	8015f2c <iprintf>
 801273e:	f06f 030f 	mvn.w	r3, #15
 8012742:	e0e6      	b.n	8012912 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d109      	bne.n	801275e <udp_sendto_if_src+0x42>
 801274a:	4b74      	ldr	r3, [pc, #464]	@ (801291c <udp_sendto_if_src+0x200>)
 801274c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8012750:	4975      	ldr	r1, [pc, #468]	@ (8012928 <udp_sendto_if_src+0x20c>)
 8012752:	4874      	ldr	r0, [pc, #464]	@ (8012924 <udp_sendto_if_src+0x208>)
 8012754:	f003 fbea 	bl	8015f2c <iprintf>
 8012758:	f06f 030f 	mvn.w	r3, #15
 801275c:	e0d9      	b.n	8012912 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d109      	bne.n	8012778 <udp_sendto_if_src+0x5c>
 8012764:	4b6d      	ldr	r3, [pc, #436]	@ (801291c <udp_sendto_if_src+0x200>)
 8012766:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801276a:	4970      	ldr	r1, [pc, #448]	@ (801292c <udp_sendto_if_src+0x210>)
 801276c:	486d      	ldr	r0, [pc, #436]	@ (8012924 <udp_sendto_if_src+0x208>)
 801276e:	f003 fbdd 	bl	8015f2c <iprintf>
 8012772:	f06f 030f 	mvn.w	r3, #15
 8012776:	e0cc      	b.n	8012912 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801277a:	2b00      	cmp	r3, #0
 801277c:	d109      	bne.n	8012792 <udp_sendto_if_src+0x76>
 801277e:	4b67      	ldr	r3, [pc, #412]	@ (801291c <udp_sendto_if_src+0x200>)
 8012780:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8012784:	496a      	ldr	r1, [pc, #424]	@ (8012930 <udp_sendto_if_src+0x214>)
 8012786:	4867      	ldr	r0, [pc, #412]	@ (8012924 <udp_sendto_if_src+0x208>)
 8012788:	f003 fbd0 	bl	8015f2c <iprintf>
 801278c:	f06f 030f 	mvn.w	r3, #15
 8012790:	e0bf      	b.n	8012912 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012794:	2b00      	cmp	r3, #0
 8012796:	d109      	bne.n	80127ac <udp_sendto_if_src+0x90>
 8012798:	4b60      	ldr	r3, [pc, #384]	@ (801291c <udp_sendto_if_src+0x200>)
 801279a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801279e:	4965      	ldr	r1, [pc, #404]	@ (8012934 <udp_sendto_if_src+0x218>)
 80127a0:	4860      	ldr	r0, [pc, #384]	@ (8012924 <udp_sendto_if_src+0x208>)
 80127a2:	f003 fbc3 	bl	8015f2c <iprintf>
 80127a6:	f06f 030f 	mvn.w	r3, #15
 80127aa:	e0b2      	b.n	8012912 <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	8a5b      	ldrh	r3, [r3, #18]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d115      	bne.n	80127e0 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 80127b4:	4860      	ldr	r0, [pc, #384]	@ (8012938 <udp_sendto_if_src+0x21c>)
 80127b6:	f003 fc29 	bl	801600c <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80127ba:	68f9      	ldr	r1, [r7, #12]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	8a5b      	ldrh	r3, [r3, #18]
 80127c0:	461a      	mov	r2, r3
 80127c2:	68f8      	ldr	r0, [r7, #12]
 80127c4:	f000 f8cc 	bl	8012960 <udp_bind>
 80127c8:	4603      	mov	r3, r0
 80127ca:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80127cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d005      	beq.n	80127e0 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 80127d4:	4859      	ldr	r0, [pc, #356]	@ (801293c <udp_sendto_if_src+0x220>)
 80127d6:	f003 fc19 	bl	801600c <puts>
      return err;
 80127da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80127de:	e098      	b.n	8012912 <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	891b      	ldrh	r3, [r3, #8]
 80127e4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d902      	bls.n	80127f2 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 80127ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127f0:	e08f      	b.n	8012912 <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80127f2:	2108      	movs	r1, #8
 80127f4:	68b8      	ldr	r0, [r7, #8]
 80127f6:	f7f9 fe25 	bl	800c444 <pbuf_add_header>
 80127fa:	4603      	mov	r3, r0
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d01d      	beq.n	801283c <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012800:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012804:	2108      	movs	r1, #8
 8012806:	2022      	movs	r0, #34	@ 0x22
 8012808:	f7f9 fbce 	bl	800bfa8 <pbuf_alloc>
 801280c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d105      	bne.n	8012820 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 8012814:	484a      	ldr	r0, [pc, #296]	@ (8012940 <udp_sendto_if_src+0x224>)
 8012816:	f003 fbf9 	bl	801600c <puts>
      return ERR_MEM;
 801281a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801281e:	e078      	b.n	8012912 <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	891b      	ldrh	r3, [r3, #8]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d003      	beq.n	8012830 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012828:	68b9      	ldr	r1, [r7, #8]
 801282a:	69f8      	ldr	r0, [r7, #28]
 801282c:	f7f9 ffb8 	bl	800c7a0 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 8012830:	68ba      	ldr	r2, [r7, #8]
 8012832:	69f9      	ldr	r1, [r7, #28]
 8012834:	4843      	ldr	r0, [pc, #268]	@ (8012944 <udp_sendto_if_src+0x228>)
 8012836:	f003 fb79 	bl	8015f2c <iprintf>
 801283a:	e005      	b.n	8012848 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 8012840:	68b9      	ldr	r1, [r7, #8]
 8012842:	4841      	ldr	r0, [pc, #260]	@ (8012948 <udp_sendto_if_src+0x22c>)
 8012844:	f003 fb72 	bl	8015f2c <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012848:	69fb      	ldr	r3, [r7, #28]
 801284a:	895b      	ldrh	r3, [r3, #10]
 801284c:	2b07      	cmp	r3, #7
 801284e:	d806      	bhi.n	801285e <udp_sendto_if_src+0x142>
 8012850:	4b32      	ldr	r3, [pc, #200]	@ (801291c <udp_sendto_if_src+0x200>)
 8012852:	f240 320d 	movw	r2, #781	@ 0x30d
 8012856:	493d      	ldr	r1, [pc, #244]	@ (801294c <udp_sendto_if_src+0x230>)
 8012858:	4832      	ldr	r0, [pc, #200]	@ (8012924 <udp_sendto_if_src+0x208>)
 801285a:	f003 fb67 	bl	8015f2c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	8a5b      	ldrh	r3, [r3, #18]
 8012868:	4618      	mov	r0, r3
 801286a:	f7f8 fa31 	bl	800acd0 <lwip_htons>
 801286e:	4603      	mov	r3, r0
 8012870:	461a      	mov	r2, r3
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012876:	887b      	ldrh	r3, [r7, #2]
 8012878:	4618      	mov	r0, r3
 801287a:	f7f8 fa29 	bl	800acd0 <lwip_htons>
 801287e:	4603      	mov	r3, r0
 8012880:	461a      	mov	r2, r3
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	2200      	movs	r2, #0
 801288a:	719a      	strb	r2, [r3, #6]
 801288c:	2200      	movs	r2, #0
 801288e:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	891b      	ldrh	r3, [r3, #8]
 8012894:	4619      	mov	r1, r3
 8012896:	482e      	ldr	r0, [pc, #184]	@ (8012950 <udp_sendto_if_src+0x234>)
 8012898:	f003 fb48 	bl	8015f2c <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	891b      	ldrh	r3, [r3, #8]
 80128a0:	4619      	mov	r1, r3
 80128a2:	482c      	ldr	r0, [pc, #176]	@ (8012954 <udp_sendto_if_src+0x238>)
 80128a4:	f003 fb42 	bl	8015f2c <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 80128a8:	69fb      	ldr	r3, [r7, #28]
 80128aa:	891b      	ldrh	r3, [r3, #8]
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7f8 fa0f 	bl	800acd0 <lwip_htons>
 80128b2:	4603      	mov	r3, r0
 80128b4:	461a      	mov	r2, r3
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80128ba:	2311      	movs	r3, #17
 80128bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	7adb      	ldrb	r3, [r3, #11]
 80128c2:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	88db      	ldrh	r3, [r3, #6]
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	4619      	mov	r1, r3
 80128cc:	4822      	ldr	r0, [pc, #136]	@ (8012958 <udp_sendto_if_src+0x23c>)
 80128ce:	f003 fb2d 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 80128d2:	7cfb      	ldrb	r3, [r7, #19]
 80128d4:	4619      	mov	r1, r3
 80128d6:	4821      	ldr	r0, [pc, #132]	@ (801295c <udp_sendto_if_src+0x240>)
 80128d8:	f003 fb28 	bl	8015f2c <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	7a9b      	ldrb	r3, [r3, #10]
 80128e0:	7cb9      	ldrb	r1, [r7, #18]
 80128e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128e4:	9202      	str	r2, [sp, #8]
 80128e6:	7cfa      	ldrb	r2, [r7, #19]
 80128e8:	9201      	str	r2, [sp, #4]
 80128ea:	9300      	str	r3, [sp, #0]
 80128ec:	460b      	mov	r3, r1
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80128f2:	69f8      	ldr	r0, [r7, #28]
 80128f4:	f001 fd92 	bl	801441c <ip4_output_if_src>
 80128f8:	4603      	mov	r3, r0
 80128fa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80128fc:	69fa      	ldr	r2, [r7, #28]
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	429a      	cmp	r2, r3
 8012902:	d004      	beq.n	801290e <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 8012904:	69f8      	ldr	r0, [r7, #28]
 8012906:	f7f9 fe33 	bl	800c570 <pbuf_free>
    q = NULL;
 801290a:	2300      	movs	r3, #0
 801290c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801290e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012912:	4618      	mov	r0, r3
 8012914:	3720      	adds	r7, #32
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	08019204 	.word	0x08019204
 8012920:	080194e8 	.word	0x080194e8
 8012924:	08019258 	.word	0x08019258
 8012928:	08019508 	.word	0x08019508
 801292c:	08019528 	.word	0x08019528
 8012930:	0801954c 	.word	0x0801954c
 8012934:	08019570 	.word	0x08019570
 8012938:	08019594 	.word	0x08019594
 801293c:	080195c4 	.word	0x080195c4
 8012940:	080195e8 	.word	0x080195e8
 8012944:	0801960c 	.word	0x0801960c
 8012948:	08019644 	.word	0x08019644
 801294c:	08019670 	.word	0x08019670
 8012950:	080196a0 	.word	0x080196a0
 8012954:	080196cc 	.word	0x080196cc
 8012958:	080196f0 	.word	0x080196f0
 801295c:	08019710 	.word	0x08019710

08012960 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b088      	sub	sp, #32
 8012964:	af02      	add	r7, sp, #8
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	4613      	mov	r3, r2
 801296c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d101      	bne.n	8012978 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012974:	4b65      	ldr	r3, [pc, #404]	@ (8012b0c <udp_bind+0x1ac>)
 8012976:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d109      	bne.n	8012992 <udp_bind+0x32>
 801297e:	4b64      	ldr	r3, [pc, #400]	@ (8012b10 <udp_bind+0x1b0>)
 8012980:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8012984:	4963      	ldr	r1, [pc, #396]	@ (8012b14 <udp_bind+0x1b4>)
 8012986:	4864      	ldr	r0, [pc, #400]	@ (8012b18 <udp_bind+0x1b8>)
 8012988:	f003 fad0 	bl	8015f2c <iprintf>
 801298c:	f06f 030f 	mvn.w	r3, #15
 8012990:	e0b7      	b.n	8012b02 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 8012992:	4862      	ldr	r0, [pc, #392]	@ (8012b1c <udp_bind+0x1bc>)
 8012994:	f003 faca 	bl	8015f2c <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d003      	beq.n	80129a6 <udp_bind+0x46>
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	4619      	mov	r1, r3
 80129a4:	e000      	b.n	80129a8 <udp_bind+0x48>
 80129a6:	2100      	movs	r1, #0
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d004      	beq.n	80129b8 <udp_bind+0x58>
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	3301      	adds	r3, #1
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	461a      	mov	r2, r3
 80129b6:	e000      	b.n	80129ba <udp_bind+0x5a>
 80129b8:	2200      	movs	r2, #0
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d004      	beq.n	80129ca <udp_bind+0x6a>
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	3302      	adds	r3, #2
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	4618      	mov	r0, r3
 80129c8:	e000      	b.n	80129cc <udp_bind+0x6c>
 80129ca:	2000      	movs	r0, #0
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d003      	beq.n	80129da <udp_bind+0x7a>
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	3303      	adds	r3, #3
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	e000      	b.n	80129dc <udp_bind+0x7c>
 80129da:	2300      	movs	r3, #0
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	4603      	mov	r3, r0
 80129e0:	484f      	ldr	r0, [pc, #316]	@ (8012b20 <udp_bind+0x1c0>)
 80129e2:	f003 faa3 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 80129e6:	88fb      	ldrh	r3, [r7, #6]
 80129e8:	4619      	mov	r1, r3
 80129ea:	484e      	ldr	r0, [pc, #312]	@ (8012b24 <udp_bind+0x1c4>)
 80129ec:	f003 fa9e 	bl	8015f2c <iprintf>

  rebind = 0;
 80129f0:	2300      	movs	r3, #0
 80129f2:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80129f4:	4b4c      	ldr	r3, [pc, #304]	@ (8012b28 <udp_bind+0x1c8>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	617b      	str	r3, [r7, #20]
 80129fa:	e009      	b.n	8012a10 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80129fc:	68fa      	ldr	r2, [r7, #12]
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d102      	bne.n	8012a0a <udp_bind+0xaa>
      rebind = 1;
 8012a04:	2301      	movs	r3, #1
 8012a06:	74fb      	strb	r3, [r7, #19]
      break;
 8012a08:	e005      	b.n	8012a16 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	68db      	ldr	r3, [r3, #12]
 8012a0e:	617b      	str	r3, [r7, #20]
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d1f2      	bne.n	80129fc <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012a16:	88fb      	ldrh	r3, [r7, #6]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d10c      	bne.n	8012a36 <udp_bind+0xd6>
    port = udp_new_port();
 8012a1c:	f7ff fb14 	bl	8012048 <udp_new_port>
 8012a20:	4603      	mov	r3, r0
 8012a22:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012a24:	88fb      	ldrh	r3, [r7, #6]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d134      	bne.n	8012a94 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 8012a2a:	4840      	ldr	r0, [pc, #256]	@ (8012b2c <udp_bind+0x1cc>)
 8012a2c:	f003 faee 	bl	801600c <puts>
      return ERR_USE;
 8012a30:	f06f 0307 	mvn.w	r3, #7
 8012a34:	e065      	b.n	8012b02 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a36:	4b3c      	ldr	r3, [pc, #240]	@ (8012b28 <udp_bind+0x1c8>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	617b      	str	r3, [r7, #20]
 8012a3c:	e027      	b.n	8012a8e <udp_bind+0x12e>
      if (pcb != ipcb) {
 8012a3e:	68fa      	ldr	r2, [r7, #12]
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d020      	beq.n	8012a88 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	8a5b      	ldrh	r3, [r3, #18]
 8012a4a:	88fa      	ldrh	r2, [r7, #6]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d11b      	bne.n	8012a88 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d00d      	beq.n	8012a78 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d00a      	beq.n	8012a78 <udp_bind+0x118>
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d006      	beq.n	8012a78 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8012a6a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d003      	beq.n	8012a78 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d107      	bne.n	8012a88 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 8012a78:	88fb      	ldrh	r3, [r7, #6]
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	482c      	ldr	r0, [pc, #176]	@ (8012b30 <udp_bind+0x1d0>)
 8012a7e:	f003 fa55 	bl	8015f2c <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012a82:	f06f 0307 	mvn.w	r3, #7
 8012a86:	e03c      	b.n	8012b02 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	617b      	str	r3, [r7, #20]
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d1d4      	bne.n	8012a3e <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d002      	beq.n	8012aa0 <udp_bind+0x140>
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	e000      	b.n	8012aa2 <udp_bind+0x142>
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	88fa      	ldrh	r2, [r7, #6]
 8012aaa:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012aac:	7cfb      	ldrb	r3, [r7, #19]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d106      	bne.n	8012ac0 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8012b28 <udp_bind+0x1c8>)
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012aba:	4a1b      	ldr	r2, [pc, #108]	@ (8012b28 <udp_bind+0x1c8>)
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 8012ac0:	481c      	ldr	r0, [pc, #112]	@ (8012b34 <udp_bind+0x1d4>)
 8012ac2:	f003 fa33 	bl	8015f2c <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	4619      	mov	r1, r3
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	0a1b      	lsrs	r3, r3, #8
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	0c1b      	lsrs	r3, r3, #16
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	0e1b      	lsrs	r3, r3, #24
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	9300      	str	r3, [sp, #0]
 8012aec:	4603      	mov	r3, r0
 8012aee:	480c      	ldr	r0, [pc, #48]	@ (8012b20 <udp_bind+0x1c0>)
 8012af0:	f003 fa1c 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	8a5b      	ldrh	r3, [r3, #18]
 8012af8:	4619      	mov	r1, r3
 8012afa:	480f      	ldr	r0, [pc, #60]	@ (8012b38 <udp_bind+0x1d8>)
 8012afc:	f003 fa16 	bl	8015f2c <iprintf>
  return ERR_OK;
 8012b00:	2300      	movs	r3, #0
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3718      	adds	r7, #24
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	0801a570 	.word	0x0801a570
 8012b10:	08019204 	.word	0x08019204
 8012b14:	08019738 	.word	0x08019738
 8012b18:	08019258 	.word	0x08019258
 8012b1c:	08019750 	.word	0x08019750
 8012b20:	08019348 	.word	0x08019348
 8012b24:	08019764 	.word	0x08019764
 8012b28:	200083bc 	.word	0x200083bc
 8012b2c:	08019774 	.word	0x08019774
 8012b30:	08019794 	.word	0x08019794
 8012b34:	080197cc 	.word	0x080197cc
 8012b38:	080197e0 	.word	0x080197e0

08012b3c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	60f8      	str	r0, [r7, #12]
 8012b44:	60b9      	str	r1, [r7, #8]
 8012b46:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d107      	bne.n	8012b5e <udp_recv+0x22>
 8012b4e:	4b08      	ldr	r3, [pc, #32]	@ (8012b70 <udp_recv+0x34>)
 8012b50:	f240 428a 	movw	r2, #1162	@ 0x48a
 8012b54:	4907      	ldr	r1, [pc, #28]	@ (8012b74 <udp_recv+0x38>)
 8012b56:	4808      	ldr	r0, [pc, #32]	@ (8012b78 <udp_recv+0x3c>)
 8012b58:	f003 f9e8 	bl	8015f2c <iprintf>
 8012b5c:	e005      	b.n	8012b6a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	68ba      	ldr	r2, [r7, #8]
 8012b62:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	687a      	ldr	r2, [r7, #4]
 8012b68:	61da      	str	r2, [r3, #28]
}
 8012b6a:	3710      	adds	r7, #16
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	08019204 	.word	0x08019204
 8012b74:	08019860 	.word	0x08019860
 8012b78:	08019258 	.word	0x08019258

08012b7c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b084      	sub	sp, #16
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d107      	bne.n	8012b9a <udp_remove+0x1e>
 8012b8a:	4b19      	ldr	r3, [pc, #100]	@ (8012bf0 <udp_remove+0x74>)
 8012b8c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8012b90:	4918      	ldr	r1, [pc, #96]	@ (8012bf4 <udp_remove+0x78>)
 8012b92:	4819      	ldr	r0, [pc, #100]	@ (8012bf8 <udp_remove+0x7c>)
 8012b94:	f003 f9ca 	bl	8015f2c <iprintf>
 8012b98:	e026      	b.n	8012be8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012b9a:	4b18      	ldr	r3, [pc, #96]	@ (8012bfc <udp_remove+0x80>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d105      	bne.n	8012bb0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012ba4:	4b15      	ldr	r3, [pc, #84]	@ (8012bfc <udp_remove+0x80>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	4a14      	ldr	r2, [pc, #80]	@ (8012bfc <udp_remove+0x80>)
 8012bac:	6013      	str	r3, [r2, #0]
 8012bae:	e017      	b.n	8012be0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012bb0:	4b12      	ldr	r3, [pc, #72]	@ (8012bfc <udp_remove+0x80>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	60fb      	str	r3, [r7, #12]
 8012bb6:	e010      	b.n	8012bda <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d009      	beq.n	8012bd4 <udp_remove+0x58>
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d104      	bne.n	8012bd4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	68da      	ldr	r2, [r3, #12]
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	60da      	str	r2, [r3, #12]
        break;
 8012bd2:	e005      	b.n	8012be0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	60fb      	str	r3, [r7, #12]
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d1eb      	bne.n	8012bb8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012be0:	6879      	ldr	r1, [r7, #4]
 8012be2:	2000      	movs	r0, #0
 8012be4:	f7f8 fd58 	bl	800b698 <memp_free>
}
 8012be8:	3710      	adds	r7, #16
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	08019204 	.word	0x08019204
 8012bf4:	08019878 	.word	0x08019878
 8012bf8:	08019258 	.word	0x08019258
 8012bfc:	200083bc 	.word	0x200083bc

08012c00 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012c06:	2000      	movs	r0, #0
 8012c08:	f7f8 fcd6 	bl	800b5b8 <memp_malloc>
 8012c0c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d007      	beq.n	8012c24 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012c14:	2220      	movs	r2, #32
 8012c16:	2100      	movs	r1, #0
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f003 fae7 	bl	80161ec <memset>
    pcb->ttl = UDP_TTL;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	22ff      	movs	r2, #255	@ 0xff
 8012c22:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012c24:	687b      	ldr	r3, [r7, #4]
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3708      	adds	r7, #8
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
	...

08012c30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d01e      	beq.n	8012c7e <udp_netif_ip_addr_changed+0x4e>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d01a      	beq.n	8012c7e <udp_netif_ip_addr_changed+0x4e>
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d017      	beq.n	8012c7e <udp_netif_ip_addr_changed+0x4e>
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d013      	beq.n	8012c7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012c56:	4b0d      	ldr	r3, [pc, #52]	@ (8012c8c <udp_netif_ip_addr_changed+0x5c>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	60fb      	str	r3, [r7, #12]
 8012c5c:	e00c      	b.n	8012c78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d103      	bne.n	8012c72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	60fb      	str	r3, [r7, #12]
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d1ef      	bne.n	8012c5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012c7e:	bf00      	nop
 8012c80:	3714      	adds	r7, #20
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	200083bc 	.word	0x200083bc

08012c90 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8012c90:	b590      	push	{r4, r7, lr}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8012c98:	481b      	ldr	r0, [pc, #108]	@ (8012d08 <udp_debug_print+0x78>)
 8012c9a:	f003 f9b7 	bl	801600c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8012c9e:	481b      	ldr	r0, [pc, #108]	@ (8012d0c <udp_debug_print+0x7c>)
 8012ca0:	f003 f9b4 	bl	801600c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	881b      	ldrh	r3, [r3, #0]
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7f8 f810 	bl	800acd0 <lwip_htons>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	461c      	mov	r4, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	885b      	ldrh	r3, [r3, #2]
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7f8 f808 	bl	800acd0 <lwip_htons>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	4621      	mov	r1, r4
 8012cc6:	4812      	ldr	r0, [pc, #72]	@ (8012d10 <udp_debug_print+0x80>)
 8012cc8:	f003 f930 	bl	8015f2c <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8012ccc:	480f      	ldr	r0, [pc, #60]	@ (8012d0c <udp_debug_print+0x7c>)
 8012cce:	f003 f99d 	bl	801600c <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	889b      	ldrh	r3, [r3, #4]
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7f7 fff9 	bl	800acd0 <lwip_htons>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	461c      	mov	r4, r3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	88db      	ldrh	r3, [r3, #6]
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7f7 fff1 	bl	800acd0 <lwip_htons>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	4621      	mov	r1, r4
 8012cf4:	4807      	ldr	r0, [pc, #28]	@ (8012d14 <udp_debug_print+0x84>)
 8012cf6:	f003 f919 	bl	8015f2c <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8012cfa:	4804      	ldr	r0, [pc, #16]	@ (8012d0c <udp_debug_print+0x7c>)
 8012cfc:	f003 f986 	bl	801600c <puts>
}
 8012d00:	bf00      	nop
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd90      	pop	{r4, r7, pc}
 8012d08:	08019890 	.word	0x08019890
 8012d0c:	0801989c 	.word	0x0801989c
 8012d10:	080198c0 	.word	0x080198c0
 8012d14:	080198f8 	.word	0x080198f8

08012d18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012d20:	492b      	ldr	r1, [pc, #172]	@ (8012dd0 <etharp_free_entry+0xb8>)
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	4613      	mov	r3, r2
 8012d26:	005b      	lsls	r3, r3, #1
 8012d28:	4413      	add	r3, r2
 8012d2a:	00db      	lsls	r3, r3, #3
 8012d2c:	440b      	add	r3, r1
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d013      	beq.n	8012d5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012d34:	4926      	ldr	r1, [pc, #152]	@ (8012dd0 <etharp_free_entry+0xb8>)
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	005b      	lsls	r3, r3, #1
 8012d3c:	4413      	add	r3, r2
 8012d3e:	00db      	lsls	r3, r3, #3
 8012d40:	440b      	add	r3, r1
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7f9 fc13 	bl	800c570 <pbuf_free>
    arp_table[i].q = NULL;
 8012d4a:	4921      	ldr	r1, [pc, #132]	@ (8012dd0 <etharp_free_entry+0xb8>)
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	4613      	mov	r3, r2
 8012d50:	005b      	lsls	r3, r3, #1
 8012d52:	4413      	add	r3, r2
 8012d54:	00db      	lsls	r3, r3, #3
 8012d56:	440b      	add	r3, r1
 8012d58:	2200      	movs	r2, #0
 8012d5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012d5c:	491c      	ldr	r1, [pc, #112]	@ (8012dd0 <etharp_free_entry+0xb8>)
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	4613      	mov	r3, r2
 8012d62:	005b      	lsls	r3, r3, #1
 8012d64:	4413      	add	r3, r2
 8012d66:	00db      	lsls	r3, r3, #3
 8012d68:	440b      	add	r3, r1
 8012d6a:	3314      	adds	r3, #20
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8012d70:	4917      	ldr	r1, [pc, #92]	@ (8012dd0 <etharp_free_entry+0xb8>)
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	4613      	mov	r3, r2
 8012d76:	005b      	lsls	r3, r3, #1
 8012d78:	4413      	add	r3, r2
 8012d7a:	00db      	lsls	r3, r3, #3
 8012d7c:	440b      	add	r3, r1
 8012d7e:	3312      	adds	r3, #18
 8012d80:	2200      	movs	r2, #0
 8012d82:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8012d84:	4912      	ldr	r1, [pc, #72]	@ (8012dd0 <etharp_free_entry+0xb8>)
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	4613      	mov	r3, r2
 8012d8a:	005b      	lsls	r3, r3, #1
 8012d8c:	4413      	add	r3, r2
 8012d8e:	00db      	lsls	r3, r3, #3
 8012d90:	440b      	add	r3, r1
 8012d92:	3308      	adds	r3, #8
 8012d94:	2200      	movs	r2, #0
 8012d96:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8012d98:	490d      	ldr	r1, [pc, #52]	@ (8012dd0 <etharp_free_entry+0xb8>)
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	005b      	lsls	r3, r3, #1
 8012da0:	4413      	add	r3, r2
 8012da2:	00db      	lsls	r3, r3, #3
 8012da4:	440b      	add	r3, r1
 8012da6:	3304      	adds	r3, #4
 8012da8:	2200      	movs	r2, #0
 8012daa:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8012dac:	4908      	ldr	r1, [pc, #32]	@ (8012dd0 <etharp_free_entry+0xb8>)
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	4613      	mov	r3, r2
 8012db2:	005b      	lsls	r3, r3, #1
 8012db4:	4413      	add	r3, r2
 8012db6:	00db      	lsls	r3, r3, #3
 8012db8:	440b      	add	r3, r1
 8012dba:	3308      	adds	r3, #8
 8012dbc:	4a05      	ldr	r2, [pc, #20]	@ (8012dd4 <etharp_free_entry+0xbc>)
 8012dbe:	3304      	adds	r3, #4
 8012dc0:	6810      	ldr	r0, [r2, #0]
 8012dc2:	6018      	str	r0, [r3, #0]
 8012dc4:	8892      	ldrh	r2, [r2, #4]
 8012dc6:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8012dc8:	bf00      	nop
 8012dca:	3708      	adds	r7, #8
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	200083c0 	.word	0x200083c0
 8012dd4:	0801a57c 	.word	0x0801a57c

08012dd8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dde:	2300      	movs	r3, #0
 8012de0:	607b      	str	r3, [r7, #4]
 8012de2:	e096      	b.n	8012f12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012de4:	494f      	ldr	r1, [pc, #316]	@ (8012f24 <etharp_tmr+0x14c>)
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	4613      	mov	r3, r2
 8012dea:	005b      	lsls	r3, r3, #1
 8012dec:	4413      	add	r3, r2
 8012dee:	00db      	lsls	r3, r3, #3
 8012df0:	440b      	add	r3, r1
 8012df2:	3314      	adds	r3, #20
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012df8:	78fb      	ldrb	r3, [r7, #3]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	f000 8086 	beq.w	8012f0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012e00:	4948      	ldr	r1, [pc, #288]	@ (8012f24 <etharp_tmr+0x14c>)
 8012e02:	687a      	ldr	r2, [r7, #4]
 8012e04:	4613      	mov	r3, r2
 8012e06:	005b      	lsls	r3, r3, #1
 8012e08:	4413      	add	r3, r2
 8012e0a:	00db      	lsls	r3, r3, #3
 8012e0c:	440b      	add	r3, r1
 8012e0e:	3312      	adds	r3, #18
 8012e10:	881b      	ldrh	r3, [r3, #0]
 8012e12:	3301      	adds	r3, #1
 8012e14:	b298      	uxth	r0, r3
 8012e16:	4943      	ldr	r1, [pc, #268]	@ (8012f24 <etharp_tmr+0x14c>)
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	4613      	mov	r3, r2
 8012e1c:	005b      	lsls	r3, r3, #1
 8012e1e:	4413      	add	r3, r2
 8012e20:	00db      	lsls	r3, r3, #3
 8012e22:	440b      	add	r3, r1
 8012e24:	3312      	adds	r3, #18
 8012e26:	4602      	mov	r2, r0
 8012e28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012e2a:	493e      	ldr	r1, [pc, #248]	@ (8012f24 <etharp_tmr+0x14c>)
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	4613      	mov	r3, r2
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	4413      	add	r3, r2
 8012e34:	00db      	lsls	r3, r3, #3
 8012e36:	440b      	add	r3, r1
 8012e38:	3312      	adds	r3, #18
 8012e3a:	881b      	ldrh	r3, [r3, #0]
 8012e3c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012e40:	d215      	bcs.n	8012e6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012e42:	4938      	ldr	r1, [pc, #224]	@ (8012f24 <etharp_tmr+0x14c>)
 8012e44:	687a      	ldr	r2, [r7, #4]
 8012e46:	4613      	mov	r3, r2
 8012e48:	005b      	lsls	r3, r3, #1
 8012e4a:	4413      	add	r3, r2
 8012e4c:	00db      	lsls	r3, r3, #3
 8012e4e:	440b      	add	r3, r1
 8012e50:	3314      	adds	r3, #20
 8012e52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d10e      	bne.n	8012e76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012e58:	4932      	ldr	r1, [pc, #200]	@ (8012f24 <etharp_tmr+0x14c>)
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	4613      	mov	r3, r2
 8012e5e:	005b      	lsls	r3, r3, #1
 8012e60:	4413      	add	r3, r2
 8012e62:	00db      	lsls	r3, r3, #3
 8012e64:	440b      	add	r3, r1
 8012e66:	3312      	adds	r3, #18
 8012e68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012e6a:	2b04      	cmp	r3, #4
 8012e6c:	d903      	bls.n	8012e76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7ff ff52 	bl	8012d18 <etharp_free_entry>
 8012e74:	e04a      	b.n	8012f0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012e76:	492b      	ldr	r1, [pc, #172]	@ (8012f24 <etharp_tmr+0x14c>)
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	005b      	lsls	r3, r3, #1
 8012e7e:	4413      	add	r3, r2
 8012e80:	00db      	lsls	r3, r3, #3
 8012e82:	440b      	add	r3, r1
 8012e84:	3314      	adds	r3, #20
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	2b03      	cmp	r3, #3
 8012e8a:	d10a      	bne.n	8012ea2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012e8c:	4925      	ldr	r1, [pc, #148]	@ (8012f24 <etharp_tmr+0x14c>)
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	4613      	mov	r3, r2
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	4413      	add	r3, r2
 8012e96:	00db      	lsls	r3, r3, #3
 8012e98:	440b      	add	r3, r1
 8012e9a:	3314      	adds	r3, #20
 8012e9c:	2204      	movs	r2, #4
 8012e9e:	701a      	strb	r2, [r3, #0]
 8012ea0:	e034      	b.n	8012f0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012ea2:	4920      	ldr	r1, [pc, #128]	@ (8012f24 <etharp_tmr+0x14c>)
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	4613      	mov	r3, r2
 8012ea8:	005b      	lsls	r3, r3, #1
 8012eaa:	4413      	add	r3, r2
 8012eac:	00db      	lsls	r3, r3, #3
 8012eae:	440b      	add	r3, r1
 8012eb0:	3314      	adds	r3, #20
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	2b04      	cmp	r3, #4
 8012eb6:	d10a      	bne.n	8012ece <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012eb8:	491a      	ldr	r1, [pc, #104]	@ (8012f24 <etharp_tmr+0x14c>)
 8012eba:	687a      	ldr	r2, [r7, #4]
 8012ebc:	4613      	mov	r3, r2
 8012ebe:	005b      	lsls	r3, r3, #1
 8012ec0:	4413      	add	r3, r2
 8012ec2:	00db      	lsls	r3, r3, #3
 8012ec4:	440b      	add	r3, r1
 8012ec6:	3314      	adds	r3, #20
 8012ec8:	2202      	movs	r2, #2
 8012eca:	701a      	strb	r2, [r3, #0]
 8012ecc:	e01e      	b.n	8012f0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012ece:	4915      	ldr	r1, [pc, #84]	@ (8012f24 <etharp_tmr+0x14c>)
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	005b      	lsls	r3, r3, #1
 8012ed6:	4413      	add	r3, r2
 8012ed8:	00db      	lsls	r3, r3, #3
 8012eda:	440b      	add	r3, r1
 8012edc:	3314      	adds	r3, #20
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d113      	bne.n	8012f0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012ee4:	490f      	ldr	r1, [pc, #60]	@ (8012f24 <etharp_tmr+0x14c>)
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	005b      	lsls	r3, r3, #1
 8012eec:	4413      	add	r3, r2
 8012eee:	00db      	lsls	r3, r3, #3
 8012ef0:	440b      	add	r3, r1
 8012ef2:	3308      	adds	r3, #8
 8012ef4:	6818      	ldr	r0, [r3, #0]
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	4613      	mov	r3, r2
 8012efa:	005b      	lsls	r3, r3, #1
 8012efc:	4413      	add	r3, r2
 8012efe:	00db      	lsls	r3, r3, #3
 8012f00:	4a08      	ldr	r2, [pc, #32]	@ (8012f24 <etharp_tmr+0x14c>)
 8012f02:	4413      	add	r3, r2
 8012f04:	3304      	adds	r3, #4
 8012f06:	4619      	mov	r1, r3
 8012f08:	f000 fe6e 	bl	8013be8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	3301      	adds	r3, #1
 8012f10:	607b      	str	r3, [r7, #4]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2b09      	cmp	r3, #9
 8012f16:	f77f af65 	ble.w	8012de4 <etharp_tmr+0xc>
      }
    }
  }
}
 8012f1a:	bf00      	nop
 8012f1c:	bf00      	nop
 8012f1e:	3708      	adds	r7, #8
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	200083c0 	.word	0x200083c0

08012f28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b08a      	sub	sp, #40	@ 0x28
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	460b      	mov	r3, r1
 8012f32:	607a      	str	r2, [r7, #4]
 8012f34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012f36:	230a      	movs	r3, #10
 8012f38:	843b      	strh	r3, [r7, #32]
 8012f3a:	230a      	movs	r3, #10
 8012f3c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8012f3e:	230a      	movs	r3, #10
 8012f40:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 8012f42:	2300      	movs	r3, #0
 8012f44:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012f46:	230a      	movs	r3, #10
 8012f48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	83bb      	strh	r3, [r7, #28]
 8012f4e:	2300      	movs	r3, #0
 8012f50:	837b      	strh	r3, [r7, #26]
 8012f52:	2300      	movs	r3, #0
 8012f54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f56:	2300      	movs	r3, #0
 8012f58:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012f5a:	e0ae      	b.n	80130ba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012f5c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012f60:	49a6      	ldr	r1, [pc, #664]	@ (80131fc <etharp_find_entry+0x2d4>)
 8012f62:	4613      	mov	r3, r2
 8012f64:	005b      	lsls	r3, r3, #1
 8012f66:	4413      	add	r3, r2
 8012f68:	00db      	lsls	r3, r3, #3
 8012f6a:	440b      	add	r3, r1
 8012f6c:	3314      	adds	r3, #20
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012f72:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012f76:	2b0a      	cmp	r3, #10
 8012f78:	d105      	bne.n	8012f86 <etharp_find_entry+0x5e>
 8012f7a:	7dfb      	ldrb	r3, [r7, #23]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d102      	bne.n	8012f86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012f80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012f82:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012f84:	e095      	b.n	80130b2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012f86:	7dfb      	ldrb	r3, [r7, #23]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f000 8092 	beq.w	80130b2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012f8e:	7dfb      	ldrb	r3, [r7, #23]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d009      	beq.n	8012fa8 <etharp_find_entry+0x80>
 8012f94:	7dfb      	ldrb	r3, [r7, #23]
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d806      	bhi.n	8012fa8 <etharp_find_entry+0x80>
 8012f9a:	4b99      	ldr	r3, [pc, #612]	@ (8013200 <etharp_find_entry+0x2d8>)
 8012f9c:	f240 1223 	movw	r2, #291	@ 0x123
 8012fa0:	4998      	ldr	r1, [pc, #608]	@ (8013204 <etharp_find_entry+0x2dc>)
 8012fa2:	4899      	ldr	r0, [pc, #612]	@ (8013208 <etharp_find_entry+0x2e0>)
 8012fa4:	f002 ffc2 	bl	8015f2c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d020      	beq.n	8012ff0 <etharp_find_entry+0xc8>
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	6819      	ldr	r1, [r3, #0]
 8012fb2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012fb6:	4891      	ldr	r0, [pc, #580]	@ (80131fc <etharp_find_entry+0x2d4>)
 8012fb8:	4613      	mov	r3, r2
 8012fba:	005b      	lsls	r3, r3, #1
 8012fbc:	4413      	add	r3, r2
 8012fbe:	00db      	lsls	r3, r3, #3
 8012fc0:	4403      	add	r3, r0
 8012fc2:	3304      	adds	r3, #4
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4299      	cmp	r1, r3
 8012fc8:	d112      	bne.n	8012ff0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d00c      	beq.n	8012fea <etharp_find_entry+0xc2>
 8012fd0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012fd4:	4989      	ldr	r1, [pc, #548]	@ (80131fc <etharp_find_entry+0x2d4>)
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	005b      	lsls	r3, r3, #1
 8012fda:	4413      	add	r3, r2
 8012fdc:	00db      	lsls	r3, r3, #3
 8012fde:	440b      	add	r3, r1
 8012fe0:	3308      	adds	r3, #8
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d102      	bne.n	8012ff0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012fea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012fee:	e100      	b.n	80131f2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012ff0:	7dfb      	ldrb	r3, [r7, #23]
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d140      	bne.n	8013078 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012ff6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012ffa:	4980      	ldr	r1, [pc, #512]	@ (80131fc <etharp_find_entry+0x2d4>)
 8012ffc:	4613      	mov	r3, r2
 8012ffe:	005b      	lsls	r3, r3, #1
 8013000:	4413      	add	r3, r2
 8013002:	00db      	lsls	r3, r3, #3
 8013004:	440b      	add	r3, r1
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d01a      	beq.n	8013042 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801300c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013010:	497a      	ldr	r1, [pc, #488]	@ (80131fc <etharp_find_entry+0x2d4>)
 8013012:	4613      	mov	r3, r2
 8013014:	005b      	lsls	r3, r3, #1
 8013016:	4413      	add	r3, r2
 8013018:	00db      	lsls	r3, r3, #3
 801301a:	440b      	add	r3, r1
 801301c:	3312      	adds	r3, #18
 801301e:	881b      	ldrh	r3, [r3, #0]
 8013020:	8bba      	ldrh	r2, [r7, #28]
 8013022:	429a      	cmp	r2, r3
 8013024:	d845      	bhi.n	80130b2 <etharp_find_entry+0x18a>
            old_queue = i;
 8013026:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013028:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801302a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801302e:	4973      	ldr	r1, [pc, #460]	@ (80131fc <etharp_find_entry+0x2d4>)
 8013030:	4613      	mov	r3, r2
 8013032:	005b      	lsls	r3, r3, #1
 8013034:	4413      	add	r3, r2
 8013036:	00db      	lsls	r3, r3, #3
 8013038:	440b      	add	r3, r1
 801303a:	3312      	adds	r3, #18
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	83bb      	strh	r3, [r7, #28]
 8013040:	e037      	b.n	80130b2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013042:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013046:	496d      	ldr	r1, [pc, #436]	@ (80131fc <etharp_find_entry+0x2d4>)
 8013048:	4613      	mov	r3, r2
 801304a:	005b      	lsls	r3, r3, #1
 801304c:	4413      	add	r3, r2
 801304e:	00db      	lsls	r3, r3, #3
 8013050:	440b      	add	r3, r1
 8013052:	3312      	adds	r3, #18
 8013054:	881b      	ldrh	r3, [r3, #0]
 8013056:	8b7a      	ldrh	r2, [r7, #26]
 8013058:	429a      	cmp	r2, r3
 801305a:	d82a      	bhi.n	80130b2 <etharp_find_entry+0x18a>
            old_pending = i;
 801305c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801305e:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8013060:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013064:	4965      	ldr	r1, [pc, #404]	@ (80131fc <etharp_find_entry+0x2d4>)
 8013066:	4613      	mov	r3, r2
 8013068:	005b      	lsls	r3, r3, #1
 801306a:	4413      	add	r3, r2
 801306c:	00db      	lsls	r3, r3, #3
 801306e:	440b      	add	r3, r1
 8013070:	3312      	adds	r3, #18
 8013072:	881b      	ldrh	r3, [r3, #0]
 8013074:	837b      	strh	r3, [r7, #26]
 8013076:	e01c      	b.n	80130b2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013078:	7dfb      	ldrb	r3, [r7, #23]
 801307a:	2b01      	cmp	r3, #1
 801307c:	d919      	bls.n	80130b2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801307e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013082:	495e      	ldr	r1, [pc, #376]	@ (80131fc <etharp_find_entry+0x2d4>)
 8013084:	4613      	mov	r3, r2
 8013086:	005b      	lsls	r3, r3, #1
 8013088:	4413      	add	r3, r2
 801308a:	00db      	lsls	r3, r3, #3
 801308c:	440b      	add	r3, r1
 801308e:	3312      	adds	r3, #18
 8013090:	881b      	ldrh	r3, [r3, #0]
 8013092:	8b3a      	ldrh	r2, [r7, #24]
 8013094:	429a      	cmp	r2, r3
 8013096:	d80c      	bhi.n	80130b2 <etharp_find_entry+0x18a>
            old_stable = i;
 8013098:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801309a:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801309c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80130a0:	4956      	ldr	r1, [pc, #344]	@ (80131fc <etharp_find_entry+0x2d4>)
 80130a2:	4613      	mov	r3, r2
 80130a4:	005b      	lsls	r3, r3, #1
 80130a6:	4413      	add	r3, r2
 80130a8:	00db      	lsls	r3, r3, #3
 80130aa:	440b      	add	r3, r1
 80130ac:	3312      	adds	r3, #18
 80130ae:	881b      	ldrh	r3, [r3, #0]
 80130b0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80130b4:	3301      	adds	r3, #1
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80130ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80130be:	2b09      	cmp	r3, #9
 80130c0:	f77f af4c 	ble.w	8012f5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80130c4:	7afb      	ldrb	r3, [r7, #11]
 80130c6:	f003 0302 	and.w	r3, r3, #2
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d108      	bne.n	80130e0 <etharp_find_entry+0x1b8>
 80130ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80130d2:	2b0a      	cmp	r3, #10
 80130d4:	d107      	bne.n	80130e6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80130d6:	7afb      	ldrb	r3, [r7, #11]
 80130d8:	f003 0301 	and.w	r3, r3, #1
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d102      	bne.n	80130e6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80130e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80130e4:	e085      	b.n	80131f2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80130e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80130ea:	2b09      	cmp	r3, #9
 80130ec:	dc02      	bgt.n	80130f4 <etharp_find_entry+0x1cc>
    i = empty;
 80130ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80130f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80130f2:	e039      	b.n	8013168 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80130f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80130f8:	2b09      	cmp	r3, #9
 80130fa:	dc14      	bgt.n	8013126 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80130fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80130fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013100:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013104:	493d      	ldr	r1, [pc, #244]	@ (80131fc <etharp_find_entry+0x2d4>)
 8013106:	4613      	mov	r3, r2
 8013108:	005b      	lsls	r3, r3, #1
 801310a:	4413      	add	r3, r2
 801310c:	00db      	lsls	r3, r3, #3
 801310e:	440b      	add	r3, r1
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d018      	beq.n	8013148 <etharp_find_entry+0x220>
 8013116:	4b3a      	ldr	r3, [pc, #232]	@ (8013200 <etharp_find_entry+0x2d8>)
 8013118:	f240 126d 	movw	r2, #365	@ 0x16d
 801311c:	493b      	ldr	r1, [pc, #236]	@ (801320c <etharp_find_entry+0x2e4>)
 801311e:	483a      	ldr	r0, [pc, #232]	@ (8013208 <etharp_find_entry+0x2e0>)
 8013120:	f002 ff04 	bl	8015f2c <iprintf>
 8013124:	e010      	b.n	8013148 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013126:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801312a:	2b09      	cmp	r3, #9
 801312c:	dc02      	bgt.n	8013134 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801312e:	8c3b      	ldrh	r3, [r7, #32]
 8013130:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013132:	e009      	b.n	8013148 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013134:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013138:	2b09      	cmp	r3, #9
 801313a:	dc02      	bgt.n	8013142 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801313c:	8bfb      	ldrh	r3, [r7, #30]
 801313e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013140:	e002      	b.n	8013148 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013146:	e054      	b.n	80131f2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013148:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801314c:	2b09      	cmp	r3, #9
 801314e:	dd06      	ble.n	801315e <etharp_find_entry+0x236>
 8013150:	4b2b      	ldr	r3, [pc, #172]	@ (8013200 <etharp_find_entry+0x2d8>)
 8013152:	f240 127f 	movw	r2, #383	@ 0x17f
 8013156:	492e      	ldr	r1, [pc, #184]	@ (8013210 <etharp_find_entry+0x2e8>)
 8013158:	482b      	ldr	r0, [pc, #172]	@ (8013208 <etharp_find_entry+0x2e0>)
 801315a:	f002 fee7 	bl	8015f2c <iprintf>
    etharp_free_entry(i);
 801315e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013162:	4618      	mov	r0, r3
 8013164:	f7ff fdd8 	bl	8012d18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013168:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801316c:	2b09      	cmp	r3, #9
 801316e:	dd06      	ble.n	801317e <etharp_find_entry+0x256>
 8013170:	4b23      	ldr	r3, [pc, #140]	@ (8013200 <etharp_find_entry+0x2d8>)
 8013172:	f240 1283 	movw	r2, #387	@ 0x183
 8013176:	4926      	ldr	r1, [pc, #152]	@ (8013210 <etharp_find_entry+0x2e8>)
 8013178:	4823      	ldr	r0, [pc, #140]	@ (8013208 <etharp_find_entry+0x2e0>)
 801317a:	f002 fed7 	bl	8015f2c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801317e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013182:	491e      	ldr	r1, [pc, #120]	@ (80131fc <etharp_find_entry+0x2d4>)
 8013184:	4613      	mov	r3, r2
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	4413      	add	r3, r2
 801318a:	00db      	lsls	r3, r3, #3
 801318c:	440b      	add	r3, r1
 801318e:	3314      	adds	r3, #20
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d006      	beq.n	80131a4 <etharp_find_entry+0x27c>
 8013196:	4b1a      	ldr	r3, [pc, #104]	@ (8013200 <etharp_find_entry+0x2d8>)
 8013198:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801319c:	491d      	ldr	r1, [pc, #116]	@ (8013214 <etharp_find_entry+0x2ec>)
 801319e:	481a      	ldr	r0, [pc, #104]	@ (8013208 <etharp_find_entry+0x2e0>)
 80131a0:	f002 fec4 	bl	8015f2c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d00b      	beq.n	80131c2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80131aa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	6819      	ldr	r1, [r3, #0]
 80131b2:	4812      	ldr	r0, [pc, #72]	@ (80131fc <etharp_find_entry+0x2d4>)
 80131b4:	4613      	mov	r3, r2
 80131b6:	005b      	lsls	r3, r3, #1
 80131b8:	4413      	add	r3, r2
 80131ba:	00db      	lsls	r3, r3, #3
 80131bc:	4403      	add	r3, r0
 80131be:	3304      	adds	r3, #4
 80131c0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80131c2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80131c6:	490d      	ldr	r1, [pc, #52]	@ (80131fc <etharp_find_entry+0x2d4>)
 80131c8:	4613      	mov	r3, r2
 80131ca:	005b      	lsls	r3, r3, #1
 80131cc:	4413      	add	r3, r2
 80131ce:	00db      	lsls	r3, r3, #3
 80131d0:	440b      	add	r3, r1
 80131d2:	3312      	adds	r3, #18
 80131d4:	2200      	movs	r2, #0
 80131d6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80131d8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80131dc:	4907      	ldr	r1, [pc, #28]	@ (80131fc <etharp_find_entry+0x2d4>)
 80131de:	4613      	mov	r3, r2
 80131e0:	005b      	lsls	r3, r3, #1
 80131e2:	4413      	add	r3, r2
 80131e4:	00db      	lsls	r3, r3, #3
 80131e6:	440b      	add	r3, r1
 80131e8:	3308      	adds	r3, #8
 80131ea:	687a      	ldr	r2, [r7, #4]
 80131ec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80131ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3728      	adds	r7, #40	@ 0x28
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	200083c0 	.word	0x200083c0
 8013200:	0801992c 	.word	0x0801992c
 8013204:	08019964 	.word	0x08019964
 8013208:	080199a4 	.word	0x080199a4
 801320c:	080199cc 	.word	0x080199cc
 8013210:	080199e4 	.word	0x080199e4
 8013214:	080199f8 	.word	0x080199f8

08013218 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b088      	sub	sp, #32
 801321c:	af02      	add	r7, sp, #8
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801322c:	2b06      	cmp	r3, #6
 801322e:	d006      	beq.n	801323e <etharp_update_arp_entry+0x26>
 8013230:	4b48      	ldr	r3, [pc, #288]	@ (8013354 <etharp_update_arp_entry+0x13c>)
 8013232:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013236:	4948      	ldr	r1, [pc, #288]	@ (8013358 <etharp_update_arp_entry+0x140>)
 8013238:	4848      	ldr	r0, [pc, #288]	@ (801335c <etharp_update_arp_entry+0x144>)
 801323a:	f002 fe77 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d012      	beq.n	801326a <etharp_update_arp_entry+0x52>
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00e      	beq.n	801326a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	68f9      	ldr	r1, [r7, #12]
 8013252:	4618      	mov	r0, r3
 8013254:	f001 f990 	bl	8014578 <ip4_addr_isbroadcast_u32>
 8013258:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801325a:	2b00      	cmp	r3, #0
 801325c:	d105      	bne.n	801326a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013266:	2be0      	cmp	r3, #224	@ 0xe0
 8013268:	d102      	bne.n	8013270 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801326a:	f06f 030f 	mvn.w	r3, #15
 801326e:	e06c      	b.n	801334a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013270:	78fb      	ldrb	r3, [r7, #3]
 8013272:	68fa      	ldr	r2, [r7, #12]
 8013274:	4619      	mov	r1, r3
 8013276:	68b8      	ldr	r0, [r7, #8]
 8013278:	f7ff fe56 	bl	8012f28 <etharp_find_entry>
 801327c:	4603      	mov	r3, r0
 801327e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013280:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013284:	2b00      	cmp	r3, #0
 8013286:	da02      	bge.n	801328e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013288:	8afb      	ldrh	r3, [r7, #22]
 801328a:	b25b      	sxtb	r3, r3
 801328c:	e05d      	b.n	801334a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801328e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013292:	4933      	ldr	r1, [pc, #204]	@ (8013360 <etharp_update_arp_entry+0x148>)
 8013294:	4613      	mov	r3, r2
 8013296:	005b      	lsls	r3, r3, #1
 8013298:	4413      	add	r3, r2
 801329a:	00db      	lsls	r3, r3, #3
 801329c:	440b      	add	r3, r1
 801329e:	3314      	adds	r3, #20
 80132a0:	2202      	movs	r2, #2
 80132a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80132a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132a8:	492d      	ldr	r1, [pc, #180]	@ (8013360 <etharp_update_arp_entry+0x148>)
 80132aa:	4613      	mov	r3, r2
 80132ac:	005b      	lsls	r3, r3, #1
 80132ae:	4413      	add	r3, r2
 80132b0:	00db      	lsls	r3, r3, #3
 80132b2:	440b      	add	r3, r1
 80132b4:	3308      	adds	r3, #8
 80132b6:	68fa      	ldr	r2, [r7, #12]
 80132b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80132ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132be:	4613      	mov	r3, r2
 80132c0:	005b      	lsls	r3, r3, #1
 80132c2:	4413      	add	r3, r2
 80132c4:	00db      	lsls	r3, r3, #3
 80132c6:	3308      	adds	r3, #8
 80132c8:	4a25      	ldr	r2, [pc, #148]	@ (8013360 <etharp_update_arp_entry+0x148>)
 80132ca:	4413      	add	r3, r2
 80132cc:	3304      	adds	r3, #4
 80132ce:	2206      	movs	r2, #6
 80132d0:	6879      	ldr	r1, [r7, #4]
 80132d2:	4618      	mov	r0, r3
 80132d4:	f002 ffff 	bl	80162d6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80132d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132dc:	4920      	ldr	r1, [pc, #128]	@ (8013360 <etharp_update_arp_entry+0x148>)
 80132de:	4613      	mov	r3, r2
 80132e0:	005b      	lsls	r3, r3, #1
 80132e2:	4413      	add	r3, r2
 80132e4:	00db      	lsls	r3, r3, #3
 80132e6:	440b      	add	r3, r1
 80132e8:	3312      	adds	r3, #18
 80132ea:	2200      	movs	r2, #0
 80132ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80132ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132f2:	491b      	ldr	r1, [pc, #108]	@ (8013360 <etharp_update_arp_entry+0x148>)
 80132f4:	4613      	mov	r3, r2
 80132f6:	005b      	lsls	r3, r3, #1
 80132f8:	4413      	add	r3, r2
 80132fa:	00db      	lsls	r3, r3, #3
 80132fc:	440b      	add	r3, r1
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d021      	beq.n	8013348 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013304:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013308:	4915      	ldr	r1, [pc, #84]	@ (8013360 <etharp_update_arp_entry+0x148>)
 801330a:	4613      	mov	r3, r2
 801330c:	005b      	lsls	r3, r3, #1
 801330e:	4413      	add	r3, r2
 8013310:	00db      	lsls	r3, r3, #3
 8013312:	440b      	add	r3, r1
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013318:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801331c:	4910      	ldr	r1, [pc, #64]	@ (8013360 <etharp_update_arp_entry+0x148>)
 801331e:	4613      	mov	r3, r2
 8013320:	005b      	lsls	r3, r3, #1
 8013322:	4413      	add	r3, r2
 8013324:	00db      	lsls	r3, r3, #3
 8013326:	440b      	add	r3, r1
 8013328:	2200      	movs	r2, #0
 801332a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6939      	ldr	r1, [r7, #16]
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f002 f829 	bl	8015394 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013342:	6938      	ldr	r0, [r7, #16]
 8013344:	f7f9 f914 	bl	800c570 <pbuf_free>
  }
  return ERR_OK;
 8013348:	2300      	movs	r3, #0
}
 801334a:	4618      	mov	r0, r3
 801334c:	3718      	adds	r7, #24
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	0801992c 	.word	0x0801992c
 8013358:	08019a24 	.word	0x08019a24
 801335c:	080199a4 	.word	0x080199a4
 8013360:	200083c0 	.word	0x200083c0

08013364 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b084      	sub	sp, #16
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801336c:	2300      	movs	r3, #0
 801336e:	60fb      	str	r3, [r7, #12]
 8013370:	e01e      	b.n	80133b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013372:	4913      	ldr	r1, [pc, #76]	@ (80133c0 <etharp_cleanup_netif+0x5c>)
 8013374:	68fa      	ldr	r2, [r7, #12]
 8013376:	4613      	mov	r3, r2
 8013378:	005b      	lsls	r3, r3, #1
 801337a:	4413      	add	r3, r2
 801337c:	00db      	lsls	r3, r3, #3
 801337e:	440b      	add	r3, r1
 8013380:	3314      	adds	r3, #20
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013386:	7afb      	ldrb	r3, [r7, #11]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d00e      	beq.n	80133aa <etharp_cleanup_netif+0x46>
 801338c:	490c      	ldr	r1, [pc, #48]	@ (80133c0 <etharp_cleanup_netif+0x5c>)
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	4613      	mov	r3, r2
 8013392:	005b      	lsls	r3, r3, #1
 8013394:	4413      	add	r3, r2
 8013396:	00db      	lsls	r3, r3, #3
 8013398:	440b      	add	r3, r1
 801339a:	3308      	adds	r3, #8
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d102      	bne.n	80133aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80133a4:	68f8      	ldr	r0, [r7, #12]
 80133a6:	f7ff fcb7 	bl	8012d18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	3301      	adds	r3, #1
 80133ae:	60fb      	str	r3, [r7, #12]
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2b09      	cmp	r3, #9
 80133b4:	dddd      	ble.n	8013372 <etharp_cleanup_netif+0xe>
    }
  }
}
 80133b6:	bf00      	nop
 80133b8:	bf00      	nop
 80133ba:	3710      	adds	r7, #16
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	200083c0 	.word	0x200083c0

080133c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80133c4:	b5b0      	push	{r4, r5, r7, lr}
 80133c6:	b08a      	sub	sp, #40	@ 0x28
 80133c8:	af04      	add	r7, sp, #16
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d107      	bne.n	80133e4 <etharp_input+0x20>
 80133d4:	4b3d      	ldr	r3, [pc, #244]	@ (80134cc <etharp_input+0x108>)
 80133d6:	f240 228a 	movw	r2, #650	@ 0x28a
 80133da:	493d      	ldr	r1, [pc, #244]	@ (80134d0 <etharp_input+0x10c>)
 80133dc:	483d      	ldr	r0, [pc, #244]	@ (80134d4 <etharp_input+0x110>)
 80133de:	f002 fda5 	bl	8015f2c <iprintf>
 80133e2:	e06f      	b.n	80134c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	881b      	ldrh	r3, [r3, #0]
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80133f4:	d10c      	bne.n	8013410 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80133fa:	2b06      	cmp	r3, #6
 80133fc:	d108      	bne.n	8013410 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013402:	2b04      	cmp	r3, #4
 8013404:	d104      	bne.n	8013410 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	885b      	ldrh	r3, [r3, #2]
 801340a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801340c:	2b08      	cmp	r3, #8
 801340e:	d003      	beq.n	8013418 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7f9 f8ad 	bl	800c570 <pbuf_free>
    return;
 8013416:	e055      	b.n	80134c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	330e      	adds	r3, #14
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	3318      	adds	r3, #24
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	3304      	adds	r3, #4
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d102      	bne.n	8013438 <etharp_input+0x74>
    for_us = 0;
 8013432:	2300      	movs	r3, #0
 8013434:	74fb      	strb	r3, [r7, #19]
 8013436:	e009      	b.n	801344c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013438:	68ba      	ldr	r2, [r7, #8]
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	3304      	adds	r3, #4
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	429a      	cmp	r2, r3
 8013442:	bf0c      	ite	eq
 8013444:	2301      	moveq	r3, #1
 8013446:	2300      	movne	r3, #0
 8013448:	b2db      	uxtb	r3, r3
 801344a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	f103 0208 	add.w	r2, r3, #8
 8013452:	7cfb      	ldrb	r3, [r7, #19]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d001      	beq.n	801345c <etharp_input+0x98>
 8013458:	2301      	movs	r3, #1
 801345a:	e000      	b.n	801345e <etharp_input+0x9a>
 801345c:	2302      	movs	r3, #2
 801345e:	f107 010c 	add.w	r1, r7, #12
 8013462:	6838      	ldr	r0, [r7, #0]
 8013464:	f7ff fed8 	bl	8013218 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	88db      	ldrh	r3, [r3, #6]
 801346c:	b29b      	uxth	r3, r3
 801346e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013472:	d003      	beq.n	801347c <etharp_input+0xb8>
 8013474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013478:	d01e      	beq.n	80134b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801347a:	e020      	b.n	80134be <etharp_input+0xfa>
      if (for_us) {
 801347c:	7cfb      	ldrb	r3, [r7, #19]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d01c      	beq.n	80134bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013498:	697a      	ldr	r2, [r7, #20]
 801349a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801349c:	2102      	movs	r1, #2
 801349e:	9103      	str	r1, [sp, #12]
 80134a0:	f107 010c 	add.w	r1, r7, #12
 80134a4:	9102      	str	r1, [sp, #8]
 80134a6:	9201      	str	r2, [sp, #4]
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	462b      	mov	r3, r5
 80134ac:	4622      	mov	r2, r4
 80134ae:	4601      	mov	r1, r0
 80134b0:	6838      	ldr	r0, [r7, #0]
 80134b2:	f000 faeb 	bl	8013a8c <etharp_raw>
      break;
 80134b6:	e001      	b.n	80134bc <etharp_input+0xf8>
      break;
 80134b8:	bf00      	nop
 80134ba:	e000      	b.n	80134be <etharp_input+0xfa>
      break;
 80134bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f7f9 f856 	bl	800c570 <pbuf_free>
}
 80134c4:	3718      	adds	r7, #24
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bdb0      	pop	{r4, r5, r7, pc}
 80134ca:	bf00      	nop
 80134cc:	0801992c 	.word	0x0801992c
 80134d0:	08019a7c 	.word	0x08019a7c
 80134d4:	080199a4 	.word	0x080199a4

080134d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af02      	add	r7, sp, #8
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	4613      	mov	r3, r2
 80134e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80134e6:	79fa      	ldrb	r2, [r7, #7]
 80134e8:	4944      	ldr	r1, [pc, #272]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 80134ea:	4613      	mov	r3, r2
 80134ec:	005b      	lsls	r3, r3, #1
 80134ee:	4413      	add	r3, r2
 80134f0:	00db      	lsls	r3, r3, #3
 80134f2:	440b      	add	r3, r1
 80134f4:	3314      	adds	r3, #20
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d806      	bhi.n	801350a <etharp_output_to_arp_index+0x32>
 80134fc:	4b40      	ldr	r3, [pc, #256]	@ (8013600 <etharp_output_to_arp_index+0x128>)
 80134fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013502:	4940      	ldr	r1, [pc, #256]	@ (8013604 <etharp_output_to_arp_index+0x12c>)
 8013504:	4840      	ldr	r0, [pc, #256]	@ (8013608 <etharp_output_to_arp_index+0x130>)
 8013506:	f002 fd11 	bl	8015f2c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801350a:	79fa      	ldrb	r2, [r7, #7]
 801350c:	493b      	ldr	r1, [pc, #236]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 801350e:	4613      	mov	r3, r2
 8013510:	005b      	lsls	r3, r3, #1
 8013512:	4413      	add	r3, r2
 8013514:	00db      	lsls	r3, r3, #3
 8013516:	440b      	add	r3, r1
 8013518:	3314      	adds	r3, #20
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	2b02      	cmp	r3, #2
 801351e:	d153      	bne.n	80135c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013520:	79fa      	ldrb	r2, [r7, #7]
 8013522:	4936      	ldr	r1, [pc, #216]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 8013524:	4613      	mov	r3, r2
 8013526:	005b      	lsls	r3, r3, #1
 8013528:	4413      	add	r3, r2
 801352a:	00db      	lsls	r3, r3, #3
 801352c:	440b      	add	r3, r1
 801352e:	3312      	adds	r3, #18
 8013530:	881b      	ldrh	r3, [r3, #0]
 8013532:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8013536:	d919      	bls.n	801356c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013538:	79fa      	ldrb	r2, [r7, #7]
 801353a:	4613      	mov	r3, r2
 801353c:	005b      	lsls	r3, r3, #1
 801353e:	4413      	add	r3, r2
 8013540:	00db      	lsls	r3, r3, #3
 8013542:	4a2e      	ldr	r2, [pc, #184]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 8013544:	4413      	add	r3, r2
 8013546:	3304      	adds	r3, #4
 8013548:	4619      	mov	r1, r3
 801354a:	68f8      	ldr	r0, [r7, #12]
 801354c:	f000 fb4c 	bl	8013be8 <etharp_request>
 8013550:	4603      	mov	r3, r0
 8013552:	2b00      	cmp	r3, #0
 8013554:	d138      	bne.n	80135c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013556:	79fa      	ldrb	r2, [r7, #7]
 8013558:	4928      	ldr	r1, [pc, #160]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 801355a:	4613      	mov	r3, r2
 801355c:	005b      	lsls	r3, r3, #1
 801355e:	4413      	add	r3, r2
 8013560:	00db      	lsls	r3, r3, #3
 8013562:	440b      	add	r3, r1
 8013564:	3314      	adds	r3, #20
 8013566:	2203      	movs	r2, #3
 8013568:	701a      	strb	r2, [r3, #0]
 801356a:	e02d      	b.n	80135c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801356c:	79fa      	ldrb	r2, [r7, #7]
 801356e:	4923      	ldr	r1, [pc, #140]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 8013570:	4613      	mov	r3, r2
 8013572:	005b      	lsls	r3, r3, #1
 8013574:	4413      	add	r3, r2
 8013576:	00db      	lsls	r3, r3, #3
 8013578:	440b      	add	r3, r1
 801357a:	3312      	adds	r3, #18
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013582:	d321      	bcc.n	80135c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013584:	79fa      	ldrb	r2, [r7, #7]
 8013586:	4613      	mov	r3, r2
 8013588:	005b      	lsls	r3, r3, #1
 801358a:	4413      	add	r3, r2
 801358c:	00db      	lsls	r3, r3, #3
 801358e:	4a1b      	ldr	r2, [pc, #108]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 8013590:	4413      	add	r3, r2
 8013592:	1d19      	adds	r1, r3, #4
 8013594:	79fa      	ldrb	r2, [r7, #7]
 8013596:	4613      	mov	r3, r2
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	4413      	add	r3, r2
 801359c:	00db      	lsls	r3, r3, #3
 801359e:	3308      	adds	r3, #8
 80135a0:	4a16      	ldr	r2, [pc, #88]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 80135a2:	4413      	add	r3, r2
 80135a4:	3304      	adds	r3, #4
 80135a6:	461a      	mov	r2, r3
 80135a8:	68f8      	ldr	r0, [r7, #12]
 80135aa:	f000 fafb 	bl	8013ba4 <etharp_request_dst>
 80135ae:	4603      	mov	r3, r0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d109      	bne.n	80135c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80135b4:	79fa      	ldrb	r2, [r7, #7]
 80135b6:	4911      	ldr	r1, [pc, #68]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 80135b8:	4613      	mov	r3, r2
 80135ba:	005b      	lsls	r3, r3, #1
 80135bc:	4413      	add	r3, r2
 80135be:	00db      	lsls	r3, r3, #3
 80135c0:	440b      	add	r3, r1
 80135c2:	3314      	adds	r3, #20
 80135c4:	2203      	movs	r2, #3
 80135c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80135ce:	79fa      	ldrb	r2, [r7, #7]
 80135d0:	4613      	mov	r3, r2
 80135d2:	005b      	lsls	r3, r3, #1
 80135d4:	4413      	add	r3, r2
 80135d6:	00db      	lsls	r3, r3, #3
 80135d8:	3308      	adds	r3, #8
 80135da:	4a08      	ldr	r2, [pc, #32]	@ (80135fc <etharp_output_to_arp_index+0x124>)
 80135dc:	4413      	add	r3, r2
 80135de:	3304      	adds	r3, #4
 80135e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80135e4:	9200      	str	r2, [sp, #0]
 80135e6:	460a      	mov	r2, r1
 80135e8:	68b9      	ldr	r1, [r7, #8]
 80135ea:	68f8      	ldr	r0, [r7, #12]
 80135ec:	f001 fed2 	bl	8015394 <ethernet_output>
 80135f0:	4603      	mov	r3, r0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3710      	adds	r7, #16
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	200083c0 	.word	0x200083c0
 8013600:	0801992c 	.word	0x0801992c
 8013604:	08019a9c 	.word	0x08019a9c
 8013608:	080199a4 	.word	0x080199a4

0801360c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b08a      	sub	sp, #40	@ 0x28
 8013610:	af02      	add	r7, sp, #8
 8013612:	60f8      	str	r0, [r7, #12]
 8013614:	60b9      	str	r1, [r7, #8]
 8013616:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d106      	bne.n	8013630 <etharp_output+0x24>
 8013622:	4b73      	ldr	r3, [pc, #460]	@ (80137f0 <etharp_output+0x1e4>)
 8013624:	f240 321e 	movw	r2, #798	@ 0x31e
 8013628:	4972      	ldr	r1, [pc, #456]	@ (80137f4 <etharp_output+0x1e8>)
 801362a:	4873      	ldr	r0, [pc, #460]	@ (80137f8 <etharp_output+0x1ec>)
 801362c:	f002 fc7e 	bl	8015f2c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d106      	bne.n	8013644 <etharp_output+0x38>
 8013636:	4b6e      	ldr	r3, [pc, #440]	@ (80137f0 <etharp_output+0x1e4>)
 8013638:	f240 321f 	movw	r2, #799	@ 0x31f
 801363c:	496f      	ldr	r1, [pc, #444]	@ (80137fc <etharp_output+0x1f0>)
 801363e:	486e      	ldr	r0, [pc, #440]	@ (80137f8 <etharp_output+0x1ec>)
 8013640:	f002 fc74 	bl	8015f2c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d106      	bne.n	8013658 <etharp_output+0x4c>
 801364a:	4b69      	ldr	r3, [pc, #420]	@ (80137f0 <etharp_output+0x1e4>)
 801364c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013650:	496b      	ldr	r1, [pc, #428]	@ (8013800 <etharp_output+0x1f4>)
 8013652:	4869      	ldr	r0, [pc, #420]	@ (80137f8 <etharp_output+0x1ec>)
 8013654:	f002 fc6a 	bl	8015f2c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	68f9      	ldr	r1, [r7, #12]
 801365e:	4618      	mov	r0, r3
 8013660:	f000 ff8a 	bl	8014578 <ip4_addr_isbroadcast_u32>
 8013664:	4603      	mov	r3, r0
 8013666:	2b00      	cmp	r3, #0
 8013668:	d002      	beq.n	8013670 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801366a:	4b66      	ldr	r3, [pc, #408]	@ (8013804 <etharp_output+0x1f8>)
 801366c:	61fb      	str	r3, [r7, #28]
 801366e:	e0af      	b.n	80137d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013678:	2be0      	cmp	r3, #224	@ 0xe0
 801367a:	d118      	bne.n	80136ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801367c:	2301      	movs	r3, #1
 801367e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013680:	2300      	movs	r3, #0
 8013682:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013684:	235e      	movs	r3, #94	@ 0x5e
 8013686:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	3301      	adds	r3, #1
 801368c:	781b      	ldrb	r3, [r3, #0]
 801368e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013692:	b2db      	uxtb	r3, r3
 8013694:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	3302      	adds	r3, #2
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	3303      	adds	r3, #3
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80136a6:	f107 0310 	add.w	r3, r7, #16
 80136aa:	61fb      	str	r3, [r7, #28]
 80136ac:	e090      	b.n	80137d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	3304      	adds	r3, #4
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	405a      	eors	r2, r3
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	3308      	adds	r3, #8
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	4013      	ands	r3, r2
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d012      	beq.n	80136ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80136cc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80136d0:	4293      	cmp	r3, r2
 80136d2:	d00b      	beq.n	80136ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	330c      	adds	r3, #12
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d003      	beq.n	80136e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	330c      	adds	r3, #12
 80136e2:	61bb      	str	r3, [r7, #24]
 80136e4:	e002      	b.n	80136ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80136e6:	f06f 0303 	mvn.w	r3, #3
 80136ea:	e07d      	b.n	80137e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80136ec:	4b46      	ldr	r3, [pc, #280]	@ (8013808 <etharp_output+0x1fc>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	4619      	mov	r1, r3
 80136f2:	4a46      	ldr	r2, [pc, #280]	@ (801380c <etharp_output+0x200>)
 80136f4:	460b      	mov	r3, r1
 80136f6:	005b      	lsls	r3, r3, #1
 80136f8:	440b      	add	r3, r1
 80136fa:	00db      	lsls	r3, r3, #3
 80136fc:	4413      	add	r3, r2
 80136fe:	3314      	adds	r3, #20
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2b01      	cmp	r3, #1
 8013704:	d925      	bls.n	8013752 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013706:	4b40      	ldr	r3, [pc, #256]	@ (8013808 <etharp_output+0x1fc>)
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	4619      	mov	r1, r3
 801370c:	4a3f      	ldr	r2, [pc, #252]	@ (801380c <etharp_output+0x200>)
 801370e:	460b      	mov	r3, r1
 8013710:	005b      	lsls	r3, r3, #1
 8013712:	440b      	add	r3, r1
 8013714:	00db      	lsls	r3, r3, #3
 8013716:	4413      	add	r3, r2
 8013718:	3308      	adds	r3, #8
 801371a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801371c:	68fa      	ldr	r2, [r7, #12]
 801371e:	429a      	cmp	r2, r3
 8013720:	d117      	bne.n	8013752 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	4b38      	ldr	r3, [pc, #224]	@ (8013808 <etharp_output+0x1fc>)
 8013728:	781b      	ldrb	r3, [r3, #0]
 801372a:	4618      	mov	r0, r3
 801372c:	4937      	ldr	r1, [pc, #220]	@ (801380c <etharp_output+0x200>)
 801372e:	4603      	mov	r3, r0
 8013730:	005b      	lsls	r3, r3, #1
 8013732:	4403      	add	r3, r0
 8013734:	00db      	lsls	r3, r3, #3
 8013736:	440b      	add	r3, r1
 8013738:	3304      	adds	r3, #4
 801373a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801373c:	429a      	cmp	r2, r3
 801373e:	d108      	bne.n	8013752 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013740:	4b31      	ldr	r3, [pc, #196]	@ (8013808 <etharp_output+0x1fc>)
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	461a      	mov	r2, r3
 8013746:	68b9      	ldr	r1, [r7, #8]
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f7ff fec5 	bl	80134d8 <etharp_output_to_arp_index>
 801374e:	4603      	mov	r3, r0
 8013750:	e04a      	b.n	80137e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013752:	2300      	movs	r3, #0
 8013754:	75fb      	strb	r3, [r7, #23]
 8013756:	e031      	b.n	80137bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013758:	7dfa      	ldrb	r2, [r7, #23]
 801375a:	492c      	ldr	r1, [pc, #176]	@ (801380c <etharp_output+0x200>)
 801375c:	4613      	mov	r3, r2
 801375e:	005b      	lsls	r3, r3, #1
 8013760:	4413      	add	r3, r2
 8013762:	00db      	lsls	r3, r3, #3
 8013764:	440b      	add	r3, r1
 8013766:	3314      	adds	r3, #20
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	2b01      	cmp	r3, #1
 801376c:	d923      	bls.n	80137b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801376e:	7dfa      	ldrb	r2, [r7, #23]
 8013770:	4926      	ldr	r1, [pc, #152]	@ (801380c <etharp_output+0x200>)
 8013772:	4613      	mov	r3, r2
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	4413      	add	r3, r2
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	440b      	add	r3, r1
 801377c:	3308      	adds	r3, #8
 801377e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	429a      	cmp	r2, r3
 8013784:	d117      	bne.n	80137b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	6819      	ldr	r1, [r3, #0]
 801378a:	7dfa      	ldrb	r2, [r7, #23]
 801378c:	481f      	ldr	r0, [pc, #124]	@ (801380c <etharp_output+0x200>)
 801378e:	4613      	mov	r3, r2
 8013790:	005b      	lsls	r3, r3, #1
 8013792:	4413      	add	r3, r2
 8013794:	00db      	lsls	r3, r3, #3
 8013796:	4403      	add	r3, r0
 8013798:	3304      	adds	r3, #4
 801379a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801379c:	4299      	cmp	r1, r3
 801379e:	d10a      	bne.n	80137b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80137a0:	4a19      	ldr	r2, [pc, #100]	@ (8013808 <etharp_output+0x1fc>)
 80137a2:	7dfb      	ldrb	r3, [r7, #23]
 80137a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80137a6:	7dfb      	ldrb	r3, [r7, #23]
 80137a8:	461a      	mov	r2, r3
 80137aa:	68b9      	ldr	r1, [r7, #8]
 80137ac:	68f8      	ldr	r0, [r7, #12]
 80137ae:	f7ff fe93 	bl	80134d8 <etharp_output_to_arp_index>
 80137b2:	4603      	mov	r3, r0
 80137b4:	e018      	b.n	80137e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80137b6:	7dfb      	ldrb	r3, [r7, #23]
 80137b8:	3301      	adds	r3, #1
 80137ba:	75fb      	strb	r3, [r7, #23]
 80137bc:	7dfb      	ldrb	r3, [r7, #23]
 80137be:	2b09      	cmp	r3, #9
 80137c0:	d9ca      	bls.n	8013758 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80137c2:	68ba      	ldr	r2, [r7, #8]
 80137c4:	69b9      	ldr	r1, [r7, #24]
 80137c6:	68f8      	ldr	r0, [r7, #12]
 80137c8:	f000 f822 	bl	8013810 <etharp_query>
 80137cc:	4603      	mov	r3, r0
 80137ce:	e00b      	b.n	80137e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80137d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80137da:	9300      	str	r3, [sp, #0]
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	68b9      	ldr	r1, [r7, #8]
 80137e0:	68f8      	ldr	r0, [r7, #12]
 80137e2:	f001 fdd7 	bl	8015394 <ethernet_output>
 80137e6:	4603      	mov	r3, r0
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3720      	adds	r7, #32
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	0801992c 	.word	0x0801992c
 80137f4:	08019a7c 	.word	0x08019a7c
 80137f8:	080199a4 	.word	0x080199a4
 80137fc:	08019acc 	.word	0x08019acc
 8013800:	08019a6c 	.word	0x08019a6c
 8013804:	0801a574 	.word	0x0801a574
 8013808:	200084b0 	.word	0x200084b0
 801380c:	200083c0 	.word	0x200083c0

08013810 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b08c      	sub	sp, #48	@ 0x30
 8013814:	af02      	add	r7, sp, #8
 8013816:	60f8      	str	r0, [r7, #12]
 8013818:	60b9      	str	r1, [r7, #8]
 801381a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	3326      	adds	r3, #38	@ 0x26
 8013820:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013822:	23ff      	movs	r3, #255	@ 0xff
 8013824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8013828:	2300      	movs	r3, #0
 801382a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	68f9      	ldr	r1, [r7, #12]
 8013832:	4618      	mov	r0, r3
 8013834:	f000 fea0 	bl	8014578 <ip4_addr_isbroadcast_u32>
 8013838:	4603      	mov	r3, r0
 801383a:	2b00      	cmp	r3, #0
 801383c:	d10c      	bne.n	8013858 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013846:	2be0      	cmp	r3, #224	@ 0xe0
 8013848:	d006      	beq.n	8013858 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d003      	beq.n	8013858 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d102      	bne.n	801385e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013858:	f06f 030f 	mvn.w	r3, #15
 801385c:	e101      	b.n	8013a62 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801385e:	68fa      	ldr	r2, [r7, #12]
 8013860:	2101      	movs	r1, #1
 8013862:	68b8      	ldr	r0, [r7, #8]
 8013864:	f7ff fb60 	bl	8012f28 <etharp_find_entry>
 8013868:	4603      	mov	r3, r0
 801386a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801386c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013870:	2b00      	cmp	r3, #0
 8013872:	da02      	bge.n	801387a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013874:	8a7b      	ldrh	r3, [r7, #18]
 8013876:	b25b      	sxtb	r3, r3
 8013878:	e0f3      	b.n	8013a62 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801387a:	8a7b      	ldrh	r3, [r7, #18]
 801387c:	2b7e      	cmp	r3, #126	@ 0x7e
 801387e:	d906      	bls.n	801388e <etharp_query+0x7e>
 8013880:	4b7a      	ldr	r3, [pc, #488]	@ (8013a6c <etharp_query+0x25c>)
 8013882:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013886:	497a      	ldr	r1, [pc, #488]	@ (8013a70 <etharp_query+0x260>)
 8013888:	487a      	ldr	r0, [pc, #488]	@ (8013a74 <etharp_query+0x264>)
 801388a:	f002 fb4f 	bl	8015f2c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801388e:	8a7b      	ldrh	r3, [r7, #18]
 8013890:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013892:	7c7a      	ldrb	r2, [r7, #17]
 8013894:	4978      	ldr	r1, [pc, #480]	@ (8013a78 <etharp_query+0x268>)
 8013896:	4613      	mov	r3, r2
 8013898:	005b      	lsls	r3, r3, #1
 801389a:	4413      	add	r3, r2
 801389c:	00db      	lsls	r3, r3, #3
 801389e:	440b      	add	r3, r1
 80138a0:	3314      	adds	r3, #20
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d115      	bne.n	80138d4 <etharp_query+0xc4>
    is_new_entry = 1;
 80138a8:	2301      	movs	r3, #1
 80138aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80138ac:	7c7a      	ldrb	r2, [r7, #17]
 80138ae:	4972      	ldr	r1, [pc, #456]	@ (8013a78 <etharp_query+0x268>)
 80138b0:	4613      	mov	r3, r2
 80138b2:	005b      	lsls	r3, r3, #1
 80138b4:	4413      	add	r3, r2
 80138b6:	00db      	lsls	r3, r3, #3
 80138b8:	440b      	add	r3, r1
 80138ba:	3314      	adds	r3, #20
 80138bc:	2201      	movs	r2, #1
 80138be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80138c0:	7c7a      	ldrb	r2, [r7, #17]
 80138c2:	496d      	ldr	r1, [pc, #436]	@ (8013a78 <etharp_query+0x268>)
 80138c4:	4613      	mov	r3, r2
 80138c6:	005b      	lsls	r3, r3, #1
 80138c8:	4413      	add	r3, r2
 80138ca:	00db      	lsls	r3, r3, #3
 80138cc:	440b      	add	r3, r1
 80138ce:	3308      	adds	r3, #8
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80138d4:	7c7a      	ldrb	r2, [r7, #17]
 80138d6:	4968      	ldr	r1, [pc, #416]	@ (8013a78 <etharp_query+0x268>)
 80138d8:	4613      	mov	r3, r2
 80138da:	005b      	lsls	r3, r3, #1
 80138dc:	4413      	add	r3, r2
 80138de:	00db      	lsls	r3, r3, #3
 80138e0:	440b      	add	r3, r1
 80138e2:	3314      	adds	r3, #20
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	2b01      	cmp	r3, #1
 80138e8:	d011      	beq.n	801390e <etharp_query+0xfe>
 80138ea:	7c7a      	ldrb	r2, [r7, #17]
 80138ec:	4962      	ldr	r1, [pc, #392]	@ (8013a78 <etharp_query+0x268>)
 80138ee:	4613      	mov	r3, r2
 80138f0:	005b      	lsls	r3, r3, #1
 80138f2:	4413      	add	r3, r2
 80138f4:	00db      	lsls	r3, r3, #3
 80138f6:	440b      	add	r3, r1
 80138f8:	3314      	adds	r3, #20
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	d806      	bhi.n	801390e <etharp_query+0xfe>
 8013900:	4b5a      	ldr	r3, [pc, #360]	@ (8013a6c <etharp_query+0x25c>)
 8013902:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8013906:	495d      	ldr	r1, [pc, #372]	@ (8013a7c <etharp_query+0x26c>)
 8013908:	485a      	ldr	r0, [pc, #360]	@ (8013a74 <etharp_query+0x264>)
 801390a:	f002 fb0f 	bl	8015f2c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801390e:	6a3b      	ldr	r3, [r7, #32]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d102      	bne.n	801391a <etharp_query+0x10a>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d10c      	bne.n	8013934 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801391a:	68b9      	ldr	r1, [r7, #8]
 801391c:	68f8      	ldr	r0, [r7, #12]
 801391e:	f000 f963 	bl	8013be8 <etharp_request>
 8013922:	4603      	mov	r3, r0
 8013924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d102      	bne.n	8013934 <etharp_query+0x124>
      return result;
 801392e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013932:	e096      	b.n	8013a62 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d106      	bne.n	8013948 <etharp_query+0x138>
 801393a:	4b4c      	ldr	r3, [pc, #304]	@ (8013a6c <etharp_query+0x25c>)
 801393c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8013940:	494f      	ldr	r1, [pc, #316]	@ (8013a80 <etharp_query+0x270>)
 8013942:	484c      	ldr	r0, [pc, #304]	@ (8013a74 <etharp_query+0x264>)
 8013944:	f002 faf2 	bl	8015f2c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013948:	7c7a      	ldrb	r2, [r7, #17]
 801394a:	494b      	ldr	r1, [pc, #300]	@ (8013a78 <etharp_query+0x268>)
 801394c:	4613      	mov	r3, r2
 801394e:	005b      	lsls	r3, r3, #1
 8013950:	4413      	add	r3, r2
 8013952:	00db      	lsls	r3, r3, #3
 8013954:	440b      	add	r3, r1
 8013956:	3314      	adds	r3, #20
 8013958:	781b      	ldrb	r3, [r3, #0]
 801395a:	2b01      	cmp	r3, #1
 801395c:	d917      	bls.n	801398e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801395e:	4a49      	ldr	r2, [pc, #292]	@ (8013a84 <etharp_query+0x274>)
 8013960:	7c7b      	ldrb	r3, [r7, #17]
 8013962:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013964:	7c7a      	ldrb	r2, [r7, #17]
 8013966:	4613      	mov	r3, r2
 8013968:	005b      	lsls	r3, r3, #1
 801396a:	4413      	add	r3, r2
 801396c:	00db      	lsls	r3, r3, #3
 801396e:	3308      	adds	r3, #8
 8013970:	4a41      	ldr	r2, [pc, #260]	@ (8013a78 <etharp_query+0x268>)
 8013972:	4413      	add	r3, r2
 8013974:	3304      	adds	r3, #4
 8013976:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801397a:	9200      	str	r2, [sp, #0]
 801397c:	697a      	ldr	r2, [r7, #20]
 801397e:	6879      	ldr	r1, [r7, #4]
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f001 fd07 	bl	8015394 <ethernet_output>
 8013986:	4603      	mov	r3, r0
 8013988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801398c:	e067      	b.n	8013a5e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801398e:	7c7a      	ldrb	r2, [r7, #17]
 8013990:	4939      	ldr	r1, [pc, #228]	@ (8013a78 <etharp_query+0x268>)
 8013992:	4613      	mov	r3, r2
 8013994:	005b      	lsls	r3, r3, #1
 8013996:	4413      	add	r3, r2
 8013998:	00db      	lsls	r3, r3, #3
 801399a:	440b      	add	r3, r1
 801399c:	3314      	adds	r3, #20
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	2b01      	cmp	r3, #1
 80139a2:	d15c      	bne.n	8013a5e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80139ac:	e01c      	b.n	80139e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80139ae:	69fb      	ldr	r3, [r7, #28]
 80139b0:	895a      	ldrh	r2, [r3, #10]
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	891b      	ldrh	r3, [r3, #8]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d10a      	bne.n	80139d0 <etharp_query+0x1c0>
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d006      	beq.n	80139d0 <etharp_query+0x1c0>
 80139c2:	4b2a      	ldr	r3, [pc, #168]	@ (8013a6c <etharp_query+0x25c>)
 80139c4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80139c8:	492f      	ldr	r1, [pc, #188]	@ (8013a88 <etharp_query+0x278>)
 80139ca:	482a      	ldr	r0, [pc, #168]	@ (8013a74 <etharp_query+0x264>)
 80139cc:	f002 faae 	bl	8015f2c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80139d0:	69fb      	ldr	r3, [r7, #28]
 80139d2:	7b1b      	ldrb	r3, [r3, #12]
 80139d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d002      	beq.n	80139e2 <etharp_query+0x1d2>
        copy_needed = 1;
 80139dc:	2301      	movs	r3, #1
 80139de:	61bb      	str	r3, [r7, #24]
        break;
 80139e0:	e005      	b.n	80139ee <etharp_query+0x1de>
      }
      p = p->next;
 80139e2:	69fb      	ldr	r3, [r7, #28]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d1df      	bne.n	80139ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 80139ee:	69bb      	ldr	r3, [r7, #24]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d007      	beq.n	8013a04 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80139fa:	200e      	movs	r0, #14
 80139fc:	f7f9 f824 	bl	800ca48 <pbuf_clone>
 8013a00:	61f8      	str	r0, [r7, #28]
 8013a02:	e004      	b.n	8013a0e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013a08:	69f8      	ldr	r0, [r7, #28]
 8013a0a:	f7f8 fe51 	bl	800c6b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d021      	beq.n	8013a58 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013a14:	7c7a      	ldrb	r2, [r7, #17]
 8013a16:	4918      	ldr	r1, [pc, #96]	@ (8013a78 <etharp_query+0x268>)
 8013a18:	4613      	mov	r3, r2
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	4413      	add	r3, r2
 8013a1e:	00db      	lsls	r3, r3, #3
 8013a20:	440b      	add	r3, r1
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d00a      	beq.n	8013a3e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013a28:	7c7a      	ldrb	r2, [r7, #17]
 8013a2a:	4913      	ldr	r1, [pc, #76]	@ (8013a78 <etharp_query+0x268>)
 8013a2c:	4613      	mov	r3, r2
 8013a2e:	005b      	lsls	r3, r3, #1
 8013a30:	4413      	add	r3, r2
 8013a32:	00db      	lsls	r3, r3, #3
 8013a34:	440b      	add	r3, r1
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7f8 fd99 	bl	800c570 <pbuf_free>
      }
      arp_table[i].q = p;
 8013a3e:	7c7a      	ldrb	r2, [r7, #17]
 8013a40:	490d      	ldr	r1, [pc, #52]	@ (8013a78 <etharp_query+0x268>)
 8013a42:	4613      	mov	r3, r2
 8013a44:	005b      	lsls	r3, r3, #1
 8013a46:	4413      	add	r3, r2
 8013a48:	00db      	lsls	r3, r3, #3
 8013a4a:	440b      	add	r3, r1
 8013a4c:	69fa      	ldr	r2, [r7, #28]
 8013a4e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013a50:	2300      	movs	r3, #0
 8013a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013a56:	e002      	b.n	8013a5e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013a58:	23ff      	movs	r3, #255	@ 0xff
 8013a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8013a5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3728      	adds	r7, #40	@ 0x28
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	0801992c 	.word	0x0801992c
 8013a70:	08019ad8 	.word	0x08019ad8
 8013a74:	080199a4 	.word	0x080199a4
 8013a78:	200083c0 	.word	0x200083c0
 8013a7c:	08019ae8 	.word	0x08019ae8
 8013a80:	08019acc 	.word	0x08019acc
 8013a84:	200084b0 	.word	0x200084b0
 8013a88:	08019b10 	.word	0x08019b10

08013a8c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b08a      	sub	sp, #40	@ 0x28
 8013a90:	af02      	add	r7, sp, #8
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
 8013a98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d106      	bne.n	8013ab2 <etharp_raw+0x26>
 8013aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8013b90 <etharp_raw+0x104>)
 8013aa6:	f240 4257 	movw	r2, #1111	@ 0x457
 8013aaa:	493a      	ldr	r1, [pc, #232]	@ (8013b94 <etharp_raw+0x108>)
 8013aac:	483a      	ldr	r0, [pc, #232]	@ (8013b98 <etharp_raw+0x10c>)
 8013aae:	f002 fa3d 	bl	8015f2c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013ab2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013ab6:	211c      	movs	r1, #28
 8013ab8:	200e      	movs	r0, #14
 8013aba:	f7f8 fa75 	bl	800bfa8 <pbuf_alloc>
 8013abe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d102      	bne.n	8013acc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013aca:	e05d      	b.n	8013b88 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	895b      	ldrh	r3, [r3, #10]
 8013ad0:	2b1b      	cmp	r3, #27
 8013ad2:	d806      	bhi.n	8013ae2 <etharp_raw+0x56>
 8013ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8013b90 <etharp_raw+0x104>)
 8013ad6:	f240 4262 	movw	r2, #1122	@ 0x462
 8013ada:	4930      	ldr	r1, [pc, #192]	@ (8013b9c <etharp_raw+0x110>)
 8013adc:	482e      	ldr	r0, [pc, #184]	@ (8013b98 <etharp_raw+0x10c>)
 8013ade:	f002 fa25 	bl	8015f2c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013ae8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7f7 f8f0 	bl	800acd0 <lwip_htons>
 8013af0:	4603      	mov	r3, r0
 8013af2:	461a      	mov	r2, r3
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013afe:	2b06      	cmp	r3, #6
 8013b00:	d006      	beq.n	8013b10 <etharp_raw+0x84>
 8013b02:	4b23      	ldr	r3, [pc, #140]	@ (8013b90 <etharp_raw+0x104>)
 8013b04:	f240 4269 	movw	r2, #1129	@ 0x469
 8013b08:	4925      	ldr	r1, [pc, #148]	@ (8013ba0 <etharp_raw+0x114>)
 8013b0a:	4823      	ldr	r0, [pc, #140]	@ (8013b98 <etharp_raw+0x10c>)
 8013b0c:	f002 fa0e 	bl	8015f2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	3308      	adds	r3, #8
 8013b14:	2206      	movs	r2, #6
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f002 fbdc 	bl	80162d6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	3312      	adds	r3, #18
 8013b22:	2206      	movs	r2, #6
 8013b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013b26:	4618      	mov	r0, r3
 8013b28:	f002 fbd5 	bl	80162d6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	330e      	adds	r3, #14
 8013b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b32:	6812      	ldr	r2, [r2, #0]
 8013b34:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	3318      	adds	r3, #24
 8013b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b3c:	6812      	ldr	r2, [r2, #0]
 8013b3e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	2200      	movs	r2, #0
 8013b44:	701a      	strb	r2, [r3, #0]
 8013b46:	2200      	movs	r2, #0
 8013b48:	f042 0201 	orr.w	r2, r2, #1
 8013b4c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	2200      	movs	r2, #0
 8013b52:	f042 0208 	orr.w	r2, r2, #8
 8013b56:	709a      	strb	r2, [r3, #2]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	2206      	movs	r2, #6
 8013b60:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	2204      	movs	r2, #4
 8013b66:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013b68:	f640 0306 	movw	r3, #2054	@ 0x806
 8013b6c:	9300      	str	r3, [sp, #0]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	68ba      	ldr	r2, [r7, #8]
 8013b72:	69b9      	ldr	r1, [r7, #24]
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f001 fc0d 	bl	8015394 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013b7a:	69b8      	ldr	r0, [r7, #24]
 8013b7c:	f7f8 fcf8 	bl	800c570 <pbuf_free>
  p = NULL;
 8013b80:	2300      	movs	r3, #0
 8013b82:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013b84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3720      	adds	r7, #32
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	0801992c 	.word	0x0801992c
 8013b94:	08019a7c 	.word	0x08019a7c
 8013b98:	080199a4 	.word	0x080199a4
 8013b9c:	08019b2c 	.word	0x08019b2c
 8013ba0:	08019b60 	.word	0x08019b60

08013ba4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b088      	sub	sp, #32
 8013ba8:	af04      	add	r7, sp, #16
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013bc0:	2201      	movs	r2, #1
 8013bc2:	9203      	str	r2, [sp, #12]
 8013bc4:	68ba      	ldr	r2, [r7, #8]
 8013bc6:	9202      	str	r2, [sp, #8]
 8013bc8:	4a06      	ldr	r2, [pc, #24]	@ (8013be4 <etharp_request_dst+0x40>)
 8013bca:	9201      	str	r2, [sp, #4]
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	4603      	mov	r3, r0
 8013bd0:	687a      	ldr	r2, [r7, #4]
 8013bd2:	68f8      	ldr	r0, [r7, #12]
 8013bd4:	f7ff ff5a 	bl	8013a8c <etharp_raw>
 8013bd8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	3710      	adds	r7, #16
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
 8013be2:	bf00      	nop
 8013be4:	0801a57c 	.word	0x0801a57c

08013be8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013bf2:	4a05      	ldr	r2, [pc, #20]	@ (8013c08 <etharp_request+0x20>)
 8013bf4:	6839      	ldr	r1, [r7, #0]
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7ff ffd4 	bl	8013ba4 <etharp_request_dst>
 8013bfc:	4603      	mov	r3, r0
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3708      	adds	r7, #8
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	0801a574 	.word	0x0801a574

08013c0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b08e      	sub	sp, #56	@ 0x38
 8013c10:	af04      	add	r7, sp, #16
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013c16:	4b95      	ldr	r3, [pc, #596]	@ (8013e6c <icmp_input+0x260>)
 8013c18:	689b      	ldr	r3, [r3, #8]
 8013c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	f003 030f 	and.w	r3, r3, #15
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8013c2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c2e:	2b13      	cmp	r3, #19
 8013c30:	d805      	bhi.n	8013c3e <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 8013c32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c34:	4619      	mov	r1, r3
 8013c36:	488e      	ldr	r0, [pc, #568]	@ (8013e70 <icmp_input+0x264>)
 8013c38:	f002 f978 	bl	8015f2c <iprintf>
    goto lenerr;
 8013c3c:	e10a      	b.n	8013e54 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	895b      	ldrh	r3, [r3, #10]
 8013c42:	2b03      	cmp	r3, #3
 8013c44:	d806      	bhi.n	8013c54 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	891b      	ldrh	r3, [r3, #8]
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	4889      	ldr	r0, [pc, #548]	@ (8013e74 <icmp_input+0x268>)
 8013c4e:	f002 f96d 	bl	8015f2c <iprintf>
    goto lenerr;
 8013c52:	e0ff      	b.n	8013e54 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	781b      	ldrb	r3, [r3, #0]
 8013c5a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	785b      	ldrb	r3, [r3, #1]
 8013c64:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013c68:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	f000 80ea 	beq.w	8013e46 <icmp_input+0x23a>
 8013c72:	2b08      	cmp	r3, #8
 8013c74:	f040 80de 	bne.w	8013e34 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013c78:	4b7f      	ldr	r3, [pc, #508]	@ (8013e78 <icmp_input+0x26c>)
 8013c7a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8013e6c <icmp_input+0x260>)
 8013c7e:	695b      	ldr	r3, [r3, #20]
 8013c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013c84:	2be0      	cmp	r3, #224	@ 0xe0
 8013c86:	d103      	bne.n	8013c90 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 8013c88:	487c      	ldr	r0, [pc, #496]	@ (8013e7c <icmp_input+0x270>)
 8013c8a:	f002 f9bf 	bl	801600c <puts>
        goto icmperr;
 8013c8e:	e0e5      	b.n	8013e5c <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013c90:	4b76      	ldr	r3, [pc, #472]	@ (8013e6c <icmp_input+0x260>)
 8013c92:	695b      	ldr	r3, [r3, #20]
 8013c94:	4a75      	ldr	r2, [pc, #468]	@ (8013e6c <icmp_input+0x260>)
 8013c96:	6812      	ldr	r2, [r2, #0]
 8013c98:	4611      	mov	r1, r2
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f000 fc6c 	bl	8014578 <ip4_addr_isbroadcast_u32>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d003      	beq.n	8013cae <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 8013ca6:	4876      	ldr	r0, [pc, #472]	@ (8013e80 <icmp_input+0x274>)
 8013ca8:	f002 f9b0 	bl	801600c <puts>
        goto icmperr;
 8013cac:	e0d6      	b.n	8013e5c <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 8013cae:	4875      	ldr	r0, [pc, #468]	@ (8013e84 <icmp_input+0x278>)
 8013cb0:	f002 f9ac 	bl	801600c <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	891b      	ldrh	r3, [r3, #8]
 8013cb8:	2b07      	cmp	r3, #7
 8013cba:	d803      	bhi.n	8013cc4 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 8013cbc:	4872      	ldr	r0, [pc, #456]	@ (8013e88 <icmp_input+0x27c>)
 8013cbe:	f002 f9a5 	bl	801600c <puts>
        goto lenerr;
 8013cc2:	e0c7      	b.n	8013e54 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013cc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013cc6:	330e      	adds	r3, #14
 8013cc8:	4619      	mov	r1, r3
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f7f8 fbba 	bl	800c444 <pbuf_add_header>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d057      	beq.n	8013d86 <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	891a      	ldrh	r2, [r3, #8]
 8013cda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013cdc:	4413      	add	r3, r2
 8013cde:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	891b      	ldrh	r3, [r3, #8]
 8013ce4:	8b7a      	ldrh	r2, [r7, #26]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d203      	bcs.n	8013cf2 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 8013cea:	4868      	ldr	r0, [pc, #416]	@ (8013e8c <icmp_input+0x280>)
 8013cec:	f002 f98e 	bl	801600c <puts>
          goto icmperr;
 8013cf0:	e0b4      	b.n	8013e5c <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013cf2:	8b7b      	ldrh	r3, [r7, #26]
 8013cf4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	200e      	movs	r0, #14
 8013cfc:	f7f8 f954 	bl	800bfa8 <pbuf_alloc>
 8013d00:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d103      	bne.n	8013d10 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 8013d08:	4861      	ldr	r0, [pc, #388]	@ (8013e90 <icmp_input+0x284>)
 8013d0a:	f002 f97f 	bl	801600c <puts>
          goto icmperr;
 8013d0e:	e0a5      	b.n	8013e5c <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	895b      	ldrh	r3, [r3, #10]
 8013d14:	461a      	mov	r2, r3
 8013d16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d18:	3308      	adds	r3, #8
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d206      	bcs.n	8013d2c <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 8013d1e:	485d      	ldr	r0, [pc, #372]	@ (8013e94 <icmp_input+0x288>)
 8013d20:	f002 f904 	bl	8015f2c <iprintf>
          pbuf_free(r);
 8013d24:	6978      	ldr	r0, [r7, #20]
 8013d26:	f7f8 fc23 	bl	800c570 <pbuf_free>
          goto icmperr;
 8013d2a:	e097      	b.n	8013e5c <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013d32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013d34:	4618      	mov	r0, r3
 8013d36:	f002 face 	bl	80162d6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013d3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	6978      	ldr	r0, [r7, #20]
 8013d40:	f7f8 fb90 	bl	800c464 <pbuf_remove_header>
 8013d44:	4603      	mov	r3, r0
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d009      	beq.n	8013d5e <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013d4a:	4b53      	ldr	r3, [pc, #332]	@ (8013e98 <icmp_input+0x28c>)
 8013d4c:	22b6      	movs	r2, #182	@ 0xb6
 8013d4e:	4953      	ldr	r1, [pc, #332]	@ (8013e9c <icmp_input+0x290>)
 8013d50:	4853      	ldr	r0, [pc, #332]	@ (8013ea0 <icmp_input+0x294>)
 8013d52:	f002 f8eb 	bl	8015f2c <iprintf>
          pbuf_free(r);
 8013d56:	6978      	ldr	r0, [r7, #20]
 8013d58:	f7f8 fc0a 	bl	800c570 <pbuf_free>
          goto icmperr;
 8013d5c:	e07e      	b.n	8013e5c <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013d5e:	6879      	ldr	r1, [r7, #4]
 8013d60:	6978      	ldr	r0, [r7, #20]
 8013d62:	f7f8 fd2d 	bl	800c7c0 <pbuf_copy>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d006      	beq.n	8013d7a <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 8013d6c:	484d      	ldr	r0, [pc, #308]	@ (8013ea4 <icmp_input+0x298>)
 8013d6e:	f002 f8dd 	bl	8015f2c <iprintf>
          pbuf_free(r);
 8013d72:	6978      	ldr	r0, [r7, #20]
 8013d74:	f7f8 fbfc 	bl	800c570 <pbuf_free>
          goto icmperr;
 8013d78:	e070      	b.n	8013e5c <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f7f8 fbf8 	bl	800c570 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013d80:	697b      	ldr	r3, [r7, #20]
 8013d82:	607b      	str	r3, [r7, #4]
 8013d84:	e00f      	b.n	8013da6 <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013d86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d88:	330e      	adds	r3, #14
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f7f8 fb69 	bl	800c464 <pbuf_remove_header>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d006      	beq.n	8013da6 <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013d98:	4b3f      	ldr	r3, [pc, #252]	@ (8013e98 <icmp_input+0x28c>)
 8013d9a:	22c7      	movs	r2, #199	@ 0xc7
 8013d9c:	4942      	ldr	r1, [pc, #264]	@ (8013ea8 <icmp_input+0x29c>)
 8013d9e:	4840      	ldr	r0, [pc, #256]	@ (8013ea0 <icmp_input+0x294>)
 8013da0:	f002 f8c4 	bl	8015f2c <iprintf>
          goto icmperr;
 8013da4:	e05a      	b.n	8013e5c <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013dac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013dae:	4619      	mov	r1, r3
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f7f8 fb47 	bl	800c444 <pbuf_add_header>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d003      	beq.n	8013dc4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 8013dbc:	483b      	ldr	r0, [pc, #236]	@ (8013eac <icmp_input+0x2a0>)
 8013dbe:	f002 f8b5 	bl	8015f2c <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013dc2:	e042      	b.n	8013e4a <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013dd2:	4b26      	ldr	r3, [pc, #152]	@ (8013e6c <icmp_input+0x260>)
 8013dd4:	691a      	ldr	r2, [r3, #16]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	2200      	movs	r2, #0
 8013de4:	709a      	strb	r2, [r3, #2]
 8013de6:	2200      	movs	r2, #0
 8013de8:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	22ff      	movs	r2, #255	@ 0xff
 8013dee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2200      	movs	r2, #0
 8013df4:	729a      	strb	r2, [r3, #10]
 8013df6:	2200      	movs	r2, #0
 8013df8:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	9302      	str	r3, [sp, #8]
 8013dfe:	2301      	movs	r3, #1
 8013e00:	9301      	str	r3, [sp, #4]
 8013e02:	2300      	movs	r3, #0
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	23ff      	movs	r3, #255	@ 0xff
 8013e08:	2200      	movs	r2, #0
 8013e0a:	69f9      	ldr	r1, [r7, #28]
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f000 fadb 	bl	80143c8 <ip4_output_if>
 8013e12:	4603      	mov	r3, r0
 8013e14:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 8013e16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d015      	beq.n	8013e4a <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 8013e1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7f6 ff34 	bl	800ac90 <lwip_strerr>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	4820      	ldr	r0, [pc, #128]	@ (8013eb0 <icmp_input+0x2a4>)
 8013e2e:	f002 f87d 	bl	8015f2c <iprintf>
      break;
 8013e32:	e00a      	b.n	8013e4a <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 8013e34:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013e38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	481d      	ldr	r0, [pc, #116]	@ (8013eb4 <icmp_input+0x2a8>)
 8013e40:	f002 f874 	bl	8015f2c <iprintf>
 8013e44:	e002      	b.n	8013e4c <icmp_input+0x240>
      break;
 8013e46:	bf00      	nop
 8013e48:	e000      	b.n	8013e4c <icmp_input+0x240>
      break;
 8013e4a:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f7f8 fb8f 	bl	800c570 <pbuf_free>
  return;
 8013e52:	e007      	b.n	8013e64 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f7f8 fb8b 	bl	800c570 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013e5a:	e003      	b.n	8013e64 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7f8 fb87 	bl	800c570 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013e62:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013e64:	3728      	adds	r7, #40	@ 0x28
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	20005400 	.word	0x20005400
 8013e70:	08019ba4 	.word	0x08019ba4
 8013e74:	08019bd8 	.word	0x08019bd8
 8013e78:	20005414 	.word	0x20005414
 8013e7c:	08019c08 	.word	0x08019c08
 8013e80:	08019c34 	.word	0x08019c34
 8013e84:	08019c60 	.word	0x08019c60
 8013e88:	08019c74 	.word	0x08019c74
 8013e8c:	08019c98 	.word	0x08019c98
 8013e90:	08019cd4 	.word	0x08019cd4
 8013e94:	08019cfc 	.word	0x08019cfc
 8013e98:	08019d24 	.word	0x08019d24
 8013e9c:	08019d5c 	.word	0x08019d5c
 8013ea0:	08019d94 	.word	0x08019d94
 8013ea4:	08019dbc 	.word	0x08019dbc
 8013ea8:	08019de4 	.word	0x08019de4
 8013eac:	08019e18 	.word	0x08019e18
 8013eb0:	08019e3c 	.word	0x08019e3c
 8013eb4:	08019e6c 	.word	0x08019e6c

08013eb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013ec4:	78fb      	ldrb	r3, [r7, #3]
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	2103      	movs	r1, #3
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 f814 	bl	8013ef8 <icmp_send_response>
}
 8013ed0:	bf00      	nop
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013ee4:	78fb      	ldrb	r3, [r7, #3]
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	210b      	movs	r1, #11
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f000 f804 	bl	8013ef8 <icmp_send_response>
}
 8013ef0:	bf00      	nop
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b08c      	sub	sp, #48	@ 0x30
 8013efc:	af04      	add	r7, sp, #16
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	460b      	mov	r3, r1
 8013f02:	70fb      	strb	r3, [r7, #3]
 8013f04:	4613      	mov	r3, r2
 8013f06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013f08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013f0c:	2124      	movs	r1, #36	@ 0x24
 8013f0e:	2022      	movs	r0, #34	@ 0x22
 8013f10:	f7f8 f84a 	bl	800bfa8 <pbuf_alloc>
 8013f14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013f16:	69fb      	ldr	r3, [r7, #28]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d103      	bne.n	8013f24 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 8013f1c:	4844      	ldr	r0, [pc, #272]	@ (8014030 <icmp_send_response+0x138>)
 8013f1e:	f002 f875 	bl	801600c <puts>
 8013f22:	e082      	b.n	801402a <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013f24:	69fb      	ldr	r3, [r7, #28]
 8013f26:	895b      	ldrh	r3, [r3, #10]
 8013f28:	2b23      	cmp	r3, #35	@ 0x23
 8013f2a:	d806      	bhi.n	8013f3a <icmp_send_response+0x42>
 8013f2c:	4b41      	ldr	r3, [pc, #260]	@ (8014034 <icmp_send_response+0x13c>)
 8013f2e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013f32:	4941      	ldr	r1, [pc, #260]	@ (8014038 <icmp_send_response+0x140>)
 8013f34:	4841      	ldr	r0, [pc, #260]	@ (801403c <icmp_send_response+0x144>)
 8013f36:	f001 fff9 	bl	8015f2c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	685b      	ldr	r3, [r3, #4]
 8013f3e:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 8013f40:	483f      	ldr	r0, [pc, #252]	@ (8014040 <icmp_send_response+0x148>)
 8013f42:	f001 fff3 	bl	8015f2c <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 8013f46:	69bb      	ldr	r3, [r7, #24]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	69bb      	ldr	r3, [r7, #24]
 8013f50:	68db      	ldr	r3, [r3, #12]
 8013f52:	0a1b      	lsrs	r3, r3, #8
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	461a      	mov	r2, r3
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	68db      	ldr	r3, [r3, #12]
 8013f5c:	0c1b      	lsrs	r3, r3, #16
 8013f5e:	b2db      	uxtb	r3, r3
 8013f60:	4618      	mov	r0, r3
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	68db      	ldr	r3, [r3, #12]
 8013f66:	0e1b      	lsrs	r3, r3, #24
 8013f68:	b2db      	uxtb	r3, r3
 8013f6a:	9300      	str	r3, [sp, #0]
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	4835      	ldr	r0, [pc, #212]	@ (8014044 <icmp_send_response+0x14c>)
 8013f70:	f001 ffdc 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 8013f74:	4834      	ldr	r0, [pc, #208]	@ (8014048 <icmp_send_response+0x150>)
 8013f76:	f001 ffd9 	bl	8015f2c <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	691b      	ldr	r3, [r3, #16]
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	4619      	mov	r1, r3
 8013f82:	69bb      	ldr	r3, [r7, #24]
 8013f84:	691b      	ldr	r3, [r3, #16]
 8013f86:	0a1b      	lsrs	r3, r3, #8
 8013f88:	b2db      	uxtb	r3, r3
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	69bb      	ldr	r3, [r7, #24]
 8013f8e:	691b      	ldr	r3, [r3, #16]
 8013f90:	0c1b      	lsrs	r3, r3, #16
 8013f92:	b2db      	uxtb	r3, r3
 8013f94:	4618      	mov	r0, r3
 8013f96:	69bb      	ldr	r3, [r7, #24]
 8013f98:	691b      	ldr	r3, [r3, #16]
 8013f9a:	0e1b      	lsrs	r3, r3, #24
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	9300      	str	r3, [sp, #0]
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	4828      	ldr	r0, [pc, #160]	@ (8014044 <icmp_send_response+0x14c>)
 8013fa4:	f001 ffc2 	bl	8015f2c <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 8013fa8:	200a      	movs	r0, #10
 8013faa:	f001 ffd1 	bl	8015f50 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013fae:	69fb      	ldr	r3, [r7, #28]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	78fa      	ldrb	r2, [r7, #3]
 8013fb8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	78ba      	ldrb	r2, [r7, #2]
 8013fbe:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	711a      	strb	r2, [r3, #4]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	719a      	strb	r2, [r3, #6]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013fd4:	69fb      	ldr	r3, [r7, #28]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	f103 0008 	add.w	r0, r3, #8
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	221c      	movs	r2, #28
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	f002 f977 	bl	80162d6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	68db      	ldr	r3, [r3, #12]
 8013fec:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013fee:	f107 030c 	add.w	r3, r7, #12
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f000 f82a 	bl	801404c <ip4_route>
 8013ff8:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013ffa:	693b      	ldr	r3, [r7, #16]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d011      	beq.n	8014024 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	2200      	movs	r2, #0
 8014004:	709a      	strb	r2, [r3, #2]
 8014006:	2200      	movs	r2, #0
 8014008:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801400a:	f107 020c 	add.w	r2, r7, #12
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	9302      	str	r3, [sp, #8]
 8014012:	2301      	movs	r3, #1
 8014014:	9301      	str	r3, [sp, #4]
 8014016:	2300      	movs	r3, #0
 8014018:	9300      	str	r3, [sp, #0]
 801401a:	23ff      	movs	r3, #255	@ 0xff
 801401c:	2100      	movs	r1, #0
 801401e:	69f8      	ldr	r0, [r7, #28]
 8014020:	f000 f9d2 	bl	80143c8 <ip4_output_if>
  }
  pbuf_free(q);
 8014024:	69f8      	ldr	r0, [r7, #28]
 8014026:	f7f8 faa3 	bl	800c570 <pbuf_free>
}
 801402a:	3720      	adds	r7, #32
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	08019ea0 	.word	0x08019ea0
 8014034:	08019d24 	.word	0x08019d24
 8014038:	08019ee0 	.word	0x08019ee0
 801403c:	08019d94 	.word	0x08019d94
 8014040:	08019f0c 	.word	0x08019f0c
 8014044:	08019f28 	.word	0x08019f28
 8014048:	08019f38 	.word	0x08019f38

0801404c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801404c:	b480      	push	{r7}
 801404e:	b085      	sub	sp, #20
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014054:	4b33      	ldr	r3, [pc, #204]	@ (8014124 <ip4_route+0xd8>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	60fb      	str	r3, [r7, #12]
 801405a:	e036      	b.n	80140ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014062:	f003 0301 	and.w	r3, r3, #1
 8014066:	b2db      	uxtb	r3, r3
 8014068:	2b00      	cmp	r3, #0
 801406a:	d02b      	beq.n	80140c4 <ip4_route+0x78>
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014072:	089b      	lsrs	r3, r3, #2
 8014074:	f003 0301 	and.w	r3, r3, #1
 8014078:	b2db      	uxtb	r3, r3
 801407a:	2b00      	cmp	r3, #0
 801407c:	d022      	beq.n	80140c4 <ip4_route+0x78>
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	3304      	adds	r3, #4
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d01d      	beq.n	80140c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681a      	ldr	r2, [r3, #0]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	3304      	adds	r3, #4
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	405a      	eors	r2, r3
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	3308      	adds	r3, #8
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	4013      	ands	r3, r2
 801409c:	2b00      	cmp	r3, #0
 801409e:	d101      	bne.n	80140a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	e038      	b.n	8014116 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80140aa:	f003 0302 	and.w	r3, r3, #2
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d108      	bne.n	80140c4 <ip4_route+0x78>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681a      	ldr	r2, [r3, #0]
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	330c      	adds	r3, #12
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	429a      	cmp	r2, r3
 80140be:	d101      	bne.n	80140c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	e028      	b.n	8014116 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	60fb      	str	r3, [r7, #12]
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d1c5      	bne.n	801405c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80140d0:	4b15      	ldr	r3, [pc, #84]	@ (8014128 <ip4_route+0xdc>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d01a      	beq.n	801410e <ip4_route+0xc2>
 80140d8:	4b13      	ldr	r3, [pc, #76]	@ (8014128 <ip4_route+0xdc>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80140e0:	f003 0301 	and.w	r3, r3, #1
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d012      	beq.n	801410e <ip4_route+0xc2>
 80140e8:	4b0f      	ldr	r3, [pc, #60]	@ (8014128 <ip4_route+0xdc>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80140f0:	f003 0304 	and.w	r3, r3, #4
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d00a      	beq.n	801410e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80140f8:	4b0b      	ldr	r3, [pc, #44]	@ (8014128 <ip4_route+0xdc>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	3304      	adds	r3, #4
 80140fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014100:	2b00      	cmp	r3, #0
 8014102:	d004      	beq.n	801410e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	b2db      	uxtb	r3, r3
 801410a:	2b7f      	cmp	r3, #127	@ 0x7f
 801410c:	d101      	bne.n	8014112 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801410e:	2300      	movs	r3, #0
 8014110:	e001      	b.n	8014116 <ip4_route+0xca>
  }

  return netif_default;
 8014112:	4b05      	ldr	r3, [pc, #20]	@ (8014128 <ip4_route+0xdc>)
 8014114:	681b      	ldr	r3, [r3, #0]
}
 8014116:	4618      	mov	r0, r3
 8014118:	3714      	adds	r7, #20
 801411a:	46bd      	mov	sp, r7
 801411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014120:	4770      	bx	lr
 8014122:	bf00      	nop
 8014124:	20008350 	.word	0x20008350
 8014128:	20008354 	.word	0x20008354

0801412c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801413a:	f003 0301 	and.w	r3, r3, #1
 801413e:	b2db      	uxtb	r3, r3
 8014140:	2b00      	cmp	r3, #0
 8014142:	d016      	beq.n	8014172 <ip4_input_accept+0x46>
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	3304      	adds	r3, #4
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d011      	beq.n	8014172 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801414e:	4b0b      	ldr	r3, [pc, #44]	@ (801417c <ip4_input_accept+0x50>)
 8014150:	695a      	ldr	r2, [r3, #20]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	3304      	adds	r3, #4
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	429a      	cmp	r2, r3
 801415a:	d008      	beq.n	801416e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801415c:	4b07      	ldr	r3, [pc, #28]	@ (801417c <ip4_input_accept+0x50>)
 801415e:	695b      	ldr	r3, [r3, #20]
 8014160:	6879      	ldr	r1, [r7, #4]
 8014162:	4618      	mov	r0, r3
 8014164:	f000 fa08 	bl	8014578 <ip4_addr_isbroadcast_u32>
 8014168:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801416a:	2b00      	cmp	r3, #0
 801416c:	d001      	beq.n	8014172 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801416e:	2301      	movs	r3, #1
 8014170:	e000      	b.n	8014174 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014172:	2300      	movs	r3, #0
}
 8014174:	4618      	mov	r0, r3
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	20005400 	.word	0x20005400

08014180 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b086      	sub	sp, #24
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
 8014188:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8014190:	693b      	ldr	r3, [r7, #16]
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	091b      	lsrs	r3, r3, #4
 8014196:	b2db      	uxtb	r3, r3
 8014198:	2b04      	cmp	r3, #4
 801419a:	d004      	beq.n	80141a6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7f8 f9e7 	bl	800c570 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80141a2:	2300      	movs	r3, #0
 80141a4:	e107      	b.n	80143b6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80141a6:	693b      	ldr	r3, [r7, #16]
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	f003 030f 	and.w	r3, r3, #15
 80141ae:	b2db      	uxtb	r3, r3
 80141b0:	009b      	lsls	r3, r3, #2
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	885b      	ldrh	r3, [r3, #2]
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	4618      	mov	r0, r3
 80141be:	f7f6 fd87 	bl	800acd0 <lwip_htons>
 80141c2:	4603      	mov	r3, r0
 80141c4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	891b      	ldrh	r3, [r3, #8]
 80141ca:	89ba      	ldrh	r2, [r7, #12]
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d204      	bcs.n	80141da <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80141d0:	89bb      	ldrh	r3, [r7, #12]
 80141d2:	4619      	mov	r1, r3
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7f8 f845 	bl	800c264 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	895b      	ldrh	r3, [r3, #10]
 80141de:	89fa      	ldrh	r2, [r7, #14]
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d807      	bhi.n	80141f4 <ip4_input+0x74>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	891b      	ldrh	r3, [r3, #8]
 80141e8:	89ba      	ldrh	r2, [r7, #12]
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d802      	bhi.n	80141f4 <ip4_input+0x74>
 80141ee:	89fb      	ldrh	r3, [r7, #14]
 80141f0:	2b13      	cmp	r3, #19
 80141f2:	d804      	bhi.n	80141fe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f7f8 f9bb 	bl	800c570 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80141fa:	2300      	movs	r3, #0
 80141fc:	e0db      	b.n	80143b6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80141fe:	693b      	ldr	r3, [r7, #16]
 8014200:	691b      	ldr	r3, [r3, #16]
 8014202:	4a6f      	ldr	r2, [pc, #444]	@ (80143c0 <ip4_input+0x240>)
 8014204:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	68db      	ldr	r3, [r3, #12]
 801420a:	4a6d      	ldr	r2, [pc, #436]	@ (80143c0 <ip4_input+0x240>)
 801420c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801420e:	4b6c      	ldr	r3, [pc, #432]	@ (80143c0 <ip4_input+0x240>)
 8014210:	695b      	ldr	r3, [r3, #20]
 8014212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014216:	2be0      	cmp	r3, #224	@ 0xe0
 8014218:	d112      	bne.n	8014240 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014220:	f003 0301 	and.w	r3, r3, #1
 8014224:	b2db      	uxtb	r3, r3
 8014226:	2b00      	cmp	r3, #0
 8014228:	d007      	beq.n	801423a <ip4_input+0xba>
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	3304      	adds	r3, #4
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d002      	beq.n	801423a <ip4_input+0xba>
      netif = inp;
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	617b      	str	r3, [r7, #20]
 8014238:	e02a      	b.n	8014290 <ip4_input+0x110>
    } else {
      netif = NULL;
 801423a:	2300      	movs	r3, #0
 801423c:	617b      	str	r3, [r7, #20]
 801423e:	e027      	b.n	8014290 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014240:	6838      	ldr	r0, [r7, #0]
 8014242:	f7ff ff73 	bl	801412c <ip4_input_accept>
 8014246:	4603      	mov	r3, r0
 8014248:	2b00      	cmp	r3, #0
 801424a:	d002      	beq.n	8014252 <ip4_input+0xd2>
      netif = inp;
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	617b      	str	r3, [r7, #20]
 8014250:	e01e      	b.n	8014290 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014252:	2300      	movs	r3, #0
 8014254:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014256:	4b5a      	ldr	r3, [pc, #360]	@ (80143c0 <ip4_input+0x240>)
 8014258:	695b      	ldr	r3, [r3, #20]
 801425a:	b2db      	uxtb	r3, r3
 801425c:	2b7f      	cmp	r3, #127	@ 0x7f
 801425e:	d017      	beq.n	8014290 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014260:	4b58      	ldr	r3, [pc, #352]	@ (80143c4 <ip4_input+0x244>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	617b      	str	r3, [r7, #20]
 8014266:	e00e      	b.n	8014286 <ip4_input+0x106>
          if (netif == inp) {
 8014268:	697a      	ldr	r2, [r7, #20]
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	429a      	cmp	r2, r3
 801426e:	d006      	beq.n	801427e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014270:	6978      	ldr	r0, [r7, #20]
 8014272:	f7ff ff5b 	bl	801412c <ip4_input_accept>
 8014276:	4603      	mov	r3, r0
 8014278:	2b00      	cmp	r3, #0
 801427a:	d108      	bne.n	801428e <ip4_input+0x10e>
 801427c:	e000      	b.n	8014280 <ip4_input+0x100>
            continue;
 801427e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	617b      	str	r3, [r7, #20]
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d1ed      	bne.n	8014268 <ip4_input+0xe8>
 801428c:	e000      	b.n	8014290 <ip4_input+0x110>
            break;
 801428e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014290:	4b4b      	ldr	r3, [pc, #300]	@ (80143c0 <ip4_input+0x240>)
 8014292:	691b      	ldr	r3, [r3, #16]
 8014294:	6839      	ldr	r1, [r7, #0]
 8014296:	4618      	mov	r0, r3
 8014298:	f000 f96e 	bl	8014578 <ip4_addr_isbroadcast_u32>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d105      	bne.n	80142ae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80142a2:	4b47      	ldr	r3, [pc, #284]	@ (80143c0 <ip4_input+0x240>)
 80142a4:	691b      	ldr	r3, [r3, #16]
 80142a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80142aa:	2be0      	cmp	r3, #224	@ 0xe0
 80142ac:	d104      	bne.n	80142b8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f7f8 f95e 	bl	800c570 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80142b4:	2300      	movs	r3, #0
 80142b6:	e07e      	b.n	80143b6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d104      	bne.n	80142c8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f7f8 f956 	bl	800c570 <pbuf_free>
    return ERR_OK;
 80142c4:	2300      	movs	r3, #0
 80142c6:	e076      	b.n	80143b6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	88db      	ldrh	r3, [r3, #6]
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	461a      	mov	r2, r3
 80142d0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80142d4:	4013      	ands	r3, r2
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d00b      	beq.n	80142f2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f000 fc92 	bl	8014c04 <ip4_reass>
 80142e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d101      	bne.n	80142ec <ip4_input+0x16c>
      return ERR_OK;
 80142e8:	2300      	movs	r3, #0
 80142ea:	e064      	b.n	80143b6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	685b      	ldr	r3, [r3, #4]
 80142f0:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80142f2:	4a33      	ldr	r2, [pc, #204]	@ (80143c0 <ip4_input+0x240>)
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80142f8:	4a31      	ldr	r2, [pc, #196]	@ (80143c0 <ip4_input+0x240>)
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80142fe:	4a30      	ldr	r2, [pc, #192]	@ (80143c0 <ip4_input+0x240>)
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	f003 030f 	and.w	r3, r3, #15
 801430c:	b2db      	uxtb	r3, r3
 801430e:	009b      	lsls	r3, r3, #2
 8014310:	b2db      	uxtb	r3, r3
 8014312:	461a      	mov	r2, r3
 8014314:	4b2a      	ldr	r3, [pc, #168]	@ (80143c0 <ip4_input+0x240>)
 8014316:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014318:	89fb      	ldrh	r3, [r7, #14]
 801431a:	4619      	mov	r1, r3
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f7f8 f8a1 	bl	800c464 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	7a5b      	ldrb	r3, [r3, #9]
 8014326:	2b11      	cmp	r3, #17
 8014328:	d006      	beq.n	8014338 <ip4_input+0x1b8>
 801432a:	2b11      	cmp	r3, #17
 801432c:	dc13      	bgt.n	8014356 <ip4_input+0x1d6>
 801432e:	2b01      	cmp	r3, #1
 8014330:	d00c      	beq.n	801434c <ip4_input+0x1cc>
 8014332:	2b06      	cmp	r3, #6
 8014334:	d005      	beq.n	8014342 <ip4_input+0x1c2>
 8014336:	e00e      	b.n	8014356 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014338:	6839      	ldr	r1, [r7, #0]
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f7fd ff20 	bl	8012180 <udp_input>
        break;
 8014340:	e026      	b.n	8014390 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014342:	6839      	ldr	r1, [r7, #0]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7f9 ff53 	bl	800e1f0 <tcp_input>
        break;
 801434a:	e021      	b.n	8014390 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801434c:	6839      	ldr	r1, [r7, #0]
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f7ff fc5c 	bl	8013c0c <icmp_input>
        break;
 8014354:	e01c      	b.n	8014390 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014356:	4b1a      	ldr	r3, [pc, #104]	@ (80143c0 <ip4_input+0x240>)
 8014358:	695b      	ldr	r3, [r3, #20]
 801435a:	6979      	ldr	r1, [r7, #20]
 801435c:	4618      	mov	r0, r3
 801435e:	f000 f90b 	bl	8014578 <ip4_addr_isbroadcast_u32>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d10f      	bne.n	8014388 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014368:	4b15      	ldr	r3, [pc, #84]	@ (80143c0 <ip4_input+0x240>)
 801436a:	695b      	ldr	r3, [r3, #20]
 801436c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014370:	2be0      	cmp	r3, #224	@ 0xe0
 8014372:	d009      	beq.n	8014388 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014378:	4619      	mov	r1, r3
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f7f8 f8e5 	bl	800c54a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014380:	2102      	movs	r1, #2
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f7ff fd98 	bl	8013eb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f7f8 f8f1 	bl	800c570 <pbuf_free>
        break;
 801438e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014390:	4b0b      	ldr	r3, [pc, #44]	@ (80143c0 <ip4_input+0x240>)
 8014392:	2200      	movs	r2, #0
 8014394:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014396:	4b0a      	ldr	r3, [pc, #40]	@ (80143c0 <ip4_input+0x240>)
 8014398:	2200      	movs	r2, #0
 801439a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801439c:	4b08      	ldr	r3, [pc, #32]	@ (80143c0 <ip4_input+0x240>)
 801439e:	2200      	movs	r2, #0
 80143a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80143a2:	4b07      	ldr	r3, [pc, #28]	@ (80143c0 <ip4_input+0x240>)
 80143a4:	2200      	movs	r2, #0
 80143a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80143a8:	4b05      	ldr	r3, [pc, #20]	@ (80143c0 <ip4_input+0x240>)
 80143aa:	2200      	movs	r2, #0
 80143ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80143ae:	4b04      	ldr	r3, [pc, #16]	@ (80143c0 <ip4_input+0x240>)
 80143b0:	2200      	movs	r2, #0
 80143b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80143b4:	2300      	movs	r3, #0
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3718      	adds	r7, #24
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	20005400 	.word	0x20005400
 80143c4:	20008350 	.word	0x20008350

080143c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b08a      	sub	sp, #40	@ 0x28
 80143cc:	af04      	add	r7, sp, #16
 80143ce:	60f8      	str	r0, [r7, #12]
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	607a      	str	r2, [r7, #4]
 80143d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d009      	beq.n	80143f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d003      	beq.n	80143ee <ip4_output_if+0x26>
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d102      	bne.n	80143f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80143ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f0:	3304      	adds	r3, #4
 80143f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80143f4:	78fa      	ldrb	r2, [r7, #3]
 80143f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f8:	9302      	str	r3, [sp, #8]
 80143fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80143fe:	9301      	str	r3, [sp, #4]
 8014400:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014404:	9300      	str	r3, [sp, #0]
 8014406:	4613      	mov	r3, r2
 8014408:	687a      	ldr	r2, [r7, #4]
 801440a:	6979      	ldr	r1, [r7, #20]
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f000 f805 	bl	801441c <ip4_output_if_src>
 8014412:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014414:	4618      	mov	r0, r3
 8014416:	3718      	adds	r7, #24
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b088      	sub	sp, #32
 8014420:	af00      	add	r7, sp, #0
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	60b9      	str	r1, [r7, #8]
 8014426:	607a      	str	r2, [r7, #4]
 8014428:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	7b9b      	ldrb	r3, [r3, #14]
 801442e:	2b01      	cmp	r3, #1
 8014430:	d006      	beq.n	8014440 <ip4_output_if_src+0x24>
 8014432:	4b4b      	ldr	r3, [pc, #300]	@ (8014560 <ip4_output_if_src+0x144>)
 8014434:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014438:	494a      	ldr	r1, [pc, #296]	@ (8014564 <ip4_output_if_src+0x148>)
 801443a:	484b      	ldr	r0, [pc, #300]	@ (8014568 <ip4_output_if_src+0x14c>)
 801443c:	f001 fd76 	bl	8015f2c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d060      	beq.n	8014508 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014446:	2314      	movs	r3, #20
 8014448:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801444a:	2114      	movs	r1, #20
 801444c:	68f8      	ldr	r0, [r7, #12]
 801444e:	f7f7 fff9 	bl	800c444 <pbuf_add_header>
 8014452:	4603      	mov	r3, r0
 8014454:	2b00      	cmp	r3, #0
 8014456:	d002      	beq.n	801445e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014458:	f06f 0301 	mvn.w	r3, #1
 801445c:	e07c      	b.n	8014558 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	685b      	ldr	r3, [r3, #4]
 8014462:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	895b      	ldrh	r3, [r3, #10]
 8014468:	2b13      	cmp	r3, #19
 801446a:	d806      	bhi.n	801447a <ip4_output_if_src+0x5e>
 801446c:	4b3c      	ldr	r3, [pc, #240]	@ (8014560 <ip4_output_if_src+0x144>)
 801446e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014472:	493e      	ldr	r1, [pc, #248]	@ (801456c <ip4_output_if_src+0x150>)
 8014474:	483c      	ldr	r0, [pc, #240]	@ (8014568 <ip4_output_if_src+0x14c>)
 8014476:	f001 fd59 	bl	8015f2c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	78fa      	ldrb	r2, [r7, #3]
 801447e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014486:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014490:	8b7b      	ldrh	r3, [r7, #26]
 8014492:	089b      	lsrs	r3, r3, #2
 8014494:	b29b      	uxth	r3, r3
 8014496:	b2db      	uxtb	r3, r3
 8014498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801449c:	b2da      	uxtb	r2, r3
 801449e:	69fb      	ldr	r3, [r7, #28]
 80144a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80144a2:	69fb      	ldr	r3, [r7, #28]
 80144a4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80144a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	891b      	ldrh	r3, [r3, #8]
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7f6 fc0e 	bl	800acd0 <lwip_htons>
 80144b4:	4603      	mov	r3, r0
 80144b6:	461a      	mov	r2, r3
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	2200      	movs	r2, #0
 80144c0:	719a      	strb	r2, [r3, #6]
 80144c2:	2200      	movs	r2, #0
 80144c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80144c6:	4b2a      	ldr	r3, [pc, #168]	@ (8014570 <ip4_output_if_src+0x154>)
 80144c8:	881b      	ldrh	r3, [r3, #0]
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7f6 fc00 	bl	800acd0 <lwip_htons>
 80144d0:	4603      	mov	r3, r0
 80144d2:	461a      	mov	r2, r3
 80144d4:	69fb      	ldr	r3, [r7, #28]
 80144d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80144d8:	4b25      	ldr	r3, [pc, #148]	@ (8014570 <ip4_output_if_src+0x154>)
 80144da:	881b      	ldrh	r3, [r3, #0]
 80144dc:	3301      	adds	r3, #1
 80144de:	b29a      	uxth	r2, r3
 80144e0:	4b23      	ldr	r3, [pc, #140]	@ (8014570 <ip4_output_if_src+0x154>)
 80144e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d104      	bne.n	80144f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80144ea:	4b22      	ldr	r3, [pc, #136]	@ (8014574 <ip4_output_if_src+0x158>)
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	69fb      	ldr	r3, [r7, #28]
 80144f0:	60da      	str	r2, [r3, #12]
 80144f2:	e003      	b.n	80144fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	681a      	ldr	r2, [r3, #0]
 80144f8:	69fb      	ldr	r3, [r7, #28]
 80144fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80144fc:	69fb      	ldr	r3, [r7, #28]
 80144fe:	2200      	movs	r2, #0
 8014500:	729a      	strb	r2, [r3, #10]
 8014502:	2200      	movs	r2, #0
 8014504:	72da      	strb	r2, [r3, #11]
 8014506:	e00f      	b.n	8014528 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	895b      	ldrh	r3, [r3, #10]
 801450c:	2b13      	cmp	r3, #19
 801450e:	d802      	bhi.n	8014516 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014510:	f06f 0301 	mvn.w	r3, #1
 8014514:	e020      	b.n	8014558 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801451c:	69fb      	ldr	r3, [r7, #28]
 801451e:	691b      	ldr	r3, [r3, #16]
 8014520:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014522:	f107 0314 	add.w	r3, r7, #20
 8014526:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801452a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801452c:	2b00      	cmp	r3, #0
 801452e:	d00c      	beq.n	801454a <ip4_output_if_src+0x12e>
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	891a      	ldrh	r2, [r3, #8]
 8014534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014536:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014538:	429a      	cmp	r2, r3
 801453a:	d906      	bls.n	801454a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014540:	68f8      	ldr	r0, [r7, #12]
 8014542:	f000 fd53 	bl	8014fec <ip4_frag>
 8014546:	4603      	mov	r3, r0
 8014548:	e006      	b.n	8014558 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801454c:	695b      	ldr	r3, [r3, #20]
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	68f9      	ldr	r1, [r7, #12]
 8014552:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014554:	4798      	blx	r3
 8014556:	4603      	mov	r3, r0
}
 8014558:	4618      	mov	r0, r3
 801455a:	3720      	adds	r7, #32
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	08019f40 	.word	0x08019f40
 8014564:	08019f74 	.word	0x08019f74
 8014568:	08019f80 	.word	0x08019f80
 801456c:	08019fa8 	.word	0x08019fa8
 8014570:	200084b2 	.word	0x200084b2
 8014574:	0801a570 	.word	0x0801a570

08014578 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014578:	b480      	push	{r7}
 801457a:	b085      	sub	sp, #20
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801458c:	d002      	beq.n	8014594 <ip4_addr_isbroadcast_u32+0x1c>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d101      	bne.n	8014598 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014594:	2301      	movs	r3, #1
 8014596:	e02a      	b.n	80145ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801459e:	f003 0302 	and.w	r3, r3, #2
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d101      	bne.n	80145aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80145a6:	2300      	movs	r3, #0
 80145a8:	e021      	b.n	80145ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	3304      	adds	r3, #4
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	687a      	ldr	r2, [r7, #4]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d101      	bne.n	80145ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80145b6:	2300      	movs	r3, #0
 80145b8:	e019      	b.n	80145ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80145ba:	68fa      	ldr	r2, [r7, #12]
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	3304      	adds	r3, #4
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	405a      	eors	r2, r3
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	3308      	adds	r3, #8
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4013      	ands	r3, r2
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d10d      	bne.n	80145ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	3308      	adds	r3, #8
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	43da      	mvns	r2, r3
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	3308      	adds	r3, #8
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d101      	bne.n	80145ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80145e8:	2301      	movs	r3, #1
 80145ea:	e000      	b.n	80145ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80145ec:	2300      	movs	r3, #0
  }
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3714      	adds	r7, #20
 80145f2:	46bd      	mov	sp, r7
 80145f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f8:	4770      	bx	lr
	...

080145fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014602:	2300      	movs	r3, #0
 8014604:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014606:	4b12      	ldr	r3, [pc, #72]	@ (8014650 <ip_reass_tmr+0x54>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801460c:	e018      	b.n	8014640 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	7fdb      	ldrb	r3, [r3, #31]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d00b      	beq.n	801462e <ip_reass_tmr+0x32>
      r->timer--;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	7fdb      	ldrb	r3, [r3, #31]
 801461a:	3b01      	subs	r3, #1
 801461c:	b2da      	uxtb	r2, r3
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	60fb      	str	r3, [r7, #12]
 801462c:	e008      	b.n	8014640 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014638:	68b9      	ldr	r1, [r7, #8]
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f000 f80a 	bl	8014654 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d1e3      	bne.n	801460e <ip_reass_tmr+0x12>
    }
  }
}
 8014646:	bf00      	nop
 8014648:	bf00      	nop
 801464a:	3710      	adds	r7, #16
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	200084b4 	.word	0x200084b4

08014654 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b088      	sub	sp, #32
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801465e:	2300      	movs	r3, #0
 8014660:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014662:	683a      	ldr	r2, [r7, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	429a      	cmp	r2, r3
 8014668:	d105      	bne.n	8014676 <ip_reass_free_complete_datagram+0x22>
 801466a:	4b45      	ldr	r3, [pc, #276]	@ (8014780 <ip_reass_free_complete_datagram+0x12c>)
 801466c:	22ab      	movs	r2, #171	@ 0xab
 801466e:	4945      	ldr	r1, [pc, #276]	@ (8014784 <ip_reass_free_complete_datagram+0x130>)
 8014670:	4845      	ldr	r0, [pc, #276]	@ (8014788 <ip_reass_free_complete_datagram+0x134>)
 8014672:	f001 fc5b 	bl	8015f2c <iprintf>
  if (prev != NULL) {
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d00a      	beq.n	8014692 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	429a      	cmp	r2, r3
 8014684:	d005      	beq.n	8014692 <ip_reass_free_complete_datagram+0x3e>
 8014686:	4b3e      	ldr	r3, [pc, #248]	@ (8014780 <ip_reass_free_complete_datagram+0x12c>)
 8014688:	22ad      	movs	r2, #173	@ 0xad
 801468a:	4940      	ldr	r1, [pc, #256]	@ (801478c <ip_reass_free_complete_datagram+0x138>)
 801468c:	483e      	ldr	r0, [pc, #248]	@ (8014788 <ip_reass_free_complete_datagram+0x134>)
 801468e:	f001 fc4d 	bl	8015f2c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	685b      	ldr	r3, [r3, #4]
 8014698:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	889b      	ldrh	r3, [r3, #4]
 801469e:	b29b      	uxth	r3, r3
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d12a      	bne.n	80146fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	6858      	ldr	r0, [r3, #4]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	3308      	adds	r3, #8
 80146ba:	2214      	movs	r2, #20
 80146bc:	4619      	mov	r1, r3
 80146be:	f001 fe0a 	bl	80162d6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80146c2:	2101      	movs	r1, #1
 80146c4:	69b8      	ldr	r0, [r7, #24]
 80146c6:	f7ff fc07 	bl	8013ed8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80146ca:	69b8      	ldr	r0, [r7, #24]
 80146cc:	f7f7 ffd8 	bl	800c680 <pbuf_clen>
 80146d0:	4603      	mov	r3, r0
 80146d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80146d4:	8bfa      	ldrh	r2, [r7, #30]
 80146d6:	8a7b      	ldrh	r3, [r7, #18]
 80146d8:	4413      	add	r3, r2
 80146da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80146de:	db05      	blt.n	80146ec <ip_reass_free_complete_datagram+0x98>
 80146e0:	4b27      	ldr	r3, [pc, #156]	@ (8014780 <ip_reass_free_complete_datagram+0x12c>)
 80146e2:	22bc      	movs	r2, #188	@ 0xbc
 80146e4:	492a      	ldr	r1, [pc, #168]	@ (8014790 <ip_reass_free_complete_datagram+0x13c>)
 80146e6:	4828      	ldr	r0, [pc, #160]	@ (8014788 <ip_reass_free_complete_datagram+0x134>)
 80146e8:	f001 fc20 	bl	8015f2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80146ec:	8bfa      	ldrh	r2, [r7, #30]
 80146ee:	8a7b      	ldrh	r3, [r7, #18]
 80146f0:	4413      	add	r3, r2
 80146f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80146f4:	69b8      	ldr	r0, [r7, #24]
 80146f6:	f7f7 ff3b 	bl	800c570 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014700:	e01f      	b.n	8014742 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014702:	69bb      	ldr	r3, [r7, #24]
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014712:	68f8      	ldr	r0, [r7, #12]
 8014714:	f7f7 ffb4 	bl	800c680 <pbuf_clen>
 8014718:	4603      	mov	r3, r0
 801471a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801471c:	8bfa      	ldrh	r2, [r7, #30]
 801471e:	8a7b      	ldrh	r3, [r7, #18]
 8014720:	4413      	add	r3, r2
 8014722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014726:	db05      	blt.n	8014734 <ip_reass_free_complete_datagram+0xe0>
 8014728:	4b15      	ldr	r3, [pc, #84]	@ (8014780 <ip_reass_free_complete_datagram+0x12c>)
 801472a:	22cc      	movs	r2, #204	@ 0xcc
 801472c:	4918      	ldr	r1, [pc, #96]	@ (8014790 <ip_reass_free_complete_datagram+0x13c>)
 801472e:	4816      	ldr	r0, [pc, #88]	@ (8014788 <ip_reass_free_complete_datagram+0x134>)
 8014730:	f001 fbfc 	bl	8015f2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014734:	8bfa      	ldrh	r2, [r7, #30]
 8014736:	8a7b      	ldrh	r3, [r7, #18]
 8014738:	4413      	add	r3, r2
 801473a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801473c:	68f8      	ldr	r0, [r7, #12]
 801473e:	f7f7 ff17 	bl	800c570 <pbuf_free>
  while (p != NULL) {
 8014742:	69bb      	ldr	r3, [r7, #24]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d1dc      	bne.n	8014702 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014748:	6839      	ldr	r1, [r7, #0]
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f000 f8c2 	bl	80148d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014750:	4b10      	ldr	r3, [pc, #64]	@ (8014794 <ip_reass_free_complete_datagram+0x140>)
 8014752:	881b      	ldrh	r3, [r3, #0]
 8014754:	8bfa      	ldrh	r2, [r7, #30]
 8014756:	429a      	cmp	r2, r3
 8014758:	d905      	bls.n	8014766 <ip_reass_free_complete_datagram+0x112>
 801475a:	4b09      	ldr	r3, [pc, #36]	@ (8014780 <ip_reass_free_complete_datagram+0x12c>)
 801475c:	22d2      	movs	r2, #210	@ 0xd2
 801475e:	490e      	ldr	r1, [pc, #56]	@ (8014798 <ip_reass_free_complete_datagram+0x144>)
 8014760:	4809      	ldr	r0, [pc, #36]	@ (8014788 <ip_reass_free_complete_datagram+0x134>)
 8014762:	f001 fbe3 	bl	8015f2c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014766:	4b0b      	ldr	r3, [pc, #44]	@ (8014794 <ip_reass_free_complete_datagram+0x140>)
 8014768:	881a      	ldrh	r2, [r3, #0]
 801476a:	8bfb      	ldrh	r3, [r7, #30]
 801476c:	1ad3      	subs	r3, r2, r3
 801476e:	b29a      	uxth	r2, r3
 8014770:	4b08      	ldr	r3, [pc, #32]	@ (8014794 <ip_reass_free_complete_datagram+0x140>)
 8014772:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014774:	8bfb      	ldrh	r3, [r7, #30]
}
 8014776:	4618      	mov	r0, r3
 8014778:	3720      	adds	r7, #32
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	08019fd8 	.word	0x08019fd8
 8014784:	0801a014 	.word	0x0801a014
 8014788:	0801a020 	.word	0x0801a020
 801478c:	0801a048 	.word	0x0801a048
 8014790:	0801a05c 	.word	0x0801a05c
 8014794:	200084b8 	.word	0x200084b8
 8014798:	0801a07c 	.word	0x0801a07c

0801479c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b08a      	sub	sp, #40	@ 0x28
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80147a6:	2300      	movs	r3, #0
 80147a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80147aa:	2300      	movs	r3, #0
 80147ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80147ae:	2300      	movs	r3, #0
 80147b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80147b2:	2300      	movs	r3, #0
 80147b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80147b6:	2300      	movs	r3, #0
 80147b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80147ba:	4b28      	ldr	r3, [pc, #160]	@ (801485c <ip_reass_remove_oldest_datagram+0xc0>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80147c0:	e030      	b.n	8014824 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80147c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147c4:	695a      	ldr	r2, [r3, #20]
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d10c      	bne.n	80147e8 <ip_reass_remove_oldest_datagram+0x4c>
 80147ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147d0:	699a      	ldr	r2, [r3, #24]
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	691b      	ldr	r3, [r3, #16]
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d106      	bne.n	80147e8 <ip_reass_remove_oldest_datagram+0x4c>
 80147da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147dc:	899a      	ldrh	r2, [r3, #12]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	889b      	ldrh	r3, [r3, #4]
 80147e2:	b29b      	uxth	r3, r3
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d014      	beq.n	8014812 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	3301      	adds	r3, #1
 80147ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80147ee:	6a3b      	ldr	r3, [r7, #32]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d104      	bne.n	80147fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80147f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80147f8:	69fb      	ldr	r3, [r7, #28]
 80147fa:	61bb      	str	r3, [r7, #24]
 80147fc:	e009      	b.n	8014812 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80147fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014800:	7fda      	ldrb	r2, [r3, #31]
 8014802:	6a3b      	ldr	r3, [r7, #32]
 8014804:	7fdb      	ldrb	r3, [r3, #31]
 8014806:	429a      	cmp	r2, r3
 8014808:	d803      	bhi.n	8014812 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801480c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d001      	beq.n	801481e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801481c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014826:	2b00      	cmp	r3, #0
 8014828:	d1cb      	bne.n	80147c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801482a:	6a3b      	ldr	r3, [r7, #32]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d008      	beq.n	8014842 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014830:	69b9      	ldr	r1, [r7, #24]
 8014832:	6a38      	ldr	r0, [r7, #32]
 8014834:	f7ff ff0e 	bl	8014654 <ip_reass_free_complete_datagram>
 8014838:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801483a:	697a      	ldr	r2, [r7, #20]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	4413      	add	r3, r2
 8014840:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014842:	697a      	ldr	r2, [r7, #20]
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	429a      	cmp	r2, r3
 8014848:	da02      	bge.n	8014850 <ip_reass_remove_oldest_datagram+0xb4>
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	2b01      	cmp	r3, #1
 801484e:	dcac      	bgt.n	80147aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014850:	697b      	ldr	r3, [r7, #20]
}
 8014852:	4618      	mov	r0, r3
 8014854:	3728      	adds	r7, #40	@ 0x28
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}
 801485a:	bf00      	nop
 801485c:	200084b4 	.word	0x200084b4

08014860 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801486a:	2004      	movs	r0, #4
 801486c:	f7f6 fea4 	bl	800b5b8 <memp_malloc>
 8014870:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d110      	bne.n	801489a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014878:	6839      	ldr	r1, [r7, #0]
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f7ff ff8e 	bl	801479c <ip_reass_remove_oldest_datagram>
 8014880:	4602      	mov	r2, r0
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	4293      	cmp	r3, r2
 8014886:	dc03      	bgt.n	8014890 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014888:	2004      	movs	r0, #4
 801488a:	f7f6 fe95 	bl	800b5b8 <memp_malloc>
 801488e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d101      	bne.n	801489a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014896:	2300      	movs	r3, #0
 8014898:	e016      	b.n	80148c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801489a:	2220      	movs	r2, #32
 801489c:	2100      	movs	r1, #0
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f001 fca4 	bl	80161ec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	220f      	movs	r2, #15
 80148a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80148aa:	4b09      	ldr	r3, [pc, #36]	@ (80148d0 <ip_reass_enqueue_new_datagram+0x70>)
 80148ac:	681a      	ldr	r2, [r3, #0]
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80148b2:	4a07      	ldr	r2, [pc, #28]	@ (80148d0 <ip_reass_enqueue_new_datagram+0x70>)
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	3308      	adds	r3, #8
 80148bc:	2214      	movs	r2, #20
 80148be:	6879      	ldr	r1, [r7, #4]
 80148c0:	4618      	mov	r0, r3
 80148c2:	f001 fd08 	bl	80162d6 <memcpy>
  return ipr;
 80148c6:	68fb      	ldr	r3, [r7, #12]
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3710      	adds	r7, #16
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	200084b4 	.word	0x200084b4

080148d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80148de:	4b10      	ldr	r3, [pc, #64]	@ (8014920 <ip_reass_dequeue_datagram+0x4c>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	687a      	ldr	r2, [r7, #4]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d104      	bne.n	80148f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	4a0c      	ldr	r2, [pc, #48]	@ (8014920 <ip_reass_dequeue_datagram+0x4c>)
 80148ee:	6013      	str	r3, [r2, #0]
 80148f0:	e00d      	b.n	801490e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d106      	bne.n	8014906 <ip_reass_dequeue_datagram+0x32>
 80148f8:	4b0a      	ldr	r3, [pc, #40]	@ (8014924 <ip_reass_dequeue_datagram+0x50>)
 80148fa:	f240 1245 	movw	r2, #325	@ 0x145
 80148fe:	490a      	ldr	r1, [pc, #40]	@ (8014928 <ip_reass_dequeue_datagram+0x54>)
 8014900:	480a      	ldr	r0, [pc, #40]	@ (801492c <ip_reass_dequeue_datagram+0x58>)
 8014902:	f001 fb13 	bl	8015f2c <iprintf>
    prev->next = ipr->next;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681a      	ldr	r2, [r3, #0]
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801490e:	6879      	ldr	r1, [r7, #4]
 8014910:	2004      	movs	r0, #4
 8014912:	f7f6 fec1 	bl	800b698 <memp_free>
}
 8014916:	bf00      	nop
 8014918:	3708      	adds	r7, #8
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
 801491e:	bf00      	nop
 8014920:	200084b4 	.word	0x200084b4
 8014924:	08019fd8 	.word	0x08019fd8
 8014928:	0801a0a0 	.word	0x0801a0a0
 801492c:	0801a020 	.word	0x0801a020

08014930 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b08c      	sub	sp, #48	@ 0x30
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801493c:	2300      	movs	r3, #0
 801493e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014940:	2301      	movs	r3, #1
 8014942:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	685b      	ldr	r3, [r3, #4]
 8014948:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801494a:	69fb      	ldr	r3, [r7, #28]
 801494c:	885b      	ldrh	r3, [r3, #2]
 801494e:	b29b      	uxth	r3, r3
 8014950:	4618      	mov	r0, r3
 8014952:	f7f6 f9bd 	bl	800acd0 <lwip_htons>
 8014956:	4603      	mov	r3, r0
 8014958:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801495a:	69fb      	ldr	r3, [r7, #28]
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	f003 030f 	and.w	r3, r3, #15
 8014962:	b2db      	uxtb	r3, r3
 8014964:	009b      	lsls	r3, r3, #2
 8014966:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014968:	7e7b      	ldrb	r3, [r7, #25]
 801496a:	b29b      	uxth	r3, r3
 801496c:	8b7a      	ldrh	r2, [r7, #26]
 801496e:	429a      	cmp	r2, r3
 8014970:	d202      	bcs.n	8014978 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014976:	e135      	b.n	8014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014978:	7e7b      	ldrb	r3, [r7, #25]
 801497a:	b29b      	uxth	r3, r3
 801497c:	8b7a      	ldrh	r2, [r7, #26]
 801497e:	1ad3      	subs	r3, r2, r3
 8014980:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	88db      	ldrh	r3, [r3, #6]
 8014986:	b29b      	uxth	r3, r3
 8014988:	4618      	mov	r0, r3
 801498a:	f7f6 f9a1 	bl	800acd0 <lwip_htons>
 801498e:	4603      	mov	r3, r0
 8014990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014994:	b29b      	uxth	r3, r3
 8014996:	00db      	lsls	r3, r3, #3
 8014998:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80149a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149a2:	2200      	movs	r2, #0
 80149a4:	701a      	strb	r2, [r3, #0]
 80149a6:	2200      	movs	r2, #0
 80149a8:	705a      	strb	r2, [r3, #1]
 80149aa:	2200      	movs	r2, #0
 80149ac:	709a      	strb	r2, [r3, #2]
 80149ae:	2200      	movs	r2, #0
 80149b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80149b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149b4:	8afa      	ldrh	r2, [r7, #22]
 80149b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80149b8:	8afa      	ldrh	r2, [r7, #22]
 80149ba:	8b7b      	ldrh	r3, [r7, #26]
 80149bc:	4413      	add	r3, r2
 80149be:	b29a      	uxth	r2, r3
 80149c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80149c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149c6:	88db      	ldrh	r3, [r3, #6]
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	8afa      	ldrh	r2, [r7, #22]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d902      	bls.n	80149d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80149d4:	e106      	b.n	8014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	627b      	str	r3, [r7, #36]	@ 0x24
 80149dc:	e068      	b.n	8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80149de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80149e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149e6:	889b      	ldrh	r3, [r3, #4]
 80149e8:	b29a      	uxth	r2, r3
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	889b      	ldrh	r3, [r3, #4]
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d235      	bcs.n	8014a60 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80149f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80149f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80149fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d020      	beq.n	8014a42 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a02:	889b      	ldrh	r3, [r3, #4]
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a08:	88db      	ldrh	r3, [r3, #6]
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d307      	bcc.n	8014a20 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a12:	88db      	ldrh	r3, [r3, #6]
 8014a14:	b29a      	uxth	r2, r3
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	889b      	ldrh	r3, [r3, #4]
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d902      	bls.n	8014a26 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014a24:	e0de      	b.n	8014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a28:	68ba      	ldr	r2, [r7, #8]
 8014a2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a2e:	88db      	ldrh	r3, [r3, #6]
 8014a30:	b29a      	uxth	r2, r3
 8014a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a34:	889b      	ldrh	r3, [r3, #4]
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	d03d      	beq.n	8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014a40:	e03a      	b.n	8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a44:	88db      	ldrh	r3, [r3, #6]
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	889b      	ldrh	r3, [r3, #4]
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d902      	bls.n	8014a58 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014a56:	e0c5      	b.n	8014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	68ba      	ldr	r2, [r7, #8]
 8014a5c:	605a      	str	r2, [r3, #4]
      break;
 8014a5e:	e02b      	b.n	8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a62:	889b      	ldrh	r3, [r3, #4]
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	693b      	ldr	r3, [r7, #16]
 8014a68:	889b      	ldrh	r3, [r3, #4]
 8014a6a:	b29b      	uxth	r3, r3
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d102      	bne.n	8014a76 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014a74:	e0b6      	b.n	8014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a78:	889b      	ldrh	r3, [r3, #4]
 8014a7a:	b29a      	uxth	r2, r3
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	88db      	ldrh	r3, [r3, #6]
 8014a80:	b29b      	uxth	r3, r3
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d202      	bcs.n	8014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014a8a:	e0ab      	b.n	8014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d009      	beq.n	8014aa6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a94:	88db      	ldrh	r3, [r3, #6]
 8014a96:	b29a      	uxth	r2, r3
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	889b      	ldrh	r3, [r3, #4]
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d001      	beq.n	8014aa6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8014ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d193      	bne.n	80149de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014ab6:	e000      	b.n	8014aba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014ab8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d12d      	bne.n	8014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d01c      	beq.n	8014b00 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ac8:	88db      	ldrh	r3, [r3, #6]
 8014aca:	b29a      	uxth	r2, r3
 8014acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ace:	889b      	ldrh	r3, [r3, #4]
 8014ad0:	b29b      	uxth	r3, r3
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d906      	bls.n	8014ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014ad6:	4b45      	ldr	r3, [pc, #276]	@ (8014bec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ad8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8014adc:	4944      	ldr	r1, [pc, #272]	@ (8014bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014ade:	4845      	ldr	r0, [pc, #276]	@ (8014bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014ae0:	f001 fa24 	bl	8015f2c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ae6:	68ba      	ldr	r2, [r7, #8]
 8014ae8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aec:	88db      	ldrh	r3, [r3, #6]
 8014aee:	b29a      	uxth	r2, r3
 8014af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014af2:	889b      	ldrh	r3, [r3, #4]
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d010      	beq.n	8014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014afa:	2300      	movs	r3, #0
 8014afc:	623b      	str	r3, [r7, #32]
 8014afe:	e00d      	b.n	8014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d006      	beq.n	8014b16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014b08:	4b38      	ldr	r3, [pc, #224]	@ (8014bec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b0a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8014b0e:	493a      	ldr	r1, [pc, #232]	@ (8014bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014b10:	4838      	ldr	r0, [pc, #224]	@ (8014bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b12:	f001 fa0b 	bl	8015f2c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	68ba      	ldr	r2, [r7, #8]
 8014b1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d105      	bne.n	8014b2e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	7f9b      	ldrb	r3, [r3, #30]
 8014b26:	f003 0301 	and.w	r3, r3, #1
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d059      	beq.n	8014be2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014b2e:	6a3b      	ldr	r3, [r7, #32]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d04f      	beq.n	8014bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d006      	beq.n	8014b4a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	889b      	ldrh	r3, [r3, #4]
 8014b44:	b29b      	uxth	r3, r3
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d002      	beq.n	8014b50 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	623b      	str	r3, [r7, #32]
 8014b4e:	e041      	b.n	8014bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b52:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014b5a:	e012      	b.n	8014b82 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8014b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b64:	88db      	ldrh	r3, [r3, #6]
 8014b66:	b29a      	uxth	r2, r3
 8014b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b6a:	889b      	ldrh	r3, [r3, #4]
 8014b6c:	b29b      	uxth	r3, r3
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d002      	beq.n	8014b78 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014b72:	2300      	movs	r3, #0
 8014b74:	623b      	str	r3, [r7, #32]
            break;
 8014b76:	e007      	b.n	8014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d1e9      	bne.n	8014b5c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014b88:	6a3b      	ldr	r3, [r7, #32]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d022      	beq.n	8014bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d106      	bne.n	8014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014b96:	4b15      	ldr	r3, [pc, #84]	@ (8014bec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b98:	f240 12df 	movw	r2, #479	@ 0x1df
 8014b9c:	4917      	ldr	r1, [pc, #92]	@ (8014bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b9e:	4815      	ldr	r0, [pc, #84]	@ (8014bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014ba0:	f001 f9c4 	bl	8015f2c <iprintf>
          LWIP_ASSERT("sanity check",
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	685b      	ldr	r3, [r3, #4]
 8014baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d106      	bne.n	8014bbe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8014bec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014bb2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8014bb6:	4911      	ldr	r1, [pc, #68]	@ (8014bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014bb8:	480e      	ldr	r0, [pc, #56]	@ (8014bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014bba:	f001 f9b7 	bl	8015f2c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d006      	beq.n	8014bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014bc6:	4b09      	ldr	r3, [pc, #36]	@ (8014bec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014bc8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8014bcc:	490c      	ldr	r1, [pc, #48]	@ (8014c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014bce:	4809      	ldr	r0, [pc, #36]	@ (8014bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014bd0:	f001 f9ac 	bl	8015f2c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014bd4:	6a3b      	ldr	r3, [r7, #32]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	bf14      	ite	ne
 8014bda:	2301      	movne	r3, #1
 8014bdc:	2300      	moveq	r3, #0
 8014bde:	b2db      	uxtb	r3, r3
 8014be0:	e000      	b.n	8014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014be2:	2300      	movs	r3, #0
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	3730      	adds	r7, #48	@ 0x30
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	08019fd8 	.word	0x08019fd8
 8014bf0:	0801a0bc 	.word	0x0801a0bc
 8014bf4:	0801a020 	.word	0x0801a020
 8014bf8:	0801a0dc 	.word	0x0801a0dc
 8014bfc:	0801a114 	.word	0x0801a114
 8014c00:	0801a124 	.word	0x0801a124

08014c04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b08e      	sub	sp, #56	@ 0x38
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	685b      	ldr	r3, [r3, #4]
 8014c10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	f003 030f 	and.w	r3, r3, #15
 8014c1a:	b2db      	uxtb	r3, r3
 8014c1c:	009b      	lsls	r3, r3, #2
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	2b14      	cmp	r3, #20
 8014c22:	f040 8171 	bne.w	8014f08 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c28:	88db      	ldrh	r3, [r3, #6]
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7f6 f84f 	bl	800acd0 <lwip_htons>
 8014c32:	4603      	mov	r3, r0
 8014c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014c38:	b29b      	uxth	r3, r3
 8014c3a:	00db      	lsls	r3, r3, #3
 8014c3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c40:	885b      	ldrh	r3, [r3, #2]
 8014c42:	b29b      	uxth	r3, r3
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7f6 f843 	bl	800acd0 <lwip_htons>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c50:	781b      	ldrb	r3, [r3, #0]
 8014c52:	f003 030f 	and.w	r3, r3, #15
 8014c56:	b2db      	uxtb	r3, r3
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8014c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014c62:	b29b      	uxth	r3, r3
 8014c64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014c66:	429a      	cmp	r2, r3
 8014c68:	f0c0 8150 	bcc.w	8014f0c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014c74:	1ad3      	subs	r3, r2, r3
 8014c76:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f7f7 fd01 	bl	800c680 <pbuf_clen>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014c82:	4b8c      	ldr	r3, [pc, #560]	@ (8014eb4 <ip4_reass+0x2b0>)
 8014c84:	881b      	ldrh	r3, [r3, #0]
 8014c86:	461a      	mov	r2, r3
 8014c88:	8c3b      	ldrh	r3, [r7, #32]
 8014c8a:	4413      	add	r3, r2
 8014c8c:	2b0a      	cmp	r3, #10
 8014c8e:	dd10      	ble.n	8014cb2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c90:	8c3b      	ldrh	r3, [r7, #32]
 8014c92:	4619      	mov	r1, r3
 8014c94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014c96:	f7ff fd81 	bl	801479c <ip_reass_remove_oldest_datagram>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	f000 8137 	beq.w	8014f10 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014ca2:	4b84      	ldr	r3, [pc, #528]	@ (8014eb4 <ip4_reass+0x2b0>)
 8014ca4:	881b      	ldrh	r3, [r3, #0]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	8c3b      	ldrh	r3, [r7, #32]
 8014caa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014cac:	2b0a      	cmp	r3, #10
 8014cae:	f300 812f 	bgt.w	8014f10 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014cb2:	4b81      	ldr	r3, [pc, #516]	@ (8014eb8 <ip4_reass+0x2b4>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8014cb8:	e015      	b.n	8014ce6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cbc:	695a      	ldr	r2, [r3, #20]
 8014cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cc0:	68db      	ldr	r3, [r3, #12]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d10c      	bne.n	8014ce0 <ip4_reass+0xdc>
 8014cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc8:	699a      	ldr	r2, [r3, #24]
 8014cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ccc:	691b      	ldr	r3, [r3, #16]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d106      	bne.n	8014ce0 <ip4_reass+0xdc>
 8014cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cd4:	899a      	ldrh	r2, [r3, #12]
 8014cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cd8:	889b      	ldrh	r3, [r3, #4]
 8014cda:	b29b      	uxth	r3, r3
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d006      	beq.n	8014cee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8014ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d1e6      	bne.n	8014cba <ip4_reass+0xb6>
 8014cec:	e000      	b.n	8014cf0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014cee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d109      	bne.n	8014d0a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014cf6:	8c3b      	ldrh	r3, [r7, #32]
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014cfc:	f7ff fdb0 	bl	8014860 <ip_reass_enqueue_new_datagram>
 8014d00:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d11c      	bne.n	8014d42 <ip4_reass+0x13e>
      goto nullreturn;
 8014d08:	e105      	b.n	8014f16 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d0c:	88db      	ldrh	r3, [r3, #6]
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	4618      	mov	r0, r3
 8014d12:	f7f5 ffdd 	bl	800acd0 <lwip_htons>
 8014d16:	4603      	mov	r3, r0
 8014d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d110      	bne.n	8014d42 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d22:	89db      	ldrh	r3, [r3, #14]
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7f5 ffd3 	bl	800acd0 <lwip_htons>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d006      	beq.n	8014d42 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d36:	3308      	adds	r3, #8
 8014d38:	2214      	movs	r2, #20
 8014d3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f001 faca 	bl	80162d6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d44:	88db      	ldrh	r3, [r3, #6]
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	f003 0320 	and.w	r3, r3, #32
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	bf0c      	ite	eq
 8014d50:	2301      	moveq	r3, #1
 8014d52:	2300      	movne	r3, #0
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014d58:	69fb      	ldr	r3, [r7, #28]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d00e      	beq.n	8014d7c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014d5e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014d60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d62:	4413      	add	r3, r2
 8014d64:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014d66:	8b7a      	ldrh	r2, [r7, #26]
 8014d68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	f0c0 80a0 	bcc.w	8014eb0 <ip4_reass+0x2ac>
 8014d70:	8b7b      	ldrh	r3, [r7, #26]
 8014d72:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014d76:	4293      	cmp	r3, r2
 8014d78:	f200 809a 	bhi.w	8014eb0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014d7c:	69fa      	ldr	r2, [r7, #28]
 8014d7e:	6879      	ldr	r1, [r7, #4]
 8014d80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d82:	f7ff fdd5 	bl	8014930 <ip_reass_chain_frag_into_datagram_and_validate>
 8014d86:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014d8e:	f000 809b 	beq.w	8014ec8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014d92:	4b48      	ldr	r3, [pc, #288]	@ (8014eb4 <ip4_reass+0x2b0>)
 8014d94:	881a      	ldrh	r2, [r3, #0]
 8014d96:	8c3b      	ldrh	r3, [r7, #32]
 8014d98:	4413      	add	r3, r2
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	4b45      	ldr	r3, [pc, #276]	@ (8014eb4 <ip4_reass+0x2b0>)
 8014d9e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014da0:	69fb      	ldr	r3, [r7, #28]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d00d      	beq.n	8014dc2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014da6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014da8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014daa:	4413      	add	r3, r2
 8014dac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014db0:	8a7a      	ldrh	r2, [r7, #18]
 8014db2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014db6:	7f9b      	ldrb	r3, [r3, #30]
 8014db8:	f043 0301 	orr.w	r3, r3, #1
 8014dbc:	b2da      	uxtb	r2, r3
 8014dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dc0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d171      	bne.n	8014eac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dca:	8b9b      	ldrh	r3, [r3, #28]
 8014dcc:	3314      	adds	r3, #20
 8014dce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ddc:	685b      	ldr	r3, [r3, #4]
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de4:	3308      	adds	r3, #8
 8014de6:	2214      	movs	r2, #20
 8014de8:	4619      	mov	r1, r3
 8014dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014dec:	f001 fa73 	bl	80162d6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014df0:	8a3b      	ldrh	r3, [r7, #16]
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7f5 ff6c 	bl	800acd0 <lwip_htons>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014dfe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e02:	2200      	movs	r2, #0
 8014e04:	719a      	strb	r2, [r3, #6]
 8014e06:	2200      	movs	r2, #0
 8014e08:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	729a      	strb	r2, [r3, #10]
 8014e10:	2200      	movs	r2, #0
 8014e12:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e16:	685b      	ldr	r3, [r3, #4]
 8014e18:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014e1a:	e00d      	b.n	8014e38 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e1e:	685b      	ldr	r3, [r3, #4]
 8014e20:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014e22:	2114      	movs	r1, #20
 8014e24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e26:	f7f7 fb1d 	bl	800c464 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f7f7 fc61 	bl	800c6f4 <pbuf_cat>
      r = iprh->next_pbuf;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8014e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d1ee      	bne.n	8014e1c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8014eb8 <ip4_reass+0x2b4>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e44:	429a      	cmp	r2, r3
 8014e46:	d102      	bne.n	8014e4e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014e4c:	e010      	b.n	8014e70 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8014eb8 <ip4_reass+0x2b4>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8014e54:	e007      	b.n	8014e66 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d006      	beq.n	8014e6e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8014e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d1f4      	bne.n	8014e56 <ip4_reass+0x252>
 8014e6c:	e000      	b.n	8014e70 <ip4_reass+0x26c>
          break;
 8014e6e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014e70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014e72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e74:	f7ff fd2e 	bl	80148d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f7f7 fc01 	bl	800c680 <pbuf_clen>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014e82:	4b0c      	ldr	r3, [pc, #48]	@ (8014eb4 <ip4_reass+0x2b0>)
 8014e84:	881b      	ldrh	r3, [r3, #0]
 8014e86:	8c3a      	ldrh	r2, [r7, #32]
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d906      	bls.n	8014e9a <ip4_reass+0x296>
 8014e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8014ebc <ip4_reass+0x2b8>)
 8014e8e:	f240 229b 	movw	r2, #667	@ 0x29b
 8014e92:	490b      	ldr	r1, [pc, #44]	@ (8014ec0 <ip4_reass+0x2bc>)
 8014e94:	480b      	ldr	r0, [pc, #44]	@ (8014ec4 <ip4_reass+0x2c0>)
 8014e96:	f001 f849 	bl	8015f2c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014e9a:	4b06      	ldr	r3, [pc, #24]	@ (8014eb4 <ip4_reass+0x2b0>)
 8014e9c:	881a      	ldrh	r2, [r3, #0]
 8014e9e:	8c3b      	ldrh	r3, [r7, #32]
 8014ea0:	1ad3      	subs	r3, r2, r3
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	4b03      	ldr	r3, [pc, #12]	@ (8014eb4 <ip4_reass+0x2b0>)
 8014ea6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	e038      	b.n	8014f1e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014eac:	2300      	movs	r3, #0
 8014eae:	e036      	b.n	8014f1e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014eb0:	bf00      	nop
 8014eb2:	e00a      	b.n	8014eca <ip4_reass+0x2c6>
 8014eb4:	200084b8 	.word	0x200084b8
 8014eb8:	200084b4 	.word	0x200084b4
 8014ebc:	08019fd8 	.word	0x08019fd8
 8014ec0:	0801a148 	.word	0x0801a148
 8014ec4:	0801a020 	.word	0x0801a020
    goto nullreturn_ipr;
 8014ec8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d106      	bne.n	8014ede <ip4_reass+0x2da>
 8014ed0:	4b15      	ldr	r3, [pc, #84]	@ (8014f28 <ip4_reass+0x324>)
 8014ed2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8014ed6:	4915      	ldr	r1, [pc, #84]	@ (8014f2c <ip4_reass+0x328>)
 8014ed8:	4815      	ldr	r0, [pc, #84]	@ (8014f30 <ip4_reass+0x32c>)
 8014eda:	f001 f827 	bl	8015f2c <iprintf>
  if (ipr->p == NULL) {
 8014ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d116      	bne.n	8014f14 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014ee6:	4b13      	ldr	r3, [pc, #76]	@ (8014f34 <ip4_reass+0x330>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d006      	beq.n	8014efe <ip4_reass+0x2fa>
 8014ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8014f28 <ip4_reass+0x324>)
 8014ef2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014ef6:	4910      	ldr	r1, [pc, #64]	@ (8014f38 <ip4_reass+0x334>)
 8014ef8:	480d      	ldr	r0, [pc, #52]	@ (8014f30 <ip4_reass+0x32c>)
 8014efa:	f001 f817 	bl	8015f2c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014efe:	2100      	movs	r1, #0
 8014f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f02:	f7ff fce7 	bl	80148d4 <ip_reass_dequeue_datagram>
 8014f06:	e006      	b.n	8014f16 <ip4_reass+0x312>
    goto nullreturn;
 8014f08:	bf00      	nop
 8014f0a:	e004      	b.n	8014f16 <ip4_reass+0x312>
    goto nullreturn;
 8014f0c:	bf00      	nop
 8014f0e:	e002      	b.n	8014f16 <ip4_reass+0x312>
      goto nullreturn;
 8014f10:	bf00      	nop
 8014f12:	e000      	b.n	8014f16 <ip4_reass+0x312>
  }

nullreturn:
 8014f14:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7f7 fb2a 	bl	800c570 <pbuf_free>
  return NULL;
 8014f1c:	2300      	movs	r3, #0
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3738      	adds	r7, #56	@ 0x38
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	08019fd8 	.word	0x08019fd8
 8014f2c:	0801a164 	.word	0x0801a164
 8014f30:	0801a020 	.word	0x0801a020
 8014f34:	200084b4 	.word	0x200084b4
 8014f38:	0801a170 	.word	0x0801a170

08014f3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014f40:	2005      	movs	r0, #5
 8014f42:	f7f6 fb39 	bl	800b5b8 <memp_malloc>
 8014f46:	4603      	mov	r3, r0
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b082      	sub	sp, #8
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d106      	bne.n	8014f68 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014f5a:	4b07      	ldr	r3, [pc, #28]	@ (8014f78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014f5c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014f60:	4906      	ldr	r1, [pc, #24]	@ (8014f7c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014f62:	4807      	ldr	r0, [pc, #28]	@ (8014f80 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014f64:	f000 ffe2 	bl	8015f2c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014f68:	6879      	ldr	r1, [r7, #4]
 8014f6a:	2005      	movs	r0, #5
 8014f6c:	f7f6 fb94 	bl	800b698 <memp_free>
}
 8014f70:	bf00      	nop
 8014f72:	3708      	adds	r7, #8
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	08019fd8 	.word	0x08019fd8
 8014f7c:	0801a190 	.word	0x0801a190
 8014f80:	0801a020 	.word	0x0801a020

08014f84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d106      	bne.n	8014fa4 <ipfrag_free_pbuf_custom+0x20>
 8014f96:	4b11      	ldr	r3, [pc, #68]	@ (8014fdc <ipfrag_free_pbuf_custom+0x58>)
 8014f98:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014f9c:	4910      	ldr	r1, [pc, #64]	@ (8014fe0 <ipfrag_free_pbuf_custom+0x5c>)
 8014f9e:	4811      	ldr	r0, [pc, #68]	@ (8014fe4 <ipfrag_free_pbuf_custom+0x60>)
 8014fa0:	f000 ffc4 	bl	8015f2c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014fa4:	68fa      	ldr	r2, [r7, #12]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d006      	beq.n	8014fba <ipfrag_free_pbuf_custom+0x36>
 8014fac:	4b0b      	ldr	r3, [pc, #44]	@ (8014fdc <ipfrag_free_pbuf_custom+0x58>)
 8014fae:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014fb2:	490d      	ldr	r1, [pc, #52]	@ (8014fe8 <ipfrag_free_pbuf_custom+0x64>)
 8014fb4:	480b      	ldr	r0, [pc, #44]	@ (8014fe4 <ipfrag_free_pbuf_custom+0x60>)
 8014fb6:	f000 ffb9 	bl	8015f2c <iprintf>
  if (pcr->original != NULL) {
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	695b      	ldr	r3, [r3, #20]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d004      	beq.n	8014fcc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	695b      	ldr	r3, [r3, #20]
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7f7 fad2 	bl	800c570 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014fcc:	68f8      	ldr	r0, [r7, #12]
 8014fce:	f7ff ffbd 	bl	8014f4c <ip_frag_free_pbuf_custom_ref>
}
 8014fd2:	bf00      	nop
 8014fd4:	3710      	adds	r7, #16
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	08019fd8 	.word	0x08019fd8
 8014fe0:	0801a19c 	.word	0x0801a19c
 8014fe4:	0801a020 	.word	0x0801a020
 8014fe8:	0801a1a8 	.word	0x0801a1a8

08014fec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b094      	sub	sp, #80	@ 0x50
 8014ff0:	af02      	add	r7, sp, #8
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	60b9      	str	r1, [r7, #8]
 8014ff6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015002:	3b14      	subs	r3, #20
 8015004:	2b00      	cmp	r3, #0
 8015006:	da00      	bge.n	801500a <ip4_frag+0x1e>
 8015008:	3307      	adds	r3, #7
 801500a:	10db      	asrs	r3, r3, #3
 801500c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801500e:	2314      	movs	r3, #20
 8015010:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801501a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801501c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801501e:	781b      	ldrb	r3, [r3, #0]
 8015020:	f003 030f 	and.w	r3, r3, #15
 8015024:	b2db      	uxtb	r3, r3
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	b2db      	uxtb	r3, r3
 801502a:	2b14      	cmp	r3, #20
 801502c:	d002      	beq.n	8015034 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801502e:	f06f 0305 	mvn.w	r3, #5
 8015032:	e110      	b.n	8015256 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	895b      	ldrh	r3, [r3, #10]
 8015038:	2b13      	cmp	r3, #19
 801503a:	d809      	bhi.n	8015050 <ip4_frag+0x64>
 801503c:	4b88      	ldr	r3, [pc, #544]	@ (8015260 <ip4_frag+0x274>)
 801503e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015042:	4988      	ldr	r1, [pc, #544]	@ (8015264 <ip4_frag+0x278>)
 8015044:	4888      	ldr	r0, [pc, #544]	@ (8015268 <ip4_frag+0x27c>)
 8015046:	f000 ff71 	bl	8015f2c <iprintf>
 801504a:	f06f 0305 	mvn.w	r3, #5
 801504e:	e102      	b.n	8015256 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015052:	88db      	ldrh	r3, [r3, #6]
 8015054:	b29b      	uxth	r3, r3
 8015056:	4618      	mov	r0, r3
 8015058:	f7f5 fe3a 	bl	800acd0 <lwip_htons>
 801505c:	4603      	mov	r3, r0
 801505e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015060:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015062:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015066:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801506a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801506c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015070:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	891b      	ldrh	r3, [r3, #8]
 8015076:	3b14      	subs	r3, #20
 8015078:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801507c:	e0e1      	b.n	8015242 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801507e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015080:	00db      	lsls	r3, r3, #3
 8015082:	b29b      	uxth	r3, r3
 8015084:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015088:	4293      	cmp	r3, r2
 801508a:	bf28      	it	cs
 801508c:	4613      	movcs	r3, r2
 801508e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015090:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015094:	2114      	movs	r1, #20
 8015096:	200e      	movs	r0, #14
 8015098:	f7f6 ff86 	bl	800bfa8 <pbuf_alloc>
 801509c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	f000 80d5 	beq.w	8015250 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80150a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a8:	895b      	ldrh	r3, [r3, #10]
 80150aa:	2b13      	cmp	r3, #19
 80150ac:	d806      	bhi.n	80150bc <ip4_frag+0xd0>
 80150ae:	4b6c      	ldr	r3, [pc, #432]	@ (8015260 <ip4_frag+0x274>)
 80150b0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80150b4:	496d      	ldr	r1, [pc, #436]	@ (801526c <ip4_frag+0x280>)
 80150b6:	486c      	ldr	r0, [pc, #432]	@ (8015268 <ip4_frag+0x27c>)
 80150b8:	f000 ff38 	bl	8015f2c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80150bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	2214      	movs	r2, #20
 80150c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80150c4:	4618      	mov	r0, r3
 80150c6:	f001 f906 	bl	80162d6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80150ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80150d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80150d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80150d6:	e064      	b.n	80151a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	895a      	ldrh	r2, [r3, #10]
 80150dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	895b      	ldrh	r3, [r3, #10]
 80150e6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d906      	bls.n	80150fa <ip4_frag+0x10e>
 80150ec:	4b5c      	ldr	r3, [pc, #368]	@ (8015260 <ip4_frag+0x274>)
 80150ee:	f240 322d 	movw	r2, #813	@ 0x32d
 80150f2:	495f      	ldr	r1, [pc, #380]	@ (8015270 <ip4_frag+0x284>)
 80150f4:	485c      	ldr	r0, [pc, #368]	@ (8015268 <ip4_frag+0x27c>)
 80150f6:	f000 ff19 	bl	8015f2c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80150fa:	8bfa      	ldrh	r2, [r7, #30]
 80150fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015100:	4293      	cmp	r3, r2
 8015102:	bf28      	it	cs
 8015104:	4613      	movcs	r3, r2
 8015106:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801510a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801510e:	2b00      	cmp	r3, #0
 8015110:	d105      	bne.n	801511e <ip4_frag+0x132>
        poff = 0;
 8015112:	2300      	movs	r3, #0
 8015114:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	60fb      	str	r3, [r7, #12]
        continue;
 801511c:	e041      	b.n	80151a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801511e:	f7ff ff0d 	bl	8014f3c <ip_frag_alloc_pbuf_custom_ref>
 8015122:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015124:	69bb      	ldr	r3, [r7, #24]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d103      	bne.n	8015132 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801512a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801512c:	f7f7 fa20 	bl	800c570 <pbuf_free>
        goto memerr;
 8015130:	e08f      	b.n	8015252 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015132:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015138:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801513a:	4413      	add	r3, r2
 801513c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015140:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015144:	9201      	str	r2, [sp, #4]
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	4603      	mov	r3, r0
 801514a:	2241      	movs	r2, #65	@ 0x41
 801514c:	2000      	movs	r0, #0
 801514e:	f7f7 f855 	bl	800c1fc <pbuf_alloced_custom>
 8015152:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d106      	bne.n	8015168 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801515a:	69b8      	ldr	r0, [r7, #24]
 801515c:	f7ff fef6 	bl	8014f4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015160:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015162:	f7f7 fa05 	bl	800c570 <pbuf_free>
        goto memerr;
 8015166:	e074      	b.n	8015252 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015168:	68f8      	ldr	r0, [r7, #12]
 801516a:	f7f7 faa1 	bl	800c6b0 <pbuf_ref>
      pcr->original = p;
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	68fa      	ldr	r2, [r7, #12]
 8015172:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015174:	69bb      	ldr	r3, [r7, #24]
 8015176:	4a3f      	ldr	r2, [pc, #252]	@ (8015274 <ip4_frag+0x288>)
 8015178:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801517a:	6979      	ldr	r1, [r7, #20]
 801517c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801517e:	f7f7 fab9 	bl	800c6f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015182:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015186:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801518a:	1ad3      	subs	r3, r2, r3
 801518c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015190:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015194:	2b00      	cmp	r3, #0
 8015196:	d004      	beq.n	80151a2 <ip4_frag+0x1b6>
        poff = 0;
 8015198:	2300      	movs	r3, #0
 801519a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80151a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d196      	bne.n	80150d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80151aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80151ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80151b0:	4413      	add	r3, r2
 80151b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80151b8:	f1a3 0213 	sub.w	r2, r3, #19
 80151bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80151c0:	429a      	cmp	r2, r3
 80151c2:	bfcc      	ite	gt
 80151c4:	2301      	movgt	r3, #1
 80151c6:	2300      	movle	r3, #0
 80151c8:	b2db      	uxtb	r3, r3
 80151ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80151cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80151d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80151d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80151d6:	6a3b      	ldr	r3, [r7, #32]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d002      	beq.n	80151e2 <ip4_frag+0x1f6>
 80151dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d003      	beq.n	80151ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80151e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80151e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80151e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80151ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7f5 fd6f 	bl	800acd0 <lwip_htons>
 80151f2:	4603      	mov	r3, r0
 80151f4:	461a      	mov	r2, r3
 80151f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80151fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80151fc:	3314      	adds	r3, #20
 80151fe:	b29b      	uxth	r3, r3
 8015200:	4618      	mov	r0, r3
 8015202:	f7f5 fd65 	bl	800acd0 <lwip_htons>
 8015206:	4603      	mov	r3, r0
 8015208:	461a      	mov	r2, r3
 801520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801520c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015210:	2200      	movs	r2, #0
 8015212:	729a      	strb	r2, [r3, #10]
 8015214:	2200      	movs	r2, #0
 8015216:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	695b      	ldr	r3, [r3, #20]
 801521c:	687a      	ldr	r2, [r7, #4]
 801521e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015220:	68b8      	ldr	r0, [r7, #8]
 8015222:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015224:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015226:	f7f7 f9a3 	bl	800c570 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801522a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801522e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015230:	1ad3      	subs	r3, r2, r3
 8015232:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015236:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801523a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801523c:	4413      	add	r3, r2
 801523e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015246:	2b00      	cmp	r3, #0
 8015248:	f47f af19 	bne.w	801507e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801524c:	2300      	movs	r3, #0
 801524e:	e002      	b.n	8015256 <ip4_frag+0x26a>
      goto memerr;
 8015250:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8015256:	4618      	mov	r0, r3
 8015258:	3748      	adds	r7, #72	@ 0x48
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	08019fd8 	.word	0x08019fd8
 8015264:	0801a1b4 	.word	0x0801a1b4
 8015268:	0801a020 	.word	0x0801a020
 801526c:	0801a1d0 	.word	0x0801a1d0
 8015270:	0801a1f0 	.word	0x0801a1f0
 8015274:	08014f85 	.word	0x08014f85

08015278 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b086      	sub	sp, #24
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015282:	230e      	movs	r3, #14
 8015284:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	895b      	ldrh	r3, [r3, #10]
 801528a:	2b0e      	cmp	r3, #14
 801528c:	d96e      	bls.n	801536c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	7bdb      	ldrb	r3, [r3, #15]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d106      	bne.n	80152a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801529c:	3301      	adds	r3, #1
 801529e:	b2da      	uxtb	r2, r3
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	7b1a      	ldrb	r2, [r3, #12]
 80152ae:	7b5b      	ldrb	r3, [r3, #13]
 80152b0:	021b      	lsls	r3, r3, #8
 80152b2:	4313      	orrs	r3, r2
 80152b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	f003 0301 	and.w	r3, r3, #1
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d023      	beq.n	801530a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80152c2:	693b      	ldr	r3, [r7, #16]
 80152c4:	781b      	ldrb	r3, [r3, #0]
 80152c6:	2b01      	cmp	r3, #1
 80152c8:	d10f      	bne.n	80152ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	785b      	ldrb	r3, [r3, #1]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d11b      	bne.n	801530a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80152d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80152d8:	d117      	bne.n	801530a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	7b5b      	ldrb	r3, [r3, #13]
 80152de:	f043 0310 	orr.w	r3, r3, #16
 80152e2:	b2da      	uxtb	r2, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	735a      	strb	r2, [r3, #13]
 80152e8:	e00f      	b.n	801530a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80152ea:	693b      	ldr	r3, [r7, #16]
 80152ec:	2206      	movs	r2, #6
 80152ee:	4928      	ldr	r1, [pc, #160]	@ (8015390 <ethernet_input+0x118>)
 80152f0:	4618      	mov	r0, r3
 80152f2:	f000 ff6b 	bl	80161cc <memcmp>
 80152f6:	4603      	mov	r3, r0
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d106      	bne.n	801530a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	7b5b      	ldrb	r3, [r3, #13]
 8015300:	f043 0308 	orr.w	r3, r3, #8
 8015304:	b2da      	uxtb	r2, r3
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801530a:	89fb      	ldrh	r3, [r7, #14]
 801530c:	2b08      	cmp	r3, #8
 801530e:	d003      	beq.n	8015318 <ethernet_input+0xa0>
 8015310:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015314:	d014      	beq.n	8015340 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015316:	e032      	b.n	801537e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801531e:	f003 0308 	and.w	r3, r3, #8
 8015322:	2b00      	cmp	r3, #0
 8015324:	d024      	beq.n	8015370 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015326:	8afb      	ldrh	r3, [r7, #22]
 8015328:	4619      	mov	r1, r3
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f7f7 f89a 	bl	800c464 <pbuf_remove_header>
 8015330:	4603      	mov	r3, r0
 8015332:	2b00      	cmp	r3, #0
 8015334:	d11e      	bne.n	8015374 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015336:	6839      	ldr	r1, [r7, #0]
 8015338:	6878      	ldr	r0, [r7, #4]
 801533a:	f7fe ff21 	bl	8014180 <ip4_input>
      break;
 801533e:	e013      	b.n	8015368 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015346:	f003 0308 	and.w	r3, r3, #8
 801534a:	2b00      	cmp	r3, #0
 801534c:	d014      	beq.n	8015378 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801534e:	8afb      	ldrh	r3, [r7, #22]
 8015350:	4619      	mov	r1, r3
 8015352:	6878      	ldr	r0, [r7, #4]
 8015354:	f7f7 f886 	bl	800c464 <pbuf_remove_header>
 8015358:	4603      	mov	r3, r0
 801535a:	2b00      	cmp	r3, #0
 801535c:	d10e      	bne.n	801537c <ethernet_input+0x104>
        etharp_input(p, netif);
 801535e:	6839      	ldr	r1, [r7, #0]
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f7fe f82f 	bl	80133c4 <etharp_input>
      break;
 8015366:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015368:	2300      	movs	r3, #0
 801536a:	e00c      	b.n	8015386 <ethernet_input+0x10e>
    goto free_and_return;
 801536c:	bf00      	nop
 801536e:	e006      	b.n	801537e <ethernet_input+0x106>
        goto free_and_return;
 8015370:	bf00      	nop
 8015372:	e004      	b.n	801537e <ethernet_input+0x106>
        goto free_and_return;
 8015374:	bf00      	nop
 8015376:	e002      	b.n	801537e <ethernet_input+0x106>
        goto free_and_return;
 8015378:	bf00      	nop
 801537a:	e000      	b.n	801537e <ethernet_input+0x106>
        goto free_and_return;
 801537c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	f7f7 f8f6 	bl	800c570 <pbuf_free>
  return ERR_OK;
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	3718      	adds	r7, #24
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	0801a574 	.word	0x0801a574

08015394 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015394:	b580      	push	{r7, lr}
 8015396:	b086      	sub	sp, #24
 8015398:	af00      	add	r7, sp, #0
 801539a:	60f8      	str	r0, [r7, #12]
 801539c:	60b9      	str	r1, [r7, #8]
 801539e:	607a      	str	r2, [r7, #4]
 80153a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80153a2:	8c3b      	ldrh	r3, [r7, #32]
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7f5 fc93 	bl	800acd0 <lwip_htons>
 80153aa:	4603      	mov	r3, r0
 80153ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80153ae:	210e      	movs	r1, #14
 80153b0:	68b8      	ldr	r0, [r7, #8]
 80153b2:	f7f7 f847 	bl	800c444 <pbuf_add_header>
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d125      	bne.n	8015408 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	8afa      	ldrh	r2, [r7, #22]
 80153c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	2206      	movs	r2, #6
 80153cc:	6839      	ldr	r1, [r7, #0]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f000 ff81 	bl	80162d6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	3306      	adds	r3, #6
 80153d8:	2206      	movs	r2, #6
 80153da:	6879      	ldr	r1, [r7, #4]
 80153dc:	4618      	mov	r0, r3
 80153de:	f000 ff7a 	bl	80162d6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80153e8:	2b06      	cmp	r3, #6
 80153ea:	d006      	beq.n	80153fa <ethernet_output+0x66>
 80153ec:	4b0a      	ldr	r3, [pc, #40]	@ (8015418 <ethernet_output+0x84>)
 80153ee:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80153f2:	490a      	ldr	r1, [pc, #40]	@ (801541c <ethernet_output+0x88>)
 80153f4:	480a      	ldr	r0, [pc, #40]	@ (8015420 <ethernet_output+0x8c>)
 80153f6:	f000 fd99 	bl	8015f2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	699b      	ldr	r3, [r3, #24]
 80153fe:	68b9      	ldr	r1, [r7, #8]
 8015400:	68f8      	ldr	r0, [r7, #12]
 8015402:	4798      	blx	r3
 8015404:	4603      	mov	r3, r0
 8015406:	e002      	b.n	801540e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015408:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801540a:	f06f 0301 	mvn.w	r3, #1
}
 801540e:	4618      	mov	r0, r3
 8015410:	3718      	adds	r7, #24
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	0801a200 	.word	0x0801a200
 801541c:	0801a238 	.word	0x0801a238
 8015420:	0801a26c 	.word	0x0801a26c

08015424 <HW_Verification_Proccess>:
 *      Author: leah
 */
#include "hw_verif.h"

void HW_Verification_Proccess(void)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	af00      	add	r7, sp, #0
	UDP_Server_Init();
 8015428:	f000 f82a 	bl	8015480 <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 801542c:	f7f5 f82c 	bl	800a488 <MX_LWIP_Process>
 8015430:	e7fc      	b.n	801542c <HW_Verification_Proccess+0x8>
	...

08015434 <Match_CRC>:
 */
#include "crc.h"
#include "hw_verif_crc.h"

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b086      	sub	sp, #24
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	607a      	str	r2, [r7, #4]
 801543e:	461a      	mov	r2, r3
 8015440:	460b      	mov	r3, r1
 8015442:	72fb      	strb	r3, [r7, #11]
 8015444:	4613      	mov	r3, r2
 8015446:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 8015448:	7afb      	ldrb	r3, [r7, #11]
 801544a:	461a      	mov	r2, r3
 801544c:	68f9      	ldr	r1, [r7, #12]
 801544e:	480b      	ldr	r0, [pc, #44]	@ (801547c <Match_CRC+0x48>)
 8015450:	f7ec fd9e 	bl	8001f90 <HAL_CRC_Calculate>
 8015454:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 8015456:	7abb      	ldrb	r3, [r7, #10]
 8015458:	461a      	mov	r2, r3
 801545a:	6879      	ldr	r1, [r7, #4]
 801545c:	4807      	ldr	r0, [pc, #28]	@ (801547c <Match_CRC+0x48>)
 801545e:	f7ec fd97 	bl	8001f90 <HAL_CRC_Calculate>
 8015462:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 8015464:	697a      	ldr	r2, [r7, #20]
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	429a      	cmp	r2, r3
 801546a:	d101      	bne.n	8015470 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 801546c:	2301      	movs	r3, #1
 801546e:	e000      	b.n	8015472 <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 8015470:	2300      	movs	r3, #0
}
 8015472:	4618      	mov	r0, r3
 8015474:	3718      	adds	r7, #24
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	20000228 	.word	0x20000228

08015480 <UDP_Server_Init>:

uint8_t perform_test();
void send_result(uint8_t result);

void UDP_Server_Init(void)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 8015486:	f7fd fbbb 	bl	8012c00 <udp_new>
 801548a:	4603      	mov	r3, r0
 801548c:	4a12      	ldr	r2, [pc, #72]	@ (80154d8 <UDP_Server_Init+0x58>)
 801548e:	6013      	str	r3, [r2, #0]

	if (upcb)
 8015490:	4b11      	ldr	r3, [pc, #68]	@ (80154d8 <UDP_Server_Init+0x58>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d01a      	beq.n	80154ce <UDP_Server_Init+0x4e>
	{
		// Bind the upcb to the UDP_PORT port
		// Using IP_ADDR_ANY allow the upcb to be used by any local interface
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 8015498:	4b0f      	ldr	r3, [pc, #60]	@ (80154d8 <UDP_Server_Init+0x58>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	f24d 4231 	movw	r2, #54321	@ 0xd431
 80154a0:	490e      	ldr	r1, [pc, #56]	@ (80154dc <UDP_Server_Init+0x5c>)
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7fd fa5c 	bl	8012960 <udp_bind>
 80154a8:	4603      	mov	r3, r0
 80154aa:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 80154ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d107      	bne.n	80154c4 <UDP_Server_Init+0x44>
		{
			// Set a receive callback for the upcb
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 80154b4:	4b08      	ldr	r3, [pc, #32]	@ (80154d8 <UDP_Server_Init+0x58>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	2200      	movs	r2, #0
 80154ba:	4909      	ldr	r1, [pc, #36]	@ (80154e0 <UDP_Server_Init+0x60>)
 80154bc:	4618      	mov	r0, r3
 80154be:	f7fd fb3d 	bl	8012b3c <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 80154c2:	e004      	b.n	80154ce <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 80154c4:	4b04      	ldr	r3, [pc, #16]	@ (80154d8 <UDP_Server_Init+0x58>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7fd fb57 	bl	8012b7c <udp_remove>
}
 80154ce:	bf00      	nop
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	bf00      	nop
 80154d8:	200084bc 	.word	0x200084bc
 80154dc:	0801a570 	.word	0x0801a570
 80154e0:	080154e5 	.word	0x080154e5

080154e4 <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b086      	sub	sp, #24
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	607a      	str	r2, [r7, #4]
 80154f0:	603b      	str	r3, [r7, #0]
	// Load data to in_msg
	in_msg.upcb = upcb;
 80154f2:	4a24      	ldr	r2, [pc, #144]	@ (8015584 <UDP_Recv_Callback+0xa0>)
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	6013      	str	r3, [r2, #0]
	in_msg.addr = addr;
 80154f8:	4a22      	ldr	r2, [pc, #136]	@ (8015584 <UDP_Recv_Callback+0xa0>)
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	6053      	str	r3, [r2, #4]
	in_msg.port = port;
 80154fe:	4a21      	ldr	r2, [pc, #132]	@ (8015584 <UDP_Recv_Callback+0xa0>)
 8015500:	8c3b      	ldrh	r3, [r7, #32]
 8015502:	8113      	strh	r3, [r2, #8]

	int n_read = 0;
 8015504:	2300      	movs	r3, #0
 8015506:	617b      	str	r3, [r7, #20]
	memcpy(&in_msg.test_id, p->payload, sizeof(in_msg.test_id));
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	685b      	ldr	r3, [r3, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	461a      	mov	r2, r3
 8015510:	4b1c      	ldr	r3, [pc, #112]	@ (8015584 <UDP_Recv_Callback+0xa0>)
 8015512:	60da      	str	r2, [r3, #12]
	n_read += sizeof(in_msg.test_id);
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	3304      	adds	r3, #4
 8015518:	617b      	str	r3, [r7, #20]

	memcpy(&in_msg.peripheral, &((uint8_t *)p->payload)[n_read++], 1);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	685a      	ldr	r2, [r3, #4]
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	1c59      	adds	r1, r3, #1
 8015522:	6179      	str	r1, [r7, #20]
 8015524:	4413      	add	r3, r2
 8015526:	781a      	ldrb	r2, [r3, #0]
 8015528:	4b16      	ldr	r3, [pc, #88]	@ (8015584 <UDP_Recv_Callback+0xa0>)
 801552a:	741a      	strb	r2, [r3, #16]
	memcpy(&in_msg.n_iter, &((uint8_t *)p->payload)[n_read++], 1);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	685a      	ldr	r2, [r3, #4]
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	1c59      	adds	r1, r3, #1
 8015534:	6179      	str	r1, [r7, #20]
 8015536:	4413      	add	r3, r2
 8015538:	781a      	ldrb	r2, [r3, #0]
 801553a:	4b12      	ldr	r3, [pc, #72]	@ (8015584 <UDP_Recv_Callback+0xa0>)
 801553c:	745a      	strb	r2, [r3, #17]
	memcpy(&in_msg.p_len, &((uint8_t *)p->payload)[n_read++], 1);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	685a      	ldr	r2, [r3, #4]
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	1c59      	adds	r1, r3, #1
 8015546:	6179      	str	r1, [r7, #20]
 8015548:	4413      	add	r3, r2
 801554a:	781a      	ldrb	r2, [r3, #0]
 801554c:	4b0d      	ldr	r3, [pc, #52]	@ (8015584 <UDP_Recv_Callback+0xa0>)
 801554e:	749a      	strb	r2, [r3, #18]
	memcpy(&in_msg.payload, &((char *)p->payload)[n_read], in_msg.p_len);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	685a      	ldr	r2, [r3, #4]
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	4413      	add	r3, r2
 8015558:	4a0a      	ldr	r2, [pc, #40]	@ (8015584 <UDP_Recv_Callback+0xa0>)
 801555a:	7c92      	ldrb	r2, [r2, #18]
 801555c:	4619      	mov	r1, r3
 801555e:	480a      	ldr	r0, [pc, #40]	@ (8015588 <UDP_Recv_Callback+0xa4>)
 8015560:	f000 feb9 	bl	80162d6 <memcpy>

	uint8_t result = perform_test();
 8015564:	f000 f812 	bl	801558c <perform_test>
 8015568:	4603      	mov	r3, r0
 801556a:	74fb      	strb	r3, [r7, #19]
	send_result(result);
 801556c:	7cfb      	ldrb	r3, [r7, #19]
 801556e:	4618      	mov	r0, r3
 8015570:	f000 f878 	bl	8015664 <send_result>

	// Free the p buffer
	pbuf_free(p);
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f7f6 fffb 	bl	800c570 <pbuf_free>
}
 801557a:	bf00      	nop
 801557c:	3718      	adds	r7, #24
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}
 8015582:	bf00      	nop
 8015584:	200084c0 	.word	0x200084c0
 8015588:	200084d3 	.word	0x200084d3

0801558c <perform_test>:

uint8_t perform_test()
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b082      	sub	sp, #8
 8015590:	af02      	add	r7, sp, #8
	switch (in_msg.peripheral) {
 8015592:	4b2c      	ldr	r3, [pc, #176]	@ (8015644 <perform_test+0xb8>)
 8015594:	7c1b      	ldrb	r3, [r3, #16]
 8015596:	3b01      	subs	r3, #1
 8015598:	2b0f      	cmp	r3, #15
 801559a:	d84e      	bhi.n	801563a <perform_test+0xae>
 801559c:	a201      	add	r2, pc, #4	@ (adr r2, 80155a4 <perform_test+0x18>)
 801559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155a2:	bf00      	nop
 80155a4:	080155e5 	.word	0x080155e5
 80155a8:	080155e9 	.word	0x080155e9
 80155ac:	0801563b 	.word	0x0801563b
 80155b0:	08015603 	.word	0x08015603
 80155b4:	0801563b 	.word	0x0801563b
 80155b8:	0801563b 	.word	0x0801563b
 80155bc:	0801563b 	.word	0x0801563b
 80155c0:	0801561d 	.word	0x0801561d
 80155c4:	0801563b 	.word	0x0801563b
 80155c8:	0801563b 	.word	0x0801563b
 80155cc:	0801563b 	.word	0x0801563b
 80155d0:	0801563b 	.word	0x0801563b
 80155d4:	0801563b 	.word	0x0801563b
 80155d8:	0801563b 	.word	0x0801563b
 80155dc:	0801563b 	.word	0x0801563b
 80155e0:	08015637 	.word	0x08015637
		case TEST_TIM:
			return TEST_SUCCESS;
 80155e4:	2301      	movs	r3, #1
 80155e6:	e029      	b.n	801563c <perform_test+0xb0>
			break;
		case TEST_UART:
			return Test_N_Perform_Msg("UART", UART_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 80155e8:	4b16      	ldr	r3, [pc, #88]	@ (8015644 <perform_test+0xb8>)
 80155ea:	7c9a      	ldrb	r2, [r3, #18]
 80155ec:	4b15      	ldr	r3, [pc, #84]	@ (8015644 <perform_test+0xb8>)
 80155ee:	7c5b      	ldrb	r3, [r3, #17]
 80155f0:	9300      	str	r3, [sp, #0]
 80155f2:	4613      	mov	r3, r2
 80155f4:	4a14      	ldr	r2, [pc, #80]	@ (8015648 <perform_test+0xbc>)
 80155f6:	4915      	ldr	r1, [pc, #84]	@ (801564c <perform_test+0xc0>)
 80155f8:	4815      	ldr	r0, [pc, #84]	@ (8015650 <perform_test+0xc4>)
 80155fa:	f000 fa99 	bl	8015b30 <Test_N_Perform_Msg>
 80155fe:	4603      	mov	r3, r0
 8015600:	e01c      	b.n	801563c <perform_test+0xb0>
			break;
		case TEST_SPI:
			return Test_N_Perform_Msg("SPI", SPI_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);;
 8015602:	4b10      	ldr	r3, [pc, #64]	@ (8015644 <perform_test+0xb8>)
 8015604:	7c9a      	ldrb	r2, [r3, #18]
 8015606:	4b0f      	ldr	r3, [pc, #60]	@ (8015644 <perform_test+0xb8>)
 8015608:	7c5b      	ldrb	r3, [r3, #17]
 801560a:	9300      	str	r3, [sp, #0]
 801560c:	4613      	mov	r3, r2
 801560e:	4a0e      	ldr	r2, [pc, #56]	@ (8015648 <perform_test+0xbc>)
 8015610:	4910      	ldr	r1, [pc, #64]	@ (8015654 <perform_test+0xc8>)
 8015612:	4811      	ldr	r0, [pc, #68]	@ (8015658 <perform_test+0xcc>)
 8015614:	f000 fa8c 	bl	8015b30 <Test_N_Perform_Msg>
 8015618:	4603      	mov	r3, r0
 801561a:	e00f      	b.n	801563c <perform_test+0xb0>
			break;
		case TEST_I2C:
			return Test_N_Perform_Msg("I2C", I2C_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 801561c:	4b09      	ldr	r3, [pc, #36]	@ (8015644 <perform_test+0xb8>)
 801561e:	7c9a      	ldrb	r2, [r3, #18]
 8015620:	4b08      	ldr	r3, [pc, #32]	@ (8015644 <perform_test+0xb8>)
 8015622:	7c5b      	ldrb	r3, [r3, #17]
 8015624:	9300      	str	r3, [sp, #0]
 8015626:	4613      	mov	r3, r2
 8015628:	4a07      	ldr	r2, [pc, #28]	@ (8015648 <perform_test+0xbc>)
 801562a:	490c      	ldr	r1, [pc, #48]	@ (801565c <perform_test+0xd0>)
 801562c:	480c      	ldr	r0, [pc, #48]	@ (8015660 <perform_test+0xd4>)
 801562e:	f000 fa7f 	bl	8015b30 <Test_N_Perform_Msg>
 8015632:	4603      	mov	r3, r0
 8015634:	e002      	b.n	801563c <perform_test+0xb0>
			break;
		case TEST_ADC:
			return TEST_SUCCESS;
 8015636:	2301      	movs	r3, #1
 8015638:	e000      	b.n	801563c <perform_test+0xb0>
			break;
		default:
			return TEST_FAILED;
 801563a:	23ff      	movs	r3, #255	@ 0xff
			break;
	}

	return TEST_FAILED;
}
 801563c:	4618      	mov	r0, r3
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	200084c0 	.word	0x200084c0
 8015648:	200084d3 	.word	0x200084d3
 801564c:	08015b99 	.word	0x08015b99
 8015650:	0801a294 	.word	0x0801a294
 8015654:	08015915 	.word	0x08015915
 8015658:	0801a29c 	.word	0x0801a29c
 801565c:	080156c5 	.word	0x080156c5
 8015660:	0801a2a0 	.word	0x0801a2a0

08015664 <send_result>:

void send_result(uint8_t result)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b086      	sub	sp, #24
 8015668:	af00      	add	r7, sp, #0
 801566a:	4603      	mov	r3, r0
 801566c:	71fb      	strb	r3, [r7, #7]
	uint8_t response[RESPONSE_SIZE];
	memcpy(response, &in_msg.test_id, sizeof(in_msg.test_id));
 801566e:	4b14      	ldr	r3, [pc, #80]	@ (80156c0 <send_result+0x5c>)
 8015670:	68db      	ldr	r3, [r3, #12]
 8015672:	60fb      	str	r3, [r7, #12]
	response[sizeof(in_msg.test_id)] = result;
 8015674:	79fb      	ldrb	r3, [r7, #7]
 8015676:	743b      	strb	r3, [r7, #16]

	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 8015678:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801567c:	2105      	movs	r1, #5
 801567e:	2036      	movs	r0, #54	@ 0x36
 8015680:	f7f6 fc92 	bl	800bfa8 <pbuf_alloc>
 8015684:	6178      	str	r0, [r7, #20]
	if (resp_buf != NULL)
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d014      	beq.n	80156b6 <send_result+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	461a      	mov	r2, r3
 8015692:	f107 030c 	add.w	r3, r7, #12
 8015696:	6818      	ldr	r0, [r3, #0]
 8015698:	6010      	str	r0, [r2, #0]
 801569a:	791b      	ldrb	r3, [r3, #4]
 801569c:	7113      	strb	r3, [r2, #4]
		udp_sendto(in_msg.upcb, resp_buf, in_msg.addr, in_msg.port);
 801569e:	4b08      	ldr	r3, [pc, #32]	@ (80156c0 <send_result+0x5c>)
 80156a0:	6818      	ldr	r0, [r3, #0]
 80156a2:	4b07      	ldr	r3, [pc, #28]	@ (80156c0 <send_result+0x5c>)
 80156a4:	685a      	ldr	r2, [r3, #4]
 80156a6:	4b06      	ldr	r3, [pc, #24]	@ (80156c0 <send_result+0x5c>)
 80156a8:	891b      	ldrh	r3, [r3, #8]
 80156aa:	6979      	ldr	r1, [r7, #20]
 80156ac:	f7fc ff30 	bl	8012510 <udp_sendto>
	    pbuf_free(resp_buf);
 80156b0:	6978      	ldr	r0, [r7, #20]
 80156b2:	f7f6 ff5d 	bl	800c570 <pbuf_free>
	}
}
 80156b6:	bf00      	nop
 80156b8:	3718      	adds	r7, #24
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	200084c0 	.word	0x200084c0

080156c4 <I2C_Test_Perform>:
volatile uint8_t i2c1_rx_done;
volatile uint8_t i2c2_tx_done;
volatile uint8_t i2c2_rx_done;

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 80156c4:	b590      	push	{r4, r7, lr}
 80156c6:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80156ca:	af00      	add	r7, sp, #0
 80156cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80156d0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80156d4:	6018      	str	r0, [r3, #0]
 80156d6:	460a      	mov	r2, r1
 80156d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80156dc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80156e0:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
 80156e2:	4855      	ldr	r0, [pc, #340]	@ (8015838 <I2C_Test_Perform+0x174>)
 80156e4:	f000 fc92 	bl	801600c <puts>

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 80156e8:	4b54      	ldr	r3, [pc, #336]	@ (801583c <I2C_Test_Perform+0x178>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 80156ee:	4b54      	ldr	r3, [pc, #336]	@ (8015840 <I2C_Test_Perform+0x17c>)
 80156f0:	2200      	movs	r2, #0
 80156f2:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 80156f4:	4b53      	ldr	r3, [pc, #332]	@ (8015844 <I2C_Test_Perform+0x180>)
 80156f6:	2200      	movs	r2, #0
 80156f8:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 80156fa:	4b53      	ldr	r3, [pc, #332]	@ (8015848 <I2C_Test_Perform+0x184>)
 80156fc:	2200      	movs	r2, #0
 80156fe:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 8015700:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015704:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	b29a      	uxth	r2, r3
 801570c:	f107 0308 	add.w	r3, r7, #8
 8015710:	4619      	mov	r1, r3
 8015712:	484e      	ldr	r0, [pc, #312]	@ (801584c <I2C_Test_Perform+0x188>)
 8015714:	f7ef f98c 	bl	8004a30 <HAL_I2C_Slave_Receive_DMA>
 8015718:	4603      	mov	r3, r0
 801571a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801571e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8015722:	2b00      	cmp	r3, #0
 8015724:	d004      	beq.n	8015730 <I2C_Test_Perform+0x6c>
	{
		printf("i2c1 -> i2c2 RX failed\n");
 8015726:	484a      	ldr	r0, [pc, #296]	@ (8015850 <I2C_Test_Perform+0x18c>)
 8015728:	f000 fc70 	bl	801600c <puts>
		return TEST_FAILED;
 801572c:	23ff      	movs	r3, #255	@ 0xff
 801572e:	e07d      	b.n	801582c <I2C_Test_Perform+0x168>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 8015730:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015734:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	b29b      	uxth	r3, r3
 801573c:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8015740:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8015744:	6812      	ldr	r2, [r2, #0]
 8015746:	2114      	movs	r1, #20
 8015748:	4842      	ldr	r0, [pc, #264]	@ (8015854 <I2C_Test_Perform+0x190>)
 801574a:	f7ee fe81 	bl	8004450 <HAL_I2C_Master_Transmit_DMA>
 801574e:	4603      	mov	r3, r0
 8015750:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8015754:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8015758:	2b00      	cmp	r3, #0
 801575a:	d004      	beq.n	8015766 <I2C_Test_Perform+0xa2>
	{
		printf("i2c1 -> i2c2 TX failed\n");
 801575c:	483e      	ldr	r0, [pc, #248]	@ (8015858 <I2C_Test_Perform+0x194>)
 801575e:	f000 fc55 	bl	801600c <puts>
		return TEST_FAILED;
 8015762:	23ff      	movs	r3, #255	@ 0xff
 8015764:	e062      	b.n	801582c <I2C_Test_Perform+0x168>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 8015766:	bf00      	nop
 8015768:	4b37      	ldr	r3, [pc, #220]	@ (8015848 <I2C_Test_Perform+0x184>)
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	b2db      	uxtb	r3, r3
 801576e:	2b00      	cmp	r3, #0
 8015770:	d0fa      	beq.n	8015768 <I2C_Test_Perform+0xa4>
 8015772:	4b32      	ldr	r3, [pc, #200]	@ (801583c <I2C_Test_Perform+0x178>)
 8015774:	781b      	ldrb	r3, [r3, #0]
 8015776:	b2db      	uxtb	r3, r3
 8015778:	2b00      	cmp	r3, #0
 801577a:	d0f5      	beq.n	8015768 <I2C_Test_Perform+0xa4>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801577c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015780:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	b29b      	uxth	r3, r3
 8015788:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801578c:	2114      	movs	r1, #20
 801578e:	4831      	ldr	r0, [pc, #196]	@ (8015854 <I2C_Test_Perform+0x190>)
 8015790:	f7ee ff72 	bl	8004678 <HAL_I2C_Master_Receive_DMA>
 8015794:	4603      	mov	r3, r0
 8015796:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801579a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d004      	beq.n	80157ac <I2C_Test_Perform+0xe8>
	{
		printf("i2c2 -> i2c1 RX failed\n");
 80157a2:	482e      	ldr	r0, [pc, #184]	@ (801585c <I2C_Test_Perform+0x198>)
 80157a4:	f000 fc32 	bl	801600c <puts>
		return TEST_FAILED;
 80157a8:	23ff      	movs	r3, #255	@ 0xff
 80157aa:	e03f      	b.n	801582c <I2C_Test_Perform+0x168>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 80157ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80157b0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	b29a      	uxth	r2, r3
 80157b8:	f107 0308 	add.w	r3, r7, #8
 80157bc:	4619      	mov	r1, r3
 80157be:	4823      	ldr	r0, [pc, #140]	@ (801584c <I2C_Test_Perform+0x188>)
 80157c0:	f7ef f84a 	bl	8004858 <HAL_I2C_Slave_Transmit_DMA>
 80157c4:	4603      	mov	r3, r0
 80157c6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80157ca:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d004      	beq.n	80157dc <I2C_Test_Perform+0x118>
	{
		printf("i2c2 -> i2c1 TX failed\n");
 80157d2:	4823      	ldr	r0, [pc, #140]	@ (8015860 <I2C_Test_Perform+0x19c>)
 80157d4:	f000 fc1a 	bl	801600c <puts>
		return TEST_FAILED;
 80157d8:	23ff      	movs	r3, #255	@ 0xff
 80157da:	e027      	b.n	801582c <I2C_Test_Perform+0x168>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 80157dc:	bf00      	nop
 80157de:	4b18      	ldr	r3, [pc, #96]	@ (8015840 <I2C_Test_Perform+0x17c>)
 80157e0:	781b      	ldrb	r3, [r3, #0]
 80157e2:	b2db      	uxtb	r3, r3
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d0fa      	beq.n	80157de <I2C_Test_Perform+0x11a>
 80157e8:	4b16      	ldr	r3, [pc, #88]	@ (8015844 <I2C_Test_Perform+0x180>)
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d0f5      	beq.n	80157de <I2C_Test_Perform+0x11a>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 80157f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80157f6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80157fa:	781c      	ldrb	r4, [r3, #0]
 80157fc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8015800:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015804:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015808:	7819      	ldrb	r1, [r3, #0]
 801580a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801580e:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8015812:	4623      	mov	r3, r4
 8015814:	6800      	ldr	r0, [r0, #0]
 8015816:	f7ff fe0d 	bl	8015434 <Match_CRC>
 801581a:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801581e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015822:	2b01      	cmp	r3, #1
 8015824:	d101      	bne.n	801582a <I2C_Test_Perform+0x166>
 8015826:	2301      	movs	r3, #1
 8015828:	e000      	b.n	801582c <I2C_Test_Perform+0x168>

	return TEST_FAILED;
 801582a:	23ff      	movs	r3, #255	@ 0xff
}
 801582c:	4618      	mov	r0, r3
 801582e:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8015832:	46bd      	mov	sp, r7
 8015834:	bd90      	pop	{r4, r7, pc}
 8015836:	bf00      	nop
 8015838:	0801a2a4 	.word	0x0801a2a4
 801583c:	200085d4 	.word	0x200085d4
 8015840:	200085d5 	.word	0x200085d5
 8015844:	200085d6 	.word	0x200085d6
 8015848:	200085d7 	.word	0x200085d7
 801584c:	200002a0 	.word	0x200002a0
 8015850:	0801a2b8 	.word	0x0801a2b8
 8015854:	2000024c 	.word	0x2000024c
 8015858:	0801a2d0 	.word	0x0801a2d0
 801585c:	0801a2e8 	.word	0x0801a2e8
 8015860:	0801a300 	.word	0x0801a300

08015864 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015864:	b480      	push	{r7}
 8015866:	b083      	sub	sp, #12
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	4a06      	ldr	r2, [pc, #24]	@ (8015888 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8015870:	4293      	cmp	r3, r2
 8015872:	d102      	bne.n	801587a <HAL_I2C_MasterTxCpltCallback+0x16>
 8015874:	4b05      	ldr	r3, [pc, #20]	@ (801588c <HAL_I2C_MasterTxCpltCallback+0x28>)
 8015876:	2201      	movs	r2, #1
 8015878:	701a      	strb	r2, [r3, #0]
}
 801587a:	bf00      	nop
 801587c:	370c      	adds	r7, #12
 801587e:	46bd      	mov	sp, r7
 8015880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015884:	4770      	bx	lr
 8015886:	bf00      	nop
 8015888:	2000024c 	.word	0x2000024c
 801588c:	200085d4 	.word	0x200085d4

08015890 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	4a06      	ldr	r2, [pc, #24]	@ (80158b4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 801589c:	4293      	cmp	r3, r2
 801589e:	d102      	bne.n	80158a6 <HAL_I2C_MasterRxCpltCallback+0x16>
 80158a0:	4b05      	ldr	r3, [pc, #20]	@ (80158b8 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80158a2:	2201      	movs	r2, #1
 80158a4:	701a      	strb	r2, [r3, #0]
}
 80158a6:	bf00      	nop
 80158a8:	370c      	adds	r7, #12
 80158aa:	46bd      	mov	sp, r7
 80158ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b0:	4770      	bx	lr
 80158b2:	bf00      	nop
 80158b4:	2000024c 	.word	0x2000024c
 80158b8:	200085d5 	.word	0x200085d5

080158bc <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	4a06      	ldr	r2, [pc, #24]	@ (80158e0 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 80158c8:	4293      	cmp	r3, r2
 80158ca:	d102      	bne.n	80158d2 <HAL_I2C_SlaveTxCpltCallback+0x16>
 80158cc:	4b05      	ldr	r3, [pc, #20]	@ (80158e4 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 80158ce:	2201      	movs	r2, #1
 80158d0:	701a      	strb	r2, [r3, #0]
}
 80158d2:	bf00      	nop
 80158d4:	370c      	adds	r7, #12
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr
 80158de:	bf00      	nop
 80158e0:	200002a0 	.word	0x200002a0
 80158e4:	200085d6 	.word	0x200085d6

080158e8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80158e8:	b480      	push	{r7}
 80158ea:	b083      	sub	sp, #12
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	4a06      	ldr	r2, [pc, #24]	@ (801590c <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80158f4:	4293      	cmp	r3, r2
 80158f6:	d102      	bne.n	80158fe <HAL_I2C_SlaveRxCpltCallback+0x16>
 80158f8:	4b05      	ldr	r3, [pc, #20]	@ (8015910 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80158fa:	2201      	movs	r2, #1
 80158fc:	701a      	strb	r2, [r3, #0]
}
 80158fe:	bf00      	nop
 8015900:	370c      	adds	r7, #12
 8015902:	46bd      	mov	sp, r7
 8015904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015908:	4770      	bx	lr
 801590a:	bf00      	nop
 801590c:	200002a0 	.word	0x200002a0
 8015910:	200085d7 	.word	0x200085d7

08015914 <SPI_Test_Perform>:
volatile uint8_t spi1_rx_done;
volatile uint8_t spi4_tx_done;
volatile uint8_t spi4_rx_done;

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8015914:	b590      	push	{r4, r7, lr}
 8015916:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801591a:	af00      	add	r7, sp, #0
 801591c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015920:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015924:	6018      	str	r0, [r3, #0]
 8015926:	460a      	mov	r2, r1
 8015928:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801592c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015930:	701a      	strb	r2, [r3, #0]
	printf("Performing SPI test\n");
 8015932:	4854      	ldr	r0, [pc, #336]	@ (8015a84 <SPI_Test_Perform+0x170>)
 8015934:	f000 fb6a 	bl	801600c <puts>

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 8015938:	4b53      	ldr	r3, [pc, #332]	@ (8015a88 <SPI_Test_Perform+0x174>)
 801593a:	2200      	movs	r2, #0
 801593c:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 801593e:	4b53      	ldr	r3, [pc, #332]	@ (8015a8c <SPI_Test_Perform+0x178>)
 8015940:	2200      	movs	r2, #0
 8015942:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 8015944:	4b52      	ldr	r3, [pc, #328]	@ (8015a90 <SPI_Test_Perform+0x17c>)
 8015946:	2200      	movs	r2, #0
 8015948:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 801594a:	4b52      	ldr	r3, [pc, #328]	@ (8015a94 <SPI_Test_Perform+0x180>)
 801594c:	2200      	movs	r2, #0
 801594e:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 8015950:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015954:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015958:	781b      	ldrb	r3, [r3, #0]
 801595a:	b29a      	uxth	r2, r3
 801595c:	f107 0308 	add.w	r3, r7, #8
 8015960:	4619      	mov	r1, r3
 8015962:	484d      	ldr	r0, [pc, #308]	@ (8015a98 <SPI_Test_Perform+0x184>)
 8015964:	f7f2 f980 	bl	8007c68 <HAL_SPI_Receive_DMA>
 8015968:	4603      	mov	r3, r0
 801596a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801596e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8015972:	2b00      	cmp	r3, #0
 8015974:	d004      	beq.n	8015980 <SPI_Test_Perform+0x6c>
	{
		printf("spi1 -> spi4 RX failed\n");
 8015976:	4849      	ldr	r0, [pc, #292]	@ (8015a9c <SPI_Test_Perform+0x188>)
 8015978:	f000 fb48 	bl	801600c <puts>
		return TEST_FAILED;
 801597c:	23ff      	movs	r3, #255	@ 0xff
 801597e:	e07c      	b.n	8015a7a <SPI_Test_Perform+0x166>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 8015980:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015984:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015988:	781b      	ldrb	r3, [r3, #0]
 801598a:	b29a      	uxth	r2, r3
 801598c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015990:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015994:	6819      	ldr	r1, [r3, #0]
 8015996:	4842      	ldr	r0, [pc, #264]	@ (8015aa0 <SPI_Test_Perform+0x18c>)
 8015998:	f7f2 f878 	bl	8007a8c <HAL_SPI_Transmit_DMA>
 801599c:	4603      	mov	r3, r0
 801599e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80159a2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d004      	beq.n	80159b4 <SPI_Test_Perform+0xa0>
	{
		printf("spi1 -> spi4 TX failed\n");
 80159aa:	483e      	ldr	r0, [pc, #248]	@ (8015aa4 <SPI_Test_Perform+0x190>)
 80159ac:	f000 fb2e 	bl	801600c <puts>
		return TEST_FAILED;
 80159b0:	23ff      	movs	r3, #255	@ 0xff
 80159b2:	e062      	b.n	8015a7a <SPI_Test_Perform+0x166>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 80159b4:	bf00      	nop
 80159b6:	4b37      	ldr	r3, [pc, #220]	@ (8015a94 <SPI_Test_Perform+0x180>)
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	b2db      	uxtb	r3, r3
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d0fa      	beq.n	80159b6 <SPI_Test_Perform+0xa2>
 80159c0:	4b31      	ldr	r3, [pc, #196]	@ (8015a88 <SPI_Test_Perform+0x174>)
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d0f5      	beq.n	80159b6 <SPI_Test_Perform+0xa2>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 80159ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80159ce:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	b29a      	uxth	r2, r3
 80159d6:	f107 0308 	add.w	r3, r7, #8
 80159da:	4619      	mov	r1, r3
 80159dc:	482e      	ldr	r0, [pc, #184]	@ (8015a98 <SPI_Test_Perform+0x184>)
 80159de:	f7f2 f855 	bl	8007a8c <HAL_SPI_Transmit_DMA>
 80159e2:	4603      	mov	r3, r0
 80159e4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80159e8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d004      	beq.n	80159fa <SPI_Test_Perform+0xe6>
	{
		printf("spi4 -> spi1 TX failed\n");
 80159f0:	482d      	ldr	r0, [pc, #180]	@ (8015aa8 <SPI_Test_Perform+0x194>)
 80159f2:	f000 fb0b 	bl	801600c <puts>
		return TEST_FAILED;
 80159f6:	23ff      	movs	r3, #255	@ 0xff
 80159f8:	e03f      	b.n	8015a7a <SPI_Test_Perform+0x166>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 80159fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80159fe:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015a02:	781b      	ldrb	r3, [r3, #0]
 8015a04:	b29a      	uxth	r2, r3
 8015a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	4824      	ldr	r0, [pc, #144]	@ (8015aa0 <SPI_Test_Perform+0x18c>)
 8015a0e:	f7f2 f92b 	bl	8007c68 <HAL_SPI_Receive_DMA>
 8015a12:	4603      	mov	r3, r0
 8015a14:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8015a18:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d004      	beq.n	8015a2a <SPI_Test_Perform+0x116>
	{
		printf("spi4 -> spi1 RX failed\n");
 8015a20:	4822      	ldr	r0, [pc, #136]	@ (8015aac <SPI_Test_Perform+0x198>)
 8015a22:	f000 faf3 	bl	801600c <puts>
		return TEST_FAILED;
 8015a26:	23ff      	movs	r3, #255	@ 0xff
 8015a28:	e027      	b.n	8015a7a <SPI_Test_Perform+0x166>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 8015a2a:	bf00      	nop
 8015a2c:	4b17      	ldr	r3, [pc, #92]	@ (8015a8c <SPI_Test_Perform+0x178>)
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	b2db      	uxtb	r3, r3
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d0fa      	beq.n	8015a2c <SPI_Test_Perform+0x118>
 8015a36:	4b16      	ldr	r3, [pc, #88]	@ (8015a90 <SPI_Test_Perform+0x17c>)
 8015a38:	781b      	ldrb	r3, [r3, #0]
 8015a3a:	b2db      	uxtb	r3, r3
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d0f5      	beq.n	8015a2c <SPI_Test_Perform+0x118>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 8015a40:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015a44:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015a48:	781c      	ldrb	r4, [r3, #0]
 8015a4a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8015a4e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015a52:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015a56:	7819      	ldrb	r1, [r3, #0]
 8015a58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015a5c:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8015a60:	4623      	mov	r3, r4
 8015a62:	6800      	ldr	r0, [r0, #0]
 8015a64:	f7ff fce6 	bl	8015434 <Match_CRC>
 8015a68:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8015a6c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8015a70:	2b01      	cmp	r3, #1
 8015a72:	d101      	bne.n	8015a78 <SPI_Test_Perform+0x164>
 8015a74:	2301      	movs	r3, #1
 8015a76:	e000      	b.n	8015a7a <SPI_Test_Perform+0x166>

	return TEST_FAILED;
 8015a78:	23ff      	movs	r3, #255	@ 0xff
}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd90      	pop	{r4, r7, pc}
 8015a84:	0801a318 	.word	0x0801a318
 8015a88:	200085d8 	.word	0x200085d8
 8015a8c:	200085d9 	.word	0x200085d9
 8015a90:	200085da 	.word	0x200085da
 8015a94:	200085db 	.word	0x200085db
 8015a98:	200004d8 	.word	0x200004d8
 8015a9c:	0801a32c 	.word	0x0801a32c
 8015aa0:	20000474 	.word	0x20000474
 8015aa4:	0801a344 	.word	0x0801a344
 8015aa8:	0801a35c 	.word	0x0801a35c
 8015aac:	0801a374 	.word	0x0801a374

08015ab0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b083      	sub	sp, #12
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	4a09      	ldr	r2, [pc, #36]	@ (8015ae0 <HAL_SPI_TxCpltCallback+0x30>)
 8015abc:	4293      	cmp	r3, r2
 8015abe:	d102      	bne.n	8015ac6 <HAL_SPI_TxCpltCallback+0x16>
 8015ac0:	4b08      	ldr	r3, [pc, #32]	@ (8015ae4 <HAL_SPI_TxCpltCallback+0x34>)
 8015ac2:	2201      	movs	r2, #1
 8015ac4:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	4a07      	ldr	r2, [pc, #28]	@ (8015ae8 <HAL_SPI_TxCpltCallback+0x38>)
 8015aca:	4293      	cmp	r3, r2
 8015acc:	d102      	bne.n	8015ad4 <HAL_SPI_TxCpltCallback+0x24>
 8015ace:	4b07      	ldr	r3, [pc, #28]	@ (8015aec <HAL_SPI_TxCpltCallback+0x3c>)
 8015ad0:	2201      	movs	r2, #1
 8015ad2:	701a      	strb	r2, [r3, #0]
}
 8015ad4:	bf00      	nop
 8015ad6:	370c      	adds	r7, #12
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ade:	4770      	bx	lr
 8015ae0:	20000474 	.word	0x20000474
 8015ae4:	200085d8 	.word	0x200085d8
 8015ae8:	200004d8 	.word	0x200004d8
 8015aec:	200085da 	.word	0x200085da

08015af0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015af0:	b480      	push	{r7}
 8015af2:	b083      	sub	sp, #12
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	4a09      	ldr	r2, [pc, #36]	@ (8015b20 <HAL_SPI_RxCpltCallback+0x30>)
 8015afc:	4293      	cmp	r3, r2
 8015afe:	d102      	bne.n	8015b06 <HAL_SPI_RxCpltCallback+0x16>
 8015b00:	4b08      	ldr	r3, [pc, #32]	@ (8015b24 <HAL_SPI_RxCpltCallback+0x34>)
 8015b02:	2201      	movs	r2, #1
 8015b04:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	4a07      	ldr	r2, [pc, #28]	@ (8015b28 <HAL_SPI_RxCpltCallback+0x38>)
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	d102      	bne.n	8015b14 <HAL_SPI_RxCpltCallback+0x24>
 8015b0e:	4b07      	ldr	r3, [pc, #28]	@ (8015b2c <HAL_SPI_RxCpltCallback+0x3c>)
 8015b10:	2201      	movs	r2, #1
 8015b12:	701a      	strb	r2, [r3, #0]
}
 8015b14:	bf00      	nop
 8015b16:	370c      	adds	r7, #12
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1e:	4770      	bx	lr
 8015b20:	20000474 	.word	0x20000474
 8015b24:	200085d9 	.word	0x200085d9
 8015b28:	200004d8 	.word	0x200004d8
 8015b2c:	200085db 	.word	0x200085db

08015b30 <Test_N_Perform_Msg>:

	return TEST_SUCCESS;
}

uint8_t Test_N_Perform_Msg(const char *test_name, MsgTestFunction test_func, uint8_t *msg, uint8_t msg_len, uint8_t n)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b086      	sub	sp, #24
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	60f8      	str	r0, [r7, #12]
 8015b38:	60b9      	str	r1, [r7, #8]
 8015b3a:	607a      	str	r2, [r7, #4]
 8015b3c:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < n; i++)
 8015b3e:	2300      	movs	r3, #0
 8015b40:	617b      	str	r3, [r7, #20]
 8015b42:	e01a      	b.n	8015b7a <Test_N_Perform_Msg+0x4a>
	{
		if (test_func(msg, msg_len) == TEST_FAILED)
 8015b44:	78fa      	ldrb	r2, [r7, #3]
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	4611      	mov	r1, r2
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	4798      	blx	r3
 8015b4e:	4603      	mov	r3, r0
 8015b50:	2bff      	cmp	r3, #255	@ 0xff
 8015b52:	d108      	bne.n	8015b66 <Test_N_Perform_Msg+0x36>
		{
			printf("TEST %d: %s test failed\n", i + 1, test_name);
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	3301      	adds	r3, #1
 8015b58:	68fa      	ldr	r2, [r7, #12]
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	480c      	ldr	r0, [pc, #48]	@ (8015b90 <Test_N_Perform_Msg+0x60>)
 8015b5e:	f000 f9e5 	bl	8015f2c <iprintf>
			return TEST_FAILED;
 8015b62:	23ff      	movs	r3, #255	@ 0xff
 8015b64:	e00f      	b.n	8015b86 <Test_N_Perform_Msg+0x56>
		}
		else
		{
			printf("TEST %d: %s test success\n", i + 1, test_name);
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	68fa      	ldr	r2, [r7, #12]
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	4809      	ldr	r0, [pc, #36]	@ (8015b94 <Test_N_Perform_Msg+0x64>)
 8015b70:	f000 f9dc 	bl	8015f2c <iprintf>
	for (int i = 0; i < n; i++)
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	3301      	adds	r3, #1
 8015b78:	617b      	str	r3, [r7, #20]
 8015b7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b7e:	697a      	ldr	r2, [r7, #20]
 8015b80:	429a      	cmp	r2, r3
 8015b82:	dbdf      	blt.n	8015b44 <Test_N_Perform_Msg+0x14>
		}
	}

	return TEST_SUCCESS;
 8015b84:	2301      	movs	r3, #1
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3718      	adds	r7, #24
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	0801a38c 	.word	0x0801a38c
 8015b94:	0801a3a8 	.word	0x0801a3a8

08015b98 <UART_Test_Perform>:
// DMA synchronization
volatile uint8_t uart4_rx_done;
volatile uint8_t uart5_rx_done;

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8015b98:	b590      	push	{r4, r7, lr}
 8015b9a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015ba4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015ba8:	6018      	str	r0, [r3, #0]
 8015baa:	460a      	mov	r2, r1
 8015bac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015bb0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015bb4:	701a      	strb	r2, [r3, #0]
	printf("Performing uart test\n");
 8015bb6:	4844      	ldr	r0, [pc, #272]	@ (8015cc8 <UART_Test_Perform+0x130>)
 8015bb8:	f000 fa28 	bl	801600c <puts>

	uart4_rx_done = 0;
 8015bbc:	4b43      	ldr	r3, [pc, #268]	@ (8015ccc <UART_Test_Perform+0x134>)
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 8015bc2:	4b43      	ldr	r3, [pc, #268]	@ (8015cd0 <UART_Test_Perform+0x138>)
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 8015bc8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015bcc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015bd0:	781b      	ldrb	r3, [r3, #0]
 8015bd2:	b29a      	uxth	r2, r3
 8015bd4:	f107 030c 	add.w	r3, r7, #12
 8015bd8:	4619      	mov	r1, r3
 8015bda:	483e      	ldr	r0, [pc, #248]	@ (8015cd4 <UART_Test_Perform+0x13c>)
 8015bdc:	f7f3 f8a8 	bl	8008d30 <HAL_UART_Receive_DMA>
 8015be0:	4603      	mov	r3, r0
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d004      	beq.n	8015bf0 <UART_Test_Perform+0x58>
	{
		printf("uart4 -> uart5 RX1 failed\n");
 8015be6:	483c      	ldr	r0, [pc, #240]	@ (8015cd8 <UART_Test_Perform+0x140>)
 8015be8:	f000 fa10 	bl	801600c <puts>
		return TEST_FAILED;
 8015bec:	23ff      	movs	r3, #255	@ 0xff
 8015bee:	e066      	b.n	8015cbe <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 8015bf0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015bf4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015bf8:	781b      	ldrb	r3, [r3, #0]
 8015bfa:	b29a      	uxth	r2, r3
 8015bfc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015c00:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015c04:	6819      	ldr	r1, [r3, #0]
 8015c06:	4835      	ldr	r0, [pc, #212]	@ (8015cdc <UART_Test_Perform+0x144>)
 8015c08:	f7f3 f834 	bl	8008c74 <HAL_UART_Transmit_IT>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d004      	beq.n	8015c1c <UART_Test_Perform+0x84>
	{
		printf("uart4 -> uart5 TX failed\n");
 8015c12:	4833      	ldr	r0, [pc, #204]	@ (8015ce0 <UART_Test_Perform+0x148>)
 8015c14:	f000 f9fa 	bl	801600c <puts>
		return TEST_FAILED;
 8015c18:	23ff      	movs	r3, #255	@ 0xff
 8015c1a:	e050      	b.n	8015cbe <UART_Test_Perform+0x126>
	}
	while (!uart5_rx_done);
 8015c1c:	bf00      	nop
 8015c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8015cd0 <UART_Test_Perform+0x138>)
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d0fa      	beq.n	8015c1e <UART_Test_Perform+0x86>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8015c28:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015c2c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015c30:	781b      	ldrb	r3, [r3, #0]
 8015c32:	b29a      	uxth	r2, r3
 8015c34:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8015c38:	4619      	mov	r1, r3
 8015c3a:	4828      	ldr	r0, [pc, #160]	@ (8015cdc <UART_Test_Perform+0x144>)
 8015c3c:	f7f3 f878 	bl	8008d30 <HAL_UART_Receive_DMA>
 8015c40:	4603      	mov	r3, r0
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d004      	beq.n	8015c50 <UART_Test_Perform+0xb8>
	{
		printf("uart5 -> uart4 RX failed\n");
 8015c46:	4827      	ldr	r0, [pc, #156]	@ (8015ce4 <UART_Test_Perform+0x14c>)
 8015c48:	f000 f9e0 	bl	801600c <puts>
		return TEST_FAILED;
 8015c4c:	23ff      	movs	r3, #255	@ 0xff
 8015c4e:	e036      	b.n	8015cbe <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 8015c50:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015c54:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	f107 030c 	add.w	r3, r7, #12
 8015c60:	4619      	mov	r1, r3
 8015c62:	481c      	ldr	r0, [pc, #112]	@ (8015cd4 <UART_Test_Perform+0x13c>)
 8015c64:	f7f3 f806 	bl	8008c74 <HAL_UART_Transmit_IT>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d004      	beq.n	8015c78 <UART_Test_Perform+0xe0>
	{
		printf("uart5 -> uart4 TX failed\n");
 8015c6e:	481e      	ldr	r0, [pc, #120]	@ (8015ce8 <UART_Test_Perform+0x150>)
 8015c70:	f000 f9cc 	bl	801600c <puts>
		return TEST_FAILED;
 8015c74:	23ff      	movs	r3, #255	@ 0xff
 8015c76:	e022      	b.n	8015cbe <UART_Test_Perform+0x126>
	}
	while (!uart4_rx_done);
 8015c78:	bf00      	nop
 8015c7a:	4b14      	ldr	r3, [pc, #80]	@ (8015ccc <UART_Test_Perform+0x134>)
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d0fa      	beq.n	8015c7a <UART_Test_Perform+0xe2>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8015c84:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015c88:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015c8c:	781c      	ldrb	r4, [r3, #0]
 8015c8e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8015c92:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015c96:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8015c9a:	7819      	ldrb	r1, [r3, #0]
 8015c9c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8015ca0:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8015ca4:	4623      	mov	r3, r4
 8015ca6:	6800      	ldr	r0, [r0, #0]
 8015ca8:	f7ff fbc4 	bl	8015434 <Match_CRC>
 8015cac:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c

	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8015cb0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8015cb4:	2b01      	cmp	r3, #1
 8015cb6:	d101      	bne.n	8015cbc <UART_Test_Perform+0x124>
 8015cb8:	2301      	movs	r3, #1
 8015cba:	e000      	b.n	8015cbe <UART_Test_Perform+0x126>

	return TEST_FAILED;
 8015cbc:	23ff      	movs	r3, #255	@ 0xff
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd90      	pop	{r4, r7, pc}
 8015cc8:	0801a3c4 	.word	0x0801a3c4
 8015ccc:	200085dc 	.word	0x200085dc
 8015cd0:	200085dd 	.word	0x200085dd
 8015cd4:	20000748 	.word	0x20000748
 8015cd8:	0801a3dc 	.word	0x0801a3dc
 8015cdc:	200006c0 	.word	0x200006c0
 8015ce0:	0801a3f8 	.word	0x0801a3f8
 8015ce4:	0801a414 	.word	0x0801a414
 8015ce8:	0801a430 	.word	0x0801a430

08015cec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8015cec:	b480      	push	{r7}
 8015cee:	b083      	sub	sp, #12
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	4a09      	ldr	r2, [pc, #36]	@ (8015d1c <HAL_UART_RxCpltCallback+0x30>)
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	d102      	bne.n	8015d02 <HAL_UART_RxCpltCallback+0x16>
 8015cfc:	4b08      	ldr	r3, [pc, #32]	@ (8015d20 <HAL_UART_RxCpltCallback+0x34>)
 8015cfe:	2201      	movs	r2, #1
 8015d00:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	4a07      	ldr	r2, [pc, #28]	@ (8015d24 <HAL_UART_RxCpltCallback+0x38>)
 8015d06:	4293      	cmp	r3, r2
 8015d08:	d102      	bne.n	8015d10 <HAL_UART_RxCpltCallback+0x24>
 8015d0a:	4b07      	ldr	r3, [pc, #28]	@ (8015d28 <HAL_UART_RxCpltCallback+0x3c>)
 8015d0c:	2201      	movs	r2, #1
 8015d0e:	701a      	strb	r2, [r3, #0]
}
 8015d10:	bf00      	nop
 8015d12:	370c      	adds	r7, #12
 8015d14:	46bd      	mov	sp, r7
 8015d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1a:	4770      	bx	lr
 8015d1c:	200006c0 	.word	0x200006c0
 8015d20:	200085dc 	.word	0x200085dc
 8015d24:	20000748 	.word	0x20000748
 8015d28:	200085dd 	.word	0x200085dd

08015d2c <rand>:
 8015d2c:	4b16      	ldr	r3, [pc, #88]	@ (8015d88 <rand+0x5c>)
 8015d2e:	b510      	push	{r4, lr}
 8015d30:	681c      	ldr	r4, [r3, #0]
 8015d32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d34:	b9b3      	cbnz	r3, 8015d64 <rand+0x38>
 8015d36:	2018      	movs	r0, #24
 8015d38:	f000 fb44 	bl	80163c4 <malloc>
 8015d3c:	4602      	mov	r2, r0
 8015d3e:	6320      	str	r0, [r4, #48]	@ 0x30
 8015d40:	b920      	cbnz	r0, 8015d4c <rand+0x20>
 8015d42:	4b12      	ldr	r3, [pc, #72]	@ (8015d8c <rand+0x60>)
 8015d44:	4812      	ldr	r0, [pc, #72]	@ (8015d90 <rand+0x64>)
 8015d46:	2152      	movs	r1, #82	@ 0x52
 8015d48:	f000 fad4 	bl	80162f4 <__assert_func>
 8015d4c:	4911      	ldr	r1, [pc, #68]	@ (8015d94 <rand+0x68>)
 8015d4e:	4b12      	ldr	r3, [pc, #72]	@ (8015d98 <rand+0x6c>)
 8015d50:	e9c0 1300 	strd	r1, r3, [r0]
 8015d54:	4b11      	ldr	r3, [pc, #68]	@ (8015d9c <rand+0x70>)
 8015d56:	6083      	str	r3, [r0, #8]
 8015d58:	230b      	movs	r3, #11
 8015d5a:	8183      	strh	r3, [r0, #12]
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	2001      	movs	r0, #1
 8015d60:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015d64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015d66:	480e      	ldr	r0, [pc, #56]	@ (8015da0 <rand+0x74>)
 8015d68:	690b      	ldr	r3, [r1, #16]
 8015d6a:	694c      	ldr	r4, [r1, #20]
 8015d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8015da4 <rand+0x78>)
 8015d6e:	4358      	muls	r0, r3
 8015d70:	fb02 0004 	mla	r0, r2, r4, r0
 8015d74:	fba3 3202 	umull	r3, r2, r3, r2
 8015d78:	3301      	adds	r3, #1
 8015d7a:	eb40 0002 	adc.w	r0, r0, r2
 8015d7e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015d82:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015d86:	bd10      	pop	{r4, pc}
 8015d88:	2000007c 	.word	0x2000007c
 8015d8c:	0801a582 	.word	0x0801a582
 8015d90:	0801a599 	.word	0x0801a599
 8015d94:	abcd330e 	.word	0xabcd330e
 8015d98:	e66d1234 	.word	0xe66d1234
 8015d9c:	0005deec 	.word	0x0005deec
 8015da0:	5851f42d 	.word	0x5851f42d
 8015da4:	4c957f2d 	.word	0x4c957f2d

08015da8 <std>:
 8015da8:	2300      	movs	r3, #0
 8015daa:	b510      	push	{r4, lr}
 8015dac:	4604      	mov	r4, r0
 8015dae:	e9c0 3300 	strd	r3, r3, [r0]
 8015db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015db6:	6083      	str	r3, [r0, #8]
 8015db8:	8181      	strh	r1, [r0, #12]
 8015dba:	6643      	str	r3, [r0, #100]	@ 0x64
 8015dbc:	81c2      	strh	r2, [r0, #14]
 8015dbe:	6183      	str	r3, [r0, #24]
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	2208      	movs	r2, #8
 8015dc4:	305c      	adds	r0, #92	@ 0x5c
 8015dc6:	f000 fa11 	bl	80161ec <memset>
 8015dca:	4b0d      	ldr	r3, [pc, #52]	@ (8015e00 <std+0x58>)
 8015dcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8015dce:	4b0d      	ldr	r3, [pc, #52]	@ (8015e04 <std+0x5c>)
 8015dd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8015e08 <std+0x60>)
 8015dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8015e0c <std+0x64>)
 8015dd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8015dda:	4b0d      	ldr	r3, [pc, #52]	@ (8015e10 <std+0x68>)
 8015ddc:	6224      	str	r4, [r4, #32]
 8015dde:	429c      	cmp	r4, r3
 8015de0:	d006      	beq.n	8015df0 <std+0x48>
 8015de2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015de6:	4294      	cmp	r4, r2
 8015de8:	d002      	beq.n	8015df0 <std+0x48>
 8015dea:	33d0      	adds	r3, #208	@ 0xd0
 8015dec:	429c      	cmp	r4, r3
 8015dee:	d105      	bne.n	8015dfc <std+0x54>
 8015df0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015df8:	f000 ba6a 	b.w	80162d0 <__retarget_lock_init_recursive>
 8015dfc:	bd10      	pop	{r4, pc}
 8015dfe:	bf00      	nop
 8015e00:	0801601d 	.word	0x0801601d
 8015e04:	0801603f 	.word	0x0801603f
 8015e08:	08016077 	.word	0x08016077
 8015e0c:	0801609b 	.word	0x0801609b
 8015e10:	200085e0 	.word	0x200085e0

08015e14 <stdio_exit_handler>:
 8015e14:	4a02      	ldr	r2, [pc, #8]	@ (8015e20 <stdio_exit_handler+0xc>)
 8015e16:	4903      	ldr	r1, [pc, #12]	@ (8015e24 <stdio_exit_handler+0x10>)
 8015e18:	4803      	ldr	r0, [pc, #12]	@ (8015e28 <stdio_exit_handler+0x14>)
 8015e1a:	f000 b869 	b.w	8015ef0 <_fwalk_sglue>
 8015e1e:	bf00      	nop
 8015e20:	20000070 	.word	0x20000070
 8015e24:	08016bd5 	.word	0x08016bd5
 8015e28:	20000080 	.word	0x20000080

08015e2c <cleanup_stdio>:
 8015e2c:	6841      	ldr	r1, [r0, #4]
 8015e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8015e60 <cleanup_stdio+0x34>)
 8015e30:	4299      	cmp	r1, r3
 8015e32:	b510      	push	{r4, lr}
 8015e34:	4604      	mov	r4, r0
 8015e36:	d001      	beq.n	8015e3c <cleanup_stdio+0x10>
 8015e38:	f000 fecc 	bl	8016bd4 <_fflush_r>
 8015e3c:	68a1      	ldr	r1, [r4, #8]
 8015e3e:	4b09      	ldr	r3, [pc, #36]	@ (8015e64 <cleanup_stdio+0x38>)
 8015e40:	4299      	cmp	r1, r3
 8015e42:	d002      	beq.n	8015e4a <cleanup_stdio+0x1e>
 8015e44:	4620      	mov	r0, r4
 8015e46:	f000 fec5 	bl	8016bd4 <_fflush_r>
 8015e4a:	68e1      	ldr	r1, [r4, #12]
 8015e4c:	4b06      	ldr	r3, [pc, #24]	@ (8015e68 <cleanup_stdio+0x3c>)
 8015e4e:	4299      	cmp	r1, r3
 8015e50:	d004      	beq.n	8015e5c <cleanup_stdio+0x30>
 8015e52:	4620      	mov	r0, r4
 8015e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e58:	f000 bebc 	b.w	8016bd4 <_fflush_r>
 8015e5c:	bd10      	pop	{r4, pc}
 8015e5e:	bf00      	nop
 8015e60:	200085e0 	.word	0x200085e0
 8015e64:	20008648 	.word	0x20008648
 8015e68:	200086b0 	.word	0x200086b0

08015e6c <global_stdio_init.part.0>:
 8015e6c:	b510      	push	{r4, lr}
 8015e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8015e9c <global_stdio_init.part.0+0x30>)
 8015e70:	4c0b      	ldr	r4, [pc, #44]	@ (8015ea0 <global_stdio_init.part.0+0x34>)
 8015e72:	4a0c      	ldr	r2, [pc, #48]	@ (8015ea4 <global_stdio_init.part.0+0x38>)
 8015e74:	601a      	str	r2, [r3, #0]
 8015e76:	4620      	mov	r0, r4
 8015e78:	2200      	movs	r2, #0
 8015e7a:	2104      	movs	r1, #4
 8015e7c:	f7ff ff94 	bl	8015da8 <std>
 8015e80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015e84:	2201      	movs	r2, #1
 8015e86:	2109      	movs	r1, #9
 8015e88:	f7ff ff8e 	bl	8015da8 <std>
 8015e8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015e90:	2202      	movs	r2, #2
 8015e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e96:	2112      	movs	r1, #18
 8015e98:	f7ff bf86 	b.w	8015da8 <std>
 8015e9c:	20008718 	.word	0x20008718
 8015ea0:	200085e0 	.word	0x200085e0
 8015ea4:	08015e15 	.word	0x08015e15

08015ea8 <__sfp_lock_acquire>:
 8015ea8:	4801      	ldr	r0, [pc, #4]	@ (8015eb0 <__sfp_lock_acquire+0x8>)
 8015eaa:	f000 ba12 	b.w	80162d2 <__retarget_lock_acquire_recursive>
 8015eae:	bf00      	nop
 8015eb0:	20008721 	.word	0x20008721

08015eb4 <__sfp_lock_release>:
 8015eb4:	4801      	ldr	r0, [pc, #4]	@ (8015ebc <__sfp_lock_release+0x8>)
 8015eb6:	f000 ba0d 	b.w	80162d4 <__retarget_lock_release_recursive>
 8015eba:	bf00      	nop
 8015ebc:	20008721 	.word	0x20008721

08015ec0 <__sinit>:
 8015ec0:	b510      	push	{r4, lr}
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	f7ff fff0 	bl	8015ea8 <__sfp_lock_acquire>
 8015ec8:	6a23      	ldr	r3, [r4, #32]
 8015eca:	b11b      	cbz	r3, 8015ed4 <__sinit+0x14>
 8015ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ed0:	f7ff bff0 	b.w	8015eb4 <__sfp_lock_release>
 8015ed4:	4b04      	ldr	r3, [pc, #16]	@ (8015ee8 <__sinit+0x28>)
 8015ed6:	6223      	str	r3, [r4, #32]
 8015ed8:	4b04      	ldr	r3, [pc, #16]	@ (8015eec <__sinit+0x2c>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d1f5      	bne.n	8015ecc <__sinit+0xc>
 8015ee0:	f7ff ffc4 	bl	8015e6c <global_stdio_init.part.0>
 8015ee4:	e7f2      	b.n	8015ecc <__sinit+0xc>
 8015ee6:	bf00      	nop
 8015ee8:	08015e2d 	.word	0x08015e2d
 8015eec:	20008718 	.word	0x20008718

08015ef0 <_fwalk_sglue>:
 8015ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ef4:	4607      	mov	r7, r0
 8015ef6:	4688      	mov	r8, r1
 8015ef8:	4614      	mov	r4, r2
 8015efa:	2600      	movs	r6, #0
 8015efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015f00:	f1b9 0901 	subs.w	r9, r9, #1
 8015f04:	d505      	bpl.n	8015f12 <_fwalk_sglue+0x22>
 8015f06:	6824      	ldr	r4, [r4, #0]
 8015f08:	2c00      	cmp	r4, #0
 8015f0a:	d1f7      	bne.n	8015efc <_fwalk_sglue+0xc>
 8015f0c:	4630      	mov	r0, r6
 8015f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f12:	89ab      	ldrh	r3, [r5, #12]
 8015f14:	2b01      	cmp	r3, #1
 8015f16:	d907      	bls.n	8015f28 <_fwalk_sglue+0x38>
 8015f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015f1c:	3301      	adds	r3, #1
 8015f1e:	d003      	beq.n	8015f28 <_fwalk_sglue+0x38>
 8015f20:	4629      	mov	r1, r5
 8015f22:	4638      	mov	r0, r7
 8015f24:	47c0      	blx	r8
 8015f26:	4306      	orrs	r6, r0
 8015f28:	3568      	adds	r5, #104	@ 0x68
 8015f2a:	e7e9      	b.n	8015f00 <_fwalk_sglue+0x10>

08015f2c <iprintf>:
 8015f2c:	b40f      	push	{r0, r1, r2, r3}
 8015f2e:	b507      	push	{r0, r1, r2, lr}
 8015f30:	4906      	ldr	r1, [pc, #24]	@ (8015f4c <iprintf+0x20>)
 8015f32:	ab04      	add	r3, sp, #16
 8015f34:	6808      	ldr	r0, [r1, #0]
 8015f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f3a:	6881      	ldr	r1, [r0, #8]
 8015f3c:	9301      	str	r3, [sp, #4]
 8015f3e:	f000 fb21 	bl	8016584 <_vfiprintf_r>
 8015f42:	b003      	add	sp, #12
 8015f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f48:	b004      	add	sp, #16
 8015f4a:	4770      	bx	lr
 8015f4c:	2000007c 	.word	0x2000007c

08015f50 <putchar>:
 8015f50:	4b02      	ldr	r3, [pc, #8]	@ (8015f5c <putchar+0xc>)
 8015f52:	4601      	mov	r1, r0
 8015f54:	6818      	ldr	r0, [r3, #0]
 8015f56:	6882      	ldr	r2, [r0, #8]
 8015f58:	f000 bed8 	b.w	8016d0c <_putc_r>
 8015f5c:	2000007c 	.word	0x2000007c

08015f60 <_puts_r>:
 8015f60:	6a03      	ldr	r3, [r0, #32]
 8015f62:	b570      	push	{r4, r5, r6, lr}
 8015f64:	6884      	ldr	r4, [r0, #8]
 8015f66:	4605      	mov	r5, r0
 8015f68:	460e      	mov	r6, r1
 8015f6a:	b90b      	cbnz	r3, 8015f70 <_puts_r+0x10>
 8015f6c:	f7ff ffa8 	bl	8015ec0 <__sinit>
 8015f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015f72:	07db      	lsls	r3, r3, #31
 8015f74:	d405      	bmi.n	8015f82 <_puts_r+0x22>
 8015f76:	89a3      	ldrh	r3, [r4, #12]
 8015f78:	0598      	lsls	r0, r3, #22
 8015f7a:	d402      	bmi.n	8015f82 <_puts_r+0x22>
 8015f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015f7e:	f000 f9a8 	bl	80162d2 <__retarget_lock_acquire_recursive>
 8015f82:	89a3      	ldrh	r3, [r4, #12]
 8015f84:	0719      	lsls	r1, r3, #28
 8015f86:	d502      	bpl.n	8015f8e <_puts_r+0x2e>
 8015f88:	6923      	ldr	r3, [r4, #16]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d135      	bne.n	8015ffa <_puts_r+0x9a>
 8015f8e:	4621      	mov	r1, r4
 8015f90:	4628      	mov	r0, r5
 8015f92:	f000 f8c5 	bl	8016120 <__swsetup_r>
 8015f96:	b380      	cbz	r0, 8015ffa <_puts_r+0x9a>
 8015f98:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8015f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015f9e:	07da      	lsls	r2, r3, #31
 8015fa0:	d405      	bmi.n	8015fae <_puts_r+0x4e>
 8015fa2:	89a3      	ldrh	r3, [r4, #12]
 8015fa4:	059b      	lsls	r3, r3, #22
 8015fa6:	d402      	bmi.n	8015fae <_puts_r+0x4e>
 8015fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015faa:	f000 f993 	bl	80162d4 <__retarget_lock_release_recursive>
 8015fae:	4628      	mov	r0, r5
 8015fb0:	bd70      	pop	{r4, r5, r6, pc}
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	da04      	bge.n	8015fc0 <_puts_r+0x60>
 8015fb6:	69a2      	ldr	r2, [r4, #24]
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	dc17      	bgt.n	8015fec <_puts_r+0x8c>
 8015fbc:	290a      	cmp	r1, #10
 8015fbe:	d015      	beq.n	8015fec <_puts_r+0x8c>
 8015fc0:	6823      	ldr	r3, [r4, #0]
 8015fc2:	1c5a      	adds	r2, r3, #1
 8015fc4:	6022      	str	r2, [r4, #0]
 8015fc6:	7019      	strb	r1, [r3, #0]
 8015fc8:	68a3      	ldr	r3, [r4, #8]
 8015fca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015fce:	3b01      	subs	r3, #1
 8015fd0:	60a3      	str	r3, [r4, #8]
 8015fd2:	2900      	cmp	r1, #0
 8015fd4:	d1ed      	bne.n	8015fb2 <_puts_r+0x52>
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	da11      	bge.n	8015ffe <_puts_r+0x9e>
 8015fda:	4622      	mov	r2, r4
 8015fdc:	210a      	movs	r1, #10
 8015fde:	4628      	mov	r0, r5
 8015fe0:	f000 f85f 	bl	80160a2 <__swbuf_r>
 8015fe4:	3001      	adds	r0, #1
 8015fe6:	d0d7      	beq.n	8015f98 <_puts_r+0x38>
 8015fe8:	250a      	movs	r5, #10
 8015fea:	e7d7      	b.n	8015f9c <_puts_r+0x3c>
 8015fec:	4622      	mov	r2, r4
 8015fee:	4628      	mov	r0, r5
 8015ff0:	f000 f857 	bl	80160a2 <__swbuf_r>
 8015ff4:	3001      	adds	r0, #1
 8015ff6:	d1e7      	bne.n	8015fc8 <_puts_r+0x68>
 8015ff8:	e7ce      	b.n	8015f98 <_puts_r+0x38>
 8015ffa:	3e01      	subs	r6, #1
 8015ffc:	e7e4      	b.n	8015fc8 <_puts_r+0x68>
 8015ffe:	6823      	ldr	r3, [r4, #0]
 8016000:	1c5a      	adds	r2, r3, #1
 8016002:	6022      	str	r2, [r4, #0]
 8016004:	220a      	movs	r2, #10
 8016006:	701a      	strb	r2, [r3, #0]
 8016008:	e7ee      	b.n	8015fe8 <_puts_r+0x88>
	...

0801600c <puts>:
 801600c:	4b02      	ldr	r3, [pc, #8]	@ (8016018 <puts+0xc>)
 801600e:	4601      	mov	r1, r0
 8016010:	6818      	ldr	r0, [r3, #0]
 8016012:	f7ff bfa5 	b.w	8015f60 <_puts_r>
 8016016:	bf00      	nop
 8016018:	2000007c 	.word	0x2000007c

0801601c <__sread>:
 801601c:	b510      	push	{r4, lr}
 801601e:	460c      	mov	r4, r1
 8016020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016024:	f000 f90c 	bl	8016240 <_read_r>
 8016028:	2800      	cmp	r0, #0
 801602a:	bfab      	itete	ge
 801602c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801602e:	89a3      	ldrhlt	r3, [r4, #12]
 8016030:	181b      	addge	r3, r3, r0
 8016032:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016036:	bfac      	ite	ge
 8016038:	6563      	strge	r3, [r4, #84]	@ 0x54
 801603a:	81a3      	strhlt	r3, [r4, #12]
 801603c:	bd10      	pop	{r4, pc}

0801603e <__swrite>:
 801603e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016042:	461f      	mov	r7, r3
 8016044:	898b      	ldrh	r3, [r1, #12]
 8016046:	05db      	lsls	r3, r3, #23
 8016048:	4605      	mov	r5, r0
 801604a:	460c      	mov	r4, r1
 801604c:	4616      	mov	r6, r2
 801604e:	d505      	bpl.n	801605c <__swrite+0x1e>
 8016050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016054:	2302      	movs	r3, #2
 8016056:	2200      	movs	r2, #0
 8016058:	f000 f8e0 	bl	801621c <_lseek_r>
 801605c:	89a3      	ldrh	r3, [r4, #12]
 801605e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016066:	81a3      	strh	r3, [r4, #12]
 8016068:	4632      	mov	r2, r6
 801606a:	463b      	mov	r3, r7
 801606c:	4628      	mov	r0, r5
 801606e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016072:	f000 b8f7 	b.w	8016264 <_write_r>

08016076 <__sseek>:
 8016076:	b510      	push	{r4, lr}
 8016078:	460c      	mov	r4, r1
 801607a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801607e:	f000 f8cd 	bl	801621c <_lseek_r>
 8016082:	1c43      	adds	r3, r0, #1
 8016084:	89a3      	ldrh	r3, [r4, #12]
 8016086:	bf15      	itete	ne
 8016088:	6560      	strne	r0, [r4, #84]	@ 0x54
 801608a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801608e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016092:	81a3      	strheq	r3, [r4, #12]
 8016094:	bf18      	it	ne
 8016096:	81a3      	strhne	r3, [r4, #12]
 8016098:	bd10      	pop	{r4, pc}

0801609a <__sclose>:
 801609a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801609e:	f000 b8ad 	b.w	80161fc <_close_r>

080160a2 <__swbuf_r>:
 80160a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a4:	460e      	mov	r6, r1
 80160a6:	4614      	mov	r4, r2
 80160a8:	4605      	mov	r5, r0
 80160aa:	b118      	cbz	r0, 80160b4 <__swbuf_r+0x12>
 80160ac:	6a03      	ldr	r3, [r0, #32]
 80160ae:	b90b      	cbnz	r3, 80160b4 <__swbuf_r+0x12>
 80160b0:	f7ff ff06 	bl	8015ec0 <__sinit>
 80160b4:	69a3      	ldr	r3, [r4, #24]
 80160b6:	60a3      	str	r3, [r4, #8]
 80160b8:	89a3      	ldrh	r3, [r4, #12]
 80160ba:	071a      	lsls	r2, r3, #28
 80160bc:	d501      	bpl.n	80160c2 <__swbuf_r+0x20>
 80160be:	6923      	ldr	r3, [r4, #16]
 80160c0:	b943      	cbnz	r3, 80160d4 <__swbuf_r+0x32>
 80160c2:	4621      	mov	r1, r4
 80160c4:	4628      	mov	r0, r5
 80160c6:	f000 f82b 	bl	8016120 <__swsetup_r>
 80160ca:	b118      	cbz	r0, 80160d4 <__swbuf_r+0x32>
 80160cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80160d0:	4638      	mov	r0, r7
 80160d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160d4:	6823      	ldr	r3, [r4, #0]
 80160d6:	6922      	ldr	r2, [r4, #16]
 80160d8:	1a98      	subs	r0, r3, r2
 80160da:	6963      	ldr	r3, [r4, #20]
 80160dc:	b2f6      	uxtb	r6, r6
 80160de:	4283      	cmp	r3, r0
 80160e0:	4637      	mov	r7, r6
 80160e2:	dc05      	bgt.n	80160f0 <__swbuf_r+0x4e>
 80160e4:	4621      	mov	r1, r4
 80160e6:	4628      	mov	r0, r5
 80160e8:	f000 fd74 	bl	8016bd4 <_fflush_r>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d1ed      	bne.n	80160cc <__swbuf_r+0x2a>
 80160f0:	68a3      	ldr	r3, [r4, #8]
 80160f2:	3b01      	subs	r3, #1
 80160f4:	60a3      	str	r3, [r4, #8]
 80160f6:	6823      	ldr	r3, [r4, #0]
 80160f8:	1c5a      	adds	r2, r3, #1
 80160fa:	6022      	str	r2, [r4, #0]
 80160fc:	701e      	strb	r6, [r3, #0]
 80160fe:	6962      	ldr	r2, [r4, #20]
 8016100:	1c43      	adds	r3, r0, #1
 8016102:	429a      	cmp	r2, r3
 8016104:	d004      	beq.n	8016110 <__swbuf_r+0x6e>
 8016106:	89a3      	ldrh	r3, [r4, #12]
 8016108:	07db      	lsls	r3, r3, #31
 801610a:	d5e1      	bpl.n	80160d0 <__swbuf_r+0x2e>
 801610c:	2e0a      	cmp	r6, #10
 801610e:	d1df      	bne.n	80160d0 <__swbuf_r+0x2e>
 8016110:	4621      	mov	r1, r4
 8016112:	4628      	mov	r0, r5
 8016114:	f000 fd5e 	bl	8016bd4 <_fflush_r>
 8016118:	2800      	cmp	r0, #0
 801611a:	d0d9      	beq.n	80160d0 <__swbuf_r+0x2e>
 801611c:	e7d6      	b.n	80160cc <__swbuf_r+0x2a>
	...

08016120 <__swsetup_r>:
 8016120:	b538      	push	{r3, r4, r5, lr}
 8016122:	4b29      	ldr	r3, [pc, #164]	@ (80161c8 <__swsetup_r+0xa8>)
 8016124:	4605      	mov	r5, r0
 8016126:	6818      	ldr	r0, [r3, #0]
 8016128:	460c      	mov	r4, r1
 801612a:	b118      	cbz	r0, 8016134 <__swsetup_r+0x14>
 801612c:	6a03      	ldr	r3, [r0, #32]
 801612e:	b90b      	cbnz	r3, 8016134 <__swsetup_r+0x14>
 8016130:	f7ff fec6 	bl	8015ec0 <__sinit>
 8016134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016138:	0719      	lsls	r1, r3, #28
 801613a:	d422      	bmi.n	8016182 <__swsetup_r+0x62>
 801613c:	06da      	lsls	r2, r3, #27
 801613e:	d407      	bmi.n	8016150 <__swsetup_r+0x30>
 8016140:	2209      	movs	r2, #9
 8016142:	602a      	str	r2, [r5, #0]
 8016144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016148:	81a3      	strh	r3, [r4, #12]
 801614a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801614e:	e033      	b.n	80161b8 <__swsetup_r+0x98>
 8016150:	0758      	lsls	r0, r3, #29
 8016152:	d512      	bpl.n	801617a <__swsetup_r+0x5a>
 8016154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016156:	b141      	cbz	r1, 801616a <__swsetup_r+0x4a>
 8016158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801615c:	4299      	cmp	r1, r3
 801615e:	d002      	beq.n	8016166 <__swsetup_r+0x46>
 8016160:	4628      	mov	r0, r5
 8016162:	f000 f8e5 	bl	8016330 <_free_r>
 8016166:	2300      	movs	r3, #0
 8016168:	6363      	str	r3, [r4, #52]	@ 0x34
 801616a:	89a3      	ldrh	r3, [r4, #12]
 801616c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016170:	81a3      	strh	r3, [r4, #12]
 8016172:	2300      	movs	r3, #0
 8016174:	6063      	str	r3, [r4, #4]
 8016176:	6923      	ldr	r3, [r4, #16]
 8016178:	6023      	str	r3, [r4, #0]
 801617a:	89a3      	ldrh	r3, [r4, #12]
 801617c:	f043 0308 	orr.w	r3, r3, #8
 8016180:	81a3      	strh	r3, [r4, #12]
 8016182:	6923      	ldr	r3, [r4, #16]
 8016184:	b94b      	cbnz	r3, 801619a <__swsetup_r+0x7a>
 8016186:	89a3      	ldrh	r3, [r4, #12]
 8016188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801618c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016190:	d003      	beq.n	801619a <__swsetup_r+0x7a>
 8016192:	4621      	mov	r1, r4
 8016194:	4628      	mov	r0, r5
 8016196:	f000 fd7d 	bl	8016c94 <__smakebuf_r>
 801619a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801619e:	f013 0201 	ands.w	r2, r3, #1
 80161a2:	d00a      	beq.n	80161ba <__swsetup_r+0x9a>
 80161a4:	2200      	movs	r2, #0
 80161a6:	60a2      	str	r2, [r4, #8]
 80161a8:	6962      	ldr	r2, [r4, #20]
 80161aa:	4252      	negs	r2, r2
 80161ac:	61a2      	str	r2, [r4, #24]
 80161ae:	6922      	ldr	r2, [r4, #16]
 80161b0:	b942      	cbnz	r2, 80161c4 <__swsetup_r+0xa4>
 80161b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80161b6:	d1c5      	bne.n	8016144 <__swsetup_r+0x24>
 80161b8:	bd38      	pop	{r3, r4, r5, pc}
 80161ba:	0799      	lsls	r1, r3, #30
 80161bc:	bf58      	it	pl
 80161be:	6962      	ldrpl	r2, [r4, #20]
 80161c0:	60a2      	str	r2, [r4, #8]
 80161c2:	e7f4      	b.n	80161ae <__swsetup_r+0x8e>
 80161c4:	2000      	movs	r0, #0
 80161c6:	e7f7      	b.n	80161b8 <__swsetup_r+0x98>
 80161c8:	2000007c 	.word	0x2000007c

080161cc <memcmp>:
 80161cc:	b510      	push	{r4, lr}
 80161ce:	3901      	subs	r1, #1
 80161d0:	4402      	add	r2, r0
 80161d2:	4290      	cmp	r0, r2
 80161d4:	d101      	bne.n	80161da <memcmp+0xe>
 80161d6:	2000      	movs	r0, #0
 80161d8:	e005      	b.n	80161e6 <memcmp+0x1a>
 80161da:	7803      	ldrb	r3, [r0, #0]
 80161dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80161e0:	42a3      	cmp	r3, r4
 80161e2:	d001      	beq.n	80161e8 <memcmp+0x1c>
 80161e4:	1b18      	subs	r0, r3, r4
 80161e6:	bd10      	pop	{r4, pc}
 80161e8:	3001      	adds	r0, #1
 80161ea:	e7f2      	b.n	80161d2 <memcmp+0x6>

080161ec <memset>:
 80161ec:	4402      	add	r2, r0
 80161ee:	4603      	mov	r3, r0
 80161f0:	4293      	cmp	r3, r2
 80161f2:	d100      	bne.n	80161f6 <memset+0xa>
 80161f4:	4770      	bx	lr
 80161f6:	f803 1b01 	strb.w	r1, [r3], #1
 80161fa:	e7f9      	b.n	80161f0 <memset+0x4>

080161fc <_close_r>:
 80161fc:	b538      	push	{r3, r4, r5, lr}
 80161fe:	4d06      	ldr	r5, [pc, #24]	@ (8016218 <_close_r+0x1c>)
 8016200:	2300      	movs	r3, #0
 8016202:	4604      	mov	r4, r0
 8016204:	4608      	mov	r0, r1
 8016206:	602b      	str	r3, [r5, #0]
 8016208:	f7eb f904 	bl	8001414 <_close>
 801620c:	1c43      	adds	r3, r0, #1
 801620e:	d102      	bne.n	8016216 <_close_r+0x1a>
 8016210:	682b      	ldr	r3, [r5, #0]
 8016212:	b103      	cbz	r3, 8016216 <_close_r+0x1a>
 8016214:	6023      	str	r3, [r4, #0]
 8016216:	bd38      	pop	{r3, r4, r5, pc}
 8016218:	2000871c 	.word	0x2000871c

0801621c <_lseek_r>:
 801621c:	b538      	push	{r3, r4, r5, lr}
 801621e:	4d07      	ldr	r5, [pc, #28]	@ (801623c <_lseek_r+0x20>)
 8016220:	4604      	mov	r4, r0
 8016222:	4608      	mov	r0, r1
 8016224:	4611      	mov	r1, r2
 8016226:	2200      	movs	r2, #0
 8016228:	602a      	str	r2, [r5, #0]
 801622a:	461a      	mov	r2, r3
 801622c:	f7eb f919 	bl	8001462 <_lseek>
 8016230:	1c43      	adds	r3, r0, #1
 8016232:	d102      	bne.n	801623a <_lseek_r+0x1e>
 8016234:	682b      	ldr	r3, [r5, #0]
 8016236:	b103      	cbz	r3, 801623a <_lseek_r+0x1e>
 8016238:	6023      	str	r3, [r4, #0]
 801623a:	bd38      	pop	{r3, r4, r5, pc}
 801623c:	2000871c 	.word	0x2000871c

08016240 <_read_r>:
 8016240:	b538      	push	{r3, r4, r5, lr}
 8016242:	4d07      	ldr	r5, [pc, #28]	@ (8016260 <_read_r+0x20>)
 8016244:	4604      	mov	r4, r0
 8016246:	4608      	mov	r0, r1
 8016248:	4611      	mov	r1, r2
 801624a:	2200      	movs	r2, #0
 801624c:	602a      	str	r2, [r5, #0]
 801624e:	461a      	mov	r2, r3
 8016250:	f7eb f8c3 	bl	80013da <_read>
 8016254:	1c43      	adds	r3, r0, #1
 8016256:	d102      	bne.n	801625e <_read_r+0x1e>
 8016258:	682b      	ldr	r3, [r5, #0]
 801625a:	b103      	cbz	r3, 801625e <_read_r+0x1e>
 801625c:	6023      	str	r3, [r4, #0]
 801625e:	bd38      	pop	{r3, r4, r5, pc}
 8016260:	2000871c 	.word	0x2000871c

08016264 <_write_r>:
 8016264:	b538      	push	{r3, r4, r5, lr}
 8016266:	4d07      	ldr	r5, [pc, #28]	@ (8016284 <_write_r+0x20>)
 8016268:	4604      	mov	r4, r0
 801626a:	4608      	mov	r0, r1
 801626c:	4611      	mov	r1, r2
 801626e:	2200      	movs	r2, #0
 8016270:	602a      	str	r2, [r5, #0]
 8016272:	461a      	mov	r2, r3
 8016274:	f7ea fcce 	bl	8000c14 <_write>
 8016278:	1c43      	adds	r3, r0, #1
 801627a:	d102      	bne.n	8016282 <_write_r+0x1e>
 801627c:	682b      	ldr	r3, [r5, #0]
 801627e:	b103      	cbz	r3, 8016282 <_write_r+0x1e>
 8016280:	6023      	str	r3, [r4, #0]
 8016282:	bd38      	pop	{r3, r4, r5, pc}
 8016284:	2000871c 	.word	0x2000871c

08016288 <__libc_init_array>:
 8016288:	b570      	push	{r4, r5, r6, lr}
 801628a:	4d0d      	ldr	r5, [pc, #52]	@ (80162c0 <__libc_init_array+0x38>)
 801628c:	4c0d      	ldr	r4, [pc, #52]	@ (80162c4 <__libc_init_array+0x3c>)
 801628e:	1b64      	subs	r4, r4, r5
 8016290:	10a4      	asrs	r4, r4, #2
 8016292:	2600      	movs	r6, #0
 8016294:	42a6      	cmp	r6, r4
 8016296:	d109      	bne.n	80162ac <__libc_init_array+0x24>
 8016298:	4d0b      	ldr	r5, [pc, #44]	@ (80162c8 <__libc_init_array+0x40>)
 801629a:	4c0c      	ldr	r4, [pc, #48]	@ (80162cc <__libc_init_array+0x44>)
 801629c:	f000 fde8 	bl	8016e70 <_init>
 80162a0:	1b64      	subs	r4, r4, r5
 80162a2:	10a4      	asrs	r4, r4, #2
 80162a4:	2600      	movs	r6, #0
 80162a6:	42a6      	cmp	r6, r4
 80162a8:	d105      	bne.n	80162b6 <__libc_init_array+0x2e>
 80162aa:	bd70      	pop	{r4, r5, r6, pc}
 80162ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80162b0:	4798      	blx	r3
 80162b2:	3601      	adds	r6, #1
 80162b4:	e7ee      	b.n	8016294 <__libc_init_array+0xc>
 80162b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80162ba:	4798      	blx	r3
 80162bc:	3601      	adds	r6, #1
 80162be:	e7f2      	b.n	80162a6 <__libc_init_array+0x1e>
 80162c0:	0801a668 	.word	0x0801a668
 80162c4:	0801a668 	.word	0x0801a668
 80162c8:	0801a668 	.word	0x0801a668
 80162cc:	0801a66c 	.word	0x0801a66c

080162d0 <__retarget_lock_init_recursive>:
 80162d0:	4770      	bx	lr

080162d2 <__retarget_lock_acquire_recursive>:
 80162d2:	4770      	bx	lr

080162d4 <__retarget_lock_release_recursive>:
 80162d4:	4770      	bx	lr

080162d6 <memcpy>:
 80162d6:	440a      	add	r2, r1
 80162d8:	4291      	cmp	r1, r2
 80162da:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80162de:	d100      	bne.n	80162e2 <memcpy+0xc>
 80162e0:	4770      	bx	lr
 80162e2:	b510      	push	{r4, lr}
 80162e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80162ec:	4291      	cmp	r1, r2
 80162ee:	d1f9      	bne.n	80162e4 <memcpy+0xe>
 80162f0:	bd10      	pop	{r4, pc}
	...

080162f4 <__assert_func>:
 80162f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80162f6:	4614      	mov	r4, r2
 80162f8:	461a      	mov	r2, r3
 80162fa:	4b09      	ldr	r3, [pc, #36]	@ (8016320 <__assert_func+0x2c>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	4605      	mov	r5, r0
 8016300:	68d8      	ldr	r0, [r3, #12]
 8016302:	b14c      	cbz	r4, 8016318 <__assert_func+0x24>
 8016304:	4b07      	ldr	r3, [pc, #28]	@ (8016324 <__assert_func+0x30>)
 8016306:	9100      	str	r1, [sp, #0]
 8016308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801630c:	4906      	ldr	r1, [pc, #24]	@ (8016328 <__assert_func+0x34>)
 801630e:	462b      	mov	r3, r5
 8016310:	f000 fc88 	bl	8016c24 <fiprintf>
 8016314:	f000 fd60 	bl	8016dd8 <abort>
 8016318:	4b04      	ldr	r3, [pc, #16]	@ (801632c <__assert_func+0x38>)
 801631a:	461c      	mov	r4, r3
 801631c:	e7f3      	b.n	8016306 <__assert_func+0x12>
 801631e:	bf00      	nop
 8016320:	2000007c 	.word	0x2000007c
 8016324:	0801a5f1 	.word	0x0801a5f1
 8016328:	0801a5fe 	.word	0x0801a5fe
 801632c:	0801a62c 	.word	0x0801a62c

08016330 <_free_r>:
 8016330:	b538      	push	{r3, r4, r5, lr}
 8016332:	4605      	mov	r5, r0
 8016334:	2900      	cmp	r1, #0
 8016336:	d041      	beq.n	80163bc <_free_r+0x8c>
 8016338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801633c:	1f0c      	subs	r4, r1, #4
 801633e:	2b00      	cmp	r3, #0
 8016340:	bfb8      	it	lt
 8016342:	18e4      	addlt	r4, r4, r3
 8016344:	f000 f8e8 	bl	8016518 <__malloc_lock>
 8016348:	4a1d      	ldr	r2, [pc, #116]	@ (80163c0 <_free_r+0x90>)
 801634a:	6813      	ldr	r3, [r2, #0]
 801634c:	b933      	cbnz	r3, 801635c <_free_r+0x2c>
 801634e:	6063      	str	r3, [r4, #4]
 8016350:	6014      	str	r4, [r2, #0]
 8016352:	4628      	mov	r0, r5
 8016354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016358:	f000 b8e4 	b.w	8016524 <__malloc_unlock>
 801635c:	42a3      	cmp	r3, r4
 801635e:	d908      	bls.n	8016372 <_free_r+0x42>
 8016360:	6820      	ldr	r0, [r4, #0]
 8016362:	1821      	adds	r1, r4, r0
 8016364:	428b      	cmp	r3, r1
 8016366:	bf01      	itttt	eq
 8016368:	6819      	ldreq	r1, [r3, #0]
 801636a:	685b      	ldreq	r3, [r3, #4]
 801636c:	1809      	addeq	r1, r1, r0
 801636e:	6021      	streq	r1, [r4, #0]
 8016370:	e7ed      	b.n	801634e <_free_r+0x1e>
 8016372:	461a      	mov	r2, r3
 8016374:	685b      	ldr	r3, [r3, #4]
 8016376:	b10b      	cbz	r3, 801637c <_free_r+0x4c>
 8016378:	42a3      	cmp	r3, r4
 801637a:	d9fa      	bls.n	8016372 <_free_r+0x42>
 801637c:	6811      	ldr	r1, [r2, #0]
 801637e:	1850      	adds	r0, r2, r1
 8016380:	42a0      	cmp	r0, r4
 8016382:	d10b      	bne.n	801639c <_free_r+0x6c>
 8016384:	6820      	ldr	r0, [r4, #0]
 8016386:	4401      	add	r1, r0
 8016388:	1850      	adds	r0, r2, r1
 801638a:	4283      	cmp	r3, r0
 801638c:	6011      	str	r1, [r2, #0]
 801638e:	d1e0      	bne.n	8016352 <_free_r+0x22>
 8016390:	6818      	ldr	r0, [r3, #0]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	6053      	str	r3, [r2, #4]
 8016396:	4408      	add	r0, r1
 8016398:	6010      	str	r0, [r2, #0]
 801639a:	e7da      	b.n	8016352 <_free_r+0x22>
 801639c:	d902      	bls.n	80163a4 <_free_r+0x74>
 801639e:	230c      	movs	r3, #12
 80163a0:	602b      	str	r3, [r5, #0]
 80163a2:	e7d6      	b.n	8016352 <_free_r+0x22>
 80163a4:	6820      	ldr	r0, [r4, #0]
 80163a6:	1821      	adds	r1, r4, r0
 80163a8:	428b      	cmp	r3, r1
 80163aa:	bf04      	itt	eq
 80163ac:	6819      	ldreq	r1, [r3, #0]
 80163ae:	685b      	ldreq	r3, [r3, #4]
 80163b0:	6063      	str	r3, [r4, #4]
 80163b2:	bf04      	itt	eq
 80163b4:	1809      	addeq	r1, r1, r0
 80163b6:	6021      	streq	r1, [r4, #0]
 80163b8:	6054      	str	r4, [r2, #4]
 80163ba:	e7ca      	b.n	8016352 <_free_r+0x22>
 80163bc:	bd38      	pop	{r3, r4, r5, pc}
 80163be:	bf00      	nop
 80163c0:	20008728 	.word	0x20008728

080163c4 <malloc>:
 80163c4:	4b02      	ldr	r3, [pc, #8]	@ (80163d0 <malloc+0xc>)
 80163c6:	4601      	mov	r1, r0
 80163c8:	6818      	ldr	r0, [r3, #0]
 80163ca:	f000 b825 	b.w	8016418 <_malloc_r>
 80163ce:	bf00      	nop
 80163d0:	2000007c 	.word	0x2000007c

080163d4 <sbrk_aligned>:
 80163d4:	b570      	push	{r4, r5, r6, lr}
 80163d6:	4e0f      	ldr	r6, [pc, #60]	@ (8016414 <sbrk_aligned+0x40>)
 80163d8:	460c      	mov	r4, r1
 80163da:	6831      	ldr	r1, [r6, #0]
 80163dc:	4605      	mov	r5, r0
 80163de:	b911      	cbnz	r1, 80163e6 <sbrk_aligned+0x12>
 80163e0:	f000 fcea 	bl	8016db8 <_sbrk_r>
 80163e4:	6030      	str	r0, [r6, #0]
 80163e6:	4621      	mov	r1, r4
 80163e8:	4628      	mov	r0, r5
 80163ea:	f000 fce5 	bl	8016db8 <_sbrk_r>
 80163ee:	1c43      	adds	r3, r0, #1
 80163f0:	d103      	bne.n	80163fa <sbrk_aligned+0x26>
 80163f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80163f6:	4620      	mov	r0, r4
 80163f8:	bd70      	pop	{r4, r5, r6, pc}
 80163fa:	1cc4      	adds	r4, r0, #3
 80163fc:	f024 0403 	bic.w	r4, r4, #3
 8016400:	42a0      	cmp	r0, r4
 8016402:	d0f8      	beq.n	80163f6 <sbrk_aligned+0x22>
 8016404:	1a21      	subs	r1, r4, r0
 8016406:	4628      	mov	r0, r5
 8016408:	f000 fcd6 	bl	8016db8 <_sbrk_r>
 801640c:	3001      	adds	r0, #1
 801640e:	d1f2      	bne.n	80163f6 <sbrk_aligned+0x22>
 8016410:	e7ef      	b.n	80163f2 <sbrk_aligned+0x1e>
 8016412:	bf00      	nop
 8016414:	20008724 	.word	0x20008724

08016418 <_malloc_r>:
 8016418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801641c:	1ccd      	adds	r5, r1, #3
 801641e:	f025 0503 	bic.w	r5, r5, #3
 8016422:	3508      	adds	r5, #8
 8016424:	2d0c      	cmp	r5, #12
 8016426:	bf38      	it	cc
 8016428:	250c      	movcc	r5, #12
 801642a:	2d00      	cmp	r5, #0
 801642c:	4606      	mov	r6, r0
 801642e:	db01      	blt.n	8016434 <_malloc_r+0x1c>
 8016430:	42a9      	cmp	r1, r5
 8016432:	d904      	bls.n	801643e <_malloc_r+0x26>
 8016434:	230c      	movs	r3, #12
 8016436:	6033      	str	r3, [r6, #0]
 8016438:	2000      	movs	r0, #0
 801643a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801643e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016514 <_malloc_r+0xfc>
 8016442:	f000 f869 	bl	8016518 <__malloc_lock>
 8016446:	f8d8 3000 	ldr.w	r3, [r8]
 801644a:	461c      	mov	r4, r3
 801644c:	bb44      	cbnz	r4, 80164a0 <_malloc_r+0x88>
 801644e:	4629      	mov	r1, r5
 8016450:	4630      	mov	r0, r6
 8016452:	f7ff ffbf 	bl	80163d4 <sbrk_aligned>
 8016456:	1c43      	adds	r3, r0, #1
 8016458:	4604      	mov	r4, r0
 801645a:	d158      	bne.n	801650e <_malloc_r+0xf6>
 801645c:	f8d8 4000 	ldr.w	r4, [r8]
 8016460:	4627      	mov	r7, r4
 8016462:	2f00      	cmp	r7, #0
 8016464:	d143      	bne.n	80164ee <_malloc_r+0xd6>
 8016466:	2c00      	cmp	r4, #0
 8016468:	d04b      	beq.n	8016502 <_malloc_r+0xea>
 801646a:	6823      	ldr	r3, [r4, #0]
 801646c:	4639      	mov	r1, r7
 801646e:	4630      	mov	r0, r6
 8016470:	eb04 0903 	add.w	r9, r4, r3
 8016474:	f000 fca0 	bl	8016db8 <_sbrk_r>
 8016478:	4581      	cmp	r9, r0
 801647a:	d142      	bne.n	8016502 <_malloc_r+0xea>
 801647c:	6821      	ldr	r1, [r4, #0]
 801647e:	1a6d      	subs	r5, r5, r1
 8016480:	4629      	mov	r1, r5
 8016482:	4630      	mov	r0, r6
 8016484:	f7ff ffa6 	bl	80163d4 <sbrk_aligned>
 8016488:	3001      	adds	r0, #1
 801648a:	d03a      	beq.n	8016502 <_malloc_r+0xea>
 801648c:	6823      	ldr	r3, [r4, #0]
 801648e:	442b      	add	r3, r5
 8016490:	6023      	str	r3, [r4, #0]
 8016492:	f8d8 3000 	ldr.w	r3, [r8]
 8016496:	685a      	ldr	r2, [r3, #4]
 8016498:	bb62      	cbnz	r2, 80164f4 <_malloc_r+0xdc>
 801649a:	f8c8 7000 	str.w	r7, [r8]
 801649e:	e00f      	b.n	80164c0 <_malloc_r+0xa8>
 80164a0:	6822      	ldr	r2, [r4, #0]
 80164a2:	1b52      	subs	r2, r2, r5
 80164a4:	d420      	bmi.n	80164e8 <_malloc_r+0xd0>
 80164a6:	2a0b      	cmp	r2, #11
 80164a8:	d917      	bls.n	80164da <_malloc_r+0xc2>
 80164aa:	1961      	adds	r1, r4, r5
 80164ac:	42a3      	cmp	r3, r4
 80164ae:	6025      	str	r5, [r4, #0]
 80164b0:	bf18      	it	ne
 80164b2:	6059      	strne	r1, [r3, #4]
 80164b4:	6863      	ldr	r3, [r4, #4]
 80164b6:	bf08      	it	eq
 80164b8:	f8c8 1000 	streq.w	r1, [r8]
 80164bc:	5162      	str	r2, [r4, r5]
 80164be:	604b      	str	r3, [r1, #4]
 80164c0:	4630      	mov	r0, r6
 80164c2:	f000 f82f 	bl	8016524 <__malloc_unlock>
 80164c6:	f104 000b 	add.w	r0, r4, #11
 80164ca:	1d23      	adds	r3, r4, #4
 80164cc:	f020 0007 	bic.w	r0, r0, #7
 80164d0:	1ac2      	subs	r2, r0, r3
 80164d2:	bf1c      	itt	ne
 80164d4:	1a1b      	subne	r3, r3, r0
 80164d6:	50a3      	strne	r3, [r4, r2]
 80164d8:	e7af      	b.n	801643a <_malloc_r+0x22>
 80164da:	6862      	ldr	r2, [r4, #4]
 80164dc:	42a3      	cmp	r3, r4
 80164de:	bf0c      	ite	eq
 80164e0:	f8c8 2000 	streq.w	r2, [r8]
 80164e4:	605a      	strne	r2, [r3, #4]
 80164e6:	e7eb      	b.n	80164c0 <_malloc_r+0xa8>
 80164e8:	4623      	mov	r3, r4
 80164ea:	6864      	ldr	r4, [r4, #4]
 80164ec:	e7ae      	b.n	801644c <_malloc_r+0x34>
 80164ee:	463c      	mov	r4, r7
 80164f0:	687f      	ldr	r7, [r7, #4]
 80164f2:	e7b6      	b.n	8016462 <_malloc_r+0x4a>
 80164f4:	461a      	mov	r2, r3
 80164f6:	685b      	ldr	r3, [r3, #4]
 80164f8:	42a3      	cmp	r3, r4
 80164fa:	d1fb      	bne.n	80164f4 <_malloc_r+0xdc>
 80164fc:	2300      	movs	r3, #0
 80164fe:	6053      	str	r3, [r2, #4]
 8016500:	e7de      	b.n	80164c0 <_malloc_r+0xa8>
 8016502:	230c      	movs	r3, #12
 8016504:	6033      	str	r3, [r6, #0]
 8016506:	4630      	mov	r0, r6
 8016508:	f000 f80c 	bl	8016524 <__malloc_unlock>
 801650c:	e794      	b.n	8016438 <_malloc_r+0x20>
 801650e:	6005      	str	r5, [r0, #0]
 8016510:	e7d6      	b.n	80164c0 <_malloc_r+0xa8>
 8016512:	bf00      	nop
 8016514:	20008728 	.word	0x20008728

08016518 <__malloc_lock>:
 8016518:	4801      	ldr	r0, [pc, #4]	@ (8016520 <__malloc_lock+0x8>)
 801651a:	f7ff beda 	b.w	80162d2 <__retarget_lock_acquire_recursive>
 801651e:	bf00      	nop
 8016520:	20008720 	.word	0x20008720

08016524 <__malloc_unlock>:
 8016524:	4801      	ldr	r0, [pc, #4]	@ (801652c <__malloc_unlock+0x8>)
 8016526:	f7ff bed5 	b.w	80162d4 <__retarget_lock_release_recursive>
 801652a:	bf00      	nop
 801652c:	20008720 	.word	0x20008720

08016530 <__sfputc_r>:
 8016530:	6893      	ldr	r3, [r2, #8]
 8016532:	3b01      	subs	r3, #1
 8016534:	2b00      	cmp	r3, #0
 8016536:	b410      	push	{r4}
 8016538:	6093      	str	r3, [r2, #8]
 801653a:	da08      	bge.n	801654e <__sfputc_r+0x1e>
 801653c:	6994      	ldr	r4, [r2, #24]
 801653e:	42a3      	cmp	r3, r4
 8016540:	db01      	blt.n	8016546 <__sfputc_r+0x16>
 8016542:	290a      	cmp	r1, #10
 8016544:	d103      	bne.n	801654e <__sfputc_r+0x1e>
 8016546:	f85d 4b04 	ldr.w	r4, [sp], #4
 801654a:	f7ff bdaa 	b.w	80160a2 <__swbuf_r>
 801654e:	6813      	ldr	r3, [r2, #0]
 8016550:	1c58      	adds	r0, r3, #1
 8016552:	6010      	str	r0, [r2, #0]
 8016554:	7019      	strb	r1, [r3, #0]
 8016556:	4608      	mov	r0, r1
 8016558:	f85d 4b04 	ldr.w	r4, [sp], #4
 801655c:	4770      	bx	lr

0801655e <__sfputs_r>:
 801655e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016560:	4606      	mov	r6, r0
 8016562:	460f      	mov	r7, r1
 8016564:	4614      	mov	r4, r2
 8016566:	18d5      	adds	r5, r2, r3
 8016568:	42ac      	cmp	r4, r5
 801656a:	d101      	bne.n	8016570 <__sfputs_r+0x12>
 801656c:	2000      	movs	r0, #0
 801656e:	e007      	b.n	8016580 <__sfputs_r+0x22>
 8016570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016574:	463a      	mov	r2, r7
 8016576:	4630      	mov	r0, r6
 8016578:	f7ff ffda 	bl	8016530 <__sfputc_r>
 801657c:	1c43      	adds	r3, r0, #1
 801657e:	d1f3      	bne.n	8016568 <__sfputs_r+0xa>
 8016580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016584 <_vfiprintf_r>:
 8016584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016588:	460d      	mov	r5, r1
 801658a:	b09d      	sub	sp, #116	@ 0x74
 801658c:	4614      	mov	r4, r2
 801658e:	4698      	mov	r8, r3
 8016590:	4606      	mov	r6, r0
 8016592:	b118      	cbz	r0, 801659c <_vfiprintf_r+0x18>
 8016594:	6a03      	ldr	r3, [r0, #32]
 8016596:	b90b      	cbnz	r3, 801659c <_vfiprintf_r+0x18>
 8016598:	f7ff fc92 	bl	8015ec0 <__sinit>
 801659c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801659e:	07d9      	lsls	r1, r3, #31
 80165a0:	d405      	bmi.n	80165ae <_vfiprintf_r+0x2a>
 80165a2:	89ab      	ldrh	r3, [r5, #12]
 80165a4:	059a      	lsls	r2, r3, #22
 80165a6:	d402      	bmi.n	80165ae <_vfiprintf_r+0x2a>
 80165a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80165aa:	f7ff fe92 	bl	80162d2 <__retarget_lock_acquire_recursive>
 80165ae:	89ab      	ldrh	r3, [r5, #12]
 80165b0:	071b      	lsls	r3, r3, #28
 80165b2:	d501      	bpl.n	80165b8 <_vfiprintf_r+0x34>
 80165b4:	692b      	ldr	r3, [r5, #16]
 80165b6:	b99b      	cbnz	r3, 80165e0 <_vfiprintf_r+0x5c>
 80165b8:	4629      	mov	r1, r5
 80165ba:	4630      	mov	r0, r6
 80165bc:	f7ff fdb0 	bl	8016120 <__swsetup_r>
 80165c0:	b170      	cbz	r0, 80165e0 <_vfiprintf_r+0x5c>
 80165c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80165c4:	07dc      	lsls	r4, r3, #31
 80165c6:	d504      	bpl.n	80165d2 <_vfiprintf_r+0x4e>
 80165c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80165cc:	b01d      	add	sp, #116	@ 0x74
 80165ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d2:	89ab      	ldrh	r3, [r5, #12]
 80165d4:	0598      	lsls	r0, r3, #22
 80165d6:	d4f7      	bmi.n	80165c8 <_vfiprintf_r+0x44>
 80165d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80165da:	f7ff fe7b 	bl	80162d4 <__retarget_lock_release_recursive>
 80165de:	e7f3      	b.n	80165c8 <_vfiprintf_r+0x44>
 80165e0:	2300      	movs	r3, #0
 80165e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80165e4:	2320      	movs	r3, #32
 80165e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80165ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80165ee:	2330      	movs	r3, #48	@ 0x30
 80165f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80167a0 <_vfiprintf_r+0x21c>
 80165f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80165f8:	f04f 0901 	mov.w	r9, #1
 80165fc:	4623      	mov	r3, r4
 80165fe:	469a      	mov	sl, r3
 8016600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016604:	b10a      	cbz	r2, 801660a <_vfiprintf_r+0x86>
 8016606:	2a25      	cmp	r2, #37	@ 0x25
 8016608:	d1f9      	bne.n	80165fe <_vfiprintf_r+0x7a>
 801660a:	ebba 0b04 	subs.w	fp, sl, r4
 801660e:	d00b      	beq.n	8016628 <_vfiprintf_r+0xa4>
 8016610:	465b      	mov	r3, fp
 8016612:	4622      	mov	r2, r4
 8016614:	4629      	mov	r1, r5
 8016616:	4630      	mov	r0, r6
 8016618:	f7ff ffa1 	bl	801655e <__sfputs_r>
 801661c:	3001      	adds	r0, #1
 801661e:	f000 80a7 	beq.w	8016770 <_vfiprintf_r+0x1ec>
 8016622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016624:	445a      	add	r2, fp
 8016626:	9209      	str	r2, [sp, #36]	@ 0x24
 8016628:	f89a 3000 	ldrb.w	r3, [sl]
 801662c:	2b00      	cmp	r3, #0
 801662e:	f000 809f 	beq.w	8016770 <_vfiprintf_r+0x1ec>
 8016632:	2300      	movs	r3, #0
 8016634:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801663c:	f10a 0a01 	add.w	sl, sl, #1
 8016640:	9304      	str	r3, [sp, #16]
 8016642:	9307      	str	r3, [sp, #28]
 8016644:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016648:	931a      	str	r3, [sp, #104]	@ 0x68
 801664a:	4654      	mov	r4, sl
 801664c:	2205      	movs	r2, #5
 801664e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016652:	4853      	ldr	r0, [pc, #332]	@ (80167a0 <_vfiprintf_r+0x21c>)
 8016654:	f7e9 fddc 	bl	8000210 <memchr>
 8016658:	9a04      	ldr	r2, [sp, #16]
 801665a:	b9d8      	cbnz	r0, 8016694 <_vfiprintf_r+0x110>
 801665c:	06d1      	lsls	r1, r2, #27
 801665e:	bf44      	itt	mi
 8016660:	2320      	movmi	r3, #32
 8016662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016666:	0713      	lsls	r3, r2, #28
 8016668:	bf44      	itt	mi
 801666a:	232b      	movmi	r3, #43	@ 0x2b
 801666c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016670:	f89a 3000 	ldrb.w	r3, [sl]
 8016674:	2b2a      	cmp	r3, #42	@ 0x2a
 8016676:	d015      	beq.n	80166a4 <_vfiprintf_r+0x120>
 8016678:	9a07      	ldr	r2, [sp, #28]
 801667a:	4654      	mov	r4, sl
 801667c:	2000      	movs	r0, #0
 801667e:	f04f 0c0a 	mov.w	ip, #10
 8016682:	4621      	mov	r1, r4
 8016684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016688:	3b30      	subs	r3, #48	@ 0x30
 801668a:	2b09      	cmp	r3, #9
 801668c:	d94b      	bls.n	8016726 <_vfiprintf_r+0x1a2>
 801668e:	b1b0      	cbz	r0, 80166be <_vfiprintf_r+0x13a>
 8016690:	9207      	str	r2, [sp, #28]
 8016692:	e014      	b.n	80166be <_vfiprintf_r+0x13a>
 8016694:	eba0 0308 	sub.w	r3, r0, r8
 8016698:	fa09 f303 	lsl.w	r3, r9, r3
 801669c:	4313      	orrs	r3, r2
 801669e:	9304      	str	r3, [sp, #16]
 80166a0:	46a2      	mov	sl, r4
 80166a2:	e7d2      	b.n	801664a <_vfiprintf_r+0xc6>
 80166a4:	9b03      	ldr	r3, [sp, #12]
 80166a6:	1d19      	adds	r1, r3, #4
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	9103      	str	r1, [sp, #12]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	bfbb      	ittet	lt
 80166b0:	425b      	neglt	r3, r3
 80166b2:	f042 0202 	orrlt.w	r2, r2, #2
 80166b6:	9307      	strge	r3, [sp, #28]
 80166b8:	9307      	strlt	r3, [sp, #28]
 80166ba:	bfb8      	it	lt
 80166bc:	9204      	strlt	r2, [sp, #16]
 80166be:	7823      	ldrb	r3, [r4, #0]
 80166c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80166c2:	d10a      	bne.n	80166da <_vfiprintf_r+0x156>
 80166c4:	7863      	ldrb	r3, [r4, #1]
 80166c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80166c8:	d132      	bne.n	8016730 <_vfiprintf_r+0x1ac>
 80166ca:	9b03      	ldr	r3, [sp, #12]
 80166cc:	1d1a      	adds	r2, r3, #4
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	9203      	str	r2, [sp, #12]
 80166d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80166d6:	3402      	adds	r4, #2
 80166d8:	9305      	str	r3, [sp, #20]
 80166da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80167b0 <_vfiprintf_r+0x22c>
 80166de:	7821      	ldrb	r1, [r4, #0]
 80166e0:	2203      	movs	r2, #3
 80166e2:	4650      	mov	r0, sl
 80166e4:	f7e9 fd94 	bl	8000210 <memchr>
 80166e8:	b138      	cbz	r0, 80166fa <_vfiprintf_r+0x176>
 80166ea:	9b04      	ldr	r3, [sp, #16]
 80166ec:	eba0 000a 	sub.w	r0, r0, sl
 80166f0:	2240      	movs	r2, #64	@ 0x40
 80166f2:	4082      	lsls	r2, r0
 80166f4:	4313      	orrs	r3, r2
 80166f6:	3401      	adds	r4, #1
 80166f8:	9304      	str	r3, [sp, #16]
 80166fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166fe:	4829      	ldr	r0, [pc, #164]	@ (80167a4 <_vfiprintf_r+0x220>)
 8016700:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016704:	2206      	movs	r2, #6
 8016706:	f7e9 fd83 	bl	8000210 <memchr>
 801670a:	2800      	cmp	r0, #0
 801670c:	d03f      	beq.n	801678e <_vfiprintf_r+0x20a>
 801670e:	4b26      	ldr	r3, [pc, #152]	@ (80167a8 <_vfiprintf_r+0x224>)
 8016710:	bb1b      	cbnz	r3, 801675a <_vfiprintf_r+0x1d6>
 8016712:	9b03      	ldr	r3, [sp, #12]
 8016714:	3307      	adds	r3, #7
 8016716:	f023 0307 	bic.w	r3, r3, #7
 801671a:	3308      	adds	r3, #8
 801671c:	9303      	str	r3, [sp, #12]
 801671e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016720:	443b      	add	r3, r7
 8016722:	9309      	str	r3, [sp, #36]	@ 0x24
 8016724:	e76a      	b.n	80165fc <_vfiprintf_r+0x78>
 8016726:	fb0c 3202 	mla	r2, ip, r2, r3
 801672a:	460c      	mov	r4, r1
 801672c:	2001      	movs	r0, #1
 801672e:	e7a8      	b.n	8016682 <_vfiprintf_r+0xfe>
 8016730:	2300      	movs	r3, #0
 8016732:	3401      	adds	r4, #1
 8016734:	9305      	str	r3, [sp, #20]
 8016736:	4619      	mov	r1, r3
 8016738:	f04f 0c0a 	mov.w	ip, #10
 801673c:	4620      	mov	r0, r4
 801673e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016742:	3a30      	subs	r2, #48	@ 0x30
 8016744:	2a09      	cmp	r2, #9
 8016746:	d903      	bls.n	8016750 <_vfiprintf_r+0x1cc>
 8016748:	2b00      	cmp	r3, #0
 801674a:	d0c6      	beq.n	80166da <_vfiprintf_r+0x156>
 801674c:	9105      	str	r1, [sp, #20]
 801674e:	e7c4      	b.n	80166da <_vfiprintf_r+0x156>
 8016750:	fb0c 2101 	mla	r1, ip, r1, r2
 8016754:	4604      	mov	r4, r0
 8016756:	2301      	movs	r3, #1
 8016758:	e7f0      	b.n	801673c <_vfiprintf_r+0x1b8>
 801675a:	ab03      	add	r3, sp, #12
 801675c:	9300      	str	r3, [sp, #0]
 801675e:	462a      	mov	r2, r5
 8016760:	4b12      	ldr	r3, [pc, #72]	@ (80167ac <_vfiprintf_r+0x228>)
 8016762:	a904      	add	r1, sp, #16
 8016764:	4630      	mov	r0, r6
 8016766:	f3af 8000 	nop.w
 801676a:	4607      	mov	r7, r0
 801676c:	1c78      	adds	r0, r7, #1
 801676e:	d1d6      	bne.n	801671e <_vfiprintf_r+0x19a>
 8016770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016772:	07d9      	lsls	r1, r3, #31
 8016774:	d405      	bmi.n	8016782 <_vfiprintf_r+0x1fe>
 8016776:	89ab      	ldrh	r3, [r5, #12]
 8016778:	059a      	lsls	r2, r3, #22
 801677a:	d402      	bmi.n	8016782 <_vfiprintf_r+0x1fe>
 801677c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801677e:	f7ff fda9 	bl	80162d4 <__retarget_lock_release_recursive>
 8016782:	89ab      	ldrh	r3, [r5, #12]
 8016784:	065b      	lsls	r3, r3, #25
 8016786:	f53f af1f 	bmi.w	80165c8 <_vfiprintf_r+0x44>
 801678a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801678c:	e71e      	b.n	80165cc <_vfiprintf_r+0x48>
 801678e:	ab03      	add	r3, sp, #12
 8016790:	9300      	str	r3, [sp, #0]
 8016792:	462a      	mov	r2, r5
 8016794:	4b05      	ldr	r3, [pc, #20]	@ (80167ac <_vfiprintf_r+0x228>)
 8016796:	a904      	add	r1, sp, #16
 8016798:	4630      	mov	r0, r6
 801679a:	f000 f879 	bl	8016890 <_printf_i>
 801679e:	e7e4      	b.n	801676a <_vfiprintf_r+0x1e6>
 80167a0:	0801a62d 	.word	0x0801a62d
 80167a4:	0801a637 	.word	0x0801a637
 80167a8:	00000000 	.word	0x00000000
 80167ac:	0801655f 	.word	0x0801655f
 80167b0:	0801a633 	.word	0x0801a633

080167b4 <_printf_common>:
 80167b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167b8:	4616      	mov	r6, r2
 80167ba:	4698      	mov	r8, r3
 80167bc:	688a      	ldr	r2, [r1, #8]
 80167be:	690b      	ldr	r3, [r1, #16]
 80167c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80167c4:	4293      	cmp	r3, r2
 80167c6:	bfb8      	it	lt
 80167c8:	4613      	movlt	r3, r2
 80167ca:	6033      	str	r3, [r6, #0]
 80167cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80167d0:	4607      	mov	r7, r0
 80167d2:	460c      	mov	r4, r1
 80167d4:	b10a      	cbz	r2, 80167da <_printf_common+0x26>
 80167d6:	3301      	adds	r3, #1
 80167d8:	6033      	str	r3, [r6, #0]
 80167da:	6823      	ldr	r3, [r4, #0]
 80167dc:	0699      	lsls	r1, r3, #26
 80167de:	bf42      	ittt	mi
 80167e0:	6833      	ldrmi	r3, [r6, #0]
 80167e2:	3302      	addmi	r3, #2
 80167e4:	6033      	strmi	r3, [r6, #0]
 80167e6:	6825      	ldr	r5, [r4, #0]
 80167e8:	f015 0506 	ands.w	r5, r5, #6
 80167ec:	d106      	bne.n	80167fc <_printf_common+0x48>
 80167ee:	f104 0a19 	add.w	sl, r4, #25
 80167f2:	68e3      	ldr	r3, [r4, #12]
 80167f4:	6832      	ldr	r2, [r6, #0]
 80167f6:	1a9b      	subs	r3, r3, r2
 80167f8:	42ab      	cmp	r3, r5
 80167fa:	dc26      	bgt.n	801684a <_printf_common+0x96>
 80167fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016800:	6822      	ldr	r2, [r4, #0]
 8016802:	3b00      	subs	r3, #0
 8016804:	bf18      	it	ne
 8016806:	2301      	movne	r3, #1
 8016808:	0692      	lsls	r2, r2, #26
 801680a:	d42b      	bmi.n	8016864 <_printf_common+0xb0>
 801680c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016810:	4641      	mov	r1, r8
 8016812:	4638      	mov	r0, r7
 8016814:	47c8      	blx	r9
 8016816:	3001      	adds	r0, #1
 8016818:	d01e      	beq.n	8016858 <_printf_common+0xa4>
 801681a:	6823      	ldr	r3, [r4, #0]
 801681c:	6922      	ldr	r2, [r4, #16]
 801681e:	f003 0306 	and.w	r3, r3, #6
 8016822:	2b04      	cmp	r3, #4
 8016824:	bf02      	ittt	eq
 8016826:	68e5      	ldreq	r5, [r4, #12]
 8016828:	6833      	ldreq	r3, [r6, #0]
 801682a:	1aed      	subeq	r5, r5, r3
 801682c:	68a3      	ldr	r3, [r4, #8]
 801682e:	bf0c      	ite	eq
 8016830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016834:	2500      	movne	r5, #0
 8016836:	4293      	cmp	r3, r2
 8016838:	bfc4      	itt	gt
 801683a:	1a9b      	subgt	r3, r3, r2
 801683c:	18ed      	addgt	r5, r5, r3
 801683e:	2600      	movs	r6, #0
 8016840:	341a      	adds	r4, #26
 8016842:	42b5      	cmp	r5, r6
 8016844:	d11a      	bne.n	801687c <_printf_common+0xc8>
 8016846:	2000      	movs	r0, #0
 8016848:	e008      	b.n	801685c <_printf_common+0xa8>
 801684a:	2301      	movs	r3, #1
 801684c:	4652      	mov	r2, sl
 801684e:	4641      	mov	r1, r8
 8016850:	4638      	mov	r0, r7
 8016852:	47c8      	blx	r9
 8016854:	3001      	adds	r0, #1
 8016856:	d103      	bne.n	8016860 <_printf_common+0xac>
 8016858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016860:	3501      	adds	r5, #1
 8016862:	e7c6      	b.n	80167f2 <_printf_common+0x3e>
 8016864:	18e1      	adds	r1, r4, r3
 8016866:	1c5a      	adds	r2, r3, #1
 8016868:	2030      	movs	r0, #48	@ 0x30
 801686a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801686e:	4422      	add	r2, r4
 8016870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016878:	3302      	adds	r3, #2
 801687a:	e7c7      	b.n	801680c <_printf_common+0x58>
 801687c:	2301      	movs	r3, #1
 801687e:	4622      	mov	r2, r4
 8016880:	4641      	mov	r1, r8
 8016882:	4638      	mov	r0, r7
 8016884:	47c8      	blx	r9
 8016886:	3001      	adds	r0, #1
 8016888:	d0e6      	beq.n	8016858 <_printf_common+0xa4>
 801688a:	3601      	adds	r6, #1
 801688c:	e7d9      	b.n	8016842 <_printf_common+0x8e>
	...

08016890 <_printf_i>:
 8016890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016894:	7e0f      	ldrb	r7, [r1, #24]
 8016896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016898:	2f78      	cmp	r7, #120	@ 0x78
 801689a:	4691      	mov	r9, r2
 801689c:	4680      	mov	r8, r0
 801689e:	460c      	mov	r4, r1
 80168a0:	469a      	mov	sl, r3
 80168a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80168a6:	d807      	bhi.n	80168b8 <_printf_i+0x28>
 80168a8:	2f62      	cmp	r7, #98	@ 0x62
 80168aa:	d80a      	bhi.n	80168c2 <_printf_i+0x32>
 80168ac:	2f00      	cmp	r7, #0
 80168ae:	f000 80d1 	beq.w	8016a54 <_printf_i+0x1c4>
 80168b2:	2f58      	cmp	r7, #88	@ 0x58
 80168b4:	f000 80b8 	beq.w	8016a28 <_printf_i+0x198>
 80168b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80168bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80168c0:	e03a      	b.n	8016938 <_printf_i+0xa8>
 80168c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80168c6:	2b15      	cmp	r3, #21
 80168c8:	d8f6      	bhi.n	80168b8 <_printf_i+0x28>
 80168ca:	a101      	add	r1, pc, #4	@ (adr r1, 80168d0 <_printf_i+0x40>)
 80168cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80168d0:	08016929 	.word	0x08016929
 80168d4:	0801693d 	.word	0x0801693d
 80168d8:	080168b9 	.word	0x080168b9
 80168dc:	080168b9 	.word	0x080168b9
 80168e0:	080168b9 	.word	0x080168b9
 80168e4:	080168b9 	.word	0x080168b9
 80168e8:	0801693d 	.word	0x0801693d
 80168ec:	080168b9 	.word	0x080168b9
 80168f0:	080168b9 	.word	0x080168b9
 80168f4:	080168b9 	.word	0x080168b9
 80168f8:	080168b9 	.word	0x080168b9
 80168fc:	08016a3b 	.word	0x08016a3b
 8016900:	08016967 	.word	0x08016967
 8016904:	080169f5 	.word	0x080169f5
 8016908:	080168b9 	.word	0x080168b9
 801690c:	080168b9 	.word	0x080168b9
 8016910:	08016a5d 	.word	0x08016a5d
 8016914:	080168b9 	.word	0x080168b9
 8016918:	08016967 	.word	0x08016967
 801691c:	080168b9 	.word	0x080168b9
 8016920:	080168b9 	.word	0x080168b9
 8016924:	080169fd 	.word	0x080169fd
 8016928:	6833      	ldr	r3, [r6, #0]
 801692a:	1d1a      	adds	r2, r3, #4
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	6032      	str	r2, [r6, #0]
 8016930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016938:	2301      	movs	r3, #1
 801693a:	e09c      	b.n	8016a76 <_printf_i+0x1e6>
 801693c:	6833      	ldr	r3, [r6, #0]
 801693e:	6820      	ldr	r0, [r4, #0]
 8016940:	1d19      	adds	r1, r3, #4
 8016942:	6031      	str	r1, [r6, #0]
 8016944:	0606      	lsls	r6, r0, #24
 8016946:	d501      	bpl.n	801694c <_printf_i+0xbc>
 8016948:	681d      	ldr	r5, [r3, #0]
 801694a:	e003      	b.n	8016954 <_printf_i+0xc4>
 801694c:	0645      	lsls	r5, r0, #25
 801694e:	d5fb      	bpl.n	8016948 <_printf_i+0xb8>
 8016950:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016954:	2d00      	cmp	r5, #0
 8016956:	da03      	bge.n	8016960 <_printf_i+0xd0>
 8016958:	232d      	movs	r3, #45	@ 0x2d
 801695a:	426d      	negs	r5, r5
 801695c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016960:	4858      	ldr	r0, [pc, #352]	@ (8016ac4 <_printf_i+0x234>)
 8016962:	230a      	movs	r3, #10
 8016964:	e011      	b.n	801698a <_printf_i+0xfa>
 8016966:	6821      	ldr	r1, [r4, #0]
 8016968:	6833      	ldr	r3, [r6, #0]
 801696a:	0608      	lsls	r0, r1, #24
 801696c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016970:	d402      	bmi.n	8016978 <_printf_i+0xe8>
 8016972:	0649      	lsls	r1, r1, #25
 8016974:	bf48      	it	mi
 8016976:	b2ad      	uxthmi	r5, r5
 8016978:	2f6f      	cmp	r7, #111	@ 0x6f
 801697a:	4852      	ldr	r0, [pc, #328]	@ (8016ac4 <_printf_i+0x234>)
 801697c:	6033      	str	r3, [r6, #0]
 801697e:	bf14      	ite	ne
 8016980:	230a      	movne	r3, #10
 8016982:	2308      	moveq	r3, #8
 8016984:	2100      	movs	r1, #0
 8016986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801698a:	6866      	ldr	r6, [r4, #4]
 801698c:	60a6      	str	r6, [r4, #8]
 801698e:	2e00      	cmp	r6, #0
 8016990:	db05      	blt.n	801699e <_printf_i+0x10e>
 8016992:	6821      	ldr	r1, [r4, #0]
 8016994:	432e      	orrs	r6, r5
 8016996:	f021 0104 	bic.w	r1, r1, #4
 801699a:	6021      	str	r1, [r4, #0]
 801699c:	d04b      	beq.n	8016a36 <_printf_i+0x1a6>
 801699e:	4616      	mov	r6, r2
 80169a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80169a4:	fb03 5711 	mls	r7, r3, r1, r5
 80169a8:	5dc7      	ldrb	r7, [r0, r7]
 80169aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80169ae:	462f      	mov	r7, r5
 80169b0:	42bb      	cmp	r3, r7
 80169b2:	460d      	mov	r5, r1
 80169b4:	d9f4      	bls.n	80169a0 <_printf_i+0x110>
 80169b6:	2b08      	cmp	r3, #8
 80169b8:	d10b      	bne.n	80169d2 <_printf_i+0x142>
 80169ba:	6823      	ldr	r3, [r4, #0]
 80169bc:	07df      	lsls	r7, r3, #31
 80169be:	d508      	bpl.n	80169d2 <_printf_i+0x142>
 80169c0:	6923      	ldr	r3, [r4, #16]
 80169c2:	6861      	ldr	r1, [r4, #4]
 80169c4:	4299      	cmp	r1, r3
 80169c6:	bfde      	ittt	le
 80169c8:	2330      	movle	r3, #48	@ 0x30
 80169ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80169ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80169d2:	1b92      	subs	r2, r2, r6
 80169d4:	6122      	str	r2, [r4, #16]
 80169d6:	f8cd a000 	str.w	sl, [sp]
 80169da:	464b      	mov	r3, r9
 80169dc:	aa03      	add	r2, sp, #12
 80169de:	4621      	mov	r1, r4
 80169e0:	4640      	mov	r0, r8
 80169e2:	f7ff fee7 	bl	80167b4 <_printf_common>
 80169e6:	3001      	adds	r0, #1
 80169e8:	d14a      	bne.n	8016a80 <_printf_i+0x1f0>
 80169ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80169ee:	b004      	add	sp, #16
 80169f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169f4:	6823      	ldr	r3, [r4, #0]
 80169f6:	f043 0320 	orr.w	r3, r3, #32
 80169fa:	6023      	str	r3, [r4, #0]
 80169fc:	4832      	ldr	r0, [pc, #200]	@ (8016ac8 <_printf_i+0x238>)
 80169fe:	2778      	movs	r7, #120	@ 0x78
 8016a00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016a04:	6823      	ldr	r3, [r4, #0]
 8016a06:	6831      	ldr	r1, [r6, #0]
 8016a08:	061f      	lsls	r7, r3, #24
 8016a0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8016a0e:	d402      	bmi.n	8016a16 <_printf_i+0x186>
 8016a10:	065f      	lsls	r7, r3, #25
 8016a12:	bf48      	it	mi
 8016a14:	b2ad      	uxthmi	r5, r5
 8016a16:	6031      	str	r1, [r6, #0]
 8016a18:	07d9      	lsls	r1, r3, #31
 8016a1a:	bf44      	itt	mi
 8016a1c:	f043 0320 	orrmi.w	r3, r3, #32
 8016a20:	6023      	strmi	r3, [r4, #0]
 8016a22:	b11d      	cbz	r5, 8016a2c <_printf_i+0x19c>
 8016a24:	2310      	movs	r3, #16
 8016a26:	e7ad      	b.n	8016984 <_printf_i+0xf4>
 8016a28:	4826      	ldr	r0, [pc, #152]	@ (8016ac4 <_printf_i+0x234>)
 8016a2a:	e7e9      	b.n	8016a00 <_printf_i+0x170>
 8016a2c:	6823      	ldr	r3, [r4, #0]
 8016a2e:	f023 0320 	bic.w	r3, r3, #32
 8016a32:	6023      	str	r3, [r4, #0]
 8016a34:	e7f6      	b.n	8016a24 <_printf_i+0x194>
 8016a36:	4616      	mov	r6, r2
 8016a38:	e7bd      	b.n	80169b6 <_printf_i+0x126>
 8016a3a:	6833      	ldr	r3, [r6, #0]
 8016a3c:	6825      	ldr	r5, [r4, #0]
 8016a3e:	6961      	ldr	r1, [r4, #20]
 8016a40:	1d18      	adds	r0, r3, #4
 8016a42:	6030      	str	r0, [r6, #0]
 8016a44:	062e      	lsls	r6, r5, #24
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	d501      	bpl.n	8016a4e <_printf_i+0x1be>
 8016a4a:	6019      	str	r1, [r3, #0]
 8016a4c:	e002      	b.n	8016a54 <_printf_i+0x1c4>
 8016a4e:	0668      	lsls	r0, r5, #25
 8016a50:	d5fb      	bpl.n	8016a4a <_printf_i+0x1ba>
 8016a52:	8019      	strh	r1, [r3, #0]
 8016a54:	2300      	movs	r3, #0
 8016a56:	6123      	str	r3, [r4, #16]
 8016a58:	4616      	mov	r6, r2
 8016a5a:	e7bc      	b.n	80169d6 <_printf_i+0x146>
 8016a5c:	6833      	ldr	r3, [r6, #0]
 8016a5e:	1d1a      	adds	r2, r3, #4
 8016a60:	6032      	str	r2, [r6, #0]
 8016a62:	681e      	ldr	r6, [r3, #0]
 8016a64:	6862      	ldr	r2, [r4, #4]
 8016a66:	2100      	movs	r1, #0
 8016a68:	4630      	mov	r0, r6
 8016a6a:	f7e9 fbd1 	bl	8000210 <memchr>
 8016a6e:	b108      	cbz	r0, 8016a74 <_printf_i+0x1e4>
 8016a70:	1b80      	subs	r0, r0, r6
 8016a72:	6060      	str	r0, [r4, #4]
 8016a74:	6863      	ldr	r3, [r4, #4]
 8016a76:	6123      	str	r3, [r4, #16]
 8016a78:	2300      	movs	r3, #0
 8016a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016a7e:	e7aa      	b.n	80169d6 <_printf_i+0x146>
 8016a80:	6923      	ldr	r3, [r4, #16]
 8016a82:	4632      	mov	r2, r6
 8016a84:	4649      	mov	r1, r9
 8016a86:	4640      	mov	r0, r8
 8016a88:	47d0      	blx	sl
 8016a8a:	3001      	adds	r0, #1
 8016a8c:	d0ad      	beq.n	80169ea <_printf_i+0x15a>
 8016a8e:	6823      	ldr	r3, [r4, #0]
 8016a90:	079b      	lsls	r3, r3, #30
 8016a92:	d413      	bmi.n	8016abc <_printf_i+0x22c>
 8016a94:	68e0      	ldr	r0, [r4, #12]
 8016a96:	9b03      	ldr	r3, [sp, #12]
 8016a98:	4298      	cmp	r0, r3
 8016a9a:	bfb8      	it	lt
 8016a9c:	4618      	movlt	r0, r3
 8016a9e:	e7a6      	b.n	80169ee <_printf_i+0x15e>
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	4632      	mov	r2, r6
 8016aa4:	4649      	mov	r1, r9
 8016aa6:	4640      	mov	r0, r8
 8016aa8:	47d0      	blx	sl
 8016aaa:	3001      	adds	r0, #1
 8016aac:	d09d      	beq.n	80169ea <_printf_i+0x15a>
 8016aae:	3501      	adds	r5, #1
 8016ab0:	68e3      	ldr	r3, [r4, #12]
 8016ab2:	9903      	ldr	r1, [sp, #12]
 8016ab4:	1a5b      	subs	r3, r3, r1
 8016ab6:	42ab      	cmp	r3, r5
 8016ab8:	dcf2      	bgt.n	8016aa0 <_printf_i+0x210>
 8016aba:	e7eb      	b.n	8016a94 <_printf_i+0x204>
 8016abc:	2500      	movs	r5, #0
 8016abe:	f104 0619 	add.w	r6, r4, #25
 8016ac2:	e7f5      	b.n	8016ab0 <_printf_i+0x220>
 8016ac4:	0801a63e 	.word	0x0801a63e
 8016ac8:	0801a64f 	.word	0x0801a64f

08016acc <__sflush_r>:
 8016acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ad4:	0716      	lsls	r6, r2, #28
 8016ad6:	4605      	mov	r5, r0
 8016ad8:	460c      	mov	r4, r1
 8016ada:	d454      	bmi.n	8016b86 <__sflush_r+0xba>
 8016adc:	684b      	ldr	r3, [r1, #4]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	dc02      	bgt.n	8016ae8 <__sflush_r+0x1c>
 8016ae2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	dd48      	ble.n	8016b7a <__sflush_r+0xae>
 8016ae8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016aea:	2e00      	cmp	r6, #0
 8016aec:	d045      	beq.n	8016b7a <__sflush_r+0xae>
 8016aee:	2300      	movs	r3, #0
 8016af0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016af4:	682f      	ldr	r7, [r5, #0]
 8016af6:	6a21      	ldr	r1, [r4, #32]
 8016af8:	602b      	str	r3, [r5, #0]
 8016afa:	d030      	beq.n	8016b5e <__sflush_r+0x92>
 8016afc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016afe:	89a3      	ldrh	r3, [r4, #12]
 8016b00:	0759      	lsls	r1, r3, #29
 8016b02:	d505      	bpl.n	8016b10 <__sflush_r+0x44>
 8016b04:	6863      	ldr	r3, [r4, #4]
 8016b06:	1ad2      	subs	r2, r2, r3
 8016b08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016b0a:	b10b      	cbz	r3, 8016b10 <__sflush_r+0x44>
 8016b0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016b0e:	1ad2      	subs	r2, r2, r3
 8016b10:	2300      	movs	r3, #0
 8016b12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016b14:	6a21      	ldr	r1, [r4, #32]
 8016b16:	4628      	mov	r0, r5
 8016b18:	47b0      	blx	r6
 8016b1a:	1c43      	adds	r3, r0, #1
 8016b1c:	89a3      	ldrh	r3, [r4, #12]
 8016b1e:	d106      	bne.n	8016b2e <__sflush_r+0x62>
 8016b20:	6829      	ldr	r1, [r5, #0]
 8016b22:	291d      	cmp	r1, #29
 8016b24:	d82b      	bhi.n	8016b7e <__sflush_r+0xb2>
 8016b26:	4a2a      	ldr	r2, [pc, #168]	@ (8016bd0 <__sflush_r+0x104>)
 8016b28:	40ca      	lsrs	r2, r1
 8016b2a:	07d6      	lsls	r6, r2, #31
 8016b2c:	d527      	bpl.n	8016b7e <__sflush_r+0xb2>
 8016b2e:	2200      	movs	r2, #0
 8016b30:	6062      	str	r2, [r4, #4]
 8016b32:	04d9      	lsls	r1, r3, #19
 8016b34:	6922      	ldr	r2, [r4, #16]
 8016b36:	6022      	str	r2, [r4, #0]
 8016b38:	d504      	bpl.n	8016b44 <__sflush_r+0x78>
 8016b3a:	1c42      	adds	r2, r0, #1
 8016b3c:	d101      	bne.n	8016b42 <__sflush_r+0x76>
 8016b3e:	682b      	ldr	r3, [r5, #0]
 8016b40:	b903      	cbnz	r3, 8016b44 <__sflush_r+0x78>
 8016b42:	6560      	str	r0, [r4, #84]	@ 0x54
 8016b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016b46:	602f      	str	r7, [r5, #0]
 8016b48:	b1b9      	cbz	r1, 8016b7a <__sflush_r+0xae>
 8016b4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016b4e:	4299      	cmp	r1, r3
 8016b50:	d002      	beq.n	8016b58 <__sflush_r+0x8c>
 8016b52:	4628      	mov	r0, r5
 8016b54:	f7ff fbec 	bl	8016330 <_free_r>
 8016b58:	2300      	movs	r3, #0
 8016b5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8016b5c:	e00d      	b.n	8016b7a <__sflush_r+0xae>
 8016b5e:	2301      	movs	r3, #1
 8016b60:	4628      	mov	r0, r5
 8016b62:	47b0      	blx	r6
 8016b64:	4602      	mov	r2, r0
 8016b66:	1c50      	adds	r0, r2, #1
 8016b68:	d1c9      	bne.n	8016afe <__sflush_r+0x32>
 8016b6a:	682b      	ldr	r3, [r5, #0]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d0c6      	beq.n	8016afe <__sflush_r+0x32>
 8016b70:	2b1d      	cmp	r3, #29
 8016b72:	d001      	beq.n	8016b78 <__sflush_r+0xac>
 8016b74:	2b16      	cmp	r3, #22
 8016b76:	d11e      	bne.n	8016bb6 <__sflush_r+0xea>
 8016b78:	602f      	str	r7, [r5, #0]
 8016b7a:	2000      	movs	r0, #0
 8016b7c:	e022      	b.n	8016bc4 <__sflush_r+0xf8>
 8016b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b82:	b21b      	sxth	r3, r3
 8016b84:	e01b      	b.n	8016bbe <__sflush_r+0xf2>
 8016b86:	690f      	ldr	r7, [r1, #16]
 8016b88:	2f00      	cmp	r7, #0
 8016b8a:	d0f6      	beq.n	8016b7a <__sflush_r+0xae>
 8016b8c:	0793      	lsls	r3, r2, #30
 8016b8e:	680e      	ldr	r6, [r1, #0]
 8016b90:	bf08      	it	eq
 8016b92:	694b      	ldreq	r3, [r1, #20]
 8016b94:	600f      	str	r7, [r1, #0]
 8016b96:	bf18      	it	ne
 8016b98:	2300      	movne	r3, #0
 8016b9a:	eba6 0807 	sub.w	r8, r6, r7
 8016b9e:	608b      	str	r3, [r1, #8]
 8016ba0:	f1b8 0f00 	cmp.w	r8, #0
 8016ba4:	dde9      	ble.n	8016b7a <__sflush_r+0xae>
 8016ba6:	6a21      	ldr	r1, [r4, #32]
 8016ba8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016baa:	4643      	mov	r3, r8
 8016bac:	463a      	mov	r2, r7
 8016bae:	4628      	mov	r0, r5
 8016bb0:	47b0      	blx	r6
 8016bb2:	2800      	cmp	r0, #0
 8016bb4:	dc08      	bgt.n	8016bc8 <__sflush_r+0xfc>
 8016bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016bbe:	81a3      	strh	r3, [r4, #12]
 8016bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bc8:	4407      	add	r7, r0
 8016bca:	eba8 0800 	sub.w	r8, r8, r0
 8016bce:	e7e7      	b.n	8016ba0 <__sflush_r+0xd4>
 8016bd0:	20400001 	.word	0x20400001

08016bd4 <_fflush_r>:
 8016bd4:	b538      	push	{r3, r4, r5, lr}
 8016bd6:	690b      	ldr	r3, [r1, #16]
 8016bd8:	4605      	mov	r5, r0
 8016bda:	460c      	mov	r4, r1
 8016bdc:	b913      	cbnz	r3, 8016be4 <_fflush_r+0x10>
 8016bde:	2500      	movs	r5, #0
 8016be0:	4628      	mov	r0, r5
 8016be2:	bd38      	pop	{r3, r4, r5, pc}
 8016be4:	b118      	cbz	r0, 8016bee <_fflush_r+0x1a>
 8016be6:	6a03      	ldr	r3, [r0, #32]
 8016be8:	b90b      	cbnz	r3, 8016bee <_fflush_r+0x1a>
 8016bea:	f7ff f969 	bl	8015ec0 <__sinit>
 8016bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d0f3      	beq.n	8016bde <_fflush_r+0xa>
 8016bf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016bf8:	07d0      	lsls	r0, r2, #31
 8016bfa:	d404      	bmi.n	8016c06 <_fflush_r+0x32>
 8016bfc:	0599      	lsls	r1, r3, #22
 8016bfe:	d402      	bmi.n	8016c06 <_fflush_r+0x32>
 8016c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016c02:	f7ff fb66 	bl	80162d2 <__retarget_lock_acquire_recursive>
 8016c06:	4628      	mov	r0, r5
 8016c08:	4621      	mov	r1, r4
 8016c0a:	f7ff ff5f 	bl	8016acc <__sflush_r>
 8016c0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016c10:	07da      	lsls	r2, r3, #31
 8016c12:	4605      	mov	r5, r0
 8016c14:	d4e4      	bmi.n	8016be0 <_fflush_r+0xc>
 8016c16:	89a3      	ldrh	r3, [r4, #12]
 8016c18:	059b      	lsls	r3, r3, #22
 8016c1a:	d4e1      	bmi.n	8016be0 <_fflush_r+0xc>
 8016c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016c1e:	f7ff fb59 	bl	80162d4 <__retarget_lock_release_recursive>
 8016c22:	e7dd      	b.n	8016be0 <_fflush_r+0xc>

08016c24 <fiprintf>:
 8016c24:	b40e      	push	{r1, r2, r3}
 8016c26:	b503      	push	{r0, r1, lr}
 8016c28:	4601      	mov	r1, r0
 8016c2a:	ab03      	add	r3, sp, #12
 8016c2c:	4805      	ldr	r0, [pc, #20]	@ (8016c44 <fiprintf+0x20>)
 8016c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c32:	6800      	ldr	r0, [r0, #0]
 8016c34:	9301      	str	r3, [sp, #4]
 8016c36:	f7ff fca5 	bl	8016584 <_vfiprintf_r>
 8016c3a:	b002      	add	sp, #8
 8016c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c40:	b003      	add	sp, #12
 8016c42:	4770      	bx	lr
 8016c44:	2000007c 	.word	0x2000007c

08016c48 <__swhatbuf_r>:
 8016c48:	b570      	push	{r4, r5, r6, lr}
 8016c4a:	460c      	mov	r4, r1
 8016c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c50:	2900      	cmp	r1, #0
 8016c52:	b096      	sub	sp, #88	@ 0x58
 8016c54:	4615      	mov	r5, r2
 8016c56:	461e      	mov	r6, r3
 8016c58:	da0d      	bge.n	8016c76 <__swhatbuf_r+0x2e>
 8016c5a:	89a3      	ldrh	r3, [r4, #12]
 8016c5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016c60:	f04f 0100 	mov.w	r1, #0
 8016c64:	bf14      	ite	ne
 8016c66:	2340      	movne	r3, #64	@ 0x40
 8016c68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016c6c:	2000      	movs	r0, #0
 8016c6e:	6031      	str	r1, [r6, #0]
 8016c70:	602b      	str	r3, [r5, #0]
 8016c72:	b016      	add	sp, #88	@ 0x58
 8016c74:	bd70      	pop	{r4, r5, r6, pc}
 8016c76:	466a      	mov	r2, sp
 8016c78:	f000 f87c 	bl	8016d74 <_fstat_r>
 8016c7c:	2800      	cmp	r0, #0
 8016c7e:	dbec      	blt.n	8016c5a <__swhatbuf_r+0x12>
 8016c80:	9901      	ldr	r1, [sp, #4]
 8016c82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016c86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016c8a:	4259      	negs	r1, r3
 8016c8c:	4159      	adcs	r1, r3
 8016c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016c92:	e7eb      	b.n	8016c6c <__swhatbuf_r+0x24>

08016c94 <__smakebuf_r>:
 8016c94:	898b      	ldrh	r3, [r1, #12]
 8016c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c98:	079d      	lsls	r5, r3, #30
 8016c9a:	4606      	mov	r6, r0
 8016c9c:	460c      	mov	r4, r1
 8016c9e:	d507      	bpl.n	8016cb0 <__smakebuf_r+0x1c>
 8016ca0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016ca4:	6023      	str	r3, [r4, #0]
 8016ca6:	6123      	str	r3, [r4, #16]
 8016ca8:	2301      	movs	r3, #1
 8016caa:	6163      	str	r3, [r4, #20]
 8016cac:	b003      	add	sp, #12
 8016cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cb0:	ab01      	add	r3, sp, #4
 8016cb2:	466a      	mov	r2, sp
 8016cb4:	f7ff ffc8 	bl	8016c48 <__swhatbuf_r>
 8016cb8:	9f00      	ldr	r7, [sp, #0]
 8016cba:	4605      	mov	r5, r0
 8016cbc:	4639      	mov	r1, r7
 8016cbe:	4630      	mov	r0, r6
 8016cc0:	f7ff fbaa 	bl	8016418 <_malloc_r>
 8016cc4:	b948      	cbnz	r0, 8016cda <__smakebuf_r+0x46>
 8016cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cca:	059a      	lsls	r2, r3, #22
 8016ccc:	d4ee      	bmi.n	8016cac <__smakebuf_r+0x18>
 8016cce:	f023 0303 	bic.w	r3, r3, #3
 8016cd2:	f043 0302 	orr.w	r3, r3, #2
 8016cd6:	81a3      	strh	r3, [r4, #12]
 8016cd8:	e7e2      	b.n	8016ca0 <__smakebuf_r+0xc>
 8016cda:	89a3      	ldrh	r3, [r4, #12]
 8016cdc:	6020      	str	r0, [r4, #0]
 8016cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016ce2:	81a3      	strh	r3, [r4, #12]
 8016ce4:	9b01      	ldr	r3, [sp, #4]
 8016ce6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016cea:	b15b      	cbz	r3, 8016d04 <__smakebuf_r+0x70>
 8016cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cf0:	4630      	mov	r0, r6
 8016cf2:	f000 f851 	bl	8016d98 <_isatty_r>
 8016cf6:	b128      	cbz	r0, 8016d04 <__smakebuf_r+0x70>
 8016cf8:	89a3      	ldrh	r3, [r4, #12]
 8016cfa:	f023 0303 	bic.w	r3, r3, #3
 8016cfe:	f043 0301 	orr.w	r3, r3, #1
 8016d02:	81a3      	strh	r3, [r4, #12]
 8016d04:	89a3      	ldrh	r3, [r4, #12]
 8016d06:	431d      	orrs	r5, r3
 8016d08:	81a5      	strh	r5, [r4, #12]
 8016d0a:	e7cf      	b.n	8016cac <__smakebuf_r+0x18>

08016d0c <_putc_r>:
 8016d0c:	b570      	push	{r4, r5, r6, lr}
 8016d0e:	460d      	mov	r5, r1
 8016d10:	4614      	mov	r4, r2
 8016d12:	4606      	mov	r6, r0
 8016d14:	b118      	cbz	r0, 8016d1e <_putc_r+0x12>
 8016d16:	6a03      	ldr	r3, [r0, #32]
 8016d18:	b90b      	cbnz	r3, 8016d1e <_putc_r+0x12>
 8016d1a:	f7ff f8d1 	bl	8015ec0 <__sinit>
 8016d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d20:	07d8      	lsls	r0, r3, #31
 8016d22:	d405      	bmi.n	8016d30 <_putc_r+0x24>
 8016d24:	89a3      	ldrh	r3, [r4, #12]
 8016d26:	0599      	lsls	r1, r3, #22
 8016d28:	d402      	bmi.n	8016d30 <_putc_r+0x24>
 8016d2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d2c:	f7ff fad1 	bl	80162d2 <__retarget_lock_acquire_recursive>
 8016d30:	68a3      	ldr	r3, [r4, #8]
 8016d32:	3b01      	subs	r3, #1
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	60a3      	str	r3, [r4, #8]
 8016d38:	da05      	bge.n	8016d46 <_putc_r+0x3a>
 8016d3a:	69a2      	ldr	r2, [r4, #24]
 8016d3c:	4293      	cmp	r3, r2
 8016d3e:	db12      	blt.n	8016d66 <_putc_r+0x5a>
 8016d40:	b2eb      	uxtb	r3, r5
 8016d42:	2b0a      	cmp	r3, #10
 8016d44:	d00f      	beq.n	8016d66 <_putc_r+0x5a>
 8016d46:	6823      	ldr	r3, [r4, #0]
 8016d48:	1c5a      	adds	r2, r3, #1
 8016d4a:	6022      	str	r2, [r4, #0]
 8016d4c:	701d      	strb	r5, [r3, #0]
 8016d4e:	b2ed      	uxtb	r5, r5
 8016d50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d52:	07da      	lsls	r2, r3, #31
 8016d54:	d405      	bmi.n	8016d62 <_putc_r+0x56>
 8016d56:	89a3      	ldrh	r3, [r4, #12]
 8016d58:	059b      	lsls	r3, r3, #22
 8016d5a:	d402      	bmi.n	8016d62 <_putc_r+0x56>
 8016d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d5e:	f7ff fab9 	bl	80162d4 <__retarget_lock_release_recursive>
 8016d62:	4628      	mov	r0, r5
 8016d64:	bd70      	pop	{r4, r5, r6, pc}
 8016d66:	4629      	mov	r1, r5
 8016d68:	4622      	mov	r2, r4
 8016d6a:	4630      	mov	r0, r6
 8016d6c:	f7ff f999 	bl	80160a2 <__swbuf_r>
 8016d70:	4605      	mov	r5, r0
 8016d72:	e7ed      	b.n	8016d50 <_putc_r+0x44>

08016d74 <_fstat_r>:
 8016d74:	b538      	push	{r3, r4, r5, lr}
 8016d76:	4d07      	ldr	r5, [pc, #28]	@ (8016d94 <_fstat_r+0x20>)
 8016d78:	2300      	movs	r3, #0
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	4608      	mov	r0, r1
 8016d7e:	4611      	mov	r1, r2
 8016d80:	602b      	str	r3, [r5, #0]
 8016d82:	f7ea fb53 	bl	800142c <_fstat>
 8016d86:	1c43      	adds	r3, r0, #1
 8016d88:	d102      	bne.n	8016d90 <_fstat_r+0x1c>
 8016d8a:	682b      	ldr	r3, [r5, #0]
 8016d8c:	b103      	cbz	r3, 8016d90 <_fstat_r+0x1c>
 8016d8e:	6023      	str	r3, [r4, #0]
 8016d90:	bd38      	pop	{r3, r4, r5, pc}
 8016d92:	bf00      	nop
 8016d94:	2000871c 	.word	0x2000871c

08016d98 <_isatty_r>:
 8016d98:	b538      	push	{r3, r4, r5, lr}
 8016d9a:	4d06      	ldr	r5, [pc, #24]	@ (8016db4 <_isatty_r+0x1c>)
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	4604      	mov	r4, r0
 8016da0:	4608      	mov	r0, r1
 8016da2:	602b      	str	r3, [r5, #0]
 8016da4:	f7ea fb52 	bl	800144c <_isatty>
 8016da8:	1c43      	adds	r3, r0, #1
 8016daa:	d102      	bne.n	8016db2 <_isatty_r+0x1a>
 8016dac:	682b      	ldr	r3, [r5, #0]
 8016dae:	b103      	cbz	r3, 8016db2 <_isatty_r+0x1a>
 8016db0:	6023      	str	r3, [r4, #0]
 8016db2:	bd38      	pop	{r3, r4, r5, pc}
 8016db4:	2000871c 	.word	0x2000871c

08016db8 <_sbrk_r>:
 8016db8:	b538      	push	{r3, r4, r5, lr}
 8016dba:	4d06      	ldr	r5, [pc, #24]	@ (8016dd4 <_sbrk_r+0x1c>)
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	4604      	mov	r4, r0
 8016dc0:	4608      	mov	r0, r1
 8016dc2:	602b      	str	r3, [r5, #0]
 8016dc4:	f7ea fb5a 	bl	800147c <_sbrk>
 8016dc8:	1c43      	adds	r3, r0, #1
 8016dca:	d102      	bne.n	8016dd2 <_sbrk_r+0x1a>
 8016dcc:	682b      	ldr	r3, [r5, #0]
 8016dce:	b103      	cbz	r3, 8016dd2 <_sbrk_r+0x1a>
 8016dd0:	6023      	str	r3, [r4, #0]
 8016dd2:	bd38      	pop	{r3, r4, r5, pc}
 8016dd4:	2000871c 	.word	0x2000871c

08016dd8 <abort>:
 8016dd8:	b508      	push	{r3, lr}
 8016dda:	2006      	movs	r0, #6
 8016ddc:	f000 f82c 	bl	8016e38 <raise>
 8016de0:	2001      	movs	r0, #1
 8016de2:	f7ea faef 	bl	80013c4 <_exit>

08016de6 <_raise_r>:
 8016de6:	291f      	cmp	r1, #31
 8016de8:	b538      	push	{r3, r4, r5, lr}
 8016dea:	4605      	mov	r5, r0
 8016dec:	460c      	mov	r4, r1
 8016dee:	d904      	bls.n	8016dfa <_raise_r+0x14>
 8016df0:	2316      	movs	r3, #22
 8016df2:	6003      	str	r3, [r0, #0]
 8016df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016df8:	bd38      	pop	{r3, r4, r5, pc}
 8016dfa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016dfc:	b112      	cbz	r2, 8016e04 <_raise_r+0x1e>
 8016dfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016e02:	b94b      	cbnz	r3, 8016e18 <_raise_r+0x32>
 8016e04:	4628      	mov	r0, r5
 8016e06:	f000 f831 	bl	8016e6c <_getpid_r>
 8016e0a:	4622      	mov	r2, r4
 8016e0c:	4601      	mov	r1, r0
 8016e0e:	4628      	mov	r0, r5
 8016e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e14:	f000 b818 	b.w	8016e48 <_kill_r>
 8016e18:	2b01      	cmp	r3, #1
 8016e1a:	d00a      	beq.n	8016e32 <_raise_r+0x4c>
 8016e1c:	1c59      	adds	r1, r3, #1
 8016e1e:	d103      	bne.n	8016e28 <_raise_r+0x42>
 8016e20:	2316      	movs	r3, #22
 8016e22:	6003      	str	r3, [r0, #0]
 8016e24:	2001      	movs	r0, #1
 8016e26:	e7e7      	b.n	8016df8 <_raise_r+0x12>
 8016e28:	2100      	movs	r1, #0
 8016e2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016e2e:	4620      	mov	r0, r4
 8016e30:	4798      	blx	r3
 8016e32:	2000      	movs	r0, #0
 8016e34:	e7e0      	b.n	8016df8 <_raise_r+0x12>
	...

08016e38 <raise>:
 8016e38:	4b02      	ldr	r3, [pc, #8]	@ (8016e44 <raise+0xc>)
 8016e3a:	4601      	mov	r1, r0
 8016e3c:	6818      	ldr	r0, [r3, #0]
 8016e3e:	f7ff bfd2 	b.w	8016de6 <_raise_r>
 8016e42:	bf00      	nop
 8016e44:	2000007c 	.word	0x2000007c

08016e48 <_kill_r>:
 8016e48:	b538      	push	{r3, r4, r5, lr}
 8016e4a:	4d07      	ldr	r5, [pc, #28]	@ (8016e68 <_kill_r+0x20>)
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	4604      	mov	r4, r0
 8016e50:	4608      	mov	r0, r1
 8016e52:	4611      	mov	r1, r2
 8016e54:	602b      	str	r3, [r5, #0]
 8016e56:	f7ea faa3 	bl	80013a0 <_kill>
 8016e5a:	1c43      	adds	r3, r0, #1
 8016e5c:	d102      	bne.n	8016e64 <_kill_r+0x1c>
 8016e5e:	682b      	ldr	r3, [r5, #0]
 8016e60:	b103      	cbz	r3, 8016e64 <_kill_r+0x1c>
 8016e62:	6023      	str	r3, [r4, #0]
 8016e64:	bd38      	pop	{r3, r4, r5, pc}
 8016e66:	bf00      	nop
 8016e68:	2000871c 	.word	0x2000871c

08016e6c <_getpid_r>:
 8016e6c:	f7ea ba90 	b.w	8001390 <_getpid>

08016e70 <_init>:
 8016e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e72:	bf00      	nop
 8016e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e76:	bc08      	pop	{r3}
 8016e78:	469e      	mov	lr, r3
 8016e7a:	4770      	bx	lr

08016e7c <_fini>:
 8016e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e7e:	bf00      	nop
 8016e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e82:	bc08      	pop	{r3}
 8016e84:	469e      	mov	lr, r3
 8016e86:	4770      	bx	lr
